---

title: Secure capability negotiation between a client and server
abstract: Embodiments of the present disclosure provide for establishing an authenticated session between a client computing device and a remote computing device. In certain embodiments, a connection is established between the client computing device and the remote computing device. Once the connection is established, the client computing device sends a number of requests to the client computing device including a negotiate request, a setup request, and a validation request. In response to the requests, the client computing device receives a number of responses from the remote computing device including a negotiate response, setup response and a validation response. Once the responses have been received, a determination is made as to whether information contained in the validation response matches information contained in the negotiate response. If the information matches, an authenticated session is established between the remote computing device and the client computing device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924573&OS=08924573&RS=08924573
owner: Microsoft Corporation
number: 08924573
owner_city: Redmond
owner_country: US
publication_date: 20120312
---
In current computer to computer communication negotiations e.g. client server or server server it is difficult to ascertain whether a particular server is capable of implementing the same communication standards and security features of the client and vice versa. Typically if the client and server do not implement the same security features or communication standard one device may revert to an older communication standard that is accepted by the other device. However the reversion to the older communication standard may result in less secure communications between the client and the server. As a result sensitive data communicated between the client and server may be lost or compromised. For instance if an attack succeeds the attacker can gain confidential information inject false data in the system and deny the clients access to information.

Although relatively specific problems have been discussed it should be understood that the embodiments disclosed herein should not be limited to solving the specific problems identified in the background.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description section. This summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Embodiments of the present disclosure provide for establishing an authenticated session between a client computing device and a server or remote computing device. In certain embodiments a connection is established between the client computing device and the remote computing device. Once the connection is established the client computing device sends a number of requests to the remote computing device including a negotiate request a setup request and a validation request. In response to the requests the client computing device receives a number of responses from the remote computing device including a negotiate response setup response and a validation response. Once the responses have been received a determination is made as to whether information contained in the validation response matches information contained in the negotiate response. If the information matches an authenticated session is established between the remote computing device and the client computing device.

In another embodiment a method is provided for establishing an authenticated session between a remote computing device and a client computing device. In such embodiments the remote computing device receives a number of requests from a client computing device including a negotiate request a setup request and a validation request. In response to these requests the remote computing device sends a number of responses to the client computing device including a negotiate response and a setup response. When the remote computing device receives the validation request a determination is made as to whether information contained in the validation request matches information contained in the negotiate request. If the information in the validation request matches the information in the negotiate request the remote computing devices sends a validation response to the client computing device.

Embodiments disclosed herein may be implemented as a computer process a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process. The computer program product may also be a propagated signal on a carrier readable by a computing system and encoding a computer program of instructions for executing a computer process.

Various embodiments are described more fully below with reference to the accompanying drawings which form a part hereof and which show specific exemplary embodiments. However embodiments may be implemented in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of the embodiments to those skilled in the art. Embodiments may be practiced as methods systems or devices. Accordingly embodiments may take the form of a hardware implementation an entirely software implementation or an implementation combining software and hardware aspects. The following detailed description is therefore not to be taken in a limiting sense.

In embodiments the client may establish a session for accessing information such as files or objects stored on the server . As will be explained in detail below the session is established with the server via a series of requests and responses sent between the client and the server . In one embodiment the session is negotiated using a file access protocol such as a version of the server message block SMB protocol or a version of the network fileserver NFS protocol.

The client may be configured to establish a session with the server even if the server uses older versions of a protocol or older dialects of a protocol while still providing some level of security. For example if the client is configured to utilize the server message block version 2 SMB2 protocol but the server is not but is instead configured to utilize an older version of the server message block SMB protocol a specially signed validation request sent from the client to the server can help to ensure that a man in the middle is not impersonating the server by pretending to utilize an older version of the protocol that does not support the same security features as the newer version of the protocol utilized by the client.

For example each time a request or response is sent between the client and the server a man in the middle may intercept the packet change the data in the packet so that the man in the middle looks like it is an older version of a server that does not support certain security features of the protocol. If the client continues to communicate with the man in the middle sensitive information may be lost. However embodiments of the present disclosure may be used to verify that the communication between the client and the server is actually between the client and the server even if either the server is utilizing an older version of the communication protocol.

To establish an authenticated session with the server the client establishes a connection with the server . As discussed above the connection between the client and the server may be established using a network . Once the connection is established the client sends a negotiate request to the server . In certain embodiments the negotiate request is a packet that is used by the client to notify the server what dialects of the communication protocol the client understands.

For example if the communication protocol is an SMB2 protocol the negotiate request may include an identifier of a dialect of SMB2 supported by the client . In certain embodiments the client may support a plurality of dialects. For example the dialects listed in the negotiate request may include a SMB 2.002 dialect a SMB 2.1 dialect and or a SMB 2.2 dialect. Although specific dialects are mentioned in this example it is contemplated that the client may use more less and or different dialects or revisions thereof.

Continuing with the example above in certain embodiments the client may represent to the server that the client supports a particular version of a dialect e.g. SMB 2.2 of the communication protocol. However in addition to the specified dialect the client may also support previous versions of the dialect. Therefore if the server is not configured to support the SMB 2.2 dialect the server may select an older version of the dialect that is preferred by the server . For example the client may support communication with the server using the SMB 2.002 dialect if the SMB 2.002 dialect is the preferred dialect of the server . As discussed in more detail below the client may also be configured to communicate with the server using an older version of the communication protocol such as for example the SMB protocol instead of the SMB2 protocol if the server does not support the newer version.

In certain embodiments the negotiate request may also include additional information about the client . The additional information may include i a security mode that specifies whether security signatures are enabled on the client are required by the client or both enabled and required ii capability information that specifies among others whether the client supports a a Distributed File System DFS b leasing c multi credit operations d the establishment of multiple channels for a single session e persistent handles f directory leasing g encryption and the like and iii a client identifier generated by the client . Although specific additional client based information has been disclosed it is contemplated and those skilled in the art will recognize that the negotiate request may include additional information not specifically set forth above.

When the server receives the negotiate request the server responds with a negotiate response . In certain embodiments the negotiate response is a data packet that is sent by the server to notify the client of a preferred common dialect of the communication protocol. Continuing with the example from above if the communication protocol is the SMB2 protocol the server may select either the SMB 2.002 dialect the SMB 2.1 dialect or the SMB 2.2 dialect. In another embodiment the server may select a particular dialect e.g. SMB 2.1 but also indicate to the client that the server will support future dialect revisions.

The negotiate response may also include additional information about the server . In embodiments this information may include i a security mode that specifies whether security signatures are enabled on server required by the server or enabled and required by the server ii capability information of the server that specifies among others whether the server supports a a Distributed File System DFS b leasing c multi credit operations d the establishment of multiple channels for a single session e persistent handles f directory leasing g encryption and the like and iii a server identifier generated by the server that uniquely identifies the server . Although specific information has been disclosed it is contemplated that the negotiate request may include additional information not specifically set forth above. It is also contemplated that the server may have additional capabilities or fewer capabilities based on the dialect supported by the server . For example some of the capabilities of the server may be present if the server supports one dialect e.g. SMB 2.2 but may not be available if the server supports another dialect e.g. SMB 2.002 .

Once the negotiate response is received by the client the client sends a session setup request to the server . In certain embodiments the session setup request is a packet of data that is used by the client to request a new authenticated session with the server using a negotiated communication protocol or structure. For example if the communication protocol is the SMB2 protocol the session setup request requests a session using the SMB2 protocol upon recognizing that the server supports the SMB2 protocol.

In certain embodiments the session setup request packet includes additional information such as for example the security mode of the client one or more capabilities of the client and the like. In another embodiment other information is contained in the session setup request such as for example a password associated with the client may be used to generate a shared secret or session key. The session key may then be utilized by the client and the server during subsequent packet transmissions.

In response to receiving the session setup request the server sends a session setup response back to the client . In certain embodiments the session setup response is a data packet that includes information corresponding to whether a session between the client and the server was previously established or whether this session setup response must be handled as a new authentication. As discussed above the session setup response may include the shared secret or the session key that was generated based on information contained in the session setup request .

In certain embodiments the client and the server may be required to validate the negotiate request the negotiate response or both. In such instances the client may be configured to send a validation request to the server . The validation request is sent from the client to the server to verify that the information contained in the negotiate request packet was not altered or changed by a man in the middle attack.

The validation request is a data packet that includes the same information that was sent in the negotiate request . Specifically the validation request includes the capabilities of the client sent in the negotiate request the client identifier included in the negotiate request the security mode sent in the negotiate request and the dialect e.g. the highest protocol dialect version supported by the client sent in the negotiate request .

In certain embodiments the validate request is signed by the shared secret that was obtained during the session setup request and response exchange between the client and the server . Because the shared secret is known only to the client and the server a man in the middle cannot access and change the information contained in the validation request . As a result and as will be explained below the server may compare the information contained in the negotiate request to the information contained in the validation request . If the information contained in the validation request is different than the information contained in the negotiate request the server is able to determine that a man in the middle changed the information in the negotiate request . This determination is made because the validation request was signed using the shared secret while the negotiate request was not signed. Thus any differences between the information contained in the validation request and the negotiate request may be due to a man in the middle changing the information in the negotiate request . As a result of the information in the two requests being different the server may terminate the connection to the client .

If however the information contained in the validation request matches the information contained in the negotiate request the server may be configured to send a validation response to the client . In embodiments the validation response is a data packet that includes the same information that was included in the negotiate response . Specifically the validation response may include the capabilities of the server included in the negotiate response the server identifier included in the negotiate response the security mode of the server included in the negotiate response and the dialect supported by the server included in the negotiate response . As with the validation request the validation response may be signed by the shared secret to ensure that a man in the middle cannot change the information in the validation response .

In certain embodiments when the client receives the validation response the client compares the information contained in the validation response with information contained in the negotiate response . If the information contained in the validation response does not match the information contained in the negotiate response e.g. due to a man in the middle attack the client may be configured to terminate the connection with the server .

As discussed above because the validation response was signed with the shared secret that is known only to the client and the server a man in the middle cannot access and change the information contained in the validation response . Therefore if the information contained in the validation response does not match the information in the negotiate response it is likely that a man in the middle changed the information in the negotiate response in an attempt to impersonate the server .

In another embodiment it is contemplated that the server may not recognize the validation request from the client . However in certain protocols such as for example the SMB or SMB2 protocols when a server receives a signed request e.g. a request that is signed with a shared secret such as for example the validation request the server is configured to send back a signed response that indicates that the server does not understand the request. However because the response from the server is signed with the shared secret that is known only to the client and the server the client may be assured that the server is a legitimate server that is merely supporting an older version of the protocol and not a man in the middle. A man in the middle cannot imitate the signed response from the server even a signed response that indicates that the request is unsupported because the man in the middle does not have access to the shared secret. Therefore the client may proceed to establish an authenticated session with the server using an older communication protocol.

Method begins at operation in which a negotiate request is sent from the client computing device to the remote computing device. In certain embodiments the negotiate request includes a first set of information. As discussed above the first set of information may include dialects of the communication protocol utilized by the client computing device and may also include additional information about the client computing device. In embodiments this additional information may include a security mode of the client computing device capability information of the client computing device and or an identifier of the client computing device.

In response to the negotiate request a negotiate response is received from the remote computing device. In certain embodiments the negotiate response includes a second set of information. The second set of information is associated with the first set of information and may include the preferred common dialect of the remote computing device. Additionally the second set of information may include a security mode of the remote computing device capability information of the remote computing device and an identifier of the remote computing device.

Once the negotiate response has been received by the client computing device flow proceeds to operation in which the client computing device sends a setup request to the remote computing device. In certain embodiments the setup request and a corresponding received setup response generates a shared secret between the client computing device and the remote computing device. For example the SMB2 protocol may rely on authentication through the use of the Generic Security Service Application Programming Interface GSS API which in turn may rely on the Kerberos Protocol Extensions. Furthering the example when establishing the session the client computing device may call a GSS authentication protocol which generates a token which is shared with the remote computing device. The remote computing device may then authenticate the token and generate the shared secret.

The setup request and setup response may also be used to determine whether a session was previously established between the remote computing device and the client computing device. The session setup request and response may also indicate whether the previously established session if identified will be used for the current session or whether a new session will be created.

Flow then proceeds to operation in which the client computing device sends a validation request to the remote computing device. In certain embodiments the validation request includes a third set of information. In such embodiments the third set of information is equivalent to the first set of information contained in the negotiate request. Thus if the first set of information indicated that the client computing device utilizes the SMB 2.2 dialect of the SMB2 protocol this dialect information would also be contained in the third set of information.

However in order to ensure that the information contained in the validation request is not compromised the validation request may be signed with the shared secret that was generated from the setup request and response. Because the validation request is signed with the shared secret and the shared secret is known only by the client computing device and the remote computing device the information contained in the validation request cannot be accessed changed or duplicated by a man in the middle.

Once the validation request has been sent to the remote computing device flow proceeds to operation in which a determination is made as to whether a validation response has been received or whether the session between the client computing device and the remote computing device has timed out. In certain embodiments the validation response may include a fourth set of information. As will be discussed below the fourth set of information is equivalent to the second set of information contained in the negotiate response.

In certain embodiments a session times out when a predetermined amount of time elapses between when the client computing device sends a request e.g. the validation request and when if at all the client computing device receives a response e.g. the validation response from the remote computing device. If the predetermined amount of time elapses and the client computing device does not receive the validation response flow proceeds to operation and the connection between the client computing device and the remote computing device is terminated.

However if a validation response is received prior to the session timing out flow proceeds to operation in which a determination is made as to whether the validation response has been signed with the shared secret. In certain embodiments the client computing device may utilize a communication protocol that requires that all response packets sent from the remote computing device to the client computing device be signed with a shared secret if the initial request packet was also signed with the shared secret. Therefore if the response is not signed this may be an indication that the validation response was intercepted and a man in the middle is attempting to impersonate the remote computing device. Therefore if the validation response is not signed with the shared secret flow proceeds to operation and the connection is terminated.

If the validation response is signed with the shared secret flow proceeds to operation in which a determination is made as to whether the validation request was recognized by the remote computing device. As discussed above the client computing device may utilize various security settings that the remote computing device does not understand or recognize due to the fact that the remote computing device is running an older version of the communication protocol.

However even if the validation response from the remote computing device indicates that the remote computing device does not recognize the request it may be desirable to connect to the remote computing device even though the remote computing device is older version or is executing an older version of the communication protocol. Therefore flow proceeds to operation in which an authenticated session is setup with the remote computing device using an alternative communication protocol or an alternative version of the communication protocol. The operation is shown in dashed lines to indicate that is an optional step used in some embodiments. In such cases although the request was not recognized by the remote computing device the client computing device may be assured that the response is actually from the remote computing device because the unrecognized request response was signed using the shared secret which was known only by the client computing device and the remote computing device.

If the validation request was recognized by the remote computing device flow proceeds to operation in which a determination is made as to whether the information contained in the validate response is equivalent to the information contained in the negotiate response. If the information contained in the negotiate response is not equivalent to the information contained in the validation response flow proceeds to operation and the connection is terminated. Those skilled in the art will appreciate that a comparison of some i.e. less than all of the information in the negotiate and validate responses may be adequate to satisfy an analysis as to whether the same server sent both items.

In certain embodiments the connection is terminated at this stage because if the information contained in the negotiate response is not equivalent to the information contained in the validation response it is likely that a man in the middle intercepted the negotiate request and changed the information therein. As discussed because the validation response is signed with the shared secret that is known only to the client computing device and the remote computing device a man in the middle cannot access the information in the validation response and change the information therein.

However if the information in the validation response is equivalent to the information contained in the negotiate response flow proceeds to operation and an authenticated session is established between the remote computing device and the client computing device using the negotiated protocol.

Method begins at operation in which a negotiate request is received from a client computing device. In certain embodiments the negotiate request includes a first set of information. As discussed above the first set of information may include a dialect of the communication protocol utilized by the client computing device a security mode of the client computing device capability information of the client computing device and an identifier of the client computing device.

In response to the negotiate request flow proceeds to operation in which the remote computing device sends a negotiate response to the client computing device. In certain embodiments the negotiate response includes a second set of information. The second set of information is associated with the first set of information and may include the preferred common dialect of the remote computing device a security mode of the remote computing device capability information of the remote computing device and an identifier of the remote computing device.

Flow then proceeds to operation in which the remote computing device receives a setup request from the client computing device. In certain embodiments the setup request and a corresponding setup response generates a shared secret that may be used to encode subsequent packets sent between the client computing device and the remote computing device. The setup request and setup response may also be used to determine whether a session was previously established between the remote computing device and the client computing device and whether the previously established session if identified will be used for the current session.

Flow then proceeds to operation in which a validation request is received from the client computing device. In certain embodiments the validation request includes a third set of information. In embodiments the third set of information is equivalent to the first set of information contained in the negotiate request. Once the validation request is received flow proceeds to operation in which a determination is made as to whether the validation request is signed with the shared secret.

If the validation request is not signed with the shared secret flow proceeds to operation and the session between the client computing device and the remote computing device is terminated. As discussed above if the validation request is not signed with the shared secret there is no guarantee that the information contained in the validation request was not altered by a man in the middle. However if the validation request is signed flow proceeds to operation and a determination is made as to whether the information in the validation request is equivalent to the information contained in the negotiate request. Those skilled in the art will appreciate that a comparison of some i.e. less than all of the information in the negotiate and validate requests may be adequate to satisfy an analysis as to whether the same client sent both items.

If the information contained in the negotiate request is not equivalent to the information contained in the validation request flow proceeds to operation and the connection is terminated. As previously discussed the connection is terminated because if the information contained in the negotiate request is not equivalent to the information contained in the validation request it is likely that the negotiate request was intercepted e.g. by a man in the middle and the information in the packet was altered. However if the information in the validation request is equivalent to the information contained in the negotiate request flow proceeds to operation in which a validation response is sent to the client computing device.

In certain embodiments the validation response may include a fourth set of information that corresponds to the second set of information. Additionally the validation response may be signed by the shared secret. In another embodiment the validation response may include an indication that the validation request was not recognized by the remote computing device i.e. the remote computing device is executing an older version of the communication protocol that does not support enhanced security features . However because the validation response was signed using the shared secret the client computing device may utilize an older version of the communication protocol to establish the session with remote computing device with the assurance that a man in the middle is not impersonating the remote computing device.

Utilizing the embodiments described above an authenticated session may be established between a client computing device and a remote computing device without sacrificing the added security of newer communication protocols even if the remote computing device does not recognize the security features of the newer communication protocols.

While the various embodiments have been described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a computer those skilled in the art will recognize that the embodiments disclosed herein may also be implemented in combination with other program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

The embodiments and functionalities described herein may operate via a multitude of computing systems including without limitation desktop computer systems wired and wireless computing systems mobile computing systems e.g. mobile telephones netbooks tablet or slate type computers notebook computers and laptop computers hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers and mainframe computers. illustrates an exemplary tablet computing device executing embodiments disclosed herein. For example the tablet computing device may be sending and receiving one or more of the requests and responses described above. In addition the embodiments and functionalities described herein may operate over distributed systems e.g. cloud based computing systems where application functionality memory data storage and retrieval and various processing functions may be operated remotely from each other over a distributed computing network such as the Internet or an intranet. User interfaces and information of various types may be displayed via on board computing device displays or via remote display units associated with one or more computing devices. For example user interfaces and information of various types may be displayed and interacted with on a wall surface onto which user interfaces and information of various types are projected. Interaction with the multitude of computing systems with which embodiments of the present disclosure may be practiced include keystroke entry touch screen entry voice or other audio entry gesture entry where an associated computing device is equipped with detection e.g. camera functionality for capturing and interpreting user gestures for controlling the functionality of the computing device and the like. and the associated descriptions provide a discussion of a variety of operating environments in which embodiments of the present disclosure may be practiced. However the devices and systems illustrated and discussed with respect to are for purposes of example and illustration and are not limiting of a vast number of computing device configurations that may be utilized for practicing embodiments of the present disclosure described herein.

As stated above a number of program modules and data files may be stored in the system memory . While executing on the processing unit the program modules may perform processes including for example one or more of the stages of the methods described herein. The aforementioned process is an example and the processing unit may perform other processes. Other program modules that may be used in accordance with embodiments of the present disclosure may include electronic mail and contacts applications word processing applications spreadsheet applications database applications slide presentation applications drawing or computer aided application programs etc.

Furthermore embodiments of the present disclosure may be practiced in an electrical circuit comprising discrete electronic elements packaged or integrated electronic chips containing logic gates a circuit utilizing a microprocessor or on a single chip containing electronic elements or microprocessors. For example embodiments of the present disclosure may be practiced via a system on a chip SOC where each or many of the components illustrated in may be integrated onto a single integrated circuit. Such an SOC device may include one or more processing units graphics units communications units system virtualization units and various application functionality all of which are integrated or burned onto the chip substrate as a single integrated circuit. When operating via an SOC the functionality described herein may be operated via application specific logic integrated with other components of the computing device on the single integrated circuit chip . Embodiments of the present disclosure may also be practiced using other technologies capable of performing logical operations such as for example AND OR and NOT including but not limited to mechanical optical fluidic and quantum technologies. In addition embodiments of the present disclosure may be practiced within a general purpose computer or in any other circuits or systems.

The computing device may also have one or more input device s such as a keyboard a mouse a pen a sound input device a touch input device etc. The output device s such as a display speakers a printer etc. may also be included. The aforementioned devices are examples and others may be used. The computing device may include one or more communication connections allowing communications with other computing devices . Examples of suitable communication connections include but are not limited to RF transmitter receiver and or transceiver circuitry universal serial bus USB parallel or serial ports and other connections appropriate for use with the applicable computer readable media.

Embodiments of the present disclosure for example may be implemented as a computer process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage media readable by a computer system and encoding a computer program of instructions for executing a computer process.

The term computer readable media as used herein may include computer storage media and communication media. Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. The system memory the removable storage device and the non removable storage device are all computer storage media examples i.e. memory storage. Computer storage media may include but is not limited to RAM ROM electrically erasable read only memory EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store information and which can be accessed by the computing device . Any such computer storage media may be part of the computing device .

Communication media may be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may describe a signal that has one or more characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF infrared and other wireless media.

One or more application programs may be loaded into the memory and run on or in association with the operating system . Examples of the application programs include phone dialer programs e mail programs personal information management PIM programs word processing programs spreadsheet programs Internet browser programs messaging programs and so forth. The system also includes a non volatile storage area within the memory . The non volatile storage area may be used to store persistent information that should not be lost if the system is powered down. The application programs may use and store information in the non volatile storage area such as e mail or other messages used by an e mail application and the like. A synchronization application not shown also resides on the system and is programmed to interact with a corresponding synchronization application resident on a host computer to keep the information stored in the non volatile storage area synchronized with corresponding information stored at the host computer. As should be appreciated other applications may be loaded into the memory and run on the mobile computing device .

The system has a power supply which may be implemented as one or more batteries. The power supply might further include an external power source such as an AC adapter or a powered docking cradle that supplements or recharges the batteries.

The system may also include a radio that performs the function of transmitting and receiving radio frequency communications. The radio facilitates wireless connectivity between the system and the outside world via a communications carrier or service provider. Transmissions to and from the radio are conducted under control of the operating system . In other words communications received by the radio may be disseminated to the application programs via the operating system and vice versa.

The radio allows the system to communicate with other computing devices such as over a network. The radio is one example of communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. The term computer readable media as used herein includes both storage media and communication media.

This embodiment of the system provides notifications using the visual indicator that can be used to provide visual notifications and or an audio interface producing audible notifications via the audio transducer . In the illustrated embodiment the visual indicator is a light emitting diode LED and the audio transducer is a speaker. These devices may be directly coupled to the power supply so that when activated they remain on for a duration dictated by the notification mechanism even though the processor and other components might shut down for conserving battery power. The LED may be programmed to remain on indefinitely until the user takes action to indicate the powered on status of the device. The audio interface is used to provide audible signals to and receive audible signals from the user. For example in addition to being coupled to the audio transducer the audio interface may also be coupled to a microphone to receive audible input such as to facilitate a telephone conversation. In accordance with embodiments of the present disclosure the microphone may also serve as an audio sensor to facilitate control of notifications as will be described below. The system may further include a video interface that enables an operation of an on board camera to record still images video stream and the like.

A mobile computing device implementing the system may have additional features or functionality. For example the mobile computing device may also include additional data storage devices removable and or non removable such as magnetic disks optical disks or tape. Such additional storage is illustrated in by the non volatile storage area . Computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data.

Data information generated or captured by the mobile computing device and stored via the system may be stored locally on the mobile computing device as described above or the data may be stored on any number of storage media that may be accessed by the device via the radio or via a wired connection between the mobile computing device and a separate computing device associated with the mobile computing device for example a server computer in a distributed computing network such as the Internet. As should be appreciated such data information may be accessed via the mobile computing device via the radio or via a distributed computing network. Similarly such data information may be readily transferred between computing devices for storage and use according to well known data information transfer and storage means including electronic mail and collaborative data information sharing systems.

One skilled in the relevant art may recognize however that the embodiments may be practiced without one or more of the specific details or with other methods resources materials etc. In other instances well known structures resources or operations have not been shown or described in detail merely to avoid obscuring aspects of the embodiments.

The description and illustration of one or more embodiments provided in this application are not intended to limit or restrict the scope of the claims in any way. The embodiments examples and details provided in this application are considered sufficient to convey possession and enable others to make and use the best mode of the claimed subject matter. The claimed subject matter should not be construed as being limited to any embodiment example or detail provided in this application. Regardless of whether shown and described in combination or separately the various features both structural and methodological are intended to be selectively included or omitted to produce an embodiment with a particular set of features. Having been provided with the description and illustration of the present application one skilled in the art may envision variations modifications and alternate embodiments falling within the spirit of the broader aspects of the general inventive concept embodied in this application that do not depart from the broader scope of the claims.

