---

title: Active non-volatile memory post-processing
abstract: A computing node includes an active Non-Volatile Random Access Memory (NVRAM) component which includes memory and a sub-processor component. The memory is to store data chunks received from a processor core, the data chunks comprising metadata indicating a type of post-processing to be performed on data within the data chunks. The sub-processor component is to perform post-processing of said data chunks based on said metadata.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09619430&OS=09619430&RS=09619430
owner: Hewlett Packard Enterprise Development LP
number: 09619430
owner_city: Houston
owner_country: US
publication_date: 20120224
---
This invention has been made with government support under Contract No. DE SC0005026 awarded by The Department of Energy. The government has certain rights in the invention.

High Performance Computing HPC refers to large scale processing that is often performed by computer clusters. HPC is used to solve complicated problems that involve large amounts of data often in the petabyte range. As the multiple nodes within the cluster process the data the output is transferred over Input Output I O channels to be placed onto a large scale persistent data storage system such as a data warehouse. This data is often stored across several nodes.

Data staging refers to the process in which the movement of data is partly replaced with or supplemented by computations that perform post processing of the data before moving it across I O channels to persistent storage. Such post processing is used to reformat sort or compress the data so that it is in a form suitable for more efficient access or data analytics. Due to the high volume of data undergoing post processing bottlenecks can occur in data staging process and I O traffic between the processor and the storage systems.

Throughout the drawings identical reference numbers designate similar but not necessarily identical elements.

As mentioned above due to the high volume of data undergoing post processing bottlenecks can occur in data staging process and I O traffic between the processor and the storage systems. In light of this and other issues the present specification discloses methods and systems that perform post processing in an efficient manner through use of active Non Volatile Random Access Memory NVRAM components.

According to certain illustrative examples an active NVRAM component includes a piece of non volatile memory and a sub processing unit designed specifically for performing post processing of data. The application that runs on the main processing cores is designed to output data in chunks for placement into the memory component of the active NVRAM component. These chunks of data will include metadata. The metadata includes various pieces of information such as the state of the data its memory location its size and particularly what type of post processing is to be performed on that data.

The active NVRAM component utilizes a queue to determine the order in which the data chunks are to be processed. This queue may be a global queue that indicates the order in which chunks are to be processed across multiple nodes. The application that places the data chunks into the NVRAM assigns an order identifier to the chunks. The sub processing unit of the active NVRAM component looks at the queue and determines if the next chunk to be processed is within its corresponding memory component. If so it will fetch that chunk and process it according to the metadata attached to that chunk.

Through use of methods and systems embodying principles described herein the performance of I O post processing is increased. Specifically use of the active NVRAM component relieves the main processing cores from the extra processing. Furthermore the data is efficiently post processed before being placed into a long term persistent storage. Moreover the active NVRAM provides an efficient checkpoint mechanism.

In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present systems and methods. It will be apparent however to one skilled in the art that the present apparatus systems and methods may be practiced without these specific details. Reference in the specification to an example or similar language means that a particular feature structure or characteristic described in connection with that example is included as described but may not be included in other examples.

Throughout this specification and in the appended claims the terms software or firmware refer to machine readable instructions.

Referring now to the figures is a diagram showing an illustrative physical computing node that is one of many computing nodes in a high performance computing cluster. According to certain illustrative examples the physical computing node includes a memory having software and data stored thereon. The physical computing node also includes a number of processors or processor cores an active NVRAM component and a network interface .

There are many types of memory available. Some types of memory such as solid state drives are designed for storage. These types of memory typically have large storage volume but relatively slow performance. Other types of memory such as those used for Random Access Memory RAM are optimized for speed and are often referred to as working memory. The various forms of memory may store information in the form of software and data . The memory of the physical computing node may be a temporary storage of processed data before that data is transferred to a long term persistent storage system such as a data warehouse. A data warehouse stores large amounts of data that is formatted for reporting and analysis.

The physical computing node also includes a number of processors or processor cores . These processors act in concert to perform high performance computations. Various parallel processing techniques can be used among the many processors. In general processors are used for executing the software and using or updating the data stored in memory . The software may include an operating system. An operating system allows other applications to interact properly with the hardware of the physical computing system. Such other applications may include a variety of high performance applications.

In some examples the active NVRAM component may be part of a module that is communicatively coupled to the processors or processor cores . The active NVRAM component includes its own processing circuitry designed specifically for performing post processing of data sent therein. Each of the processors or processor cores may send data to the active NVRAM for post processing.

A network interface may provide a manner for the computing node to interact with other computing nodes and or systems. Specifically the network interface allows the computing node to coordinate processing with other computing nodes and to transmit data to other locations for storage. Various transfer protocols may be used to transfer this data.

As mentioned above the processor cores of the computing nodes execute various high performance computing applications. These applications output data in chunks to their respective active NVRAM software components . The active NVRAM components then perform post processing of the data chunks.

The processor cores of the computing nodes interact according to a producer consumer model. Specifically the processor cores produce the data chunks. These data chunks are consumed by the active NVRAM. The processor cores can then continue their normal operations and no longer have any direct control over the data chunks. By not having the main processors perform the post processing that is performed by the active NVRAM components the processing nodes are able to devote more time to processing the application itself.

After completing post processing the data is sent over a network interconnect to a file system . A file system is a mechanism for storing data on non volatile storage systems for later retrieval. The file system for large scale high performance computing often stores data across multiple storage nodes . These storage nodes may be various hard disk drives or solid state drives.

Each process creates a stream of data that is sent out for post processing. This data can be divided up into chunks. In the example of two processes are shown which are running on the same processor core. However a practical application may have a much larger number of processes being executed by the processor. Process creates output data that is divided up into multiple chunks . Likewise process creates output data that is divided into multiple chunks . These chunks can be divided such that they are suitable for post processing by an active NVRAM component.

The memory component is illustrated as two columns. The first column is the metadata column. The second column is the actual data column . The metadata includes information about its associated data chunk. This information may include but is not limited to the physical address within the memory component at which the data chunk is stored the size of the data chunk the type of data within the data chunk and the current state of that data among others. Additionally the metadata for each chunk indicates what type of post processing is to be performed on the data within the chunk. For example the metadata may indicate that the data is to be sorted reformatted or compressed. The metadata may also describe exactly how it is to be sorted or compressed. There are several ways in which data may be merged or compressed and different methods are often application specific.

In some cases the active NVRAM may serve as a consumer to multiple processor cores. Thus each processor core will write data to the active NVRAM. Various locking mechanisms can be used to ensure that there are no conflicts if multiple cores attempt to write to the active NVRAM component simultaneously. Such locking mechanisms may include phase locks or spinlocks. Such locks place a processing thread in a loop until the lock is open i.e. the active NVRAM is available . Such locking mechanisms are efficient when there is a high probability that the lock will be open. Because the active NVRAM is more likely than not to be open the locking mechanism effectively prevents conflicts.

The post processing itself is actually performed by a sub processor component within the active NVRAM component . This sub processor component may be a simpler processor than the main processor core . It may be designed for a subset of operations. For example the sub processor component may be designed for a particular set of post processing operations. The applications running on the main processor core can then write instructions on what types of processes to perform on the data within the metadata of each chunk.

The order in which the sub processor component processes each data chunk from the memory component is determined by a queue . When writing data chunks to the memory component of the active NVRAM component the process writing those chunks may also update the queue. The sub processor component can then look to the queue to determine which data chunk to process next. After determining which chunk is to be processed next the sub processor component will then fetch that chunk from the memory component and apply the appropriate processing operations. The memory component can then be updated indicating that a particular data chunk stored therein has been processed.

In some cases the active NVRAM component is designed to process data chunks in concert with other active NVRAM components associated with different nodes. These nodes may be different processing cores within the same chip. Additionally or alternatively these nodes may be from different computing nodes within a computing node cluster. Either way the application that is being executed across these nodes may include within the metadata an order identifier for each data chunk. The queue may thus be a global queue accessible to all NVRAM components.

The order identifier indicates which chunk of data is to be processed next. The sub processor component thus looks at the next data chunk to be processed and first determines if the data chunk to be processed is stored within its corresponding memory component . If the data chunk to be processed next is not stored within the corresponding memory component then the sub processor component does not have to perform any processing at this time. However if the data chunk to be processed next is in fact stored within the corresponding memory component then the sub processor component takes that chunk from memory and processes it according to the instructions within the metadata for that chunk.

The data chunk may be placed back into the active NVRAM after being processed by the sub processed component. The metadata for that processed data chunk will then indicate that the data has been processed. Processed data can then be transferred asynchronously to the file system for long term storage.

With data being processed across several active NVRAM components it is beneficial to maintain a balance of processing across those nodes. If one node is processing a disproportionate number of data chunks relative to the other nodes then the performance will degrade. To balance the processing of data across multiple active NVRAM components the order identifiers can be assigned to the chunks according to a balanced tree data structure. A data structure is a form of data representation. A tree data structure is one in which data is organized by a root node having a number of child nodes. Each of those child nodes also has child nodes.

One example of a balanced tree data structure is a red black tree. A red black tree is a type of binary tree and thus each node includes up to two child nodes. In a red black tree each node is also assigned a color attribute of either red or black. The root node is always black. The child nodes of black nodes are red and the child nodes of red nodes are black. The red black tree is a self balancing tree. This means that an insertion of an additional node automatically rebalances the tree.

The order identifiers can be assigned such that they correspond with the order of nodes within a red black tree. The order in which nodes within the tree are processed i.e. removed from the tree is such that the tree rebalances itself after each removal and the properties of the tree hold. Thus if the data chunks are processed in accordance with the ordering of the data tree structure the processing of the nodes will be efficiently balanced.

Node includes data chunks being assigned order ID order ID order ID and order ID . The order in which these chunks are to be processed is determined according to a red black tree structure. This is referred to as the local sequence tree. Likewise node includes data chunks being assigned order ID order ID and order ID . This forms the local sequence tree for node .

Each of the nodes will then send its local sequence tree to a central place to form a global sequence tree . The global sequence tree is a merger of all the local sequence trees such that the constraints of the tree hold and the tree are automatically balanced. The data chunks can then be processed in the order according to the global sequence tree. Thus the global active queue can be designed to reflect the ordering of the global sequence tree .

Using active NVRAM components according to the above description provides a useful checkpoint mechanism. A checkpoint mechanism captures the state of an application and stores that state into memory for recovery in case of a system failure. Checkpoint mechanisms can consume a lot of processing time for high performance computing but are very helpful. Thus the active NVRAM is especially helpful for speeding up checkpoint operations.

In conclusion through use of methods and systems embodying principles described herein the performance of I O post processing is increased. Specifically use of the active NVRAM component relieves the main processing cores from the extra processing. The use of NVRAM also relieves the main processing core of moving the data across a network to special post processing nodes thus avoiding data movement delays. Furthermore the data is efficiently post processed before being placed into a long term persistent storage. Moreover the active NVRAM provides an efficient checkpoint mechanism.

The preceding description has been presented to illustrate and describe examples of the principles described. This description is not intended to be exhaustive or to limit these principles to any precise form disclosed. Many modifications and variations are possible in light of the above teaching.

