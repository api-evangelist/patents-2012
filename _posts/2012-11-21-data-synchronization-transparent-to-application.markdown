---

title: Data synchronization transparent to application
abstract: Synchronization of data accessible by an application program is performed transparent to the application program. After a data item is instantiated by the application program, the synchronization engine performs data synchronization without or with minimal intervention of the application program. The synchronization engine may be part of an operating system. The synchronization engine is preinstalled on a computing device; therefore, application program developers can simply define whether the data items associated with the application programs should be syncable, and if so, to what extent the data items should be syncable. The application program developer is relieved of the task of developing the synchronization engine or other software components associated with data synchronization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09037751&OS=09037751&RS=09037751
owner: QUALCOMM Incorporated
number: 09037751
owner_city: San Diego
owner_country: US
publication_date: 20121121
---
This application is a continuation of U.S. patent application Ser. No. 12 764 379 filed on Apr. 21 2010 now U.S. Pat. No. 8 346 972 B2 and titled Data Synchronization Transparent to Application which is a continuation of U.S. patent application Ser. No. 11 761 834 filed on Jun. 12 2007 now U.S. Pat. No. 7 734 828 B2 both of which are incorporated by reference herein in their entirety.

The present invention relates generally to synchronizing data among multiple computing devices or processes and more specifically to a software architecture for synchronizing data among multiple computing devices or processes in a manner transparent to application programs that access the synchronized data.

Handheld devices and portable computers are becoming increasingly more powerful and functional devices. Many handheld devices are now multifunction devices with multiple device roles including personal digital assistant PDA cellular phone portable media player voice recorder video recorder global positioning system GPS camera and electronic file storage. Similarly portable computers now have increased functionality and mobility. Because of these improvements in handheld devices and portable computers data is commonly shared among multiple handheld devices and portable computers with multiple devices accessing and modifying shared data files.

Additionally advances in wireless Internet coverage and in wireless network capabilities made a broad range of data such as electronic files image files audio files and video files accessible to mobile communication devices laptop computers and other types of portable communication systems. Network improvements have also allowed electronic data to be accessed and modified from virtually any location. This combination of improved wireless network access and improved portable device functionality has caused users increasingly to access and modify electronic data from multiple often widely separated locations using multiple different portable devices.

Because multiple devices can access and modify the same data the different data modifications should be synchronized to ensure the each device accesses the most recent version of the data. For example a user may use one portable device to edit an electronic document in one location and later use a different portable device to access the same electronic document from a different location. Synchronization ensures that the electronic document accessed by the second portable device includes the modifications made using the first portable device. Synchronization is also used where a multiple users can access and modify the same data from multiple devices in various locations requiring the data to be synchronized among the multiple computing devices.

In developing any application program that uses data synchronized among multiple devices application program developers are given the task of developing synchronization schemes for synchronizing the data associated with an application program. Designing and programming algorithms for synchronizing the data involves developing data structures and schemes to resolve conflicts associated with the synchronized data. Depending on the complexity of the handheld device or portable computers developing the algorithms for data synchronizing can become a task taking up significant amount of time and resource of the application program developers.

Further the synchronization algorithm of the application program may also be prone to errors once deployed on the handheld devices or portable computers due to incompatibility with other applications using the same or different synchronization schemes. As the number of application programs and the number of corollary components for performing synchronization increase the handheld devices or portable computers are more likely to encounter conflicts or errors during the synchronization operations. Absent careful designing by the application programmers the errors during the synchronization operations can result in corruption of the data or deadlocks among different application programs.

Also different data synchronization schemes used by different application may lead to wasted resources of the handheld device or portable computers. Each application program uses different or separate software components data structure and communication sessions for the data synchronization. Therefore the amount of resources for data synchronization must be increased as the number of installed application programs is increased. Using multiple software components data structure and communication sessions results in inefficient use of the resources.

Therefore there is a need for a method that facilitates the application developers including third parties to develop the application programs that need data synchronization. There is also a need for a synchronization method that is transparent to the application programs that use the synchronized data. There is also a need to provide a data synchronization scheme that reduces errors associated with the synchronization operations. There is also a need for a data synchronization scheme that efficiently uses the resources of the computing devices.

Embodiments of the invention separate functionality of data synchronization from other functionality of application programs. The functionality associated with the data synchronization is implemented by a synchronization engine that is separate from the application program. An application program does not need to contain any codes or minimal amount of codes for performing synchronization operations. By separating the functionality associated with synchronization it becomes possible to perform synchronization operation in a manner transparent to the application program. Also developing of the application program is simplified.

Embodiments of the invention allow an application program to instantiate a data item with reference to synchronization data structure in a synchronization engine. The synchronization data structure in the synchronization engine defines a data structure that is compatible with the synchronization engine for synchronization the instantiated data item via the synchronization engine. By referencing the synchronization data structure during instantiation of the data item the data item instantiated by the application program becomes syncable via the synchronization engine.

In one embodiment different application programs use the same synchronization engine to perform data synchronization of the data items associated with the application programs. Each application program instantiates the data item associated with the application by referencing the synchronization data structure in the synchronization engine. Therefore the data item conforms to the data structure as defined by the synchronization data structure of the synchronization engine regardless of the application program the data item is associated with.

In one embodiment the synchronization data structure of the synchronization engine represents a data structure associated with synchronizing the data with the other computing device. The data structure includes a class with a first attribute for defining whether a category of the data item is syncable with the other computing device a second attribute for defining whether the data item can be individually configured to be syncable and a third attribute for defining whether certain fields of the data item can be individually configured to be syncable.

The features and advantages described in the specification are not all inclusive and in particular many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter.

The embodiments of the invention will be described below with reference to the accompanying drawings. Like reference numerals are used for like elements in the accompanying drawings.

In the embodiments synchronization of data associated with an application program is performed transparent to the application program. After a data item is instantiated by the application program a synchronization engine performs synchronization without or with minimal intervention of the application program. The application program references the synchronization data structure of the synchronization engine when instantiating the data items. Thus the data items instantiated by the application program becomes syncable through the synchronization engine without additional code or functionality within the application program to implement synchronization operations. The synchronization engine is preinstalled on a computing device as part of the operating system or a separate application programming interface API therefore application program developers may simply define whether the data items associated with the application programs should be syncable and if so to what extent the data items should be syncable.

A synchronization engine a software component that is implemented as an application programming interface API on a layer above the operating system or is part of an operating system. The synchronization engine is separate from the application program. The synchronization engine performs operations for synchronizing data among multiple computing devices. The operations performed by the synchronization engine may include among other operations identifying whether a data item stored on a computing device has a counterpart data item stored on another computing device setting and enforcing priority between the data items stored on multiple computing devices transmitting the data item from one computing device to another and maintaining a time stamp indicative of the time the data item was synchronized.

The synchronization data structure is information stored on the synchronization engine defining a data structure for data items syncable via the synchronization engine. A function call to the synchronization engine may be made to reference the synchronization data structure to instantiate syncable data items. The application program references the synchronization data structure to instantiate the data item associated with the application program. The synchronization data structure for example may be information representing a class in an object oriented program.

A data item refers to a piece of data that the application program identifies as a single unit. For example the data item may be a calendar entry for a personal scheduler program contact information for a contact management program a single or a thread of email for an email client program or an image file for an image viewer program. One data item may be associated with or accessible by one or more application programs.

Syncable data items are data items that can be synchronized with data items stored e.g. on another computing device or used by another application via the synchronization engine. A category of data items may be configured to be syncable. Alternatively only an individual data item or certain fields of the data items may be configured as syncable.

The processor executes instructions and manipulates data necessary for the data synchronization. The processor may be a microprocessor such as an ARM processor by ARM Inc. a Pentium processor by Intel Corp. or an Athlon XP by Advanced Micro Devices an ASIC a FPD Field Programmable Device a microcontroller or any other device capable of executing instructions and manipulating data.

The memory module stores program codes executed by the processor to perform among other operations data synchronization and tasks of the operational system and tasks of the application programs. The memory module also stores data items associated with the application programs. The memory module may be a non volatile type persistent memory such as a hard disk a compact flash or an EEPROM. The memory module may be also be a volatile type such as a random access memory a buffer a cache a register a combination of non volatile and volatile memory or other device capable of storing instructions and data. The program codes and data items stored on the memory module are explained in detail below with reference to .

The communication module performs a peer to peer communication with other computing devices or communicates with the remote server via the network .

The output module includes an output controller not shown that is coupled to output devices such as a display device or a speaker. The input includes an input controller not shown that is coupled to an input device such as a keypad or touch screen to receive inputs from a user. The input module and the output module may be implemented as hardware software or a combination thereof. The input module and the output module may also be capable of servicing other input output modules or peripheral devices associated with the computing device .

The processor the memory module the communication module the output module and the input module communicate with each other through a conventional bus .

The application programs include programs including but not limited to video and music players e.g. Pocket Tunes Kinoma Windows Media Player RealPlayer iTunes PowerDVD QuickTime and Winamp web browsers e.g. NetFront Microsoft Internet Explorer Mozilla Firefox and Apple Safari image viewers e.g. VD Image Viewer and ADCSee document viewers e.g. Adobe Acrobat and word processor applications e.g. Documents To Go Microsoft Word and WordPerfect . Some of the application programs may require their data to be syncable with other computing devices while other application programs may not require any of their data to be syncable or even require that the data not be syncable. One embodiment facilitates configuration of synchronization attributes by allowing the application programs to instantiate data items by referencing the data structure stored in a synchronization engine .

The database is a data repository that stores the data items associated with the application programs in name value pairs. In the embodiment of the syncable or non syncable data items are stored in the database . In this embodiment all of the application programs share the same database and the application programs do not generate or maintain a separate database or data repository for their data items. Using the same database for all of the application programs is advantageous because each program does not need program codes to implement separate database for its use and the synchronization engine may synchronize all the data items without addressing idiosyncrasies of different databases. Also using the same database has additional benefit that it is less likely to cause discrepancy in the data due to synchronization operations. The functions provided by the database include among other functions adding data items deleting data items updating data items querying data items registering data items for notification and tracking changes in data items as explained below in detail with reference to .

The operating system may comprise Palm OS by Palm Inc. Windows CE or Windows XP by Microsoft or any other operating system that facilitates interoperability between hardware and software. The operating system include among other components the synchronization engine for performing procedures associated with synchronizing data with other computing devices.

The synchronization engine in conjunction with the database performs the synchronization operations. The synchronization engine instructs the database to add delete or update entries in accordance with the synchronization operations. In one embodiment the application programs do not need to intervene in the synchronization operations other than instructing the synchronization engine to initiate or schedule a synchronization session. Therefore the synchronization operations are transparent to the application programs . In this way the application developers need only to implement the application programs to call functions of the synchronization engine without programming the application programs to instantiate syncable data items and carry out the data synchronization operations as explained below in detail with reference to .

In the embodiment of the database includes among other tables an ID table a time marker table a category table and a binary data table and synchronization attribute tables . The ID table includes entries with unique numbers identifying the entry within the database . The time marker table includes entries for information indicating the history of any changes to the data item. The category table indicates the category of data items. The category of the data item may include for example calendar item contact information picture and email. Each application program may use a separate category of data items or the same category of data items may be used across different application programs . The binary data table includes the binary information associated with the data item.

The synchronization attribute tables include tables with entries associated with the synchronization attributes. As explained below in detail with reference to the synchronization attributes are defined in a Sync Base Class which is a superclass of other classes associated with individual application programs . The synchronization attribute tables include among other tables a syncable table a local only table a field table and a notifiable table .

The entries of the syncable table indicate whether the category to which the data item belongs is syncable. If a category of the data items is defined as being syncable all of the data items belonging to that category are by default syncable. Each data item in the syncable category may then be individually configured as non syncable by changing the entries of the local only table corresponding to that data item.

The entries of the local only table indicate whether particular data items are syncable. If the category to which the data items belong is indicated as being syncable in the syncable table the entries of the local only table may indicate that the data item of the syncable category has opted out of the default syncable status and is non syncable.

The entries of the field table indicate whether certain fields of the data item are syncable. For example if the contact item includes separate fields for a home address a business address a cell phone number and a business phone number it may be preferable to configure only the business address and the business phone number as syncable but not the home address and the cell phone number. If so the entries of the field table may be configured so that only the business address and the business phone number are syncable but not the home address and the cell phone number.

The entries of the notifiable table indicate whether the data items are notifiable. If a data item is notifiable the database informs the synchronization engine of changes made to the entry of that data items. The changes to the data items may be prompted by access to the data items by the application programs or other operations performed by the operating system . After being notified of the changes to the entry of the data item the synchronization engine may initiate a synchronization session immediately or perform synchronization of that notifiable data item during the next scheduled synchronization session.

The various tables illustrated in are merely illustrative. Various other tables or data structures may be employed to achieve the same function. For example some or all of the synchronization attribute tables may be combined into a single table or a table e.g. the field table may be subdivided into multiple tables.

Database Class is associated with the database of and has an attribute DB Name representing the name of a database instance. The database class includes among other functions the following functions Add Delete Update Query Reg for Notification and Track Change . Add is a function adding an entry to an instance of Database Class . Delete is a function deleting an entry from an instance of Database Class . Update is a function updating an entry for an instance of Database Class . Query is a function for performing query operations to the entries of Database Class . Reg for Notification is a function for registering a data item as a notifiable data item. Track Change is a function for tracking any changes made to a data item. The queries may be performed based on various attributes of the data items stored in the database . The Database Class includes multiple Database Entry Classes .

Application Class is associated with the application programs of and has attribute App Name indicating the name of the application program. Application Class has among other functions View data function associated with accessing the instances of the subclasses .

Synchronization Engine Class is associated with the synchronization engine of and has the attribute of Device ID that identifies the computing device on which the synchronization engine is instantiated. Synchronization Engine Class has functions of Add Update and Change Notifications . Add function adds an entry to an instance of Database Class during the synchronization operations. Update function updates a data item stored in an instance of Database Class during the synchronization operations. Change Notifications function changes the notification status of a data item from a notifiable to non notifiable or vice versa. In one embodiment the instance of Synchronization Engine Class is an Application Programming Interface API which is part of the operating system as illustrated in .

Sync Base Class is a superclass including functions and attributes associated with the synchronization operations. Sync Base Class includes among other attributes Syncable attribute Local only attribute Field attribute and Notifiable attribute. The subclasses inherit functions and attributes from Sync Base Class and thus the instances of the subclasses have attributes associated with Sync Base Class that are realized as entries in the syncable table the local only table the field table and the notifiable table as explained above with reference to .

The subclasses of Sync Base Class include among other classes Contact Class Calendar Class Email Class and Picture Class . These classes inherit from Sync Base Class thus the instances of these classes have attribute values associated with the synchronization operations. Contact Class is associated with contact information and includes attributes such as Name Phone and Address. Calendar Class is associated with calendar entries and include attributes such as Event indicating the name of the event Date the date the event is taking place and Location the location where the event is taking place . Email Class is associated with emails and includes attributes such as Sender sender of the email Date date the email was receive and Text body of the email . Picture Class is associated with image items and includes attributes such as File Name File Type and Binary Data. The instances of Contact Class Calendar Class Email Class and Picture Class are realized as the instances of Database Entry Class .

The application developer is provided with information regarding the functions and attributes associated with Sync Base Class . Based on this information the application developer describes and defines a code for the application program using application specific subclasses e.g. Contact Class Calendar Class Email Class and Picture Class of . The code for the application is then compiled and packaged by the application developer. Beneficially the application developer may describe a minimal amount of code or no code associated with the synchronization operations because the synchronization engine is provided and installed on the computing device as part of the operating system or a separate API. The application developer is given the minimal task of programming the application program to call functions from the synchronization engine to instantiate syncable data items and to instruct initiation of the synchronization operations of the synchronization engine .

A user of the computing device then installs the application program on the computing device as explained below with reference to .

The example of is merely illustrative of a typical method of programming the synchronization engine and the application programs. Various other arrangements may be used. For example the operating system may be installed by the user not the device manufacturer.

The granularity of data items to be locked from synchronization operation during the access of a data item by the application programs may be configured by modifying the entries of the synchronization attribute tables . Specifically by modifying the entries in any of the syncable table the local only table and the field table as non syncable a category of data items having the same category as the data item being accessed by the application program the particular data item being accessed by the application program or a certain field of the data item being accessed by the application program may be locked from the synchronization operations.

First a data item is accessed by the application. The database then modifies entries in the syncable table the local only table or the field table in accordance with a lock table not shown of the database or instructions from other components of the computing device e.g. the application program or the operation system . The lock table or the instructions from the other components define the data items or fields to be locked while a data item is being accessed by the application program . By modifying an entry of the data item in the syncable table as non syncable all of the data items having the same category as the data item being accessed by the application program are recognized by the synchronization engine as being non syncable thus the category of data items are prevented from being synchronized by the synchronization engine . By modifying an entry of the data item in the local only table as non syncable the data item currently being accessed by the application program is recognized by the synchronization engine as being non syncable thus that data item is prevented from being synchronized by the synchronization engine . Lastly by modifying an entry in the field table of the data item as non syncable certain fields of the data item are recognized by the synchronization engine as being non syncable thus these fields of the data item are prevented from being synchronized by the synchronization engine .

After the application program terminates access to the data item the modified entry of the syncable table the local only table or the field table is returned to the original value i.e. syncable .

By preventing access to the data items or fields of the data item through modification to the tables associated with the synchronization operations errors caused by the synchronization process may be eliminated or be reduced without adopting other elaborate or complex schemes.

As recognized through the example of the computing device herein the various embodiments disclosed herein may be implemented using one or more hardware elements. In general a hardware element may refer to any hardware structures arranged to perform certain operations. In one embodiment for example the hardware elements may include any analog or digital electrical or electronic elements fabricated on a substrate. The fabrication may be performed using silicon based integrated circuit IC techniques such as complementary metal oxide semiconductor CMOS bipolar and bipolar CMOS BiCMOS techniques for example. Examples of hardware elements may include processors microprocessors circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits application specific integrated circuits ASIC programmable logic devices PLD digital signal processors DSP field programmable gate array FPGA logic gates registers semiconductor device chips microchips chip sets and so forth. The embodiments are not limited in this context.

Various embodiments may be implemented using one or more software elements. In general a software element may refer to any software structures arranged to perform certain operations. In one embodiment for example the software elements may include program instructions and or data adapted for execution by a hardware element such as a processor. Program instructions may include an organized list of commands comprising words values or symbols arranged in a predetermined syntax that when executed may cause a processor to perform a corresponding set of operations.

The software may be written or coded using a programming language. Examples of programming languages may include C C BASIC Perl Matlab Pascal Visual BASIC JAVA ActiveX assembly language machine code and so forth. The software may be stored using any type of computer readable media or machine readable media. Furthermore the software may be stored on the media as source code or object code. The software may also be stored on the media as compressed and or encrypted data. Examples of software may include any software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application programming interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. The embodiments are not limited in this context.

Some embodiments may be implemented for example using any computer readable media machine readable media or article capable of storing software. The media or article may include any suitable type of memory unit memory device memory article memory medium storage device storage article storage medium and or storage unit such as any of the examples described with reference to a memory. The media or article may comprise memory removable or non removable media erasable or non erasable media writeable or re writeable media digital or analog media hard disk floppy disk Compact Disk Read Only Memory CD ROM Compact Disk Recordable CD R Compact Disk Rewriteable CD RW optical disk magnetic media magneto optical media removable memory cards or disks various types of Digital Versatile Disk DVD subscriber identify module tape cassette or the like. The instructions may include any suitable type of code such as source code object code compiled code interpreted code executable code static code dynamic code and the like. The instructions may be implemented using any suitable high level low level object oriented visual compiled and or interpreted programming language such as C C Java BASIC Perl Matlab Pascal Visual BASIC JAVA ActiveX assembly language machine code and so forth. The embodiments are not limited in this context.

Unless specifically stated otherwise it may be appreciated that terms such as processing computing calculating determining or the like refer to the action and or processes of a computer or computing system or similar electronic computing device that manipulates and or transforms data represented as physical quantities e.g. electronic within the computing system s registers and or memories into other data similarly represented as physical quantities within the computing system s memories registers or other such information storage transmission or display devices. The embodiments are not limited in this context.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B is true or present .

Also use of the a or an are employed to describe elements and components of embodiments of the present invention. This was done merely for convenience and to give a general sense of the embodiments of the present invention. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for a software configured multimedia control mechanism through the disclosed principles herein. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the present invention is not limited to the precise construction and components disclosed herein and that various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus of the present invention disclosed herein without departing from the spirit and scope of the invention as defined in the appended claims.

