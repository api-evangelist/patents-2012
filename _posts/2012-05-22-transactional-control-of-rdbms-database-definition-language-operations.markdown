---

title: Transactional control of RDBMS database definition language operations
abstract: Database Definition Language (DDL) transactions are defined that include one or more DDL operations that are to be executed to modify aspects of a relational database, such as its structure. If performance of one or more of the DDL operations in a DDL transaction fails, then the changes made to the relational database by some or all of the DDL operations may be reversed. Instructions and state information may be generated and stored prior to, during, and/or following the execution of a DDL operation that may be utilized to reverse the changes to a relational database made by the DDL operations. User interfaces might also be provided for defining, selecting, editing, and executing DDL transactions, and for providing information relating to the execution and rollback of DDL operations in a DDL transaction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09372855&OS=09372855&RS=09372855
owner: Amazon Technologies, Inc.
number: 09372855
owner_city: Seattle
owner_country: US
publication_date: 20120522
---
Relational database management systems RDBMS typically utilize the Database Definition Language DDL to modify the structure of relational databases. DDL operations may provide functionality for instance for creating a new database creating a table in a database altering the structure of a table in a database and removing a table from a database. DDL operations might also be provided for performing other types of modifications to the structure of a relational database.

The failure of a DDL operation on a relational database can cause various types of problems. For instance a relational database may be left in an unknown state following the failure of a DDL operation. Other types of problems and side effects might also be encountered if a DDL operation fails. Recovering a relational database from the failure of a DDL operation however can be very complex and time consuming. As a result the operator of a RDBMS may suffer significant operational losses while a relational database is repaired following the failure of DDL operation.

The following detailed description is directed to technologies for transactional control of RDBMS DDL operations. Through an implementation of the concepts and technologies disclosed herein changes made to a relational database by a DDL operation can be quickly and easily reversed. In this way operational losses caused by the failure of a DDL operation can be minimized.

According to aspects presented herein computing systems are disclosed that are configured for transactional control of RDBMS DDL operations. In particular the computing systems presented herein are configured to allow an operator to define a DDL transaction. A DDL transaction is one or more DDL operations. As mentioned above DDL operations modify the structure of relational databases. DDL operations may provide functionality for creating a new database creating a table in a database altering the structure of a table in a database removing a table from a database and for performing other types of modifications to the structure of a relational database.

If the DDL operations in a DDL transaction do not all succeed then the changes made by some or all of the DDL operations in the DDL transaction are reversed. For instance any changes made to the structure of a relational database by DDL operations in a DDL transaction may be reversed such that the database is in the same state that it was in just prior to the performance of the DDL operations in the DDL transaction. In some embodiments a checkpoint is created following the successful execution of each DDL operation in a DDL transaction. In these embodiments the DDL operations may be rolled back to a checkpoint in the event that a later DDL operation in the DDL transaction fails.

According to other aspects data is generated and stored prior to during and or following the execution of a DDL operation that may be utilized to reverse the changes to a relational database made by the DDL operations. For example instructions may be generated and stored which when executed cause the changes made by a DDL operation to be reversed. As an example if a DDL operation creates a new table in a relational database then instructions may be generated and stored for removing the newly created table. In this way the stored instructions may be executed in the reverse order that the DDL operations were performed in order to reverse the changes to a relational database made by DDL operations in a DDL transaction. It should be appreciated that other types of instructions for reversing other types of changes to a relational database might also be generated.

State information might also be stored that describes the state of a relational database just prior to the performance of a DDL operation. Similarly state information might also be stored that describes the state of the relational database just following the performance of a DDL operation. This state information might also be utilized to reverse the changes made to a relational database by DDL operations in a DDL transaction in the event that execution of one or more of the DDL operations fails.

According to other aspects presented herein user interfaces might also be provided for defining selecting editing executing and performing other functions with regard to DDL transactions. User interfaces might also be provided for allowing a user to request the rollback of DDL operations and for indicating whether all or a subset of the DDL operations should be reversed. For example the user interfaces might provide functionality for allowing a user to select a checkpoint to which the DDL operations should be rolled back. These user interfaces might also be configured to present information relating to the execution and rollback of DDL operations in a DDL transaction. Other types of user interfaces might also be provided. Additional details regarding these and other aspects of the various technologies disclosed herein will be provided below with regard to .

It should be appreciated that the embodiments disclosed herein might be utilized with any type of computer computing system device Web site application program operating system or other type of system or component. Accordingly although the embodiments disclosed herein are primarily presented in the context of computing systems that embody the concepts disclosed herein for transactional control of RDBMS DDL operations the disclosure presented herein is not limited to such an implementation.

It should be also appreciated that the subject matter presented herein may be implemented as a computer implemented method or process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. These and various other features will become apparent from a reading of the following disclosure and a review of the associated drawings.

While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will appreciate that the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described below including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants tablet computers electronic book readers wireless telephone devices special purposed hardware devices network appliances or the like. The embodiments described herein may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures.

As illustrated in the environment includes an RDBMS . The RDBMS is a relational database management system configured to allow the creation modification and utilization of a relational database . As known in the art a relational database is a collection of data items organized as a set of formally described tables and relationships between the tables. Example RDBMS that may be utilized to implement the functionality disclosed herein include but are not limited to MYSQL from ORACLE CORPORATION and DB2 from IBM CORPORATION.

It should be appreciated that although only a single relational database has been illustrated in the RDBMS may be utilized to create maintain query and otherwise utilize many such relational databases. Additionally it should be appreciated that the RDBMS shown in has been greatly simplified for ease of discussion and that such a system will include many more software and hardware components than illustrated in .

In order to access and utilize the database services and related functionality provided by the RDBMS a user may utilize an RDBMS client device executing a RDBMS client application . The RDBMS client device may be a personal computer PC desktop workstation laptop computer tablet computer notebook computer personal digital assistant PDA electronic book reader game console set top box consumer electronics device server computer or any other type of computing device capable of connecting to the network and communicating with the RDBMS . The network may be a local area network LAN a wide area network WAN the Internet or any other networking topology known in the art for connecting the RDBMS client device to the RDBMS .

It should be appreciated that although a network is illustrated in the network is not required to utilize the embodiments disclosed herein. For example in some embodiments the RDBMS client application might execute locally on the same computer system that provides the RDBMS . In this embodiment no network is required to utilize the concepts disclosed herein. Other implementations will be apparent to those skilled in the art.

The RDBMS client application may be a Web browser application such as the MOZILLA FIREFOX Web browser from MOZILLA FOUNDATION of Mountain View Calif. The RDBMS client application exchanges data with the RDBMS using the hypertext transfer protocol HTTP or another appropriate protocol over the network . It should be appreciated that the RDBMS client application might also be a stand alone client application configured for communicating with the RDBMS . The client application might also utilize any number of communication methods known in the art to communicate with the RDBMS across the network including remote procedure calls SOAP based Web services remote file access proprietary client server architectures and the like.

In one embodiment the RDBMS includes a number of application server computers not shown in that provide various database services. The application servers may execute a number of modules in order to provide database services and the other functionality disclosed herein. The modules may execute on a single application server or in parallel across multiple application servers in the RDBMS . In addition each module may consist of a number of subcomponents executing on different application servers or other computing devices in the RDBMS . The modules may be implemented as software hardware or any combination of the two.

According to one embodiment a transactional DDL module executes as a part of the RDBMS . The transactional DDL module provides the functionality disclosed herein for transactional control of RDBMS DDL operations. It should be appreciated however that the RDBMS might provide this functionality in other ways. For example in other embodiments other components might provide the functionality described herein for transactional control of RDBMS DDL operations.

In one embodiment the user can submit DDL operations to the RDBMS expressed using the Database Definition Language DDL to modify the structure of the relational database . DDL operations may provide functionality for instance for creating a new database creating a table in the database altering the structure of a table in the database and removing a table from the database . DDL operations might also be provided for performing other types of modifications to the structure of the relational database .

As mentioned briefly above the failure of a DDL operation on the relational database can cause various types of problems. For instance the relational database may be left in an unknown state following the failure of a DDL operation. Other types of problems and side effects might also be encountered if a DDL operation fails. In order to minimize the negative effects of the failure of a DDL operation the transactional DDL module disclosed herein is configured to provide transactional control of RDBMS DDL operations.

In order to utilize the transactional control features described herein a user of the RDBMS utilizes the RDBMS client application and an appropriate interface provided by the RDBMS to define a DDL transaction . A DDL transaction is one or more DDL operations that are defined to succeed or fail together. More specifically the DDL operations in a DDL transaction must complete successfully. If all of the DDL operations in a DDL transaction do not succeed then the transactional DDL module reverses some or all of the changes to the relational database made by the DDL operations in the DDL transaction . In this way the transactional DDL module will reverse changes made to the relational database by DDL operations in a DDL transaction such that the database is in the same state that it was in just prior to the performance of the DDL operations in the DDL transaction . In other embodiments a user might elect to rollback changes to a checkpoint thereby reversing only some of changes made by the DDL operations. Additional details regarding this process will be provided below.

In order to reverse the changes made to a relational database by a DDL transaction the transactional DDL module stores various types of information. For instance the transactional DDL module might generate and store various types of data prior to during and or following the execution of a DDL operation in a DDL transaction that may be utilized to reverse the changes to a relational database made by the DDL operations. For example the transactional DDL module may generate and store instructions which when executed cause the changes made by a DDL operation to be reversed.

As an example if a DDL operation in a DDL transaction creates a new table in a relational database then instructions may be generated and stored for removing the newly created table from the database . In this way the stored instructions may be executed in the reverse order that the DDL operations in the DDL transaction were performed in order to reverse the changes to the relational database . It should be appreciated that the transactional DDL module might also generate store and utilize other types of instructions and data for reversing other types of changes to the relational database .

The transactional DDL module might also store other kinds of data for use in reversing the changes made to a relational database by DDL operations in a DDL transaction . For example the transactional DDL module might store state information that describes the state of the relational database just prior to the performance of each DDL operation in a DDL transaction . Similarly the transactional DDL module might store state information that describes the state of the relational database just following the performance of each DDL operation in a DDL transaction . The transactional DDL module may utilize this state information to reverse the changes made to the structure and content of the relational database by the DDL operations in a DDL transaction in the event that execution of one or more of the DDL operations fails. Additional details regarding this process will be provided below.

The transactional DDL module might also create a checkpoint following the successful execution of each DDL operation in a DDL transaction . As will be described in greater detail below a user might elect to rollback all of the changes to the relational database made by DDL operations in a DDL transaction or might select a checkpoint to which the changes to the relational database should be rolled back.

According to other aspects presented herein the RDBMS and or the transactional DDL module might present user interfaces for defining selecting editing executing and performing other functions with regard to the DDL operations in a DDL transaction . These user interfaces might also be configured to present information relating to the execution and rollback of DDL operations in a DDL transaction . The RDBMS and or the transactional DDL module might also provide other types of user interfaces for creating utilizing and rolling back DDL transactions . These user interfaces might be implemented as graphical user interfaces GUIs command line interfaces CLIs application programming interfaces APIs or other types of user interfaces. Additional details regarding these and other aspects of the various technologies disclosed herein will be provided below with regard to .

The DDL operations A N in a DDL transaction are also defined such that they execute in a particular order. For example in the DDL transaction shown in the DDL operations A N have been defined to execute in a sequential order. The DDL operation A is executed first. The DDL operation B is then executed following the completion of the execution of the DDL operation A. The DDL operation C is then executed once the DDL operation B has completed its execution. This process continues until the last DDL operation in the DDL transaction the DDL operation N in this example has completed its execution.

It should be appreciated that a user of the RDBMS may define the DDL operations A N and the sequence in which the DDL operations A N should be performed. In this regard the RDBMS and or the transactional DDL module may provide a suitable user interface for allowing the user to define a DDL transaction . The RDBMS and or the transactional DDL module might also provide other types of user interfaces for performing other types of functions with respect to a DDL transaction such as for instance user interfaces for editing a previously defined DDL transaction requesting the execution of a DDL transaction maintaining a library of DDL transactions requesting the reversal of the changes made to a relational database by DDL operations and DDL transactions and for performing other functions.

As will be described below after the failure of any of the DDL operations D H in the DDL transaction A a user may cause some or all of the changes made to the relational database to be reversed. For example if the DDL operation F were to fail the transactional DDL module is configured to reverse any changes made to the relational database by a sequential set of DDL operations consisting of the DDL operations F E and D. These changes made by these DDL operations are rolled back in the reverse order in which they were applied. Similarly if the DDL operation H were to fail the transactional DDL module would reverse any changes to the relational database made by the sequential set of DDL operations consisting of the DDL operations H G F E and D in that order. In this way the relational database can be returned to the exact state it was in prior to the execution of any subset of the DDL operations D H in the DDL transaction A. Additional details regarding this process are provided below.

As mentioned briefly above the transactional DDL module is configured in various embodiments to create checkpoints following the successful execution of each DDL operation . In the event of the failure of execution of a DDL operation the transactional DDL module may allow a user to indicate whether all of the DDL operations should be rolled back or whether the DDL operations should be rolled back to a particular checkpoint. For instance in the example shown in checkpoints A D have been created following the successful execution of the DDL operations D G respectively. If the DDL operation H fails execution the user might specify that the changes to the relational database be rolled back to any of the checkpoints A D. Additional details regarding this process will be provided below.

It should be appreciated that the example DDL transaction A shown in is merely illustrative. Other types of DDL transactions might be defined for performing other types of functions that include more or fewer DDL operations than shown in . Other types of instructions might also be provided for specifying the order in which DDL operations in a DDL transaction should be executed. It should also be appreciated that data defining DDL transactions and the checkpoints might be stored in an appropriate format and location such as within a table in a relational database .

Turning now to additional details will be provided regarding the embodiments described herein for transactional control of RDBMS DDL operations. It should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein with reference to the various FIGURES are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. These operations may also be performed in parallel or in a different order than those described herein.

From operation the routine proceeds to operation where input is received by way of the user interface provided at operation . The routine then proceeds to operation where the RDBMS and or the transactional DDL module determines whether the user has requested to execute a DDL transaction . If the user has not requested to execute a DDL transaction the routine proceeds back to operation described above where additional user input may be received and processed.

If the user requests the execution of a DDL transaction at operation the routine proceeds to operation . At operation the DDL transaction is executed. Additional details regarding the execution of the DDL transaction are provided below with regard to . From operation the routine proceeds to operation .

At operation the user interface provided by the RDBMS and or the transactional DDL module presents information regarding the success or failure of the execution of the DDL transaction . If the execution of the DDL transaction failed the user interface might also present information regarding the rollback of the changes to the relational database made by the DDL transaction . Other types of feedback might also be presented in the user interface.

From operation the routine proceeds to operation where a user interface might also be presented for viewing log files showing detailed information regarding the execution of the DDL transaction . Log files associated with the reversal of changes made to the relational database by the DDL transaction might also be presented. Other types of log files and data regarding the execution of the DDL transaction and the rollback of changes might also be presented. From operation the routine proceeds to operation where it ends.

From operation the routine proceeds to operation where a temporary variable is initialized for use in keeping track of the current DDL operation in the DDL transaction that is being executed. The variable is initialized to reflect the first DDL operation in the DDL transaction . Once the variable has been initialized at operation the routine proceeds to operation .

At operation the transactional DDL module and or the RDBMS stores data describing the state of the relational database just prior to the execution of the current DDL operation . The state information may reflect the structure and or content of the relational database before execution of the current DDL operation . Once the state information has been stored the routine proceeds from operation to operation .

At operation the transactional DDL module and or the RDBMS stores instructions for reversing the current DDL operation . For example if the current DDL operation is for adding a table to the relational database instructions will be generated and stored for removing the table from the relational database . In this way instructions are created and stored for reversing changes to the relational database by each of the DDL operations in a DDL transaction .

From operation the routine proceeds to operation where the RDBMS performs the current DDL operation . As mentioned above a DDL operation will typically modify the structure of the relational database but might also modify data stored in a relational database . Once the current DDL operation has been executed the routine proceeds from operation to operation .

At operation the transactional DDL module and or the RDBMS stores data describing the state of the relational database just after the execution of the current DDL operation . The state information may reflect the structure and or content of the relational database just following the execution of the current DDL operation . Once this state information has been stored the routine proceeds from operation to operation .

At operation the RDBMS determines whether execution of the current DDL operation succeeded or failed. If the current DDL operation succeeded the routine proceeds to operation where the RDBMS and or the transactional DDL module creates a checkpoint . As mentioned above the checkpoint indicates a point in time at which a DDL operation has successfully been executed. In the event of the failure of a subsequent DDL operation a user might elect to rollback changes to the relational database to one or the checkpoints . Additional details regarding this process are provided below.

From operation the routine proceeds to operation where the RDBMS and or the transactional DDL module determines whether additional DDL operations remain in the current DDL transaction to be executed. If additional DDL operations remain in the current DDL transaction to be executed the routine proceeds from operation to operation where the variable utilized to keep track of the current DDL operation is updated to reflect the next DDL operation in the current DDL transaction to be executed. The routine then proceeds from operation to operation where state information is stored and the next DDL operation is executed in the manner described above.

If at operation the RDBMS and or the transactional DDL module determines that no additional DDL operations remain to be executed in the current DDL transaction the routine proceeds to operation . At operation the state data and instructions for rolling back the changes made by the DDL operations in the DDL transaction may be deleted. In other implementations this information is retained for use in analyzing the execution of DDL operations and the rollback of changes to the relational database . This information might also be presented in a user interface provided by the RDBMS and or the transactional DDL module in the manner described above.

If at operation the RDBMS determines that execution of the current DDL operation did not succeed the routine proceeds from operation to operation . At operation the user is provided an opportunity to review log files containing data relating to the failed execution of the DDL operation. A user interface might also be presented to the user asking the user whether they would like to rollback the changes made to the relational database .

If at operation the user elects to rollback changes to the relational database the routine proceeds to operation where RDBMS and or the transactional DDL module utilizes the data stored at operations and to reverse the changes made to the relational database by some or all of the DDL operations in the DDL transaction . In this manner the relational database may be returned to the state it was in prior to execution of the DDL transaction or to another state specified by the user . Details regarding this process are provided below with regard to .

From operation the routine proceeds to operation described above where the data stored at operations and may be destroyed or maintained for future use in the manner described above. From operation the routine proceeds to operation where it ends.

At operation a temporary variable is initialized that is utilized to keep track of the current DDL operation that is being reversed. In particular this variable is initialized to reflect the most recently executed DDL operation in the DDL transaction . This will typically be the DDL operation in the DDL transaction for which execution failed.

From operation the routine proceeds to operation where the instructions stored at operation are utilized to reverse the changes made to the relational database by the current DDL operation . Additionally the state information stored at operations and might also be utilized to restore the relational database to the state it was in just prior to execution of the current DDL operation . Once the changes made to the relational database by the current DDL operation have been reversed the routine proceeds from operation to operation .

At operation the RDBMS and or the transactional DDL module determine whether additional DDL operations remain in the DDL transaction for which changes need to be reversed. For example the RDBMS and or the transactional DDL module might determine whether a selected checkpoint has been reached. If the user has requested that all of the changes to the relational database be rolled back the RDBMS and or the transactional DDL module might determine whether any additional DDL operations remain to be rolled back in the current DDL transaction .

If additional DDL operations remain to be processed the routine proceeds from operation to operation . At operation the variable utilized to keep track of the current DDL operation is incremented to reflect the next most recent DDL operation that was executed in the DDL transaction . The routine then proceeds back to operation where the changes to the relational database made by the current DDL operation are reversed. In this manner some or all of the changes made by the DDL operations in the DDL transaction are rolled back in the reverse order from which they were originally applied.

If at operation the RDBMS and or the transactional DDL module determines that no additional DDL operations remain to be rolled back the routine proceeds from operation to operation . At operation the RDBMS and or the transactional DDL module provides a user interface for presenting the results of the rollback operations described above. For example the contents of log files providing detailed information of the rollback of changes to the relational database may be provided. Other types of user interfaces presenting other types of information might also be provided. From operation the routine proceeds to operation where it ends.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs are standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units or the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard. The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

According to various embodiments the computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as a local area network LAN a wide area network WAN the Internet or any other networking topology known in the art that connects the computer to remote computers. The chipset includes functionality for providing network connectivity through a network interface controller NIC such as a gigabit Ethernet adapter.

For example the NIC may be capable of connecting the computer to other computing devices such as client RDBMS device a data storage system and the like over the network described above in regard to . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a FIBRE CHANNEL FC interface or other standard interface for physically connecting and transferring data between computers and physical storage devices.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage or the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer might have access to other computer readable media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable media can be any available media that may be accessed by the computer including computer readable storage media and communications media. Communications media includes transitory signals. Computer readable storage media includes volatile and non volatile removable and non removable storage media implemented in any method or technology. For example computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information. Computer readable storage media does not include transitory signals.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation of Redmond Wash. According to further embodiments the operating system may comprise the UNIX SOLARIS or MAC OSX operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer . For instance when utilized to implement the RDBMS client device the mass storage device may store the RDBMS client application . When utilized to implement the RDBMS the mass storage device may store the transactional DDL module and other modules.

In one embodiment the mass storage device or other computer readable storage media are encoded with computer executable instructions that when loaded into the computer transform the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer has access to computer readable storage media storing computer executable instructions that when executed by the computer perform the various routines and operations described herein.

The computer may also include an input output controller for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly the input output controller may provide output to a display device such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for transactional control of RDBMS DDL operations items have been presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

