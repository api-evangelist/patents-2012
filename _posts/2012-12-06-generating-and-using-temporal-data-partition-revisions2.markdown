---

title: Generating and using temporal data partition revisions
abstract: Concepts and technologies are disclosed herein for generating and using temporal data partition revisions. In some embodiments, a server computer can execute a data management application. The server computer can obtain a data partition associated with a data stream. The data partition can include a data point and a timestamp. The server computer can analyze the timestamp to determine if the data partition corresponds to an update of a base data record. If the server computer determines that the data corresponds to an update, the server computer can compute a revision comprising a delta and a timestamp and store the revision.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600526&OS=09600526&RS=09600526
owner: AT&T Intellectual Property I, L.P.
number: 09600526
owner_city: Atlanta
owner_country: US
publication_date: 20121206
---
This application relates generally to data management. More specifically the disclosure provided herein relates to managing data by generating and using temporal data partition revisions.

Some communications networks provide various data collection and or analysis functions. These data collection and or analysis functions may be performed by collecting data relating to network traffic device or system utilization information user statistics device usage statistics packet inspection functions or the like. Because modern communication networks have grown exponentially over the past several years the amount of data collected and analyzed as well as the frequency with which data is collected and or analyzed has increased. Thus collected and or analyzed data may be updated at any time.

In some instances the delivery of updates to a data collection and or analysis system may be delayed. Such delays may result from network unavailability congestion or the like processing errors and or delays and or as a result of other causes. Thus updates to stored data may be received. Applying the updates to the data may result in suspending data analysis operations and or may otherwise cause additional delays and or unwanted load on the data collection and or analysis systems. Furthermore because of the increased speed and or frequency of data reporting collection and analysis some updates may be received as a stream of data that may arrive several times a second minute hour or day.

Because data collection and or analysis systems may also respond to requests such as queries failure to apply the updates in a timely manner may adversely affect results of the executed requests. Furthermore as noted above application of the updates may interrupt responding to the requests and or other data collection and or analysis operations of various systems. Because of these and other concerns some data collection and or analysis systems may apply updates when received resulting in poor performance and or delays for users.

The present disclosure is directed to generating and using temporal data partition revisions. A server computer can execute a data management application for managing storage and updating of temporal data partitions. The server computer can obtain data associated with a data stream generated by a data source. The data stream can include network statistics such as traffic network and or resource utilization and or availability information deep packet inspection information combinations thereof or the like. The data obtained by the server computer also can include one or more records. One or more of the records can include a data point and a timestamp indicating a time at which the data point was collected and or released by the data source.

In some embodiments the data sources generate a key or other identifier and can include the key or identifier in the data records. In some other embodiments the server computer can generate the key or other identifier for one or more of the records and store the records as base data in a data store with the key or other identifier. When future data releases are made by the data sources the server computer can determine if the records correspond to updates of existing records and or to new records to be stored as the base data. The determination can be based upon contents of the records and therefore can be based upon the data points header information source information timestamps keys or other identifiers and or other information. If the server computer determines that the data is an update the server computer can store the updates as revisions that can include a delta defining a difference between the data included in the revision and the data included in a partition or table including the revision updates a timestamp and or a key or other identifier.

The server computer also can be configured to respond to queries of the base data. The server computer can execute queries against the base data generate a result set and determine if one or more revisions relating to records identified in the query of the base data are stored as the revision data. If one or more revisions are stored the server computer can retrieve the data satisfying the query and apply the one or more revisions to the data to generate the updated results that can be returned to the requestor. The server computer also can be configured to merge partitions with revisions periodically and or on demand to compute a new or revised value of the partition. The server computer can obtain one or more revisions merge the revisions to generate a merged revision and apply the merged revision to a base data table or partition with which the revisions are associated to generate an updated partition or table. The server computer can store the updated partition as the base data and delete the old base data partition and or the applied revisions.

According to one aspect of the concepts and technologies disclosed herein a method is disclosed. The method can include obtaining at a server computer executing a data management application a data partition associated with a data stream. The data partition can include records which include a data point and a timestamp. The method also can include analyzing by the server computer the timestamp to determine if the data partition corresponds to an update of a base data partition. In response to a determination that the data partition corresponds to the update the method can include computing by the server computer a revision including a delta and the timestamp and storing the revision.

In some embodiments computing the revision can include generating an identifier and including the identifier in the revision. The base data table or partition base data partition can include a base data identifier and the identifier and the base data identifier can be the same. In some embodiments the data can include an identifier the base data partition can include a base data identifier and determining that the data corresponds to the update can include determining that the identifier is the same as the base data identifier. The method also can include receiving a query executing the query against the base data and storing a result set including results of the query against the base data. The result set can include the base data.

In some embodiments the method further can include determining if a base data revision is stored. In response to a determination that the base data revision is stored the method can include retrieving the base data revision. The method also can include applying the base data revision to the base data partition to generate an updated base data partition and outputting a result including the updated base data partition. In some embodiments the method also can include retrieving two revisions including updates to the base data partition merging the two revisions to generate a merged revision applying the merged revision to the base data partition to generate an updated base data partition and saving the updated base data partition as the base data. Retrieving two revisions can include identifying a record including an identifier and each of the two revisions can include a revision identifier that is the same as the identifier. In some embodiments each of the two revisions can include a respective delta and a respective timestamp generating the updated base data partition can include merging each respective delta to generate a merged delta determining a most recent timestamp and generating the merged revision and the merged revision can include the merged delta and the most recent timestamp.

According to another aspect of the concepts and technologies disclosed herein a system is disclosed. The system can include a processor and a memory that stores computer executable instructions. When the computer executable instructions are executed by the processor the processor can perform operations including obtaining a data partition associated with a data stream the data partition including a timestamp and analyzing the timestamp to determine if the data corresponds to an update of a base data partition. In response to a determination that the data partition corresponds to the update the processor can compute a revision including a delta and the timestamp and store the revision.

In some embodiments the system further can include a data store that stores base data and revision data and the revision can be stored as the revision data. In some embodiments execution of the computer executable instructions by the processor can cause the processor to perform operations further including receiving a query executing the query against the base data and storing a result set including results of the query against the base data. The result set can include the base data. In some embodiments execution of the computer executable instructions by the processor can cause the processor to perform operations further including determining if a base data revision is stored in response to a determination that the base data revision is stored retrieving the base data revision applying the base data revision to the base data to generate an updated base data partition and outputting a result including the updated base data partition. In some embodiments execution of the computer executable instructions by the processor can cause the processor to perform operations further including retrieving two revisions including updates to the base data partition merging the two revisions to generate a merged revision applying the merged revision to the base data partition to generate an updated base data partition and saving the updated based data partition as the base data.

According to yet another aspect a computer storage medium is disclosed. The computer storage medium can have computer executable instructions stored thereon. The computer executable instructions when executed by a processor can cause the processor to perform operations including obtaining a data partition associated with a data stream the data partition including a data point and a timestamp and analyzing the timestamp to determine if the data partition corresponds to an update of a base data partition. In response to a determination that the data corresponds to the update the processor can compute a revision including a delta and the timestamp and store the revision.

In some embodiments the computer executable instructions when executed by the processor can cause the processor to perform operations further including retrieving two revisions including updates to the base data partition merging the two revisions to generate a merged revision applying the merged revision to the base data partition to generate an updated base data partition and saving the updated base data partition as the base data. In some embodiments the computer executable instructions when executed by the processor can cause the processor to perform operations further including receiving a query executing the query against the base data and storing a result set including results of the query against the base data. The result set can include the base data. In some embodiments the computer executable instructions when executed by the processor can cause the processor to perform operations further including determining if a base data revision is stored. In response to a determination that the base data revision is stored the processor can retrieve the base data revision apply the base data revision to the base data partition to generate an updated base data partition and output a result including the updated base data partition. The data record can be obtained from a data stream generated by a data source and obtaining the data record can include receiving the data in a temporal release of the data by the data source.

Other systems methods and or computer program products according to embodiments will be or become apparent to one with skill in the art upon review of the following drawings and detailed description. It is intended that all such additional systems methods and or computer program products be included within this description be within the scope of this disclosure.

The following detailed description is directed to generating and using temporal data partition revisions. A server computer can execute a data management application for managing storage and updating of temporal data partitions. The server computer can obtain data associated with a data stream generated by a data source. The data obtained by the server computer can include one or more records. The data obtained by the server computer and the one or more of the records can include a data point and a timestamp indicating a time at which the data point was collected and or released by the data source. The data also can include a key or identifier or the server computer can be configured to generate a key or other identifier for the data and or one or more records included in the data.

When data releases are made by the data sources the server computer can obtain data associated with the data releases and determine if the data releases correspond to an update of an existing data partition and or to a new data partition. The determination can be based in some embodiments upon contents of the data data point values header information source information timestamps keys or identifiers other information combinations thereof or the like. If the server computer determines that the data is an update the server computer can store the update as a revision that can include one or more of a delta defining a difference between a data point included in the revision and a data point included in an existing data partition a timestamp reflecting a time at which the revision was generated or received a key or other identifier and or other information.

The server computer also can be configured to respond to queries. The server computer can execute queries against the base data generate a result set and determine if one or more revisions relating to data identified in the query of the base data are stored as the revision data. If no revisions are stored the server computer can respond to the queries with the result set. If one or more revisions are stored the server computer can retrieve the one or more revisions and apply the one or more revisions to the base data to update the results. The updated results can be returned to the requestor. The server computer also can be configured to merge revisions periodically and or on demand with a data partition. In particular the server computer can obtain one or more revisions merge the revisions to generate a merged revision and apply the merged revision to a data partition associated with the revisions to generate an updated data partition. The server computer can store the updated data partition as the base data and delete the old data partition and or the revisions.

While the subject matter described herein is presented in the general context of program modules that execute in conjunction with the execution of an operating system and application programs on a computer system those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the subject matter described herein may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

Referring now to aspects of an operating environment for various embodiments of the concepts and technologies disclosed herein for generating and using temporal data partitions will be described according to an illustrative embodiment. The operating environment shown in includes a computing device such as a server computer server computer operating in communication with and or as part of a communications network network .

While referred to as a server computer herein it should be understood that in various embodiments of the concepts and technologies disclosed herein the functionality of the server computer may be provided by other computing systems such as for example desktop computers laptop computers other computing systems combinations thereof or the like. Similarly it should be understood that the functionality of the server computer can be provided by a single device as shown in and or by two similar and or dissimilar devices. For purposes of describing the concepts and technologies disclosed herein the server computer is described herein as a single device such as for example a web server or a conventional server computer. It should be understood that the described embodiments are illustrative and should not be construed as being limiting in any way.

The server computer can execute an operating system and one or more application programs such as for example a data management application and or other application programs not illustrated . The operating system can include a computer program for controlling the operation of the server computer . The data management application can include an executable program configured to execute on top of the operating system to provide the functionality described herein for generating and using temporal data revisions.

The data management application can be configured to obtain and manage storage of data associated with one or more streams of data data streams A N hereinafter collectively and or generically referred to as data streams . The data streams can be received or otherwise obtained from one or more data sources A N hereinafter collectively and or generically referred to as data sources . According to various embodiments the data sources can correspond to one or more real or virtual data storage devices server computers network reporting devices or systems network analytics devices traffic monitors deep packet inspection DPI devices or systems combinations thereof or the like. As such the data streams can correspond to various types of streaming data including but not limited to network statistics stored data media streams packet inspection information user information traffic information device output information analytics performance statistics device utilization and or availability information combinations thereof or the like. Because the data sources and or their respective data streams can include almost any type of sources and or data it should be understood that these embodiments are illustrative and should not be construed as being limiting in any way.

As shown in the data streams can include one or more temporal data table partitions A N hereinafter collectively and or generically referred to as partitions though this is not necessarily the case. According to various embodiments as will be explained in more detail below each revision included in revision data stored by the data management application can be associated with a specific partition included in the partitions . It should be understood that this embodiment is illustrative and should not be construed as being limiting in any way.

One or more of the data streams and or partitions thereof can include a data value or data point data point . The data point can include an integer value a string and or other types of data such as Boolean values functions combinations thereof or the like. The data streams and or one or more partitions thereof also can include a time value function or other time based indicator timestamp . The timestamp can represent according to various embodiments a time at which the data point is generated and or collected. As such it should be appreciated that the data stream and or one or more of the partitions therefore can correspond to and or include a temporal data partition or other temporal release of data associated with the data stream and or the data source .

According to various embodiments the data stream and or the partitions can include records. The records of the data stream and or the partition can include a key or identifier ID such as a globally unique identifier GUID a string an integer value and or other identifying text. While the key or identifier is illustrated in as being included with the records of the partitions shown as key ID it should be understood that the key or identifier may be generated by the data management application in some embodiments and may be added to records in the partition when the data associated with the data streams is stored by the data management application at a data storage location. As such it should be understood that the key ID shown with respect to the records of the partitions in may be omitted and or may not be included in the records of the partitions when the records are part of the data streams .

The data management application can be configured to obtain the partitions and or other data associated with the data streams and to store the data associated with the data streams e.g. the partitions and or generate instructions for storing the partition in a data storage device such as for example the data store . The functionality of the data store can be provided by one or more databases server computers hard disk drives memory devices desktop computers laptop computers other computing devices other data storage devices combinations thereof or the like. According to various embodiments the data store can include a real or virtual data storage device and or a collection or array of data storage devices. In one contemplated embodiment for example the functionality of the data store is provided by an array of server computers located in a geographically isolated and or geographically distributed server farm or data warehouse. Thus components or elements of the data store not illustrated in can be configured to communicate with one another via communication links. For purposes of illustrating the concepts and technologies disclosed herein the functionality of the data store is described herein as being provided by a server computer hosting a database. In view of the above described contemplated embodiments it should be understood that this embodiment is illustrative and should not be construed as being limiting in any way.

The data management application can be configured to obtain the data associated with the data stream e.g. the partitions to generate a key or other identifier key ID for one or more records included in the partitions in some embodiments and or to store the data at the data store as tables partitions and or other types of data or data structures. In the illustrated embodiment the data management application can be configured to store the data associated with the data stream with keys or other identifiers in a data table or data partition such as a temporal base data table partition hereinafter referred to as base data . Thus the base data can correspond in some embodiments to a temporal data partition. In some embodiments the base data can include a temporal data table that includes partitions associated with a temporal release of data associated with the data stream though this is not necessarily the case. The base data can include one or more data tables records temporal partitions of data tables result sets and or other records and or collections of records. Therefore it should be understood that that the illustrated example of is illustrative and should not be construed as being limiting in any way.

It can be appreciated from the illustrated operating environment shown in that multiple temporal releases associated with a data stream can be received at the server computer and stored as partitions in a table or other data structure as the base data . According to various embodiments the server computer may receive additional temporal releases of data associated with a particular data stream at various times after storing a particular temporal release of data associated with the data stream . At any time after storing the temporal release of the data associated with the data stream as the base data the server computer may receive data or other data structures e.g. additional temporal releases of the partitions that can be associated with the temporal release of data previously stored as the partitions in the base data . This additional release can correspond to an update of the data previously stored as the base data as will be explained in more detail below.

To store the newly received temporal release of the data associated with the data stream the server computer may be limited to several options that may pose computational and or performance challenges. In particular the server computer can store the newly received data in a memory or other structure and update the base data to incorporate the newly received data. Such update operations can consume valuable processing resources of the server computer . Furthermore these operations may be executed frequently as multiple and or frequent updates to the base data may be received after storing the base data for various reasons.

Some embodiments of the concepts and technologies disclosed herein support storing the newly received data as revision data at the data store . The newly received data can be stored by the data management application as revisions A N hereinafter collectively and or generically referred to as revisions . The revisions can be structurally similar to the partitions of the base data though this is not necessarily the case. In particular the revisions can be received by the server computer as data table updates table partition updates and or even partitions that may be associated with one or more records of a data table. The data management application can determine that the newly received data is associated with the base data . This determination can be made by the data management application by examining a key or other identifier included in the newly received data if included by comparing the newly received data to one or more partitions included in the base data by examining timestamps associated with the newly received data and or the base data in other ways combinations thereof or the like.

If the data management application determines that newly received data corresponds to an update for the base data the data management application can generate a key or other identifier for the newly received data if not already included and store the newly received data as revisions . The revisions can include a changed or modified value delta that defines a change made to a data point included in the base data . Thus the revision can include a key or other identifier that can be used to identify a base data partition or table partition a delta that defines a difference or other change made to the base data partition and a timestamp that indicates a time at which the revision was created or received. Because the revisions can include additional and or alternative information it should be understood that this embodiment is illustrative and should not be construed as being limiting in any way.

The data management application also can be configured to merge revisions with the base data at various times and or upon occurrence of various trigger conditions. In particular the data management application can be configured to accumulate the revisions in the data store . Upon receiving a trigger to merge the revisions the data management application can merge the revisions apply the merged revisions to the base data to generate an updated base data table or partition and store the updated base data table or partition at the data store as the base data . A trigger can include for example a command to merge revisions expiration of a timer detecting that a last merge operation was conducted at a time that exceeds a particular threshold value detecting that a particular number of actions have occurred at the data store and or the data management application other triggers or the like.

In merging the revisions the data management application can identify a particular revision based upon a key or other identifier associated with the revision and or by otherwise selecting a revision . The data management application can identify one or more related revisions which can collectively represent a number of updates to the base data . The data management application can merge the revisions to generate a merged revision and apply the merged revision to the base data . Thus the value of the base data can be updated to reflect the deltas of the merged revisions and the timestamp of the base data can be updated to reflect the most recent timestamp of the merged revisions . The updated base data can be saved at the data store as the base data thereby updating the base data only once while multiple revisions have been received. Prior to merging and or applying revisions to the base data however the server computer may receive requests for actions relating to the base data . The handling of these requests is described in additional detail below.

In particular the server computer can be configured to communicate with one or more computing devices such as for example the user device shown in to satisfy one or more requests. According to various embodiments for example the user device can generate one or more queries relating to the base data and can transmit or submit the queries to the server computer for execution against the data in in the data store . The server computer can execute the queries against the data store and provide results to the user device .

During execution of the queries against the base data the data management application can generate a result set during execution of the query against the base data . The data management application can store the result set in a data storage location such as a memory cache hard drive or the like. The data management application also can be configured to determine if one or more revisions stored at the data store is are relevant to the base data identified as satisfying the query executed against the base data . Thus the data management application can be configured to execute the query and obtain results and to determine if any of the results has have been updated between a time at which the base data was stored and a time at which the query was executed.

If the data management application identifies one or more revisions the data management application can retrieve the one or more revisions apply the revisions to the base data and generate results for returning to a requestor such as the user device . Thus the data management application can be configured to store updates to the base data and to generate results that incorporate the updates even if the updates have not yet been applied to the base data . Thus some embodiments of the concepts and technologies disclosed herein can be used to improve utilization of the server computer prevent frequent updates to the base data and or otherwise reduce utilization and or bandwidth consumption associated with maintaining frequently updated data while providing requestors with up to date results that reflect frequent updates. Additional aspects of these and other functions of the data management application are set forth below in additional detail.

Turning now to aspects of a method for storing data partition revisions will be described in detail according to an illustrative embodiment. It should be understood that the operations of the methods disclosed herein are not necessarily presented in any particular order and that performance of some or all of the operations in an alternative order s is possible and is contemplated. The operations have been presented in the demonstrated order for ease of description and illustration. Operations may be added omitted and or performed simultaneously without departing from the scope of the concepts and technologies disclosed herein.

It also should be understood that the methods disclosed herein can be ended at any time and need not be performed in its entirety. Some or all operations of the methods and or substantially equivalent operations can be performed by execution of computer readable instructions included on a computer storage media as defined herein. The term computer readable instructions and variants thereof as used herein is used expansively to include routines applications application modules program modules programs components data structures algorithms and the like. Computer readable instructions can be implemented on various system configurations including single processor or multiprocessor systems minicomputers mainframe computers personal computers hand held computing devices microprocessor based programmable consumer electronics combinations thereof and the like.

Thus it should be appreciated that the logical operations described herein are implemented 1 as a sequence of computer implemented acts or program modules running on a computing system and or 2 as interconnected machine logic circuits or circuit modules within the computing system. The implementation is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as states operations structural devices acts or modules. These states operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. As used herein the phrase cause a processor to perform operations and variants thereof is used to refer to causing a processor of a computing system or device such as the server computer to perform one or more operations and or causing the processor to direct other components of the computing system or device to perform one or more of the operations.

For purposes of illustrating and describing the concepts of the present disclosure the methods disclosed herein are described as being performed by the server computer via execution of one or more software modules such as for example the data management application . It should be understood that additional and or alternative devices and or network nodes can provide the functionality described herein via execution of one or more modules applications and or other software including but not limited to the data management application . Thus the illustrated embodiments are illustrative and should not be viewed as being limiting in any way.

The method begins at operation wherein the server computer obtains data. According to various embodiments the server computer can obtain the data by receiving retrieving and or otherwise obtaining data associated with a data stream . According to various embodiments the data sources can stream the data streams to the server computer . Thus the data obtained in operation can correspond to a single temporal release of one or more of the data streams though this is not necessarily the case. According to embodiments of the concepts and technologies disclosed herein the data obtained in operation can include a table of records and or data points that includes temporal data. Thus the data obtained in operation can correspond to a temporal data partition. It should be understood that this embodiment is illustrative and should not be construed as being limiting in any way.

From operation the method proceeds to operation wherein the server computer analyzes a time stamp included in the data obtained in operation . As explained above the data obtained at the server computer can include a time stamp and a data point. In some embodiments respective time stamps of the data can be the same as time stamps of data included in a base data table or partition stored as the base data at the data store . Thus the server computer can analyze the time stamps of data obtained in operation to determine if the data obtained in operation corresponds to new data or to updates of the base data .

From operation the method proceeds to operation wherein the server computer determines if the data obtained in operation corresponds to an update. Thus the server computer can determine in operation if the data obtained in operation corresponds to a new temporal data partition or an update to an existing temporal data partition. In particular the server computer can analyze one or more time stamps of data obtained in operation to determine if the data obtained in operation corresponds to a new temporal data partition by determining that one or more time stamps included in the data obtained in operation is or are not included in the base data .

Similarly the server computer can analyze the time stamps of data obtained in operation to determine if the data obtained in operation corresponds to an update to an existing temporal data partition by determining that one or more time stamps included in the data obtained in operation are included in the base data . Because the server computer can determine that the data obtained in operation corresponds to an update or a new temporal data partition in additional and or alternative ways it should be understood that these embodiments are illustrative and should not be construed as being limiting in any way.

If the server computer determines in operation that the data obtained in operation corresponds to an update for an existing temporal data partition the method proceeds to operation . In operation the server computer can compute a revision . The revision can include a delta and a time stamp. As explained above the delta of the revision can define a difference between a data point time value or other value of the base data and a data point time value or other value included in the data obtained in operation . Although not explicitly illustrated in it should be understood that the server computer can compute a revision for each update included in the data obtained in operation . As such the functionality of operation can be repeated by the server computer until revisions for each update are computed by the server computer .

From operation the method proceeds to operation . The method also can proceed to operation from operation if the server computer determines that the data obtained in operation corresponds to a new temporal data partition. In operation the server computer can store the data obtained in operation . Thus the server computer can store the data obtained in operation as the base data and or the revision data . Because the data obtained in operation can include new temporal data partition releases and updates to existing temporal data partitions it should be understood that the server computer can store in operation one or more instances of base data and or one or more revisions .

It can be appreciated that by executing the method described above some embodiments of the server computer can be configured to identify updates to the base data in data received at the server computer . Instead of using the updates to recompute and or store the base data the server computer can be configured to compute a revision corresponding to the update and to store the revision at the data store as revision data . Thus some embodiments of the concepts and technologies disclosed herein can be used to improve utilization of the server computer by preventing frequent updates to the base data and or otherwise reducing utilization and or bandwidth consumption associated with maintaining frequently updated data such as the base data described herein as including temporal data partitions associated with a data stream . As will be explained with reference to below however some embodiments of the server computer can provide results that reflect the updates received by the server computer by applying revisions to result sets generated by querying the base data .

Turning now to aspects of a method for responding to a query using data partition revisions will be described in detail according to an illustrative embodiment. The method begins at operation wherein the server computer receives a query . The query received in operation can include a query received from a requestor such as for example the user device . The query also can correspond to a standing query executed periodically by the server computer and or one or more reporting devices in communication with the server computer . The query received in operation can correspond to a query that is to be executed against the base data stored at the data store . As will be explained in more detail below the server computer can be configured to determine if the query is to be responded to with data obtained from the revision data in addition to or instead of the base data . Because the query can be executed against other data and or combinations of the base data and or the revision data it should be understood that this embodiment is illustrative and should not be construed as being limiting in any way.

From operation the method proceeds to operation wherein the server computer executes the query against the base data . Thus the server computer can identify one or more values data points time stamps keys identifiers records and or other information included in the base data that are responsive to the query received in operation . It should be understood that although not shown in the FIGURES the server computer can be configured to generate a call to and or to execute one or more query applications for executing the query . As such operation can include in some embodiments invoking functionality associated with a query application via an internal program call and or via an application programming interface API exposed by a query application or query device.

From operation the method proceeds to operation wherein the server computer stores a result set resulting from execution of the query against the base data in operation . Thus operation can include generation and or storage of a result set. The server computer can be configured to store the result set by persisting or otherwise storing the result set in a memory in a cache and or in other data storage devices or locations if desired. A result set generated in operation and or other results of the query executed in operation may be used to apply revisions to generate a set of results as will be explained in more detail below.

From operation the method proceeds to operation wherein the server computer determines if one or more revisions are stored at the data store . In particular the server computer can determine in operation if one or more revisions stored at the data store are relevant to the data included in the result set identified as satisfying the query in operation . According to various embodiments the revisions can include a key or identifier such as for example a string a GUID and or other identifiers that can be used to identify corresponding data included in the base data . As such the server computer can be configured to determine that one or more revisions are relevant to the base data by searching for matching GUIDs and or other keys or identifiers among the revisions or the like. Because the server computer can be configured to identify revisions in additional and or alternative ways it should be understood that this embodiment is illustrative and should not be construed as being limiting in any way.

If the server computer determines in operation that one or more revisions associated with the result set identified in operation are stored in the revision data the method proceeds to operation . In operation the server computer retrieves the revisions determined to be stored in operation . As noted above the server computer can identify the revisions by using a key GUID or other identifier of the revision . Thus the server computer can execute for example a get command in operation for obtaining the revisions having the identifier used to identify the revisions in operation . Because the revisions can be identified and retrieved in additional and or alternative ways it should be understood that this embodiment is illustrative and should not be construed as being limiting in any way.

From operation the method proceeds to operation wherein the server computer applies the revisions retrieved in operation to the result set of the base data identified in operation . As explained above with reference to the revisions can include but are not limited to a delta and a timestamp. In applying a revision to the base data which can be identified by a key GUID or other identifier the server computer can combine the delta of the applied revision with a data point of the base data to which the delta is applied to generate an updated base data table or partition which can correspond to an updated version of the base data . The server computer also can replace a time stamp of the base data with a time stamp of the applied revision . Thus after applying a revision to the base data the data point of the base data can reflect the applied delta and the time stamp of the base data can be the same as the applied revision . It should be understood that this embodiment is illustrative and should not be construed as being limiting in any way.

As explained above with reference to operation the server computer can store the result set determined in operation . As such in operation the server computer can apply each of the revisions retrieved in operation to the base data included in the result set stored in operation . As such the base data may be updated multiple times if multiple revisions are identified in operation . Thus although not explicitly illustrated in operation can be iterated for any number of identified revisions .

From operation the method proceeds to operation . The method also can proceed to operation from operation if the server computer determines that revisions are not stored at the data store . In operation the server computer outputs results . The results output by the server computer in operation can correspond to the result set determined in operation if no revisions are stored. If revisions are stored the results output in operation can correspond to the result set stored in operation wherein data of the result set can be modified by the deltas of corresponding revisions retrieved in operation .

It can be appreciated that by executing the method described above some embodiments of the server computer can be configured to provide up to the date results . These results can be generated by the server computer even though the updates may not be applied to the base data . These updates can be stored as revisions that can be maintained by the server computer for various amounts of time and or operations until a trigger is detected by the server computer . When the server computer detects a trigger event the server computer can by execution of the data management application merge multiple revisions to form a merged revision and apply the merged revisions to the base data . Thus the base data can be updated to reflect multiple revisions during execution of a single revision merging process. An example of the merging of revisions is illustrated and described below with reference to . By merging and applying multiple revisions during one process some embodiments of the concepts and technologies disclosed herein can further enhance utilization and or performance associated with the server computer by reducing a number of updates and or save operations. These and other aspects of a method for applying merged revisions to base data are described in additional detail below.

Turning now to aspects of a method for applying merged partition revisions to base data will be described in detail according to an illustrative embodiment. The method begins at operation wherein the server computer detects a trigger for revision merging. According to various embodiments of the concepts and technologies disclosed herein the server computer can be configured to merge revisions based upon various trigger events such as for example passage of a particular amount of time execution of a number of queries or other actions storage of a particular number of revisions receiving a command to merge revisions detecting expiration of a timer that can be initiated with each revision merging operation combinations thereof or the like. While the merging of revisions can be completed for various reasons it should be understood that in some embodiments the revisions can be merged with each other and or the base data to generate an updated version of the base data . It should be understood that this example is illustrative and should not be construed as being limiting in any way.

The numbers of operations and or the particular amounts of time that may be used to trigger merging of revisions can be options or configuration settings that may be determined various authorized entities including but not limited to operators and or customers associated with the server computer . Because revision merging can be triggered by any number of operations it should be understood that the above examples of triggering merging of the revisions are illustrative and should not be construed as being limiting in any way.

From operation the method proceeds to operation wherein the server computer identifies a revision . The server computer can identify a particular revision by identifying a revision associated with the base data by randomly selecting a revision and or in other ways. In some embodiments the server computer selects a revision in operation by identifying an oldest time stamp among multiple revisions and selecting the revisions with the oldest time stamp. Based upon a key GUID or other identifier in the base data the server computer can select a related revision . Because a revision can be selected in other ways it should be understood that these embodiments are illustrative and should not be construed as being limiting in any way.

From operation the method proceeds to operation wherein the server computer retrieves the revision identified in operation . In some embodiments the server computer can execute a get command to obtain the revision though the revision can be retrieved in additional and or alternative ways.

From operation the method proceeds to operation wherein the server computer determines if an additional revision is stored. In some embodiments two or more revisions can be stored in the revision data . The two or more revisions can correspond to two or more updates to the base data . As such the server computer can determine in operation if another revision relating to the revision retrieved in operation exists in the data store .

If the server computer determines in operation that an additional revision is stored the method can return to operation and the server computer can retrieve another related revision . Because almost any number of revisions can be stored at the data store depending upon settings and or limitations associated with the data store operations can be iterated almost any number of times. By iterating operations the server computer can retrieve any number of related revisions .

From operation the method proceeds to operation wherein the server computer merges the revisions retrieved in operations . To merge the revisions the server computer can combine the deltas of respective revisions . The server computer also can identify the most recent timestamp among the revisions to serve as a new time stamp for the merged revisions. Three example revisions Rev1 Rev2 and Rev3 and their respective delta and timestamp values are presented below in TABLE 1.

In merging the example revisions shown in TABLE 1 the server computer can merge the delta values 2 5 and 7 to obtain a merged delta value of 4. In some embodiments the server computer can merge the revisions from oldest revision to most recent revision an order that can be based upon the timestamp values if desired. In merging the revisions the server computer also can select the most recent timestamp value and use that value as the timestamp of the merged revisions . Thus in merging the above example revisions the server computer can generate a merged revision having a value of 4 and a timestamp of Aug. 28 2014 at 8 53 29 AM. Thus the server computer can be configured to determine based upon the example revisions shown in TABLE 1 that as of Aug. 28 2014 at 8 53 29 AM the delta of the revisions corresponds to a net change of 4. Because the illustrated revisions are illustrative this example should not be construed as being limiting in any way.

From operation the method proceeds to operation wherein the server computer can apply the merged revision generated in operation to the base data associated with the revisions . As explained above revisions can be associated with the base data by way of a key GUID or other identifier. Thus operation can include the server computer identifying the base data associated with the merged revision generated in operation as well as applying the merged revision with the base data . The application of the merged revision to the base data can be similar in some embodiments to the merging of revisions as described with reference to operation . Thus a data point of the base data can be combined with the delta of the merged revision and the timestamp of the base data can be replaced with the timestamp of the merged revision . In operation the server computer can generate an updated base data table or partition also referred to herein as an updated version of the base data .

From operation the method proceeds to operation wherein the server computer saves the updated base data . According to various embodiments the server computer can save the updated base data thereby replacing the base data to which the revisions have been applied with the updated base data that reflects the applied merged revisions . Although not shown in it should be understood that the server computer also can delete the old version of the base data and or the revisions retrieved in operations from the revision data . Thus after merging and applying revisions to the base data the server computer can be configured to delete the merged revisions and replace the base data with the updated based data .

Turning now to additional details of the network are illustrated according to an illustrative embodiment. The network includes a cellular network a packet data network for example the Internet and a circuit switched network for example a publicly switched telephone network PSTN . The cellular network includes various components such as but not limited to base transceiver stations BTSs Node B s or e Node B s base station controllers BSCs radio network controllers RNCs mobile switching centers MSCs mobile management entities MMEs short message service centers SMSCs multimedia messaging service centers MMSCs home location registers HLRs home subscriber servers HSSs visitor location registers VLRs charging platforms billing platforms voicemail platforms GPRS core network components location service nodes an IP Multimedia Subsystem IMS and the like. The cellular network also includes radios and nodes for receiving and transmitting voice data and combinations thereof to and from radio transceivers networks the packet data network and the circuit switched network .

A mobile communications device such as for example a cellular telephone a user equipment a mobile terminal a PDA a laptop computer a handheld computer and combinations thereof can be operatively connected to the cellular network . The cellular network can be configured as a 2G GSM network and can provide data communications via GPRS and or EDGE. Additionally or alternatively the cellular network can be configured as a 3G UMTS network and can provide data communications via the HSPA protocol family for example HSDPA EUL also referred to as HSUPA and HSPA . The cellular network also is compatible with 4G mobile communications standards as well as evolved and future mobile standards.

The packet data network includes various devices for example servers computers databases and other devices in communication with another as is generally known. The packet data network devices are accessible via one or more network links. The servers often store various files that are provided to a requesting device such as for example a computer a terminal a smartphone or the like. Typically the requesting device includes software a browser for executing a web page in a format readable by the browser or other software. Other files and or data may be accessible via links in the retrieved files as is generally known. In some embodiments the packet data network includes or is in communication with the Internet. The circuit switched network includes various hardware and software for providing circuit switched communications. The circuit switched network may include or may be what is often referred to as a plain old telephone system POTS . The functionality of a circuit switched network or other circuit switched network are generally known and will not be described herein in detail.

The illustrated cellular network is shown in communication with the packet data network and a circuit switched network though it should be appreciated that this is not necessarily the case. One or more Internet capable devices for example a PC a laptop a portable device or another suitable device can communicate with one or more cellular networks and devices connected thereto through the packet data network . It also should be appreciated that the Internet capable device can communicate with the packet data network through the circuit switched network the cellular network and or via other networks not illustrated .

As illustrated a communications device for example a telephone facsimile machine modem computer or the like can be in communication with the circuit switched network and therethrough to the packet data network and or the cellular network . It should be appreciated that the communications device can be an Internet capable device and can be substantially similar to the Internet capable device . In the specification the network is used to refer broadly to any combination of the networks . It should be appreciated that substantially all of the functionality described with reference to the network can be performed by the cellular network the packet data network and or the circuit switched network alone or in combination with other networks network elements and the like.

The processing unit may be a standard central processor that performs arithmetic and logical operations a more specific purpose programmable logic controller PLC a programmable gate array or other type of processor known to those skilled in the art and suitable for controlling the operation of the server computer. Processing units are generally known and therefore are not described in further detail herein.

The memory communicates with the processing unit via the system bus . In some embodiments the memory is operatively connected to a memory controller not shown that enables communication with the processing unit via the system bus . The memory includes an operating system and one or more program modules . The operating system can include but is not limited to members of the WINDOWS WINDOWS CE and or WINDOWS MOBILE families of operating systems from MICROSOFT CORPORATION the LINUX family of operating systems the SYMBIAN family of operating systems from SYMBIAN LIMITED the BREW family of operating systems from QUALCOMM CORPORATION the MAC OS iOS and or LEOPARD families of operating systems from APPLE CORPORATION the FREEBSD family of operating systems the SOLARIS family of operating systems from ORACLE CORPORATION other operating systems and the like.

The program modules may include various software and or program modules described herein. In some embodiments for example the program modules include the data management application . This and or other programs can be embodied in computer readable media containing instructions that when executed by the processing unit perform one or more of the methods described in detail above with respect to . According to embodiments the program modules may be embodied in hardware software firmware or any combination thereof. Although not shown in it should be understood that the memory also can be configured to store data from one or more of the data streams the base data the revision data and or other data if desired.

By way of example and not limitation computer readable media may include any available computer storage media or communication media that can be accessed by the computer system . Communication media includes computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any delivery media. The term modulated data signal means a signal that has one or more of its characteristics changed or set in a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM Erasable Programmable ROM EPROM Electrically Erasable Programmable ROM EEPROM flash memory or other solid state memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer system . In the claims the phrase computer storage medium and variations thereof does not include waves or signals per se and or communication media.

The user interface devices may include one or more devices with which a user accesses the computer system . The user interface devices may include but are not limited to computers servers personal digital assistants cellular phones or any suitable computing devices. The I O devices enable a user to interface with the program modules . In one embodiment the I O devices are operatively connected to an I O controller not shown that enables communication with the processing unit via the system bus . The I O devices may include one or more input devices such as but not limited to a keyboard a mouse or an electronic stylus. Further the I O devices may include one or more output devices such as but not limited to a display screen or a printer.

The network devices enable the computer system to communicate with other networks or remote systems via a network such as the network . Examples of the network devices include but are not limited to a modem a radio frequency RF or infrared IR transceiver a telephonic interface a bridge a router or a network card. The network may include a wireless network such as but not limited to a Wireless Local Area Network WLAN such as a WI FI network a Wireless Wide Area Network WWAN a Wireless Personal Area Network WPAN such as BLUETOOTH a Wireless Metropolitan Area Network WMAN such a WiMAX network or a cellular network. Alternatively the network may be a wired network such as but not limited to a Wide Area Network WAN such as the Internet a Local Area Network LAN such as the Ethernet a wired Personal Area Network PAN or a wired Metropolitan Area Network MAN .

Based on the foregoing it should be appreciated that systems and methods for generating and using temporal data partition revisions have been disclosed herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological and transformative acts specific computing machinery and computer readable media it is to be understood that the concepts and technologies disclosed herein are not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the concepts and technologies disclosed herein.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the embodiments of the concepts and technologies disclosed herein.

