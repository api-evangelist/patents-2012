---

title: Provisioning virtual machines from template by splitting and building index for locating content portions via content-centric network
abstract: Techniques are disclosed for provisioning virtual machines via content-centric networking approach in a computing system implemented with a distributed virtual infrastructure. In one example, a method comprises the following steps. A virtual machine template is obtained. The virtual machine template defines one or more segments which represent one or more content portions. The one or more content portions are addressable in accordance with a content-centric network communications protocol. At least one virtual machine is deployed from the virtual machine template. The generating and deploying steps are performed on one or more physical processing elements associated with a computing system implemented via a distributed virtual infrastructure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021478&OS=09021478&RS=09021478
owner: EMC Corporation
number: 09021478
owner_city: Hopkinton
owner_country: US
publication_date: 20120927
---
The field relates to computing systems implemented with a distributed virtual infrastructure and more particularly to techniques for provisioning virtual machines via a content centric network.

Currently data storage solutions implemented via data centers such as those using direct attached storage DAS or networked storage i.e. central storage or distributed storage are known to have limitations or challenges. For example these challenges may range from scalability reliability performance and deduplication to management cost and other issues. When data storage solutions are implemented in a distributed virtual infrastructure there are additional challenges.

As is known main elements of a virtual distributed infrastructure also known as a cloud infrastructure include components known as virtual machines and hypervisors. Virtual machines are logical processing elements that may be instantiated on one or more physical processing elements e.g. servers computers processing devices . That is a virtual machine may be considered a software implementation of a physical machine i.e. a computer that is able to execute programs in a manner functionally similar to program execution on a physical machine. Thus different virtual machines can run different operating systems and multiple applications on the same physical computer. Virtualization is realized via the use of a hypervisor which is a software component directly inserted on top of the computer hardware and used to allocate hardware resources of the physical computer in a dynamic and transparent manner. It is the hypervisor that enables multiple operating systems to run concurrently on a single physical computer and share hardware resources with each other.

Accordingly in a data center implemented in a distributed virtual infrastructure that provides processing and or storage solutions for clients hundreds of thousands of virtual machines may need to be provisioned simultaneously or at least within a very short time frame. While this is a common challenge for the data center it is understood to be a nontrivial task. Thus there is a need to provide improved techniques for the task of provisioning virtual machines particularly in a data storage environment.

Embodiments of the invention provide techniques for provisioning virtual machines via content centric networking approach in a computing system implemented with a distributed virtual infrastructure.

In one embodiment a method comprises the following steps. A virtual machine template is obtained. The virtual machine template defines one or more segments which represent one or more content portions. The one or more content portions are addressable in accordance with a content centric network communications protocol. At least one virtual machine is deployed from the virtual machine template. The generating and deploying steps are performed on one or more physical processing elements associated with a computing system implemented via a distributed virtual infrastructure.

Deployment of the at least one virtual machine may comprise specifying a correspondence between sectors of a virtual disk associated with the at least one virtual machine and uniform resource identifiers used to address the one or more content portions associated with the virtual machine template.

The virtual machine template may be stored on a repository and the at least one virtual machine may be deployed on a node whereby the repository and the node communicate via the content centric communications protocol.

In another embodiment a computer program product is provided which comprises a processor readable storage medium having encoded therein executable code of one or more software programs. The one or more software programs when executed by the one or more physical processing elements of the computer system implement steps of the above described method.

In yet another embodiment a content centric network comprises a repository and one or more nodes operatively coupled to the repository. The repository stores one or more virtual machine templates. Each virtual machine template defines one or more segments which represent one or more content portions associated with the virtual machine template. Each node is configured to deploy one or more virtual machines from at least one of the one or more virtual templates stored at the repository. The one or more nodes communicate with the repository in accordance with a content centric network communications protocol. The repository and the one or more nodes are implemented on one or more processing devices.

Advantageously embodiments described herein provide techniques for improved provisioning of virtual machines in a data center environment. The content centric network approach allows for deduplication of portions of similar VM images. Further by utilizing an approach whereby a data address is based on content rather than location management of data in a virtualized data center is vastly improved.

These and other features and advantages of the present invention will become more readily apparent from the accompanying drawings and the following detailed description.

Embodiments of the present invention will be described herein with reference to exemplary computing systems and data storage systems and associated servers computers storage units and devices and other processing devices. It is to be appreciated however that embodiments of the invention are not restricted to use with the particular illustrative system and device configurations shown. Moreover the phrases computing system and data storage system as used herein are intended to be broadly construed so as to encompass for example private or public cloud computing or storage systems as well as other types of systems comprising distributed virtual infrastructure. However a given embodiment may more generally comprise any arrangement of one or more processing devices.

As used herein the term cloud refers to a collective computing infrastructure that implements a cloud computing paradigm. For example as per the National Institute of Standards and Technology NIST Special Publication No. 800 145 cloud computing is a model for enabling ubiquitous convenient on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services that can be rapidly provisioned and released with minimal management effort or service provider interaction.

As used herein a data center refers to a computing system or environment with one or more processing elements that stores and or processes data for one or more tenants e.g. clients or customers of a provider entity that manages the computer system or environment.

Further as used herein the term provisioning refers to the process es of generating and deploying a computing resource in a computing system such as for example in a cloud infrastructure environment generating and deploying one or more virtual machines in a data center.

Although system elements and are shown as separate elements in these elements or portions thereof may be implemented at least in part on a common processing platform. For example system may be implemented within the cloud infrastructure . In other embodiments one or more of the system elements and may each be implemented on a separate processing platform such as the processing platform to be described below in conjunction with . For example the cloud infrastructure may be implemented on a first processing device of a first processing platform and the content centric networking based virtual machine provisioning system may be implemented on a second processing device of a second processing platform. It is also to be understood that a given embodiment of the system may include multiple instances of the system elements and although only single instances of such elements are shown in the system diagram for clarity and simplicity of illustration.

As shown in the cloud infrastructure corresponding to in comprises virtual machines VMs . . . N implemented using a hypervisor . The hypervisor as mentioned above is an example of what is more generally referred to herein as virtualization infrastructure. The hypervisor runs on physical infrastructure e.g. such as may include CPUs and or storage devices in . The cloud infrastructure further comprises sets of applications . . . N running on respective ones of the virtual machines . . . N utilizing associated LUs under the control of the hypervisor .

Although only a single hypervisor is shown in the example of a given embodiment of cloud infrastructure configured in accordance with an embodiment of the invention may include multiple hypervisors each running on its own physical infrastructure. Portions of that physical infrastructure might be virtualized.

An example of a commercially available hypervisor platform that may be used to implement portions of the cloud infrastructure in one or more embodiments of the invention is the VMware vSphere which may have an associated virtual infrastructure management system such as the VMware vCenter . The underlying physical infrastructure may comprise one or more distributed processing platforms that include storage products such as VNX and Symmetrix VMAX both commercially available from EMC Corporation of Hopkinton Mass. A variety of other storage products may be utilized to implement at least a portion of the cloud infrastructure .

An example of a processing platform on which the cloud infrastructure and or the content centric networking based virtual machine provisioning system of may be implemented is processing platform shown in . The processing platform in this embodiment comprises at least a portion of the system and includes a plurality of servers denoted . . . P which communicate with one another over a network . One or more of the elements of system may therefore each run on a server computer or other processing platform element which may be viewed as an example of what is more generally referred to herein as a processing device. As illustrated in such a device generally comprises at least one processor and an associated memory and implements one or more functional modules for controlling certain features of system . Again multiple elements or modules may be implemented by a single processing device in a given embodiment.

The server in the processing platform comprises a processor coupled to a memory . The processor may comprise a microprocessor a microcontroller an application specific integrated circuit ASIC a field programmable gate array FPGA or other type of processing circuitry as well as portions or combinations of such circuitry elements. The memory may be viewed as an example of what is more generally referred to herein as a computer program product. A computer program product comprises a processor readable storage medium having encoded therein executable code of one or more software programs. Such a memory may comprise electronic memory such as random access memory RAM read only memory ROM or other types of memory in any combination. The computer program code when executed by a processing device such as the server causes the device to perform functions associated with one or more of the elements of system . One skilled in the art would be readily able to implement such software given the teachings provided herein. Other examples of computer program products embodying embodiments of the invention may include for example optical or magnetic disks.

Also included in the server is network interface circuitry which is used to interface the server with the network and other system components. Such circuitry may comprise conventional transceivers of a type well known in the art.

The other servers of the processing platform are assumed to be configured in a manner similar to that shown for server in the figure.

The processing platform shown in may comprise additional known components such as batch processing systems parallel processing systems physical machines virtual machines virtual switches storage volumes logical units etc. Again the particular processing platform shown in the figure is presented by way of example only and system may include additional or alternative processing platforms as well as numerous distinct processing platforms in any combination.

Also numerous other arrangements of servers computers storage devices or other components are possible in system . Such components can communicate with other elements of the system over any type of network such as a wide area network WAN a local area network LAN a satellite network a telephone or cable network or various portions or combinations of these and other types of networks.

Illustrative details of the content centric networking based virtual machine provisioning system will now be described with reference to .

As is known a virtual machine provisioned by a virtualized data center is typically referred to as a VM instance or simply a VM. A VM or VM instance may also be referred to as a VM image file or simply VM image. VM instances are created from a VM template. A VM template contains a basic operating system and one or more applications e.g. commonly used applications such as a database management system or some user specified application which the VM will run once deployed. The VM template is a static object in that it is not executed. Rather a VM image or VM instance is created from the VM template and the VM instance is dynamic in that it is executed and thereby runs an operating system and applications processes performing computations and input output operations. The data center service provider thus provisions VMs to meet the needs of those entities e.g. customers or tenants that contract with the service provider to provide processing and or storage services. However as mentioned above provisioning hundreds of thousands of these VMs in a relatively short period of time is a daunting task given the file size of many of the VM images files gigabytes .

To address these and other issues embodiments of the invention implement VM provisioning in accordance with a content producer consumer model i.e. via a content centric network CCN . In CCN content objects are addressable via content names rather than via the location where the content is stored. Further in CCN data is stored transferred and cached at a chunk level. It is realized here that a CCN networking approach is an advantageous way to implement a VM provisioning system. For example as applied to VM provisioning in accordance with embodiments of the invention a chunk is a content portion or segment of a VM image. One advantage to operating on a chunk level as opposed to operating on a VM image level is that chunks that are common across multiple VM images can be more efficiently handled. For example the CCN approach allows for deduplication of the same chunks among similar VM images. Further by utilizing an approach whereby a data address is based on content rather than location management of data in a virtualized data center is vastly improved.

In an illustrative embodiment a CCN approach based on CCNx is employed. CCNx is a CCN communications architecture launched and sponsored by Palo Alto Research Center Inc. PARC of Palo Alto Calif. The CCNx communications architecture is described in a series of protocols and specifications available at ccnx.org including but not limited to those entitled CCNx Protocol CCNx Repository Protocols CCNx Interest Message and CCNx Signature Generation and Verification the disclosures of which are incorporated by reference herein in their entireties. It is to be understood however that alternative embodiments may employ other CCN approaches or combinations thereof and thus embodiments of the invention are not limited to the CCNx communications architecture nor the CCNx protocols or specifications.

As shown the provisioning system includes a plurality of nodes through M. Each node is considered a content centric network CCN node. The CCN nodes through M are operatively coupled via a communication network to a VM repository . Each CCN node includes the following components referenced as for CCN node and M for CCN node M a plurality of VMs and while three are shown each node may have more or less VMs deployed thereon a hypervisor a CCN disk driver a CCN daemon and a CCN cache . VM repository includes a CCN daemon and a plurality of VM templates . Because VM repository includes a CCN daemon it too can be considered a CCN node but for the sake of clarity will be referred to as a VM repository in this illustrative description.

Also note that each CCN node and repository can be implemented via one of the servers described above in the context of . However in some embodiments two or more of the CCN nodes and repository may be implemented on the same server . Still further it is to be appreciated that each CCN node and repository can be implemented as part of the computing resources associated with cloud infrastructure in .

Each CCN daemon that respectively resides on the CCN nodes and the VM repository is a background process i.e. daemon that allows each node and repository to implement a CCN communications protocol e.g. CCNx in one illustrative embodiment . That is CCN messages exchanged by the nodes and the repository are sent received and otherwise controlled by the CCN daemons running thereon.

The CCN disk driver on each CCN node serves to abstract the underlying CCN network managed by the daemon and inter alia presents a list of content segments as a virtual disk. As will be explained in further detail below the virtual disk operates in coordination with the VM repository to read and write content objects associated with deployed VMs and at each node that utilize the virtual disk.

The CCN cache on each CCN node serves as local storage for content objects associated with the deployment of the VMs and at each node.

The hypervisor of each node manages the disk driver the daemon and the cache in addition to managing the VMs and .

Communication network can be any form of communication network such as the Internet an intranet a wireless network a wired network or some combination thereof. Accordingly each CCN node and repository sends and receives including forwarding and buffering CCN messages including requests and content objects over the communication network . As such all components in support the CCN communications protocol.

The VM repository plays the role of content provider and all interactions with the repository are conducted through daemon . The data or content associated with a VM template and thereby a VM or virtual disk deployed from the template in VM repository is located via a CCN uniform resource identifier URI and is split into segments or chunks. A segment is the basic unit for storing buffering and transmission in system . VM templates are stored in VM repository and published via a publisher specific URI e.g. ccnx mycorp.com app1 linuxvm. All segments for this VM template can be located under this URI prefix see CCNx Interest Message cited above for requesting data segments . It is to be understood that while one VM repository is shown in system can have several different CCN repositories.

As mentioned above it is to be understood that one or more VM images are formed from a VM template. In one example the VM image contains one or more virtual disks which can be loaded by the hypervisor and finally become the whole or part of a particular VM instance. The VM template contains several data structures contents or pre defines some formats. The template is then converted or transferred into one or more actual VM images. Generally a VM template cannot be directly executed i.e. they are static while VMs are dynamic .

In one embodiment to abstract the underlying CCN network and present a list of content segments as part of a given virtual disk the CCN disk driver is implemented for the VM hypervisor . There is a profile for each virtual disk which contains metadata including disk size and a mapping from disk sectors to CCN content objects stored on the VM repository . The disk driver manages each such profile. In general in accordance with the CCNx protocol the specification e.g. naming rules data formats and message semantics of an application protocol on top of the CCNx protocol is called a profile. Such a profile may also include specification of one or more application programming interfaces APIs .

Given the illustrative CCN network shown in and virtual disk profile in several methodologies associated with such an implementation will now be described with continued reference to components shown in .

As shown in step a user defines generates a VM template. This may be done at one of the CCN nodes . The user here may be an administrator of the service provider of the data center or an administrator of a tenant that is contracting services from the data center service provider. In step the user publishes imports the VM template to the VM repository . This can be done with a publish tool which supports the CCN protocol. The user specifies the URI a key and other properties for the VM template. The key is used to generate a digital signature so clients who use this VM template can verify the signature to make sure it is published by a declared user see the above cited CCNx specification entitled Signature Generation and Verification .

In step VM repository splits the VM template into segments. The one or more segments represent one or more content portions of the template and thus of a VM or virtual disk that is deployed from the template . The one or more content portions are addressable and accessible via the CCN communication protocol. In step the VM repository writes the segments on a given virtual disk and then builds an index in step for quick location of each segment. Note again that since the communications architecture is content centric each segment is addressable via a content name rather than a location address. For example when the VM template is associated with a virtual disk the segments or content portions are the disk sectors specified by the disk driver profile in .

In step a user locates a VM template on the VM repository and deploys a VM or from the template on a CCN node . The virtual disk s for the VM is specified created via the profile managed by the CCN disk driver in step .

In step when the VM reads data from a virtual disk the disk profile is queried and a CCN request for the relevant content object stored in one or more disk sectors is sent out. There are two scenarios for such a request a cache hit or a cache miss. For the cache hit scenario if a given content object has already been cached locally in the cache of the requesting node then the data is returned back immediately. However if the content object is not cached locally i.e. a cache miss then the request is sent to the VM repository . There is a possibility that the content object is cached on another nearby node and if so it can be fetched therefrom. When the content object is retrieved successfully it is returned by the disk driver to the VM or and also stored in the local cache .

In step when the VM writes data to a virtual disk the relevant content object will be modified. An updated content object can be handled in several ways. In one embodiment the modified content object is stored on local disks or a regular networked storage. In an alternative embodiment the modified content object is republished to the VM repository with a new URI. For both approaches the profile is updated accordingly.

In step the given VM for which a snapshot is desired is located in the CCN network . Then in step a snapshot is taken of the virtual disk profile . This is considered a quick snapshot as it is intended to be a quickly attainable representation of the state of the virtual disk associated with a VM at a given time.

In step the given VM to be republished is located in the CCN network . In step the VM is republished. That is for the VM the system can republish a VM including all the content objects listed in the disk profile into the VM repository . In one example the system can choose a new URI and publish the given VM as a new VM template. Alternatively the given VM can be designated as a newer version of the original VM template.

As illustratively explained above a CCN based VM provisioning system according to embodiments of the invention provides a central management for all VM templates version control for VM templates different publishers of different URIs a single VM template used for multiple VM instances and quick snapshot capability.

Embodiments of the invention provide many advantages. For example the local cache reduces network workload and latency and improves input output performance. The CCN approach is independent of the underlying network infrastructure and VM templates are located via URIs instead of hostname IP address or LUN logical unit number . Further a single VM template can support hundreds of VM instances simultaneously without performance loss which is also a form of deduplication and as such increases storage efficiency. The CCN approach is easy to implement thus making VM deployment more efficient and easier for the data center service provider.

It should again be emphasized that the above described embodiments of the invention are presented for purposes of illustration only. Many variations may be made in the particular arrangements shown. For example although described in the context of particular system and device configurations the techniques are applicable to a wide variety of other types of information processing systems computing systems data storage systems processing devices and distributed virtual infrastructure arrangements. In addition any simplifying assumptions made above in the course of describing the illustrative embodiments should also be viewed as exemplary rather than as requirements or limitations of the invention. Numerous other alternative embodiments within the scope of the appended claims will be readily apparent to those skilled in the art.

