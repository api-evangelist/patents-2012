---

title: Updating local database and central database
abstract: A non-transitory computer readable medium can include a local management service programmed to receive real-time status information from producer components registered within the local management service. The local management service can also periodically propagate status data to a local database based on the real-time status information, the status data corresponding to changes in the status information for at least one of the producer components. A local system manager can be programmed to push the status data across a network to a central system manager to facilitate a storing of the status data in a central database, wherein the status data pushed to the central system manager includes only status data changed in the local database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09043274&OS=09043274&RS=09043274
owner: Shoretel, Inc.
number: 09043274
owner_city: Sunnyvale
owner_country: US
publication_date: 20120522
---
Systems and methods for updating a database are disclosed. In particular systems and methods for updating a local database and a central database are disclosed.

A database is an organized collection of data in digital form. The data in a database can be organized to model relevant aspects of reality in a way that supports processes that require this information. A database can have a model that describes a theoretical foundation of the database and fundamentally determines in which manner data can be stored organized and manipulated in a database system.

A hierarchical database model is a database with a data model in which the data is organized into a tree like structure. The structure allows representing information using parent child relationships in which each parent can have many children and each child has one parent also known as a 1 to many relationship .

In one example a non transitory computer readable medium can include a local management service programmed to receive real time status information from producer components registered within the local management service. The local management service can also propagate status data to a local database based on the real time status information which can be performed periodically or asynchronously based on the status data. The status data stored in the local database corresponds to changes in the status information for at least one of the producer components. A local system manager can be programmed to push the status data across a network to a central system manager to facilitate a storing of the status data in a central database wherein the status data pushed to the central system manager includes only status data changed in the local database.

In another example a system can include a central server communicatively coupled to a plurality of local servers over a network. Each local server can include a local management service programmed to receive real time status information from producer components registered within the local management service and periodically propagate status data to a local database based on the real time status information the status data corresponding to changes in the status information for at least one of the producer components. The local server can also include a local system manager programmed to push the status data across a network to a central system manager of the central server to facilitate a storing of the status data in a central database wherein the status data pushed to the central system manager includes only status data changed in the local database. The central system manager of the central server can be programmed to receive the status data from the local system manager associated with each of the plurality of local servers and to write the status data to a central database in a record associated with the given local server.

In yet another example a method can include receiving current status information from a given producer component of a plurality of producer components registered with a local server and determining status data for the given producer component based on the received status information. The method can also include periodically updating a local database associated with the local server based on the determined status data. The status data can be sent from the local database to a central database wherein the status data sent to the central system manager includes only status data changed in the local database.

The system can include a central server that could be implemented for example as a computer. As used herein the term central is not intended to denote information about location but instead refers to its hierarchical status in the system . The central server can include a memory for storing machine readable instructions. The memory could be implemented for example as volatile memory e.g. random access memory nonvolatile memory a hard disk drive a solid state drive flash memory or the like or a combination thereof. The central server can also include one or more processing units to access the memory and execute the machine readable instructions. The processing unit can be implemented for example as including a processor core.

The memory can include a central system manager that can read and write data e.g. manage data to and from a central database e.g. a central repository that can be stored in the memory of the central server . It is to be noted that while the present examples illustrate the central database as being integrated with a central system in other examples the central database could be stored externally to the central system.

The system can also include N number of local servers that can communicate with the central server via the network where N is an integer greater than or equal to one . Each of the N number of local servers can be implemented as a computer and as mentioned with respect to the server can include a processing unit and memory that stores instructions and data. For purposes of simplification of illustration only contents of LOCAL SERVER hereinafter referred to as the first local server are included however each of the 2 N local servers can be implemented in a similar manner. For example the signaling between servers and can be implemented via a JavaScript Object Notation JSON message format such as for sending the updates notifications and commands as structured data over the network .

The first local server can include a local management service that executes on the first local server e.g. in a memory of the first local server . A plurality of producer components can be registered for operation in the system . The producer components can be any hardware and or software component that is registered with the service for which the system can monitor or control its configuration and or operation. For example in the context of a telecommunication system producer can include switches or communication devices interfaces voicemail service telecommunication management service a conference bridge service an instant messaging service and the like.

In the example of the local management service can communicate with M number of switches where M is an integer greater than or equal to zero. For example the local server can be programmed to manage each such switch and other devices . It is noted that in other examples the first local server and a switch or some subset thereof can be collocated in a single appliance. As yet another example the local server can be utilized to provide one or more telecommunication services e.g. voicemail service within the system and one or more switches and other devices in the system can be actively managed by one or more different servers not shown .

As one example the local management service can be implemented as a telecommunications management service TMS programmed to control and monitor the status of associated producer telecommunication devices and . In some examples the first local server can communicate with each of the M number of switches over a private network e.g. a local area network . In other examples the first local server can communicate with each of the M number of switches over the network . Additionally the first local server may communicate with the switches via different networks such as including one or more private networks as well as the network .

By way of example each of the switches can be implemented as a telephony switch that can route connections e.g. telephone calls and or data connections to and from K number of the devices where K is an integer greater than or equal to zero. A connection between the first local server and each of the K number of switches can be secured or unsecured. Each of the K number of devices could be implemented for example as a wired telephone e.g. a digital phone a desktop IP phone a POTS phone or the like a mobile phone a videoconferencing terminal a computer an application running on a computer and the like. While for purposes of simplification of explanation only illustrates a set of device connected with the first switch labeled in as SWITCH 1 it is to be understood that each the 2 N switch could be implemented in a similar manner.

In some examples each component of the central server the N number of local servers the M number of switches and the K number of devices can be implemented as virtualized hardware. For instance each of the illustrated components of the system can be implemented on a virtual machine that can include a virtual processor and virtual memory that are executing on a host machine.

As a further example each switch can be implemented as hardware and or software that channels incoming data from any of multiple input ports to a specific output port to take the data toward its intended destination. In the traditional circuit switched telephone network one or more switches are used to set up a dedicated though temporary connection or circuit for an exchange between two or more parties. On an Ethernet local area network LAN or a wide area network WAN the switch determines from an address in each incoming message packet which output port to forward the packet to for example.

The first switch can include a switch service that executes on the switch . The switch service can be implemented for example as a telephony service such as a voicemail service. In such a situation the switch service can store voice mailboxes e.g. as files for each of the K number of devices or some subset thereof. Each of the voice mailboxes can include for example personal information an associated user e.g. PIN a greeting or the like for as well as voice messages for the associated user.

In some examples a given device can be in continuous communication with the first switch such as where the given device is implemented as a wired telephone. In other examples the given device can be in intermittent communication with the first switch such as examples where the given device is implemented as a mobile phone or a smartphone. In either situation the given device can provide a status signal e.g. a real time status update to the first switch . For instance the status signal could indicate that the given device is ready to receive and or initiate a telephone or data connection with another device via the first switch where the other device may or may not be coupled to the first switch .

The first local server can also include one or more local services that can be implemented as a computer application for providing services to the M number of switches and or the K number of devices . Such services could include for example voice services such as voicemail conference bridging or the like. The local service can include local configuration data that includes for example parameters for set up and operation the local service . Additionally the local service can include status data characterizing status information of services provided by the local service . As disclosed herein the status data can include hierarchical status for components at each level that is managed by or within the context of the local service . The switches devices as well as applications executing within the system can transfer status information to the local server according a predefined JSON format for example. Other message formats can also be utilized.

The local management service of the first local server can monitor the status of the local service . For instance during initial setup the local management service can poll the local service for configuration data and status data. The local management service can store the configuration data and the status data for the local service in a local database . The local management service can also poll each of the M number of switches for configuration data and status data. The status data of the M number of switches can include a status of devices internal to the switches such as a status of fans trunk channels logical software devices e.g. route points or soft extensions or the like. The status data can also include a status of the switch service executing on the first switch . Upon receiving a response to the poll the local management service can write the configuration data and the status data of each of the N number of switches into the local database . Additionally or alternatively in some examples the local management service and the switches can include an application programming interface API that communicate to facilitate the transfer of configuration data and status data between the switches and the local management service . Similarly the local management service can write corresponding configuration data and status data of devices into the local database . The local database can be implemented as a child of the central database such that the local database and the central database have a hierarchical relationship. As an example the local database can be implemented as a local heap status cache that is optimized for speed and ease of access of the status data stored therein. In some examples the local database and the central database can be implemented to employ the same primary keys for objects stored therein. In this way upon writing modifying or deleting objects from the local database and the central database primary key consistency issues can be avoided.

Additionally during normal operation after initial set up the local management service of the first local server can be programmed to monitor the status of each of the producer components registered with the local server including the M number of switches and their associated internal devices the switch service each local service and each device registered therewith. For instance each of the M number of switches can provide the local management service with real time status of each of the associated devices . Additionally each of the M number of switches can include configuration data that characterizes parameters of the associated switch as well as status information related to the internal devices and or a switch service of the associated switch . In some examples each of the M number of switches can also provide firmware information and or connectivity information related to each of the M number of switches and or each of the K number of devices . The local management service can aggregate the real time status information received from each local service switches and devices in a buffer .

For example the status information being aggregated for a local management service of a given server corresponds to those producers that operate within the context of each given server. That is each server can roll up only that status information which it receives from its associated producers and . As disclosed herein each server rolls up its status information to the central database periodically or asynchronously depending on the type of status information . The central system manager can further aggregate the status information that is rolled up from each local server and provide a corresponding system level view of such status information. The system level view of such status information can be based on analysis of logical and physical connections in the system .

As a further example the system level view of status information can include status across various hierarchical levels e.g. logical levels of hierarchy that are implemented within the system which may include combinations of information more than that which is available from any one server . For example a given site can be a logical group of servers and producers that includes more than one switch and different switches for the given site can be managed by different ones of the servers . The central system manager thus can glean a complete representation of status information across the system including site level status by aggregating status information from different local servers to provide such aggregate status information. The central server can perform such final aggregation of status information for each level of hierarchy that is implemented in the system.

In some examples the real time status provided by a given switch can include a connectivity status that characterizes connectivity between the given switch and each of the other switches in the system . For instance the connectivity status can include a list of the switches that the given switch is currently connected to.

The local management service can determine status data for producer components corresponding to status information that has changed for each such producer component. The local management service further can analyze the status data. In some examples analysis of the status data can include an analysis of the connectivity status of each of the M number of switches e.g. those switches that are monitored by each respective server . In such a situation the status data can include changes to an optimized connectivity list for the M number of switches. To generate the optimized connectivity list different techniques can be employed. In a first example technique the local management service can analyze the connectivity status of each of the M number of switches to determine a list of disconnected switches as the optimized connectivity list since a disconnected switch will not be connected to any of the M number of switches . Moreover in many environments of application the list of disconnected switches can be relatively small since most switches often 98 or more of the switches are not disconnected. In a second example technique the local management service can determine a list of connected switches as the optimized connectivity list based on the connectivity status from each of the M number of switches . The second technique may be employed by the local management service if the local management service determines that the second technique would result in a more optimized e.g. smaller connectivity list than the first technique such as situations where a relatively large number of switches e.g. greater than 50 are disconnected. Based on the analysis of the buffered status information the local management service can selectively periodically or asynchronously propagate the status data to the local database . As disclosed herein most types of status information can be propagated periodically to the local database . Certain types of status information e.g. corresponding to predetermined types of events can be propagated asynchronously in real time to the local database.

Additionally in some examples the local management service can notify e.g. via a message or other type of signaling a local system manager of the first local server that a change to the local database has occurred. In other examples the local management service can periodically e.g. about every 30 seconds examine the local database to determine if a change to the local database has occurred. In either situation the local system manager can push the configuration data and the status data for the local service each of the M number of switches and each of the K number of devices to the central system manager of the central server . The connection between the local system manager and the central system manager can be secured or unsecured. For example the local system manager can send updates periodically to reflect changes that have occurred since the last update was sent. The central system manager can store the configuration data and the status data in a database record associated with the first local server in the central database . In this manner the central database can store the configuration data and the status data for each of the N number of local servers .

In some examples the central system manager can examine the optimized connectivity list or changes to the optimized connectivity list in the status data pushed by the local system manager to determine a connectivity matrix for the system that can be stored in the central database . The connectivity matrix can be implemented as a matrix that lists connectivity between each of the switches in the system . The connectivity matrix can be derived from optimized connectivity lists provided from the N number of local servers . For example the connectivity lists can be implemented as a list of disconnected switches such as to reduce the amount of data in a given list during normal operations that is sent through the network. As another example the connectivity list can provide a list of disconnected switches or a list of connected switches .

During operation changes to the system can occur intermittently and or periodically. The local management service can receive a real time status from each of the M number of switches and the K number of devices in response to a poll. Each status can indicate for example a health e.g. online status of a switch or device a connection status or the like. Upon the collection and or determination of the status of the M number of switches periodically e.g. about every 30 seconds the local management service can examine the local database to determine if the status and or configuration of any of the M number of switches has changed since the last time that the local database is updated any of which changes can collectively be referred to as a status change. If it is determined that a status change has occurred the local management service can write status data characterizing the status change to the local database . The status data can include a metric such as local timestamp a sequence number or the like that identifies a time local to the first local server when the status data was written to the local database .

In some examples in response to writing the status data to the local database the local management service can notify e.g. signal the local system manager that the status data has been written to the local database . In other examples the local system manager can periodically e.g. at about the same frequency that the local management service writes to the local database examine the local database to determine if an update to the local database has occurred. In either situation the local system manager can obtain e.g. pull the status data that characterizes the status change from the local database and send e.g. push the status data to the central system manager of the central server . The central system manager can also record the status data in the database record associated with the local server and the database record can be stored in the central database . The central system manager can include a central timestamp with the status data that is written to the database record in the central database . The central timestamp can record the time local to the central server when the database record is written in the central database associated with the first local server . In some examples the push of the status data to the central system manager occurs at about the same frequency as the local management service writes to the local database . This occurs in some examples since the local management service can notify the local system manager of the writing of the status data to the local database and the local management service updates the local database periodically. Additionally this occurs in other examples since the local system manager is programmed to examine the local database for updates with about the same frequency that the local management service updates the local database .

As another example the local system manager can determine that a given status change should not be stored in the local database or be pushed to the central system manager . For instance the status of a given device can rapidly change from connected to disconnected and vice versa. Each such status change may not need to be reflected in the central database of the central server or in the local database . Thus the local management service can include a filter function programmed to examine the status of each of the M number of switches and or each of the K number of devices to determine if the status data written to the local database should include the given a status change.

In some examples the local system manager can also include an event detector that can detect events corresponding to certain types of status information which should be recorded in the local database and the central database as soon as practical e.g. in real time asynchronously and sooner than the update rate of the periodic updates. For instance if the first switch is rebooted upon reboot the local management service can receive a real time update of the status of the first switch . In such a situation the local management service can immediately e.g. asynchronously write the status data characterizing the updated status to the local database e.g. in between the periodic update of the local database . In another example the event detector of the local management service can detect that the given switch is down offline by detecting that the given switch is no longer providing real time updates of its status to the local management service . In such a situation the local management service can asynchronously write status data that can set the status of the given switch and the associated devices connected thereto to offline or some equivalent status. In these situations the local management service can notify e.g. signal the local system manager that status data has been written to the local database such that the status data can be updated in the central database in substantially real time.

Employment of the system can ensure a high degree of sanity for data stored at the local database and the central database . For instance the central system manager can include a heartbeat that records every time that one of the local management system manager on a given one of the N number of local servers pushes a status change to the central system manager . The heartbeat can be provided with the status data or via separate signaling e.g. JSON message format XML message or the like . Should the central system manager fail to receive the status update from a given local server in a certain period of time e.g. 2 minutes the central system can update the central database record associated with the given local server . The equivalent status can also be updated locally to reflect the absence of the heartbeat. The update for example can involve invoking a clean up operation to remove records that may be considered stale e.g. older than the last heartbeat or expected update .

The central system manager can monitor and maintain the overall status of the system and the status information can be stored in the central database . In some examples a client computer can be coupled to the network . The client computer can be implemented for example as a desktop computer a laptop computer a mobile device e.g. a tablet computer or a smartphone or the like. The client computer can include a graphical user interface GUI to communicate with the central system manager . There can be any number of one or more client computers each of which can implement an instance of the GUI . In one example the GUI can in response to a user input provide a request to the central server for data characterizing a status of the system . In response the central system manager can query the central database and provide the response to the query e.g. requested data to the client computer . The user of the client computer can view e.g. in graphical form a status of the central server the N number of local servers the M number of switches and the K number of devices .

Additionally in response to user input the GUI can request changes to the system . For instance in one example in response to the user input the GUI can provide a request to the central system manager to reboot the first switch . In response to the request the central system manager can communicate with the local system manager of the first local server to propagate a reboot command for the first switch . Upon receiving the reboot command for the first switch the local system manager of the first local server can notify e.g. signal the local management service of the reboot command for the first switch . In response to receiving the reboot command for the first switch the local management service can command the first switch to reboot and write a status change to the local database . In other examples changes such as a device reboot a switch and or a device deletion or addition or the like can additionally or alternatively be propagated through the system via messaging. By employment of the client computer the user can make changes to the system that can be propagated to the appropriate hierarchical level e.g. the first switch .

The system also helps reduce network traffic. For instance since the local database is only updated periodically with the exception of the asynchronous updates chatter due to rapidly changing statuses of devices need not be written to the local databases of the N number of local servers . Moreover reducing the updates to the local databases can reduce the amount of data pushed by the local system manager to the central system manager . Further since only the changes to the local databases are pushed to the central system manager as opposed to replicating the entire contents of the local database network traffic can be still further reduced. Such a reduction of network traffic and a reduction of chatter at the local database can allow for a relatively high degree of scalability of the system such that the system can service a relatively large number of appliances e.g. local servers switches and devices .

In some examples the local server can be connected via the network to M number of switches e.g. the switches illustrated in and K number of devices e.g. the devices illustrated in . The memory can include a local management service that can monitor the status of the M number of switches and the K number of devices.

The memory can include one or more local services each of which can provide for example voice services e.g. voice mail conference bridging instant messaging call control or the like to the M number of switches and K number of devices. During an initial setup the local service can provide a status and configuration data to the local management service . Additionally during the initial setup the local management service can receive configuration data and a status from each of the M number of switches and each of the K number of devices. The local management service can propagate status data and the configuration data into corresponding status tables of a local database that is stored in the data storage based on the received statuses and the configuration data. As disclosed herein the status the local management service can selectively propagate the status data either asynchronously or periodically to the local database in the data storage based on analysis of the status data. The data storage could be implemented for example as memory e.g. volatile or non volatile . The data storage can correspond to non persistent memory that is optimized for speed and a relatively high ease of access e.g. a local heap status cache .

Upon writing the configuration data and the status data to the tables in the data storage in some examples the local management service can notify e.g. signal a local system manager stored in the memory that an update to the local database has occurred. In other examples the local system manager can be programmed to periodically e.g. about every 30 seconds examine the local database to determine if an update has occurred. In either example the local system manager can query the local database in the data storage for updates in the configuration data and the status data since the last update. The local system manager can then communicate with a central system manager e.g. the central system manager illustrated in via the network to ensure that the configuration data and the status data are backed up in a central database e.g. the central database illustrated in . The local database can store a proper subset of the data that is stored in the central database such that the local database in each respective local server and the central database have a hierarchical relationship.

Additionally the local management service can be programmed to monitor the status of the local service and the M number of switches and the K number of devices in real time. For instance the local management service can include a heartbeat function to ensure that real time updates on the status of each of the M number of switches the K number of devices and the local service is received which real time updates can be referred to as status updates. Upon reception of the status updates the local management service can examine the status updates to determine status data that can include data characterizing which updated statuses should be written to the local database. The updated status information can be a subset of the status update such that an updated status can be omitted from the status data. Periodically e.g. about every 30 seconds the local management service can write the status data to the local database. The data written to the local database can include a timestamp based on a local clock of the local server . Additionally in some examples the local management service can notify e.g. signal the local system manager that the status data has been updated base on the local timestamp or other metric relative to a reference corresponding to when the last time status updates were written to the local database. In other examples the local system manager can periodically e.g. about every 30 seconds examine the local database to determine if an update to the local database has occurred. In either example the local system manager can query the local database to determine updates to the status data in the local database. Upon such a determination the local system manager can push the status data that has been updated to the central system manager such that the updates to the status data can be propagated to and stored in the central database.

The local management service can include an event detector that can be programmed to monitor an event corresponding to a predetermined type of status information that needs to be updated e.g. asynchronously in the local database and propagated to the central database more immediately than the periodic updates that are performed. Such events can include for example rebooting of a component adding a device or service deleting a device or service and or a change a health of a component such as a fan a disk drive or the like. The event detector can identify such events and in response send a notification or take other action based on rules that can be stored in the data storage . Examples of status events can include reboot of a device or service adding a device or service deleting a device or service

As an example after a reboot of one of the M number of switches has been completed the event detector can signal the local management service to immediately poll the rebooted switch for configuration data and or a status update. Additionally the local management service can asynchronously e.g. immediately determine and write status data and or the configuration data for the rebooted switch before the next periodic update of the local database occurs. Additionally the local management service can notify e.g. signal the local system manager that the update to the status data and or the configuration data for the rebooted switch has occurred such that the local system manager can push the update of the status data and or the configuration data to the central system manager for update in the central database.

In some examples a communications channel can be provided to enable the local system manager to receive commands for the local server one of the M number of switches and or one of the K number of devices. The local system manager can notify e.g. signal the local management service of the command and the local management service can propagate the command to the local service the switch or the device.

For example the local system manager can receive an add command that indicates that a new switch and or device is to be added. The add command can include configuration data for the added switch and or device. The configuration data can also include a unique identifier for the added switch and or device. The add command can be pushed from the local system manager to the local management service . The local management service can store the configuration data in the local database. Additionally upon the local management service receiving a signal from a switch and or a device that includes the unique identifier the local management service can push the configuration data to the switch and or the device identified in the add command and instruct the associated switch and or the associated device to employ the configuration data.

As a further example the status data in the local database can include an indication e.g. a programmable column in the status heap tables indicating whether a status data element has been deleted. For example a phone can be moved trunks can be deleted a switch can be deleted and the like. As disclosed herein since the local management service sends only the changes in status data from the local database if status information for a deleted object were deleted automatically in response to deletion of the object e.g. by the local service the deletion would not be noticed processed by the local management service. To address this the local service can be programmed to tag corresponding status data for deletion in the configuration data. The local management service can include a clean up function that can propagate changes in the configuration data corresponding to a deletion by setting a flag in a delete column for such object row of the status table of the local database.

The clean up function can also be programmed to cascade deletions through a hierarchical status objects based on what object is being deleted. For instance if a switch is deleted in addition to marking the switch status data for deletion e.g. a switch status row of a heap table the clean up function can cascade the deletion e.g. by setting a delete flag for switch status to encompass status for each other device that resides within the context of the switch such as port hunt group associated interfaces and devices e.g. telephones registered with the switch. Setting the delete flag corresponds to a status change that results in timestamp data for each object being stored for the status data. Thus when the local management service queries the local status database for all data that has changed since the last timestamp the local management service can send the changes to the central system manager for storage as updated status data in the central database. Additionally as the local management service provides the status updates the clean up function can delete all data elements e.g. rows in the heap table that include the delete flag set. As another example if the clean up function is not programmed to cascade deletions when the local service performs the deletion the clean up function can be programmed to implement the deletion of status data when the local management service propagates the changes in the status data.

In each of the examples illustrated in a system can include a central server e.g. the central server illustrated in . The central server can include a central database CDB and a central system manager CSM . The central server can communicate with a local server e.g. the local server illustrated in and or the local server illustrated in over a network infrastructure such as disclosed herein. The local server can include a local system manager LSM a local database LDB a local service LS e.g. voice services and a local management service LMS as disclosed herein. The local server can communicate with a switch such as a telecommunications switch e.g. the switch illustrated in . The switch can communicate with another producer component such as a communication device e.g. one of the devices illustrated in . demonstrate example scenarios for managing a hierarchical database as disclosed herein the system illustrated can be implemented in other examples by employing different types of signaling e.g. according to any known or yet to be developed signaling protocols such as a predefined JSON format .

While for purposes of simplicity of explanation the example methods of are shown and described as executing serially the present examples are not limited by the illustrated order as some actions could in other examples occur in different orders and or concurrently from that shown and described herein. Moreover it is not necessary that all disclosed actions be performed to implement a method. Further for simplicity of explanation it is noted that not all of the components are illustrated in each of the .

The communication device can provide status information to the switch . Moreover the switch can provide status information to the local management service that includes the data characterizing the status of the switch and the status of the communication device . The local management service can also receive status information from the local service .

The local management service can determine status data based on the received statuses from the local service the switch and the communication device . The status data can be data that characterizes a subset of the statuses provided by the local service the switch and the communication device . For instance in some examples the status data may omit a connection and or a disconnection of a voice and or a data connection for the communication device .

Upon the determination of the status data the local management system can write a periodic update to the local database . In some examples the period for providing the status data could be about 30 seconds. By only providing status updates periodically for that portion of data that has changed since the last update a reduction of chatter at the local database can be achieved.

As disclosed herein the update to the local database can include a metric such as a local timestamp based on a local clock of the local server a sequence number or the like. The local system manager can be configured programmed to periodically e.g. about every 30 seconds examine the local database to determine if an update to the local database has occurred. In other examples the local management service can notify e.g. signal the local system manager that a status update to the local database has occurred. The local system manager can query the local database for the status data that has changed since the last update period. The local system manager can provide the central system manager with the status data based on the results to the query. The central system manager can write the status data to the central database . The central system manager can also write a central timestamp to the status data that is based on a local clock of the central system. Since metrics such as local timestamps are used at each server and the system facilitates accurate understanding about the validity of the status data.

By employment of the method illustrated in the central database can be updated periodically after the local database is updated. Moreover network traffic can be reduced by the periodic updating as well as including only changes to the local database in the status data provided to the central system manager by the local system manager .

At the start of the method it is presumed that the communication device illustrated in is communicatively coupled e.g. registered with the switch and that the switch is communicatively coupled e.g. registered with the local management service and that configuration data and status for the local service the switch are stored in the local database and in the central database .

In the example of the switch can perform a reboot which may be initiated in response to a user input e.g. at the switch or remotely or automatically. The switch can provide a real time status of the switch to the local management service which real time status can indicate that the reboot has been completed. The local management service e.g. the event detector of can detect an event the reboot or other event that requires an asynchronous update to the local database . In other examples instead of the reboot the event could be a failure to receive a status of the switch or another event. The local management service can be programmed to perform such asynchronous updates for different types of devices and or event types based on rules stored in the local database for example.

The local management service can asynchronously provide the local database was status data characterizing the status of the switch . The local management service can also write a metric such as local timestamp a sequence number or the like with the status data based on a local time of the local server . The local management service can notify e.g. signal the local system manager that an asynchronous status update has occurred. The local system manager can query the local database for the status data. The status data can be returned to the local system manager and the local system manager can push the status data to the central system manager . The status data can be written to the central database by the central system manager . Additionally the central system manager can write a central timestamp to the status data that is stored in the central database based on a local clock of the central server . By employment of the scenario illustrated in events that cannot and or should not wait for a periodic updating of the local database and central databases can be reflected in the local database and central databases asynchronously.

In the illustrated example the GUI of the client computer can provide a data request to the central system manager of the central server . The data request can include for example data characterizing a status of the switch the local service and or the communication device . In response to the data request the central system manager can query the central database for the data identified in the data request. The central database can respond with data corresponding to the data requested in the query. The central system manager can provide a data response to the GUI of the client computer that can include the data requested in the query. This can include status update information such as can be stored in the central database based on this disclosure. Moreover the GUI of the client computer can output the data included in the data response in a manner recognizable by a user of the client computer e.g. a chart and or a matrix .

Additionally the GUI can receive user input. In response to the user input the GUI can provide a command request to the central system manager . In the present scenario it is presumed that the command request characterizes a request that the switch be rebooted. However in other examples different command requests could be implemented. The central system manager can provide a command corresponding to the command request to the local system manager . The local system manager can provide the command to the local management service . The local management service can provide the command to the switch which command can instruct the switch to reboot or perform other operations. Upon rebooting for example the switch could provide a status such as disclosed with respect to .

The switch can provide a unique identifier or other indication that the switch is online to the local management service which unique identifier could be for example an IP address and or a Media Access Control MAC address of the switch . The GUI can receive a user input. In response to the user input the GUI of the client computer can provide an add request to the central system manager . The add request can request that the switch be added to e.g. registered with the local server . The central system manager can query the central database for configuration data for the switch . The central database can respond with the configuration data. The configuration data can include for example parameters for the switch and the unique ID of the switch . The central system manager can provide the local system manager with the configuration data. The local system manager can provide the local management service with the configuration data.

The local system manager can write the configuration data to the local database . Additionally the local management service can write a metric such as a local timestamp as sequence number or the like with the configuration data based on the local time of the local server . The configuration data can be provided to the switch . The switch can respond with a status of the switch that can be processed for example in the manner illustrated and described with respect to .

Where the disclosure or claims recite a an a first or another element or the equivalent thereof it should be interpreted to include one or more than one such element neither requiring nor excluding two or more such elements. Furthermore what have been described above are examples. It is of course not possible to describe every conceivable combination of components or methods but one of ordinary skill in the art will recognize that many further combinations and permutations are possible. Accordingly the invention is intended to embrace all such alterations modifications and variations that fall within the scope of this application including the appended claims.

