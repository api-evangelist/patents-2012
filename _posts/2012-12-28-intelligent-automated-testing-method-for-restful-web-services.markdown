---

title: Intelligent automated testing method for restful web services
abstract: A generalized testing framework for testing a RESTful web service defines test cases that described RESTful operations on resource object and associated data in configuration files generates HTTP requests to the web service based upon a test case and receives corresponding responses, creates expected responses, and filters fields of interest from the actual and expected responses, and compares the filtered responses to determine whether they match. Expected responses are automatically created during runtime by mapping input data and RESTful API operations to a resource object based upon the test case, avoiding the necessity of predicting responses in advance. Test cases may be readily changed or adapted to different Restful web services by changing configuration files.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09419884&OS=09419884&RS=09419884
owner: EMC Corporation
number: 09419884
owner_city: Hopkinton
owner_country: US
publication_date: 20121228
---
This invention relates generally to testing frameworks for software products such as web services and more particularly to a flexible generalized testing framework for testing different web service functionality.

Proper testing of products such as web services to verify functionality requires the generation of many different test cases with appropriate input parameters and expected responses that can be compared to actual responses. To test a web service for example testers must send out a large number of different HTTP requests receive responses and compare the actual received responses with the expected response for each request. Each test case generally must be defined in a programming language with a set of input parameters to cause an HTTP client to send out a request that invokes a desired response. Testing of web service software products using traditional testing approaches generally requires hard coding of expected results into each test assertion. This makes revising test cases composing new test cases or applying a given test case to a new system under test a complex time consuming and labor intensive task. Frequently predicting expected results is difficult or impossible. Since most expected values in responses are dependent upon the input parameters sent with the request generating expected responses typically requires a mapping of input parameters and operations to test responses. This effectively hard codes test cases requiring them to be redone to change the test cases. For many operations values assigned by the system under test while processing a test case cannot be predicted. Thus although there are testing frameworks available that enable one to create large numbers of test cases their utility is limited. They are generally unable to provide expected results for each test case. As a result a testing framework must be hard coded and static and specific to a particular software product. Any change in the product requires a change in the testing framework. This makes a general testing framework for web service products infeasible since expected responses depend upon many variables some of which may be unpredictable or unknown in advance of runtime. Accordingly designing testing frameworks even for products having limited functionality is a difficult and a complex task.

Testing using general purpose simulators to simulate expected responses of software products to a plurality of general test cases is also generally infeasible for the same reasons discussed above. Furthermore simulators tend to be complex must be designed and constructed for particular test cases and cannot be changed easily. Accordingly they lack flexibility and are not useful for testing the full range of functionality of most web service products.

It is desirable to provide a general testing framework for web services that addresses the foregoing and other problems of know testing frameworks and it is to these ends that the present invention is directed.

The invention is particularly well adapted to testing products such as web services based upon the REST architecture and will be described in that context. As will become evident however this is illustrative of only one utility of the invention and the invention may find applicability with other types of products having a REST or other architectures.

The well known Representational State Transfer REST architecture is an architectural style for network software products such as distributed hypermedia client server systems that utilize technologies and protocols of the World Wide Web. REST describes how distributed data objects resources are defined addressed and transferred over HTTP. RESTful web services based upon the REST architecture are a simpler alternative to standard SOAP and WSDL based interfaces. The REST architecture advantageously provides a uniform interface between components and requests from a client to a server contain all the information necessary to understand the request without the necessity for access to any stored context on the server or prior requests. REST supports only four types of operations POST create GET read or retrieve a resource PUT update a resource and DELETE delete a resource . REST uses HTTP methods explicitly and establishes a mapping between the four supported operations and HTTP methods. RESTful web services are a simplified way of publishing information and making processes available to others so they may interact with the information. REST permits a standard web browser to access any application or data resource. As such REST is widely used for web services and is the type of architecture with which the intelligent automated testing framework of the invention may be used.

As will be described an intelligent testing framework in accordance with the invention avoids these difficulties by providing a generalized RESTful testing framework on client that enables a test configuration to be easily changed by changing configuration files and that automatically generates expected responses for a test case at run time based upon operations and input data. This enables test cases that previously were infeasible because of the difficulty on impossibility of predicting responses avoids the burden of manually generating expected response details in advance and permits changes to be easily made to a test case or for different services under test.

The testing framework in accordance with the invention is a generalized one. As will be described it affords agile test case authoring and centralized assertion logic to enable functional changes of a RESTful web service to be readily handled by simply changing mapping and assertion rules instead of changing test scripts. It separates test scenarios from expected results by providing configuration files that describe test cases and their input data and the mappings of APIs to test parameters. More importantly however it automatically generates expected results for each test case at run time while the test case is processing. These result in a generalized testing framework in which test cases are easily changed. Moreover the testing framework preferably uses Web Application Definition Language WADL or similar text based languages to define operating process APIs and test cases. WADL may be used to describe the URL HTTP METHOD and parameters of each HTTP request. In addition to enabling test cases to be easily authored and changed the testing framework enable testers to use alias reference identifications ids as substitutes for the real ids of resource objects for instance. Since a resource object s real id is randomly assigned during run time its value is not known in advance and is unpredictable. Since the resource object s real id will be used in URL or query form parameters this requires a testing framework that can either determine or generate real ids during testing in order to generate an expected response. Once real ids are created during processing they may be recorded in a local database in the client and mapped to corresponding alias ids at run time. This enables generalized test cases to be created and automatically updated at run time with the appropriate real parameters as they are used.

As previously described a RESTful web service supports only four types of operations. Each RESTful API can be considered an operation in which any of the four types of operations may be applied to a set of resource objects. The response of the RESTful API represents either the status of an operation or provides detailed information about a resource object. The APIs are preferably defined as WADL files as previously described. This is advantageous in that even though the URL or operation type of an API is changed it is unnecessary to change the test cases. It is only necessary to change the WADL files which is readily done in well known ways. Each target object operated on by an API has a resource object entity type and each entity type is defined by metadata. An input map comprising a Java Script Object Notation JSON file provides a mapping between a user s tester s input parameters and a resource object. Changing the input map in mapping rules between input parameters and entity types in the configuration files changes mappings for each API. For instance every input map element may have four fields field name field type relation and parameter or field value. The framework will automatically generate the expected responses based upon the mappings and input parameters. This enables the status and detailed information about all resource objects created by a tester to be recorded and used by the testing framework.

The test case description file may contain a description or specification of one or more test cases to be applied to the RESTful web service system under test SUT . This is preferable done using WADL to describe the URL HTTP METHOD and parameters of each HTTP request of each test case. This affords a test case definition schema that allows test case scenarios to be separated from result assertion. Each test case generally comprises one or more steps and each has at least two component parts. The first component part comprises one or more HTTP requests corresponding to operations of the web service and the second component part comprises the input data to be used by each operation. Each response from the web service will be one or more resource objects and each resource object may comprise a plurality of different properties e.g. fields. Normally for a particular operation not all of the properties are of interest. The assertion field definition file specifies which of the fields are of interest and should be considered and which can be ignored. The mapping rule definition file is a JSON file that specifies how the input data is to be applied to the resource objects stored in a testing framework local database . The resource object metadata file is a JSON file that indicates the properties which a particular resource object has. Since only some of the properties of an actual resource object are of interest the metadata may be a subset of a property list of an actual response object.

The testing framework may also include a number of different component processes in the form of executable programs comprising executable instructions embodied in physical computer readable media for controlling the client CPU. The component processes may comprise a test case parser an HTTP client an assertion field filter a result assertor and an expected result generator . The expected result generator process contains sub processes which may include a mapping rule parser a metadata parser and a resource object processor .

The test case parser component process receives test case descriptions from test case description text file extracts steps from the test cases and then extracts operation and tester input data from the extracted steps. This extracted data is provided to both the HTTP client and to the resource object processor of the expected result generator . The HTTP client receives the operation and input data from the test case parser and generates corresponding HTTP requests which it sends to the RESTful web service system under test . The HTTP client receives actual responses to the requests from the web service and supplies them as actual response resources to the assertion field filter .

The assertion field filter process performs two principal functions. It uses assertion field definitions from the assertion field definition file to filter out fields that are not of interest in expected and actual response resource objects and extracts a subset of the fields in response objects that are of interest. The assertion field filter provides filtered expected response resource objects and filtered actual response resource objects to the result assertor process . The result assertor process compares the expected and actual response resource objects and outputs at the test results of the comparison as a pass if the results match or a fail if they do not match.

The expected result generator is a key component of the testing framework . It simulates the web service SUT. It uses the web application description language WADL that describes RESTful web service test cases and abstracts service processes that are tested preferably by URL HTTP process and applicable parameters. It automatically creates expected response resource objects for test steps during run time based upon the operation and testing input data mapping rules provided by the mapping rule parser process and a resource object template provided by the metadata parser process . The resource object processor of the expected results generator receives the same operation and tester input data as the HTTP client and uses them to generate expected responses automatically during run time by applying mapping rules to resource object metadata and test step operation and tester input data. The resource object processor further stores resource objects and updates the resource objects that are changed. The generated expected response resource objects from the resource object processor are provided to the assertion field filter and stored in the local database . The local database is preferably an in memory database in the client computer system.

The mapping rules parser process parses the JSON mapping rule definition file extracts mapping rules and provides them to the resource object processor . The metadata parser process parses the JSON resource object metadata file and extracts metadata for each kind of resource object to create resource object templates . The resource object templates are used by the resource object processor to create resource objects by mapping input data into the resource templates.

The operation data provided by operation and tester input data to the resource object processor and to the HTTP client indicates the kind of operations to be performed on the web service SUT. Operations comprise different parts. A first is a database manipulation and a second part is manipulation of a keyword of a resource object. In accordance with the REST principles there are only four possible manipulations post create update read and delete. For each of the four possible manipulations the resource object processor may perform the following operations with respect to database records.

For the create operations the resource object processor will create an empty resource object based upon a resource template and apply mapping rules to the tester input data to set values of the corresponding properties of the resource object. It will store the resource object in the local database with a keyword provided in the input data and produce a corresponding expected response resource object .

For the update operation the resource object processor will get a target resource object from the local database based on a resource object keyword provided in the tester input data update the resource object by apply mapping rules to the tester input data to set values of the corresponding properties of the resource object and restore the updated resource object into the local database. The updated resource object will comprise the expected response resource object .

For the read operation the resource object processor will get one or more target resource objects from the local database based upon resource object keywords provided in the tester input data and provide the resource objects as expected responses to the expected response resource object .

For the delete operation the resource object processor will delete a target resource object of the local database based upon a keyword provided in the tester input data generate a response to indicate whether the delete operation succeeded and provide the response as the expected result to the expected response resource object . As previously noted the local database may comprise in memory local storage for storing among other things data the various control programs processes of the testing framework and the various resources generated by the resource object processor.

As an example consider the following test case that has two steps. It creates a new user name julia and changes Julia s password from 123 to 111 . When the test case is run the testing framework will do the following. In the first test step Test Step 1 the test case parser will parse the test case for the operation and input data and in the second step Test Step 2 it will extract two instances of operations manipulations and input data 

The test case parser will send the results of Test Step 1 to the expected result generator and to the HTTP client . The HTTP client will generate an HTTP request to create a user on the RESTful Web service SUT send the request to the SUT and received a response to the request from the SUT. The HTTP client will parse the actual response resource object from the response and pass it to the assertion field filter . The assertion field filter will parse the actual response resource object to extract the fields of interest i.e. the id and email fields and pass the filtered actual response resource object to the results assertor .

Simultaneously with these foregoing steps the resource object processor will create an empty user resource object based upon a template provided by the metadata parser and apply mapping rules from mapping rules parser to the operation and tester input data to set values for the corresponding fields of the empty resource object. The id first name last name password company email etc. values may be input into the empty resource object. Next the resource object processor stores the newly created resource object in the local database and also passes the newly created resource object to the assertion field filter as an expected response resource object . The assertion filter filters out fields that are not of interest from the expected response resource object and passes the filtered expected response resource object to the results assertor . In the present example the id and email fields are of interest and are retained in the filtered response resource object passed to the results assertor. The other fields are not of interest and are removed by the assertion field filter.

Next the results assertor compares the filtered expected and actual response resource objects to determine whether they match. If they do not match the test case fails and the failure is indicated at . Otherwise if the expected and actual response resource objects match a pass indication is supplied at and the testing process continues to a Test Step 2 to complete the testing.

In Test Step 2 the testing framework performs a new series of actions to update Julia s password. The HTTP client composes an HTTP request to reset the password of the user Julia on the RESTful web service SUT sends the request to the SUT and receives an HTTP response to the request. The HTTP client passes the received response as an actual response resource object to the assertion field filter . The assertion field filter filters the actual response resource object remove all fields except the id and password fields. The resource object processor retrieves the stored user resource object from the local database using the keyword julia User updates changes the password field of the julia resource stores the updated resource back into the local database to overwrite the previously stored one and also passes the newly created resource object to the assertion field filter as an expected response resource object . As described above the result assertor compares the expected response resource object and the actual response resource object and provides the result of the comparison as test results at .

As will be appreciated from the foregoing example test cases having any numbers of test steps comprising operations and parameters may be authored in WADL and descriptions of the test cases stored as text files in the test case description file . As will be further appreciated test case descriptions may be easily edited and changed by changing the WADL file and the test case description file of operations and parameters and updating or changing the JSON resource object metadata and mapping rules definition configuration files. Accordingly the invention advantageously permits a large number and variety of different tests to be constructed easily to test different aspects of a RESTful web service and different RESTful web services without the necessity of having to predict expected responses to test requests. The testing framework does this automatically during run time. Thus the testing framework of the invention is a generalized framework that permits use of test cases that previously were not feasible thereby affording more complete testing of products.

While the foregoing has been with respect to preferred embodiments of the invention it will be appreciated that changes to these embodiments may be made without departing from the principles of the spirit of the invention the scope of which is defined by the appended claims.

