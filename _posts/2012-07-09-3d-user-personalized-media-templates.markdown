---

title: 3D user personalized media templates
abstract: In one aspect, the present disclosure relates to a method for providing a user with three dimensional user personalized video. In some embodiments, the method includes providing, from a web server, a user with a selection of video clips stored in a database; receiving at the web server a selection of a video clip; receiving at the web server data from the user, wherein said data can be a plurality of symbols to personalize the video clip; rendering, using a rendering module, a three dimensional personalized video clip using the selected movie clip and the plurality of symbols; and providing, from the web server, the three dimensional personalized video clip to the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09369688&OS=09369688&RS=09369688
owner: PERCY 3DMEDIA, INC.
number: 09369688
owner_city: Toronto
owner_country: CA
publication_date: 20120709
---
This application claims priority to U.S. provisional Patent Application No. 61 505 757 filed Jul. 8 2011 and entitled 3D User Personalized Media Templates the entire contents of which are incorporated herein by reference.

With the advent of social media and smart phones people are sharing information and media more than ever before. Friends can take pictures with their smart phones and email text and post those pictures from their phones. Additionally some people take pictures and add text or effects to the pictures on home computers thereby personalizing the images. These additions of text effects to a flat two dimensional media object are referred to as 2D media objects.

The present disclosure relates to a system and method for providing users with three dimensional 3D user personalized media. The media can be clips or videos. The described embodiments encourage people to put yourself in the picture using 3D visual effects and multimedia technologies. Users personalize clips from popular Hollywood movies or other user generated videos and receive a custom video file that can be shared across the social web or downloaded to a computer or mobile device. Once a clip has been identified such as iconic moments or memorable scenes in a movie the disclosed system prepares a 3D visual effects template for customization and marks areas so that the personalization engine knows where to insert text and or photos into the scene.

In one embodiment the present disclosure relates to a system for providing personalized 3D media files. The system includes 1 a database of 3D media template files wherein each template includes a personalization area 2 a web server for receiving information from and providing information to a user wherein the information includes a selected 3D media template file and text photo and for asset delivery interstitials preview videos and thumbnail images to the user device and 3 a media render for generating a personalized 3D media file based on the selected 3D media template file and the text. The system may also include 4 an account server for managing accounts.

In another embodiment a method for providing personalized 3D media files includes 1 providing a plurality of 3D media template files wherein each template includes a personalization area 2 receiving information from a user wherein the information includes a selection of a 3D media template file and text 3 generating a personalized 3D media file based on the selected 3D media template file and the text. Artists create these files on workstations and the files are stored on a storage area network SAN for use by renders.

In one embodiment the personalized 3D media files are generated using a computer farm. The farm comprises a plurality of render and encoder servers. Each server has workers that can serve as a scheduler for scheduling work flow. The work flow comprises rendering of the personalized 3D text or photos by generating a plurality of 3D text frames or photo frames and concatenating the rendered personalized 3D text or photo frames with the standard portion of the video. Each of the workers can either be an admin scheduler or render encoder worker. Once an admin worker finishes the scheduling tasks the admin worker will assign himself a task or tasks perform the task s . When a render encoder worker finishes his task s and if there is no admin worker assigned he will appoint himself as the scheduler. The process continues until all jobs are complete.

As used throughout this specification 3D refers to three dimensional effects for example effects that depict movement in the x y and z directions. The 3D effects of the present disclosure can be contrasted with composited flat two dimensional 2D effects.

In one aspect the present disclosure relates to a method for providing a user with three dimensional user personalized video. In some embodiments the method includes providing from a web server a user with a selection of video clips stored on a storage area network receiving at the web server a selection of a video clip receiving at the web server data from the user wherein said data can be a plurality of symbols to personalize the video clip rendering using a rendering module a three dimensional personalized video clip using the selected movie clip and the plurality of symbols and providing from the web server the three dimensional personalized video clip to the user.

In some embodiments the plurality of symbols include numbers characters images or a combination of numbers characters and images. In some embodiments the video clip stored on a storage area network includes one of a movie clip a television clip or a user generated video. In some embodiments the method includes storing the three dimensional personalized video clip in memory. In some embodiments the video clip stored in the database includes a three dimensional visual effects template comprising marked areas of the video clip for later personalization. In some embodiments rendering the three dimensional personalized video clip includes the rendering module inserting a plurality of three dimensional symbols generated from the plurality of symbols into the marked areas of the three dimensional visual effects template. In some embodiments rendering the three dimensional personalized video clip includes the rendering module generating a plurality of three dimensional symbol frames and concatenating the plurality of three dimensional symbol frames with the remainder of the video clip.

Another aspect of the present disclosure relates to a method for preparing a video clip for three dimensional personalization. In some embodiments the method includes selecting a video clip from a selection of video clips stored on a storage area network preparing at a web server a three dimensional visual effects template for the video clip marking areas of the video clip for personalization and storing the marked three dimensional video effects template in memory. The marking is done by the artists on their workstation. The particular frames are defined within a configuration file for a particular campaign. Each campaign has their own unique configuration file. A copy of this file is stored on each render and encoder machine.

Another aspect of the present disclosure relates to a system for providing personalized 3D video clips. In some embodiments the system includes a database of video template files wherein each video template file comprises a personalization area a web server for receiving information from and providing information to a user wherein the information received from the user can be a selected video clip and a plurality of symbols for personalization of the selected video and the information provided to the user includes a personalized three dimensional video file and a media render for generating the personalized three dimensional video file based on the selected video template and the plurality of symbols. In some embodiments the system includes an account server for managing a plurality of user accounts. In some embodiments the render can be a computer farm. In some embodiments the computer farm includes a plurality of render servers and encoder servers. In some embodiments one of the plurality of render servers and encoder servers can be a scheduler for scheduling work flow of the remaining render and encoder servers wherein the remaining render and encoder servers can be worker servers. In some embodiments the scheduler is configured to schedule tasks for the worker servers and to schedule one or more scheduler tasks for the scheduler and to perform the one or more scheduler tasks. In some embodiments the scheduler is configured to upon completion of the one or more scheduler tasks if no other workers have assumed a role of scheduler resume the role of scheduler and schedule additional tasks for the workers and for the scheduler. In some embodiments each of the worker servers is configured to assume a role of scheduler as a new scheduler in place of the scheduler. In some embodiments the scheduler is configured to upon completion of the one or more scheduler tasks if another worker has assumed a role of new scheduler the scheduler is configured to set a status of the scheduler to worker and to receive scheduled tasks from the new scheduler.

A user can access a plurality of 3D templates through an application on his her mobile device or from a web browser interface. The templates may be generated videos or excerpts from movies or televisions shows. Each template has a location for the placement of personalized text. Personalized text supplied by the user is applied to the video to create a 3D effect for the user. Once the user creates the template the clip is downloaded to his or her device and then can share the personalized file with friends or family through email and social media applications for example FACEBOOK and YOUTUBE .

The mobile device can be any device that permits access to the web server the application developer system and the application store system preferably via a wireless connection e.g. a cellular or Wi Fi connection. For example the device can be a smart phone e.g. an IPHONE an ANDROID phone a BLACKBERRY phone or a WINDOWS phone. The device also includes memory for storing personalized media clips or files. In some embodiments the device can be a personal computing device for example a computer or a tablet using a web browser. In some embodiments the device can be connected to the web server the application developer system and the application store system through an internet connection.

The mobile device can be connected to the application developer system through an internet or cellular connection. The application developer system validates the particular device and the user. Also the application developer system can collect data for example submissions by the user and the corresponding costs of each of the submissions. The cost data can be used for royalty payment determinations. Additionally when new updates are available for example new videos for personalization the application developer system can notify the user of those updates. In other embodiments the functionality of the application developer system can be included in the web server . The application developer system also can confirm that the user has available credits to purchase media files.

The mobile device is connected to the application store system through an internet or cellular connection. The application store system provides the application to users via download and provides a portal from the mobile device to the web server . The application store system also handles the purchasing of media by the user.

The web server is connected to the mobile device through an internet or cellular connection. The web server also is connected to the database and to storage . The web server includes a submissions subsystem a metadata subsystem an apache asset server and a file server .

The submissions subsystem authenticates submissions validates submissions and monitors submissions for profanity. A submission is the package that a user submits to the database to request work to be performed e.g. the submission can include a template selected by the user and the personalization text. That package contains a set of tasks sometimes referenced as atoms in this disclosure as well as the requirements for performing those tasks. The requirements may include dependencies between submissions dependencies between atoms input parameters for each atom and the resources required by each atom.

Each submission from a user has a submission code which is used to access the resources for a submission. The submission code is returned when a processing request is successfully accepted by the web server .

The web server implements a Representational State Transfer RESTful or Resource Oriented Architecture ROA interface for submitting requests for media processing and for retrieving the results of that processing. A mobile device can use php curl libraries to easily interact with the web server behind the front face of the application on the mobile device.

Media file templates available to the user from the web server are grouped according to campaigns. A campaign is a clip or file with specific characteristics associated with it. The campaigns are grouped into titles. For example STAR WARS movies can be the title and the title can include multiple campaigns or video clips from the STAR WARS movies. BACK TO THE FUTURE movies can be another title and can have a plurality of campaigns. Each campaign has a unique campaign code. The resources for the campaign are accessed using the campaign code in the uniform resource identifier URI sent to the web server . Each campaign has separate parameters and requirements. Each campaign is an approximately 10 second video clip in some embodiments. In those embodiments each campaign can have about eight seconds of standard video footage for example a memorable scene from a movie. The campaign in these embodiments also has two seconds of personalized 3D text. The renders and encoders discussed below create the two seconds of personalized 3D text within the video and combine the two seconds of personalized text with the eight seconds of standard footage to create a personalized 3D movie clip for the user.

A user can select a template video clip from within a campaign or a title. Then as described in more detail below the user fills in a hypertext markup language HTML form the user s personalization information for example Happy Birthday Bill. Then the web server authenticates both the user i.e. the mobile device and the submission. As discussed below the web server sends an authentication token to the mobile device to ensure that the user is the user who downloaded and registered the application on the mobile device . Additionally the submission itself is authenticated as described below to ensure that the submission complies with profanity standards has the correct information and the text complies with the length requirements. Once the web server authenticates both the user and the submission the web server sends the user a confirmation of receipt and compliance.

Clients can submit new requests to the server by using a message with a POST method to the address. For example uri 123.45.56.789 XXXX campaign 

The encoding type of the body should be multipart form data containing the media required for the processing to occur according to the requirements of the specific campaign. The format of the body is similar to the format of a regular form submission as described by the HTML standard. Also the authentication headers are calculated and inserted before sending the message to the web server .

The contents of the submission are verified. For example when the user wants to personalize a video clip with a photograph photos larger than a prescribed size such as 400 KB can be rejected not forwarded. Text fields are verified as well. The length of the text field and the length of each word in the field should not exceed the limits set by the specific campaign. The contents of the text fields are filtered to reject profane or offensive messages once they reach the web server .

The submission from the mobile device to the web server can be in a POST HTTP message. POST is one of many request methods supported by the HTTP protocol used by the World Wide Web. The POST request method is used when the client needs to send data to the server as part of the request such as when uploading a file or submitting a completed form. The POST message from the mobile device to the web server should have accurate content length headers. The POST message also should contain an accurate date header.

The elements of the POST message should have the correct content types. For example if the campaign calls for a file of content type image jpeg then the POST message should have that content type for the element that represents the binary data of the image. One could simply hard code the content type however the system asks that the file type be confirmed as part of the validation process to avoid users from submitting random file types and having them reach the rendering process before that bad file type is detected. PHP a general purpose scripting language has two functions that can be used to validate images getimagesize and exif imagetype . As part of the validation process these functions can be used to check uploaded files to make sure they are of the correct image types. When they are included as part of the POST submission the correct content type for the file should be specified. Using the generic content type application octet stream may result in a rejected submission.

The POST message also should contain an authentication code in the header calculated as described in the next section.

The body of the response sent back to the mobile device from the web server will contain a base32 encoded submission code on the first line. Subsequent lines of the message body will contain URIs one for each default media type that will be available when processing completes. In other embodiments additional media formats are supported by a campaign but these will only be processed on demand whereas the ones listed in the body of the submission response may have higher availability. Additionally upon successful submission the Application Programming Interface API returns to the user a JavaScript Object Notation JSON dictionary with a time to render key which indicates how long the average time for a render of the particular campaign takes to finish along with the list of uniform resource locators URLS pertaining to each supported video format. The interstitials body of the response helps to provide a waiting screen containing multiple slides while the request is processed. Interstitials may contain for example 1 image specific to the movie title related to the submission. For example the response might be in the form 

In some embodiments a base36 encoded string or guid can be used. In this embodiment the response can contain ssl urls to help support ssl enabled devices. The response can contain a key submid to better parse the submission code or id. For example the response might be in the form 

During the submission process the system filters text inputs for profanity. In some embodiments the system uses a third party profanity filter. In the case where a user may submit bad text the response is a status of with a body containing a dictionary keyed with the input names and a list of offensive material.

For example assume one of the field names in the campaign is lineone and the user entered a profane word. The resulting response would contain a body field with the appropriate error message a highlight field showing which field name contains the profane content and a title for the client to use when alerting the user of the error 

As discussed above the web server authenticates the submissions. For example the web server can use digital signature authentication for each POST submission to the web server . Digital signature authentication is a form of secure communication based on public private key cryptography. The message sender has a signing key which is secret. The receiver has a verifying key which is public. The sender creates a message and applies the signing key to it to create a signature. The unencrypted message is sent to the receiver with the secure signature attached. The receiver uses the verifying key with the signature to determine whether the message has been altered.

One exemplary cryptography standard for digital signatures is the RSA PKCS1 SHA1. This standard is available for most platforms including php 5.2.x builds which include the open secure sockets layer SSL modules. In order to improve security the message is passed through a SHA 256 hash first then the hash of the message is passed to the RSA PKCS1 SHA1 pipeline. This provides for secure signatures given modern computing power and known attacks against RSA. The process is to hash the message first with SHA 256 then sign that hash with RSA PKCS1 SHA1. This is usually two function calls in most cryptography libraries.

The message of the digital signature authentication approach consists of the campaign code and the value for the HTML header Date concatenated with a colon separator 

The signature returned from the signing function can be binary but is not necessarily distinguished encoding rules DER . In order to embed the signature in the submission the binary version of the signature may then be base64 encoded so it becomes safe to include in the American Standard Code for Information Interchange ASCII message.

This is how an authentication code is produced for each submission. Using php openssl the system may use the hash function for the SHA 256 hash and openssl sign function for the RSA PKCS1 SHA1 signature. Also the base64 encode function helps with base64 encoding. The resulting signature may be used in the HTML header Authorization in the following manner 

Other embodiments of the authentication scheme may use different tokens P3v0096 for example. If the date header is omitted from the submission or if the date specified differs from the time on the server by more than 90 minutes then the request can be rejected. The time on the server is synchronized to time servers around the world so it will be accurate. If the signature is not valid for the particular campaign or campaign start end dates then the request can be rejected.

As an additional security measure every public readable directory on the client application or website can either have a valid index file index.php index.html or an empty index.html file to prevent the public from browsing the client php source code for the website.

While exemplary authentication and security features have been described herein any known authentication or security mechanism known to one of ordinary skill in the art could be substituted for the described embodiments.

Additionally the web server authenticates the client i.e. the mobile device associated with the user. Client authentication is performed on all requests. The web server provides a universally unique identifier UUID type application key to user. The key is part of an MD5 message digest algorithm hash created using the date as specified within the Date header and a secret salt which will also be provided by the web server . There s also another header P3 APP ID that will contain a combination of application key and hash separated by a colon.

To receive media associated with a submission the client may submit a message with a GET method to a URI of the form 

The campaign code and submission code have been discussed earlier. The format code indicates one of the types of media associated with the campaign. For example for campaigns involving video deliverables the format code might be mp4 for an MPEG4 standard file or flv for an Adobe Flash video file. The format codes supported by a campaign vary among campaigns. If the server responds with a 503 service unavailable return code then the client should read the Retry After header to determine how long to wait before retrying the request. In some cases the media may still be processing so a few extra seconds will be required before the media can be accessed.

In some cases the client may simply want to know whether the media is available without actually requesting that it be delivered. In this case the GET method can be replaced with the HEAD method. The rest of the HTML message remains the same. If the deliverable is not available then a 503 code will be returned with a Retry After header to indicate the number of seconds to wait before the media may be available. As with a GET a HEAD message may trigger time intensive calculations on the web services server such as transcoding from one format to another so messages preferably are not sent unless there is an intent to eventually access the data.

There is no authentication on requests to retrieve media from the server. This allows media to be shared without the need for sharing authentication credentials to everyone such as signing keys which should remain private. In some embodiments the web server will allow clients to delete submissions that they no longer wish to make available.

The metadata system includes data on languages campaigns terms and thumbnails. The metadata system contains data with which a user can interact. For example the user can interact with thumbnails stored within the metadata system. The metadata system accesses data from the web database to display this data to the user. The data can include the catalog of titles campaigns categories languages and content. The metadata system also contains information to support a particular title within a catalog and links to images and video previews thumbnails .

The apache asset server is in communication with assets database in the storage . The apache asset server contains and displays the catalog of available video clips to the user. From this catalog the user can browse the various video clip templates and select which video clip to personalize with his her own text. The video clips are stored in the assets database of the storage .

The file server is in communication with clip files database in storage . The storage stores completed user personalized videos.

The database is connected to the web server the render the encoder and the storage . In some embodiments a pgBouncer can be used as a database connection pooler . pgBouncer can handle all port connections between the web server and the databases . Rather than creating a new connection to the database every time a database query needs to be performed finite amount of persistent connections to the database are set in pgBouncer and those connections are used to perform the queries instead. The database includes a plurality of web databases a plurality of farm databases and a plurality of profanity databases . The profanity databases contain data and algorithms to filter submissions for profane language and communicate with the submissions subsystem . In some embodiments the two sets of databases in database block correspond to a main system and a slave system as shown in . If at any time all or part of the main database systems fail all or part of the slave database system is used. For simplicity this disclosure generally refers to just the main database system. The submissions are saved in both the web database and the farm database . The web database communicates with the submissions subsystem . The web database contains the data that creates the catalog which is displayed through the metadata system . It records incoming requests for submission and the submissions themselves and input text that the user places in the form when the user submits. The web database contains a list of titles clients campaigns and lists of which clients are able to view which titles in the catalog.

The farm database communicates with the renders and with the encoders . The farm database keeps the schedule of tasks which the encoders and renders are scheduled to perform.

The system contains a collection of workers e.g. servers including one or more renders and one or more encoders . The renders and encoders are referred to as workers. In one embodiment render contains nine separate renders. Encoder can include a plurality of encoders for example two encoders. However in some embodiments there can be any number of encoders and renders required to create user requests.

At a high level when a submission comes to the farm database through the web server to personalize a selected video clip template the video clip template may be a 10 second video of which two seconds of the video will be modified to create the personalized video. In some embodiments videos are made up of 24 frames images per second. Accordingly 48 frames of the video would need to be modified.

The system of workers encoders and renders is used to create the 48 frames and combine those frames with the remainder of the video. Instead of having one dedicated server or worker for scheduling the rendering and encoding the present system allocates one worker among the plurality of workers as a scheduler. The scheduler splits up the 48 frames among the workers to optimize the speed and performance of the video generation. In some embodiments one worker is not always designated as the scheduler and there is no central server that selects the scheduler from the plurality of workers. Instead once a worker has finished its tasks either rendering or encoding the worker checks to see if another worker is currently the scheduler. If no other worker is a scheduler the worker then becomes the scheduler. Once the scheduler has finished scheduling for the other workers it can begin scheduling for itself. Once it schedules for itself it begins working and no longer is the scheduler. The scheduler uses a first in first out method of processing jobs. In some embodiments the scheduler is an encoder because the encoders tend to be less busy than the renders. Below the renders and encoders and their functions will be discussed in more detail.

The renders replace template text or photos with the specific personalized text or photos submitted by the user. The renders fill in the location in the video with the text or photo over the background template canvas. This process involves two steps 1 creating the 3D text and 2 compositing the 3D text or photo with the background. Note that each frame that includes the 3D text or photo may be different because the text or photo moves in 3D space. Accordingly the render may need to alter 48 frames of the video to create the personalized video. This process of creating the text or photo in 3D space and overlaying it on the background involves rendering.

A render farm is also known as a job scheduler or batch processing system. The render farm performs pre defined tasks using a dedicated resource of machines. A render farm is used to coordinate the activities of machines in order to schedule high priority work over low priority work to report and log issues as they occur and to make effective and timely use of resources.

The disclosed render farm is optimized for short running jobs as required by the web server and is tailored for easy deployment to resources such as cloud servers. In some embodiments the render farm includes the following characteristics in comparison with conventional render farms 

A worker is a server that can perform tasks that users request of it. A worker can be implemented in a python process object. Any number of workers can be instantiated on the same machine instance as long as they are given unique ports upon which to communicate. The multiple workers will cooperate and share the resources available to that machine gracefully.

In one embodiment each worker process requires about 15 MB of RAM to operate. The expected usage is that a startup script located locally on each server will execute and create a number of worker processes to perform tasks. The number of worker processes instantiated should relate to the limit on the number of tasks expected to execute concurrently on the machine. There are benefits to not instancing more workers than the system expects to use otherwise the scheduling will inefficiently try to schedule workers that will never receive work.

Workers are state machines but the state that the database sees and the true state of that worker may be slightly different. This is particularly true of certain state transitions that should be performed with great care such as entering administration state which will be discussed next . Workers also receive messages through their state as recorded in the database. So for example states of stop and kill indicate than an external entity has asked the worker to stop graceful eventual shutdown or die hard immediate shutdown . When the worker has reacted to these requests and shutdown the state in the database changes from stop or kill to down or dead respectively.

The design of the farm database is masterless meaning that workers connect directly to the database. However some scheduling is still performed. In some embodiments of the farm database each worker schedules tasks for itself. However this can be inefficient.

In another embodiment one idle worker enters an administration state. It is unlikely for two workers to enter into the administration state at the same time but it is possible when the database server is under a high load. As a result operations within administration mode are coded to be efficient when one administrator is operating but also safe when more than one is operating. The farm database server stores a table of the tasks for each worker and keeps track of which worker is currently the administrator or scheduler. Each time a worker finishes a task and has the possibility of becoming an administrator the worker checks with the table in the farm database to see if another worker is already an administrator thereby avoiding having two administrators at once.

In the administration state the server performs a number of maintenance tasks. One of these tasks is scheduling. In some embodiments a server will leave the administration state reluctantly in order to minimize the number of state changes written to the database. At periodic intervals e.g. approximately 1.5 s the administrator will cycle through its chores including scheduling work to workers. If necessary the administrator will schedule work to itself leaving the administration state and entering a busy state. As a result a fully loaded farm has no overhead in the sense that no master server is sitting idle all servers are performing user requested work except the database server which continues to coordinate activity. The first worker to finish its work is likely to enter the administration state and schedule additional work to itself.

In the event that the administrator crashes its demise will be detected when its heartbeat expires and another worker will become the new administrator. As long as one worker remains alive in the system it will be able to enter the administrator state and issue work even if only to itself.

As introduced in the last section a submission is a container of atoms. An atom is the smallest unit of work. In one embodiment a worker can execute only one atom at a time so each server is likely to be running several workers. An atom has associated with it dependencies parameters and resource requirements. The term atom has some similarities to other terms such as job execution task process etc. which are more common nomenclature used in other systems.

Dependencies allow some atoms to be held until other atoms are completed. For example encoding a video stream must be held until the input frames are produced encoding atoms will have dependencies that rendering atoms must execute first.

Parameters can be anything. In one embodiment the python data structure is passed through the system. Resource requirements must be defined relatively to pre existing resources in the system. Each atom can have a valid predefined atomtype. This may be the only layer of security in the system. Unless the system includes a command atomtype that allows a user to execute an arbitrary command then exposure to attack is limited. An adversary making a submission with ill intent can only perform the operations defined by an atomtype because the atoms of that submission can only perform tasks that have been pre defined with an atomtype.

Physically an atomtype is a block of python code which lives in a pre defined location on disk. The worker needs to know the path to the configuration area at startup in order to find the atomtypes defined for the system. When a worker receives the order to execute an atom it spawns a new process known as an atom server. The atom server reads the atomtype script in line and thereby executes its contents. The parameters to the atom are available to the script through variables that are pre defined and passed into the scope of the atom server in which the atomtype script executes.

Atoms like hosts have states such as wait busy fail done etc. When an atom fails the retry mechanism may try to execute the atom again if it was submitted with a sufficient matrices value. For example if an atom is submitted with matrices of three then it must fail to execute three times before the scheduler will cease to attempt to send it to a worker.

A resource is an abstract concept for the physical requirements of the work. It may be necessary to track how much RAM or how many CPU cores atoms use. These can be defined as resources. It may be necessary to track software licenses so that a limited software resource can be used to capacity without the risk of executions attempting to run when a license is not available. Software licenses can also be defined as resources.

Resources can either be node locked or floating. When node locked they are associated with a particular IP address. All the workers at that IP address will share that resource. When floating their address is designated with and all the workers in the system will share them. Available RAM would be a resource that must be node locked. A software resource could be floating if a floating license server is used or could be node locked if the software is installed on particular machines only.

If a server has a node locked resource then it will be limited to the capacity of that allocation even if extra capacity is available in the form of floating resources. In other words when a server identifies that it has a node locked resource then the farm database does not consider floating pools of the same resource to be available when scheduling atoms to workers on that server.

Resources have types that are predefined. For example to introduce a new kind of software license into the system a new resource type is created then that resource type is used to declare how much of that resource is available in the system. The system uses resource counts as stored in the database it does not poll license servers to determine interactively what licenses are available. Furthermore the farm database does not interrogate running atoms to determine whether or not they actually used or exceeded the resources that they claimed that they would use.

The reporter is the user interface to the system. The reporter is a web server gateway interface WSGI application so it uses a WSGI server under which to run. For small environments the simple server packaged with the standard python distribution is sufficient.

As a WSGI server users access it through a web browser. Using Internet Explorer for example a user may select directories in the reporter UI and a file explorer will open at that location. This is particular helpful for navigating quickly to where logs are being written for the atom or submission.

Atomtypes are raw blocks of code that are in lined to another running process rather than being true plug ins or class instances.

An atomtype gets its name from its filename. Atomtypes should be saved in the atomtypes subdirectory that all the workers are pointing to. If a worker fails to find an atomtype script for an atom that has been scheduled to it then the atom will fail to execute. It is not necessary to edit a configuration file or perform any special registration to make the atomtype available to the system as long as the system can find the file in the atomtypes directory then it will be able to use it. In some embodiments the atomtypes are independent of the campaign rather than having the campaign configuration files containing specific information on a campaign. In some embodiments configuration files can be used and each farm server contains a copy of the configuration file. When configuration files are used the configuration files may be centralized. The configuration files can include campaign specific information for specific jobs.

The encoder is connected to the farm database a submissions directory and a clip file storage . The encoder performs the following steps in some embodiments 1 takes the rendered frames and combines them together to make a media file i.e. the 48 frames are put together in order FFMPEG can be used to generate each media file 2 the frames are then put in the support format of mobile device i.e. MP4 flv and webm both the MP4 and flv formats are generated for each job if the device requesting the personalized video clip does not support the MP4 or flv format than the webm file will be created. During this situation all three formats are created 3 the 48 frame files in both formats are stored in the TMP directory 4 the static 8 seconds are concatenated with the two rendered seconds to create the full personalized video clip in both the MP4 and webm versions and MP4Box is used to concatenate all sections of the video clip to make one continuous video clip 5 FFMPEG is used to wrap the MP4 file into a flv flash file and 6 all versions MP4 flash and webm are stored in for example a SAN Out directory in storage shown in . The unrendered unpersonalized video resides for example on SAN pbin directory in storage shown in . Once the video is created and stored in an Out directory the rendered frames stored in the TMP directory are deleted. In other embodiments not all versions are created each time.

The scheduler ensures that the rendering encoding and deleting are performed and performed appropriately e.g. the encoding is not performed prior to the rendering or before the rendering is complete. A table that resides in the farm database keeps track of the schedule so that the encoder can know when to start combining the files.

The concatenation of the 48 rendered frames and the remaining static frames can be performed using open source software for example MP4 box or FFMPEG.

When the personalized video is ready and in the out directory the database communicates with the file server through the web server to notify it that the video is ready. The file server then notifies the application that the video is available. Then the application downloads the video from the web server . In an alternative embodiment the mobile device can repeatedly ask the web server if the personalized video is ready. The mobile device does this until the video is ready and available for download.

Storage includes the operating system a submissions directory a TMP directory a clip files and an assets database . The assets storage stores all of the preview video clips that the user can preview before selecting which one to personalize. The TMP directory stores the rendered frames prior to the frames being concatenated with the remaining frames from the video. The TMP directory is in communication with the render . The submission directory stores all the reused clips that are not personalized. This includes the 192 frames of a 240 frame 10 second video clip where 48 frames are being personalized. An out directory stores the final and personalized versions of the video. The out directory is in communication with the encoder and the render . The OS is the operating system that controls the web server encoders renders and the database . The clip files storage is in communication with the file server .

The following section describes retrieval of the catalog available to the client what parameters are expected and the information passed back.

language code The system can support a plurality of languages for example the seven languages described in the following table 

Upon successful request the API returns a JSON string of categories and adjoining titles steps and step parameters.

Each category will contain one or more titles. Each title contains one or more campaigns. A campaign corresponds in some embodiments to a movie clip. Campaigns are broken out into a story board concept where the campaign has 1 n steps. Then each step will contain 1 or more input fields text inputs and a single image.

Beyond its dictionary of titles categories contain fields category name the display name category id order num type current type paid or free featured to indicate whether to display the category in the featured section or not . Featured may be for example the 10 newest campaigns made available.

As mentioned above titles contain a dictionary of campaigns. Other fields found are title id and title label.

Each campaign will contain a dictionary of steps. Other fields found in the campaign may include id label video url and social media keys. In some embodiments the following file formats for the video are offered 

The format of the device is added to the url to request the video. In some embodiments a key can tell the application whether the particular campaign can be posted to a particular social media site. For example the key you tube can identify whether the campaign could be posted to YouTube. The application then either displays a link to the social media site or not depending on the social media key.

Each step contains a dictionary of parameters params . Each step contains an id number which is the order in which they should appear img url of the step and the copy field which contains the instructions for each step.

Each parameter contains fields min length max length which are validation rules to be used by the client application to do front end form validation prior to posting the request back to the API. The field order num signifies the display order of each input. input title is the name of the form field the API is expecting back and should be used to name and identify the input field. type is a descriptor which tells the front end what input type to use to gather data. In some embodiments type text input is the only parameter type available. In some embodiments the type can be file and integer . File is meant to be a file upload element and integer means that only integer numbers are valid input. During the submission process the integer field is validated to determine that it only contains an integer and the application responds with a message which states so.

In this example web server includes both app server and account server and metadata and asset server are combined into one asset server module and the web server also include API Server and Submissions . Web server also can include encoders and in some embodiments one or more virtual databases . Databases can include physical databases and in some embodiments virtual databases . The servers may be behind firewall . Mobile device communicates with web server and encoders through one or more load balancers . Web server and encoders are in communication with databases renders and storage . Each profanity server includes either profanity SVR main or SVR slave which contains the profanity filter code used to filter for profanity. Mgt main or Mgt slave provides the profanity filter s web based management interface which manages the profanity rules. Pgboucer provides a pool of persistent connections to the database and is used to query against the database. Web server test and encoder test provide temporary locations to perform testing of the production environment. They do not play a role in the day to day operation. Also in TMP Directory and Clip Files database are combined in one module in addition to a separate Clip Files database .

Returning to the Featured Clips menu depicts the selection by a user of the Water clip. Once the user has selected the clip the user can select OK . Once selecting OK the preview clip of Water will start to play. depicts a screen where a user can enter information to personalize the clip in the fields Your Message Here in a Make It Mine screen . As shown each field has space for up to 14 characters but the length of the field can be adjusted to any supported size. This character sizing is determined during the campaign design creative stage. The Make It Mine screen can have two options Close to close out of the make it Make It Mine screen and Create to create the clip. depicts a user using a virtual key board to enter in the text Electric Playground Rocks depicts the screen with the text inserted. At this point the user can select Create to create the clip. depicts a status screen displayed to the user while the system generates the personalized clip. The status screen includes status bar e.g. showing a status of 21 complete. depicts another status screen displayed to the user while the system generates the personalized clip showing the status bar with a status of 39 complete. While the user is waiting for the clip to be prepared the device displays different informational images along with the status bar updates. is a screen that asks the user after the clip has been created if the user would like to view the clip now or later. The status bar is at 100 complete. depicts the my clips screen which shows a user all the clips that the user has created. The user can select a clip and then play the clip. Above the selected clip Water Electric Playground Rocks a credit indicator indicates the number of remaining clips for example 94 credits. Also at this point a user can share the clip through social media channels or email.

Those of skill in the art will appreciate that the various illustrations in the specification and drawings described herein may be implemented as electronic hardware computer software or combinations of both. To illustrate this interchangeability of hardware and software various illustrative blocks modules elements components methods and algorithms have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application. Various components and blocks may be arranged differently for example arranged in a different order or partitioned in a different way all without departing from the scope of the subject technology.

A phrase such as an aspect does not imply that such aspect is essential to the subject technology or that such aspect applies to all configurations of the subject technology. A disclosure relating to an aspect may apply to all configurations or one or more configurations. An aspect may provide one or more examples. A phrase such as an aspect may refer to one or more aspects and vice versa. A phrase such as an embodiment does not imply that such embodiment is essential to the subject technology or that such embodiment applies to all configurations of the subject technology. A disclosure relating to an embodiment may apply to all embodiments or one or more embodiments. An embodiment may provide one or more examples. A phrase such as an embodiment may refer to one or more embodiments and vice versa. A phrase such as a configuration does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology. A disclosure relating to a configuration may apply to all configurations or one or more configurations. A configuration may provide one or more examples. A phrase such as a configuration may refer to one or more configurations and vice versa.

The word exemplary is used herein to mean serving as an example or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs.

While there have been shown and described examples of the present invention it will be readily apparent to those skilled in the art that various changes and modifications may be made therein without departing from the scope of the invention.

