---

title: System and method for implementing privacy classes within an authentication framework
abstract: A system, apparatus, method, and machine readable medium are described for implementing privacy classes within an authentication framework. For example, one embodiment of a method comprises: transmitting a query for client information from a server to a client, the client information including information related to authentication devices coupled to the client; analyzing the query to determine an appropriate privacy class to be used for providing client information to the server; providing a subset of client information selected based on the determined privacy class, the subset of client information including the information related to the authentication devices coupled to the client; and using the subset of client information within an authentication framework to provide user authentication services over a network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09083689&OS=09083689&RS=09083689
owner: NOK NOK LABS, INC.
number: 09083689
owner_city: Palo Alto
owner_country: US
publication_date: 20121228
---
This invention relates generally to the field of data processing systems. More particularly the invention relates to an improved system and method for implementing privacy classes within an authentication framework.

Existing systems have been designed for providing secure user authentication over a network using biometric sensors. In particular an Online Secure Transaction Plugin OSTP protocol developed by the Fast Identify Online FIDO alliance enables strong authentication e.g. protection against identity theft and phishing secure transactions e.g. protection against malware in the browser and man in the middle attacks for transactions and enrollment management of client authentication tokens e.g. fingerprint readers facial recognition devices smartcards trusted platform modules etc . Details of the existing OSTP protocol can be found for example in U.S. Patent Application No. 2011 0082801 801 Application and the document entitled OSTP Framework Mar. 23 2011 both of which describe a framework for user registration and authentication on a network.

Described below are embodiments of an apparatus method and machine readable medium for intelligently implementing an authentication framework in a client server environment. Throughout the description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances well known structures and devices are not shown or are shown in a block diagram form to avoid obscuring the underlying principles of the present invention.

The embodiments of the invention discussed below involve client devices with authentication capabilities such as biometric devices. These devices are sometimes referred to herein as tokens. Various different biometric devices may be used including but not limited to fingerprint sensors voice recognition hardware software e.g. a microphone and associated software for recognizing a user s voice facial recognition hardware software e.g. a camera and associated software for recognizing a user s face and optical recognition capabilities e.g. an optical scanner and associated software for scanning the retina of a user . The authentication capabilities may also include non biometric devices such as a trusted platform modules TPMs and smartcards.

The embodiments of the invention described below provide various improvements over existing authentication techniques. For example in contrast to current techniques which require a client to communicate an exhaustive list of all of its authentication capabilities e.g. all of its authentication tokens devices over a network one embodiment of the invention implements a query policy in which a secure transaction server initially transmits a server policy to the client indicating the authentication capabilities accepted by the server. The client then analyzes the server policy to identify a subset of authentication capabilities thereby reducing the privacy impact to the client.

In another embodiment multiple configurable levels of privacy protection are employed. Privacy classes are predefined and may be selected and or modified by the end user. In one embodiment of the invention the privacy classes are defined based on the probability with which a client can be identified using the information requested. At relatively higher privacy levels having a relatively lower privacy impact relatively less information about the client device is divulged to perform the authentication techniques described herein.

Another embodiment of the invention provides for the provisioning or authentication of multiple devices at the same time thereby improving efficiency. For example instead of requesting registration or authentication for a single authentication device at a time a list of authentication devices may be sent from the server. Symmetric and or asymmetric keys are then provisioned into multiple tokens devices in one operation or series of sequential operations executed locally on the client. For authentication several tokens devices may be selected concurrently for a given transaction.

Another embodiment of the invention improves the efficiency with which server challenges are processed and managed. Today after a server sends a random challenge to the client e.g. a cryptographic nonce if the client does not respond within a specified timeout period the nonce is no longer valid and the client will receive an error in response to a subsequent authentication attempt. For example if the user suspends the client to move to a new location e.g. closing the lid on a laptop and then attempts authentication the authentication attempt will be denied. In one embodiment of the invention the client detects that the random challenge has expired and automatically and transparently requests a new challenge from the server. The server then generates a new challenge and transmits it to the client where it may be used for authentication. The end user experience is improved because the user does not receive an error or denial of an authentication request.

Another embodiment of the invention employs transaction signing on a secure transaction server so that no transaction state needs to be maintained on the server to maintain current sessions with clients. Transaction content such as transaction text is sent to the client signed by server when the server responds it sends back the transaction content with the signature. The server does not need to store transaction state because it can verify that the signed transaction responses received by the client are valid by verifying the signature.

While described above as separate embodiments all of the above techniques may be combined together in various ways within a single comprehensive authentication system. Thus a given embodiment of the invention may be combined with one or more other embodiments described herein for improving client and user authentication in a secure network environment.

Turning first to the illustrated embodiment includes a client equipped with one or more authentication devices sometimes referred to in the art as authentication tokens for enrolling and authenticating an end user. As mentioned above the authentication devices may include biometric device such as fingerprint sensors voice recognition hardware software e.g. a microphone and associated software for recognizing a user s voice facial recognition hardware software e.g. a camera and associated software for recognizing a user s face and optical recognition capabilities e.g. an optical scanner and associated software for scanning the retina of a user and non biometric devices such as a trusted platform modules TPMs and smartcards.

The authentication devices are communicatively coupled to the client through an interface e.g. an application programming interface or API exposed by a secure transaction service . The secure transaction service is a secure application for communicating with one or more secure transaction servers over a network and for interfacing with a secure transaction plugin executed within the context of a web browser . As illustrated the Interface may also provide secure access to a secure storage device on the client which stores information related to each of the authentication devices such as a device identification code user identification code user enrollment data e.g. scanned fingerprint or other biometric data and keys used to perform the secure authentication techniques described herein. For example as discussed in detail below a unique key may be stored into each of the authentication devices and used when communicating to servers over a network such as the Internet.

As discussed below certain types of network transactions are supported by the secure transaction plugin such as HTTP or HTTPS transactions with websites or other servers. In one embodiment the secure transaction plugin is initiated in response to specific HTML tags inserted into the HTML code of a web page by the web server within the secure enterprise or Web destination sometimes simply referred to below as server . In response to detecting such a tag the secure transaction plugin may forward transactions to the secure transaction service for processing. In addition for certain types of transactions e.g. such as secure key exchange the secure transaction service may open a direct communication channel with the on premises transaction server i.e. co located with the website or with an off premises transaction server .

The secure transaction servers are coupled to a secure transaction database for storing user data authentication device data keys and other secure information needed to support the secure authentication transactions described below. It should be noted however that the underlying principles of the invention do not require the separation of logical components within the secure enterprise or web destination shown in . For example the website and the secure transaction servers may be implemented within a single physical server or separate physical servers. Moreover the website and transaction servers may be implemented within an integrated software module executed on one or more servers for performing the functions described below.

As mentioned above the underlying principles of the invention are not limited to a browser based architecture shown in . illustrates an alternate implementation in which a stand alone application utilizes the functionality provided by the secure transaction service to authenticate a user over a network. In one embodiment the application is designed to establish communication sessions with one or more network services which rely on the secure transaction servers for performing the user client authentication techniques described in detail below.

In either of the embodiments shown in the secure transaction servers may generate the keys which are then securely transmitted to the secure transaction service and stored into the authentication devices within the secure storage . Additionally the secure transaction servers manage the secure transaction database on the server side.

An exemplary series of transactions for performing authentication device discovery enrollment registration and authentication are shown in . Some aspects of these transactions have been employed in the OSTP protocol mentioned above see the OSTP Framework Mar. 23 2011 for additional details which is incorporated herein by reference . An understanding of the basic operation of these transactions will provide a context in which embodiments of the invention may be implemented.

The operations described below include detection of authentication devices enrollment of the user with the authentication devices registration of authentication devices user authentication with the registered authentication devices and implementation of secure transactions following authentication .

In operation the user authenticates with username and password in browser and logs in to web site. This is the only time that the user will be required to provide a user name and password. The server determines that the user is not currently using enhanced security e.g. by querying the secure transaction database and provides a suggestion to the user to change to enhanced security.

In one embodiment the server includes a query for devices tag in an HTML page which the secure transaction plugin detects. In response to detecting the tag the secure transaction plugin reroutes the request to the secure transaction service which then prepares exhaustive information about all authentication devices attached to the system including security characteristics of the devices. In one embodiment the information is packaged in an XML format prior to transmission using a pre specified data schema.

The secure transaction plugin receives this information from the secure transaction service and in one embodiment passes the information to the web page s JavaScript via a registered callback. It then chooses how to display the information in the browser . The list filtered by the website may be shown to the user and the user may select one or a combination of authentication devices.

The enrollment operation may be initiated as soon as devices are detected. The user may choose to use one or a group of discovered devices for enhanced security. In operation the user may select a device from the displayed device list in the browser application or mobile device app. For the browser based implementation illustrated in the secure transaction plugin displays a device specific enrollment graphical user interface GUI . The secure transaction plugin transmits the device identifier and an enrollment request to secure transaction service and waits for completion. If the user is already enrolled with an authentication device on the client the user may only need to verify their identity i.e. they will not be required to enroll again . If the user is not currently enrolled then the secure transaction service starts the enrollment process by activating the physical authentication device e.g. via the device interface . The user then interacts with the secure transaction plugin GUI and follows the specified enrollment steps e.g. swiping a finger speaking into a microphone snapping a picture etc . Once complete the user will be enrolled with the authentication device. Significantly once a user is enrolled with a device they may use this enrollment to register or authenticate with any website or network service as described herein.

A secure key provisioning protocol such as the Dynamic Symmetric Key Provisioning Protocol DSKPP may be used to share the key with the client over a secure communication channel see e.g. Request for Comments RFC 6063 . However the underlying principles of the invention are not limited to any particular key provisioning protocol.

Turning to the specific details shown in once the user enrollment or user authentication is complete the server generates a randomly generated challenge e.g. a cryptographic nonce that must be presented by the client during device registration. The random challenge may be valid for a limited period of time. The secure transaction plugin detects the random challenge and forwards it to the secure transaction service . In response the secure transaction service initiates an out of band session with the server e.g. an out of band transaction and communicates with the server using the key provisioning protocol. The server locates the user with the user name validates the random challenge validates the device s authentication code if one was sent and creates a new entry in the secure transaction database for the user. It may also generate the key write the key to the database and send the key back to the secure transaction service using the key provisioning protocol. Once complete the authentication device and the server share the same key if a symmetric key was used or different keys if asymmetric keys were used.

Turning to the specific details shown in which shows a browser based implementation the user enters the uniform resource locator URL of the server in the browser . In an implementation which uses a stand alone application or mobile device app rather than a browser the user may enter a network address for a network service or the application or app may automatically attempt to connect to the network service at the network address.

For a browser based implementation the website embeds a query for registered devices in the HTML page. This may be done in many ways other than embedding the query in an HTML page such as through Javascript or using HTTP headers. The secure transaction plugin receives the URL and sends it to secure transaction service which searches the looks into the secure storage which as discussed includes a database of authentication device and user information and determines whether there is a user enrolled within this URL. If so the secure transaction service sends a list of provisioned devices associated with this URL to the secure transaction plugin . The secure transaction plugin then calls the registered JavaScript API and passes this information to the server e.g. the website . The server chooses the appropriate device from the sent device list generates a random challenge and sends the device information and argument back to the client. The website displays the corresponding user interface and asks for authentication from the user. The user then provides the requested authentication measure e.g. swiping a finger across the fingerprint reader speaking for voice recognition etc . The secure transaction service identifies the user this step can be skipped for devices which don t support storing users obtains the username from the database generates an authentication token using the key and sends this information to the website via the secure transaction plugin. The server identifies the user from the secure transaction database and verifies the token by generating the same token on the server e.g. using its copy of the key . Once verified the authentication process is complete.

In one embodiment the secure transaction plugin displays a window in the browser context to show the transaction details. The secure transaction server periodically e.g. with a random interval verifies that the text that is shown in the window is not being tampered by anyone.

The following example will help to highlight the operation of this embodiment. A user chooses items for purchase from a merchant site and selects check out. The merchant site sends the transaction to a service provide which has a secure transaction server implementing one or more of the embodiments of the invention described herein e.g. PayPal . The merchant site authenticates the user and completes the transaction.

The secure transaction server receives the transaction details TD and puts a Secure Transaction request in an HTML page and sends to client . The Secure Transaction request includes the transaction details and a random challenge e.g. a random nonce . The secure transaction plugin detects the request for transaction confirmation message and forwards all data to the secure transaction service . In an embodiment which does not use a browser or plugin the information may be sent directly from the secure transaction servers to the secure transaction service on the client .

For a browser based implementation the secure transaction plugin displays a window with transaction details to the user in a browser context and asks the user to provide authentication to confirm the transaction. In an embodiment which does not use a browser or plugin the secure transaction service or application may display the window . The secure transaction service starts a timer and verifies the content of the window being displayed to the user. The period of verification may be randomly chosen. The secure transaction service ensures that user sees the valid transaction details in the window . If it detects that the content has been tampered with it prevents the confirmation token from being generated.

After the user provides valid authentication e.g. swipes a finger on the fingerprint sensor the device identifies the user and generates a token cryptographic signature with the transaction details and the random challenge i.e. the token is calculated over the transaction details and the nonce . This allows the secure transaction server to ensure that the transaction details have not been modified between the server and the client. The secure transaction service sends the generated token and username to the secure transaction plugin which forwards the token to the secure transaction server . The secure transaction server identifies the user with the username and verifies the token. If verification succeeds a confirmation message is sent to the client and the transaction is processed.

As mentioned one embodiment of the invention implements a query policy in which a secure transaction server transmits a server policy to the client indicating the authentication capabilities accepted by the server. The client then analyzes the server policy to identify a subset of authentication capabilities which it supports and or which the user has indicated a desire to use. The client then registers and or authenticates the user using the subset of authentication tokens matching the provided policy. Consequently there is a lower impact to the client s privacy because the client is not required to transmit exhaustive information about its authentication capabilities e.g. all of its authentication devices or other information which might be used to uniquely identify the client.

By way of example and not limitation the client may include numerous authentication capabilities such as a fingerprint sensor voice recognition capabilities facial recognition capabilities eye optical recognition capabilities a trusted platform module TPM and smartcard to name a few. However for privacy reasons the user may not wish to divulge the details for all of its capabilities to a requesting server. Thus using the techniques described herein the secure transaction server may transmit a server policy to the client indicating that it supports for example fingerprint optical or smartcard authentication. The client may then compare the server policy against its own authentication capabilities and choose one or more of the available authentication options.

The particular implementation shown in includes a secure transaction plugin for establishing communication with the secure enterprise or Web destination sometimes referred to simply as server using techniques previously discussed. For example the secure transaction plugin may identify a specific HTML tag inserted into the HTML code by a web server . Thus in this embodiment the server policy is provided to the secure transaction plugin which forwards it to the secure transaction service implementing the policy filter .

The policy filter may determine the client authentication capabilities by reading the capabilities from the client s secure storage area . As previously discussed the secure storage may comprise a repository of all of the client s authentication capabilities e.g. identification codes for all of the authentication devices . If the user has already enrolled the user with its authentication devices the user s enrollment data is stored within the secure storage . If the client has already registered an authentication device with a server then the secure storage may also store an encrypted secret key associated with each authentication device.

Using the authentication data extracted from the secure storage and the policy provided by the server the policy filter may then identify a subset of authentication capabilities to be used. Depending on the configuration the policy filter may identify a complete list of authentication capabilities supported by both the client and the server or may identify a subset of the complete list. For example if the server supports authentication capabilities A B C D and E and the client has authentication capabilities A B C F and G then the policy filter may identify the entire subset of common authentication capabilities to the server A B and C. Alternatively if a higher level of privacy is desired as indicated by user preferences in then a more limited subset of authentication capabilities may be identified to the server. For example the user may indicate that only a single common authentication capability should be identified to the server e.g. one of A B or C . In one embodiment the user may establish a prioritization scheme for all of the authentication capabilities of the client and the policy filter may select the highest priority authentication capability or a prioritized set of N authentication capabilities common to both the server and the client.

Depending on what operation has been initiated by server Registration or Authentication the secure transaction service performs that operation on the filtered subset of authentication devices and sends the operation response back to server via the secure transaction plugin as shown in . Alternatively in an embodiment which does not rely on a plugin component of a Web browser the information may be passed directly from the secure transaction service to the server .

Because the user has not previously registered with enhanced security determined at the server transmits its server policy to the client at . As mentioned the server policy may include an indication of the authentication capabilities supported by the server . In the illustrated example the server policy is passed to the secure transaction service via transaction .

At transaction the secure transaction service compares the server policy with the capabilities of the client and potentially other information such as device priority scheme and or user preferences as described above to arrive at a filtered list of authentication capabilities. The filtered list of devices then generate keys and and then provide public parts of these keys to secure transaction service which in its turn sends these as registration response back to server . The server attests the authentication devices and stores public keys in secure transaction database. The Token Attestation employed here is the process of validating authentication device identity during registration. It allows server to cryptographically make sure that the device reported by Client is really who it claimed to be.

Alternatively or in addition at the user may be provided with an opportunity to review the list and or select specific authentication capabilities to be used with this particular server . For example the filtered list may indicate the option to use authentication with a fingerprint scan facial recognition and or voice recognition. The user may then choose to use one or more of these options when authenticating with the server .

The techniques described above for filtering a server policy at a client may be implemented at various different stages of the series of transactions described above e.g. during device discovery device registration device provisioning user authentication etc . That is the underlying principles of the invention are not limited to the specific set of transactions and the specific transaction ordering set forth in .

Moreover as previously mentioned a browser plugin architecture is not required for complying with the underlying principles of the invention. For an architecture which does involve a browser or browser plug ins e.g. such as a stand alone application or mobile device app the transaction diagram shown in and the rest of the transaction diagrams disclosed herein may be simplified such that the browser is removed and the secure transaction service communicates directly with the server .

One embodiment of the invention is capable of enrolling registering and authenticating multiple devices at the same time thereby improving efficiency and the user experience. For example instead of requesting registration and authentication for a single device at a time a list of devices may be sent to the client. Symmetric or asymmetric keys may then be registered into multiple devices in one operation or series of sequential operations executed locally on the client. For authentication several tokens devices may be selected concurrently for a given transaction.

As in the embodiments described above the particular implementation shown in includes secure transaction plugin for establishing communication with the server which as discussed may include a Website server and secure transaction servers . Thus the server communicates with the secure transaction service via the secure transaction plugin . As mentioned however a browser based plugin architecture is not required for complying with the underlying principles of the invention.

The multi device processing logic on the server may communicate commands to be executed by the multi device processing logic on the client which performs the operations on multiple authentication devices . By way of example the multi device processing logic may generate N keys to be registered with each of N authentication devices and then transmit securely to the multi device processing logic along with a command to register the N devices. The multi device processing logic may then perform the registration concurrently or in a series of sequential operations for all N devices e.g. for authentication devices without further interaction with the server. A single response may then be sent to the server to indicate the completed registration of all N devices.

A series of exemplary multiple device transactions are illustrated in . illustrates a multiple device enrollment process which may be performed without any interaction with the server e.g. enrolling the user with authentication devices may be performed under the control of the secure transaction service on the client . In an alternate embodiment the server may transmit a request to the client now shown to enroll the user with the N devices. illustrate two different embodiments for registering multiple devices with the server .

Turning to the enrollment process in at the user indicates a desire to enroll with N authentication devices on the client representing all or a subset of the available authentication devices . In response the secure transaction plugin is called at and at a device specific graphical user interface GUI is generated to walk the user through the process or enrolling with authentication device 1. During the enrollment process the user interacts with the secure transaction plugin as indicated e.g. by positioning a finger over a fingerprint sensor speaking into a microphone snapping a picture with the camera etc . In one embodiment enrollment is performed for each of the N devices until enrollment is completed for the Nth device at . A different device specific script and or user interface may be presented to the user to enroll the user with each individual authentication device. As previously discussed as the user enrolls with each device the user enrollment data may be stored within the secure storage on the client and made accessible only through the secure transaction service . Once enrollment for all N devices is complete a notification may be sent to the server via transactions .

Regardless of how enrollment is performed once completed the transaction diagram shown in may be used to register the N devices with the server . At the server generates a user specific random challenge which as previously described may only be valid for a limited window of time and may comprise a randomly generated code such as a cryptographic nonce. At the random challenge is transmitted along with a command to register N authentication devices with the server . At the secure transaction service creates a secure connection with the server and transmits identification data for the N devices along with the random challenge. In one embodiment the secure connection is an HTTPS connection. However the underlying principles of the invention are not limited to any particular secure connection type.

At the server attests the N devices generates a key for each of the N devices and sends the N keys back to the secure transaction service over the secure connection. In one embodiment the Dynamic Symmetric Key Provisioning Protocol DSKPP is used to exchange keys with the client over the secure connection. However the underlying principles of the invention are not limited to any particular key provisioning techniques. Alternatively in an embodiment which does not rely on DSKPP protocol the keys may be generated in each Authentication Device and then transmitted to server .

At the multi device processing logic of the secure transaction service registers each of the N keys into each of the N devices. As previously described each key may be stored and associated with its respective device within the secure storage on the client. Once registration is complete for each authentication device a notification is sent to the server over the secure connection at .

In one embodiment the keys registered into each authentication device are symmetric keys. Thus an identical copy of each key is stored in the secure storage on the client and the secure transaction database on the server . In an alternate implementation asymmetric key pairs may be generated with one of the keys being maintained as a public key in the secure transaction database on the server and the private key being stored in the secure storage of the client. It should be noted however that the underlying principles of the invention are not limited to any particular type of encryption keys.

An alternate implementation is illustrated in in which keys are generated on the client rather than the server . In this implementation after receiving the request to register devices with the random challenge at the multi device processing logic of the secure transaction service generates N keys for each of the N devices at . Once generated the keys are registered with each of the N devices at and the registration stored within the secure storage as previously described. Once all keys have been registered the secure transaction service provides a notification to the server at along with the random challenge to verify the identity of the client . The server may then store the registration in the secure transaction database as described above.

One embodiment of the invention improves the manned in which random challenges are generated by the server and processed. In one embodiment the random challenge comprises a randomly generated code such as a cryptographic nonce. In current systems after a server transmits a random challenge to the client if the client does not respond within a specified timeout period the random challenge is no longer valid and the client will receive an error in response to a subsequent authentication attempt e.g. the user will swipe a finger on the fingerprint reader and be denied .

In one embodiment of the invention the client automatically detects that the challenge has expired and transparently requests a new challenge from the server i.e. without user intervention . The server then generates a new random challenge and transmits it to the client which may then use it to establish secure communication with the server. The end user experience is improved because the user does not receive an error or denial of an authentication request.

Turning first to at the server generates a random challenge and an indication of a timeout period. In one embodiment the timeout period comprises a period of time for which the random challenge is considered valid. After the timeout period has elapsed the random challenge is no longer considered valid by the server . In one embodiment the timeout period is specified simply as a point in time at which the random challenge will no longer be valid. Once this point in time is reached the random challenge is invalid. In another embodiment the timeout period is specified by using a current timestamp i.e. the time at which the random challenge is generated by the server and a duration. The secure transaction service may then calculate the timeout time by adding the duration value to the timestamp to calculate the point in time when the random challenge becomes invalid. It should be noted however that the underlying principles of the invention are not limited to any specific technique for calculating the timeout period.

Regardless of how the timeout period is specified or calculated at the random challenge and the timeout indication are transmitted to the secure transaction service via the browser and secure transaction plugin in the illustrated example . At the secure transaction service detects that the random challenge has timed out and is no longer valid based on the timeout indication sent from the server . By way of example the user may have turned off his her client machine or closed the lid on his her notebook computer prior to completing the series of transactions. If the transaction is one which requires user interaction the user may have simply walked away or ignored a message displayed within the GUI.

At upon detecting that the random challenge is no longer valid the secure transaction service transmits a request for a new random challenge to the server via the secure transaction plugin and browser in the illustrated example . At the server generates a new random challenge an a new indication of the timeout period. In one embodiment the timeout period is the same as in operation or may be modified. For example the server may increase the duration of the timeout period to reduce data traffic with the client or decrease the duration to increase the level of security provided by the random challenge. At the new random challenge and timeout indication is transmitted to the secure transaction service .

The remainder of the transactions occurs as previously described. For example the secure transaction service opens a secure connection directly to the server at in order to perform device registration and key exchange as discussed above with respect to or . At the server identifies the user e.g. with a user name or other ID attests authentication device and generates a key for the device. As mentioned the key may be a symmetric key or an asymmetric key. At the keys are transmitted to the secure transaction service via the secure connection and at the secure transaction service registers the key into the authentication device. At a notification that registration is complete is transmitted to the server .

Thus in the embodiment shown in the key used for device registration is generated at the server as in the embodiment shown in . However the underlying principles of the invention may also be used in an embodiment in which the key s are generated by the secure transaction service on the client such as that described above with respect to .

At the secure transaction service automatically detects that the random challenge is no longer valid upon reaching the end of the timeout period. As mentioned above various different techniques may be employed for indicating and detecting the end of the timeout period see and associated text . Upon detecting the expiration of the random challenge at the secure transaction service transparently i.e. without user intervention notifies the server and requests a new random challenge. In response at the server generates a new random challenge and a new indication of the timeout period. As mentioned the new timeout period may be the same as previously sent to the client or may be modified. In either case at the new random challenge and timeout indication are sent to the secure transaction service .

The remainder of the transaction diagram shown in operates in substantially the same manner as described above see e.g. . For example at an authentication user interface is displayed e.g. directing the user to swipe a finger on a fingerprint sensor and at the user provides authentication e.g. swipes a finger on the fingerprint scanner . At the secure transaction service verifies the identity of the user e.g. comparing the authentication data collected from the user with that stored in the secure storage and uses the key associated with the authentication device to encrypt the random challenge. At the user name or other ID code and the encrypted random challenge are sent to the server . Finally at the server identifies the user within the secure transaction database using the user name or other ID code and decrypts verifies the random challenge using the key stored in the secure transaction database to complete the authentication process.

In one embodiment multiple classes of privacy protection may be predefined selected and or modified by the end user. The privacy classes may be defined based on the probability with which a client can be identified using the divulged information. At privacy classes having relatively higher privacy levels relatively less information about the client device is divulged to perform the authentication techniques described herein. In one embodiment the user may choose to disclose the least amount of information possible when communicating with different servers i.e. may choose transactions having the lowest allowable privacy impact for each website or network service .

The privacy classes utilized by the privacy management logic may be pre specified and stored on the client e.g. within stored within secure storage . In one embodiment three privacy classes are defined high privacy impact medium privacy impact and low privacy impact. Each privacy class may be defined based on a probability with which the divulged information could be used to uniquely identify a user client. For example the information divulged for a low privacy impact transaction may result in a 10 probability of the user or machine being uniquely identified over internet a medium privacy impact transaction may result in a 50 probability of the user or machine being uniquely identified and a high privacy impact transaction may result in a 100 probability of the user or machine being uniquely identified. Various other privacy class levels may be defined while still complying with the underlying principles of the invention.

In one embodiment each relying party e.g. each website or service may specify a required privacy class or other privacy threshold. For example websites and services requiring a heightened level of security may only allow communication in accordance with the high privacy impact class whereas other websites services may permit interactions using the medium privacy impact or low privacy impact class. In one embodiment the query for client information sent from the server includes an attribute specifying which privacy classes of information should be retrieved i.e. low medium high . Thus the privacy management logic will store information for the highest approved privacy class for each relying party. In one embodiment whenever the relying party asks for information belonging to a higher privacy class than the one already approved the user will be prompted to permanently approve or reject this new privacy class for this relying party. In response to the user s approval the privacy management logic may store the new association between the relying party e.g. identified via a URL and the new privacy class.

While the user preferences are applied directly to the privacy management logic in for simplicity it should be noted that the user may specify preferences via a browser based graphical user interface not shown . In such a case the user would enter privacy setting via a browser window. The secure transaction plugin would then store the new settings to the privacy management logic or to a configuration data file accessible by the privacy management logic . In short the underlying principles of the invention are not limited to any particular mechanism for configuring the privacy management logic.

Various types of client data may be specified at the various privacy class levels including for example a machine model identifier client software information client capabilities and various levels of information related to each authentication device configured on the client device e.g. device ID codes vendor ID codes device class ID etc . Different combinations of this information may be gathered to determine the percentages specified above defining the different privacy classes.

One embodiment of the invention employs transaction signing on the secure transaction server so that no transaction state needs to be maintained on the server to maintain sessions with clients. In particular transaction details such as transaction text may be sent to the client signed by server. The server may then verify that the signed transaction responses received by the client are valid by verifying the signature. The server does not need to persistently store the transaction content which would consume a significant amount of storage space for a large number of clients and would open possibility for denial of service type attacks on server.

One embodiment of the invention is illustrated in which shows a website or other network service initiating a transaction with a client . For example the user may have selected items for purchase on the website and may be ready to check out and pay. In the illustrated example the website or service hands off the transaction to a secure transaction server which includes signature processing logic for generating and verifying signatures as described herein and authentication logic for performing client authentication e.g. using the authentication techniques previously described .

In one embodiment the authentication request sent from the secure transaction server to the client includes the random challenge such as a cryptographic nonce as described above the transaction details e.g. the specific text presented to complete the transaction and a signature generated by the signature processing logic over the random challenge and the transaction details using a private key known only by the secure transaction server .

Once the above information is received by the client the user may receive an indication that authentication is required to complete the transaction. In response the user may for example swipe a finger across a fingerprint scanner snap a picture speak into a microphone or perform any other type of authentication permitted for the given transaction. In one embodiment once the user has successfully authenticated on the client the client transmits the following back to the server 1 the random challenge and transaction text both previously provided to the client by the server 2 authentication data proving that the user successfully completed authentication and 3 the signature.

The authentication module on the secure transaction server may then confirm that the user has correctly authenticated and the signature processing logic re generates the signature over the random challenge and the transaction text using the private key. If the signature matches the one sent by the client then the server can verify that the transaction text is the same as it was when initially received from the website or service . Storage and processing resources are conserved because the secure transaction server is not required to persistently store the transaction text or other transaction data within the secure transaction database .

As illustrated in the computer system which is a form of a data processing system includes the bus es which is coupled with the processing system power supply memory and the nonvolatile memory e.g. a hard drive flash memory Phase Change Memory PCM etc. . The bus es may be connected to each other through various bridges controllers and or adapters as is well known in the art. The processing system may retrieve instruction s from the memory and or the nonvolatile memory and execute the instructions to perform operations as described above. The bus interconnects the above components together and also interconnects those components to the optional dock the display controller display device Input Output devices e.g. NIC Network Interface Card a cursor control e.g. mouse touchscreen touchpad etc. a keyboard etc. and the optional wireless transceiver s e.g. Bluetooth WiFi Infrared etc. .

According to one embodiment of the invention the exemplary architecture of the data processing system may used for the mobile devices described above. The data processing system includes the processing system which may include one or more microprocessors and or a system on an integrated circuit. The processing system is coupled with a memory a power supply which includes one or more batteries an audio input output a display controller and display device optional input output input device s and wireless transceiver s . It will be appreciated that additional components not shown in may also be a part of the data processing system in certain embodiments of the invention and in certain embodiments of the invention fewer components than shown in may be used. In addition it will be appreciated that one or more buses not shown in may be used to interconnect the various components as is well known in the art.

The memory may store data and or programs for execution by the data processing system . The audio input output may include a microphone and or a speaker to for example play music and or provide telephony functionality through the speaker and microphone. The display controller and display device may include a graphical user interface GUI . The wireless e.g. RF transceivers e.g. a WiFi transceiver an infrared transceiver a Bluetooth transceiver a wireless cellular telephony transceiver etc. may be used to communicate with other data processing systems. The one or more input devices allow a user to provide input to the system. These input devices may be a keypad keyboard touch panel multi touch panel etc. The optional other input output may be a connector for a dock.

Embodiments of the invention may include various steps as set forth above. The steps may be embodied in machine executable instructions which cause a general purpose or special purpose processor to perform certain steps. Alternatively these steps may be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

Elements of the present invention may also be provided as a machine readable medium for storing the machine executable program code. The machine readable medium may include but is not limited to floppy diskettes optical disks CD ROMs and magneto optical disks ROMs RAMs EPROMs EEPROMs magnetic or optical cards or other type of media machine readable medium suitable for storing electronic program code.

Throughout the foregoing description for the purposes of explanation numerous specific details were set forth in order to provide a thorough understanding of the invention. It will be apparent however to one skilled in the art that the invention may be practiced without some of these specific details. For example it will be readily apparent to those of skill in the art that the functional modules and methods described herein may be implemented as software hardware or any combination thereof. Moreover although some embodiments of the invention are described herein within the context of a mobile computing environment the underlying principles of the invention are not limited to a mobile computing implementation. Virtually any type of client or peer data processing devices may be used in some embodiments including for example desktop or workstation computers. Accordingly the scope and spirit of the invention should be judged in terms of the claims which follow.

