---

title: Inversion-of-control component service models for virtual environments
abstract: In the field of computing, many scenarios involve the execution of an application within a virtual environment of a device (e.g., web applications executing within a web browser). Interactions between applications and device components are often enabled through hardware abstractions or component application programming interfaces (API), but such interactions may provide more limited and/or inconsistent access to component capabilities for virtually executing applications than for native applications. Instead, the device may provide hardware interaction as a service to the virtual environment utilizing a callback model, wherein applications within the virtual environment initiate component request specifying a callback, and the device initiates the component requests with the components and invokes associated callbacks upon completion of a component request. This model may enable the applications to interact with the full capability set of the components, and may reduce blocked execution of the application within the virtual application in furtherance of application performance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600351&OS=09600351&RS=09600351
owner: Microsoft Technology Licensing, LLC
number: 09600351
owner_city: Redmond
owner_country: US
publication_date: 20121214
---
Within the field of computing many scenarios involve an execution of applications within a virtual environment of a device such as web applications executing within a web browser code that is developed for a computational environment other than that provided by the device e.g. Java code designed for a Java virtual machine and untrusted code executing within an isolated virtual machine. The execution of the application within the virtual machine rather than as a native process of the device may facilitate the compatibility and security of the application during execution.

Such applications often invoke requests directed to a hardware or software component of the device. For example a graphics hardware component may provide a rendering function e.g. rendering an image of a three dimensional scene that may be invoked by various applications execution on the device. Such hardware components may be readily accessible to native applications executing with the computing environment of the device and may be exposed on a more limited basis to applications executing within a virtual environment of the device. For example a graphics rendering component may provide comparatively low level and extensive access by applications and may provide more constrained rendering capabilities on behalf of web applications executing within a web browser. Such restrictions may be implemented as selected and or appropriate in view of a less trusted code environment provided by the virtual environment e.g. code running in a web browser is typically ascribed a lower level of trust than native code that has been installed on the device and or based on abstractions of the components within the virtual environment e.g. rather than providing device specific capabilities of a hardware component a virtual environment may present a generalized set of capabilities supported by many hardware components and devices . Finally many virtual environments may enable the application to invoke the capabilities of the devices but may block execution of the application until the invocation of the capabilities of the device is complete.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

The typical models of the interaction of applications within a virtual environment with device components may present some disadvantages. As a first example the applications may be unable to access a broad range of capabilities of the components. As a second example the efficiency of component invocations in this model may be diminished by the inability of the device to utilize component specific features or optimization techniques. As a third example blocking the web application until the component request is complete may significantly impair the performance of the web application.

Presented herein are techniques for fulfilling component requests of applications in a manner that may address some of these disadvantages and or enable additional advantages. In accordance with these techniques the device may facilitate the handling of component requests from applications within a virtual environment through an inversion of control mechanism via a callback mechanism. An application executing within the virtual environment may initiate a component request involving one or more components and or component capabilities of the computing environment and specifying a callback of the application to be invoked upon completion of the component request. The device may fulfill this component request by storing an association of the application the identified component and or component capability and then sending the component request to the associated component. The device may then resume execution of the application within the virtual environment. When the device later detects a completion of the component request by the component the device may identify one or more callbacks associated with the component request and may invoke the callbacks in order to perform processing on the results of the component request and or to notify the applications of the completion of the component request. This model may expedite the fulfillment of component requests issued by applications within a virtual environment.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Within the field of computing many scenarios involve the execution of applications on a device within a virtual environment rather than within the native computing environment of the device. As a first example a web browser may provide a standardized platform for executing device independent code such as JavaScript and Hypertext Markup Language HTML content. As a second example a Java virtual machine JVM may provide a bridge between a generalized computing device and the native capabilities of the device on behalf of a Java application e.g. translating generalized memory allocation requests to the memory model of the device . As a third example code designed for the native environment of a first device may be executed on a second completely device through an emulator that provides a simulation of the first device within the second device. As a fourth example untrusted code may be executed within a sandbox or an artificial machine such that malicious operations may be isolated to the artificial machine and the effects of the untrusted code on the artificial device may be evaluated by the device without risk of damage to the device.

These and other scenarios present the execution of an application within a virtual environment. In many such scenarios in addition to utilizing the resources of the virtual environment the application may involve interactions with the components of the device. As a first example the application may interact with a camera of the device such as a photo editing application that begins with a photo image captured by the camera. As a second example a location aware application may request to be notified of the current location of the device or of an arrival of the device at a particular location according to a global positioning system GPS receiver of the device. As a third example an augmented reality application may utilize both a camera to capture a current view of the world and a GPS receiver to detect the current location and viewing angle of the device in order to overlay information on the display of the device that relates to the objects pictured in the image captured by the camera.

It may be appreciated that such scenarios involve capabilities of a device that may not be included by default in the virtual environment. For example a typical configuration of a web browser does not include any capability for an application to request a photo from a camera or a location detected by a GPS receiver even if the device includes a camera and or GPS receiver that feature such capabilities. Where such actions are beyond the default and standardized capabilities of the virtual environment the device may provide various mechanisms for enabling such applications to initiate such requests on behalf of the components of the device.

The device may also comprise one or more hardware components such as a camera and a gyroscope with which applications request to interact. Native applications executing within the computing environment may initiate interaction directly with the components such as by issuing requests directly to a hardware driver for a component . However web applications executing within a web browser are isolated from direct interaction with the components and instead interact with the resources of the web browser . Additionally the web browser may not be configured to interact with the components on behalf of web applications e.g. the web browser may have no capability for receiving an image from a camera of a device and thus may be incapable of utilizing the component resources of the device on behalf of the web applications . In many scenarios no alternative interaction model is provided and the web applications are simply unable to interact with or even identify the components of the device.

However it may be undesirable to constrain the capabilities of the web applications to those comprising the web browser . Rather it may be desirable to enable applications executing within such virtual environments to interact with the components of the device. To this end various techniques have been devised to enable such accessing.

However the model illustrated in the exemplary scenario of may present some disadvantages. As a first example the development of a component proxy may add some complexity such as introducing an additional component into the virtual environment of the web browser and or providing a different type of interaction with the component that varies from the interaction of native applications with the same component . As a second example in such models the web application is blocked until the component request is fulfilled e.g. in order to reduce the exposure of the component to a high volume of component requests as a denial of service attack . As a third example in such models the component proxy of a first component may differ from the component proxy of a second component or the latter component may simply not provide or interact with any component proxy .

While this model may present some advantages with respect to the component proxy model of the model presented in this exemplary scenario of may also exhibit some disadvantages. As a first example the application programming interfaces for respective components may differ such that the functions presented by the application programming interface of a first component may differ from the functions presented by the application programming interface of a second component e.g. the API presented by a camera may use completely different conventions than an API presented by a GPS . A developer seeking to design a web application to use a selected component may first have to learn about the capabilities of its application programming interface . Moreover some components may not include an application programming interface and therefore may not participate or be accessible to web applications executing within the web browser .

When comparing the component proxy model presented in the exemplary scenario of and the application programming interface API plug in model presented in the exemplary scenario of it may be appreciated that the disadvantages of these models result from two particular factors. First in both cases attempting to import portions of the components of the device into a virtual environment involves a duplication or redevelopment of the functionality of the component e.g. the component may present the functionality both through a native interface to the native applications executing within the computing environment and through a component proxy or application programming interface to the applications executing within the virtual environment . This redevelopment may be inefficient and differences may exist or arise between the native interface and the virtual interface for the same component that result in different sets of functionality. Moreover any components that do not include a virtual environment interface are inaccessible and perhaps even invisible within the virtual environment.

Second because both the component proxy model and the application programming interface API plug in model involve a customized interface provided by each component i.e. each component proxy or application programming interface may be developed in a different manner using different data standards and interface methodologies. That is neither model enforces promotes or even encourages consistency among the interfaces and each interface may operate very differently from each other interface. Accordingly a developer who wishes to invoke the interface for one component may have to study and learn the interface first even if the developer is familiar with the interfaces for other components . Moreover inconsistencies and incompatibilities among the interfaces may interfere with the interoperation of the components . For example in the device presented in the exemplary scenario of it may be desirable to combine the functionality of the camera gyroscope and GPS receiver to provide an augmented reality web application executing within the web browser e.g. when the camera captures an image the web application may detect the location of the device using the GPS receiver and the physical orientation of the device using the gyroscope to identify the objects within the projected view of the camera while of capturing the image. However it may be very difficult to design an application that interacts concurrently and performantly with different interfaces e.g. different component proxies and or different application programming interfaces for each component within the virtual environment.

Presented herein is a different model for enabling interaction between the components of a device and the applications executing within a virtual environment of the device . These techniques present a different model for enabling application component interactions involving a service that accepts requests for component interactions from applications executing within a virtual environment conveys those requests to the components of the device and returns the results to the applications within the virtual environment. The service may fulfill the requests in an asynchronous manner through a callback mechanism e.g. while initiating the request the applications within the virtual environment may specify a callback such as the name or memory address of a function a script or a code block such as a lambda expression or abstract syntax tree to be invoked by the service upon the component completing the request. The service may then fulfill the request outside of the virtual environment in an asynchronous manner e.g. reserving processing time and resources to examine the request to satisfy security and access permissions and upon completion may invoke the callback with the results of the request generated by the component .

As further illustrated in the exemplary scenario of the application may specify with the component request a callback such as the name or memory address of a function a script or a code block such as a lambda expression or abstract syntax tree to be invoked upon completion of the invocation . The component service may accept the component request and store the callback and upon receiving from the component a completion of the invocation may invoke the callback on behalf of the application . If the invocation of the component generated a component result e.g. an image from the camera a set of latitude longitude altitude coordinates from the GPS receiver or detected orientation metrics from the gyroscope the component service may receive the component result and provide it to the callback . The component service may also notify the application within the virtual environment of the completion of the invocation the invocation of the callback and or the receipt of the component result . In this manner the component service may fulfill the component request of the application specifying a component of the device .

The component access model presented in the exemplary scenario of may present several advantages particularly when compared with the component proxy model illustrated in the exemplary scenario of and the application programming interface model illustrated in the exemplary scenario of . As a first example the component service may present a model for interacting with any component of the device irrespective of the functionality provided by each component and therefore may provide a consistent and standardized interface. As a second example by initiating interactions with respective components in the same manner as native applications the component service may reduce the redundant and inefficient implementation by the component of a second interface for the virtual environment . As a third example by interacting with the applications outside of the virtual environment the component service may be ascribed the same privileges as native applications executing within the computing environment . Accordingly the same set of functionality of the components may be provided to the applications executing within the virtual environment as provided to native applications executing within the computing environment . Conversely in addition to interacting directly with the components native applications may be designed to interact with the components through the component service in the same manner as the applications executing within the virtual environment . As a fourth example by communicating completion of invocations with the applications within the virtual environment via callbacks the component service may promote the asynchronous fulfillment of component requests without the applications having to implement a separate interaction thread or other asynchronous mechanism. These and other advantages may be achievable through the implementation of the component service according to the techniques presented herein.

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to apply the techniques presented herein. Such computer readable media may include e.g. computer readable storage media involving a tangible device such as a memory semiconductor e.g. a semiconductor utilizing static random access memory SRAM dynamic random access memory DRAM and or synchronous dynamic random access memory SDRAM technologies a platter of a hard disk drive a flash memory device or a magnetic or optical disc such as a CD R DVD R or floppy disc encoding a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein. Such computer readable media may also include as a class of technologies that are distinct from computer readable storage media various types of communications media such as a signal that may be propagated through various physical phenomena e.g. an electromagnetic signal a sound wave signal or an optical signal and in various wired scenarios e.g. via an Ethernet or fiber optic cable and or wireless scenarios e.g. a wireless local area network WLAN such as WiFi a personal area network PAN such as Bluetooth or a cellular or radio network and which encodes a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein.

An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method of fulfilling component requests on behalf of applications executing within a virtual environment such as the exemplary method of . In another such embodiment the processor executable instructions may be configured to implement a system for fulfilling component requests on behalf of applications executing within a virtual environment such as the exemplary system of . Some embodiments of this computer readable medium may comprise a computer readable storage medium e.g. a hard disk drive an optical disc or a flash memory device that is configured to store processor executable instructions configured in this manner. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

The techniques discussed herein may be devised with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Moreover some variations may be implemented in combination and some combinations may feature additional advantages and or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments e.g. the exemplary method of and the exemplary system of to confer individual and or synergistic advantages upon such embodiments.

A first aspect that may vary among embodiments of these techniques relates to the scenarios wherein such techniques may be utilized.

As a first variation of this first aspect the techniques presented herein may be utilized with many types of devices such as servers server farms workstations laptops tablets mobile phones game consoles and network appliances.

As a second variation of this first aspect the techniques presented herein may be utilized to service applications executing within many types of virtual environments such as a web browser a simulated and or emulated virtual machine a middleware platform and or an isolation construct.

As a third variation of this first aspect the techniques presented herein may be utilized to service many types of applications such as web applications written in various interpreted and or compiled languages file sharing applications media rendering applications and data driven client applications.

As a fourth variation of this first aspect the techniques presented herein may involve many types of components such as human input devices e.g. keyboard mice voice microphones speech processors gaze locators and natural gesture interfaces sensors e.g. GPS receivers gyroscopes compasses and light level detectors communications devices e.g. wired network adapters local area network LAN wireless adapters and or cellular wireless adapters output devices e.g. monitors audio speakers printers and tactile feedback generators and device controllers and or device interfaces e.g. machine control systems . The components may also include various software components such as file systems data stores platforms application programming interfaces APIs and objects.

As a fifth variation of this first aspect the component service may interact with the components of the device in various ways. As a first such example the component service may provide a pluggable framework and the components may provide drivers or other interfaces to enable interactions with the component service . As a second such example the component service may proactively discover the components of the device e.g. by querying a device manager device stage system registry or configuration manifest of the device to determine the components of the device and the capabilities of each component .

As a sixth variation of this first aspect the techniques presented herein may involve many types of component requests directed to such components involving many types of functionality such as capturing input from one or more sensors reading data from a storage device writing data to a storage device performing a set of computation or adjusting a property of the component . Moreover such component requests many involve many types of callbacks such as the name or memory address of a function of the application or of an application programming interface API method of the computing environment a script or a code block such as a lambda expression or abstract syntax tree. These and other scenarios may be compatible with and may advantageously utilize the techniques presented herein.

A second aspect that may vary among embodiments of these techniques involves the implementation of the component service . While the component service may be configured in accordance with the exemplary method of and or as the exemplary system of it may be appreciated that many design details may be selected for such implementations and that some such designs may present comparative advantages and or reduce disadvantages with respect to other designs.

A third aspect that may vary among embodiments of these techniques relates to various features that may be implemented in the component service .

As a first variation of this third aspect the component service may interact with the applications and or the virtual environment in various ways. As a first such example the component service may present an interface within the virtual environment and may enable the applications to interact with the component service interface to initiate component requests . As a second such example the component service may not be present within the virtual environment but may detect the initiation of component requests within the virtual environment and may receive or intercept such component requests to be fulfilled on behalf of the applications . As a third such example the component service may be integrated with the virtual environment and may be exposed e.g. as an aspect of the virtual machine presented by the virtual environment to the applications .

As a second variation of this third aspect the component service may assist the applications within the virtual environment in discovering the components of the device and the capabilities available therethrough. For example the component service may upon receiving from an application within the virtual environment a component enumeration request the component service may enumerate for the application the components of the device that are identifiable in a component request. Alternatively or additionally upon receiving from an application within the virtual environment a device capability enumeration request the component service may enumerate for the application the component capabilities of respective components of the device e.g. the capability of capturing an image the capability of detecting a location and the capability of detecting a physical orientation of the device . That is the capabilities of the components may be presented to the application without necessarily identifying the components through which such capabilities are achievable. Moreover upon receiving from the application within the virtual environment a device capability request specifying a component capability e.g. please detect the physical orientation of the device rather than a specific component the component service may translate the device capability request into a component request specifying a component having the component capability specified by the device capability request e.g. translating the physical orientation request into a request for an invocation of a function of a gyroscope components that generates the requested information .

As a third variation of this third aspect a device may provide various security mechanisms applicable to interactions between the component service and the components on behalf of the applications . Such security mechanisms may be desirable e.g. where the applications may comprise untrusted code such as web applications casually retrieved from various websites or mobile agents received from untrusted users. The virtual environment itself may comprise an isolation construct such as a virtual machine that an untrusted application may disrupt without interfering with the operation of the computing environment of the device . In such scenarios enabling the applications to initiate component requests with the components through the component service may represent a security vulnerability which may be mitigated through various security measures. As a first such example if the application is ascribed a particular trust level and or permissions set the component service and or component requests may be ascribed the same trust level and or permissions set in order to avoid escalating the privileges of the application . As a second such example the component service may scrutinize the component requests and or component results for security issues e.g. the inclusion of malicious code or an accessing or leakage of private user information. As a third such example the component service may involve the user in trust decisions e.g. where the component request specifies a component capability of the component the component service may present to the user an offer to initiate the component request identifying the component capabilities requested by the application e.g. This application is requesting access to the gyroscopic sensor and may initiate the component request only after receiving an acceptance of the offer from the user .

As a fourth variation of this third aspect after a component completes a component request the component service may fulfill the component request on behalf of the application in various ways. As a first such example the callback associated with the component request may be invoked by the component service within the virtual environment e.g. client side Javascript executed within the web browser outside of the virtual environment e.g. native instructions executing within the computing environment and or within another virtual machine e.g. as server side Javascript utilizing the Node.js server side Javascript module and executed by a web browser .

As a second example of this fourth variation of this third aspect if the component request to the component results in a component result the component service may convey the component result to the callback and or the application in various ways. presents an exemplary scenario featuring two variations in the conveyance of the component result to the application . In this exemplary scenario a device provides an application executing within a virtual environment and a set of components to which the application directs component requests . For example the device may comprise a GPS receiver component capable of detecting latitude and longitude coordinates and a camera component capable of capturing a photo . The device may include a variant of the exemplary system illustrated in to provide a component service to the application e.g. a component request initiating component configured to initiate interactions with the components on behalf of the application and a callback invoking component configured to invoke a callback specified by the application in the component request . Moreover the component service may handle the component results of the components in various ways. As a first such example the GPS receiver component may comprise an overly verbose or chatty set of component results such as a frequent stream of coordinates. However the application may only occasionally utilize the coordinates and perhaps only once and invoking the callback for each component result may be undesirable. Instead the component service may generate a condensed component result having a smaller size than the uncondensed component result such as an aggregated set of coordinates reported by the GPS receiver over an extended period. Alternatively or additionally the application may specify a requested result type e.g. the type of data from the component that is useful to the application and the condensed component result may exclude at least one portion of at least one component result that is not related to the requested result types identified by the application e.g. if a GPS receiver reports thirty coordinates per minute and the application only utilizes one coordinate per minute the component service may exclude of the coordinates received per minute . In some such scenarios the condensing may be user selectable e.g. the user may a condensing preference for the data reported to the application e.g. providing some personal information and withholding other personal information and the component service may generate the condensed component results according to the condensing preferences of the user .

Another variation illustrated in the exemplary scenario of involves the use of a memory buffer to present a component result to the application and or callback . For example in some scenarios the device service may directly return the data generated by a component to the application or callback but in other scenarios this may be undesirable e.g. where the data is voluminous . Therefore the component service may store the component result in a memory region that is accessible to the application and or callback e.g. a block of memory where a photo generated by a camera may be stored and may simply notify the application and or the callback of the memory address of the memory region so that the application and or callback may access the component result if so desired.

As a fifth variation of this third aspect the component service may communicate with the applications and or callbacks through many communications mechanisms. As one such example the component service may intermittently communicate with the applications and or callbacks or may maintain a communication channel throughout the life of the component request . For example in the exemplary scenario of the local server component may be configured to receive the component requests during a communication session initiated by the application executing within the virtual environment e.g. a hypertext transport protocol HTTP session initiated with the webserver may maintain the communication session until the completion of the component request and may notify the application of the completion of the component request via the communication session before terminating the communication session with the application . Moreover the application may be permitted to query the server for status updates regarding the component request to deliver requests to abort the component request etc.

As a sixth variation of this third aspect in addition to servicing the applications executing within the virtual environment the component service may initiate interactions with the components of the device on behalf of other processes. As a first such example a component service may upon receiving a component request from an application executing outside of the virtual environment on the device store the callback associated with the component request and the application and send the component request to the component on behalf of the application . For example as illustrated in the exemplary scenario of rather than interacting directly with the components a native application may opt to interact with the components through the component service and the component service may accept and process such component requests equivalently to those initiated by applications executing within the virtual environment .

As a second example of this sixth variation of this third aspect the component service may also invoke component requests for the components of the device on behalf of remote processes. For example upon receiving a component request from a remote process executing on a second device the component service may store the callback associated with the component request and the remote application and send the component request to the component and upon detecting a completion of a component request associated with a remote process the component service may invoke the callback on behalf of the remote application. Moreover the callback of the remote application may be invoked within the virtual environment e.g. as a sandbox isolation construct . Alternatively or additionally the remote application may invoke the component request on behalf of the application executing within the virtual environment i.e. rather than submitting the component request directly to the component service the application may interact with a cloud service on a remote server and the cloud service may contact the component service to initiate the component request on behalf of the application executing within the virtual environment . In some such scenarios the component service may only accept and process requests on behalf of trusted remote processes. For example the application may comprise at least one credential e.g. a username and password and the component request received from the remote process including at least one credential authenticating the component request on behalf of the application and the component service may before sending the component request to the component authenticate the credential of the component request . Those of ordinary skill in the art may include many such features in implementations of the techniques provided herein.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB Firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

