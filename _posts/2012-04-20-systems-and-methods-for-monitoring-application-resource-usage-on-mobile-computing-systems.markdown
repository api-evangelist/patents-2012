---

title: Systems and methods for monitoring application resource usage on mobile computing systems
abstract: A computer-implemented method for monitoring application resource usage on mobile computing systems may include 1) identifying a mobile computing system that is configured to execute one application at a time as a foreground application, 2) identifying a request to determine a resource consumption level of an application on the mobile computing system, 3) identifying, in response to the request, at least one frequency level at which a processor of the mobile computing system operates while the application executes as the foreground application, and 4) determining, based on the identified frequency level, the resource consumption level of the application. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09118520&OS=09118520&RS=09118520
owner: Symantec Corporation
number: 09118520
owner_city: Mountain View
owner_country: US
publication_date: 20120420
---
With the rise of mobile computing consumers may now perform traditional computing tasks anywhere. Mobile computing devices such as cellular telephones tablet computers e book readers and the like have become a ubiquitous part of everyday life. However the continuing drive for higher performance may place increasing pressure on limited resources such as battery life even as the drive for smaller form factors and lower costs may limit battery capacities.

Since the utility and reliability of mobile computing devices may depend in large part on battery life consumers may value mobile applications that consume relatively less battery energy. Unfortunately traditional mobile computing devices may provide no means for determining the impact of a given mobile application on the rate of battery energy consumption. Additionally traditional techniques for profiling the resource usage of applications on desktop computing devices may not be effective on many mobile platforms. For example traditional techniques for profiling the resource usage of applications on desktop computing devices may monitor applications for the percentage of processor time each application consumes. However these traditional techniques may not apply on mobile computing platforms that devote the majority of processor time to a single foreground application. Accordingly the instant disclosure identifies and addresses a need for additional and improved systems and methods for monitoring application resource usage on mobile computing systems.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for monitoring application resource usage on mobile computing systems by determining frequency levels at which a processor of a mobile computing device operates while a specified application executes as the foreground application on the mobile computing device. In one example a computer implemented method for monitoring application resource usage on mobile computing systems may include 1 identifying a mobile computing system that is configured to execute one application at a time as a foreground application 2 identifying a request to determine a resource consumption level of an application on the mobile computing system 3 identifying in response to the request at least one frequency level at which a processor of the mobile computing system operates while the application executes as the foreground application and 4 determining based on the identified frequency level the resource consumption level of the application.

In some examples identifying the frequency level may include identifying an amount of time during which the processor of the mobile computing system operates at each of a plurality of frequency levels. In these examples identifying the frequency level may additionally include identifying a percentage of time during which the processor of the mobile computing system operates at each of the plurality of frequency levels based on the amount of time during which the processor of the mobile computing system operates at each of the plurality of frequency levels.

In some embodiments identifying the frequency level may include 1 identifying a first amount of time in which the processor of the mobile computing system has operated at the frequency level when the mobile computing system begins executing the application as the foreground application identifying a second amount of time in which the processor of the mobile computing system has operated at the frequency level when the mobile computing system ceases executing the application as the foreground application and 3 identifying a difference between the second amount of time and the first amount of time. In these embodiments identifying the frequency level may additionally include 1 identifying a third amount of time in which the processor of the mobile computing system has operated at the frequency level when the mobile computing system begins again executing the application as the foreground application 2 identifying a fourth amount of time in which the processor of the mobile computing system has operated at the frequency level when the mobile computing system ceases again executing the application as the foreground application 3 identifying an additional difference between the second amount of time and the first amount of time and 4 averaging the difference with the additional difference.

In one example identifying the frequency level may include reading the frequency level from a proc file system of the mobile computing system. Additionally or alternatively identifying the frequency level may include requesting the frequency level from a service of the mobile computing system.

In some examples determining the resource consumption level of the application may include determining a power consumption level of the application. In at least one example the computer implemented method may also include providing the resource consumption level of the application to a profile of the application for display in an application store.

In one embodiment a system for implementing the above described method may include 1 an identification module programmed to identify a mobile computing system the mobile computing system being configured to execute one application at a time as a foreground application 2 a request module programmed to identify a request to determine a resource consumption level of an application on the mobile computing system 3 a frequency module programmed to identify in response to the request at least one frequency level at which a processor of the mobile computing system operates while the application executes as the foreground application and 4 a determination module programmed to determine based on the identified frequency level the resource consumption level of the application. The system may also include at least one processor configured to execute the identification module the request module the frequency module and the determination module.

In some examples the above described method may be encoded as computer readable instructions on a computer readable storage medium. For example a computer readable storage medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 identify a mobile computing system that is configured to execute one application at a time as a foreground application 2 identify a request to determine a resource consumption level of an application on the mobile computing system 3 identify in response to the request at least one frequency level at which a processor of the mobile computing system operates while the application executes as the foreground application and 4 determine based on the identified frequency level the resource consumption level of the application.

As will be explained in greater detail below by determining frequency levels at which a processor of a mobile computing device operates while a specified application executes as the foreground application on the mobile computing device the systems and methods described herein may calculate estimate and or otherwise indicate the expected rate of battery energy consumption of the specified application. By providing information about the rate of battery energy consumption of applications these systems and methods may allow users to identify more battery efficient applications thereby potentially extending the battery life of mobile computing devices.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The following will provide with reference to detailed descriptions of exemplary systems for monitoring application resource usage on mobile computing systems. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . Detailed descriptions of exemplary frequency distributions for processors of mobile computing devices will be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In addition and as will be described in greater detail below exemplary system may include a frequency module programmed to identify in response to the request at least one frequency level at which a processor of the mobile computing system operates while the application executes as the foreground application. Exemplary system may also include a determination module programmed to determine based on the identified frequency level the resource consumption level of the application. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as computing device illustrated in computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device e.g. a mobile computing device configured to execute a foreground application .

In one embodiment one or more of modules from may when executed by at least one processor of computing device facilitate computing device in monitoring application resource usage on mobile computing systems. For example and as will be described in greater detail below one or more of modules may cause computing device to 1 identify a computing device that is configured to execute one application at a time as a foreground application e.g. foreground application 2 identify a request to determine a resource consumption level of foreground application on computing device 3 identify in response to request at least one frequency level at which a processor of computing device operates while foreground application executes as the foreground application and 4 determine based on the identified frequency level resource consumption level of foreground application .

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation cellular phones tablets e book readers personal digital assistants PDAs multimedia players global positioning systems embedded systems laptops desktops servers combinations of one or more of the same exemplary computing system in or any other suitable computing device.

As illustrated in at step one or more of the systems described herein may identify a mobile computing system that is configured to execute one application at a time as a foreground application. For example at step identification module may as part of computing device in identify computing device that is configured to execute one application at a time as a foreground application e.g. foreground application .

As previously noted a mobile computing system may include a mobile phone a tablet computer an e book reader a personal digital assistant and the like. The phrase mobile computing system may also generally refer to any other portable device and or other computing device that may operate on battery power and or that may execute one application at a time in the foreground. Mobile computing systems may include GPS devices messaging devices and various other types of mobile devices.

As used herein the phrase foreground application may refer to any application that is currently displayed and or currently prominently displayed on the mobile computing system. Additionally or alternatively the phrase foreground application may refer to an application that is both currently displayed and currently executing. In some examples the phrase foreground application may refer to an application that has the highest execution priority. In some examples the phrase foreground application may exclude system services system interface programs and or interface applications which temporarily overlay and or share screen space with the current foreground application. In another example the phrase foreground application may refer to any application currently displayed by the mobile computing system. Additionally or alternatively the phrase foreground application may refer to an application whose display consumes more than half of the display area of the mobile computing device.

In some examples the mobile computing system may be further configured with a foreground application display area for displaying the foreground application. The foreground application display area may be configured to only display the foreground application when a foreground application is running in the foreground. Additionally or alternatively the foreground application display area may also display global system interface elements e.g. menus soft keyboards taskbars docking bars status bars etc. .

Identification module may identify the mobile computing system in any suitable manner. For example identification module may identify the mobile computing system by executing on the mobile computing system. Additionally or alternatively identification module may identify the mobile computing system by identifying a simulation of the mobile computing system.

Returning to at step one or more of the systems described herein may identify a request to determine a resource consumption level of an application on the mobile computing system. For example at step request module may as part of computing device in identify request to determine resource consumption level of foreground application on computing device .

Request module may identify the request in any suitable context. For example request module may identify the request by receiving a message and or identifying a configuration file specifying the application. Additionally or alternatively request module may identify the request by determining that the application has begun execution in the foreground.

As used herein the phrase resource consumption level may refer to any suitable metric of resource consumption. For example the phrase resource consumption level may refer to power consumption e.g. rate of energy consumption and or an expected and or estimated power consumption. Additionally or alternatively the phrase resource consumption level may refer to processor usage. In some examples the phrase resource consumption level may refer to a relative amount of resource consumption a tier of resource consumption and or a resource consumption ranking. In at least one example the phrase resource consumption level may refer to a rate of battery energy consumption and or a rate of battery energy consumption while the mobile computing system is powered by a battery.

At step in one or more of the systems described herein may identify in response to the request at least one frequency level at which a processor of the mobile computing system operates while the application executes as the foreground application. For example at step frequency module may as part of computing device in identify in response to request at least one frequency level at which processor of computing device operates while foreground application executes as the foreground application.

As used herein the phrase frequency level may refer to a frequency at which a processor is running a clock rate of a processor and or any configuration of a processor and or set of processors that affects the rate at which the processor consumes energy and or causes a mobile computing device to consume energy. In some examples the mobile computing system may be configured to maintain a lowest possible frequency for executing a foreground application e.g. in order to conserve battery energy without degrading performance .

Frequency module may identify the frequency level in any of a variety of ways. For example frequency module may identify the frequency level by identifying an amount of time during which the processor of the mobile computing system operates at each of a plurality of frequency levels. For example the processor may be configurable to run at two three or more frequencies. Accordingly frequency module may identify an amount of time during which the processor of the mobile computing system operates at one of the frequency levels e.g. the highest frequency level . Additionally or alternatively frequency module may identify an amount of time during which the processor of the mobile computing system operates at each of the plurality of frequency levels and then identify an aggregate frequency level e.g. an average frequency weighted by time spent on each frequency level .

Additionally in some examples frequency module may identify the frequency level by identifying a percentage of time during which the processor of the mobile computing system operates at each of the plurality of frequency levels based on the amount of time during which the processor of the mobile computing system operates at each of the plurality of frequency levels. For example frequency module may identify the total amount of time during which the processor operates and divide the amount of time during which the processor operates at each of the plurality of frequency levels by the total amount of time to obtain a percentage of time for each of the plurality of frequency levels.

In some examples frequency module may identify the frequency level by 1 identifying a first amount of time in which the processor of the mobile computing system has operated at the frequency level when the mobile computing system begins executing the application as the foreground application 2 identifying a second amount of time in which the processor of the mobile computing system has operated at the frequency level when the mobile computing system ceases executing the application as the foreground application and 3 identifying a difference between the second amount of time and the first amount of time. For example frequency module may identify historical processor frequency information when the foreground application is launched brought into the foreground and or resumed. Frequency module may again identify historical processor frequency information when the foreground application is terminated taken from the background and or suspended. By comparing the historical processor frequency information at the beginning and end of the execution of the foreground application frequency module may determine frequencies at which the processor operated while the foreground application executed. In some examples frequency module may sample the historical processor frequency information some time after the foreground application is brought into the foreground and or some time before the foreground application leaves the foreground. Generally frequency module may sample the historical processor frequency information at any two points of time between which the foreground application has executed continuously in the foreground.

Additionally in some examples frequency module may take additional samples to ensure an accurate representation of the effect of the application on the frequency level of the processor. For example frequency module may 1 identify a third amount of time in which the processor of the mobile computing system has operated at the frequency level when the mobile computing system begins again executing the application as the foreground application 2 identify a fourth amount of time in which the processor of the mobile computing system has operated at the frequency level when the mobile computing system ceases again executing the application as the foreground application 3 identify an additional difference between the second amount of time and the first amount of time and 4 average the difference with the additional difference. By observing the apparent relative impact of the application on the frequency level of the processor over multiple periods of time and aggregating these observations e.g. by averaging the observations frequency module may improve the accuracy and or reliability of future determinations about the resource consumption level of the application.

Frequency module may identify the frequency level in any of a variety of ways. For example frequency module may read the frequency level from a proc file system of the mobile computing system. As used herein the phrase proc file system may refer to any file system that provides system information e.g. process information processor information etc. via a file based interface.

In some examples frequency module may identify the frequency level by requesting the frequency level from a service of the mobile computing system. For example frequency module may send a message to the service and or access an application programming interface of the service to retrieve the frequency level e.g. the amount time spent by the processor at one or more frequency levels .

Returning to at step one or more of the systems described herein may determine based on the identified frequency level the resource consumption level of the application. For example at step determination module may as part of computing device in determine based on the identified frequency level the resource consumption level of foreground application .

Determination module may determine the resource consumption level of the application in any suitable manner. For example as mentioned earlier determination module may determine a power consumption level of the application based on the identified frequency level and or levels at which the processor executed. In some examples determination module may determine the power consumption level by applying the relative amount of time spent by the processor at each frequency level to a known rate of energy consumption for each frequency level e.g. as specified in a processor database and or as observed by one or more of the system described herein over time . Additionally or alternatively determination module may determine the power consumption level of the application by estimating the expected power consumption level of the application based on the frequency level e.g. by assuming a linear relationship between the frequency level and the rate of energy consumption . In some examples determination module may additionally project the rate of energy consumption of the application by combining a projection of processor related energy consumption with a projection of energy consumption based on one or more additional functions of the application. For example determination module may determine that the application uses one or more radio transmission and or reception devices e.g. global positioning devices WLAN devices BLUETOOTH devices etc. and determine an expected rate of energy consumption by these devices.

In some examples determination module may additionally provide and or display the resource consumption level of the application. For example determination module may generate a report of the resource consumption level of the application. Additionally or alternatively determination module may display the resource consumption level of the application to a user of the mobile computing system. In some examples determination module may transmit the resource consumption level of the application to a developer a publisher and or a vendor of the application.

In some examples determination module may provide the resource consumption level of the application to an application store. For example determination module may provide the resource consumption level of the application to a profile of the application for display in the application store. In this example determination module may provide the resource consumption level to the application store in any suitable format and the application store may display the resource consumption level in any suitable format. For example the application store may display an estimate of how quickly the application will drain a battery. As another example the application store may display a rating e.g. a score a number of stars etc. for the resource consumption level. In some examples the application store may compare the resource consumption level of the application with one or more additional applications in the application store. For example the application store may recommend the application over an alternative application e.g. the alternatively application being in the same category and or having the same functionality as the application based on the resource consumption level and or display the relative resource consumption levels of the application and the alternative application side by side. In some examples determination module may identify an average resource consumption profile of a plurality of applications.

As explained above by determining frequency levels at which a processor of a mobile computing device operates while a specified application executes as the foreground application on the mobile computing device the systems and methods described herein may calculate estimate and or otherwise indicate the expected rate of battery energy consumption of the specified application. By providing information about the rate of battery energy consumption of applications these systems and methods may allow users to identify more battery efficient applications thereby potentially extending the battery life of mobile computing devices.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation random access memory RAM read only memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an ISA PCI PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation SCSI host adapters USB host adapters IEEE 1394 host adapters SATA and eSATA host adapters ATA and PATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. The phrase computer readable storage medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable storage media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. CD or DVD ROMs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable storage medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable storage medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an application specific integrated circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent network attached storage NAS devices configured to communicate with servers and using various protocols such as NFS SMB or CIFS.

Servers and may also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for monitoring application resource usage on mobile computing systems.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable storage media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may transform a computing device into a device for monitoring application resource usage on mobile computing systems.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

