---

title: Method and system for anonymizing data during export
abstract: The present invention refers to a computer-implemented method of anonymizing data of a database (), wherein the method comprises the following steps:


url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08949209&OS=08949209&RS=08949209
owner: Software AG
number: 08949209
owner_city: Darmstadt
owner_country: DE
publication_date: 20120524
---
This application claims priority to EP 12 164 569.1 filed 18 Apr. 2012 the entire contents of each of which are hereby incorporated by reference.

The present invention relates to a method and system for anonymizing data of a database in particular during exporting the data from the database.

Nowadays typical software products employed by individuals or enterprises are very complex and oftentimes bugs or performance issues are encountered only after the software has been used for a certain time. Once encountered the user will report the bug to the provider of the software product e.g. to the provider s support department in order for the bug to be fixed.

In order for the software provider to reproduce the encountered bug it is often necessary that the software provider operates on the actual data which was processed by the software product when the bug occurred because the issue to be reproduced highly depends on the structure and validity of the user s data running through the buggy software product. However the users are often not willing to send their data to the software provider s support department if the data is confidential and must not be seen by the software provider.

In the prior art certain products are known which might be used in this context. For example Oracle s so called Data Pump enables a user to plug in a self written function into Oracle s database system to modify the data Data Pump Data Remapping . Another example is the product ARTS business architect of applicant which provides a report functionality internal java script functions based on a public API to make the data of a user s ARTS installation anonymous. As a further example the user might export his data from his software installation for example as an XML file which could then be transformed with the help of XSLT transformations. While the above approaches could be used by the user to obscure the actual data before it is sent to the software provider i.e. to anonymized the confidential data these approaches are not very flexible to changing requirements and also involve a lot of effort since the way how the data should be modified must in some cases be hard coded by the user in a self written function and heavily relies on the user s database schema.

Furthermore US 2011 0060905 A1 discloses systems and methods for providing anonymized user profile data. In this disclosure confidential user data such as names and addresses are anonymized in order to be usable for personalized advertising. While the anonymized data might be helpful for tailoring advertisements to the user the anonymized data is obscured in such a way that it is not usable in the context of the present invention since the anonymized data does not allow to reproduce bugs occurred in a user s software product.

It is therefore the technical problem underlying the present invention to provide an approach for anonymizing data in such a manner that confidential parts thereof remain securely protected while the anonymized data can still be investigated in a meaningful manner thereby at least partly overcoming the above explained disadvantages of the prior art.

This problem is according to one aspect of the invention solved by a computer implemented method of anonymizing data of a database. In the embodiment of claim the method comprises the following steps 

Within the scope of the present invention the term anonymizing is to be understood in the sense of converting a given piece of data into a form which does not allow to derive the original content of the data.

Accordingly the above embodiment defines an approach for anonymizing data in a particularly intelligent manner namely such that the data yet anonymized can still be investigated and analysed in a meaningful manner. This is because the method preserves the structure of the original data while anonymizing the data content.

As s simple example consider a data record in the database whose structure defines two data fields name and address. The content of the name field is John Doe and the content of the address field is Elm Street . The anonymizing process of the present invention produces an anonymized data record in which the name John Doe is anonymized e.g. to ABC and the address Elm Street is anonymized e.g. to XYZ. Nevertheless the present invention preserves the structure of the original data record i.e. it is still possible to identify that the anonymized data record comprises a name field and an address field. This way the present invention departs from known approaches such as disclosed in the above cited US 2011 0060905 A1 in which a name address tuple is anonymized into a single encrypted identifier i.e. the structure of the original data is lost during the anonymizing process.

In one aspect of the present invention the step of anonymizing is performed during the step of exporting so that no confidential content is stored outside of the database during the exporting process. Accordingly the anonymizing functionality is encapsulated within the export functionality which has two advantages firstly the anonymizing algorithm cannot be changed or manipulated from the outside. Secondly the confidential data does not leave the database in such a manner that it would be persistently or temporarily stored outside of the database.

In another aspect of the invention the step of anonymizing may comprise generating a random encryption key anonymizing at least part of the content to produce at least one anonymized data record using the random encryption key and deleting the random encryption key. Accordingly The means for anonymizing the content the encryption key is exclusively generated for each particular run of the anonymizing process and destroyed immediately afterwards. This ensures that the anonymized data cannot be decrypted in order to derive the original data.

Moreover the method may comprise the further step of selecting which part of the content is to be anonymized wherein the step of anonymizing comprises anonymizing only the selected content. Accordingly not all of the content of a given data record is necessarily anonymized but the part to be anonymized may be selected e.g. by a user . In particular if the data record comprises a mix of confidential and uncritical content this aspect greatly increases the performance of the anonymizing process since only the necessary minimum of content might be anonymized. This in turn saves processing resources of the underlying system executing the anonymizing process.

Preferably the step of anonymizing is performed in a deterministic manner so that the anonymizing of a given part of the content always results in the same anonymized content. This is an important characteristic of some embodiments of the present invention and ensures that relationships between the data fields of the data records are preserved during the anonymizing process as will be explained in more detail in the detailed description. To achieve the above described deterministic behavior the step of anonymizing may be performed using a cryptographic hash function preferably the Secure Hash Algorithm SHA . Alternatively or additionally the step of anonymizing may be performed using a random anonymizing process and using a cache to remember already created anonymized content which will be explained in more detail further below.

According to yet another aspect of the invention the content to be anonymized adheres to at least one data type and wherein the step of anonymizing preserves the validity of the anonymized content in accordance with the at least one data type. For example if a data field of the original data record stores email addresses it is ensured that also the anonymized data record with the content of the email address being anonymized still indicates that the anonymized content relates to an email address.

The step of anonymizing may be performed using one or more predefined transformation rules which might be provided in the form of code annotations and or in the form of a configuration file in particular an XML file see the detailed description below .

The above aspects of the present invention are particularly advantageous if the at least one data record comprises confidential data wherein the corresponding anonymized data record is usable for being investigated while preserving the confidentiality of the confidential data. As will be explained in more detail further below the concepts of the present invention may in this way be used e.g. for a software product provider to analyze and investigate bugs in the software product without being able to see the actual confidential data of the user.

The present invention also refers to a system for anonymizing data of a database wherein the system comprises an exporter component adapted for exporting at least one data record from the database wherein the data record has a structure and comprises content an anonymizer component adapted for anonymizing at least part of the content to produce at least one anonymized data record wherein the anonymized data record has the same structure than the data record read from the database. Further advantageous modifications of embodiments of the system of the invention are defined in further dependent claims. Lastly the present invention might also be provided in the form of a computer program comprising instructions for implementing any of the methods disclosed herein.

In the following a presently preferred embodiment of the invention is described in the context of a user hereinafter also called customer running a software product provided by a software provider hereinafter also called vendor . The software product operates on data which is stored in a database. Within the scope of the present invention the term database refers to any means for storing data in an organized manner i.e. which may also be a file system. Preferably however a database comprises a data storage means and a processing logic adapted for receiving and processing requests and for returning the requested data records from the data storage means. In the present example the user observes a bug or other issue within the software product and wants to report the issue to the software provider in order for the bug to be fixed. However the software provider can only reproduce the bug based on the user s data. The present invention provides an advantageous approach for anonymizing the user s data before it is provided to the software provider thereby securing the data confidentiality for the user but still providing enough information to the software provider to inspect the issue in a meaningful manner. As will be apparent the concepts underlying the present invention may also be used in other scenarios and are not limited to the described use case of bug reporting.

As a simple example it is assumed that the database comprises data records having the following structure e.g. in a table named Customer 

As can be seen each of the data records i.e. the rows of the above table adheres to a predefined structure in that each data record comprises values for the following data fields ID Name Given name Date of birth ZIP code City and Street. The amount ordering and or format of the data fields within the data record define the structure of the data record while the actual values of the data fields are referred to as content .

In the above example an anonymizer component of the inventive system which may be an integral or separate component with respect to the exporter component anonymizes at least part of the original contents of the data records in order to produce an anonymized data record e.g. in the form of a document. In the above example the anonymized data record may look as follows 

As can be seen the content of the original data records has been anonymized i.e. it is not derivable from the anonymized data record but the anonymized data records still have the same structure than the original data records . This way the support team of the software provider is able to investigate the anonymized data in a meaningful manner since the relationships between the individual data fields are preserved in the anonymized data.

While the above example uses a relational database table for the original data records and a CSV based file format for the anonymized data records it will be appreciated that the present invention is not limited to these specific formats.

In order to save the structure of the data it is preferred to perform the anonymization in a deterministic manner i.e. the same input will always lead to the same output. In the above example this is reflected in that the first and third data record both have the Name Khin and thus the first and third anonymized data records also have the same anonymized value VCGFRE6 . The characteristic of a deterministic anonymization is important because the cause the of issue the customer faces might depend on how many objects have the same special value and might be there in the data for instance how many people are living in the same special street in the same city because there might be an issue in the software that occurs only if there are exactly more that 2people living in the same street . One way to achieve such a deterministic and anonymous value is to use a cryptographic hash function such as an mdor sha hash or any other known deterministic hash function.

Alternatively the present invention may employ random based value generators. In this case the property that the same input will always lead to the same output still has to be ensured. Accordingly the random based generators must remember the values they have already used for each input before. In other words once a certain data field is anonymized in a random fashion for the first time its anonymized random value is stored in a storage. If later the same data field needs to be anonymized again e.g. in a different data record the stored value is used thus ensuring the deterministic property. For example transformation rules for ID columns must produce the same values because they are often used in foreign key columns of dependent database tables to reference the parent table.

Typically the data records to be anonymized comprise data fields having a specific format or data type e.g. a name type an email type a zip code type and so on . For example the transformation rules employed in embodiments of the present invention for date values must save the validity for date values i.e. it is important to provide a range the generated values must not exceed. Ranges are also important for other data columns. It most probably would make no sense to have e.g. customer data with customers having a negative amount of orders or a billion orders. Another example for transformation rules are credit card numbers and email addresses. Here the format is very important to keep the validity of the anonymized data. Here values once anonymized also have to be stable if they should be processed a second time. However the present invention is not limited to a fixed set of transformation rules but is completely open to plug in customized transformation rules allowing it to meet all the business requirements of the software to which the solution might be attached.

In certain embodiments of the present invention the way how the data is anonymized is configurable. Preferably the invention will keep the data distribution of the original data repository per default. The transformations are all deterministic values once anonymized will be stable if they should be processed a second time . This gives the development department the possibility to research issues related to data distribution. However the danger of actually being able to guess the original data e.g. a city name out of the amount of persons related to this city might still exist. Therefore embodiments of the present invention may offer the possibility to configure some or all data fields to have totally randomized values after the transformation.

In summary embodiments of the present invention provide some or all of the following characteristics 

The exporting process starts in step and proceeds to step where the first data record labeled entity in is read from the database . If the export to be performed is not flagged as to be anonymized see above step the data record is written as is i.e. without any modification to the final exported data . Otherwise one or more transformation rules are executed on the data record to produce a corresponding anonymized data record see further below for examples which is then written to the final exported data . In step it is checked whether all data records have been processed. If not the method iterates again through step reading the next data record and so on. Finally the export stream is closed in step .

In the following example a GRC Customer uses several business control diagrams of a business process modeling software product to visualize individual risks occurring inside the company. The abbreviation GRC refers to Governance Risk Management and Compliance. This umbrella term designates an organization s approach across these three areas. Being closely related concerns governance risk and compliance activities are increasingly being integrated and aligned to some extent in order to avoid conflicts wasteful overlaps and gaps. While interpreted differently in various organizations GRC typically encompasses activities such as corporate governance enterprise risk management ERM and corporate compliance with applicable laws and regulations.

The customer will also maintain attributes at risk control and test definition objects containing values relevant for data protection. An exemplary business controls diagram is shown in . As can be seen the business control diagram comprises various objects such the Risk object named Sourcing risk the Control object named Sourcing control the Test Definition object named Sourcing test definition and the Organizational Unit object named Sourcing .

Each of the above mentioned objects has various attributes which are exemplarily shown in . As can be seen some attributes are rather uncritical such as last change or time of generation while others are comprise highly confidential content which has to be anonymized before the data is transferred to an entity outside of the company. Otherwise if the above information stored in the objects was revealed freely the receiving entity could derive exactly which risks are relevant for which organizational units inside the company. The receiving entity could also observe which tests will be applied to cover these risks and which employees are responsible. GRC also offer the possibility to quantify total amounts of losses which will cause damage to the company if the risk ever will occur. All this information has to be kept inside the company and would be a risk for itself if this information would be lost.

Therefore with the help of the present invention the customer is going to protect the data and anonymize the fields using certain predefined rules The Customer will take the original data set and modify it according the local law and individual requirements.

In the following exemplary transformation rules are presented and various exemplary transformations in accordance with these rules are shown in the following tables 

It is noted that the exemplary transformation rules shown in the above tables are not limited to the specific example described herein. Instead each transformation rule disclosed herein may be used on its own in any application scenario of the present invention.

Due to the fact that relations between objects will be kept and all system relevant fields such as object ids giuds or enumerations stay untouched the application will run consistently good. The performance will also be the same because the amount of data is equal.

Now the information inside the exemplary BCD Business Control Diagram of is anonymized as represented by the anonymized column in the above tables. All information about internal company risks activities and responsibilities are completely transformed but the original data characteristic i.e. the structure and relationships of the data is still available.

Let us assume that the customer has the following technical issue Due to an internal bug the creator of Objects with type RISK is not able to edit these objects after initial saving. Also the related Control Object cannot be edited by the creator of the assigned risk object.

The cause of this technical issue is that a customized internal rule does not contain an edit right for risk creators anymore. This was overseen during the customizing process.

With the data anonymized as explained above the technical expert can analyze the issue and help the customer without contact to its internal secret information. This is possible because the assignment between risk and creator user is still valid. The expert will search an object with the technical type RISK and has a look for the assigned user in the above example User . He will log in into the system with this User and analyze the issue without knowing anything about the original data.

As already mentioned before embodiments of the invention provide a graphical user interface GUI which besides the common options for data exporting purposes comprises a new check box element where the user can choose the anonymization of his export data feature with a single check action cf. .

The export method then takes the data from a data source for instance a DBMS and a set of transformation rules e.g. provided as a configuration file and applies the transformation rules to the data . The output is the export containing the data in anonymized form thereby obeying the validation criteria as defined in the transformation rules cf. and also .

The transformation rules may be implemented in various ways. For example if a programming language is used that supports annotations then one may introduce annotations to specify the constraints for the fields of the classes in the object model by annotating these fields. Thus the transformation rules might be compiled into the code as exemplarily shown in

Alternatively or additionally the transformation rules could as well be provided as a configuration file e.g. an XML file that the application would have to read in the file could be part of the deployment unit a jar file for instance as exemplarily shown in

Each transformation rule is preferably associated with a specific implementation class where the transformation step is implemented. For example consider an IntegerTransformer class to transform an integer value while satisfying the additional constraints you can pass as optional parameters such as min or max . Or consider domain specific transformer classes like EmailTransformer or CreditCardNumberTransformer to generate email values or valid credit card numbers for instance. Preferably there is a central Transformer class with a routine that takes an object as input and produces a transformed object as output after having applied the specific transformer implementation classes for all the annotated fields of the object as exemplarily shown in .

As already described it is important to keep determinism while anonymizing the data so that the same values from the original data source are transformed to the same anonymized values each time they are transformed. This is because the application might rely on redundancies so that the transformation algorithm must reflect this property. One way to achieve determinism is to use a deterministic function where it is applicable. This function has to ensure that for fields to be encrypted always the same result are obtained for the same input. Therefore certain embodiments will key the encryption key during execution and destroy it before finishing. Other fields which have to keep semantic e.g. Number range or sign fields will be anonymized by a deterministic algorithm. The more general approach is to remember the transformed value for each given original value. For the latter approach embodiments of the invention may use a cache storing the original value transformed value pairs. Because this might be very expensive in terms of main memory an eviction strategy may be chosen for the cache to spill the evicted pairs out to a temporary persistent store.

In view of the various aspects of the present invention disclosed herein the proposed method and system differs from the prior art mentioned further above at least in the following aspects 

Oracle s Data Pump enabling the customer to plug in a self written function to modify the data Data Pump Data Remapping has the following disadvantages the solution is not database system independent the way how the data should be modified must be hard coded in a self written function and relies on the user s database schema i.e. it is not generic from the application point of view data consistency will not be kept due to the fact that there is PLSQL code necessary the user has to have special skills to create and to modify this code extended functions are not integrated into the application itself so there is an additional step necessary and of course higher skills to execute this Oracle administrative tool.

ARTS business architect of applicant provides a report internal java script functions based on public API to make the data anonymous. However the following disadvantages might occur underlying original data will be modified by the report so a copy of data has to be made beforehand the solution is bound to the ARTS data model and it is hard coded in the report code i.e. not configurable here we have a dependency to the internal script language and the used API application programming interface there is an additional step necessary to be executed before anonymous data export the report has no context so it is not possible to process complex requirements like references over text field values higher skills necessary create and to modify this code i.e. it is not configurable it cannot be reused for other products.

Another example of the prior art described further above is transforming already exported data e.g. as XML file with the help of XSLT transformations. However this approach takes place after the export is done it will raise security issues again and has to be implemented against a proprietary xml scheme so no generic solution is possible this solution is also not user friendly because of the additional export step and higher skills are necessary to create and to modify the XSLT transformation.

In the following an exemplary operation of embodiments of the present invention is explained in the context of the following use cases 

Use Case 1 In order to reproduce bugs or performance issues customers report to their vendor s support department. It is often necessary to operate on the customer s data because the issue to be reproduced highly depends on the structure and validity of the customer s data. That said customers are often not willing to send their data to the vendor s support department. Making the data anonymous while exporting the data gives the customer the possibility to submit their data without the danger of actually disclosing it. The customer can produce the export directly as an option when starting the export functionality. He does not have to copy his data and making it anonymous before doing the export but as an integral part of the export functionality as an option. By making the solution configurable by providing a system of rules and by enabling specification of validators the solution obeys the rules of the application to save the consistency and validity of the data. The solution comes with a stable interface so that it can be used in different products. It is independent from a specific DBMS the application might use. The solution is also encapsulating the algorithm for anonymizing the data so this algorithm cannot be modified externally and so it is guaranteed that the export can be imported inside the vendors R D department. The solution uses a one way encryption which cannot be decrypted inside the vendors R D department thus the customer avoids the danger of disclosing the data.

Use Case 2 It is assumed that a software vendor has a customer which is a bank and maintains account data with the software. This customer faces an issue with the software that depends on the state of his data not the actual values themselves but on the relationships between the data entities i.e. the structure of the data. Because of data protection rules sometimes enforced by law the customer might be not willing or not entitled to send his data to the vendor so the vendor is not able to reproduce the issue within the software product. With the present invention the customer has the possibility to produce an anonymized data export with one click so that the exported data has still the original structure and validity but cannot be recovered by anyone. This anonymized data export gives the vendor the possibility to reproduce the reported issue inside his development department.

Use Case 3 In complex software environments where different software components interact in a complex manner so that it is not possible to mimic the customer s scenario with reasonable efforts from the support organization of the software vendor in order to analyze eventually the software issue the customer reported or just because the software might be heavy customized as for instance in case of enterprise resource planning software installations and is supposed to run properly merely in the customer s environment it is possibly more reasonable to replicate the data from the customer s productive system to his test system where it can be subject to be analyzed in isolation and without disturbing the productive system. The data in the test system can be made anonymous during replication and data that references some data in external systems such as hyperlinks IP addresses file system shares can be adapted to refer to other addresses available in the test system.

Use Case 4 Another scenario is that of collecting statistical information. For instance a company having subsidiaries all across the world intends to analyze the performance of the processes that are executed in each subsidiary without violating national laws regarding data privacy protection or without disobeying codetermination rules by the work councils. Further it is desired to collect certain key performance indicators e.g. throughput times or number and kind of used application systems and such on without having information about involved persons inside the data. Thus it would make sense to anonymize the data where the information requiring protection is anonymized and the data that will be subject to become analyzed would be kept unanonymized.

In summary embodiments of the present invention propose a selective data anonymizing mechanism in particular for communicating with a support unit. The user communicating with the support unit selects the data fields that should be anonymized but in doing so the relations between the different fields are maintained. This allows the support unit to analyze a process for bugs that occur with certain data structures without having access to sensitive confidential data. Discreet transformations are used to ensure that the transformed data remains consistent. A random encryption key is generated to anonymize data and it is destroyed once the data has been anonymized to ensure that it cannot be recovered.

It will be appreciated that as used herein the terms system subsystem service module program logic programmed logic circuitry and the like may be implemented as any suitable combination of software hardware firmware and or the like. These system may include for example processing resources such as for example at least one processor and a memory that may at least partially control software and or other modules etc. It also will be appreciated that the storage locations repositories herein may be any suitable combination of disk drive devices memory locations solid state drives CD ROMs DVDs tape backups storage area network SAN systems and or any other appropriate non transitory tangible computer readable storage medium. For instance data may be exported to a non transitory computer readable storage medium. It also will be appreciated that the techniques described herein may be accomplished by having at least one processor execute instructions that may be tangibly stored on a non transitory computer readable storage medium. Similar statements apply with respect to clients servers and or other elements in various network arrangements.

