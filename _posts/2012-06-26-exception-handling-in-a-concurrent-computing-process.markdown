---

title: Exception handling in a concurrent computing process
abstract: A system initiates multiple instances of a concurrent computing process, establishes a communication channel among the multiple instances, initiates execution of a computational job on the multiple instances, detects an interrupt request on one of the multiple instances, and terminates execution of the computational job while maintaining communication among the multiple instances via the communication channel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08863130&OS=08863130&RS=08863130
owner: The MathWorks, Inc.
number: 08863130
owner_city: Natick
owner_country: US
publication_date: 20120626
---
This application is a continuation of U.S. patent application Ser. No. 11 880 418 filed Jul. 19 2007 which is a continuation of U.S. patent application Ser. No. 11 402 748 filed Apr. 12 2006 the entire content of which is incorporated by reference herein.

The present application generally relates to a concurrent computing process and more specifically to exception handling in the concurrent computing process.

MATLAB is a product of The MathWorks Inc. of Natick Ma. which provides engineers scientists mathematicians and educators across a diverse range of industries with an environment for technical computing applications. MATLAB is an intuitive high performance language and technical computing environment that provides mathematical and graphical tools for mathematical computation data analysis visualization and algorithm development. MATLAB integrates numerical analysis matrix computation signal processing and graphics in an easy to use environment where problems and solutions are expressed in familiar mathematical notation without traditional programming. MATLAB is used to solve complex engineering and scientific problems by developing mathematical models that simulate the problem. A model is prototyped tested and analyzed by running the model under multiple boundary conditions data parameters or just a number of initial guesses. In MATLAB one can easily modify the model plot a new variable or reformulate the problem in a rapid interactive fashion that is typically not feasible in a non interpreted programming such as Fortran or C.

As a desktop application MATLAB allows scientists and engineers to interactively perform complex analysis and modeling in their familiar workstation environment. With many engineering and scientific problems requiring larger and more complex modeling computations accordingly become more resource intensive and time consuming. However a single workstation can be limiting to the size of the problem that can be solved because of the relationship of the computing power of the workstation to the computing power necessary to execute computing intensive iterative processing of complex problems in a reasonable time. For example a simulation of a large complex aircraft model may take a reasonable time to run with a single computation with a specified set of parameters. However the analysis of the problem may also require the model be computed multiple times with a different set of parameters e.g. at one hundred different altitude levels and fifty different aircraft weights to understand the behavior of the model under varied conditions. This would require five thousand computations to analyze the problem as desired and the single workstation would take an unreasonable or undesirable amount of time to perform these simulations. Therefore it is desirable to perform a computation concurrently using multiple workstations when the computation becomes so large and complex that it cannot be completed in a reasonable amount of time on a single workstation.

Applications that are traditionally used as desktop applications such as MATLAB need to be modified to be able to utilize the computing power of concurrent computing such as parallel computing and distributed computing. Each machine or workstation needs to have its local copy of the application and between the different instances of the application there needs to be a way to communicate and pass messages between the machines and workstations so that the multiple machines or workstations in the concurrent computing environment can collaborate with each other.

One example of a message passing method that establishes a communication channel between machines or workstations is Message Passing Interface MPI . MPI is a standard for an interface for message passing that has been used between parallel machines or workstations in concurrent computing systems. In conventional concurrent computing systems computing applications which make use of MPI communications must be launched using a launcher program usually called mpirun or mpiexec . An example of the syntax for calling mpirun is as follows. mpirun np

Once an application has been launched using the above MPI method on a concurrent computing system and an error occurs the default behavior is to abort all the parallel processes immediately and disconnect the communication channel established between the multiple machines and workstations. This behavior is not desirable as connections need to be re established before concurrent computing can be utilized again.

According to one aspect a method may include initiating a group of instances of a concurrent computing process establishing a communication channel among the group of instances to form a collaboration for execution of a computational job on the group of instances detecting an interrupt request on one of the group of instances and terminating execution of the computational job while maintaining communication among the group of instances via the communication channel.

According to another aspect a computer readable medium may store computer executable instructions for receiving with an instance a portion of a computational job causing a communication channel to be established with one or more other instances initiating execution of the portion of the computational job with the instance and terminating execution of the portion of the computational job in response to an interrupt request while maintaining communication with the one or more other instances via the communication channel.

According to still another aspect a system may include one or more devices to initiate a group of instances of a concurrent computing process establish a communication channel among the group of instances to form a collaboration for execution of a computational job on the group of instances detect an interrupt request on one of the group of instances terminate execution of the computational job while maintaining communication among the group of instances via the communication channel and return the group of instances to a state prior to communication of data between the group of instances.

According to a further aspect a system may include means for initiating a group of instances of a concurrent computing process means for establishing a communication channel among the group of instances means for initiating execution of a computational job on the group of instances means for detecting an interrupt request on one of the group of instances and means for terminating execution of the computational job while maintaining communication among the group of instances via the communication channel.

The following illustrative embodiments will be described solely for illustrative purposes relative to a MATLAB based technical computing environment. Although the illustrative embodiment will be described relative to a MATLAB based application one of ordinary skill in the art will appreciate that the present invention may be applied to parallel or distributed processing of technical computing tasks with other technical computing environments such as technical computing environments using software products of LabVIEW or MATRIXx from National Instruments Inc. or Mathematica from Wolfram Research Inc. or Mathcad of Mathsoft Engineering Education Inc. or Maple from Maplesoft a division of Waterloo Maple Inc.

The memory may comprise a computer system memory or random access memory such as DRAM SRAM EDO RAM etc. The memory may comprise other types of memory as well or combinations thereof. A user may interact with the computing device through a visual display device such as a computer monitor which may include a user interface . The computing device may include other I O devices such a keyboard and a pointing device for example a mouse for receiving input from a user. Optionally the keyboard and the pointing device may be connected to the visual display device . The computing device may include other suitable conventional I O peripherals. The computing device may further comprise a storage device such as a hard drive or CD ROM for storing an operating system and other related software and for storing executable process such as parallel computing with MATLAB or distributed computing with MATLAB . Executable process can be but is not limited to an application a program a module or a script. Executable process may include a concurrent computing environment to enable concurrent computing on the computing device . Executable process can also include a communication interface such as MPI or other suitable interface for setting up a communication channel with another computing device to form a collaboration discussed later . One of ordinary skill in the art will appreciate that communication interface can be adapted to be included as part of the executable process or it can be a stand alone application module script or program that responds to calls from executable process such as communication interface . Additionally the operating system and executable process can be run from a bootable CD such as for example KNOPPIX a bootable CD for GNU Linux.

Additionally the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. Moreover the computing device may be any computer system such as a workstation desktop computer server laptop handheld computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the MacOS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein.

The concurrent computing client can be a technical computing software application that provides a technical computing and or graphical modeling environment for generating block diagram models and to define mathematical algorithms for simulating models. The concurrent computing client may include all or a portion of the functionality provided by the stand alone desktop application of MATLAB . Additionally the concurrent computing client can be any of the software programs available in the MATLAB product family. Furthermore the concurrent computing client can be a custom software program or other software that accesses functionalities of software programs in the MATLAB product family via an interface such as an application programming interface or by other means. One of ordinarily skill in the art will appreciate the various combinations of client types may access the functionalities of the system.

In one embodiment of the present invention concurrent computing client is also a concurrent computing lab. In such a configuration communication channels are setup among all the concurrent computing labs concurrent computing client and concurrent computing labs A N . Each of the concurrent computing labs including the concurrent computing client has its local copy of a computer program that is executed in the corresponding concurrent computing labs so there is no main concurrent computing lab that distributes executions to the other concurrent computing labs. The concurrent computing client will additionally have the functionality to accept inputs and or commands from a user related to the computer program using a tool such as an Integrated Development Environment IDE . The concurrent computing client and concurrent computing labs A N can be configured to perform distributed computing or parallel computing.

In one embodiment of the present invention functions can be defined by the concurrent computing client with an application programming interface and or programming language representing a technical computing task to be executed by either a technical computing environment local to the client or remote on the workstations A N. Tasks can be declared on a concurrent computing client and additionally organized into jobs. A job is a logical unit of activities or tasks that are processed and or managed collectively. A task defines a technical computing command such as a MATLAB command to be executed and the number of arguments and any input data to the arguments. A job is a group of one or more tasks.

In one aspect of the present invention a task can be directly distributed by the concurrent computing client to one or more computing resources such as workstations A N. A computing resource performs technical computing on a task and may return a result to the concurrent computing client .

In another aspect of the present invention the system includes a server which runs a scheduler . The scheduler can be a scheduler provided with executable process a generic scheduler or a third party scheduler that is designed and provided a company or individual that does not provide executable process . For example given that executable process is parallel computing with MATLAB by The MathWorks Inc. of Natick Mass. a third party scheduler can be MPI Exec LSF Condor Microsoft Compute Cluster Server or PBS. The server communicates over a network communication channel on the network to the workstations A N. One of ordinary skill in the art will appreciate that any of the workstations A N may include more than one technical computing lab to practice the present invention. Additionally client and server may also include one or more concurrent computing labs.

The scheduler comprises one or more application software components to provide for the automatic distribution of tasks from the concurrent computing client to one or more of the concurrent computing labs A N. The scheduler allows the concurrent computing client to delegate the management of task distribution to the scheduler . The scheduler may also set up for concurrent computing client the concurrent computing labs A N by using the information received from the concurrent computing client regarding the number of concurrent computing labs needed and other configuration information. Hence the concurrent computing client does not need to know the specifics of the concurrent computing labs A N. The concurrent computing client can define a function to submit the task to the scheduler and get a result of the task from the scheduler . As such the scheduler provides a level of indirection between the concurrent computing client and the concurrent computing labs A N.

This eases the distributed programming and integration burden on the concurrent computing client . The concurrent computing client does not need to have prior knowledge of the availability of the workstations A N. For multiple task submissions from the concurrent computing client the scheduler can manage and handle the delegations of the tasks to the concurrent computing labs A N and hold the results of the tasks on behalf of the concurrent computing client for retrieval after the completion of technical computing of all the tasks distributed by concurrent computing client . In an alternative implementation the concurrent computing labs A N may provide concurrent computing client directly the results of the tasks assigned to concurrent computing labs A N by the scheduler . The scheduler can further include an object oriented interface to provide control of delegating tasks and obtaining results in the system . The scheduler also provides an interface for managing a group of tasks collectively as a single unit called a job and on behalf of a concurrent computing client submitting those tasks making up the job and obtaining the results of each of the tasks until the job is completed. One of ordinarily skill in the art will recognize the functions and operations of the scheduler can be separated into various software components applications and interfaces. Additionally the functions and operations of the scheduler may reside on either the concurrent computing client or one of the concurrent computing labs A N instead of the server .

Additionally each of the client the server and the workstations A N can be running the same or different operating systems with the same or different processors. For example the client can be running Microsoft Windows the server can be running a version of Unix and the workstations A N a version of Linux. Alternatively each of the client the server and the workstations A N can be running Microsoft Windows . One of ordinary skill in the art will recognize the various combinations of operating systems and processors that can be running on any of the computing devices client server workstations A N .

In one embodiment of the present invention the collaboration is dynamic. In other words a user can modify or change the size of the collaboration by adding another computing resource. The user may be provided on the client with a user interface to modify or change the size of the collaboration or designate a specific resource to add or remove from the collaboration. In another embodiment of the present invention the client can forward the information to the scheduler which will determine a concurrent computing lab to be added or removed from the collaboration.

One of ordinary skill in the art will appreciate that a corresponding interruptible function call to Send can be achieved the same way as the interruptible Receive function call. Therefore an instance of the executable process can make a function call to an interruptible function call to receive or send messages. When an interrupt request is detected special actions can be taken to handle the interrupt request. In one embodiment of the present invention a function call is made when an interrupt request is detected to handle the interrupt request. For example using the same example from before when a function call to interruptibleReceive returns a result that indicates an interrupt is requested another function can be made to handle the interrupt request.

One of ordinary skill in the art will appreciate that there are many ways to handle an interrupt request. In one embodiment of the present invention the execution of the computational job is terminated in step while maintaining the communication among the multiple instances established by the communication channel . Additionally data sending and receiving can be terminated between instances in step . Furthermore pending data for sending or receiving by an instance can be flushed so that the instance can return to a previous state before the interrupt request is made.

After an interrupt has been requested each of the instances of the executable process executing on the different concurrent computing lab needs to flush its message queue. For example the following piece of MATLAB code can be run on all labs which have successfully been interrupted given that the executable process is parallel computing with MATLAB or distributed computing with MATLAB 

This code simply queries the incoming message queue to check for messages from any instance of the executable process and if there is a message it will be received and taken out of the queue. The act of receiving messages in one instance of the executable process may allow other instances of the executable process to proceed and eventually respond to the interrupt request. Therefore it is necessary to repeat the flushing procedure until all instances of the executable process have completed a round of flushing together.

Depending on the type of the interrupt request different actions can be taken and the instances can determine to return to a different previous state. In one embodiment of the present invention the instances are returned to a state prior to the sending and the receiving of the data between the instances in step . In another embodiment of the present invention the instances can be returned to a state prior to the execution of the computational job in step .

After the multiple instances start to execute a computational job a user can interrupt the computational job by requesting an interrupt. An interrupt can be requested using a specific button provided by a graphical user interface of the executable process . Alternatively an interrupt can be requested using one or more keystrokes on a keyboard such as using Ctrl C on the executable process . One of ordinary skill in the art will appreciate that there are many different ways the executable process and or the computing device can provide for a user to interrupt execution of a computational job on the multiple instances of the executable process . Once a user interrupt request is detected by an instance of the executable process a function call can be made to propagate the interrupt request to the rest of the instances in the collaboration . The following code shows a pseudo code for handling an interrupt request from a user.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

