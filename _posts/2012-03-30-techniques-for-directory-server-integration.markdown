---

title: Techniques for directory server integration
abstract: Techniques for directory server integration are disclosed. In one particular exemplary embodiment, the techniques may be realized as a method for directory server integration comprising setting one or more parameters determining a range of permissible expiration times for a plurality of cached directory entries, creating, in electronic storage, a cached directory entry from a directory server, assigning a creation time to the cached directory entry, and assigning at least one random value to the cached directory entry, the random value determining an expiration time for the cached directory entry within the range of permissible expiration times, wherein randomizing the expiration time for the cached directory entry among the range of permissible expiration times for a plurality of cached directory entries reduces an amount of synchronization required between cache memory and the directory server at a point in time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08370580&OS=08370580&RS=08370580
owner: Symantec Corporation
number: 08370580
owner_city: Mountain View
owner_country: US
publication_date: 20120330
---
This patent application is a continuation of U.S. patent application Ser. No. 12 768 364 filed Apr. 27 2010 which is hereby incorporated by reference herein in its entirety.

The present disclosure relates generally to directory data services and more particularly to techniques for directory server integration.

Directory data services may provide directory data for a variety of clients and applications including user authentication message delivery and the application of group policies. Directory data services may serve a plurality of applications in which high throughput is important such as for example enterprise class messaging security. Applications and or directory data services may use cached directory data to improve performance and to reduce a load on a directory server. However cached directory data may become stale or outdated if it is not refreshed by querying a directory server periodically. Updating cached directory data may place a large burden on a directory server causing significant performance degradation as large volumes of cached data are updated periodically. The performance degradation may in turn affect clients and applications using directory data services.

In view of the foregoing it may be understood that there may be significant problems and shortcomings associated with current directory server integration technologies.

Techniques for directory server integration are disclosed. In one particular exemplary embodiment the techniques may be realized as a method for directory server integration comprising setting one or more parameters determining a range of permissible expiration times for a plurality of cached directory entries creating in electronic storage a cached directory entry from a directory server assigning a creation time to the cached directory entry and assigning at least one random value to the cached directory entry the random value determining an expiration time for the cached directory entry within the range of permissible expiration times wherein randomizing the expiration time for the cached directory entry among the range of permissible expiration times for a plurality of cached directory entries reduces an amount of synchronization required between cache memory and the directory server at a point in time.

In accordance with other aspects of this particular exemplary embodiment the one or more parameters determining a range of permissible expiration times for a cached directory entry may comprise a maximum Time To Live parameter and a minimum Time To Live parameter.

In accordance with further aspects of this particular exemplary embodiment the one or more parameters determining a range of permissible expiration times for a cached directory entry may comprise a Time To Live parameter and a Time To Live variance parameter.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further comprise receiving a request for a directory entry determining whether a corresponding directory entry is expired based at least in part on the creation time and the at least one random value and in the event the directory entry is expired requesting the directory entry from the directory server.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further comprise determining that the directory server is inaccessible and providing the corresponding expired cached directory entry in response to the request.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further comprise determining whether the directory entry is cached and in the event the directory entry is not cached requesting the directory entry from the directory server.

In accordance with additional aspects of this particular exemplary embodiment the techniques may further comprise receiving a response from the directory server detecting a data integrity error based at least in part on the response from the directory server and providing an alert containing data integrity error information to an administrator.

In accordance with additional aspects of this particular exemplary embodiment the directory server may comprise an LDAP compliant directory server.

In accordance with additional aspects of this particular exemplary embodiment the request may be received from an electronic device which may comprise a gateway appliance separate from a host of the directory server.

In accordance with additional aspects of this particular exemplary embodiment the request may be received from an electronic device comprising a host sharing cache among a plurality of gateway appliances separate from a host of the directory server.

In accordance with additional aspects of this particular exemplary embodiment the request may be received from an electronic device comprising an electronic device which uses one or more cached directory entries to provide at least one of user authentication recipient validation address resolution and message routing.

In accordance with additional aspects of this particular exemplary embodiment the techniques may be realized as at least one processor readable storage medium for storing a computer program of instructions configured to be readable by at least one processor for instructing the at least one processor to execute a computer process for performing the method.

In another particular exemplary embodiment the techniques may be realized as an article of manufacture for directory server integration the article of manufacture comprising at least one processor readable medium. Instructions may be stored on the at least one medium wherein the instructions are configured to be readable from the at least one medium by at least one processor and thereby cause the at least one processor to operate so as to set one or more parameters determining a range of permissible expiration times for a plurality of cached directory entries create in electronic storage a cached directory entry from a directory server assign a creation time to the cached directory entry and assign at least one random value to the cached directory entry the random value determining an expiration time for the cached directory entry within the range of permissible expiration times wherein randomizing the expiration time for the cached directory entry among the range of permissible expiration times for a plurality of cached directory entries reduces an amount of synchronization required between cache memory and the directory server at a point in time.

In yet another particular exemplary embodiment the techniques may be realized as a system for directory server integration comprising one or more processors communicatively coupled to a network wherein the one or more processors are configured to set one or more parameters determining a range of permissible expiration times for a plurality of cached directory entries create a cached directory entry from a directory server assign a creation time to the cached directory entry and assign at least one random value to the cached directory entry the random value determining an expiration time for the cached directory entry within the range of permissible expiration times wherein randomizing the expiration time for the cached directory entry among the range of permissible expiration times for a plurality of cached directory entries reduces an amount of synchronization required between cache memory and the directory server at a point in time.

In accordance with additional aspects of this particular exemplary embodiment the one or more parameters determining a range of permissible expiration times for a cached directory entry may comprise a maximum Time To Live parameter and a minimum Time To Live parameter.

In accordance with additional aspects of this particular exemplary embodiment the one or more parameters determining a range of permissible expiration times for a cached directory entry may comprise a Time To Live parameter and a Time To Live variance parameter.

In accordance with additional aspects of this particular exemplary embodiment the one or more processors may further be configured to receive a request for a directory entry determine whether a corresponding directory entry is expired based at least in part on the creation time and the at least one random value and in the event the directory entry is expired request the directory entry from the directory server.

In accordance with additional aspects of this particular exemplary embodiment the one or more processors may further be configured to determine that the directory server is inaccessible and provide the corresponding expired cached directory entry in response to the request.

In accordance with additional aspects of this particular exemplary embodiment the one or more processors may further be configured to determine whether the directory entry is cached and in the event the directory entry is not cached request the directory entry from the directory server.

In accordance with additional aspects of this particular exemplary embodiment the one or more processors may comprise a part of a gateway appliance separate from a host of the directory data service.

In accordance with additional aspects of this particular exemplary embodiment the one or more processors may further be configured to use one or more cached directory entries to provide at least one of user authentication recipient validation address resolution and message routing.

In still another particular exemplary embodiment the techniques may be realized as a method for directory server integration comprising requesting a directory entry from a directory server detecting using a processor a data integrity error based at least in part on the response from the directory server and providing an alert containing data integrity error information to an administrator.

In accordance with additional aspects of this particular exemplary embodiment the data integrity error may comprise at least one of email address non uniqueness username non uniqueness missing or invalid attribute data and circular group relationships.

The present disclosure will now be described in more detail with reference to exemplary embodiments thereof as shown in the accompanying drawings. While the present disclosure is described below with reference to exemplary embodiments it should be understood that the present disclosure is not limited thereto. Those of ordinary skill in the art having access to the teachings herein will recognize additional implementations modifications and embodiments as well as other fields of use which are within the scope of the present disclosure as described herein and with respect to which the present disclosure may be of significant utility.

With reference to computer system of modem network interface or some other method may be used to provide connectivity from one or more of client systems and to network . Client systems and may be able to access information on directory servers N using for example a Lightweight Directory Access Protocol LDAP client or other client software. Such a client may allow client systems and to access data hosted by directory servers N or one of storage devices N .

Networks and or may be a local area network LAN a wide area network WAN the Internet a cellular network a satellite network or another network that permits communication between clients directory servers N and other devices communicatively coupled to networks and or . Networks and or may further include one or any number of the exemplary types of networks mentioned above operating as a stand alone network or in cooperation with each other. Networks and or may utilize one or more protocols of one or more clients or servers to which it is communicatively coupled. Networks and or may translate to or from other protocols to one or more protocols of network devices. Although networks and are each depicted as a single network it should be appreciated that according to one or more embodiments networks and or may comprise a plurality of interconnected networks.

Storage devices N may be network accessible storage and may be local remote or a combination thereof to directory servers N . Storage devices N may utilize a redundant array of inexpensive disks RAID magnetic tape disk a storage area network SAN an internet small computer systems interface iSCSI SAN a Fibre Channel SAN a common Internet File System CIFS network attached storage NAS a network file system NFS optical based storage or other computer accessible storage. Storage devices N may be used for backup or archival purposes.

According to some embodiments clients and may be smartphones PDAs desktop computers laptop computers servers other computers or other devices coupled via a wireless or wired connection to network . Clients and may receive data from user input a database a file a web service and or an application programming interface.

Directory servers N may be one or more of a host for directory server implementations such as for example a Microsoft Active Directory Server an IBM Lotus Domino Server a Sun Directory Server an LDAP compliant directory server a database server a server containing one or more flat files or other data structures e.g. XML or other devices communicatively coupled to network . Directory servers N may utilize one or more of storage devices N for the storage of application data backup data or other data. One or more of directory servers N may be a host such as an application server which may process data requests for clients and .

According to some embodiments network may represent the Internet and network devices may be devices handling a high volume of data traffic between network which may be a corporate WAN or LAN and network . For example one or more of network devices may be a mail gateway a web gateway or another appliance or application using directory data services for user authentication and or authorization identity management recipient validation address resolution message routing access control or other application behavior. By way of non limiting example one or more of network devices may be a Symantec Brightmail Gateway a Symantec Web Gateway a Symantec Data Loss Prevention Host a Symantec Endpoint Protection Application or a Brightmail Message Filter. One or more of network devices may use directory data service to manage cached data from one or more directory servers. According to some embodiments each network device may cache its own data. According to one or more embodiments cached data may be shared among two or more of network devices . For example network device may be a control center host for a plurality of Brightmail Gateway scanners. The control center host may contain cached directory service data shared among a plurality of other network devices which may be Brightmail Gateway scanners. Cached data may be stored on a network device or in electronic storage communicatively coupled to a network device .

Directory data service may a component of a network device a module or another combination of hardware and software integrated to manage directory data cache operations. According to some embodiments directory data service may provide a unified service oriented architecture for directory integration with a gateway appliance or another device or application using directory data services for high throughput processing.

Directory data service may allow the management of cached data from a directory server such as for example directory server . Directory data service may also manage requests for directory data. Caching data may allow faster performance for a network device such as a mail gateway and may offload a burden from one or more directory servers . Building an initial cache may however pose a significant load. According to one or more embodiments directory data service may preload cached directory data prior to use by a network device. Cached data may need to be refreshed periodically so that the cached data does not become stale e.g. omit changes to the directory data which may have occurred on a directory server. A large number of cache entries may be created at a same time or within a same narrow time period. Setting a large number of cache entries with a same Time To Live TTL setting or other similar setting which determines the expiration of the cache entry may result in a large number of queries to a directory server to refresh a large number of cache entries in a short time period. This undesirable behavior may cause a spike performance problems or other undesirable behavior on a directory server and or on an application or device using a directory server.

According to one or more embodiments of the present disclosure expiration times e.g. TTL settings of cached entries may be varied so that a large number of cached entries do not burden a directory server with refresh requests e.g. LDAP queries to a LDAP compliant directory server at a same point in time. For example one or more parameters determining a range of permissible expiration times for a plurality of cached directory entries may be set by an administrator. Directory data service may provide a user interface and or accept set parameters. When a cached directory entry from a directory data service is created it may be assigned a creation time by directory data service . The cached directory entry may also be assigned one or more random values by directory data service . The one or more random values may determine an expiration time e.g. a Time To Live TTL for the cached directory entry within the range of permissible expiration times. Randomizing the expiration time for the cached directory entry among the range of permissible expiration times for a plurality of cached directory entries may reduce an amount of synchronization e.g. refresh requests required between the cache memory of a network device and a directory server at a point in time. Thus the cached entries may have their TTL settings distributed across a range of permissible Time To Live settings so that a directory server does not incur a performance spike or other degradation.

According to some embodiments an administrator or other user may determine a range of permissible expiration times for a cached directory entry by setting a maximum Time To Live parameter and a minimum Time To Live parameter. A cached entry may be assigned an expiration date or Time To Live setting within a range determined by the maximum Time To Live parameter and the minimum Time To Live parameter. A Time To Live setting may be set at the time of the creation of a cached directory entry. According to other embodiments an administrator or other user may determine a range of permissible expiration times for a cached directory entry by setting a Time To Live parameter and a Time To Live variance parameter. The Time To Live variance parameter may determine a maximum amount a cached directory entry may vary from a Time To Live parameter. For example Time To Live variance parameter may be expressed as a percentage e.g. a percentage between 0 and 100 . The Time To Live variance parameter may be converted to a decimal subtracted from 1 and then multiplied by the TTL to determine a minimum TTL. The Time To Live variance parameter may then be converted to a decimal added to 1 and then multiplied by the TTL to determine a maximum TTL. Other methods and parameters may be used to identify or determine a range of Time To Live settings over which to distribute individual cache entry TTL settings. According to some embodiments a TTL range a TTL or a TTL variance may increase or decrease based on one or more factors. For example a TTL and or a TTL range may increase or decrease based on a cache size a directory server load or other factors. A directory data source may be a configuration of a directory data service DDS that may specify how to connect to and query a particular directory server. According to one or more embodiments a TTL range may be different based on a directory data source. For example if a portion of cache is associated with a first directory data source and a second portion of cache is associated with a second directory data source the different portions may be assigned different TTL ranges.

According to some embodiments whether a cache entry has expired may be determined by calculating the elapsed time since the creation time of the cache entry and comparing the elapsed time to the Time To Live TTL for the entry. For example elapsed time may be calculated as elapsed currentTime creationTime 1000 seconds

As described above there may be several different algorithms used to calculate a TTL for a cache entry. For example an entry Time To Live entryTTL may be calculated as entryTTL minTTL maxTTL minTTL ttlSpreadFactor 100.0 seconds

A ttlSpreadFactor may be a random number e.g. 50 between 0 and 100 inclusive . MinTTL may represent a minimum Time To Live for a cache entry and max TTL may represent a maximum Time To Live for the entry. Thus MinTTL and MaxTTL may determine a permissible range and the ttlSpreadfactor may be a random number used to distribute cache entries along that range.

Once elapsed time and the Time To Live for the cache entry have been determined the expiration determination may be isExpired elapsed entryTTL .

If a cache entry is expired directory data service may attempt to refresh the cache entry by querying a directory server e.g. an LDAP query to an LDAP compliant directory server . The cache entry may be received and updated or created in the cache with a new creation time set and a new TTL calculated.

According to some embodiments if a cached directory entry is expired and the corresponding directory server is unavailable then the cached directory entry may be provided in response to a request even though it is expired. In the event a directory server is redundant to another directory server e.g. they contain the same directory entries a query to a directory server may fail over from the first server to the second server. For example a round robin DNS Domain Name Server scheme may be used to failover to redundant directory servers. According to some embodiments load balancing and or failover may be implemented at a directory server e.g. LDAP tier. According to one or more embodiments when there is a data access failure e.g. network problem or a directory server is down directory data service may service requests with data from the cache if it is available. For this reason data may not be deleted from a data source cache unless size limits have been exceeded. For example there may be a fast failover mode which may initiate when several data access failures have been detected in a short period of time. This may cause the data source to immediately serve up the cache data if it is available whether it is expired or not or to fail immediately with an exception e.g. DataAccessUnavailableException without incurring the overhead of a data access call. This may allow directory data service to maintain high throughput when directory server resources are unavailable. According to an embodiment a directory data service fast failover configuration may be implemented as follows.

If five data access failures are detected in a period of 120 seconds switch to fast failover for 300 seconds. If there is no cached data to failover to for a particular request the Directory Data Service DDS call may fail with a transient error. For recipient validation such transient errors may result in an SMTP Simple Mail Transfer Protocol error directing upstream senders to retry the message. For the other functions these errors may cause messages to remain in various internal MTA Message Transfer Agent queues where they may be retried.

According to some embodiments cache data may take precedence over a redundant directory data source. Setting an order of precedence among directory data sources and caches may be configurable. For example consider the case where the system has been configured with two identical recipient validation sources SourceA and SourceB where SourceA is the first source in query order. Under normal circumstances only SourceA may be queried for valid recipients. Early termination and sticky refresh may ensure that SourceB is not accessed for those recipients. Early termination may be the termination of a search against a directory data service configured with multiple data sources without verifying the uniqueness of the search results e.g. in the case of recipient validation the search may stop at a first data source in which the requested directory entry is found . Sticky refresh may be a preference defined under which a directory entry in a cache is associated with a particular data source and the directory data service attempts to refresh the directory entry from that same data source when the directory entry expires e.g. as long as the directory entry may be refreshed from the same data source other data sources in the system will not be queried for it . Under normal circumstances both sources may be queried for invalid recipients. If SourceA is down cached valid recipients may be served from the SourceA cache Source B may not be consulted. If SourceA is down uncached valid recipients may be served from SourceB. Sticky refresh may cause them to be subsequently served from SourceB. If SourceA is down cached but unexpired invalid recipients may be handled the same as under normal circumstances. If SourceA is down uncached or cached but expired invalid recipients may cause an error instructing a requestor to try again later. Two directory data sources may be redundant or disjoint thus it is possible that a recipient is valid in a down directory data source e.g. source A and may not be invalid if it is not found in any of the other sources.

According to some embodiments if SourceB is down cached valid recipients may be served from the SourceA cache Source B may not be consulted. If SourceB is down uncached valid recipients may be served from SourceA. Early termination and sticky refresh may cause them to be subsequently served from SourceA. If SourceB is down cached but unexpired invalid recipients may be handled the same as under normal circumstances If SourceB is down uncached or cached but expired invalid recipients may cause an error directing a requestor try again later

When a directory data source is down it may fail over to cache data if it is available. The directory data service may log a data access error and may generate a data access alert. However directory data service may continue to search other data sources. If a unique entry is found in one of the healthy sources the call may succeed and sticky refresh may direct subsequent requests for that entry to that source. If more than one entry is found a uniqueness error may be logged and directory data service may generate a data integrity alert. If no matching entries are found a request may fail with a transient error code and may be retried.

According to some embodiments directory data service may detect one or more data integrity errors or other errors and may provide logging and or alerting associated with the errors. For example directory data service may encounter data errors during processing and may log the errors and or provide an alert to an administrator. Detected data errors may include by way of non limiting example email address non uniqueness username non uniqueness missing or invalid attribute data e.g. missing email address invalid email address format group membership attribute referring to a non existent entry and inconsistent values for child and parent group membership attributes and circular group relationships. Directory data service may integrate with a variety of directory data. For example directory data service may access directory servers . . . N which may be LDAP directories SQL databases and or servers containing flat files. Directory data service may access a directory server e.g. an LDAP query seeking an email address or other data. Based on received data directory data service may detect a data integrity error. A received email address may correspond to multiple directory entries in a single data source or across multiple data sources or a username may correspond to multiple directory entries in a single data source or across multiple data sources. According to some embodiments in addition to data integrity errors other errors handled by directory data service may include directory data access errors e.g. failed to read data from an LDAP server an undersized data source cache error e.g. indicates that a data source cache or cache index is not large enough to hold all of the requested data in memory and or a data replication error indicates that a data replication operation has failed .

Directory data service may provide directory server data access alerts. This type of alert may be triggered when the directory data service cannot read data from a directory server e.g. an LDAP server . This may occur for a wide variety of reasons. Some examples may include an LDAP server is down network infrastructure problems DNS issues firewall rules blocking requests bad data source admin bind credentials and or an LDAP search timeout.

Other alerts handled by directory data service may include directory server data integrity alerts. This type of alert may be triggered when directory data service has detected a problem with directory data that prevents the successful execution of a request. Data integrity issues that do not result in the failure of requests may be logged by directory data service at a WARNING level and may not trigger alerts. For recipient validation if multiple entries are returned for a search on the recipient address within a single data source or across multiple sources the event may be logged by directory data service at an INFO level and no alert may be generated. Duplicate recipients may be considered valid for the purposes of the recipient validation function. The following data integrity errors may trigger an alert 

More than one entry is returned for a search on an email address within a single data source or across multiple sources .

More than one entry is returned for a search on a username within a single data source or across multiple sources .

The following data integrity issues may be logged by directory data service at WARNING level and may not trigger alerts circular group references invalid group membership attribute values missing primary email attribute value and or invalid format for email address value.

Circular group references may be recognized by directory data service when a directory server is being traversed from the top down to determine group membership. For example if group A is a member of group B and group B is a member of group A directory data service may detect this and log an error. Group relationships may be nested many levels deep so a circular group reference may occur several levels down. For example assuming groups are nested from parent through child from A E group B may be member of group E causing a circular group reference. According to some embodiments a recursive tree traversal algorithm may be used that may determine that a particular node of a tree i.e. a group has been visited before. This may indicate a circular group reference. Circular group references may be detected with in a data source e.g. a single directory server or across data sources.

Directory data service may also provide DDS Cache Size Alerts. This type of alert may be triggered when directory data service evicts a cache entry before it is expired to make room for a new entry that has been fetched from the data access layer. The alerts and log statements may steer the administrator to take the appropriate action. Exemplary alerts include 

Alert files may communicate the host the specific type of alert condition and the time of the triggering incident. The alert text may direct administrators to the system log files for additional diagnostic information. This may allow change or extension of functionality of the alerts with less development impact.

The status codes may be coarse grained and there may be many possible error conditions that could result in a particular code. The alert mechanism may simply communicate that the DDS instance on a particular host was unable to process requests at a particular time and may refer the administrator to the logs for detailed information about a root cause.

There may be user interface elements e.g. checkboxes to enable or disable one or more subtypes of DDS data access alerts DDS data integrity alerts DDS cache size alerts user preference replication alerts or other types of alerts.

Directory data service may log one or more data integrity errors or other errors and alerts may be generated by a separate mechanism. For example directory data service may create an alert file on disk or in other electronic storage. The alert file may contain a timestamp and an identifier indicating a type of alert condition. A process or agent running on network device may periodically poll for alert files process alert metadata and send an alert email to one or more users e.g. registered system administrators . Other communication channels may be used to notify a user including but not limited to SMS text messages voicemail and or a webpage posting. According to some embodiments directory data service may send an alert directly without the use of an additional process or agent. According to one or more embodiments directory data service or another process may send an alert using an interface e.g. via SNMP a Windows System Event or a custom IPC inter process communication .

Detection of data integrity errors by directory data service and prompt alerting of a system administrator may enable a system administrator to address issues prior to system degradation or failure.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM may be the main memory into which the operating system and application programs may be loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system may be stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. For example directory data service may be resident in system memory .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code to implement the present disclosure may be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Code to implement the present disclosure may also be received via one or more interfaces and stored in memory. The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 OS X UNIX Linux or another known operating system.

Power manager may monitor a power level of battery . Power manager may provide one or more APIs Application Programming Interfaces to allow determination of a power level of a time window remaining prior to shutdown of computer system a power consumption rate an indicator of whether computer system is on mains e.g. AC Power or battery power and other power related information. According to some embodiments APIs of power manager may be accessible remotely e.g. accessible to a remote backup management module via a network connection . According to some embodiments battery may be an Uninterruptable Power Supply UPS located either local to or remote from computer system . In such embodiments power manager may provide information about a power level of an UPS.

Referring to there is shown a directory data service module in accordance with an embodiment of the present disclosure. As illustrated the directory data service module may contain one or more components including directory data service DDS cache management module directory data service integrity management module directory data service group membership management module directory data service query generalization module and error logging and reporting module .

The description below describes network elements computers and or components of a system and method for directory server integration that may include one or more modules. As used herein the term module may be understood to refer to computing software firmware hardware and or various combinations thereof. Modules however are not to be interpreted as software which is not implemented on hardware firmware or recorded on a processor readable recordable storage medium i.e. modules are not software per se . It is noted that the modules are exemplary. The modules may be combined integrated separated and or duplicated to support various applications. Also a function described herein as being performed at a particular module may be performed at one or more other modules and or by one or more other devices instead of or in addition to the function performed at the particular module. Further the modules may be implemented across multiple devices and or other components local or remote to one another. Additionally the modules may be moved from one device and added to another device and or may be included in both devices.

Directory data service DDS cache management module may handle one or more aspects of cache management. For example DDS cache management module may receive calculate and or set TTL settings TTL ranges or other cache expiration parameters. DDS cache management module may determine when to expire a cache entry based on one or more TTL parameters a creation time of the cache entry elapsed time since a creation time and or other factors. DDS cache management module may establish cache size limits and cache entry eviction policies for data source caches and cache indexes. Cache index sizes may be determined by one or more parameters e.g. a cache index multiplier parameter which may define the size of a cache index as a simple multiple of its associated data source cache .

DDS cache management module may determine failover behavior based on one or more settings and or detected conditions. DDS cache management module may receive set and or enforce settings for an order of precedence between data sources and or cache.

Directory data service integrity management module may detect one or more data integrity errors or other errors and may provide logging and or alerting associated with the errors. For example directory data service integrity management module may encounter data errors during processing and may log the errors and or provide an alert to an administrator. Detected data errors may include by way of non limiting example email address non uniqueness username non uniqueness missing or invalid attribute data e.g. missing email address invalid email address format group membership attribute referring to a non existent entry and inconsistent values for child and parent group membership attributes and circular group relationships. Directory data service integrity management module may integrate with a variety of directory data. For example directory data service integrity management module may access directory servers . . . N which may be LDAP directories SQL databases and or servers containing flat files. Directory data service integrity management module may access a directory server e.g. via an LDAP query seeking a directory entry or other data. Based on received data directory data service integrity management module may detect a data integrity error. For example a search on an email address or a username may correspond to multiple directory entries in a single data source or a username may correspond to multiple directory entries in a single data source or across multiple data sources. According to some embodiments in addition to data integrity errors other errors recognized by directory data service integrity management module may include directory data access errors e.g. failed to read data from an LDAP server an undersized data source cache error e.g. indicates that a data source cache or cache index is not large enough to hold all of the requested data in memory and or a data replication error indicates that a data replication operation has failed .

Circular group references may be recognized by directory data service integrity management module when a directory server is being traversed from the top down to determine group membership. For example if group A is a member of group B and group B is a member of group A directory data service integrity management module may detect this and log an error. Group relationships may be nested many levels deep so a circular group reference may occur several levels down. For example assuming groups are nested from parent through child from A E group B may be member of group E causing a circular group reference. According to some embodiments a recursive tree traversal algorithm may be used that may determine that a particular node of a tree i.e. a group has been visited before. This may indicate a circular group reference. Circular group references may be detected within a single data source or across multiple data sources.

Directory data service integrity management module may log one or more data integrity errors or other errors and alerts may be generated by a separate mechanism. For example directory data service integrity management module may create an alert file on disk or in other electronic storage. The alert file may contain a timestamp and an identifier indicating a type of alert condition. A process or agent running on network device may periodically poll for alert files process alert metadata and send an alert email to one or more users e.g. registered system administrators . Other communication channels may be used to notify a user including but not limited to SMS text messages voicemail and or a webpage posting. According to some embodiments directory data service may send an alert directly without the use of another process or agent. According to one or more embodiments directory data service integrity management module or another process component or module may send an alert using an interface e.g. via SNMP a Windows System Event or a custom IPC inter process communication .

Detection of data integrity errors by directory data service integrity management module and prompt alerting of a system administrator may enable a system administrator to address issues prior to system degradation or failure.

Directory data service group membership management module may traverse one or more directory data sources to identify members of a group. Directory data service group membership management module may resolve parent group memberships child group memberships or both.

Directory data service query generalization module may allow a query e.g. an LDAP query to a directory server to use query filter tokens or other mechanisms to define a variety of directory search criteria including but not limited to the matching of email aliases. Query filter tokens and alias matching are discussed in greater detail below in reference to .

Error logging and reporting module may produce logs reports or other information associated with directory server integration.

Referring to there is depicted a method for directory server integration in accordance with an embodiment of the present disclosure. is a high level depiction of directory server integration. Other elements such as for example a test to determine whether an entry is in a directory server may be added. At block the method may begin.

At block the method may assign a Time To Live range. A Time To Live range may be specified by an administrator using one or more parameters. According to some embodiments an administrator or other user may determine a range of permissible expiration times for a cached directory entry by setting a maximum Time To Live parameter and a minimum Time To Live parameter. A cached entry may be assigned an expiration date or Time To Live setting within a range determined by the maximum Time To Live parameter and the minimum Time To Live parameter. A Time To Live setting may be set at the time of the creation of a cached directory entry. According to other embodiments an administrator or other user may determine a range of permissible expiration times for a cached directory entry by setting a Time To Live parameter and a Time To Live variance parameter. The Time To Live variance parameter may determine a maximum amount a cached directory may vary from a Time To Live parameter. For example Time To Live variance parameter may be expressed as a percentage e.g. a percentage between 0 and 100 . The Time To Live variance parameter may be converted to a decimal subtracted from 1 and then multiplied by the TTL to determine a minimum TTL. The Time To Live variance parameter may then be converted to a decimal added to 1 and then multiplied by the TTL to determine a maximum TTL. Other methods and parameters may be used to identify or determine a range of Time To Live settings over which to distribute individual cache entry TTL settings.

At block a request for a directory entry may be received. For example a gateway may request directory data for recipient validation message routing authentication application of a policy quarantine of a suspected spam email or for other purposes.

At block it may be determined whether the requested directory entry is cached. If the requested directory entry is cached the method may continue at block . If the requested directory entry is not cached the method may continue at block .

At block the method may determine whether an entry is expired. According to some embodiments the expiration of a cache entry may be determined by calculating elapsed time from a creation time of the cache entry and comparing the elapsed time to a Time To Live setting for the cached directory entry. There may be several different algorithms used to calculate a TTL for a cache entry. For example an entry Time To Live entryTTL may be calculated as entryTTL minTTL maxTTL minTTL ttlSpreadFactor 100.0 seconds A ttlSpreadFactor may be a random number e.g. 50 between 0 and 100 inclusive . MinTTL may represent a minimum Time To Live for a cache entry and max TTL may represent a maximum Time To Live for the entry. Thus MinTTL and MaxTTL may determine a permissible range and the ttlSpreadfactor may be a random number used to distribute cache entries along that range.

At block if the cache entry is not expired cached entry information may be provided to respond to the request.

At block it may be determined whether a directory server is accessible. If a directory server is accessible the method may continue at block . If a directory server is not accessible the method may end at block . According to some embodiments represented by the dashed line if the directory server is not accessible cached entry information may be provided at block . For example as discussed above in reference to there may be a fast failover mode which may initiate when several data access failures have been detected in a short period of time. This may cause the data source to immediately serve up the cache data if it is available whether it is expired or not or to fail immediately with an exception e.g. DataAccessUnavailableException without incurring the overhead of a data access call.

At block the directory entry may be retrieved from the directory server or source and a cached directory entry may be created.

At block an absolute random value may be assigned to a cached directory entry which may determine a Time To Live TTL for the cached directory entry. The random value may assign a TTL within a range specified by an administrator. According to some embodiments other methods of assigning a random value may be used. As discussed below in reference to a Time To Live TTL spread factor may be used.

Referring to there is depicted a method for directory server integration in accordance with an embodiment of the present disclosure. At block the method may begin with a request for a directory object.

At block it may be determined whether a request is searching on an LDAP Distinguished Name DN e.g. userid jmsmith dc domain dc com . If a request is searching using a distinguished name the method may continue at block . If a request is searching using another attribute e.g. an email address jsmith domain.com or a username jsmith the method may continue at block .

At block it may be determined whether an entry was found in a cache index. If a corresponding entry was found the method may continue at block otherwise the method may continue at block .

At block a directory server may be searched by an attribute value corresponding to the identified cache index key.

At block if a directory entry was found using an identified cache index entry key the method may continue at block else the method may continue at block .

At block a Time To Live TTL spread factor may be assigned to the cache index object. The TTL spread factor may be a random number e.g. between 0 and 100 inclusive and may subsequently be used to determine a TTL for the cache index object within a specified permissible range of TTL values. According to some embodiments other methods of assigning a random value may be used. For example as discussed above in reference to an absolute random number may be used.

At block it may be determined whether an entry identified in a cache index is expired. If an entry is expired the method may continue at block . If an identified entry in a cache index is not expired the method may continue at block .

At block if an entry has not been found in a directory server a corresponding object may be removed from the cache index.

At block it may be determined whether an entry has been found. If an entry has been found in entry cache the method may continue at block . If an entry has not been found the method may continue at block .

At block an identified directory cache entry may be tested to determine whether the entry has expired. As discussed above expiration may be determined using one or more attributes or settings including a TTL Spread Factor a creation date and elapsed time since a creation date. If a cached directory entry has expired the method may continue at block . If a cached directory entry has not expired the method may continue at block .

At block it may be determined whether a directory entry matching the requested object has been found in a directory server. If a directory entry has been found the method may continue at block . If an entry has not been found the method may continue at block .

At block a Time To Live TTL spread factor may be assigned to the entry cache object. The TTL spread factor may be a random number e.g. between 0 and 100 inclusive and may be subsequently used to determine a TTL for the entry cache object within a permissible range of Time To Live values. According to some embodiments other methods of assigning a random value may be used. For example as discussed above in reference to an absolute random number may be used.

Referring to B and C there is depicted an interface for setting directory data service cache parameters in accordance with an embodiment of the present disclosure. Many different methods may be used for randomizing cache entry expiration times. For example as discussed above in reference to a cache entry may be assigned a normalized TTLSpreadFactor which may properly scale the TTL of a cache entry when other parameters are modified e.g. a MinTTL parameter and a maxTTL parameter . Other embodiments may use an absolute random TTL assigned to a cache entry at creation time the assignment within a specified range e.g. specified by a minTTL parameter and a maxTTL parameter . Another embodiment may use a random cache entryTTL which may be calculated each time a directory object is requested from a cache. Other variations of randomizing cache entry TTL are possible and contemplated.

According to some embodiments an administrator or other user may determine a range of permissible expiration times for a cached directory entry by setting a maximum Time To Live parameter and a minimum Time To Live parameter. For example as illustrated in a minimum Time To Live parameter of 43200 seconds may be specified. A maximum Time To Live parameter exemplary setting of 129600 seconds is also displayed in . The minimum Time To Live parameter settings may be determined by an administrator to trade off between load for refreshing cache and staleness of directory entries. A cached entry may be assigned an expiration date or Time To Live setting within a range determined by the maximum Time To Live parameter and the minimum Time To Live parameter. A Time To Live setting may be set at the time of the creation of a cached directory entry. According to other embodiments an administrator or other user may determine a range of permissible expiration times for a cached directory entry by setting a Time To Live parameter and a Time To Live variance parameter. The Time To Live variance parameter may determine a maximum amount a cached directory may vary from a Time To Live parameter. For example Time To Live variance parameter may be expressed as a percentage e.g. a percentage between 0 and 100 . As illustrated in a TTL parameter is set for 86400 seconds and a TTL variance parameter is set at 50 . The Time To Live variance parameter may be converted to a decimal subtracted from 1 and then multiplied by the TTL to determine a minimum TTL. The Time To Live variance parameter may then be converted to a decimal added to 1 and then multiplied by the TTL to determine a maximum TTL. Other methods and parameters may be used to identify or determine a range of Time To Live settings over which to distribute individual cache entry TTL settings. According to some embodiments a TTL range a TTL or a TTL variance may increase or decrease based on one or more factors. For example a TTL and or a TTL range may increase or decrease based on a cache size a directory server load or other factors. According to one or more embodiments a TTL range may be different based on a directory data source. For example if a portion of cache is associated with a first directory data source and a second portion of cache is associated with a second directory data source the different portions may be assigned different TTL ranges.

Referring to B and C there is depicted an interface for setting directory data service cache parameters in accordance with an embodiment of the present disclosure.

According to some embodiments whether a cache entry has expired may be determined by calculating the elapsed time since the creation time of the cache entry and comparing the elapsed time to the Time To Live TTL for the entry. As illustrated in an exemplary cached directory entry creation timestamp may be 1267158467763 milliseconds MS . A timestamp may be created using an Operating System API to obtain a system time at the time of a creation of a cached directory entry. A TTL spreadfactor which may have been randomly assigned at the time of creation of the cached directory entry may be 39. As described above there may be several different algorithms used to calculate a TTL for a cache entry. For example an entry Time To Live entryTTL may be calculated as entryTTL minTTL maxTTL minTTL ttlSpreadFactor 100.0 seconds A ttlSpreadFactor may be a random number e.g. 39 between 0 and 100 inclusive . MinTTL may represent a minimum Time To Live for a cache entry and MaxTTL may represent a maximum Time To Live for the entry. Thus MinTTL and MaxTTL may determine a permissible range and the ttlSpreadfactor may be a random number used to distribute cache entries along that range.

Using the exemplary TTL spread factor specified in and the exemplary TTL range specified in the Time To Live TTL for a cache entry may be calculated as ENTRY TTL 43200 129600 43200 39 100 76896 seconds.

Using the exemplary TTL spreadfactor specified in and the exemplary TTL range specified in the Time To Live TTL for a cache entry may be calculated as ENTRY TTL 86400 259200 86400 39 100 153792 seconds.

Assignment of a normalized TTL spread factor may allow entry TTL values to scale naturally when MinTTL and or MaxTTL are modified.

Elapsed time may be calculated by one or more algorithms. For example elapsed time may be calculated as elapsed currentTime creationTime 1000 seconds Once elapsed time and the Time To Live for the cache entry have been determined the expiration determination may be isExpired elapsed entryTTL .

According to an exemplary embodiment directory data service DDS integration may be implemented using a DDS business logic layer. The DDS business logic layer may be comprised of the following parts 

DDS API locking layer this layer may ensure that the system is not shutdown restarted or otherwise halted while processing DDS client requests. It may synchronize server reinitialization with client request processing. It may implement the DDS API with locking and delegate one or more requests to the DDS API layer.

Business component layer this layer may implement the directory functions and server reinitialization. It uses the data access cache and config layers to service client requests. It uses the config layer to perform server reinitialization. It notifies the cache and data access layers of server reinitialization.

Cache layer this layer may be responsible for caching directory model objects in memory. A directory model object may represent directory entries such as users groups and or distribution lists. A model object may be indexed by one or more email addresses such as but not limited to the lookup email address and a Unique Identifier UID . For the authentication function user objects may be indexed by username and UID. References to non existent directory objects may be stored in a negative cache. The UIDs contained within the model objects may be pooled to reduce memory consumption.

Config layer this layer may parse configuration files e.g. ddsconfig.xml userprefs.xml and bmiconfig.xml from disk. The files may be converted to config objects and stored in memory. The DDSConfig object contains data source information and may be primarily used by the data access layer. This object also contains cache settings and profile to data source mappings which may be used by the cache and business component layers. The UserPreferences and PolicyConfig objects may be used in processing address resolution requests.

The DDS API locking layer may synchronize client request processing with server reinitialization. However to ensure that a profile id passed from the Engine to the DDS is valid the Control Center may synchronize Engine reinitialization with DDS reinitialization.

ConcurrentDDS this class may implement the DirectoryDataService interface and may use a read write lock for synchronizing server reinitialization with client request processing. The read lock may be held simultaneously by multiple client requests so long as the write lock is not acquired. The write lock may be exclusive and may be acquired when the server is kicked. If readers are active and a writer enters the lock then no subsequent readers may be granted the read lock until after that writer has acquired and released the write lock. A single instance of this class may be instantiated by the Spring framework. The instance may need to be initialized with an object that implements the DirectoryDataService interface.

AuthenticationManager this singleton may implement the directory functions related to the authentication function type. It performs quarantine end user login. A test method may be available.

QuarantineResolutionManager this singleton may implement the directory functions related to the quarantine address resolution function type. It performs quarantine address resolution. A test method may be available.

RecipientValidationManager this singleton may implement the directory functions related to the recipient validation function type. It performs MTA recipient validation. A test method may be available.

RoutingManager this singleton may implement the directory functions related to the routing function type. It retrieves MTA routing alternate mailhost and alternate address information. A test method may be available.

AddressResolutionManager this singleton may implement the directory functions related to the address resolution function type. It performs Engine address resolution and the all groups function. Test methods may be available.

ResolvedAddress this transfer object may be returned in response to Engine address resolution. It provides access to the Recipient model object and a list of ResolvedRecipient objects.

ResolvedRecipient this transfer object may provide access to the Recipient model object a list of Group and DistributionList model objects the recipient is a member of and the user preferences xml associated with the recipient.

DirectoryDataServer this singleton may perform server initialization. It notifies the config layer that there are new configuration files to load. It passes the new DDSConfig object to the cache business and data access layers. These layers may detect changes in configuration by comparing the previous DDSConfig object with the new one.

EntryStore this class may wrap an instance of EntryCache and EntryDAO. It provides access to the cached objects while enforcing the TTL logic. One instance of this class may be created per data source function.

EntryStoreFactory this singleton may create an EntryStore object for each data source function in DDSConfig. An EntryStore may be retrieved by data source ID and function type. This singleton may be notified with a new DDSConfig object when the server is reinitialized.

EntryMart this class may map to a profile and contain an array of EntryStore objects. It performs a cache first search on the EntryStore objects as its main function.

EntryMartFactory this singleton may create an EntryMart object for each profile in DDSConfig. An EntryMart may be retrieved by profile ID. This singleton may be notified with a new DDSConfig object when the server is reinitialized.

DDSConfigFactory this singleton may parse the ddsconfig.xml file into a DDSConfig object at server startup and reinitialization. If the last modification date on the file is unchanged then the file may not be reloaded.

PolicyConfigFactory this singleton may parse the bmiconfig.xml file into a PolicyConfig object at server startup and reinitialization. If the last modification date on the file is unchanged then the file may not be reloaded.

PolicyConfig a config object containing the directory group UIDs which may be mapped to any group policy in the bmiconfig.xml file.

UserPreferencesFactory this singleton may parse the userprefs.xml file into a UserPreferences object at server startup and reinitialization. If the last modification date on the file is unchanged then the file may not be reloaded.

UserPreferences a config object representing the contents of the userprefs.xml file. The user preferences xml string for each user may be base64 encoded.

Entry this interface may model one or more directory objects. It may provide access to the UID i.e. DN and member Of attributes.

Recipient this interface may model directory objects that have a primary deliverable address. It may extend the Entry interface and provides access to the primary deliverable address alias addresses and other custom attributes.

RecipientRef this class may provide a way to reference a Recipient object by email address. The reference refers to the Recipient object by UID.

InvalidRecipient this class may hold a reference an email address to a non existent directory object. It is a negative cache entry and may be used for negative caching.

MemberList this interface may model directory objects that contain lists of members. It extends the Entry interface and provides access to the member list.

UserRef this class may provide a way to reference a User object by username. The reference refers to the User object by UID.

Group this class may model a directory group object. It implements the MemberList interface. It provides access to the group name e.g. cn .

DistributionList this class may model a directory group object with a primary deliverable address. It implements the Recipient and MemberList interfaces.

Attribute this class may provide access to custom attributes on user and group directory objects such as those used by the routing directory function.

EntryCache this interface may define the operations required to get add and remove Entry RecipientRef UserRef and InvalidRecipient objects from a cache. It may also define the set of runtime cache management operations such as setting cache sizes or purging cached entries.

LRUEntryCache this class may implement the EntryCache interface. It caches Entry RecipientRef UserRef and InvalidRecipient objects in memory. One instance of this class may be created for each data source function. It uses an access ordered LinkedHashMap to index Entry objects by UID. RecipientRef objects may be indexed by lookup address in a separate access ordered LinkedHashMap. UserRef objects may be indexed by username in a separate access ordered LinkedHashMap. InvalidRecipient objects may be also indexed by lookup address in a separate access ordered map. When the max size on a map is exceeded the least recently used entry may be removed from the map. The cached model objects refer to other directory objects by UID i.e. DN and to reduce memory usage these UIDs may be pooled using an InternPool. There may be one InternPool instance per cache.

InternPool this class may be a string pool. It uses a WeakHashMap to index the String objects. Its entries are automatically garbage collected when they are no longer referenced.

EntryCacheFactory this singleton may create an LRUEntryCache object for each data source function in DDSConfig. An EntryCache may be retrieved by data source ID and function type. This class may maintain a reference to the current DDSConfig object at all times. This singleton may be notified with a new DDSConfig object when the server is reinitialized. Cache instances may be invalidated by comparing the current config to the new config.

Cache design may be influenced by one or more factors. First cached entries exceeding their TTL Time To Live should be used when their associated data source connection is down. Therefore there may be no proactive pruning of expired cache data. Instead cache entries may remain in the cache until one of two things happen an entry is replaced with a new version or an entry is evicted because the cache size is exceeded. Secondly only a single copy of a directory object should be cached. This is to prevent filling up the cache with different versions of the same directory object. This also ensures that no matter how the directory object is acquired by unique id primary deliverable address alias address lookup address or username the same version may be returned.

By default the EntryCacheFactory singleton instance may be serialized to disk using default java serialization on server shutdown. The serialized instance may be loaded into memory on server startup. This may allow all in memory caches to persist across server restarts. Using ObjectOutputStream multiple references to a single object may be encoded using a reference sharing mechanism so that graphs of objects can be restored to the same shape as when the original was written. In other words pooled strings may continue to be pooled after deserialization. The memory footprint may not increase after deserialization. Because serialized java objects are sensitive to class version changes the serialized cache data may be ignored after software update.

The UIDs within the cache may be pooled using an InternPool to reduce memory consumption. There is potential for huge savings as the following example illustrates 

With no string pooling the total size of all DN strings may be 100K 50 50K 50 50K 200 50 5M 2.5M 500M 507.5M With string pooling the total size of all DN strings may be 100K 50 50K 50 5M 2.5M 7.5M

The business component layer may enforce TTL on cached directory objects. The creation time in milliseconds may be set on each model object User DistributionList Group RecipientRef UserRef and InvalidRecipient before adding it to the cache. Upon retrieval the creation time may be compared to the current time to determine if the object has expired. If the object has expired then an attempt may be made to refresh the object from the data source. If a data source connection failure occurs then the expired object may be used instead.

To prevent many cached objects from expiring at the same time a TTL spread factor may be set on each object before adding it to the cache. The TTL spread factor may be used to randomize the TTL within a range of 101 discrete values between min TTL and max TTL. The expiration time of an object may be calculated as follows expirationTime creationTime minTTL maxTTL minTTL TTLSpreadFactor 100.00 where creationTime may be in seconds minTTL may be the minimum Time To Live in seconds maxTTL may be the maximum Time To Live in seconds and TTLSpreadFactor may be a randomly chosen number between 0 and 100 inclusive . For example if min TTL is 43200 seconds 12 hours and max TTL is 129600 seconds 36 hours then cached objects may expire sometime between 12 and 36 hours as dictated by their ttlSpreadFactor values. The TTLSpreadFactor may not apply to invalid recipients.

If the system clock is changed the expiration time on objects already in the cache may increase or decrease accordingly.

A common task to all the directory functions may be to find a recipient among the caches and data sources associated with a profile. The cache first search algorithm and how it relates to each directory function is described below.

The cache first search algorithm may begin by searching the cache instances for the recipient until the recipient is found or there are no more caches to search. If the recipient is not found in a cache it then searches data sources that don t have a negative cache entry for the recipient. If the recipient is found in exactly one data source it adds the recipient to the associated cache. If the recipient is not unique it returns an error. If the recipient is not found in any data source then it adds a negative cache entry to each cache. This logic may ensure that the lookup address is unique across all data sources.

This recipient search may be a cache first search. However if the lookup address is not unique then true may be returned instead of error.

Address resolution may begin with a cache first search for the recipient. Then using the data source containing the recipient recursively fetch the recipient s descendants. If the recipient or any of its descendants is a user or an empty distribution list then add it to the list of user targets. Next for each user target populate its group memberships. Group memberships may be built in a background thread.

Quarantine authentication begins with a cache first search for the user. If the user is found then authenticate the user against the associated data source.

Uniqueness of lookup address and username may be enforced in the data access and business layers. The following general statements may be true 

The cache first search algorithm ensures uniqueness of the lookup address and username across all data sources within a profile.

A cached object may be indexed by lookup address or username and may not be indexed by an attribute value that has not been tested for uniqueness across the data sources within a profile.

A cached object may not be retested for uniqueness for as long as it exists in the cache. This may be true even when the cached object has exceeded its TTL.

When a new data source is added to an existing profile the cached entries created prior to the new data source may not be tested for uniqueness against the newly added data source.

A cache may be invalidated if any the following changes ddsConfig dataSources dataSourceLDAP directoryType ddsConfig dataSources dataSourceLDAP servers server hosts ddsConfig dataSources dataSourceLDAP servers server port ddsConfig dataSources dataSourceLDAP functions 

Cached directory objects that have exceeded their TTL may be kept in the event of an LDAP connection failure.

Circular group and distribution list membership references may not cause circular processing. This may apply to address resolution only. A list of visited nodes may be used to prevent infinite recursion. There may be no limit to the number of nested groups traversed.

The Minimum and Maximum TTL on cached directory objects may be configurable for each directory data source.

The cache size may be configurable for each directory data source as the associated cache index sizes.

The caches for each directory data source can be individually cleared by a Control Center administrator.

In addition to a mail attribute value an administrator of one or more types of mail servers may configure their server to accept email for a user based on their first name and or last name or a number of combinations of the thereof.

A mail server configured to receive mail for eng.symantec.com and aliasdomain.com may be configured to recognize one or more of the following as valid recipients 

Because a mail server administrator may configure their server not to support these aliases for instance considering the mail attribute values as the only deliverable addresses for a user the administrator may also be able to configure their directory server query to be inclusive or exclusive of these different address forms. Large mail server deployments may use only the uid and mail attribute values as deliverable addresses. Such a configuration continuing the example above would support the following addresses 

Note here the use of the n token which may substitute a white space character for a period or underscore in the local part of an email address such that john.bigboote eng.symantec.com or john bigboote eng.symantec.com becomes cn john bigboote .

If the administrator also allows aliasing to a user s first and last name the query may be changed to

When aliasing on first and last name is allowed it may be far more likely that a namespace collision may occur between two or more user entries having the same first and or last name. For instance if our hypothetical directory server also contained an entry like

An SMTP server itself may handle an attempted delivery to john aliasdomain.com by returning a 5xx error to the SMTP client with a text message that the recipient can t be uniquely identified. Since the directory data service LDAP query may return two entries for which givenName john the condition may be handled as a data integrity error as described above.

As illustrated in exemplary full addresses local portions of email addresses corresponding full names and exemplary queries are illustrated in element . An exemplary directory entry is illustrated in element . Some directory servers e.g. IBM Lotus Domino may support a plurality of email aliases for a directory entry. As illustrated in element multiple email aliases may be supported for the directory entry listed in element . As illustrated in elements and if a query is received to validate an email address of john smith domain.com a directory server query using tokens s and u may not find the directory entry. However as depicted in elements and if a n token is used to query on a fullname a match may be found. A n token may replace periods or underscores in a local part of an email address with a space to derive a fullname for querying.

At this point it should be noted that directory server integration in accordance with the present disclosure as described above typically involves the processing of input data and the generation of output data to some extent. This input data processing and output data generation may be implemented in hardware or software. For example specific electronic components may be employed in a directory data service or similar or related circuitry for implementing the functions associated with directory server integration in accordance with the present disclosure as described above. Alternatively one or more processors operating in accordance with instructions may implement the functions associated with directory server integration in accordance with the present disclosure as described above. If such is the case it is within the scope of the present disclosure that such instructions may be stored on one or more processor readable storage media e.g. a magnetic disk or other storage medium or transmitted to one or more processors via one or more signals embodied in one or more carrier waves.

The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed other various embodiments of and modifications to the present disclosure in addition to those described herein will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further although the present disclosure has been described herein in the context of a particular implementation in a particular environment for a particular purpose those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.

