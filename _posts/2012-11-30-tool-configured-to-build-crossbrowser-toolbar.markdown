---

title: Tool configured to build cross-browser toolbar
abstract: A tool configured to build a cross-browser toolbar is provided. The tool includes a processor; and a memory coupled to the processor and configured to store at least instructions for execution of a wizard program by the processor, the wizard program causes to: receive an input identifying at least user interface elements and event handlers respective of the user interface elements, the input further identifies at least two different types of a web browser on which the toolbar can be executed; generate respective of the received input a toolbar render object, a script file, and at least one toolbar library for each type of web browser; and compile the toolbar render object, the script file, and the least one toolbar library into an installer file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08893097&OS=08893097&RS=08893097
owner: Visicom Media Inc.
number: 08893097
owner_city: Brossard (Quebec)
owner_country: CA
publication_date: 20121130
---
This patent application is a continuation of patent application Ser. No. 12 270 421 now allowed filed on Nov. 13 2008 which is hereby incorporated by reference for all that it contains.

Web browsers are software applications that enable the viewing of information accessible on the World Wide Web or Web . At its most basic the Web is a collection of documents written using programming languages that web browsers can interpret. Such languages include for example a hyper text markup language HTML an eXtensible markup language XML and the like. Microsoft Internet Explorer Mozilla Firefox Safari and Opera are just to name a few examples of web browsers.

Browser extensions are applications such as plug ins or add ons that are downloaded and installed on an individual computing device on which a web browser is operating. The browser extensions are compiled separately for each type of web browser. A prime example for a browser extension is a downloadable toolbar. When installed a toolbar allows users to customize their browsing experience.

The process of creating a downloadable toolbar includes developing a software application compatible with a specific browser type and storing an executable application in a web server. The software application embodying the toolbar typically includes functional buttons search windows and application programming interfaces APIs for other plug ins and interfaces. A user may download the executable application from a web server to a local computing device and run the application thereon causing the toolbar to be integrated in the web browser.

There are some disadvantages with the current process of developing toolbars. Such a process requires programming and compiling software code for each type of web browser. Thus a new version of the same toolbar should be developed for each web browser s type. This is typically performed by software developers who specialized in developing toolbars. Thus existing toolbars are proprietary and in most cases not extensible.

Therefore it would be advantageous to provide an automated solution for generating toolbars. It would be further advantageous to provide a solution for generating cross browser toolbars.

Certain embodiments include a method for rendering a cross platform toolbar. The method comprises providing a toolbar document object TDO wherein the TDO includes elements enabling cross browser interoperability and translating at runtime the TDO to a specific browser document object model DOM of a web browser type on which the toolbar is being rendered.

Certain embodiments also include a method for generating a cross browser toolbar. The method comprises generating a toolbar render object defining at least user interface elements of the cross browser toolbar generating a script file defining at least event handlers associated with the user interface elements generating toolbar libraries including at least application programming interfaces APIs and script files supporting a specific web browser type assigning a unique dynamic link library DLL file with the toolbar libraries and the script file and compiling the toolbar render object the script file the toolbar libraries and the DLL file into an installer file adapted to enable the installation of the cross browser toolbar in the specific web browser type.

Certain embodiments further include a cross platform toolbar. The cross platform toolbar comprises a toolbar render object defining at least user interface elements of the cross browser toolbar a script file defining at least event handlers associated with the user interface elements toolbar libraries including at least application programming interfaces APIs and script files supporting a specific web browser type and a unique dynamic link library DLL file assigned with the toolbar libraries and the script file.

It is important to note that the embodiments disclosed by the invention are only examples of the many advantageous uses of the innovative teachings herein. In general statements made in the specification of the present application do not necessarily limit any of the various claimed inventions. Moreover some statements may apply to some inventive features but not to others. In general unless otherwise indicated singular elements may be in plural and vice versa with no loss of generality. In the drawings like numerals refer to like parts through several views.

Other files required for generating the cross browser toolbar are stored in toolbar libraries . The libraries contain at least files that provide low level APIs as well as XML and script files to support the different types of browsers . A toolbar builder generates toolbar installer files though N each of which is targeted to a different type of a web browser . For example an installer file may be installed and executed over an Internet Explorer browser while an installer file N may perform the same over a Firefox browser. The toolbar builder creates a specific installer file by selecting files from the toolbar libraries which are executable over a specific type of a browser and assigning unique dynamic link library DLL files with the scripts in source files and relevant portions of the libraries . For instance to generate the installer file only files in the libraries executable over an Internet Explorer browser are selected. In addition the toolbar builder encapsulates these relevant files from the libraries the source files and optionally a unique DLL file into a downloadable file. For example an installer file N targeted to a Firefox browser may not include a DLL file. In another embodiment the toolbar builder may further output update files not shown including new elements and or fixes that do not exist in previous versions of an already installed toolbar.

In a preferred embodiment of the invention the toolbar builder may be a wizard application that allows developing a toolbar without coding writing or providing any of the source files . In such embodiment a wizard executed by the toolbar builder prompts the users to select user interface elements and event handlers of such elements through a graphical user interface GUI . Based on the user selections the wizard generates the source files. The user is also prompted to select the type of web browsers on which he she would like to run the toolbar. Thereafter the toolbar builder creates the installer files each of which includes the self generated source files and targeted to a different type of a browser.

Users can download the installer files to their computer s local hard drive and install using an installation program the toolbar on their browsers . As shown in the installation program outputs a script file a DLL file a toolbar render object and toolbar libraries that include portions of the libraries relevant to the target browser. In one embodiment the script file the DLL file the toolbar render object and the toolbar libraries output by the installation program may be encrypted. It should be noted that the DLL file and a toolbar render object are dependent on the type of browser. As an example for Internet Explorer the DLL file enables the interaction with the toolbar at runtime and the toolbar render object is a HTML render i.e. capable of rendering HTML elements . In a Firefox environment the toolbar render object is an XML user interface language XUL render i.e. capable of rendering XUL elements and the DLL file is a binary DLL that provides security features.

In accordance with the embodiments disclosed herein the generated toolbar is based on a toolbar document object TDO having a structure similar to a standard document object model DOM but with enhanced functionality. Generally most types of browsers support a DOM which is an API for HTML and XML documents. The DOM provides a structural representation of the document enabling modification its content and visual presentation. That is a DOM connects web pages to scripts or applications.

In an embodiment of the invention the TDO has a tree representation where each node in the tree is a user interface element. These elements support standard tags e.g. XUL tags and special tags. The special tags are a set of tags designed to provide enhanced toolbar functions referred to as special functions. Examples for such tags include but are not limited to a search bar for providing a search engine input field a RSS button for accessing RSS feeds a web inspector button for performing background anti phishing checks a widget menu popup providing a list of widgets and so on. A special tag may include a set of attributes allowing for customizing a special function defined by the special tag. Such attributes may include but are not limited to on get options verifying image low risk image high risk image verified image white list image black list image no rating image on get options on add widget on widget done on remove widget on get prefpane and so on. In one embodiment the special tags may be XML based tags. The special tags are stored in the toolbar libraries . The set of special tags can be extended by developers who may provide their own set of tags and functions.

In accordance with an embodiment of the invention one of the elements of a TDO is a widget which may be an application or a control executed from a toolbar. A toolbar can be pre installed with a list of widgets or such widgets may be added to the toolbar by dragging a widget from a central repository and dropping the widget to the toolbar. Widgets may include but are not limited to a media player an online game an online interactive program visual animations and so on.

TDO and DOM are memory structures created at runtime in a local memory of a computing device allocated for the execution of a browser. As mentioned above the execution of a toolbar generated in accordance with the principles of the invention is allowed by translating the TDO to a browser specific DOM of a target browser at runtime. This process is further illustrated using a flowchart shown in .

At S TDO elements are translated into one or more browser specific DOM elements. For instance when targeting a HTML DOM for Internet Explorer a TDO toolbar button element is rendered by a HTML table which contains specific table cell elements for a button s border a icon label and button s dropdown area. As another example in a Firefox browser a button element defined in the TDO is rendered as a single XUL DOM element of type toolbarbutton . At S event handlers are mapped from events of the TDO to events of the browser specific DOM. The events may be triggered by an input device e.g. a mouse a keyboard etc. . Step S is performed after rendering the browser specific DOM in order to increase the performance in cases of complex user interfaces. This also allows tracking memory management by determining which events are connected to ensure that such events are later properly disconnected thereby breaking circular dependencies resulting in memory leaks in browser specific DOMs. At S when TDO elements are discarded circular dependencies and script closures on event handlers are disconnected. This ensures that the memory can be properly reclaimed by a browser specific garbage collector.

At runtime a DLL file is loaded to an instance of an IE browser. The DLL manages a web browser control a toolbar loader and an API bridge . The control hosts the TDO and allows rendering the toolbar using the process described in detail above. The API bridge provides an interface for communicating with other software applications running on the local computing device. In accordance with one embodiment the toolbar loader is adapted to support a chrome protocol by providing a mechanism to enable chrome protocol functionality in an IE instance that executes the toolbar. For example this allows to chrome URLs look and perform as same as in a Firefox browser thereby achieving cross browser interoperability. It should be appreciated by one of ordinary skill in the art that the chrome protocol is a proprietary protocol of Mozilla Firefox and is not supported by Internet Explorer browsers. The toolbar load is further adapted to retrieve information from the script file the HTML render object and the toolbar libraries stored in the local hard drive.

In accordance with one embodiment the cross browser toolbar may be developed using asynchronous JavaScript and XML AJAX techniques while supporting scripting and programming languages including for example XML HTML and JavaScript.

The embodiment disclosed herein can be implemented in hardware software firmware or any combinations thereof. The software may be implemented as an application program tangibly embodied on a program storage unit or computer readable medium. The application program may be uploaded to and executed by a machine comprising any suitable architecture for example a computer platform having hardware such as one or more central processing units CPUs a random access memory RAM and input output I O interfaces. The computer platform may also include an operating system and microinstruction code. The various processes and functions described herein may be either part of the microinstruction code or part of the application program or any combination thereof which may be executed by a CPU whether or not such computer or processor is explicitly shown.

It is to be further understood that because some of the constituent system components and methods depicted in the accompanying drawings are preferably implemented in software the actual connections between the system components or the process function blocks may differ depending upon the manner in which the present invention is programmed. Given the teachings herein one of ordinary skill in the pertinent art will be able to contemplate these and similar implementations or configurations of the present invention. All examples and conditional language recited herein are intended for pedagogical purposes to aid the reader in understanding the principles of the invention and the concepts contributed by the inventors to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions.

All statements herein reciting principles aspects and embodiments of the invention as well as specific examples thereof are intended to encompass both structural and functional equivalents thereof. It is intended that such equivalents include both currently known equivalents as well as equivalents developed in the future i.e. any elements developed that perform the same function regardless of structure. Other hardware conventional and or custom may also be included.

