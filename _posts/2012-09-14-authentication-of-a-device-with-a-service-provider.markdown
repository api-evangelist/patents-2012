---

title: Authentication of a device with a service provider
abstract: A service provider may provide one or more services to and/or for a client. Providing a service may involve receiving a service request including a security token at the service provider and determining whether the security token is valid. Providing the service may also involve determining a session security token if the security token is valid and generating a service response including the session security token. Providing the service may further involve receiving a service request including the session security token, determining whether the session security token is valid, and, if the session security token is valid, generating a second service response.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08893239&OS=08893239&RS=08893239
owner: Facebook, Inc.
number: 08893239
owner_city: Menlo Park
owner_country: US
publication_date: 20120914
---
The present application is a continuation of U.S. application number Ser. No. 13 219 938 filed Aug. 29 2011 which is a continuation of U.S. application number Ser. No. 11 079 709 filed Mar. 14 2005 which is now issued as U.S. Pat. No. 8 010 783 which claims the benefit of and priority to U.S. provisional application No. 60 651 471 filed Jan. 7 2005 and U.S. provisional application No. 60 562 659 filed Apr. 15 2004. Each of the aforementioned patent s and application s are hereby incorporated by reference in their entirety.

This invention relates to computer networking and more particularly to providing computer related services.

In general a client may receive data from a server in either of two ways. One way is for a browser or other client side application to request new data from the server often referred to as pulling data . Another way is for the server to send data to the client as the data becomes available often referred to as pushing data .

Before consuming resources by sending data however a server may desire to understand what and or who is requesting the data. Clients and users may be identified and validated through a variety of techniques such as passwords security tokens and certificates. For state cognizant protocols the client or user is typically validated once at the beginning of the session. For stateless protocols however the client or user may have to be validated for each client server interaction.

A service provider may provide service to and or for a client by a variety of techniques. In one general aspect a process for invoking a service provider includes receiving a service request at the service provider the request including a security token and determining whether the security token is valid. If the security token is valid the process calls for determining a session security token and generating a service response including the session security token. The process further calls for receiving a service request the request including the session security token determining whether the session security token is valid and if the session security token is valid generating a second service response. The process may be implemented by machine instructions embodied in an information carrier or any other appropriate technique.

In particular implementations determining a session security token may include determining whether a session security token should be generated and if a session security token should be generated generating the session security token. Also the second service response may specify that future service requests should be sent to a different service provider.

Certain implementations may include determining whether one or more of the security tokens has become invalid. If the first security token has become invalid or if the session security token has become invalid the process may call for canceling the session security token.

The process also may call for determining whether a request to update the session security token has been received. If a request to update the session security token has been received the process may include validating the request and updating the session security token if the request is valid.

The process additionally may call for receiving a third service request the request including the session security token and determining whether the session security token is valid. If the session security token is valid the process may call for determining a second session security token and generating a service response including the second session security token.

The requests and responses may be expressed in a self describing protocol which may for example be the Simple Object Access Protocol. The service request may for example be a data service request the service provider may for example be a data service provider and the session security token may for example be a data session security token. In certain implementations the security token may be received in a first request header type and the session security token may be received in a second request header type.

In another general aspect a process for invoking a service provider includes generating a service request at a client the request including a security token and directed to a service provider and receiving a service response including a session security token. The process also includes generating a second service request the second request including the session security token and directed to the service provider. The process may be implemented by machine instructions embodied in an information carrier or any other appropriate scheme.

In certain implementations the process may include monitoring the validity period of the session security token and if the session security token is about to expire determining whether the session should continue. If the session should continue the process may call for generating a request to update the session security token.

The security token may be placed in a first request header type and the session security token may be placed in a second request header type. The process also may call for receiving a second service response the response including a second session security token.

Various implementations may have one or more features. In particular implementations the ability of a service provider to substitute a self determined security token for an externally generated security token allows the service provider to achieve efficiencies on subsequent service requests that it receives. Also the service provider may manage e.g. update or change the self determined security token as it desires. In certain implementations the service provider may also cache other session related information at a client. This information also may allow the service provider to achieve efficiencies on subsequent service requests that it receives.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings and from the claims.

Service providers may offer a variety of services to and or for a client. For example a digital data service provider may provide digital content e.g. audio and video to a client. Providing the content may be improved by shortening the security authentication sequence between the service provider and the client. In one implementation this may be accomplished by a service provider providing the client with a second security token after verifying the client with a first security token. The second security token may be processed more readily by the service provider and is used in place of the first security token for subsequent requests to the service provider. Other types of service providers e.g. content management and action initiating may experience similar benefits.

In more detail user interface device may be any type of device for providing or facilitating the provision of digital data to a user. For example user interface device may be a consumer electronic device such as a multimedia device a digital media adapter or a digital television. System is also applicable to clients running on a computer such as a PC Radio Client . User interface device may enter into a client server relationship with service infrastructure and or service provider to receive the service.

User interface device typically includes a processor memory a network interface device a user input device and a user output device. The processor may be a microprocessor a field programmable gate array FPGA or any other type of device for manipulating information in a logical manner. The memory may include random access memory RAM read only memory ROM compact disk read only memory CD ROM and or any other device for storing information. The network interface device may be a network interface card NIC a modem a wireless transceiver or any other type of device for sending and receiving information. The user input device may be a keyboard a keypad a stylus a mouse or any other type of device for receiving input from a user. The user output device may provide audible visual or other appropriate information to the user.

The communication network may be any appropriate collection of components for sending information. For example the communication network may include bridges switches routers hubs repeaters transceivers modems and or any other device for conveying information. The communication network may be a local area network LAN a wide area network WAN or the Internet. The communication network may operate using wireline and or wireless techniques.

Service infrastructure provides the core services used to identify manage and create user accounts whose services are being deployed to user interface device . Service infrastructure includes an authentication service a discovery service a registration service and a billing service . Authentication service is responsible for authenticating user interface device when it applies for data service and generating security tokens used within the framework to obtain access to services. The authentication may take place through any of a variety of well known techniques e.g. X.509 certificates . Discovery service is responsible for finding service providers for user interface device . Discovery service may accomplish this based on a subscription list for the user interface device the capabilities of the user interface and or the current availability of service providers. Registration service is responsible for registering user interface device for the service infrastructure. Registration may include establishing factual information about the owner of the user interface device preference information for the owner of the user interface device and the capabilities of the user interface device. Billing service is responsible for tracking the use of service providers by user interface device and determining the amount to charge the owner of the user interface device. The operations of several of the services in service infrastructure will be discussed in more detail below.

Service provider provides the actual data service to user interface device . Service provider includes a command control component and a data feed component . Command control component is responsible for managing the user interface device s access to data and data feed component is responsible for actually supplying the requested data.

Service infrastructure and service provider and their respective components may be implemented on one or more devices or systems. In particular implementations service infrastructure may be implemented on a first server and service provider may be implemented on a second server. The servers may or may not be co located. In certain implementations however service infrastructure and service provider may be implemented on the same server.

In one mode of operation service infrastructure and service provider implement a web services interface framework upon which service applications such as a radio service or a photo service may be built. The framework may provide for the provisioning of services to consumer electronics devices. The basic structure of the framework may be based upon existing identity based web services standards such as Web Services Security and the Liberty Alliance specifications. The framework may provide the following functionality 1 authentication both user and device 2 service location and authorization 3 message security and 4 message correlation. An application programming interface API may be provided for the service infrastructure and or the service provider.

In this implementation the Simple Object Access Protocol SOAP may be used to allow user interface device to interact with services of service infrastructure and command control component of service provider . However the data flow from the service provider may be in any appropriate format for the data. For example if service provider is a radio service an Ultravox streaming feed may be used.

In a typical procedure API calls are made to authentication service and discovery service . Framework surrounding calls are made to the remaining services including the framework for the command control calls to the data services .

The procedure could include user interface device authenticating with authentication service . After authentication by authentication service user interface device queries the location of service providers such as service provider from discovery service which returns the service provider location and a security token for the service provider. User interface device then invokes service at that the specified service provider location using the provided security token. Typically user interface device will interact with command control component of service provider over a series of messages. By doing this a session is established with the service provider.

Upon verification data service provider may determine a security token to be used for further service requests during the session. A session may be viewed as the time period in which a user interface device is interacting with a service provider whether or not a persistent connection is maintained. However there may be long time periods in which the service provider does not receive any requests from the user interface device e.g. when the service provider is steadily streaming data to the user interface device . Thus a session may be viewed as the time in which the service provider and the user interface device are communicating even if it is predominantly one way or the time in which the service provider is expecting the user interface device to interact with the service provider. For example a security token may be valid for a given period of time. Thus a session may be viewed as the time that a security token is valid.

Upon selecting a particular aspect of the service the user interface device receives instructions for accessing the appropriate data feed. The user interface device then invokes the data feed for the service directly.

Note however that there may be many variations on this theme for different services and for different user environments. In some cases for example the discovery request may be included in the final authentication submission. In certain cases the service provider will not have a data feed and will expose its entire set of services via the web services interface.

As mentioned previously system may be used for provisioning services to services to consumer electronic devices. The typical case is for a consumer to purchase an enabled device plug it in and potentially with some personalization access services on the device. System may support both proprietary and non proprietary services as well as the provisioning of proprietary services to both proprietary and non proprietary users and devices as long as they are authenticated. For example non proprietary ISP customers may be authenticated so that they may access proprietary services.

Some basic use cases that may be enabled are outlined below. Note however that this set of use cases is not expected to be comprehensive just exemplary of what the framework may enable.

In the first case a long time customer of a particular service provider purchases a digital media device from an electronics store. When he plugs in the device it asks if he is a customer of the service provider. Since he is he responds affirmatively and provides his user authentication information to the device. The device authenticates to the service provider and downloads the customer s personalization settings for particular services e.g. radio extending the customer s service provider experience to a new device.

In the second case a new user purchases a device and plugs it in. However she is not a customer of the service provider. Thus when she is asked about being a customer she replies that she is not. If she does not want to create an account at this time she may still be able to access some services although possibly a little more restrictive than an existing customer and without the personalizations. In the future she may upgrade her device to receive the full personalized experience for example by subscribing to a stand alone radio service.

In a third case an existing customer purchases a premium device. When he brings it home and plugs it in the device authenticates into the framework as itself and the full personalized radio service able to store user presets access the full range of radio content etc. is accessed. In this case the customer having purchased other such devices associates this device with his network account and the device is able to retrieve his existing set of station presets.

As may be seen in message include two main portions a header section and a body section . Header section includes session headers and a web services security header which contain message and user device identification and security information and body section includes a service request response which contains the actual request response for the service. A response is very similar to a request except that it usually does not contain a security header .

Header section may include a correlation header . A header contains the message identity information for the message such as the message identifier timestamp etc. The header may have the attributes shown in Table 1. A sample header is 

Header section also may include a device type header . A header is used to identify the device software making the request. This information is used for statistical purposes as well as to validate the sanity of the request for example a request to access a billing service on a device that has no e commerce capabilities will likely be refused . The header may have the attributes shown in Table 2. A sample header is 

Note that some applications may use an inappropriate header in an attempt to impersonate a user interface device. Therefore it is the better security practice that this information be trusted. 

Header section additionally may include a redirect to header . A header is used to redirect the user interface device to a new endpoint for subsequent requests for a service. There are several instances where this may be used including 1 to direct the requestor to the specific server within a server farm that handles the requests associated with a session or perhaps with a user and 2 to migrate an existing session or user to a new server perhaps because of maintenance on the current server . Note that the term session may be whatever the server thinks of as a session. The header basically allows the server to direct the requestor to a specific entry point for further communications. The header may have the attributes shown in Table 3. An example header is 

The service may reject the current request in conjunction with returning a header essentially telling the user interface device to resubmit its request to the new endPoint . In such a case the server may return a SOAP fault with set to Client.EndPointChange.ReSubmit . An example response for this case is 

Header section may further include a service session context header . This header may be used to return session context information to a service that has passed such information in a previous response. In general when a service returns a header the user interface device should use the context in subsequent calls to the same service. Typically this information is not included on the initial request. However the service may upon processing the initial request return a context definition in the response that should be used on subsequent requests to the same provider.

The header may be used to allow a service to cache session information e.g. session identifiers and system identifiers and authentication information in the user interface device in a native format for the service. For example the device may store state information when interacting with a Web site e.g. cart status . This may allow the device to operate in a server independent format. In implementations in which the state information is stored on a server a session ID may be created in the server that indexes to the state information of the service. The service may take steps to protect this information from use and manipulation at the device typically through some form of encryption hashing .

Note that the header may change for each request i.e. the service may return a new session context on each response and this context should be used for the next service request . Table 4 illustrates example attributes of the header. An example header is 

A may become invalid for many reasons including an expiration of the validity period or a service side session cancellation. In such a case the service may return a SOAP error to the user interface device with set to Client.ServiceSessionContext.Invalid . An example of such a response is 

The recovery from such an error may depend upon several factors. In one implementation the user interface device first checks the validity period for the security token that the user interface device initially received for the service being invoked. If the token is still valid the user interface device resubmits the request with the token. If the token is not still valid or if the resubmission does not work the user interface device checks the validity period for the security token obtained during the initial authentication process. If that token is still valid the user interface device submits a discovery service request to obtain a new service security token and then invokes the service again. If however the validity period of both tokens has expired the user interface device starts over with an initial authentication. The user interface device may avoid expired validity periods by using a security token renewal process an example of which is described later.

Header section also includes web services security header . A header may be used to identify and authenticate a user to the service. An example header is 

The framework may use Liberty Alliance assertions as the security tokens for securely transferring identity information to the various services including information about when where and how a user was authenticated as well as her identity at the service. An example security token in this case a token generated for the discovery service by the authentication service is 

Although this structure contains a relatively large amount of data the basic paradigm is that the assertion includes several statements about the Subject which in this case is the user. Those statements include authentication statements attribute statements and authorization decision statements. An authentication statement defines how and when the user was authenticated and certain implementations may have one of these statements in each assertion. An attribute statement defines attributes of the user and certain implementations will use this to set data for the user such as a parental control settings. An authorization decision statement contains authorization information about the user typically for the service being invoked.

The Liberty Alliance assertion which is based upon the Security Association Markup Language SAML assertion contains a large number of optional parameters and settings that are useful in many circumstances. Thus many implementations are possible with respect to the fields available within the structure.

For example within the element the NotBefore element may not be used. Instead the IssueInstant element found in the surrounding element may be used as the beginning of the validity period for the assertion.

As another example within the element the element may not be used. Security tokens may for instance be bearer tokens.

As a further example within the element with proprietary provided services the Liberty Alliance affiliation concept may be used. Thus in general the element will be http .com i.e. the affiliation for the user and the will be urn liberty iff nameid federated .

When the service provider is a proprietary service the element may hold the user s screen name e.g. a proprietary service account or an alternative identifier for the user that is valid at that service. For non proprietary service providers this field may contain Liberty Alliance compliant pseudonyms for the user at that service.

For proprietary service accounts the user s parental controls status if available may be included in an within the assertion. Note that because of the way that this is defined in SAML the same element is repeated here since this is a different statement from the . The valid settings for this could include Kids Only Young Teen and Mature Teen. If this attribute is not present the account may be unrestricted. An example statement is 

When device authentication which will be discussed in more detail below is used a product code e.g. the universal product code UPC for the device may be included in an within the assertion generated for the discovery service. It may however be excluded in subsequent authentication events.

In particular implementations a specialized authentication context may be used when a specific device that has been associated with a user account has authenticated over a protected transport e.g. TLS . Such an authentication context is available from AOL as a schema entitled AssociatedDeviceProtectedTransport. This token may be used when the device has initiated device authentication. One of the existing Liberty Alliance authentication contexts may also be used.

For data validation assertions may be signed by the issuer e.g. the authentication authority . As with the Liberty Alliance specifications signed XML entities may adhere to the XML Signature Profile constraints.

In certain implementations keyed hash message authentication code HMAC digital signatures may be used for same issuer to same provider assertions. To implement this calls similar to those in user agent service UAS for maintaining signatures may be used. In other implementations public key signatures may be used. In particular implementations besides the assertion itself messages may not be signed. For example the assertion may be treated as a bearer token and the communications path and the bearer may be trusted to ensure that the token is not stolen.

Because of its flexibility SOAP implemented request and response messages may have a variety of formats. An example of a SOAP implemented request message is 

The response message is thus tied to the request message. However there may be several differences between the request and the response. For example the messageID attribute data from the request is contained within the refToMessageID attribute in the response. This is how requests and responses are paired together. As another example the response includes its own messageID attribute should the recipient i.e. the requestor need to refer to this message in a subsequent message to the other device. Also there is no header in a response. The response only goes to the requestor so there is no need to authenticate the user back to the requestor. As a further example the response includes a header which may be included on subsequent requests made to the same service provider.

Body section of message includes the service request and or the response to such a request. The individual requests are identified and responses are defined by each respective service.

For enhanced security messages may be submitted over a secure channel typically Secure Sockets Layer SSL such that they are not susceptible to man in the middle attacks and they do not expose potentially dangerous information. Replay attacks may be prevented through the combination of the SSL protected communications path in conjunction with non reusable message identifiers in the correlation header of each message.

In particular implementations an authentication service validates the authentication credentials provided by the user interface device and generates security tokens used within the framework to obtain access to services. The authentication process takes place over a series of messages and varies depending upon whether a user or a user interface device is being authenticated. The authentication may be based on the Liberty Alliance s Simple Authentication and Security Layer SASL authentication specification although various clarifications extensions may be used.

For example the supported authentication methods may be limited e.g. CRAM MD5 SECURID and PLAIN . Also the authentication process may be extended with the inclusion of a new element which may contain the authentication request wrapping the SASLRequest . This element may contain the attributes shown in Table 5.

For an authentication token renewal the element may have the renew attribute set to true and no sub elements. Otherwise element may have one element and may contain zero or more elements.

The contexts usage for the element is described in more detail below. In general the elements are used on a request when the requested authentication method is a proof of possession type of authentication and the service has implemented some level of password massaging prior to performing a comparison. Without the directives password based authentication may be restricted to PLAIN so that the service may perform the massaging itself.

A new header element may be added to contain the service response to the . The response may include one and may include zero or more instances of the element that is described below.

The directives are designed to allow both the requestor and the responder to use the same rules for processing the password prior to using the password in the authentication calculations. If both sides are not using the same directives it is likely that the two will have trouble matching the data in proof of possession type authentication methods. Table 6 illustrates the attributes that may be used when password processing is needed. However if neither side does any processing and uses the literal input provided by the user none of these directives may be necessary. In these instances the element may be omitted.

The directives should be applied in the order specified in the order attribute e.g. if truncate is first in the list truncation is performed before applying subsequent rules . If the order attribute is missing or if there are multiple elements that have the same value for order the order in which those elements are processed relative to each other is undefined. Otherwise the element with the lowest relative value will be processed first followed by the element with the next lowest value.

Additionally the SASL mechanisms in the may be moved from the value area of the element to a mechanism attribute. Thus it does not conflict with the location of challenge data that may be stored in the value area of the response.

Authentication security tokens generated by the authentication service may have relatively short validity periods. The periods may typically be much shorter than some of the user interface device sessions e.g. even with tokens good for 24 hours many devices may be always on and thus never log out . The user interface device has several options to deal with this situation for example re authentication and renewal. For re authentication when the user interface device needs to invoke further services and the validity period has expired the user interface device initiates the authentication process again to obtain a new security token by again presenting the authentication credentials. For renewal the user interface device submits a renewal request to the authentication service which should take place before the end of the validity period for the token although the authentication service may choose to accept an expired token within a narrow window following the validity period. The user interface device is expected to monitor the validity period of the security tokens obtained through the authentication process and if it needs to continue operations in which it would submit requests beyond the defined period the user interface device should submit a renewal prior to the expiration of the validity period. Because different systems may have time clocks that are out of sync the renewal request should be submitted early enough to reasonably ensure that time sync issues do not cause a failure for the renewal. If a renewal fails perhaps because the service has chosen not to renew the request e.g. the service may choose to only renew a token X times and the user interface device does have a request that it needs to submit the device will need to initiate the full authentication process to re authenticate using its credentials.

User authentication may be handled somewhat differently than device authentication. For consumer electronic devices user authentication is typically only needed for the device registration step and will frequently be performed by the user via some alternative means e.g. web registration or phone registration . Once the device is associated with a user account most actions will probably take place via the device authentication process. But there may be cases such as high valued transactions like product purchases where a user authentication may be necessary even though the device has already been authenticated and there may be advanced devices that will perform the device association process directly. Thus user authentication should be supported by the service.

The user authentication process varies depending upon the information known by the user interface device at the time the authentication is initiated. For example the user interface device may have authenticated the user to the same authentication service previously hence the user interface device would likely remember how the user authenticated previously and attempt to perform the same authentication again directly rather than negotiating the type of authentication to be used.

The following discussion illustrates an example of the negotiation process that could be performed for the initial authentication on a particular user interface device and how this could change for subsequent authentications on the same user interface device. The negotiation process involves a series of messages in which the method of authentication is negotiated and the appropriate credentials are provided to authenticate the user. In the example the data that would be contained in the body of the SOAP message is shown. Other data such as that in the SOAP headers e.g. the correlation header is removed for brevity. Later examples will show a complete set of messages including the SOAP bindings.

When beginning to request a service the user interface device initiates an authentication with the authentication service typically with the mechanism attribute set to a list of supported methods. An example of the message is 

The authentication service responds to the user interface device with a message indicating the method that it has selected to be used for authentication in the mechanism attribute e.g. mechanism CRAM MD5 . If the method requires a challenge value the challenge may be included possibly with base 64 encoding as the value of the sub element.

The authentication service may also include one or more password processing directives in the response in the element in the element. An example element is 

The user interface device processes the password as indicated by the service and returns the results to the server. An example of the authorization request is 

The authentication service then validates the credentials provided by the user interface device and generates a security token to be used for subsequent requests from the device. The security token and discovery service bootstrap are then provided to the device. An example of this response is 

At some point later preferably prior to the token s expiration the user interface device may submit a renewal request. An example renewal request is 

The actual tokens being renewed may be incorporated into the message header in the same fashion used by other post authentication service requests such as a discovery service request. In response the security token and discovery service bootstrap are provided to the user interface device. The basic difference with the token returned in response to this request and the one returned earlier is that the validity period for the assertion will have changed to indicate the renewed status.

It should be noted that there are different ways to perform the authentication operations. However in many cases especially those that are designed around a challenge response mechanism the operations just discussed may be required.

In the case of authentication methods that do not require the service provided challenge such as PLAIN the user interface device may initiate the process directly to the service with an that submits the information on the first message. For example the following message initiates a PLAIN authentication 

Device authentication may differ from user authentication in that it is the device itself that is being authenticated and then provided with access to services that the user has associated with that device. This may prevent the user interface device from having to store user credentials and provides the user interface device access to the services for which the user has performed an association. The device association process may be performed by one of a variety of well known techniques.

Each user interface device may be uniquely identified in order for the authentication to be more secure. The Universal Plug and Play UPnP recommendation of using a UPC code in conjunction with a serial number to identify the device may provide such an identification scheme. In this implementation the device serial number should be non volatile and not changeable by the user.

In cases where the serial number is not available electronically the device may use the hardware assigned Media Access Control MAC address of the network interface as its serial number. In such a case the device should ensure that it always uses the MAC address from the same network interface and that the user cannot change the value used by the device. If the device allows the user to change the MAC address as many routers do the user interface device may use the originally assigned MAC address as its identifier even though it may be using a user assigned MAC address on the network.

With more advanced devices such as those that contain a smart card or those that have an embedded X.509 certificate the device may be identified using information in the certificate smart card.

In general user interface devices may use any of the available authentication methods to authenticate. The specific method chosen will depend upon the capabilities of the device e.g. whether or not it has an X.509 certificate .

Devices not containing enhanced security tokens that may be used for authentication may be authenticated using a password assigned to the manufacturer for that specific model of device on a per UPC code basis . Such devices may use the CRAM MD5 algorithm for authentication.

For the authentication process for a device using the assigned password authentication the device may initiate an authentication with the authentication server usually with the mechanism attribute set to a list of supported methods. An example of the message body is 

In the case where the user interface device supports multiple users such as a stereo receiver that has a different set of presets and stations for different users the device may include the user attribute on the request to specify the user who is attempting to access the service at this point. In such a case a request may look something like 

The authentication service responds to the user interface device with a message indicating the method that the service has selected for authentication in the mechanism attribute e.g. mechanism CRAM MD5 . If the method requires a challenge value the challenge typically base 64 encoded may be provided as the value of the sub element. The authentication service may not use any directives when authenticating a device. An example is 

The user interface device may then perform the next step in the authentication mechanism providing authentication proof to the authentication service. For the above example the device processes the challenge data with the password and submits a new request to the service which includes the results of that process. An example of this request is 

The authentication service may then validate the credentials provided by the device generate a security token to be used for subsequent requests from the device and provide the security token to the device. An example of a message conveying a security token and discovery service bootstrap to the device is 

Service discovery may then be performed. Service discovery allows the user interface device to determine how to communicate with the service provider and to obtain the token s necessary to authenticate the user at that service.

The process and protocols may in general be based upon the Liberty Alliance discovery service and security techniques. In certain implementations various procedures may be made used. For example requests may return security credentials to be included on the subsequent service requests. Once a connection has been established to a particular service this may be accomplished by using a to maintain information for subsequent requests in the same session. For certain services the element may contain urn liberty isf implied resource because the security token in the header will identify the resource being accessed. This may allow element not to be used. However devices may pass whichever of these elements appears in the to the service being invoked. As a further example a different security mechanism may be used. This security mechanism may use TLS to authenticate the service and to provide confidentiality of the messages while a bearer token is used to authenticate the message itself. Such a security mechanism is available from AOL.

In certain implementations the entry point nor its and interfaces may not be exposed. Thus discovery updates may have to take place through other techniques. Also options sub element on the element may not be used.

In order to access a service including the discovery service itself the user interface device may know a substantial amount of information which may be referred to as the resource offering. The resource offering typically contains two key pieces of data 1 an identifier for the resource being accessed and 2 a description of the service being accessed.

With the information provided a user interface device will know to send messages to the for the service which also defines the messages that will be accepted there and knows the required accepted security mechanisms at that service. If additional information is needed the may be used to lookup meta data associated with the provider.

An API for the discovery service may be based on the Liberty Alliance configuration. However not all services features of the configuration have to be implemented. The following will describe one implementation of a discovery service API.

A service discovery request may be used to obtain a security token and communications information in order invoke a service. In particular implementations the request may include a security token that authenticates the requestor and also identifies the user whose information is being accessed.

The discovery service may be located using the that was included with the response to the initial user authentication. An example of the of a service discovery request is 

After discovering services a user interface device may perform service invocation. Service invocation involves taking the information returned from the discovery service and using the information to invoke the requested service.

The following discusses the structure for making a service invocation request but not the details involved with each service provider. The details for a particular service provider may be found in the service specification for the service provider. These specifications may also define the actual APIs that are exposed by the service provider. The framework under discussion however may provide a structure for calling a wide variety if not most service providers.

As described earlier the process for invoking a service generally involves authenticating a user locating a service provider and obtaining security credentials to be used to access the service. The following is an example of a service discovery response 

Based on this response a radio service request could be submitted to the entry point https radio.aol.com. The credential pointed to by the CredentialRef attribute would be included in the header for the message. An example of such a request would be 

The basic structure of service provider allows it to expose two interfaces 1 a SOAP XML command and control API interface that is built upon the framework API described previously and 2 zero or more binary data feeds that are appropriate to the service being delivered to the user interface device. Binary data feeds may for example be an HTTP interface for moving photograph files to from the service or an Ultravox protocol for streaming audio video to a client. Whatever is appropriate to the service being provisioned may be used and some services will likely support multiple binary feed types depending upon the range of clients that they are trying to support. Note however that not all services will have the second interface especially those that are pure text data interfaces such as an address book or a registration service. In such cases the data access may also be based upon the framework API.

Service provider also includes a framework toolkit which sits in front of SOAP XML API interface . Essentially framework toolkit is a service independent toolkit that is standardized across service providers to process the incoming requests of the framework layer so that the service provider does not need to concern itself with the framework operations for messaging e.g. decoding parsing and validating the header information and the structural information in the header . Thus framework toolkit may parse the incoming messages validate the security information establish and maintain session context information and pass to API interface the payload contained within the body of the message along with key information obtained from the SOAP envelope such as the user identity parental control settings etc. . In certain implementations API interface may examine and process the data contained within the SOAP envelope. Framework toolkit is also responsible for wrapping the response messages as appropriate for the protocol including adding the correlation header and session context information.

In cases where a service may rely on other services such as a radio service calling a billing service to authorize a charge for a shipment the framework toolkit may also provide the device side interfaces for such a request allowing service provider to invoke other services including the discovery service lookup and service invocation . The tool kit may hide much of the message structure from service implementation .

Process begins with waiting to receive an initiation request for digital data service from a user interface device operation . The user interface device may for example be a consumer electronic device and the request be expressed in a self describing protocol.

Upon receiving the request the process for calls for determining the authentication technique to use operation . Example authentication techniques include CRAM MD5 SECURID and PLAIN. Determining the authentication technique to use may include examining the capabilities and or preferences of the requesting user interface device. The process continues with generating a data service response operation which specifies the authentication technique.

Process calls for waiting to receive an authentication request from the user interface device operation the authentication request including the security credentials for the user interface device user. Upon receiving an authentication request the process calls for determining whether the authentication request is valid operation . Determining whether the request is valid may include determining whether the requesting user interface device and or user is valid. A user interface device and user may have been previously associated so that validating either one may validate the other. If the authentication request is not valid the process calls for generating an authentication rejection response operation and checking for another data service initiation request operation .

If however the authentication request is valid the process calls for determining discovery service security credentials operation and generating an authentication response operation which includes the discovery service security credentials.

The process waits to receive a service discovery request operation . Upon receiving such a request the process calls for determining which if any service providers are available operation . A service provider may be available if it has the data service to satisfy the request and the current capacity to do so. The process also calls for determining security tokens for the available service providers operation . The process then calls for generating a service discovery response operation which includes information regarding the available service providers and their associated security tokens.

The process continues with waiting to receive a data service invocation request operation . The data service invocation request may be received at a service provider that is remote from the system hosting an authentication service and a discovery service and includes at least one of the security tokens determined earlier. Upon receiving a data service invocation request the process calls for determining whether the request is valid operation . Determining whether the request is valid includes evaluating the security token for the service provider. If the request is not valid the process calls for generating an exception response operation and checking for another data service invocation request operation .

If however the data service invocation request is valid the process calls for determining a data session security token operation . Determining the token may include retrieving a pre existing security token or generating a new security token. The process then calls for generating a data service invocation response operation which includes the data session security token.

The process continues with determining whether a data session request has been received operation a valid data session request including the data session security token. If a data session request has been received the process calls for determining whether the data session request is valid operation . If the data session request is not valid the process calls for generating an exception response operation and returning to check for another data service invocation request operation . If however the data session request is valid the process calls for generating an appropriate data session response operation and checking for another data session request operation .

If a data session request has not been received process calls for determining whether the data service security token is still valid operation . The token may not be valid for example if a predefined period of time has expired. If the security token is not still valid the process calls for checking for a data service initiation request operation .

If however the security token is still valid the process calls for determining whether the data session security token is still valid operation . The token may not be valid for example if a predefined period of time has expired. If the data session security token is not still valid the process calls for checking for a data service invocation request operation . But if the data session security token is still valid the process calls for checking for a data session request operation .

Although illustrates one process for digital data services other processes may include fewer additional and or a different arrangement of operations. For example the authentication information could be sent in the initial data service request especially if the user interface device only has one way to authenticate. As another example the data session security token could be changed on a regular or irregular basis. For instance the token could be changed after every data session request. As an additional example a request may be received to update e.g. renew a data session security token. If the request is valid the data session security token may be updated.

Process begins with generating an initiation request for digital data service operation . The request may for example be generated at a consumer electronic device and be expressed in a self describing protocol.

The process continues with waiting to receive a response that specifies an authentication technique operation . Upon receiving such a response the process calls for generating an authentication request operation . The authentication request may include security credentials for validating a user and or user interface device. The process then calls for waiting to receive an authentication response operation which includes a security token for a discovery service.

Upon receiving the authentication response process calls for generating a service discovery request operation . The service discovery request is directed to a discovery service and includes the security token from the authentication response. The process then calls for waiting for a service discovery response operation . The service discovery response includes information regarding the available service providers and their associated security tokens.

The process continues with selecting a service provider operation and generating a data service invocation request operation . The data service invocation request includes the earlier received security token for the service provider. The process then calls for waiting to receive a data service invocation response operation . The data service invocation response includes a second security token to be used during the data session in place of the security token for the data service. The second security token may be substantially smaller than the security token for the data service allowing for more ready processing.

Process continues with determining whether a data session request should be sent operation . A data session request may be sent for example to initiate a data feed or to modify a data feed. If a data session request should be sent the process calls for generating a data session request operation . The data session request includes the data session security token received previously. The process then calls for waiting to receive a data session response operation and returning to check whether another data session request should be sent operation .

If a data session request should not be sent the process calls for determining whether the data service security token is about to expire operation . If the data service security token is about to expire the process calls for generating another service discovery request operation this one to update the token.

If however the data service security token is not about to expire the process calls for determining whether the data session security token is about to expire operation . If the data service security token is about to expire the process calls for generating another data service invocation request operation this one to update the token. But if the data session security token is not about to expire the process calls for checking whether a data session request should be sent operation .

Although illustrates one process for digital data services other processes may include fewer additional and or a different arrangement of operations. For example the authentication information could be sent in the initial data service request especially if a user interface device only has one way to authenticate. As another example the data session security token could change on a regular or irregular basis. For instance a new token may arrive in every data session response. As an additional example receiving an exception or not renewing a security token before it expires may lead to generating a data service initiation request.

Several systems and techniques for providing data service to a client have been discussed to this point. It should be recognized however that other types of service providers and or clients may also use the discussed techniques. For example a content management service provider which may provide services such as contact and calendar management may use the techniques in being updated with new information from a client. As another example an action initiating service provider which may provide services such as environmental controls e.g. lighting adjustments location services or messaging e.g. instant messaging may use the techniques in receiving multiple requests from a client. The service provider may return responses that indicate the beginning intermediate state and or completion of the requested service. Thus a service provider may provide any type of computer related service to and or for a client. As a further example a service provider and or a client may be a computer program e.g. software executing on a computer e.g. a personal computer a server or a workstation .

The following illustrates another example of invoking a data service by providing examples of messages for invoking a data service. In particular the user interface device in this example is a digital media adaptor that presents a user with both radio and photo services in an entertainment center. Also a SOAP message including headers is used for each operation. Note however that the illustrated security tokens passed will not be verifiable because the signatures are fake since these are only example messages and the operations performed here are but one example of performing the tasks. There also may be several other ways to accomplish the same task that might be more appropriate in different circumstances.

In this example the user interface device has previously been associated with a user account so the user does not need to perform any authentication registration process. When the user turns on the device the device brings up the main screen for the user. There may be several areas on this screen that require user specific content such as a now playing area for radio or a what s new area for data in their photo service .

The user interface device then initiates device authentication with an authentication service. This request may be submitted to https auth.ws.aol.com a bootstrap entry point for the authentication service . An example of the request appears below 

The authentication service then responds with its authentication mechanism choice. In this instance the authentication service decides to use CRAM MD5 as the authentication method and provides the challenge data 

The user interface device then prepares and submits its credentials to the authentication service. In this example the device prepares the MD5 digest using the provided challenge as well as the shared secret in this case tanstaaftanstaaf and sends a response to the authentication service 

The authentication service processes the authentication request and returns the security token for the discovery service to the user interface device along with the bootstrap information for accessing the discovery service 

The user interface device then requests service information from the discovery service at the entry point returned in the previous message i.e. https discovery.ws.aol.com . This address could change on a user by use and or call by call basis so the user interface device should retrieve the correct value for information about the radio service from the message returned during the authentication process. An example of the discovery service request is 

The discovery service then processes the request and responds to the user interface device with the radio service resource offering the necessary credentials for the radio service and a session context for subsequent calls to the discovery service 

The user interface device then requests data from the radio service. The device having the contact information and credentials for the radio service submits a service request to the server hosting the radio service i.e. to the endpoint identified in the resource offering https radio.ws.aol.com . An example of such a service request is 

The user interface device then needs detailed station information for one of the stations returned in the previous message. This time because of the returned in the previous call the request is submitted to https Radio15.ws.aol.com and the assertion is not included in the request 

As mentioned previously the user interface device also may access a photo service. To accomplish this a user may select a photo icon on the display of the user interface device and the device will understand that it needs to contact a photo service. The device submits a discovery request to find the photo service contact information 

The discovery service processes the request and responds to the user interface device with the photo service resource offering the security token s for the photo service and a session context for subsequent calls to the discovery service 

The user interface device may then request information from the photo service. For example the device may request a list of folders from the photo service using the following 

The photo service may then return the requested information. An example is illustrated by the following 

After using the discovery service security token for a period of time e.g. twenty four hours the token may be close to expiring. For the acknowledgement illustrated above from the authentication service assume that almost twenty four hours has elapsed since the original authentication by the authentication service and that the user interface device is monitoring the validity period of the security token. Thus the user interface device knows that it needs to update the token if it wishes to continue with this session. The user interface device may submit a request to the authentication service where the original authentication took place by using the following 

The authentication service may then process the request. If the request is valid the service returns the renewed security token to the user interface device. The return message is illustrated by the following 

The invention may be implemented in digital circuitry or in computer hardware firmware or software or in combinations of them. The invention may be implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of a data processing apparatus e.g. a programmable processor a computer or multiple computers . A computer program may be written in any form of programming language including compiled or interpreted languages and it may be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Method operations of the invention may be performed by one or more programmable processors executing a computer program to perform functions of the invention by operating on input data and generating output. Method operations may also be performed by and an apparatus of the invention may be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical or optical disks . Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory may be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user the invention may be implemented on a computer having a display device e.g. a CRT cathode ray tube or FPD flat panel display e.g. LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well for example feedback provided to the user may be any form of sensory feedback e.g. visual auditory or tactile and input from the user may be received in any form including visual auditory or tactile input.

The invention may be implemented in a computing system that includes a back end component e.g. a data server a middleware component e.g. an application server a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the invention or any combination of such back end middleware and front end components. The components of the system may be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet .

The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Several implementations have been described and other implementations have been mentioned or suggested. Moreover various additions deletions substitutions and modifications will be readily suggested to those skilled in the art. For these reasons the invention is to be measured by the following claims which may include one or more of these implementations.

