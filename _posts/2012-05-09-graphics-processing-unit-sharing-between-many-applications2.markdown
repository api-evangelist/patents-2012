---

title: Graphics processing unit sharing between many applications
abstract: A technique for executing a plurality of applications on a GPU. The technique involves establishing a first connection to a first application and a second connection to a second application, establishing a universal processing context that is shared by the first application and the second application, transmitting a first workload pointer to a first queue allocated to the first application, the first workload pointer pointing to a first workload generated by the first application, transmitting a second workload pointer to a second queue allocated to the second application, the second workload pointer pointing to a second workload generated by the second application, transmitting the first workload pointer to a first GPU queue in the GPU, and transmitting the second workload pointer to a second GPU queue in the GPU, wherein the GPU is configured to execute the first workload and the second workload in accordance with the universal processing context.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09626216&OS=09626216&RS=09626216
owner: NVIDIA Corporation
number: 09626216
owner_city: Santa Clara
owner_country: US
publication_date: 20120509
---
The present invention generally relates to compute applications and more specifically to simultaneously executing plural compute applications on a graphics processing unit GPU having multiple cores.

Current methods for sharing hardware resources available on a GPU between plural compute applications require the compute applications to communicate with a central resource manager. In particular the central resource manager receives workloads from the compute applications and transmits the workloads to the GPU for execution. In turn the GPU controls synchronization between the compute applications and permits only threads of a single compute application to be executed by the GPU at a time. These threads may become unresponsive during synchronization operations which makes it difficult for software developers to maintain overall system responsiveness and proper load balancing. Moreover the GPU is required to execute a context switch for every transition into executing threads of a different compute application which results in GPU idle time. This problem is exacerbated by the typically large sets of state that are associated with compute applications and must be stored and subsequently reloaded when a context switch occurs.

Accordingly what is needed in the art is a more effective technique for executing plural compute applications on a GPU.

One embodiment of the present inventions sets forth a computer implemented method for executing a plurality of applications on a graphics processing unit GPU . The method comprises the steps of establishing a first connection to a first application and a second connection to a second application establishing a universal processing context that is shared by the first application and the second application transmitting a first workload pointer to a first queue allocated to the first application wherein the first workload pointer points to a first workload generated by the first application transmitting a second workload pointer to a second queue allocated to the second application wherein the second workload pointer points to a second workload generated by the second application transmitting the first workload pointer to a first GPU queue in the GPU and transmitting the second workload pointer to a second GPU queue in the GPU wherein the GPU is configured to execute the first workload and the second workload in accordance with the universal processing context.

One advantage of the disclosed embodiments of the present invention is that they enable software developers to choose how plural compute applications simultaneously share a GPU. In particular embodiments of the present invention enable the plurality of compute applications and the threads associated therewith to be truly simultaneously executed by the GPU. Each of the compute applications has access to a universal processing context that is managed by a server within a GPU driver with which the compute applications are configured to communicate. As a result the number of context switches which are implemented by conventional GPUs to create the illusion of simultaneously executing multiple applications may be reduced which lowers overhead and increases overall performance of the GPU.

In the following description numerous specific details are set forth to provide a more thorough understanding of the present invention. However it will be apparent to one of skill in the art that the present invention may be practiced without one or more of these specific details.

The operating system provides the detailed instructions for managing and coordinating the operation of computer system . Device driver provides detailed instructions for managing and coordinating operation of the parallel processing subsystem and in particular parallel processing units included therein. Furthermore device driver may provide compilation facilities for generating machine code specifically optimized for the parallel processing units included in parallel processing subsystem . Device driver may be provided in conjunction with the CUDA framework provided by NVIDIA Corporation.

Memory bridge which may be e.g. a Northbridge chip is connected via a bus or other communication path e.g. a HyperTransport link to an I O input output bridge . I O bridge which may be e.g. a Southbridge chip receives user input from one or more user input devices e.g. keyboard mouse and forwards the input to CPU via communication path and memory bridge . Parallel processing subsystem is coupled to memory bridge via a bus or second communication path e.g. a Peripheral Component Interconnect PCI Express Accelerated Graphics Port or HyperTransport link in one embodiment parallel processing subsystem is a graphics subsystem that delivers pixels to a display device that may be any conventional cathode ray tube liquid crystal display light emitting diode display or the like. A system disk is also connected to I O bridge and may be configured to store content and applications and data for use by CPU and parallel processing subsystem . System disk provides non volatile storage for applications and data and may include fixed or removable hard disk drives flash memory devices and CD ROM compact disc read only memory DVD ROM digital versatile disc ROM Blu ray HD DVD high definition DVD or other magnetic optical or solid state storage devices.

A switch provides connections between I O bridge and other components such as a network adapter and various add in cards and . Other components not explicitly shown including universal serial bus USB or other port connections compact disc CD drives digital versatile disc DVD drives film recording devices and the like may also be connected to I O bridge . The various communication paths shown in including the specifically named communication paths and may be implemented using any suitable protocols such as PCI Express AGP Accelerated Graphics Port HyperTransport or any other bus or point to point communication protocol s and connections between different devices may use different protocols as is known in the art.

In one embodiment the parallel processing subsystem incorporates circuitry optimized for graphics and video processing including for example video output circuitry and constitutes a graphics processing unit GPU . In another embodiment the parallel processing subsystem incorporates circuitry optimized for general purpose processing while preserving the underlying computational architecture described in greater detail herein. In yet another embodiment the parallel processing subsystem may be integrated with one or more other system elements in a single subsystem such as joining the memory bridge CPU and I O bridge to form a system on chip SoC .

It will be appreciated that the system shown herein is illustrative and that variations and modifications are possible. The connection topology including the number and arrangement of bridges the number of CPUs and the number of parallel processing subsystems may be modified as desired. For instance in some embodiments system memory is connected to CPU directly rather than through a bridge and other devices communicate with system memory via memory bridge and CPU . In other alternative topologies parallel processing subsystem is connected to I O bridge or directly to CPU rather than to memory bridge . In still other embodiments I O bridge and memory bridge might be integrated into a single chip instead of existing as one or more discrete devices. Large embodiments may include two or more CPUs and two or more parallel processing subsystems . The particular components shown herein are optional for instance any number of add in cards or peripheral devices might be supported. In some embodiments switch is eliminated and network adapter and add in cards connect directly to I O bridge .

Referring again to as well as in some embodiments some or all of PPUs in parallel processing subsystem are graphics processors with rendering pipelines that can be configured to perform various operations related to generating pixel data from graphics data supplied by CPU and or system memory via memory bridge and the second communication path interacting with local parallel processing memory which can be used as graphics memory including e.g. a conventional frame buffer to store and update pixel data delivering pixel data to display device and the like. In some embodiments parallel processing subsystem may include one or more PPUs that operate as graphics processors and one or more other PPUs that are used for general purpose computations. The PPUs may be identical or different and each PPU may have a dedicated parallel processing memory device s or no dedicated parallel processing memory device s . One or more PPUs in parallel processing subsystem may output data to display device or each PPU in parallel processing subsystem may output data to one or more display devices .

In operation CPU is the master processor of computer system controlling and coordinating operations of other system components. In particular CPU issues commands that control the operation of PPUs . In some embodiments CPU writes a stream of commands for each PPU to a data structure not explicitly shown in either or that may be located in system memory parallel processing memory or another storage location accessible to both CPU and PPU . A pointer to each data structure is written to a pushbuffer to initiate processing of the stream of commands in the data structure. The PPU reads command streams from one or more pushbuffers and then executes commands asynchronously relative to the operation of CPU . Execution priorities may be specified for each pushbuffer by an application program via the device driver to control scheduling of the different pushbuffers.

Referring back now to as well as each PPU includes an I O input output unit that communicates with the rest of computer system via communication path which connects to memory bridge or in one alternative embodiment directly to CPU . The connection of PPU to the rest of computer system may also be varied. In some embodiments parallel processing subsystem is implemented as an add in card that can be inserted into an expansion slot of computer system . In other embodiments a PPU can be integrated on a single chip with a bus bridge such as memory bridge or I O bridge . In still other embodiments some or all elements of PPU may be integrated on a single chip with CPU .

In one embodiment communication path is a PCI Express link in which dedicated lanes are allocated to each PPU as is known in the art. Other communication paths may also be used. An I O unit generates packets or other signals for transmission on communication path and also receives all incoming packets or other signals from communication path directing the incoming packets to appropriate components of PPU . For example commands related to processing tasks may be directed to a host interface while commands related to memory operations e.g. reading from or writing to parallel processing memory may be directed to a memory crossbar unit . Host interface reads each pushbuffer and outputs the command stream stored in the pushbuffer to a front end .

Each PPU advantageously implements a highly parallel processing architecture. As shown in detail PPU includes a processing cluster array that includes a number C of general processing clusters GPCs where C 1. Each GPC is capable of executing a large number e.g. hundreds or thousands of threads concurrently where each thread is an instance of a program. In various applications different GPCs may be allocated for processing different types of programs or for performing different types of computations. The allocation of GPCs may vary dependent on the workload arising for each type of program or computation.

GPCs receive processing tasks to be executed from a work distribution unit within a task work unit . The work distribution unit receives pointers to processing tasks that are encoded as task metadata TMD and stored in memory. The pointers to TMDs are included in the command stream that is stored as a pushbuffer and received by the front end unit from the host interface . Processing tasks that may be encoded as TMDs include indices of data to be processed as well as state parameters and commands defining how the data is to be processed e.g. what program is to be executed . The task work unit receives tasks from the front end and ensures that GPCs are configured to a valid state before the processing specified by each one of the TMDs is initiated. A priority may be specified for each TMD that is used to schedule execution of the processing task. Processing tasks can also be received from the processing cluster array . Optionally the TMD can include a parameter that controls whether the TMD is added to the head or the tail for a list of processing tasks or list of pointers to the processing tasks thereby providing another level of control over priority.

Memory interface includes a number D of partition units that are each directly coupled to a portion of parallel processing memory where D . As shown the number of partition units generally equals the number of dynamic random access memory DRAM . In other embodiments the number of partition units may not equal the number of memory devices. Persons of ordinary skill in the art will appreciate that DRAM may be replaced with other suitable storage devices and can be of generally conventional design. A detailed description is therefore omitted. Render targets such as frame buffers or texture maps may be stored across DRAMs allowing partition units to write portions of each render target in parallel to efficiently use the available bandwidth of parallel processing memory .

Any one of GPCs may process data to be written to any of the DRAMs within parallel processing memory . Crossbar unit is configured to route the output of each GPC to the input of any partition unit or to another GPC for further processing. GPCs communicate with memory interface through crossbar unit to read from or write to various external memory devices. In one embodiment crossbar unit has a connection to memory interface to communicate with I O unit as well as a connection to local parallel processing memory thereby enabling the processing cores within the different GPCs to communicate with system memory or other memory that is not local to PPU . In the embodiment shown in crossbar unit is directly connected with I O unit . Crossbar unit may use virtual channels to separate traffic streams between the GPCs and partition units .

Again GPCs can be programmed to execute processing tasks relating to a wide variety of applications including but not limited to linear and non linear data transforms filtering of video and or audio data modeling operations e.g. applying laws of physics to determine position velocity and other attributes of objects image rendering operations e.g. tessellation shader vertex shader geometry shader and or pixel shader programs and so on. PPUs may transfer data from system memory and or local parallel processing memories into internal on chip memory process the data and write result data back to system memory and or local parallel processing memories where such data can be accessed by other system components including CPU or another parallel processing subsystem .

A PPU may be provided with any amount of local parallel processing memory including no local memory and may use local memory and system memory in any combination. For instance a PPU can be a graphics processor in a unified memory architecture UMA embodiment. In such embodiments little or no dedicated graphics parallel processing memory would be provided and PPU would use system memory exclusively or almost exclusively. In UMA embodiments a PPU may be integrated into a bridge chip or processor chip or provided as a discrete chip with a high speed link e.g. PCI Express connecting the PPU to system memory via a bridge chip or other communication means.

As noted above any number of PPUs can be included in a parallel processing subsystem . For instance multiple PPUs can be provided on a single add in card or multiple add in cards can be connected to communication path or one or more of PPUs can be integrated into a bridge chip. PPUs in a multi PPU system may be identical to or different from one another. For instance different PPUs might have different numbers of processing cores different amounts of local parallel processing memory and so on. Where multiple PPUs are present those PPUs may be operated in parallel to process data at a higher throughput than is possible with a single PPU . Systems incorporating one or more PPUs may be implemented in a variety of configurations and form factors including desktop laptop or handheld personal computers servers workstations game consoles embedded systems and the like.

Multiple processing tasks may be executed concurrently on the GPCs and a processing task may generate one or more child processing tasks during execution. The task work unit receives the tasks and dynamically schedules the processing tasks and child processing tasks for execution by the GPCs .

The work distribution unit includes a task table with slots that may each be occupied by the TMD for a task that is being executed. The task management unit may schedule tasks for execution when there is a free slot in the task table . When there is not a free slot a higher priority task that does not occupy a slot may evict a lower priority task that does occupy a slot. When a task is evicted the task is stopped and if execution of the task is not complete then a pointer to the task is added to a list of task pointers to be scheduled so that execution of the task will resume at a later time. When a child processing task is generated during execution of a task a pointer to the child task is added to the list of task pointers to be scheduled. A child task may be generated by a TMD executing in the processing cluster array .

Unlike a task that is received by the task work unit from the front end child tasks are received from the processing cluster array . Child tasks are not inserted into pushbuffers or transmitted to the front end. The CPU is not notified when a child task is generated or data for the child task is stored in memory. Another difference between the tasks that are provided through pushbuffers and child tasks is that the tasks provided through the pushbuffers are defined by the application program whereas the child tasks are dynamically generated during execution of the tasks.

Operation of GPC is advantageously controlled via a pipeline manager that distributes processing tasks to streaming multiprocessors SMs . Pipeline manager may also be configured to control a work distribution crossbar by specifying destinations for processed data output by SMs .

In one embodiment each GPC includes a number M of SMs where M 1 each SM configured to process one or more thread groups. Also each SM advantageously includes an identical set of functional execution units e.g. execution units and load store units shown as Exec units and LSUs in that may be pipelined allowing a new instruction to be issued before a previous instruction has finished as is known in the art. Any combination of functional execution units may be provided. In one embodiment the functional units support a variety of operations including integer and floating point arithmetic e.g. addition and multiplication comparison operations Boolean operations AND OR XOR bit shifting and computation of various algebraic functions e.g. planar interpolation trigonometric exponential and logarithmic functions etc. and the same functional unit hardware can be leveraged to perform different operations.

The series of instructions transmitted to a particular GPC constitutes a thread as previously defined herein and the collection of a certain number of concurrently executing threads across the parallel processing engines not shown within an SM is referred to herein as a warp or thread group. As used herein a thread group refers to a group of threads concurrently executing the same program on different input data with one thread of the group being assigned to a different processing engine within an SM . A thread group may include fewer threads than the number of processing engines within the SM in which case some processing engines will be idle during cycles when that thread group is being processed. A thread group may also include more threads than the number of processing engines within the SM in which case processing will take place over consecutive clock cycles. Since each SM can support up to G thread groups concurrently it follows that up to G M thread groups can be executing in GPC at any given time.

Additionally a plurality of related thread groups may be active in different phases of execution at the same time within an SM . This collection of thread groups is referred to herein as a cooperative thread array CTA or thread array. The size of a particular CTA is equal to m k where k is the number of concurrently executing threads in a thread group and is typically an integer multiple of the number of parallel processing engines within the SM and m is the number of thread groups simultaneously active within the SM . The size of a CTA is generally determined by the programmer and the amount of hardware resources such as memory or registers available to the CTA.

Each SM contains a level one L1 cache shown in or uses space in a corresponding L1 cache outside of the SM that is used to perform load and store operations. Each SM also has access to level two L2 caches that are shared among all GPCs and may be used to transfer data between threads. Finally SMs also have access to off chip global memory which can include e.g. parallel processing memory and or system memory . It is to be understood that any memory external to PPU may be used as global memory. Additionally a level one point five L1.5 cache may be included within the GPC configured to receive and hold data fetched from memory via memory interface requested by SM including instructions uniform data and constant data and provide the requested data to SM . Embodiments having multiple SMs in GPC beneficially share common instructions and data cached in L1.5 cache .

Each GPC may include a memory management unit MMU that is configured to map virtual addresses into physical addresses. In other embodiments MMU s may reside within the memory interface . The MMU includes a set of page table entries PTEs used to map a virtual address to a physical address of a tile and optionally a cache line index. The MMU may include address translation lookaside buffers TLB or caches which may reside within multiprocessor SM or the L1 cache or GPC . The physical address is processed to distribute surface data access locality to allow efficient request interleaving among partition units . The cache line index may be used to determine whether or not a request for a cache line is a hit or miss.

In graphics and computing applications a GPC may be configured such that each SM is coupled to a texture unit for performing texture mapping operations e.g. determining texture sample positions reading texture data and filtering the texture data. Texture data is read from an internal texture L1 cache not shown or in some embodiments from the L1 cache within SM and is fetched from an L2 cache that is shared between all GPCs parallel processing memory or system memory as needed. Each SM outputs processed tasks to work distribution crossbar in order to provide the processed task to another GPC for further processing or to store the processed task in an L2 cache parallel processing memory or system memory via crossbar unit . A preROP pre raster operations is configured to receive data from SM direct data to ROP units within partition units and perform optimizations for color blending organize pixel color data and perform address translations.

It will be appreciated that the core architecture described herein is illustrative and that variations and modifications are possible. Any number of processing units e.g. SMs or texture units preROPs may be included within a GPC . Further as shown in a PPU may include any number of GPCs that are advantageously functionally similar to one another so that execution behavior does not depend on which GPC receives a particular processing task. Further each GPC advantageously operates independently of other GPCs using separate and distinct processing units L1 caches to execute tasks for one or more application programs.

Persons of ordinary skill in the art will understand that the architecture described in in no way limits the scope of the present invention and that the techniques taught herein may be implemented on any properly configured processing unit including without limitation one or more CPUs one or more multi core CPUs one or more PPUs one or more GPCs one or more graphics or special purpose processing units or the like without departing the scope of the present invention.

In embodiments of the present invention it is desirable to use PPU or other processor s of a computing system to execute general purpose computations using thread arrays. Each thread in the thread array is assigned a unique thread identifier thread ID that is accessible to the thread during the thread s execution. The thread ID which can be defined as a one dimensional or multi dimensional numerical value controls various aspects of the thread s processing behavior. For instance a thread ID may be used to determine which portion of the input data set a thread is to process and or to determine which portion of an output data set a thread is to produce or write.

A sequence of per thread instructions may include at least one instruction that defines a cooperative behavior between the representative thread and one or more other threads of the thread array. For example the sequence of per thread instructions might include an instruction to suspend execution of operations for the representative thread at a particular point in the sequence until such time as one or more of the other threads reach that particular point an instruction for the representative thread to store data in a shared memory to which one or more of the other threads have access an instruction for the representative thread to atomically read and update data stored in a shared memory to which one or more of the other threads have access based on their thread IDs or the like. The CTA program can also include an instruction to compute an address in the shared memory from which data is to be read with the address being a function of thread ID. By defining suitable functions and providing synchronization techniques data can be written to a given location in shared memory by one thread of a CTA and read from that location by a different thread of the same CTA in a predictable manner. Consequently any desired pattern of data sharing among threads can be supported and any thread in a CTA can share data with any other thread in the same CTA. The extent if any of data sharing among threads of a CTA is determined by the CTA program thus it is to be understood that in a particular application that uses CTAs the threads of a CTA might or might not actually share data with each other depending on the CTA program and the terms CTA and thread array are used synonymously herein.

SM provides on chip internal data storage with different levels of accessibility. Special registers not shown are readable but not writeable by LSU and are used to store parameters defining each thread s position. In one embodiment special registers include one register per thread or per exec unit within SM that stores a thread. ID each thread ID register is accessible only by a respective one of the exec unit . Special registers may also include additional registers readable by all threads that execute the same processing task represented by a TMD or by all LSUs that store a CTA identifier the CTA dimensions the dimensions of a grid to which the CTA belongs or queue position if the TMD encodes a queue task instead of a grid task and an identifier of the TMD to which the CTA is assigned.

If the TMD is a grid TMD execution of the TMD causes a fixed number of CTAs to be launched and executed to process the fixed amount of data stored in the queue . The number of CTAs is specified as the product of the grid width height and depth. The fixed amount of data may be stored in the TMD or the TMD may store a pointer to the data that will be processed by the CTAs. The TMD also stores a starting address of the program that is executed by the CTAs.

If the TMD is a queue TMD then a queue feature of the TMD is used meaning that the amount of data to be processed is not necessarily fixed. Queue entries store data for processing by the CTAs assigned to the TMD . The queue entries may also represent a child task that is generated by another TMD during execution of a thread thereby providing nested parallelism. Typically execution of the thread or CTA that includes the thread is suspended until execution of the child task completes. The queue may be stored in the TMD or separately from the TMD in which case the TMD stores a queue pointer to the queue. Advantageously data generated by the child task may be written to the queue while the TMD representing the child task is executing. The queue may be implemented as a circular queue so that the total amount of data is not limited to the size of the queue.

CTAs that belong to a grid have implicit grid width height and depth parameters indicating the position of the respective CTA within the grid. Special registers are written during initialization in response to commands received via front end from device driver and do not change during execution of a processing task. The front end schedules each processing task for execution. Each CTA is associated with a specific TMD for concurrent execution of one or more tasks. Additionally a single GPC may execute multiple tasks concurrently.

A parameter memory not shown stores runtime parameters constants that can be read but not written by any thread within the same CTA or any LSU . In one embodiment device driver provides parameters to the parameter memory before directing SM to begin execution of a task that uses these parameters. Any thread within any CTA or any exec unit within SM can access global memory through a memory interface . Portions of global memory may be stored in the L1 cache .

Local register file is used by each thread as scratch space each register is allocated for the exclusive use of one thread and data in any of local register file is accessible only to the thread to which the register is allocated. Local register file can be implemented as a register file that is physically or logically divided into P lanes each having some number of entries where each entry might store e.g. a 32 bit word . One lane is assigned to each of the N exec units and P load store units LSU and corresponding entries in different lanes can be populated with data for different threads executing the same program to facilitate SIMD execution. Different portions of the lanes can be allocated to different ones of the G concurrent thread groups so that a given entry in the local register file is accessible only to a particular thread. In one embodiment certain entries within the local register file are reserved for storing thread identifiers implementing one of the special registers. Additionally a uniform L1 cache stores uniform or constant values for each lane of the N exec units and P load store units LSU .

Shared memory is accessible to threads within a single CTA in other words any location in shared memory is accessible to any thread within the same CTA or to any processing engine within SM . Shared memory can be implemented as a shared register file or shared on chip cache memory with an interconnect that allows any processing engine to read from or write to any location in the shared memory. In other embodiments shared state space might map onto a per CTA region of off chip memory and be cached in L1 cache . The parameter memory can be implemented as a designated section within the same shared register file or shared cache memory that implements shared memory or as a separate shared register file or on chip cache memory to which the LSUs have read only access. In one embodiment the area that implements the parameter memory is also used to store the CTA ID and task ID as well as CTA and grid dimensions or queue position implementing portions of the special registers. Each LSU in SM is coupled to a unified address mapping unit that converts an address provided for load and store instructions that are specified in a unified memory space into an address in each distinct memory space. Consequently an instruction may be used to access any of the local shared or global memory spaces by specifying an address in the unified memory space.

The L1 cache in each SM can be used to cache private per thread local data and also per application global data. In some embodiments the per CTA shared data may be cached in the L1 cache . The LSUs are coupled to the shared memory and the L1 cache via a memory and cache interconnect .

Also shown in is a server which executes under the control of device driver and interacts with the plurality of UMDs . In particular the server upon receiving an initial request from a UMD to execute work within PPU creates a particular queue onto which that UMD is able to push the work to be executed the details of which are described below in conjunction with . The server also manages a universal processing context that is shared between the compute applications which provides a pool of memory to the compute applications . The compute applications can allocate varying portions of the pool of memory according to the requirements of the work that they produce for processing. The device driver is configured to pop work from each of the queues e.g. using a round robin technique and to push the work to TMDs that have the capacity to receive new work the details of which are described below in conjunction with . The techniques described herein provide various performance gains over conventional approaches an example of which is described below in conjunction with .

As shown in multiple compute applications issue work to the PPU under the control of a conventional device driver. At time T work generated by compute application CA  utilizes SMs of the GPCs but leaves the SMs of the GPC idle since there is no work for the SMs of the GPC to execute. This applies even when work has already been generated by compute application CA  which in the example illustrated in requires two SMs for execution e.g. the idle SMs of the GPC . Instead to process the work generated by the compute application CA  the PPU must issue a context switch at time T which as described above is a high overhead operation that requires the processing context for compute application CA  to be flushed out and stored into memory followed by the processing context for compute application CA  to be loaded into memory.

At time T SMs process the work generated by the compute application CA  and the SMs are left idle even though work for compute applications CA  and CA  may have already been issued and is pending execution. The times T T illustrate exemplary operations carried out by the parallel processing subsystem in order to execute the remaining work generated by compute applications CA  and CA  after the work generated by CA  is executed. As shown these operations include additional context switches and idle SMs within GPCs which creates inefficiencies.

As shown the method begins at step where a UMD receives an initialization request from a compute application that is executing under the control of CPU . In one example compute application is a CUDA application that references functionality included in both the UMD associated therewith and the device driver where the functionality of the UMD is executed by the CPU and the functionality of the device driver is carried out by the parallel processing subsystem .

At step the UMD requests to establish a connection to the device driver which is known to the UMD e.g. through static parameters. At step the UMD requests from the device driver a server address e.g. of the server executed by device driver to which work requests generated by the compute application can be queued for processing by a PPU . At step the UMD identifies a workload created by the compute application . At step the UMD communicates to the server a pointer to the workload which as described in detail below in conjunction with is subsequently pushed into a queue of the server that corresponds to the UMD . At step the UMD enters into a listening mode for additional workloads generated by the compute application . A pointer to each additional workload that is generated is then communicated to the queue according to step . When the compute application terminates the associated UMD also terminates and the method ends.

As shown the method begins at step where the device driver receives a request from a UMD to establish a connection. This request corresponds to step described above in conjunction with where the UMD requests to establish a connection to the device driver . At step the device driver establishes a connection to the UMD .

At step the device driver receives from the UMD a request for an address of an active server i.e. the server . At step the device driver determines whether the server is already executing i.e. the server has been initialized. If at step the device driver determines that the server is not executing then the device driver proceeds to step where the device driver activates the server and generates an address for the server so that the server can be accessed by the UMD and any additional UMDs that subsequently request a connection to the server .

At step the device driver establishes a universal processing context that is shared by the UMD and any subsequent UMDs that issue requests for work to be processed by the parallel processing subsystem . As previously described herein the universal processing context enables compute applications to be truly simultaneously executed by a PPU . At step the device driver generates a queue that corresponds to the UMD that requires the connection established at step . At step the device driver returns the server address of the server to the UMD .

At step the device driver receives from the UMD a pointer to a workload e.g. a pointer that is issued by the UMD at step of the method in . At step the device driver pushes the pointer onto the queue . The pointers to work requests that are pushed onto respective queues along with pointers to other work requests that are pushed onto other queues by the device driver on behalf of other UMDs are then issued out to the PPU for processing the details of which are described below in conjunction with .

As shown method begins at step where the device driver determines whether there are one or more queues established within the server .

At step the device driver sets a first queue as a current queue . At step the device driver determines whether the current queue is empty. If at step the device driver determines that the current queue is not empty then the method proceeds to step . At step the device driver pops a workload pointer from the current queue . At step the device driver communicates to a TMD the popped workload pointer. The workload to which the popped pointer is directed is then processed by the PPU according to the techniques described above in conjunction with .

At step the device driver determines whether there are additional queues within the server . If at step the device driver determines that a next queue exists within the server then the method proceeds to step where the device driver sets the next queue as the current queue . The method steps are then repeated for the current queue such that pointers stored in different queues are transmitted to TMDs in an organized manner.

If however the device driver determines that there is not a next queue i.e. no compute applications are executing then the method ends.

Although in method the device driver implements a round robin approach to issuing work requests generated by plural UMDs embodiments of the invention are no so limited and may implement other types of approaches e.g. where the device driver is multi threaded and can issue in parallel the work requests generated by plural UMDs .

In sum disclosed embodiments of the present invention enable software developers to choose how plural compute applications simultaneously share a PPU within parallel processing subsystem and further enable the plurality of compute applications and the threads associated therewith to be truly simultaneously executed by the PPU . Each of the compute applications has access to a universal processing context that is managed by the server within the device driver with which the compute applications are configured to communicate.

One advantage of the disclosed embodiments is that the number of context switches which are implemented by conventional device drivers to create the illusion of simultaneously executing multiple applications may be reduced which lowers overhead and increases overall performance of a PPU . Moreover embodiments of the present invention may provide an increase in the average number of actively utilized SMs within GPCs included in the PPU when processing work generated by the plural compute applications . In particular SMs within GPCs which would otherwise be left idle under conventional approaches when a single compute application cannot fully utilize all SMs are now permitted to execute threads associated with different compute applications . Thus embodiments of the present invention may result in a significant increase in the overall performance of the PPU in comparison to prior art techniques.

One embodiment of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as compact disc read only memory CD ROM disks readable by a CD ROM drive flash memory read only memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored.

The invention has been described above with reference to specific embodiments. Persons of ordinary skill in the art however will understand that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The foregoing description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

