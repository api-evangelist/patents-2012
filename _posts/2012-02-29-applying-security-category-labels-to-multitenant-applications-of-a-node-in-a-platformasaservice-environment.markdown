---

title: Applying security category labels to multi-tenant applications of a node in a platform-as-a-service environment
abstract: A mechanism for applying security category labels to multi-tenant applications of a node in a PaaS environment is disclosed. A method of embodiments includes generating, by a virtual machine (VM), a unique security category label (SCL) for each local user identification (UID) maintained by the VM, assigning, for each local UID maintained by the VM, the unique SCL associated with the local UID to one or more Internet Protocol (IP) addresses mapped to the local UID, receiving a request to initialize an application on the VM, assigning a local UID of the local UIDs maintained by the VM to the application, assigning files of the application the unique SCL associated with the local UID of the application, and assigning the unique SCL associated with the local UID of the application to a running process of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09038128&OS=09038128&RS=09038128
owner: Red Hat, Inc.
number: 09038128
owner_city: Raleigh
owner_country: US
publication_date: 20120229
---
The present application is related to co filed U.S. patent application Ser. No. 13 408 001 entitled Mechanism for System Resource Sharing in a Multi Tenant Platform as a Service PaaS Environment in a Cloud Computing System co filed U.S. patent application Ser. No. 13 408 754 entitled Mechanism for Creating and Maintaining Multi Tenant Applications in a Platform as a Service PaaS Environment of a Cloud Computing System and co filed U.S. patent application Ser. No. 13 408 676 entitled Mechanism for Applying a Custom Security Type Label to Multi Tenant Applications of a Node in a Platform as a Service PaaS Environment which are all assigned to the assignee of the present application.

The embodiments of the invention relate generally to platform as a service PaaS environments and more specifically relate to a mechanism for applying security category labels to multi tenant applications of a node in a PaaS environment.

Cloud computing is a computing paradigm in which a customer pays a cloud provider to execute a program on computer hardware owned and or controlled by the cloud provider. It is common for cloud providers to make virtual machines hosted on its computer hardware available to customers for this purpose. The cloud provider typically provides an interface that a customer can use to requisition virtual machines and associated resources such as processors storage and network services etc. as well as an interface a customer can use to install and execute the customer s program on the virtual machines that the customer requisitions together with additional software on which the customer s program depends. For some such programs this additional software can include such software components as a kernel and an operating system. Customers that have installed and are executing their programs in the cloud typically communicate with the executing program from remote geographic locations using Internet protocols.

For programs that are web applications the additional software can further include such software components as middleware and a framework. Web applications are programs that receive and act on requests in web or other Internet protocols such as HTTP. It is common for a user to use a web application by using a browser executing on the user s client computer system to send requests in a web protocol via the Internet to a server computer system on which the web application is executing. It is also common for automatic user agents to interact with web applications in web protocols in the same fashion.

While many web applications are suitable for execution in the cloud it often requires significant expertise and effort in order to install execute and manage a web application in the cloud. For example an administrator typically should identify all of the software components that a web application needs in order to execute and what versions of those software components are acceptable. In addition the administrator typically should obtain install and appropriately configure each such software component as well as the application itself. Where this high level of expertise and effort has been invested in order to get a web application running on a particular hypervisor and in a particular provider s cloud a similarly high level of expertise and effort usually should be subsequently invested to execute the web application instead or in addition on a different hypervisor and or in a different particular provider s cloud. Also it can be difficult to obtain useful information about how the application is performing and otherwise behaving when executing in the cloud.

Accordingly software and or hardware facilities for facilitating the execution of web applications in the cloud have been introduced and are known as Platform as a Service PaaS offerings. PaaS offerings typically facilitate deployment of applications without the cost and complexity of buying and managing the underlying hardware and software and provisioning hosting capabilities providing all of the facilities required to support the complete life cycle of building and delivering web application and service entirely available from the Internet. Typically these facilities operate as one or more virtual machines VMs running on top of a hypervisor in a host server.

In present PaaS offerings a first customer s deployed applications do not co exist with any other customer s deployed applications on the VMs that are hosting the first customer s deployed applications. However such an arrangement can be inefficient to the PaaS provider offering the platform services. This is because the applications being deployed in the PaaS are generally quite small packages and the size of the VM does not correspond to the size of the application. It can be costly to initialize a new VM for each application deployment and it may also be a waste of resources that are not being utilized. In a public cloud environment a PaaS provider pays for deploying a VM whether the VM lies idle or not. In a private cloud environment there is still a strain on resources for running VMs that are not completely utilized.

Embodiments of the invention provide a mechanism for applying security category labels to multi tenant applications of a node in a PaaS environment. A method of embodiments of the invention includes generating by a virtual machine VM a unique security category label SCL for each local user identification UID maintained by the VM assigning for each local UID maintained by the VM the unique SCL associated with the local UID to one or more Internet Protocol IP addresses mapped to the local UID receiving a request to initialize an application on the VM assigning a local UID of the local UIDs maintained by the VM to the application assigning files of the application the unique SCL associated with the local UID of the application and assigning the unique SCL associated with the local UID of the application to a running process of the application.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as sending receiving attaching forwarding caching executing applying identifying configuring establishing or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The present invention may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present invention. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

Embodiments of the invention provide a mechanism for applying security category labels to multi tenant applications of a node in a PaaS environment. In the multi tenant PaaS environment each node i.e. virtual machine VM in the PaaS environment runs multiple applications and as such should provide security and separation to protect each of the multi tenant applications from each other and to protect the underlying node VM from the multi tenant applications. In one embodiment unique security category labels are assigned to each application including assigning the label to the files of the application IP addresses used by the application and the running process of the application. The node utilizes this unique label to enforce access permissions with respect to each application in order to keep the multi tenant applications running on a node separate from each other and unable to access the resources of each other.

Clients and are connected to hosts and the cloud provider system via a network which may be may be a private network e.g. a local area network LAN a wide area network WAN intranet or other similar private networks or a public network e.g. the Internet . Each client may be a mobile device a PDA a laptop a desktop computer or any other computing device. Each host may be a server computer system a desktop computer or any other computing device. The cloud provider system may include one or more machines such as server computers desktop computers etc.

In one embodiment the cloud provider system is coupled to a cloud controller via the network . The cloud controller may reside on one or more machines e.g. server computers desktop computers etc. and may manage the execution of applications in the cloud . In some embodiments cloud controller receives commands from PaaS provider controller . Based on these commands the cloud controller provides data e.g. such as pre generated images associated with different applications to the cloud provider system . In some embodiments the data may be provided to the cloud provider and stored in an image repository in an image repository not shown located on each host or in an image repository not shown located on each VM .

Upon receiving a command identifying specific data e.g. application data and files used to initialize an application on the cloud the cloud provider retrieves the corresponding data from the image repository creates an instance of it and loads it to the host to run on top of a hypervisor not shown as a VM or within a VM . In addition a command may identify specific data to be executed on one or more of the VMs . The command may be received from the cloud controller from a PaaS Provider Controller or a user e.g. a system administrator via a console computer or a client machine. The image repository may be local or remote and may represent a single data structure or multiple data structures databases repositories files etc. residing on one or more mass storage devices such as magnetic or optical storage based disks solid state drives SSDs or hard drives.

In one embodiment the PaaS provider controller is operated by a PaaS provider that enables customers to create and run applications on nodes e.g. VMs managed by the PaaS provider. In one embodiment the nodes VMs are hosted on computer hardware managed by the cloud provider system . In some embodiments the VMs of the PaaS provider support multi tenancy of applications running on the VMs . This means that each VM can run multiple applications that may be owned or managed by different customers. Embodiments of the invention provide for security between these multi tenant applications hosted on a VM as well as between the applications and the VM by setting up each VM to utilize a security category label feature of an operating system OS of the VM . The security category label feature creates a unique privilege level for resources of each application running on the VM that can only be granted to the running process of the application. This maintains a separation between the applications on the VM for security purposes.

While various embodiments are described in terms of the environment described above those skilled in the art will appreciate that the facility may be implemented in a variety of other environments including a single monolithic computer system as well as various other combinations of computer systems or similar devices connected in various ways.

In one embodiment the client layer resides on a client machine such as a workstation of a software developer and provides an interface to a user of the client machine to the broker layer of the PaaS system . For example the broker layer may facilitate the creation and deployment on the cloud via node layer of software applications being developed by an end user at client layer .

The client layer includes a source code management system sometimes referred to as SCM or revision control system. One example of such an SCM or revision control system is Git available as open source software. Git and other such distributed SCM systems usually include a working directory for making changes and a local software repository for storing the changes. The packaged software application can then be pushed from the local Git repository to a remote Git repository. From the remote repository the code may be edited by others with access or the application may be executed by a machine. Other SCM systems work in a similar manner.

The client layer in one embodiment also includes a set of command tools that a user can utilize to create launch and manage applications. In one embodiment the command tools can be downloaded and installed on the user s client machine and can be accessed via a command line interface or a graphical user interface or some other type of interface. In one embodiment the command tools expose an application programming interface API of the broker layer and perform other applications management tasks in an automated fashion using other interfaces as will be described in more detail further below in accordance with some embodiments.

In one embodiment the broker layer acts as middleware between the client layer and the node layer . The node layer includes the nodes on which software applications are provisioned and executed. In one embodiment each node is a VM provisioned by an Infrastructure as a Service IaaS provider such as Amazon Web Services. In other embodiments the nodes may be physical machines or VMs residing on a single physical machine. In one embodiment the broker layer is implemented on one or more machines such as server computers desktop computers etc. In some embodiments the broker layer may be implemented on one or more machines separate from machines implementing each of the client layer and the node layer or may implemented together with the client layer and or the node layer on one or more machines or some combination of the above.

In one embodiment the broker layer includes a broker that coordinates requests from the client layer with actions to be performed at the node layer . One such request is new application creation. In one embodiment when a user using the command tools at client layer requests the creation of a new application or some other action to manage the application the broker first authenticates the user using an authentication service . In one embodiment the authentication service may comprise Streamline or may comprise some other authentication tool. Once the user has been authenticated and allowed access to the system by authentication service the broker uses a server orchestration system to collect information and configuration information about the nodes .

In one embodiment the broker uses the Marionette Collective MCollective framework available from Puppet Labs as the server orchestration system but other server orchestration systems may also be used. The server orchestration system in one embodiment functions to coordinate server client interaction between multiple sometimes a large number of servers. In one embodiment the servers being orchestrated are nodes which are acting as application servers and web servers.

For example if the broker wanted to shut down all applications on all even numbered nodes out of 100 000 nodes the broker would only need to provide one command to the server orchestration system . Then the server orchestration system would generate a separate message to all nodes to shut down all applications if the node is even and distribute the messages to the nodes using a messaging and queuing system. Thus in one embodiment the broker manages the business logic and model representing the nodes and the applications residing on the nodes and acts as a controller that generates the actions requested by users via an API of the client tools . The server orchestration system then takes those actions generated by the broker and orchestrates their execution on the many nodes managed by the system.

In one embodiment the information collected about the nodes can be stored in a data store . In one embodiment the data store can be a locally hosted database or file store or it can be a cloud based storage service provided by a Storage as a Service SaaS storage provider such as Amazon S3 Simple Storage Service . The broker uses the information about the nodes and their applications to model the application hosting service and to maintain records about the nodes. In one embodiment node data is stored in the form of a JavaScript Object Notation JSON blob or string that maintains key value pairs to associate a unique identifier a hostname a list of applications and other such attributes with the node.

In embodiments of the invention the PaaS system architecture of is a multi tenant PaaS environment. In a multi tenant PaaS environment each node runs multiple applications that may be owned or managed by different users and or organizations. As such a first customer s deployed applications may co exist with any other customer s deployed applications on the same node VM that is hosting the first customer s deployed applications . This deployment of multiple applications of multiple customers on a single node VM is a cost efficient solution for PaaS providers. However deploying a multi tenant PaaS solution raises a variety of concerns including for example security. Specifically security concerns exist in terms of separating multi tenant applications from each other as well as separating multi tenant applications from the node itself.

Embodiments of the invention provide for security between multi tenant applications hosted on node by assigning a unique security category label to each application started on the node . The unique security category label creates a privilege level for the application s resources that can only be granted to the running process of the application . One embodiment of the interaction between the server orchestration system and a node to implement applying unique security category labels to multi tenant applications on a single node in a PaaS environment is now described in more detail with reference to .

The node also include a server orchestration system agent configured to track and collect information about the node and to perform actions on the node . Thus in one embodiment using MCollective as the server orchestration system the server orchestration system agent can be implemented as a MCollective server. The server orchestration system would then be the MCollective client that can send requests queries and commands to the MCollective server on node .

In one embodiment server orchestration system agent interacts with OS to apply unique security category labels to multi tenant applications that run on node . Specifically a security category labeling feature of the OS is utilized to provide security and separation for each multi tenant application running on the node . Generally speaking a security category label SCL is a security enhancement to an OS such as OS that allows users to label files with categories. These categories may then be used to constrain the file and processes trying to access the file.

In one embodiment a security category labeling is implemented using a Multi Category Security MCS feature of SELinux . SELinux is a security architecture integrated into the Linux OS kernel. SELinux provides a flexible Mandatory Access Control MAC system built into the Linux kernel. MCS is an enhancement to SELinux and allows users to label files with categories. Other security category labeling features from other OS vendors may also be utilized in embodiments of the invention as well.

In one embodiment a SCL module of OS generates unique SCLs to be assigned to applications of node based on unique local user IDs UID maintained by OS . OS maintains a set of unique local UIDs that are assigned to applications as they are installed on the node . In one embodiment SCL module generates a set of unique SCLs by applying a transform to each unique local UID maintained by OS . In one embodiment the generation of an SCL for each unique local UID of the node is performed prior to any applications being initialized on the node .

The mapping of local UID to SCL may be stored in UID SCL datastore of OS . In one exemplary embodiment node maintains a range of local UIDs e.g. from 500 to 1500 assigned to applications as they are created on node . Prior to any applications starting on node SCL module assigns a unique SCL to each UID in the range. In some embodiments a transform is applied to each local UID to generate the SCL for that UID. For example UID is turned into SCL S0 C0 C1 and UID is turned into SCL S0 C0 C2 UID is turned into SCL S0 C0 C3 and so on.

After the unique SCLs are generated and mapped to their associated local UIDs by SCL module server orchestration system may interact with server orchestration system agent to pre configure Internet Protocol IP addresses assigned to node with the unique SCLs. As part of the initial configuration of node the node is assigned a set of IP addresses to be utilized by processes e.g. applications of the node. For example a whole class A set of IP addresses may be utilized by node which potentially results in the order of 16 million IP addresses assigned to node .

Node may then associate subsets of the assigned IP addresses of the node to each local UID maintained by the node. In one embodiment each local UID is assigned a class C network of IP addresses from the class A set of IP addresses which results in around 250 IP addresses. IP address datastore may be used by OS to keep a record of the existing IP addresses for the node as well as a mapping between IP addresses and UIDs. In one embodiment SCL module then accesses IP address datastore to pre label IP addresses with SCLs. SCL module may utilize the UID SCL datastore to match SCLs associated with a UID to the IP addresses for the same UID found in IP address datastore . In one embodiment the IP address datastore then keeps a record of the SCL label applied to each IP address. In some embodiments pre configuring the IP addresses with SCLs associated with the UID assigned to the IP addresses prior to initialization of an application on the node can save time in the configuration process of the application itself. In other embodiments the IP addresses may be associated with SCLs of the application when the application is initialized on the node .

In embodiments of the invention when an application is initialized on node it is assigned a unique local UID. Then in one embodiment SCL module accesses the home directory of the application and assigns the unique SCL to all resources found in the home directory. In one embodiment a change context CHCON command may be used to change labels on the files listed in the home directory associated with the UID i.e. associated with the application . When the application begins running on node SCL module associates the unique SCL associated with the local UID of the application to the running process of the application so that the process is run with the SCL. Once the application is running the IP addresses associated with the local UID of the application may then be utilized as they were already pre configured to be associated with the UID and will already have the associated SCLs assigned.

Utilizing the unique SCL assigned to the combination of the running process of the application the files of the application and the IP address of the application the SCL module may then enforce permissions to access these resources of application . The SCL label is used by SCL module to keep applications separated from each other. For example SCL module ensures that the SCL of a requesting process matches the SCL of any resources e.g. files and or IP addresses that it is requesting to access. If the SCLs do not match the SCL module denies permission to the requesting process. In some embodiments each SCL provides a same level of security for each application but prevents applications from accesses resources of other applications .

Method begins at block where a unique SCL is generated for each unique local UID maintained by the node of the PaaS system. In one embodiment a transform is applied to each local UID to generate the unique SCL for that UID. The mapping between UIDs and SCLs is then maintained by a datastore in the OS. At block for each unique UID the SCL for that UID is associated with one or more IP addresses mapped to the UID. In one embodiment a mapping of IP addresses to UIDs is utilized to match SCLs to IP addresses. This mapping of IP addresses to SCLs may be maintained in an IP address datastore of the OS of the node.

Then at block a request to initialize an application on the node is received. In one embodiment the request is received from a server orchestration system operating on a broker layer of the PaaS system. The application may be initialized on the node utilizing repositories stored on the node. At block a unique local UID of the local UIDs maintained by the node is assigned to the application. At block files of the application found in a home directory of the UID of the application are labeled with the SCL of the UID. Then at block when the application starts running the SCL of the UID of the application is assigned to the running process of the application. In one embodiment a SCL module of the OS such as SCL module of may coordinate method on the node.

Method begins at block where a request to access one or more resources of an application is received from a requesting process. In one embodiment the requesting process is a running process of a multi tenant application executing on the node. The kernel of an OS of the node may receive the request to access the one or more resources. In another embodiment an SCL module of the OS such as SCL module of receives the request. In one embodiment the one or more resources include files of an application running on the node or IP addresses of an application running on the node.

At block an SCL of the requesting process is determined. In one embodiment the SCL may be part of a label identifying the requesting process within the OS. Then at block an SCL of the requested one or more resources is determined. In one embodiment the SCL label of the requested one or more resources may be part of a label maintained by the OS in datastore keeping configuration information of the resources.

At decision block it is determined whether the determined SCLs of the requesting process and the requested one or more resources match. If not then method proceeds to block where access to the one or more requested resources is denied to the requesting process. An error specifically indicating that an SCL mis match occurred may also be provided to the requesting process as part of the access denial. On the other hand if the determined SCLs do match at decision block the method proceeds to block where access to the requested one or more resources is allowed.

The exemplary computer system includes a processing device processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processor is configured to execute instructions for performing the operations and steps discussed herein illustrated in by depicting instructions within processor .

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD a cathode ray tube CRT or a touchscreen an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine readable storage medium also known as a computer readable storage medium on which is stored software e.g. one or more sets of instructions software etc. embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory e.g. instructions and or within the processor e.g. processing logic during execution thereof by the computer system the main memory and the processor also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface device .

In one embodiment the software include instructions for a SCL module which may correspond to SCL module of and or a software library containing methods that call the SCL module for applying security category labels to multi tenant applications in a PaaS cloud computing environment. While the machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed description have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as segmenting analyzing determining enabling identifying modifying or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

Reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. Thus the appearances of the phrase in one embodiment or in an embodiment in various places throughout this specification are not necessarily all referring to the same embodiment. In addition the term or is intended to mean an inclusive or rather than an exclusive or. 

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

