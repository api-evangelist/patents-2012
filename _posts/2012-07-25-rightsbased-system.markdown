---

title: Rights-based system
abstract: A rights-based system is described in which vouchers are employed for creating, managing, distributing, and redeeming rights in digital contexts. A voucher is a digital, possession-based rights representation. An authorization component of the system validates the vouchers and issues corresponding tokens. Access to digital resources is provided in response to presentation of the tokens which are validated by matching voucher refresh values to corresponding values maintained by the system. New refresh values are generated and inserted in the vouchers each time they are redeemed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509704&OS=09509704&RS=09509704
owner: OnCircle, Inc.
number: 09509704
owner_city: Santa Clara
owner_country: US
publication_date: 20120725
---
The present application claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 514 249 entitled RIGHTS BASED SYSTEM filed on Aug. 2 2011 the entire disclosure of which is incorporated herein by reference for all purposes.

According to various embodiments of the present invention a rights based system employs vouchers for creating managing distributing and redeeming rights in digital contexts. A voucher is a digital possession based rights representation. An authorization component of the system validates the vouchers and issues corresponding tokens. Access to digital resources is provided in response to presentation of the tokens which are validated by matching voucher refresh values to corresponding values maintained by the system. New refresh values are generated and inserted in the vouchers each time they are redeemed.

According to a particular class of embodiments a rights based system includes one or more computing devices operating in a network and configured to implement a plurality of rights based system components including a mint component an authorization component a lockbox component an escrow component and a protected resource component. The mint component is configured to issue vouchers each of which is a possession based rights representation. First ones of the vouchers include a refresh value and a sequence number. The authorization component is configured to validate the vouchers and issue corresponding tokens. The lockbox component is configured to enable one or more users to manage corresponding collections of the vouchers. The escrow component is configured to coordinate trades of the vouchers. The protected resource component is configured to provide access to digital resources in response to presentation of corresponding ones of the tokens issued by the authorization component. The authorization component is configured to validate the first vouchers by matching the corresponding refresh values to corresponding most recent values maintained by the authorization component and to generate new refresh values and insert the new refresh values in the corresponding first vouchers each time the first vouchers are redeemed. The authorization component is further configured increment the sequence numbers of the first vouchers each time the first vouchers are redeemed.

A further understanding of the nature and advantages of the present invention may be realized by reference to the remaining portions of the specification and the drawings.

Reference will now be made in detail to specific embodiments of the invention including the best modes contemplated by the inventors for carrying out the invention. Examples of these specific embodiments are illustrated in the accompanying drawings. While the invention is described in conjunction with these specific embodiments it will be understood that it is not intended to limit the invention to the described embodiments. On the contrary it is intended to cover alternatives modifications and equivalents as may be included within the spirit and scope of the invention as defined by the appended claims. In the following description specific details are set forth in order to provide a thorough understanding of the present invention. The present invention may be practiced without some or all of these specific details. In addition well known features may not have been described in detail to avoid unnecessarily obscuring the invention.

Embodiments of the present invention provide secure and scalable techniques for creating managing distributing and redeeming rights in any of a wide variety of digital contexts including for example the Internet and the World Wide Web. The embodiments of the invention described herein employ digital objects referred to herein as vouchers that are possession based rights representations the possession of which is generally sufficient to validate their redemption. That is the holder of such an object can redeem one or more rights represented by the object i.e. gain access to a protected resource represented by the object by causing the object to be presented to an appropriate system component.

A rights based system based on vouchers decouples authorization requirements from the underlying protected resources and allows users to centrally manage their privileges independent of the resources they are entitled to access. In addition by making the object that gives access to an underlying resource separate from the resource protection of the resource becomes a more simplified and scalable task. For example the loose coupling between vouchers and the resources they represent obviates the need for the resource provider to maintain user databases. That is vouchers enable a paradigm in which user identity information e.g. username and password are removed from the resource. As a consequence the resources represented by vouchers do not have to learn who has the right to access them.

According to some embodiments a distributed infrastructure is provided in which vouchers may be securely stored managed transferred and traded independently of the underlying resources. As will become clear this infrastructure enables users holding vouchers to initiate transactions including anonymous transactions involving the transfer or trade of vouchers e.g. either as currency or as representations of the underlying resources. In addition according to some implementations different but related access rights for a particular resource may be grouped into a single object.

According to a specific implementation a voucher may be categorized as one of three voucher types depending on whether the voucher can be copied and whether the voucher is tied to a particular identity. A pass voucher is a voucher that may be freely copied and the rights of which may be redeemed by anyone possessing a copy. A ticket voucher is a voucher which can only be redeemed by one holder but for which the holder s identity is unrestricted. This is comparable for example to a theater ticket that only allows one person to enter a theater although there is no inherent restriction on the number of redemptions for a single ticket voucher by its current legitimate holder . A ticket voucher may be copyable but only one copy can be redeemed. A permit voucher is a voucher the rights for which may only be redeemed by a holder who possesses the unique credentials associated with the identity given in a user identity field of the voucher. This is comparable for example to an airline ticket that is good only for the person named.

The system is a loose confederation of multiple system components that may connect and communicate with each other using a wide variety of communication protocols and network infrastructures. This is illustrated in by cloud which represents any of a wide variety of distributed computing environments in which the processes and or functionalities described herein may be implemented. The term cloud refers generally to the fact that the processes and functionalities are generally agnostic to the distribution and configuration of the underlying hardware processing resources. Some or all of the depicted system components may be considered part of the cloud. Alternatively some or all of the depicted components may be operating behind firewalls e.g. as part of a private network data center etc. Embodiments are contemplated in which components operating outside the cloud connect with components operating within the cloud using a software as a service model. Numerous other variations by which system components may be deployed and interact will be apparent to those of skill in the art.

Embodiments of the invention are contemplated in which the described components operate on one or more servers which may be remotely accessed by and or connected with other system components over the Internet using the Internet Protocol and related technologies. More generally it will be understood by those of ordinary skill in the art that use of the use of a cloud in implies a much wider variety of distributed computing environments that may be suitable for various implementations. As such the present invention should not be limited by reference herein to particular computing environments conventions or paradigms.

For simplicity the components of may be referred to as clients or servers. That is the system components participate as clients or servers to particular flows in the sense of these terms within for example the REST REpresentational State Transfer computing paradigm with a component making a request or query to an endpoint being a client and the component receiving and responding to that request or query being a server. As will be understood by those familiar with the REST paradigm a server may also be a client and vice versa within the same or different flows. Regardless of these labels it should be understood that each component which may represent one or more instances of the depicted component may be implemented with one or more computing devices or resources using any of a variety of computing paradigms and computer program instructions implemented with any of a variety of programming tools and languages and stored in any of a variety of non transitory computer readable media. Implementations may be deployed across various portions of public and or private networks as well as entirely behind the firewall of a private network. Therefore references to clients and servers should not be used to unduly limit the scope of the invention.

The system components shown in operate relatively autonomously and with a well defined set of functions that are largely non overlapping and share very little with other system components. The APIs of each the system components are constrained such that a component receiving a voucher can operate on that voucher without participation by other components except as specified in the API.

The Authorization Server cAS is responsible for validating vouchers and issuing corresponding tokens. The Authorization Server may also validate specific segments of a voucher. For example in the case of permit vouchers i.e. vouchers tied to a single user s identity the Authorization Server is responsible for assuring that the user making a request with a permit voucher is the user identified in the permit voucher. This may be done using any of a variety of techniques. According to a specific implementation the OpenID standard is employed for this function. This allows for identity assurance without exposing the user s credentials e.g. user name and password . OpenID may also be used to enable user interface access to the system and management of a corresponding account. Such an approach may be leveraged to enable connecting vouchers to the individual user currently logged in thus enabling for example an audit trail.

According to another implementation this function is implemented with the BrowserID identity protocol recently renamed Persona from Mozilla Corporation. This protocol represents a source of authenticated identity that may be used by the cAS to bind an identity to a permit voucher as well as for other purposes. More specifically the protocol verifies that a given email address corresponds to a particular user. Further details regarding the BrowserID or Persona identity protocol from Mozilla may be found at www.mozilla.org.

The Lockbox Server cLS is the repository in which a user s collection of vouchers is stored as well as the system s primary user interface through which each user manages his collection of vouchers e.g. with the user s own computing resources such as for example a laptop or a smart phone . According to some embodiments a cLS may be implemented as an application that runs entirely or at least partially on the user s device. Voucher management may be accomplished with any of a variety of interface and file organization mechanisms e.g. hierarchies of folders tags etc. According to the depicted implementation the Lockbox Server is configured to coordinate the activities of other system components to enable user operations such as redemption of vouchers claiming etc. It should be noted that embodiments are contemplated in which a cLS is not present e.g. users may interact directly with the other system components in the manner described herein with their own computing resources. Embodiments are also contemplated in which multiple parties may be operating cLS s of various types. A cLS might be as simple as an email folder in an email system or something more complicated like a database. A cLS might also be implemented as part of a multi purpose application that includes other functionalities. More generally a cLS may be associated with or optimized for use with one or more specific RoIP enabled applications or else entirely generic and application agnostic.

The Escrow Server cES encodes the rules governing a particular class of vouchers. In particular and as will be discussed the Escrow Server controls the creation and redemption of offer vouchers. According to some implementations the Escrow Server may also be configured to coordinate trades of goods and or services i.e. trades of the vouchers representing such goods and or services according to parameters and rules specified by anyone proposing such a trade.

The Mint Server cMS is responsible for the creation of all vouchers other than offer vouchers and some account vouchers i.e. account vouchers may be issued by the system component where they will be used to create voucher classes . These include vouchers that can be part of exchanges of vouchers under the control of the Escrow Server e.g. as the consideration provided during the course of redeeming an offer voucher.

The Protected Resource Server cPR is a repository that stores or otherwise controls access to the digital resources that are the subject of the rights expressed in vouchers e.g. digital content services etc. The Protected Resource Server provides access to particular digital resources in response to presentation of a corresponding token that has been issued by the Authorization Server as part of the validation of a corresponding voucher. In some implementations the Protected Resource Server may be implemented by and under control of the entity that owns or controls the digital resources e.g. a content publisher or service provider. It is contemplated that according to some embodiments cPRs are the most numerous and diversely implemented components in the system e.g. representing the diversity of products services and corresponding providers followed by cLSs i.e. the way in which the consumers of products and services interact with the system .

According to one class of embodiments the Protected Resource Server is implemented as a gem i.e. a library of Ruby code that may be downloaded to a web server and that provides all of the code necessary to validate tokens and to turn the web server into a Protected Resource Server. The gem acts as a kind of filter or gateway that ensures that only requests accompanied by valid tokens can access the corresponding protected resources.

A Protected Resource Server can be configured to accept or choose to trust the tokens issued by one or more Authorization Servers. According to a specific embodiment this is accomplished by the Protected Resource Server being in possession of a particular Authorization Server s public key and the matching digital signatures in the tokens issued by that Authorization Server.

The system components depicted in interoperate in defined ways typically operating on endpoints that are encoded in vouchers. For example the Mint Server that creates a voucher selects the Authorization Server that will be used to validate that voucher and encodes that endpoint in the voucher.

As alluded to above the system components in some embodiments may be implemented in accordance with at least some of the guiding principles embodied by the REST REpresentational State Transfer computing paradigm. The currently evolving notion of a RESTful system is based on the doctoral dissertion of Roy Thomas Fielding entitled University of California Irvine 2000 the entirety of which is incorporated herein by reference for all purposes. Although there is as of yet no ratified standard a RESTful system generally observes a set of principles that define how Web standards such as HTTP and URLs may be used to facilitate heterogeneous application to application communication. Generally speaking REST relates to resource based systems in which URLs refer to the resources and HTTP verbs e.g. get post put or delete are used to manipulate these resources.

According to a specific class of embodiments each system component has a specific set of responses to the HTTP verbs. That is each component stores a set of rules for how it operates on the contents of a query for each of the different verbs. A list of HTTP verbs for each system component in a particular implementation is provided below. Some implementations employ HTTPS the secure version of HTTP to obscure important information from potentially malicious third parties. For additional information on RESTful systems please refer to posted by Stefan Tilkov on infoq.com on Dec. 10 2007 the entirety of which is incorporated herein by reference for all purposes.

In addition and according to some embodiments authorization in some steps of some system flows may be achieved in accordance with at least portions of OAuth 2.0 as described in 2.0 draft ietf oauth v2 28 Network Working Group E. Hammer Ed. dated Jun. 19 2012 the entirety of which is incorporated herein by reference for all purposes.

Examples of flows illustrating interaction among system components according to specific embodiments of the invention will now be described with reference to the accompanying figures. The convention for these figures is that time extends down the page and components involved in the depicted flow are arranged across the top of the page. Communications between endpoints e.g. requests or queries and responses are depicted as horizontal arrows with the name of the endpoint to which the communication is directed above the arrow and a description of the communication payload below the arrow. Diamonds represent validations or other operations performed by the corresponding component.

The flow shown in illustrates redemption of a right for a product or service of some kind e.g. a digital asset with a pass voucher. The depicted example is one of the simpler flows and relates to the use of the simplest type of voucher i.e. a pass voucher. The way in which other flows described below handle permit vouchers and ticket vouchers is similar to how those types of vouchers are handled in the redemption scenario and so portions of the flow of that are common with those flows will not be explicitly described in the description of those flows. And more generally common steps in different flows may be omitted and or combined to provide emphasis on the more relevant steps for the corresponding description. Moreover a wide variety of specific use cases and combinations not explicitly enumerated and described herein may be readily inferred by those of skill in the art from the descriptions of the flows presented herein.

The flow of involves three components i.e. an Authorization Server cAS a Lockbox Server cLS and a Protected Resource Server cPR . As the depicted flow involves redemption of an existing pass voucher that is not an offer voucher participation of a Mint Server cMS or an Escrow Server cES is not required. Initially a user selects one of his vouchers e.g. a voucher representing the right to access a picture in a user interface provided by the cLS. From the user s perspective this may involve selecting a link or a visual representation of the picture e.g. a thumbnail in the interface as is done with conventional techniques.

In response to the selection of the pass voucher the cLS identifies the selected voucher as a pass voucher for a product with no parameter template discussed below and that determines what flow will govern the operation. The cLS needs to request a token for presentation to the cPR which is not configured to process vouchers. That is the cPR requires a valid token as proof that access to the resource should be authorized. To obtain the necessary token the cLS makes a request to the corresponding token endpoint of the cAS and provides the selected pass voucher as the payload of the request identifying which one of potentially multiple rights encoded by the voucher is to be redeemed.

The cAS needs to validate the pass voucher before it can issue the requested token. According to a specific embodiment the cAS validates the voucher by checking the signature of the voucher. An additional signature check may also be included that ensures that the voucher was not forged by an unauthorized component e.g. the public key of the component that issued the voucher.

According to a specific implementation signature comparison is accomplished using a Ruby gem called lorax which solves the problem of comparing blocks of xml to ensure semantic consistency even where the blocks may differ in other respects that don t affect meaning e.g. different amounts of white space different order of attributes etc. This is important because as vouchers get moved in and out of databases the XML representations can change in minor respects without affecting their semantic characteristics. For more information regarding lorax please refer to Gregory Cobena Ecole Doctorale de l Ecole Polytechnique 2003 the entirety of which is incorporated herein by reference for all purposes.

According to another implementation in which tokens and vouchers are encoded using JavaScript Object Notation JSON signing a voucher e.g. an unordered grouping of key value pairs expressed as a JSON encoded string is accomplished by removing any whitespace outside of encoded values lexographically sorting the various keys within the keys values list removing the refresh and signature keys and associated values and performing a Digital Signature Algorithm signing operation on a cryptographically secure hash of the resulting JSON encoded string. The Base64 encoded result of the signing operation is added as the value of the signature key of the voucher and used as the basis for future validation of the voucher required for issuance of a token by the Authorization Server cAS . Signature validation assures that no unauthorized alterations were made to the voucher between signing and token issuance similar to the lorax based signatures used for XML formatted vouchers.

In the example of the cAS does not need to authenticate the user requesting access to the protected resource because the voucher is a pass voucher which may be used by anyone. Neither does the cAS need to know anything about the cPR. Rather in this simple case the cAS simply needs to validate the voucher in response to which it generates a token corresponding to the specified right signed by the cAS using the Digital Signature Standard DSS and sends it back to the cLS as a payload .

According to a specific implementation the cAS flow for validating vouchers in response to a request for an access token includes 1 for permits access code validation 2 for permits tickets and passes voucher signature validation 3 for permits tickets and passes namespace validation and 4 for tickets and permits refresh validation. The order of these operations may vary. It should also be noted that these steps in whatever order must all be performed for the relevant vouchers e.g. the processing a permit voucher is not complete simply because the access code is validated.

According to a specific implementation the token is a JavaScript Object Notation JSON object that is only valid for one endpoint on the cPR and only for a specified period of time e.g. 10 minutes. The token includes a pair of key values named according to or at least in partial compliance with the OAuth standard. That is the token employed by this embodiment inherits the attributes of a conventional OAuth token with some additional attributes.

The cLS receiving the token embeds the token in the authorization header of an HTTP query e.g. an HTTP get to the cPR that has the corresponding digital asset and transmits the HTTP query to the asset endpoint on the cPR . The cPR validates the token by checking the signature and determining whether the scope i.e. the key for the value of the requested digital asset is equivalent to the endpoint to which the query is directed. Once the token is validated the cPR returns the corresponding digital asset to the cLS which in turn presents the digital asset to the user who requested it.

According to various implementations a cPR can interpret the scope or any other aspect of a token. For example the scope can be interpreted as requiring an exact match for the incoming query for a protected resource as validating access to any resource under the root of a tree denoted by the token s scope or using any other policy chosen by the resource owner operating the specific cPR.

The flow shown in illustrates redemption of a right for a digital asset with a ticket voucher i.e. a voucher that can be redeemed by only one holder but where the identity of the holder is unrestricted. As with the flow of no namespace or parameter template is involved in this example. Unlike a pass voucher a ticket voucher requires a refresh i.e. a mechanism that makes the ticket voucher a digital bearer instrument. As used herein the term digital bearer instrument refers to a digital object the possession of which is sufficient to validate its redemption. Possession in the case of a pass voucher means simply having an unmodified copy of the voucher. For ticket vouchers possession means having an unmodified copy of the voucher containing the most current refresh value. For permit vouchers possession is the same as for ticket vouchers except the holder must also supply credentials identifying himself as the entity corresponding to the user identity of the permit voucher. Generally speaking a refresh value is not signed component of a voucher because as discussed below it needs to be able to be modified unlike a signature which needs to remain constant. Because the refresh value is an opaque value that cannot be guessed the strength of the system is not compromised by this design decision.

The use of a refresh to give the ticket voucher its bearer character is reflected by additions to the flow of as illustrated in . As shown in response to the initial token query from the cLS and in addition to the voucher validation steps described above the cAS also validates the voucher by checking the refresh value encoded in the voucher which must match the most recent refresh value stored by the cAS. That is when the cMS issues a ticket or permit voucher it requests an initial refresh value from the cAS which it encodes in the voucher and which is stored by the cAS. Each time the voucher is subsequently involved in a claim or redemption flow a new refresh value is generated by the cAS which is inserted into the voucher and stored by the cAS. According to a particular implementation each time a new refresh value is assigned by the cAS to a voucher a sequence number embedded in the refresh value is incremented and can be used by the cLS or any other component to assist in identifying the most recently generated refresh value. This optional feature is useful for ordering multiple copies of the same voucher having different refresh values.

According to a specific implementation the refresh value which makes ticket and permit vouchers digital bearer instruments represents a pseudo randomly generated number. As will be understood any of a wide variety of suitable algorithms exist that could be used for this purposes that generate values that are cryptographically valid and computationally infeasible to determine. Often such algorithms are provided within the operating system of the computing resource s on which the cAS operates. One example of such an algorithm that is suitable for use with embodiments of the invention is the random number generator in the Open SSL Linux library.

If the refresh value in the voucher matches the refresh value held by the cAS the cAS generates a token with a new refresh value which the cAS stores and sends the token back to the cLS . The cLS updates its copy of the voucher with the new refresh value otherwise it would no longer be usable embeds it in the authorization header of an HTTP query and sends the token to the cPR endpoint as described above to request the digital asset.

The flow shown in illustrates redemption of a right for a digital asset with a permit voucher i.e. a voucher that can be redeemed by only one holder with a specific identity. As with the flows of no namespace or parameter template is involved.

The flow depicted in is one of the more complicated flows involving browser redirection and the use of an iframe. In addition the flow includes another system component which in the depicted implementation is an OpenID server responsible for facilitating user authentication. As will be understood any suitable user authentication mechanism could be used. It should also be noted that for the sake of simplicity the portion of the flow following the cAS providing the access token to the cLS e.g. see is not depicted.

When the cLS determines that the voucher selected by the user is a permit voucher it generates a request to an authorization endpoint on the cAS for an authorization code e.g. in accordance with OAuth 2.0 and transmits the request to the cAS with the permit voucher as the payload and stores the voucher in session . The cAS validates the voucher retrieves the user identity information from the voucher . Meanwhile the cLS opens an iframe in the user s browser . The cAS puts up a login screen in the iframe in which the user is prompted to enter his claimed identity information but not his password and then assuming the identity information entered in the login matches the identity information encoded in the voucher requests credential verification from the OpenID server and redirects the user s browser to the OpenID server corresponding to the identity information encoded in the voucher .

The OpenID server then puts up a password collection screen in the iframe open in the user s browser in which the user is prompted to enter his password thus keeping the password out of the hands of the system s other components . According to a specific embodiment in which the browser s address bar does not indicate the URL of the OpenID server that a sophisticated user might expect i.e. because the connection is established with an iframe additional verification information may be presented either in the iframe itself or in the browser s address bar to reassure the user that they are securely interacting with the correct OpenID server as expected.

In the initial credential collection query to the cAS the cLS also provides a redirect URL to the cAS that specifies a callback URL on the cLS for a second level of redirect. Assuming the user enters the correct password the OpenID server returns a response to the request from the cAS with information associated with the correct credential collection. When the cAS is assured that the OpenID server responded correctly it provides an authorization code to the callback URL on the cLS . In the depicted embodiment these communications between the cLS and cAS are at least partially OAuth 2.0 compliant while the communication between the cAS and the OpenID server are compliant with the OpenID protocol. That is the cLS views the cAS as an authority for identity information but the cAS in turn needs the OpenID server as its authority for identity information.

The authorization code enables the cLS to then make a token request which includes both the authorization code and the voucher to the cAS which validates the presented authorization code against its stored copy of the authorization code also referred to as a verifier in the lexicon of OAuth 2.0 and issues the token to the cLS . The cLS may then request the digital asset from the cPR as discussed above. As will be appreciated in this example signature and refresh validation updating are omitted for the sake of clarity.

According to a particular implementation that employs the BrowserID identity protocol instead of OpenID to authenticate the user of a permit the assertion issued by BrowserID for the purpose of logging into the cLS is stored by the cLS with a programmable lifespan e.g an hour and may be sent to the cAS which checks back with BrowserID to validate the assertion. If the assertion is still valid e.g. still within its lifetime the cAS can use it for authentication of the user without having to prompt the user for an additional log in. On the other hand if the assertion is no longer valid the cAS may request that the user log in.

According to various embodiments the hierarchy of vouchers issued by a cMS includes a master voucher that contains the right to issue account vouchers account vouchers that contain the right to issue vouchers issue vouchers that contain the right to issue final product vouchers and final product vouchers that may be redeemed for digital assets. The hierarchy of vouchers issued by a cES includes a master voucher that contains the right to issue account vouchers account vouchers that contain the right to issue offer vouchers and offer vouchers. The hierarchy of vouchers issued by a cAS includes a master voucher that contains the right to issue account vouchers account vouchers that contain the right to register namespaces and namespace vouchers that contain the right to de register the corresponding namespace e.g. using the delete HTTP method .

According to a particular class of embodiments issuance of a voucher involves a parameter template. is an illustration of a flow for the issuance of a voucher for a product which assumes the user interacting with the cLS is in possession of an issue voucher. As shown this flow involves the cMS which in this example plays a role similar to the cPR in that the voucher issuance endpoint can be thought of as a protected resource to which an issue voucher provides access. The flow begins like a redemption flow in that the user wishing to issue the voucher selects his issue voucher in the interface provided by the cLS. And the depicted flow is a two part flow in which the cLS first obtains a parameter template with which the user can specify certain variable characteristics of the final product voucher followed by the issuance of the product voucher itself using the completed template.

In response to selection of the issue voucher by the user the cLS generates and transmits a request to the voucher issuance endpoint on the cMS for the corresponding template . The cMS looks up the issuance endpoint to which the request is directed stored as part of the issuance of the issue voucher and retrieves the parameter template and transmits it back to the cLS . The issuance endpoint corresponds to a class of vouchers the endpoint is responsible for issuing.

According to some embodiments the cMS endpoints to which the request for the parameter template and the request for the final product voucher are directed may have different URLs. According to others they may be one and the same. In one such embodiment different HTTP requests are used to distinguish between the two operations e.g. a get may be used to obtain the parameter template and a post may be used to obtain the final product voucher. Thus a post request to a cMS issuance endpoint in this flow contains parameters provided as part of a parameter template. The point of the request for the parameter template is to obtain the fixed and variable parameters required to redeem the right to access the issuance endpoint and proceed with issuance of the voucher.

Parameter templates may also be used by a cPR to constrain access to protected resources during product redemption. For example a cPR may optionally provide fixed and or variable parameters in a parameter template at an endpoint on the cPR which may be the same as or different from the redemption endpoint and then require that those parameters appear in any redemption requests directed to that endpoint.

Returning to the cLS presents the parameter template received from the cMS to the user in any suitable format that will allow the user to view the template and or to fill in any variable values for customization of the voucher to be issued in anticipation of a subsequent request to the cMS for issuance of the voucher itself. According to a specific embodiment variables are encoded in the parameter template using mustaches which come from a Ruby gem called mustache which presents variables for interpolation using double squiggle brackets. When the cLS encounters a mustache in the returned parameter template the user is presented with a suitable input field e.g. a text field drop down menu etc. in which a corresponding variable value may be entered. Thus different looking product vouchers may be issued from the same class of issue voucher.

Once the user has filled in any variables or has simply reviewed the template in the case where the template contains no mustaches the user can choose to submit the template in response to which the cLS generates and transmits a request to the cAS for a token for accessing the cMS issuance endpoint from which the voucher is to be generated. As with a redemption flow discussed above the cAS receives the request validates the voucher and transmits the token back to the cLS .

After receiving the access token from the cAS the cLS generates a final redemption request for issuance of the product voucher using the parameter template . The request is directed to the URL of the issuance endpoint on the cMS with a payload of the parameter template and the access token originally requested by the cLS for the issuance endpoint on the cMS. The cMS then uses the parameter template including any variable values specified by the user to generate the final product voucher which it then transmits to the requesting cLS.

As will be discussed the issuance of offer vouchers by the cES and the registration of namespaces by the cAS employ similar flows although it should be noted that the cMS flow may include the step of issuing an issue voucher which is not needed by the other two components in that they only have a single class for namespace and offer issuance.

In the depicted example the cLS generates a request for issuance of a voucher and includes a parameter template and an access token e.g. the final redemption request of . The cMS then generates a request directed to the refresh endpoint on the cAS for a token which the cMS then uses to request the initial refresh value for the voucher being issued . The refresh endpoint on the cAS is a highly protected resource in that it is the updating refresh value that enables the redemption of rights in the system. According to one class of embodiments the cMS stores a ticket or permit voucher that allows it access to the refresh endpoint on the cAS. According to other embodiments trust can be established between the cMS and the cAS for this purpose using any of a wide variety of mechanisms including for example OAuth 2.0 or an OAuth compliant protocol.

In response to the request from the cMS the cAS refresh endpoint responds with an access code containing the initial refresh value . The cMS extracts the initial refresh value from the received access token discards the remainder of the token applies the initial refresh value to the voucher being issued signs the voucher and then transmits the voucher to the cLS to be stored in the repository of the issuer that requested it .

The holder of an offer voucher that has been issued has by definition the right to accept the offer as specified in the offer voucher. The issuer of an offer voucher also referred to as a proposer not only gets back the offer voucher he requested be issued but also a proposer voucher which includes rights such as for example the right to cancel the offer so the offer is no longer available for acceptance even by people that hold the offer voucher the right to un cancel the offer i.e. to reinstate a previously canceled or expired offer and the right to collect the consideration provided by acceptors of the offer that accumulate in a corresponding repository in the cES. According to various embodiments upon acceptance each offer can receive zero or more consideration vouchers and provide one or more benefit vouchers. All consideration vouchers provided in connection with all acceptance occurrences are returned to the offer proposer in a collection step.

According to various embodiments offer vouchers can be any type of voucher pass ticket or permit with the example illustrated in being the issuance of an offer voucher that is a pass voucher for simplicity. The differences in the flow for ticket and permit type offer vouchers will be understood by those of skill in the art by referring to the previous flows discussed above.

According to a particular implementation the offer issuance voucher is an account voucher that includes the right to issue offer vouchers on the cES i.e. a right to access the corresponding single endpoint on the cES. More generally an account voucher which is under a particular account as discussed below includes an issue right that allows the holder to create vouchers on a corresponding one of the system components capable of issuing vouchers i.e. the cMS cES or cAS.

The offer proposer has a voucher e.g. an account voucher that contains the right to issue an offer voucher i.e. a right which is analogous to but distinct from the right in an issue voucher. The proposer interacting with the cLS initiates the offer issuance flow in response to which the cLS generates and transmits a request for a parameter template e.g. an HTTP get directed to the endpoint on the cES corresponding to the right to issue an offer . Unlike the multiple issuance endpoints for vouchers issued by the cMS for different classes of issue vouchers the endpoint on the cES for issuing offers is a single endpoint i.e. there are not multiple classes of offer vouchers like there can be for vouchers issued by the cMS.

The cES returns the requested parameter template to the cLS . In response to completion of the parameter template on the cLS by the proposer e.g. filling in the offer terms benefits consideration etc. in the template mustaches the cLS generates a redemption request to the cAS for an access token to the same cES endpoint from which the parameter template was received . The cAS receives the request for the token validates the voucher in the payload e.g. as discussed above and returns the requested token to the cLS . It should be understood at this point that if the voucher sent to the cAS is a ticket or permit voucher e.g. an account voucher is typically a permit voucher all of the steps described above relating to redeeming ticket or permit vouchers would be required. These steps are not shown in for the sake of simplicity.

The cLS receives the token from the cAS and generates a request for the offer voucher e.g. an HTTP put to the cES offer issuance endpoint with the token and the completed parameter template as the payload . The cES responds with both the offer voucher and the proposer voucher which are stored in the proposer s repository on the cLS .

According to a specific class of embodiments the user interface presented to the offer proposer interacting with the parameter template on the cLS includes selectable options corresponding to the types of vouchers that are appropriate for use as benefits and considerations. This is important for such embodiments in that a benefit is a voucher issued by the cES at the time of acceptance of an offer by a user. To enable this the proposer also supplies to the cES a benefit issue voucher BIV in the payload of the request for issuance of the offer voucher. The BIV in turn refers to a voucher issuance endpoint on the cMS for which the corresponding parameter template contains no mustaches i.e. the cMS does not have the intelligence to fill in variables. Therefore according to such embodiments before issuing the offer voucher the cES verifies that the parameter template on the cMS corresponding to the BIV does not include mustaches.

According to a specific embodiment the BIV could be implemented to enable limited offers. For example the BIV could specify that only a specific number of benefit vouchers are to be issued or could be implemented to expire after a certain period of time or at a specific point in time. Alternatively the proposer could monitor the number of acceptances or the passage of time and use his proposer voucher to terminate the offer at his discretion.

The consideration required to effect acceptance of an offer represented by an offer voucher is specified by the proposer e.g. by selecting a parameter template option as an endpoint on the cMS from which vouchers that are acceptable consideration are issued i.e. all vouchers of a particular class of vouchers corresponding to the specified cMS endpoint. Thus the range of acceptable consideration for accepting an offer is determined by the size or generality of the class of vouchers that may be issued by the specified cMS endpoint. For example if the parameter template corresponding to the issuance endpoint on the cMS is highly variable e.g. contains many mustaches the range of consideration suitable for responding to an offer specifying that endpoint is correspondingly large.

According to a particular implementation the cES receives the request to issue the offer voucher from the cLS and stores and claims the BIV. As used herein the claiming of a voucher refers to a claim right included in each ticket voucher and each permit voucher which is not specified by the original issuer but is instead generated dynamically by the cMS. The claim right in a ticket or permit voucher allows any holder of a copy of the voucher including for example the cES to claim the voucher by requesting a new refresh value for the voucher from the corresponding endpoint on the cAS. Exercise of the claim right effectively takes away the right of any other holder of a copy of the voucher to redeem the voucher because the copies held by anyone else do not contain the current refresh value. For ticket vouchers the claim right allows one holder to terminate another holder s ability to redeem the ticket voucher in favor of his own.

The claim right may even be exercised for a permit by user that is not the user identified by the permit voucher as the user entitled to redeem the other rights represented by the permit voucher. That is even though a user holding a permit voucher might not be entitled to redeem the primary rights of the permit voucher because he does not correspond to the identity specified in the permit voucher he can prevent the user corresponding to that identity from redeeming the permit voucher by exercising the claim right and updating the refresh value in the cAS and in his copy of the permit voucher. In such a case neither of the users could redeem the permit voucher.

To understand the value of the claim right it should be noted that vouchers can be viewed much like currency i.e. when someone steals a dollar bill from someone else for better or worse the thief get to use the stolen currency. Thus the security of the dollar is up to its owner to assure. In the context of a system designed as described herein the claim right enables the completion of any transfer process in which a first user intentionally gives a second user a ticket voucher. This makes sense in that for many types of underlying assets the second user would want assurance that first user was no longer able to use the transferred voucher. Otherwise the meaning of transfer relative to a ticket voucher would be very weak. By contrast because pass vouchers are freely copyable and any number of copies are usable no claim right is required.

For permit vouchers the ability to claim one for which the claimant had no identity credentials would allow the claimant to safely store the permit voucher on behalf of whoever does have the user identity credentials specified in the voucher i.e. the owner. This would be safe from the point of view of the owner of the permit voucher who would know that although his voucher had been claimed by the storing entity it could still only be redeemed by the legitimate owner after he had reclaimed it. That is when the claimant gives the permit voucher back to its owner the owner can then claim it back. The claim right therefore enables escrows.

According to some implementations claim rights are not necessary and are therefore not appended to vouchers when they are issued. That is because claims represent the first half of a redemption i.e. the process of requesting and receiving a new refresh value such implementations instead simply execute the first half of the redemption by obtaining the token but not redeeming it. Thus claim rights are not needed.

Referring once again to the offer issuance illustrated in when the cES exercises the claim right in the BIV received from the proposer the cES rather than the proposer now has the right to issue benefit vouchers with that BIV. If the proposer claims the BIV after offer issuance the offer will become disabled because the BIV is longer redeemable by the cES and therefore benefit vouchers cannot be issued and the offer acceptance process cannot proceed.

Each offer voucher created by the cES specifies an acceptance endpoint on the cES. The corresponding proposer voucher specifies a cancellation endpoint an un cancellation endpoint and a collection endpoint. The acceptance endpoint in the offer voucher has information about the consideration s and benefit s used for validating acceptance of the offer e.g. as originally specified in the parameter template by the proposer during offer issuance .

To accept an offer represented by an offer voucher the user in possession of the offer voucher initiates the redemption flow in a manner similar to the redemption flows described above e.g. see with the cES being in the role of the cPR. According to a specific implementation of the possibly multiple rights present in an offer voucher there is a single right to accept the offer. This right permits post access to the unique endpoint of the offer as exposed by the cES. The user also selects a voucher in the user interface of the cLS that is of the class specified by the offer voucher as acceptable consideration except in the case where no consideration is required and the cLS sends the token received from the cAS and the voucher s selected by the user representing the required consideration to the corresponding acceptance endpoint on the cES. Assuming the token and consideration are valid the cES issues a benefit voucher to the user using the BIV e.g. see voucher issuance examples in .

 Accounts and namespaces are both mechanisms for restricting the ability to issue or redeem vouchers. They also allow the system to control and monitor the flows by which product or offer vouchers are redeemed.

According to various embodiments an account is not manifested in the system in a conventional manner. That is information about an account is not separately stored in the system but instead exists as an abstract concept that is encoded in the URL of a right. For example if a user has an account called David this means that the user has a voucher that contains a right to operate on a cluster or a tree of objects under the David account on the system but the system does not separately store the fact that the user and the account are connected. Instead an account is a segment of a URL corresponding to a system endpoint e.g. on a cMS cES or cPR. According to a specific implementation the account is the first of a series of user controllable segments of such a URL. For example in the URL https cpr.company.com roip sony songs resource name the segment song songs is specified by the issuer with song identifying the account. And in this example the segment songs is the final component or sub account of the account in which the named resource can be said to reside. The segment resource name is a resource identifier chosen by the creator of the voucher class on the cMS the offer proposer on the cES the namespace registrant on the cAS or the protected resource owner on the cPR .

A master voucher contains the right to issue vouchers with no account identified. As such the owner of a master voucher can issue vouchers under any account. However the primary intended use of a master voucher is to issue account vouchers. Obviously master vouchers would typically only be held by highly trusted entities e.g. a company operating a cAS.

An account voucher typically contains rights to access endpoints on a corresponding system component capable of issuing vouchers e.g. a cAS a cMS or a cES. As discussed above a cMS maintains templates that can be redeemed resulting in the issuance of vouchers. Similarly a cES operates on offers that have been created and stored to effect acceptance by redeemers. As will be discussed a cAS operates on namespaces. All system components use accounts in the same way to effect these core operations.

An account voucher includes the right to issue vouchers on a corresponding one of the system components capable of issuing vouchers i.e. a cMS a cES or a cAS but only under the corresponding account. The flows corresponding to these rights embed the account in the URLs specified in these vouchers. That is the holder of an account voucher can only create system endpoints that specify the corresponding account. Thus the restriction represented by the account propagates through to vouchers created under the rights represented by the account voucher e.g. to issue vouchers and offer vouchers.

Sub accounts may also be issued underneath the account specified in an account voucher i.e. the account holder is functionally restricted to issuing resources or sub accounts underneath the account he holds. Such new resources and sub accounts may be issued using an HTTP put directed to the URL of the account with a string including the string corresponding to the main account concatenated with one or more additional strings separated by slashes corresponding to the desired sub account or resource. In response the component to which the request was sent issues a new account voucher for the sub account with functionality similar to the original account voucher but only under the portion of the main account tree corresponding to the newly created sub account. This allows the holder of an account voucher to build a tree of sub accounts of arbitrary breadth and depth under the main account without ever separately storing information for each. This might be useful for example where a content provider intends to distribute different types of content through different parts of its organization. That is account vouchers for different sub accounts can effectively mirror the real world organizational structure of the content provider s organization to enable such functionality.

Product vouchers vouchers containing rights to resources on cPRs other than cAS cES cLS or cMS components issued using an issue voucher may or may not specify an account and the account specified may be different than the account specified in the issue voucher. That is a mustache may be included in the parameter template associated with a particular issue voucher that allows the issuer to specify any or no account. Such a capability might be useful where for example a cPR doesn t care about accounts e.g. a cPR that stores protected resources from multiple content publishers. It also allows for the specification of an arbitrarily deep hierarchy of folders on the cPR under which protected resources may be organized.

A namespace is the top of a DNS tree under which all DNS subdomain names may be said to belong to the same parent namespace. For example if the namespace company.com is registered then cPRs with hostnames of www.company.com assets.company.com and songs.assets.company.com are all considered part of the company.com namespace. When providing a token for a protected resource the cAS compares the account in the presented voucher with namespace of the right for which it is providing the token and if the namespace is registered to a different account the cAS refuses to provide the requested token. On the other hand if the namespace is either registered to that account or one of its sub accounts or unregistered the cAS provides the token.

A server controlled by a cPR operator operates within a DNS tree having a corresponding namespace. The cPR trusts the cAS with which the namespace is registered not to allow the issuance of initial refresh values for vouchers containing rights under namespaces registered under different accounts than the requester of the initial refresh value nor to issue tokens containing rights within namespaces registered to accounts other than that of the issuer of the voucher used to obtain the token. The URL of the cPR is itself the endpoint of the right being redeemed so cPR operators who register their cPRs DNS trees as namespaces can be sure that only the vouchers they themselves issue can result in access to those cPRs via tokens.

A cAS stores a namespace associated with a registering account as a result of which only the account associated with that namespace can issue vouchers under that namespace and no other account can reserve that namespace from that point on.

Namespaces allow the operators of protected resource servers to ensure that tokens will not be issued thereby denying service for vouchers containing rights to URLs within the operator s DNS namespace s except if the voucher was issued under the same account that registered the namespace typically the same organization that operates the Protected Resource Servers. Namespaces allow a highly distributed system to collaborate to enforce a DNS based security policy.

An XML instantiation of a representative voucher is shown below. This is a canonical format that a voucher might take in which multiple rights may be represented as multiple independent entities within the XML representation. However regardless of this depiction it should be understood that a voucher may exist independent of its XML or JSON instantiation in any of a wide variety of forms such as for example a record in a database. As discussed above despite any transformation of a voucher from one form to another that might result in semantic changes to the voucher whether it is the same voucher can be determined using for example a utility like the Ruby gem called lorax referred to above and by verifying the voucher s signature.

According to a specific implementation RoIP vouchers as seen by their users conform to the XRD Extensible Resource Descriptor http docs.oasis open.org xri xrd v1.0 xrd 1.0.html document format which is defined as an XML Schema. The AV namespace used to extend XRD for the RoIP system offers several variable parameters used to describe and control the behavior of the voucher. XML voucher templates with slots for filling in some of these variables are used to create new vouchers and offer vouchers. The ordering of the elements in the AV namespace and of child elements of the element is not determinative they can appear in any order.

In this implementation vouchers do not utilize XRD s optional element because they are signed using a different canonicalization scheme.

The globally unique ID of the voucher is found in the element. Appearances of the same value elsewhere in the Voucher are not definitive. Vouchers once issued are generally immutable. The element verifies the validity of the voucher s contents and prevents vouchers from remaining valid after being altered. Vouchers which are textually different but which share the same are copies of the same voucher. It is an error for such copies to contain semantic differences as opposed to differences in whitespace line wrapping or element ordering and such copies will always fail validation unless the elements are also different. The and timestamp elements are the only elements excepted from the prohibition against alteration.

All vouchers can carry the element but its value is crucial for ticket and permit vouchers as follows. Only one specific refresh value is acceptable by the Authorization Server cAS for redemption of the voucher thus all other refresh values are invalid and will result in redemption failure. Upon each successful redemption of a ticket or permit voucher the refresh value in the voucher must be updated to the new one provided in the RoIP access token provided by the cAS during redemption to retain the voucher s future usability. Because the refresh element is not part of the signed portion of the voucher this change to the voucher will not disturb the validity of the element.

Each voucher contains zero or more rights. A right defines a capability to which the voucher gives access. The right can provide access to a concert authorize the pickup of an appliance at a store allow a video to be viewed or a song or photo to be downloaded express a title to a vehicle or a piece of real estate authorize the creation of new vouchers or offers authorize nearly any activity or access that is sold traded monitored or registered.

Each right occupies a attribute of the voucher document described by the of the link and defined by the URL in the link s href. In XRD a is a resource related in some way to the overall document and the link itself describes the nature of the relationship. There is currently no defined limit to the number of rights in a voucher. The meaning of each element contained in a link is described by a type parameter with a URL that optionally can respond with detailed description but generally conforms to the last component of the URL e.g. the property http def.av.net types ActiveRight 1.0 createdAt contains the timestamp of that right s initial creation. If a right contains these will be sent verbatim along with the redemption query. The ParamTemplateURL is the endpoint where a string containing additional parameters to be sent with the final redemption request for the right may be found. If it includes variables in the form of mustaches they may be filled in according to the desires of the redeemer. If a right contains an IconUrl it is considered a primary right displayed in UIs with that icon. Non primary rights will have their capabilities listed as text only in a UI.

The following is a description of the HTTP methods or verbs used by each of the system components and the operations for which each is used according to a specific implementation.

cMS The cMS operates on Voucher Classes within account hierarchies. When a new sub account node is created by a holder of its parent node an Account Voucher for the child is issued. When a resource is created by an Account Voucher holder an Issue Voucher and associated cMS Endpoint are created. Redeeming the Issue Voucher results in the creation of a Voucher. Classes Templates are immutable.

cES The cES operates on Offers within account hierarchies. It builds offer and proposer Vouchers but relies on cMS generated Account Vouchers with cES Rights to generate tokens for access to the necessary Endpoints the cES will not build Account Issue or Product Vouchers.

While the invention has been particularly shown and described with reference to specific embodiments thereof it will be understood by those skilled in the art that changes in the form and details of the disclosed embodiments may be made without departing from the spirit or scope of the invention. In addition although various advantages aspects and objects of the present invention have been discussed herein with reference to various embodiments it will be understood that the scope of the invention should not be limited by reference to such advantages aspects and objects. Rather the scope of the invention should be determined with reference to the appended claims.

This Glossary defines many of the terms used in the foregoing description as they pertain to a particular class of embodiments and therefore forms part of this disclosure. It should be noted that embodiments are contemplated in which some of the details presented in this Glossary are modified or excluded. It should also be noted that terms defined in this Glossary are bold faced when they first appear within a definition of another term.

