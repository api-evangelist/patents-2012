---

title: Detection of file modifications performed by malicious codes
abstract: File modifications performed by malicious codes are detected by detecting a file modification for an original file before the file modification is performed on the original file. In response to detecting the file modification, a corresponding shadow file is created. The shadow file represents the original file as modified by the file modification. Before allowing the file modification to be performed on the original file, the original file is compared to the shadow file to determine if the file modification is being performed by malicious codes. The file modification may be deemed to be performed by malicious codes when the file modification involves, for example, entry point append, entry point prepend, entry point obfuscation, cavity, overwriting, or mal-tattoo.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378369&OS=09378369&RS=09378369
owner: Trend Micro Incorporated
number: 09378369
owner_city: Tokyo
owner_country: JP
publication_date: 20121211
---
This application is a continuation of U.S. application Ser. No. 12 873 949 filed Sep. 1 2010 which is incorporated herein by reference in its entirety.

The present invention relates generally to computer security and more particularly but not exclusively to methods and apparatus for detecting file modifications performed by malicious codes.

Computer viruses worms Trojans rootkits and spyware are examples of malicious codes that have plagued computer systems throughout the world. Malicious codes have become so prevalent that experienced computer users have some form of antivirus in their computers. Antivirus products for scanning data for malicious codes are commercially available from several vendors including Trend Micro Inc.

Conventional antivirus products typically employ some form of signature matching and behavior blocking mechanism to detect files infected by malicious codes. These aforementioned techniques rely on having correct signatures and rules to detect infected files. Unfortunately signatures for detecting malicious codes may not be available for hours or even days after detection of new malicious codes. Unlike signature matching behavior blocking does not rely on malicious code signatures. However behavior blocking has relatively high false alarm rate and may adversely interfere with or even prevent operation of legitimate software.

Once a file is identified as infected access to and execution of the infected file is blocked by the antivirus. A clean pattern may be created to disinfect the file i.e. to remove the malicious codes or effects of malicious codes from the file . The clean pattern is typically created manually and may take some time to create. In the meantime while the clean pattern is being created by antivirus researchers the malicious codes that infected the file continue to propagate and infect other files. Worse the clean pattern may be buggy and inadvertently corrupt the infected file or other files cause a system crash or force the host computer to keep rebooting.

In one embodiment file modifications performed by malicious codes are detected by detecting a file modification for an original file before the file modification is performed on the original file. In response to detecting the file modification a corresponding shadow file is created. The shadow file represents the original file as modified by the file modification. Before allowing the file modification to be performed on the original file the original file is compared to the shadow file to determine if the file modification is being performed by malicious codes. The file modification may be deemed to be performed by malicious codes when the file modification involves for example entry point append entry point prepend entry point obfuscation cavity overwriting or mal tattoo.

These and other features of the present invention will be readily apparent to persons of ordinary skill in the art upon reading the entirety of this disclosure which includes the accompanying drawings and claims.

In the present disclosure numerous specific details are provided such as examples of apparatus components and methods to provide a thorough understanding of embodiments of the invention. Persons of ordinary skill in the art will recognize however that the invention can be practiced without one or more of the specific details. In other instances well known details are not shown or described to avoid obscuring aspects of the invention.

Being computer related it can be appreciated that some components disclosed herein may be implemented in hardware software or a combination of hardware and software e.g. firmware . Software components may be in the form of computer readable program code stored non transitory in a computer readable storage medium such as memory mass storage device or removable storage device. For example a computer readable storage medium may comprise computer readable program code for performing the function of a particular component. Likewise computer memory may be configured to include one or more components which may be executed by a processor. As can be appreciated software components are executed by a processor to perform computational and other data processing steps. Software components may be implemented in logic circuits for example. Components may be implemented separately in multiple modules or together in a single module.

Referring now to there is shown a schematic diagram of a computer in accordance with an embodiment of the present invention. The computer may have fewer or more components to meet the needs of a particular application. The computer may include a processor such as those from the Intel Corporation or Advanced Micro Devices for example. The computer may have one or more buses coupling its various components. The computer may include one or more user input devices e.g. keyboard mouse one or more data storage devices e.g. hard drive optical disk USB memory a display monitor e.g. LCD flat panel monitor CRT a computer network interface e.g. network adapter modem and a main memory e.g. RAM . The computer network interface may be coupled to a computer network which in this example includes the Internet.

In the example of the main memory includes software modules . The software modules may be loaded from the data storage device to the main memory for execution by the processor . The software modules comprise computer readable program code components of the computer such as a modification decision engine I O virtualization engine application program operating system and other components implemented in software.

An I O virtualization engine may comprise computer readable program code for intercepting operations to modify e.g. a File Write an original file to create a shadow file of the original file and to receive information from a modification decision engine on how to respond to the file modification. An I O virtualization engine may reside in main memory of a host computer and executed by a processor of the host computer. The shadow file is how the original file will be if the file modification is allowed to be performed on the original file. That is the shadow file represents the modified version of the original file but not yet committed to be performed on the original file. In one embodiment the I O virtualization engine does not create the shadow file until a file modification is attempted on the original file. This advantageously saves processing and storage resources.

The modification decision engine receives the original and shadow files compares them and sends information to the I O virtualization engine based on whether or not the file modification is malicious. The I O virtualization engine may commit the file modification to replace the original file with the shadow file or discard the shadow file and prevent the file modification from being committed depending on whether or not the modification decision engine deems the file modification to be performed by malicious codes.

The modification decision engine may comprise computer readable program code for determining whether or not a modification to a computer file is performed by malicious codes such as a computer virus. The modification decision engine may perform its determination by comparing an entirety of the original file with an entirety of the corresponding shadow file. The modification decision engine performs its determination before the file modification is performed on the original file.

The modification decision engine may reside in main memory of the host computer and executed by the processor of the host computer. The modification decision engine the I O virtualization engine and file system are shown as separate components for clarity of illustration but may also be integrated together or with other components. As another example the modification decision engine and I O virtualization engine may be implemented as part of a commercially sold antivirus product or a security feature of an operating system.

In one embodiment the modification decision engine is configured to receive an original file and a shadow file and compare the original file to the shadow file to determine if the original file is being modified by malicious codes. Unlike approaches that only compare certain portions of a file e.g. only first instruction at program entry point comparing entire files advantageously allows for a more comprehensive evaluation of the file modification allowing detection of malicious file modifications that otherwise would go undetected.

When the modification decision engine deems the file modification to be malicious i.e. performed by malicious codes the modification decision engine informs the I O virtualization engine to prevent the file modification from being performed on the original file. Otherwise when the modification decision engine does not deem the file modification to be malicious the modification decision engine so informs the I O virtualization engine to allow the file modification to proceed.

In an example operation the host computer runs under the Microsoft WINDOWS operating system and an original file is an executable file that conforms to the Microsoft WINDOWS operating system portable executable file format. A program running in the host computer attempts to modify the original file arrow . The I O virtualization engine detects the file modification arrow and in response after detecting the file modification creates a corresponding shadow file arrow . The shadow file represents how the original file will look like after the file modification is performed. The file modification is received by the I O virtualization engine before the file modification is performed on the original file i.e. before the original file is actually modified as stored. The I O virtualization engine may detect the file modification by interception from the operating system inter process communication with drivers or other software or other means.

The I O virtualization engine may inform the modification decision engine of the file modification before the file modification is performed on the original file . In response to being informed of the file modification the modification decision engine compares the original file to the shadow file arrows and to determine whether or not the file modification is performed by malicious codes. In the case where the program is a legitimate i.e. not malicious program the modification decision engine informs the I O virtualization engine arrow to allow the file modification to be committed to the file system arrow and modify the original file in the storage device arrow . Otherwise if the program comprises malicious codes such as a computer virus the modification decision engine informs the I O virtualization engine to prevent the file modification from being committed to the file system symbolized by a broken arrow . Unlike other techniques that detect malicious codes in and perform a cleaning of an infected file the modification decision engine prevents the infection from occurring in the first place.

To determine whether or not a file modification is being performed by malicious codes the modification decision engine may compare the original file View with the shadow file View as follows.

Malicious codes may modify an executable file by changing its program entry point. An entry point is a location where the operating system starts running instructions of the executable file. Malicious codes may modify the entry point address in order to add malicious entry point instructions. In the example of instructions from the program entry point EP of the original file see View exist in the shadow file see View . This is symbolized by the presence of EP in both View and View of . However the shadow file defines a new program entry point NEW EP which is in a later file location relative to the original entry point. In other words the modification appends a new entry point after the original entry point. The shadow file still includes the instructions from the program entry point in the original file but these instructions are no longer the start point from where the operating system runs the shadow file. This is because the shadow file defines a new entry point for program execution. The modification decision engine deems the just explained file modification to be performed by malicious codes.

Another way for malicious codes to change the program entry point is by prepending a new entry point before the original entry point. In the example of instructions from the entry point of the original file see View exist in the shadow file see View . This is symbolized by the presence of EP in both View and View of . However the shadow file defines a new entry point which is in an earlier file location relative to the original entry point. This is symbolized by the NEW EP appearing in an earlier file location relative to EP in View of . In other words the modification prepends a new entry point before the original entry point. The shadow file still includes the instructions from the program entry point in the original file but these instructions are no longer the start point from where the operating system runs the shadow file. This is because the shadow file defines a new entry point for program execution. The modification decision engine deems the just explained file modification to be performed by malicious codes.

Malicious codes may also modify an executable file to obfuscate the program entry point. Entry point obfuscation may involve modifying the file to include new jump call or sequence of push return instructions around the entry point. The new instructions may be before after or both before and after the entry point. In the example of the instructions from the entry point in the original file see View are followed by an arithmetic e.g. add x y instruction. The shadow file however still includes the instructions from the original entry point but are now followed by a new instruction that moves program execution to another location e.g. jump addr instruction corresponding to the entry point of malicious codes Malicious EP see View .

To detect entry point obfuscation the modification decision engine may scan the entire section of the shadow file that has the entry point and look for any new instruction that moves program execution to another location e.g. jump call or sequence of push return instructions . The modification decision engine may determine the destination address of the new instructions to see if the destination address also exists in the original file. If the destination address of the new instruction is not in the original file the modification decision engine may deem the file modification to be malicious. Otherwise if the destination address of the new instruction is in the original file the modification decision engine then compares the contents of the destination address in both the original and shadow files and deems the modification to be malicious when the destination address has different contents in the shadow file compared to the original file.

Malicious codes may also modify an executable file to include a cavity. A cavity comprises file blocks that extend from an original section in the original file and increases that section s virtual size in the shadow file. A file that conforms to the Microsoft WINDOWS operating system portable executable format has a physical size corresponding to the file s size as stored in physical data storage e.g. disk and a virtual size corresponding to the file s size as loaded in virtual memory of the operating system. In a malicious file modification involving a cavity the virtual size of a file s section is extended and increased in the shadow file. In the example of the original file includes a section with a particular virtual size and a particular physical size see View . In the shadow file however the section s virtual size is larger compared to that section s virtual size in the original file see View . The cavity comprises the extra file blocks in the shadow file that extend the section in virtual memory and increases the section s virtual size. While this is usually the case it is to be noted that if a file section s virtual size is large enough malicious codes may not need to increase the section s virtual size. The modification decision engine deems file modifications that create a cavity to be performed by malicious codes.

Malicious codes may modify an executable file to overwrite portions of the file. Malicious codes may modify file blocks to have particular modification patterns in comparison to the original file or have co existing old properties tables and new properties tables that serve the same purpose in the shadow file. In the example instructions from entry point of the original file see View have been overwritten with new data in the shadow file see View . The file blocks that have been overwritten in the shadow file may include particular modification patterns indicative of modifications performed by malicious codes. The overwritten file blocks may also include new properties or tables that serve the same purpose as properties or tables that exist in both the original and shadow files. The modification decision engine deems the just explained modification to be performed by malicious codes.

Malicious codes may also modify an executable file by modifying file blocks to include inconsistent data tables that were not present in the original file. This malicious file modification is referred to as Mal Tattoo. Examples of inconsistent data tables include inconsistent Microsoft WINDOWS operating system Portable Executable PE 4 byte signature import table and so on. In the example of the PE 4 byte signature SIG in the original file see View has been changed to a different PE 4 byte signature DIFF SIG in the shadow file see View . The PE 4 byte signature may be the checksum of the original file. The change in the PE 4 byte signature is inconsistent in this example because the original file has a non zero checksum whereas the shadow file has a zero checksum.

The modification decision engine may also check the import table of the shadow file and original file for consistency. In one embodiment the modification decision engine checks the import table of the shadow file to determine the application programming interface API or other function that the shadow file is importing. If the import table of the shadow file indicates that it is not importing any API that is the same as an API imported in the original file the modification decision engine may deem the modification to be malicious because it is rare for a legitimate program to modify an original file with completely new imported APIs. In contrast malicious codes typically overwrite the entire import table of the original file with completely new APIs. Otherwise if the import table of the shadow file indicates that it is importing at least one API that is also imported in the original file the modification decision engine may deem the modification to be legitimate i.e. not malicious .

By comparing the original file to the shadow file the modification decision engine may look for the above described modifications i.e. entry point append entry point prepend entry point obfuscation cavity overwrite and mal tattoo to detect malicious file modification.

Techniques for detecting file modifications performed by malicious codes have been disclosed. While specific embodiments of the present invention have been provided it is to be understood that these embodiments are for illustration purposes and not limiting. Many additional embodiments will be apparent to persons of ordinary skill in the art reading this disclosure.

