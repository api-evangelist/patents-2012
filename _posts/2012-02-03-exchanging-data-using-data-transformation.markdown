---

title: Exchanging data using data transformation
abstract: A computer implemented method, apparatus, and computer-usable program product for exchanging data using data transformation are provided. A first data binding component receives data from a function selector. A set of data bindings capable of invocation by the first data binding component is available. The function selector determines a content type associated with the data. The first data binding component receives the data and the content type from the function selector. The first data binding component invokes a data binding corresponding to the content type from the set of data bindings to transform the data into a data object. The data object has an object name. A target application is determined based on the object name, and the data object is then routed to a target application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08776098&OS=08776098&RS=08776098
owner: International Business Machines Corporation
number: 08776098
owner_city: Armonk
owner_country: US
publication_date: 20120203
---
This application is a continuation application of U.S. application Ser. No. 11 758 240 filed Jun. 5 2007 status allowed.

The present invention relates generally to an improved data processing system and in particular to a computer implemented method and apparatus for data transforming data. Still more particularly the present invention relates to a computer implemented method apparatus and computer usable program code for exchanging data using data transformations.

Software applications are used for a variety of purposes. Software applications used for managing and manipulating data related to a business enterprise are called enterprise information systems EIS .

Enterprise information systems exchange data with other software applications other enterprise information systems interact with personnel and connect with other enterprise information systems. In performing these functions enterprise information systems use a variety of methods for connecting to other software applications and devices. One example of these methods involves calling a function of one software application from within another software application. This method is called remote procedure call RPC .

Another example of the methods used for connecting one software application to another is by using an application programming interface API . Yet another method for connecting software applications with one another to exchange data is by exchanging structured documents. Structured documents are electronic documents containing data organized in a pre defined structure. Extensible markup language XML is an example of a structured document format.

Enterprise information systems can be connected to other enterprise information systems software applications and devices. This interconnectivity is useful for exchanging data amongst the various connected software systems. In enabling interconnectivity in this manner some processing of the data is performed during the exchange of the data.

The processing performed during the data exchange is typically encapsulated in a specialized piece of program code called an adapter. An adapter is a software application that can process the data according to the encapsulated program code.

An adapter can utilize any one of several methods of communication available for connecting with the enterprise information system. For example an adapter may use remote procedure call to interact with an enterprise information system. Another adapter may use an application programming interface for interacting with the enterprise information system. Yet another adapter may be programmed to interact with an enterprise information system by exchanging a structured document.

The illustrative embodiments provide a computer implemented method apparatus and computer usable program product for exchanging data using data transformation. A function selector is available. A first data binding component capable of receiving data from the function selector is available. A set of data bindings capable of invocation by the first data binding component is available. The function selector determines a content type associated with the data. The first data binding component receives the data and the content type from the function selector. The first data binding component invokes a data binding corresponding to the content type from the set of data bindings to transform the data into a data object. The data object has an object name.

A target application is determined based on the object name. The data object is then routed to a target application.

The function selector can determine the content type associated with the data by transforming the data into a generic data object and discovering the content type from the generic data object. For transforming the data into a generic data object the functions selector invokes the generic data binding component and the generic data binding component transforms the data into a generic data object.

Alternatively if a content type is not associated with the data the function selector can transform the data into a generic data object and the first data binding component can set the object name to be a generic object name. When the first data binding component receives a generic data object from the function selector the first data binding component omits invoking a data binding from the set of data bindings.

With reference now to the figures and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which different embodiments may be implemented. Many modifications to the depicted environments may be made.

In the depicted example server and server connect to network along with storage unit . In addition clients and connect to network . Clients and may be for example personal computers or network computers. In the depicted example server provides data such as boot files operating system images and applications to clients and . Clients and are clients to server in this example. Network data processing system may include additional servers clients and other devices not shown.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet a local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments.

In the depicted example data processing system employs a hub architecture including a north bridge and memory controller hub NB MCH and a south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are coupled to north bridge and memory controller hub NB MCH . Processing unit may contain one or more processors and even may be implemented using one or more heterogeneous processor systems. Graphics processor may be coupled to the NB MCH through an accelerated graphics port AGP for example.

In the depicted example local area network LAN adapter is coupled to south bridge and I O controller hub SB ICH and audio adapter keyboard and mouse adapter modem read only memory ROM universal serial bus USB and other ports and PCI PCIe devices are coupled to south bridge and I O controller hub through bus and hard disk drive HDD and CD ROM are coupled to south bridge and I O controller hub through bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash binary input output system BIOS . Hard disk drive and CD ROM may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. A super I O SIO device may be coupled to south bridge and I O controller hub .

An operating system runs on processing unit and coordinates and provides control of various components within data processing system in . The operating system may be a commercially available operating system such as Microsoft Windows XP Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system . Java and all Java based trademarks are trademarks of Sun Microsystems Inc. in the United States other countries or both .

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as hard disk drive and may be loaded into main memory for execution by processing unit . The processes of the illustrative embodiments may be performed by processing unit using computer implemented instructions which may be located in a memory such as for example main memory read only memory or in one or more peripheral devices.

The hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system.

In some illustrative examples data processing system may be a personal digital assistant PDA which is generally configured with flash memory to provide non volatile memory for storing operating system files and or user generated data. A bus system may be comprised of one or more buses such as a system bus an I O bus and a PCI bus. Of course the bus system may be implemented using any type of communications fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. A memory may be for example main memory or a cache such as found in north bridge and memory controller hub . A processing unit may include one or more processors or CPUs. The depicted examples in and above described examples are not meant to imply architectural limitations. For example data processing system also may be a tablet computer laptop computer or telephone device in addition to taking the form of a PDA.

Illustrative embodiments recognize that data stored in an enterprise information system may be organized differently from the requirements of a target application. A target application is a software application other enterprise information system or a device that connects with an enterprise information system for exchanging data. Connecting an enterprise information system with a target application is called integration.

For example an enterprise information system may store data in the form of data objects defined for that enterprise information system whereas a target application may want the data in a structured document form. A data object is a data structure of a certain specification with or without associated functions included within the data structure.

As another example an enterprise information system may store data in the form of data objects defined for that enterprise information system whereas a target application may want the data in the form of another data object defined specifically for that target application. Similarly a target application may supply data in one form whereas the enterprise information system may want the data in another form. As illustrated by these examples the data that is being exchanged amongst two systems may be organized differently at the source and the destination of the data. Thus the data has to be transformed during the exchange.

The program code encapsulated in an adapter performs the transformation of data that flows through the adapter. Presently specific adapters are constructed for specific data exchanges. Such adapters provide the necessary logic for transforming a specific form of data to a specific other form of that data.

Data in an enterprise information system target application integration can pertain to any matter relevant to the integration. For example specific forms of data can reflect a business transaction being transacted via the integration such as a purchase order. Consequently a data object may be created to include the data of the purchase order in an enterprise information system. A corresponding XML document may also be created to include the data of the purchase order in a target application. As can be seen to communicate a purchase order from an enterprise information system to a target application or vice versa the purchase order data has to be transformed from one form to another.

In the manner illustrated in the above example other data objects can also be created. Typically data objects are identified by unique names that uniquely identify the data object. Such a name is called an object name. An object name may include the name of the transaction the name of the system to which the data object pertains other identifiers and combinations thereof. Similarly a structured document can also have an object name.

An identifier known as content type is also used to identify data data objects and structured data. Content type is a classification or type of the contents of a data structure. For example a content type of an XML structured document can be text xml . Using this content type a system can determine that the data is in text form and has an XML structure. However the system may or may not be able to determine from a given content type the exact structure of the data associated with the content type.

The illustrative embodiments recognize that creating adapters for each integration is time consuming effort intensive and error prone. The illustrative embodiments further recognize that such adapters are also rather rigid in nature requiring programmatic changes if the form of a source or destination data should change.

Furthermore the illustrative embodiments recognize that new code may have to be written for new forms of data such as new or changed data objects object names and content type on either side of the integration.

Therefore a method and apparatus for exchanging data using data transformation that solves these problems is useful. Illustrative embodiments described below provide a method and apparatus for determining a data transformation that should be performed on the data from a given source to reach a given destination. The illustrative embodiments further provide that the data transformation may be performed in several stages depending on the nature of the data from the source. The illustrative embodiments provide a way in which new data transformation can be introduced for transforming new forms of data new sources of data new destinations of transformed data and combinations thereof. In accordance with the illustrative embodiments the new data transformations can continue to utilize the data transformation infrastructure provided in the illustrative embodiments.

With reference now to a block diagram of an enterprise information system integration is depicted in accordance with an illustrative embodiment. Operating systems and can each be an operating system running on a server such as server in or on a client such as client in .

Enterprise information system and software application are depicted as running under operating system . Enterprise information system is depicted as running under operating system . Another software application is depicted as running under operating system . The arrangement and illustration of enterprise information system and software applications and are only intended as one example and are not intended to be limiting on the manner in which other embodiments can be implemented. Enterprise information system and software applications and are labeled as enterprise information system and software application respectively only as exemplary. An enterprise information system a software application or a device can be used in place of enterprise information system or software applications and as a target application integrated with enterprise information system without departing from the scope and spirit of the illustrative embodiments.

Enterprise information system includes database to manage the enterprise information system data. In these examples database may be for example a relational database an object oriented database a flat file an index file or any other type of data storage suitable for managing enterprise information system data.

Enterprise information system further includes application programming interface remote procedure call and document exchange interface each of which may be used for communicating with the enterprise information system. For example software application may be an adapter that uses application programming interface to communicate with enterprise information system .

Network facilitates connectivity amongst the various enterprise information system and target applications. Note that enterprise information system enterprise information system and software application are depicted as running on separate data processing systems under separate operating systems only as exemplary. This arrangement depicted in however is not intended to be limiting on the illustrative embodiment. One or more enterprise information system and software applications integrated with each other and running on a single data processing system are contemplated within the scope of the illustrative embodiments. Conversely enterprise information system and the depicted target applications can each run on distributed data processing system with multiple instances of operating systems servicing each enterprise information system and target application.

With reference now to a block diagram of an enterprise information system is depicted in accordance with an illustrative embodiment. Enterprise information system can be implemented using enterprise information system depicted in .

Enterprise information system includes database which may be implemented using database in . Database may be a relational database an object oriented database a flat file an index file or any other type of data storage suitable for managing enterprise information system data.

Enterprise information system further includes adapter as described above. Adapter is one of the several adapters possible in a typical enterprise information system. Adapter includes transformation code for data transformation and communication code for communicating with enterprise information system .

Adapter similarly includes transformation code for data transformation and communication code for communicating with enterprise information system . Adapter includes transformation code for data transformation and communication code for communicating with enterprise information system .

Enterprise information system exchanges data with other systems. Each transformation code and may be designed for transforming to and from different data objects that form data . Alternatively each transformation code and may be designed for transforming to and from the same data object but using different methods of communicating using different communication codes and . Other combinations of transformation codes and communication codes are contemplated within the scope of the illustrative embodiments.

With reference now to a block diagram of a data transformation system is depicted in accordance with an illustrative embodiment. Data transformation system can run under an operating system such as operating system in . In this depicted example data transformation system includes enterprise information system which can be implemented using enterprise information system in . Data transformation application can be implemented as software application in . Target application can be an enterprise information system such as enterprise information system or a software application such as software application in .

The process of data binding is the process of transforming data in a prescribed manner. A data binding component is a component manifested in hardware software or a combination thereof which performs the process of data binding. A data binding component is also simply referred to as a data binding. A data binding may use other data bindings for data binding smaller portions of data or the entire data. A set of such other data bindings can exist. A set of data bindings is one or more data bindings.

Data transformation application includes data binding determination which is a component for determining the name of a data binding present inside the data transformation application. Data transformation is a data transformation component responsible for transforming the data exchanged between enterprise information system and target application .

The depiction in is an exemplary depiction of the data transformation system and is not intended to be limiting on the illustrative embodiment. For example enterprise information system can be any system that exchanges data with another system. Furthermore more than one system can be connected to either ends of data transformation application . Furthermore enterprise information system and data transformation application may operate under different operating systems on different data processing systems. Other implementation configurations pertaining to the distribution of the various components shown is contemplated within the scope of the illustrative embodiment.

With reference now to a block diagram of a data structure is depicted in accordance with an illustrative embodiment. Data structure is an example of data that may be transformed using adapter s transformation code in .

Data structure includes payload which is the actual data that is the subject of the communication that uses data structure . Payload can be for example the actual purchase order information including product price buyer seller shipping and other relevant information.

Data structure further includes content type as described above. Content type indicates to a system the classification or type of data contained in payload . A typical data structure may contain other pieces of information for a variety of purposes such as for facilitating communication and for maintaining integrity of data. Other data represents these other pieces of information.

With reference now to a block diagram of a second data structure is depicted in accordance with an illustrative embodiment. Data structure is another example of data that may be transformed using adapter s transformation code in .

Data structure includes payload which is the actual data that is the subject of the communication using data structure . Payload can be for example the actual purchase order information including product price buyer seller shipping and other relevant information.

Data structure further includes other pieces of information for a variety of purposes such as for facilitating communication and for maintaining integrity of data. Other data represents these other pieces of information.

Note that certain organizations of data such as data structure may not indicate a content type. Typically such organizations of data are data objects already organized in some data structure. The data structure contains the information that can indicate to a system the nature of the data in payload . That is payload itself includes such indicative information.

With reference now to a table format correlating content type to data binding is depicted in accordance with an illustrative embodiment. A table according to table format is an exemplary implementation of the component for determining the data binding to use with the corresponding content type namely data binding determination in . Data transformation application in can use the table for transforming a data identified by a content type to a data object with an object name using the corresponding data binding.

Table format includes column which holds content type data in the rows under that column. Column holds data binding data in the rows under that column. A row of a table according to table format such as row has an entry under each of the two columns and . Given a content type the data binding in the same row identifies the data binding to use with the data of that content type to transform the data into a data object. Similarly given a data binding a corresponding content type can be determined using table format .

Note that a table according to table format is only an exemplary implementation for determining the data binding. Any other method of correlating content types with data binding is usable in the illustrative embodiments without departing from the scope and spirit of the illustrative embodiments. Two alternative implementations are described below that determine an object name without the use of the table described with respect to .

In certain implementations of the illustrative embodiment a content type of a data may not be known. In such cases the indication about a specific data transformation using a specific data binding may be specified in the data. For example data structure in may include information about a content type in payload . An additional transformation can be applied to the data in such situations as follows payload may be transformed into a data object that may then reveal the content type. In this manner when a content type is not provided the content type may be discovered from the data.

Alternatively in certain implementations of the illustrative embodiment the content type may not be specified in the data or be discoverable from the additional transformation as described above. In such implementations the additional transformation can be applied to the data and the data can be simply transformed or reorganized into a data object of default object type and a default object name.

With reference now to a block diagram for a data transformation system is shown in accordance with an illustrative embodiment. Data transformation system is a more detailed illustration of data transformation system in .

Data transformation system runs under operating system on a data processing system such as server or client in .

Data transformation system includes enterprise information system which can be implemented using enterprise information system in . Note that data transformation system is depicted in relation to enterprise information system only as exemplary. A software application such as software application in may be used with data transformation system in a similar manner.

Data transformation system further includes application which can be implemented using data transformation application in . Data transformation system receives data from enterprise information system . Data can be in the form of data structure in or data structure in . Data can also be in the form of a data object as described above.

Data transformation system is described below in terms of transforming data flowing from an enterprise information system to a target application. However the illustrative embodiment is similarly applicable to data flowing from a target application to an enterprise information system.

Application includes function selector and data binding component . Data binding component performs a generic service data object SDO data binding. A service data object is a data object in the manner described above that additionally conforms to a service component architecture SCA specification. Service component architecture is a software design architecture for making and using software components in a certain way.

Application may include several other data binding components for performing data binding for specific forms of data. further depicts data binding components and labeled first service data object data binding and second service data object data binding respectively. Data binding components and perform data bindings for creating specific first and second service data objects. The first and second service data objects can correspond to any data object in a given implementation.

In operation function selector receives data from enterprise information system . Function selector attempts to determine a content type of the received data. Note that if data is implemented as data structure in content type in will contain the content type information. In some cases function selector may utilize a transformation to transform the data into a default object and discover the content type from the default object.

Function selector passes the data and the content type to data binding component . Data binding component uses the content type to identify a data binding for converting the data to a data object. For example data binding component may use a table such as table format in for this purpose. Depending on the identified data binding data binding component may pass the data to another data binding component for example to data binding component .

The selection of a specific data binding component such as data binding component by data binding depends on the content type that is passed by function selector to data binding component . In this exemplary operation suppose that the content type passed by function selector corresponds to a data binding provided by data binding component . Once a suitable data binding component in this example data binding component is selected the data binding component transforms the data according to the data binding process provided in that data binding component.

Continuing with the above example data binding component generates a service data object that corresponds with the content type passed by function selector and the data binding identified by data binding component . Service data object is a service data object produced by data binding component in accordance with the exemplary operation described above. Data binding component and several other data binding components can be similarly used in a specific implementation of the illustrative embodiments. depicts service data object being produced as a result of data binding provided by data binding component . Each service data object produced in this manner has an object name associated with the service data object.

Returning to function selector function selector may receive data that does not include a content type. For example the received data may be organized in the manner of data structure in . If function selector does not find a content type or object name associated with the received data function selector invokes generic service data object data binding component with the data. Generic service data object data binding component transforms the data into generic service data object . Generic service data object also has an object name which is a generic service data object name.

Function selector then queries generic service data object for a content type. Function selector thus discovers the content type from generic service data object . Function selector next passes generic service data object and the discovered content type to data binding component . Data binding component recognizes that the received data is already in a service data object form and does not perform further data binding on generic service data object .

Note that in some cases function selector may not be able to discover a content type from generic service data object . In such cases function selector passes generic service data object to data binding component . In these cases as well data binding component recognizes that the received data is already in a service data object form and does not perform further data binding on generic service data object .

Thus data transformation system arrives at a point in the operation where a service data object having an object name is available to data binding component . Data binding component then routes the available service data object such as service data object or to their appropriate target applications such as target application . The routing to a target application may be determined by using the service data object s name or other target application identification method.

Note that the components of the data transformation system depicted in are depicted and described only as exemplary in order to explain the illustrative embodiment. These components may be combined separated redefined re labeled expanded or contracted to fit a particular implementation of the illustrative embodiment without departing from the scope and spirit of the illustrative embodiment.

With reference now to a flowchart of a function selector process is depicted in accordance with an illustrative embodiment. The process of this figure can be implemented in function selector in .

The process begins by receiving data step . The process then determines if a content type is identified in the received data step . Note that instead of or in addition to the content type an object name may be identified in the received data.

If a content type is identified in the received data yes path of step the received data and the content type are sent for data binding step . The process ends thereafter.

Going back to step if the process determines that a content type is not identified in the received data no path of step the process converts the received data into a generic service data object step . Having converted the received data into a generic service data object the process uses the generic service data object s default name as the object name. In a specific implementation the process may query the generic service data object for a content type if the implementation provides for specific content types in the generic service data object. The process then sends the generic service data object and the content type if any for data binding step . The process ends thereafter.

With reference now to a flowchart of a data binding process is depicted in accordance with an illustrative embodiment. The process of this figure can be implemented in data binding component in .

The process begins by receiving data and content type step . The process then determines if the received data is a service data object step . If the received data is not a service data object no path of step the process invokes a specific data binding according to the received content type step .

The process thus generates a service data object using a data binding corresponding to the received content type step . The service data object generated in this manner has an object name. Next the process routes the service data object to the appropriate target application according to the received object name step . The process ends thereafter.

Going back to step if the received data is a service data object yes path of step the process routes the service data object to the appropriate target application according to the received object name step . The process ends thereafter.

The flowcharts and block diagrams in the different depicted embodiments illustrate the architecture functionality and operation of some possible implementations of apparatus methods and computer program products. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified function or functions. In some alternative implementations the function or functions noted in the block may occur out of the order noted in the figures. For example in some cases two blocks shown in succession may be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved.

Thus the illustrative embodiments provide a method apparatus and computer program code for exchanging data using data transformation. The illustrative embodiments remove the drawbacks of traditional enterprise information system adapters identified above. A data binding infrastructure is provided within which several levels of data binding can be implemented for facilitating data exchange between two or more systems. Data received from a source system is transformed using one or more of the data bindings and routed to a target system according to the name of the transformed data object. New data bindings can be used for delegating the transformation of new forms of data without affecting the remainder of the data binding infrastructure.

Additionally presently available adapter based solutions are proprietary and difficult to change with evolving technologies. The illustrative embodiments describe an infrastructure that can be built using standards such as Java Connector Architecture JCA Service Data Object SDO and Enterprise Metadata Delivery EMD .

In a specific implementation the IBM WebSphere Application Server manufactured by International Business Machines was used for implementing the illustrative embodiments. The illustrative embodiments were implemented using the Enterprise Metadata Discovery EMD open standard framework from BEA and IBM. The service implementation was based on Service Component Architecture SCA for defining the enterprise information system data imports and exports. IBM and WebSphere are registered trademarks of International Business Machines Corporation in the United States other countries or both .

The invention can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the invention is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any tangible apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD.

Further a computer storage medium may contain or store a computer readable program code such that when the computer readable program code is executed on a computer the execution of this computer readable program code causes the computer to transmit another computer readable program code over a communications link. This communications link may use a medium that is for example without limitation physical or wireless.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

