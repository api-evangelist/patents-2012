---

title: Adjusting a speech engine for a mobile computing device based on background noise
abstract: Methods, apparatus, and products are disclosed for adjusting a speech engine for a mobile computing device based on background noise, the mobile computing device operatively coupled to a microphone, that include: sampling, through the microphone, background noise for a plurality of operating environments in which the mobile computing device operates; generating, for each operating environment, a noise model in dependence upon the sampled background noise for that operating environment; and configuring the speech engine for the mobile computing device with the noise model for the operating environment in which the mobile computing device currently operates.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09076454&OS=09076454&RS=09076454
owner: Nuance Communications, Inc.
number: 09076454
owner_city: Burlington
owner_country: US
publication_date: 20120125
---
This application claims the benefit under 35 U.S.C. 120 and is a continuation of U.S. application Ser. No. 12 109 151 entitled ADJUSTING A SPEECH ENGINE FOR A MOBILE COMPUTING DEVICE BASED ON BACKGROUND NOISE filed on Apr. 24 2008 which is herein incorporated by reference in its entirety.

The field of the invention is data processing or more specifically methods apparatus and products for adjusting a speech engine for a mobile computing device based on background noise.

User interaction with applications running on small devices through a keyboard or stylus has become increasingly limited and cumbersome as those devices have become increasingly smaller. In particular small handheld devices like mobile phones and PDAs serve many functions and contain sufficient processing power to support user interaction through multimodal access that is by interaction in non voice modes as well as voice mode. Devices which support multimodal access combine multiple user input modes or channels in the same interaction allowing a user to interact with the applications on the device simultaneously through multiple input modes or channels. The methods of input include speech recognition keyboard touch screen stylus mouse handwriting and others. Multimodal input often makes using a small device easier.

Multimodal applications are often formed by sets of markup documents served up by web servers for display on multimodal browsers. A multimodal browser as the term is used in this specification generally means a web browser capable of receiving multimodal input and interacting with users with multimodal output where modes of the multimodal input and output include at least a speech mode. Multimodal browsers typically render web pages written in XHTML Voice X V . X V provides a markup language that enables users to interact with an multimodal application often running on a server through spoken dialog in addition to traditional means of input such as keyboard strokes and mouse pointer action. Visual markup tells a multimodal browser what the user interface is look like and how it is to behave when the user types points or clicks. Similarly voice markup tells a multimodal browser what to do when the user speaks to it. For visual markup the multimodal browser uses a graphics engine for voice markup the multimodal browser uses a speech engine. X V adds spoken interaction to standard web content by integrating XHTML eXtensible Hypertext Markup Language and speech recognition vocabularies supported by VoiceXML. For visual markup X V includes the XHTML standard. For voice markup X V includes a subset of VoiceXML. For synchronizing the VoiceXML elements with corresponding visual interface elements X V uses events. XHTML includes voice modules that support speech synthesis speech dialogs command and control and speech grammars. Voice handlers can be attached to XHTML elements and respond to specific events. Voice interaction features are integrated with XHTML and can consequently be used directly within XHTML content.

In addition to X V multimodal applications also may be implemented with Speech Application Tags SALT . SALT is a markup language developed by the Salt Forum. Both X V and SALT are markup languages for creating applications that use voice input speech recognition and voice output speech synthesis. Both SALT applications and X V applications use underlying speech recognition and synthesis technologies or speech engines to do the work of recognizing and generating human speech. As markup languages both X V and SALT provide markup based programming environments for using speech engines in an application s user interface. Both languages have language elements markup tags that specify what the speech recognition engine should listen for and what the synthesis engine should say. Whereas X V combines XHTML VoiceXML and the XML Events standard to create multimodal applications SALT does not provide a standard visual markup language or eventing model. Rather it is a low level set of tags for specifying voice interaction that can be embedded into other environments. In addition to X V and SALT multimodal applications may be implemented in Java with a Java speech framework in C for example and with other technologies and in other environments as well.

Current multimodal applications support a voice mode of user interaction using a speech engine. A speech engine provides recognition and generation or synthesis of human speech though use of an acoustic model that associates speech waveform data representing recorded pronunciations of speech with textual representations of those pronunciations also referred to as phonemes. Speech recognition typically works best when the speech engine uses an acoustic model for speech recognition in the same environment in which the acoustic model was generated because the background noise embedded in the acoustic model and the speech for recognition are the same. Utilizing an acoustic model for speech recognition in an environment different from the environment in which the acoustic model was generated generally degrades overall speech recognition reliability and accuracy. Because multimodal devices are often tasked with operating in a variety of environments each having a different background noise the speech recognition performance of current multimodal devices varies greatly depending on the location and the surroundings of the device.

Methods apparatus and products are disclosed for adjusting a speech engine for a mobile computing device based on background noise the mobile computing device operatively coupled to a microphone that include sampling through the microphone background noise for a plurality of operating environments in which the mobile computing device operates generating for each operating environment a noise model in dependence upon the sampled background noise for that operating environment and configuring the speech engine for the mobile computing device with the noise model for the operating environment in which the mobile computing device currently operates.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention are described with reference to the accompanying drawings beginning with . sets forth a network diagram illustrating an exemplary system for adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention. A mobile computing device is a computer capable of operating without being connected to traditional immobile support infrastructures such as for example power infrastructures networking infrastructures and so on while being transported from one location to another. Mobile computing devices are typically characterized by having their own built in batteries to supply power needed to operate the device s electronic components. Examples of mobile computing devices may include personal digital assistants smart phones laptops computers embedded in vehicles and so on.

The mobile computing device throughout this specification is implemented as multimodal device having installed upon it a multimodal application . Readers will note however that implementing a mobile computing device as a multimodal device is for explanation only and not for limitation. The multimodal device supports multiple modes of user interaction with the multimodal application including a voice mode and one or more non voice modes of user interaction with the multimodal application . The voice mode is represented here with audio output of voice prompts and responses from the multimodal devices and audio input of speech for recognition from a user . Non voice modes are represented by input output devices such as keyboards and display screens on the multimodal devices . The voice mode of user interaction with the multimodal application is supported by a voice interpreter through which the multimodal application is operatively coupled to a speech engine . The operative coupling may be implemented with an application programming interface API a voice service module or a VOIP connection as explained in more detail below.

In the exemplary system of the voice interpreter supports the voice mode of user interaction with the multimodal application by providing grammars speech for recognition and text prompts for speech synthesis to the speech engine and by returning to the multimodal application speech engine output in the form of recognized speech semantic interpretation results and digitized speech for voice prompts. The implementation of the voice interpreter typically depends on the technology implementing the multimodal application . The voice interpreter of may be implemented as a VoiceXML interpreter when the multimodal application implements X V. A VoiceXML interpreter is a software module of computer program instructions that accepts voice dialog instructions from a multimodal application typically in the form of a VoiceXML element. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA . When the multimodal application is implemented according to SALT the voice interpreter may be implemented as a SALT interpreter. When the multimodal application is implemented using Java the voice interpreter may be implemented using a VoiceXML interpreter that exposes a Java interface.

In the example of the mobile computing device has installed upon a noise monitor a software component that operates to adjust a speech engine for a mobile computing device based on background noise according to embodiments of the present invention. The noise monitor of operates generally for adjusting the speech engine for a mobile computing device based on background noise according to embodiments of the present invention by sampling through the microphone background noise for a plurality of operating environments in which the mobile computing device operates generating for each operating environment a noise model in dependence upon the sampled background noise for that operating environment and configuring the speech engine for the mobile computing device with the noise model for the operating environment in which the mobile computing device currently operates. In such a manner the noise monitor may periodically tune the speech engine enhance speech recognition performance based on the mobile computing device s current operating environment.

In some other embodiments the noise monitor may operate for adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention by detecting a change in the mobile computing device from a previous operating environment to a current operating environment determining whether a noise model exists for the current operating environment sampling background noise for the current operating environment if a noise model does not exist for the current operating environment generating a noise model for the current operating environment if a noise model does not exist for the current operating environment and configuring the speech engine for the mobile computing device with the generated noise model. If a noise model does exist for the current operating environment the noise monitor may operate to adjust a speech engine for a mobile computing device based on background noise according to embodiments of the present invention by selecting the noise model for the current operating environment and configuring the speech engine for the mobile computing device with the selected noise model.

As illustrated in the noise monitor may be installed locally on the mobile computing device or installed remotely with respect to the mobile computing device on some other computing device such as a voice server . When the noise monitor is installed remotely on some other computing device a noise monitor client may be installed on the mobile computing device to provide an interface with the hardware and software components of the mobile device . Such a noise monitor client may communicate with the noise monitor through a data communications connection established through the data communications network .

In the example of the noise monitor may detect a change in the mobile computing device from a previous operating environment to a current operating environment by receiving a notification message from a device location manager . The device location manager of is a software module that includes computer program instructions for monitoring the location of the mobile computing device . The location of the mobile computing device may be specified using the geographic coordinates such as for example 26 38 7.27 N 80 13 37.22 W using a network address or identifier from a proximate adhoc personal area network such as for example a Bluetooth network or in any other manner as will occur to those of skill in the art. The location of the mobile computing device however may also be specified as a semantic representation of the coordinates such as for example home work church or car. 

The device location manager of obtains location information from a position detection component not shown of the multimodal device that is operatively coupled to the device location manager . A position detection component is a component typically implemented using a combination of hardware and software that communicates with other devices to determine the mobile computing device s position information. For example the position detection component may be implemented as a global positioning system GPS receiver that calculates the geographic coordinates of the device based on the device s position relative to a group of GPS satellites . The use of GPS however is for explanation and not for limitation. In other embodiments of the present invention the position detection component may be implemented using a Long Range Navigation LORAN receiver that calculates the geographic coordinates of the device based on the device s position relative to a group of LORAN radio transmission towers or any other component for calculating the geographic coordinate of a multimodal device as will occur to those of skill in the art. In still other embodiments the position detection component may determine the geographic coordinates of the multimodal device using the signals from cell phone towers to triangulate the position of the multimodal device. In other examples the position detection component may be implemented as a Bluetooth adapter or IEEE 802.11 adapter that determines when the mobile computing device establishes a connections with a personal area network PAN such as for example a PAN in an automobile train airplane portion of a building or a Local Area Network LAN such as for example a home network building network office network and so on.

In the example of the device location manager is operatively coupled to a position detection component in the sense that the device location manager communicates with a position detection module a software driver that provides interaction with the position detection component through an exposed API. Such communication may occur locally on the multimodal device when the device location manager is installed on the multimodal device as illustrated in or may occur across a network when the device location manager is installed on a server which manages the locations of multiple multimodal devices .

As mentioned above the mobile computing devices of are implemented as multimodal devices. A multimodal device is an automated device that is automated computing machinery or a computer program running on an automated device that is capable of accepting from users more than one mode of input keyboard mouse stylus and so on including speech input and also rendering more than one mode of output graphic speech and so on. A multimodal device is generally capable of accepting speech input from a user digitizing the speech and providing digitized speech to a speech engine for recognition. A multimodal device may be implemented for example as a voice enabled browser on a laptop a voice browser on a telephone handset an online game implemented with Java on a personal computer and with other combinations of hardware and software as may occur to those of skill in the art. Because multimodal applications may be implemented in markup languages X V SALT object oriented languages Java C procedural languages the C programming language and in other kinds of computer languages as may occur to those of skill in the art this specification uses the term multimodal application to refer to any software application server oriented or client oriented thin client or thick client that administers more than one mode of input and more than one mode of output typically including visual and speech modes.

Each of the example multimodal devices in the system of includes a microphone an audio amplifier a digital to analog converter and a multimodal application capable of accepting from a user speech for recognition digitizing the speech and providing the digitized speech to a speech engine for recognition. The speech may be digitized according to industry standard codecs including but not limited to those used for Distributed Speech Recognition as such. Methods for COding DECoding speech are referred to as codecs. The European Telecommunications Standards Institute ETSI provides several codecs for encoding speech for use in DSR including for example the ETSI ES 201 108 DSR Front end Codec the ETSI ES 202 050 Advanced DSR Front end Codec the ETSI ES 202 211 Extended DSR Front end Codec and the ETSI ES 202 212 Extended Advanced DSR Front end Codec. In standards such as RFC3557 entitled

Standards Institute ETSI European Standard ES 202 050 ES 202 211 and ES 202 212 Distributed Speech Recognition Encoding 

the IETF provides standard RTP payload formats for various codecs. It is useful to note therefore that there is no limitation in the present invention regarding codecs payload formats or packet structures. Speech for adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention may be encoded with any codec including for example 

As mentioned a multimodal device according to embodiments of the present invention is capable of providing speech for recognition to a speech engine adjusted for the mobile computing device based on background noise according to embodiments of the present invention. A speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating or synthesizing human speech. The speech engine implements speech recognition by use of a further module referred to in this specification as a ASR engine and the speech engine carries out speech synthesis by use of a further module referred to in this specification as a text to speech TTS engine. As shown in a speech engine may be installed locally in the mobile computing device itself or a speech engine may be installed remotely with respect to the mobile computing device across a data communications network in a voice server . A mobile computing device that itself contains its own speech engine is said to implement a thick client or thick client because the thick client itself contains all the functionality needed to carry out speech recognition and speech synthesis through API calls to speech recognition and speech synthesis modules in the mobile computing device itself with no need to send requests for speech recognition across a network and no need to receive synthesized speech across a network from a remote voice server. A mobile computing device that does not contain its own speech engine is said to implement a thin client because the thin client itself contains only a relatively thin layer of application software that obtains speech recognition and speech synthesis services from a voice server located remotely across a network from the thin client. For ease of explanation only one of the mobile computing devices in the system of is shown with a speech engine but readers will recognize that any multimodal device may have a speech engine according to embodiments of the present invention.

As shown in a speech engine and a voice interpreter may be installed locally in the multimodal device itself or a speech engine and a voice interpreter may be installed remotely with respect to the multimodal device across a data communications network in a voice server . In a thick client architecture a multimodal device includes both its own speech engine and its own voice interpreter . The voice interpreter exposes an API to the multimodal application for use in providing speech recognition and speech synthesis for the multimodal application. The multimodal application provides for example dialog instructions VoiceXML elements grammars input elements event handlers and so on through the API to the voice interpreter and the voice interpreter administers the speech engine on behalf of the multimodal application. In the thick client architecture a multimodal application including for example VoiceXML dialogs is interpreted by a voice interpreter on the multimodal device. In the thin client architecture a multimodal application including for example VoiceXML dialogs is interpreted by a voice interpreter on a voice server located remotely across a data communications network from the multimodal device running the multimodal application .

In a thin client architecture the speech engine and the voice interpreter are located remotely from the multimodal client device in a voice server the API for the voice interpreter is still implemented in the multimodal device with the API modified to communicate voice dialog instructions speech for recognition and text and voice prompts to and from the voice interpreter on the voice server. For ease of explanation only one of the multimodal devices in the system of is shown with a voice interpreter but readers will recognize that any multimodal device may have a voice interpreter according to embodiments of the present invention.

The use of these three example multimodal devices is for explanation only not for limitation of the invention. Any automated computing machinery capable of accepting speech from a user providing the speech digitized to a speech engine through a voice interpreter and receiving and playing speech prompts and responses from the voice interpreter may be improved to function as a multimodal device for adjusting a speech engine based on background noise according to embodiments of the present invention.

The system of also includes a voice server which is connected to data communications network through wireline connection . The voice server is a computer that runs a speech engine adjusted based on background noise according to embodiments of the present invention. The voice server provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning text representing recognized speech. Voice server also provides speech synthesis text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java voice applications.

The system of includes a data communications network that connects the multimodal devices and the voice server for data communications. A data communications network for adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention is a data communications network composed of a plurality of computers that function as data communications routers connected for data communications with packet switching protocols. Such a data communications network may be implemented with optical connections wireline connections or with wireless connections. Such a data communications network may include intranets internets local area data communications networks LANs and wide area data communications networks WANs . Such a data communications network may implement for example 

The system of includes a web server connected for data communications through wireline connection to network and therefore to the multimodal devices . The web server may be any server that provides to client devices markup documents that compose multimodal applications. The web server typically provides such markup documents via a data communications protocol HTTP HDTP WAP or the like. That is although the term web is used to described the web server generally in this specification there is no limitation of data communications between multimodal devices and the web server to HTTP alone. The markup documents also may be implemented in any markup language that supports non speech display elements data entry elements and speech elements for identifying which speech to recognize and which words to speak grammars form elements and the like including for example X V and SALT. A multimodal application in a multimodal device then upon receiving from the web sever a markup document as part of a multimodal application may execute speech elements by use of a voice interpreter and speech engine in the multimodal device itself or by use of a voice interpreter and speech engine located remotely from the multimodal device in a voice server .

The arrangement of the multimodal devices the web server the voice server and the data communications network making up the exemplary system illustrated in are for explanation not for limitation. Data processing systems useful for adjusting a speech engine for a mobile computing device based on background noise according to various embodiments of the present invention may include additional servers routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Data communications networks in such data processing systems may support many data communications protocols in addition to those noted above. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention in a thin client architecture may be implemented with one or more voice servers computers that is automated computing machinery that provide speech recognition and speech synthesis. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a voice server in adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention. The voice server of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the voice server.

Stored in RAM is a voice server application a module of computer program instructions capable of operating a voice server in a system that is configured to carry out adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention. Voice server application provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and text as string representations of scripts for semantic interpretation. Voice server application also includes computer program instructions that provide text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications.

Voice server application may be implemented as a web server implemented in Java C or another language that supports X V SALT VoiceXML or other multimodal languages by providing responses to HTTP requests from X V clients SALT clients Java Speech clients or other multimodal clients. Voice server application may for a further example be implemented as a Java server that runs on a Java Virtual Machine and supports a Java voice framework by providing responses to HTTP requests from Java client applications running on multimodal devices. And voice server applications that support adjusting a speech engine for a mobile computing device based on background noise may be implemented in other ways as may occur to those of skill in the art and all such ways are well within the scope of the present invention.

Also stored in RAM is a voice interpreter a module of computer program instructions that supports the voice mode of user interaction with a multimodal application operating on a multimodal device. The voice interpreter provides speech engine input such as grammars speech for recognition and text prompts for speech synthesis to the speech engine and returns to the multimodal application speech engine output in the form of recognized speech semantic interpretation results and digitized speech for voice prompts. Input to voice interpreter may originate for example from VoiceXML clients running remotely on multimodal devices from X V clients running remotely on multimodal devices from SALT clients running on multimodal devices or from Java client applications running remotely on multimodal devices. In this example voice interpreter interprets and executes VoiceXML segments representing voice dialog instructions received from remote multimodal devices and provided to voice interpreter through voice server application .

When implemented in X V a multimodal application in a thin client architecture may provide voice dialog instructions VoiceXML segments VoiceXML elements and the like to voice interpreter through data communications across a network with the multimodal application. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the voice interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The voice interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA . The voice interpreter interprets VoiceXML dialogs provided to the voice interpreter by a multimodal application.

To provide voice services to a multimodal application the voice server in this example includes a speech engine . The speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating human speech. The speech engine includes an automated speech recognition ASR engine for speech recognition and a text to speech TTS engine for generating speech. The speech engine also includes grammars lexicons and language specific acoustic models . Each lexicon and language specific acoustic model may be associated with a separate language in a configuration parameter repository .

The acoustic models associate speech waveform data representing recorded pronunciations of speech with textual representations of those pronunciations which are referred to as phonemes. The speech waveform data may be implemented as a Speech Feature Vector SFV that may be represented for example by the first twelve or thirteen Fourier or frequency domain components of a sample of digitized speech waveform. Accordingly the acoustic models may be implemented as data structures or tables in a database for example that associates these SFVs with phonemes representing to the extent that it is practically feasible to do so all pronunciations of all the words in various human languages each language having a separate acoustic model . The lexicons are associations of words in text form with phonemes representing pronunciations of each word the lexicon effectively identifies words that are capable of recognition by an ASR engine. Each language has a separate lexicon . Also stored in RAM is a Text To Speech TTS Engine a module of computer program instructions that accepts text as input and returns the same text in the form of digitally encoded speech for use in providing speech as prompts for and responses to users of multimodal systems.

The grammars communicate to the ASR engine the words and sequences of words that currently may be recognized. For precise understanding distinguish the purpose of the grammar and the purpose of the lexicon. The lexicon associates with phonemes all the words that the ASR engine can recognize. The grammar communicates the words currently eligible for recognition. The set of words currently eligible for recognition and the set of words capable of recognition may or may not be the same.

Grammars for use in adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention may be expressed in any format supported by any ASR engine including for example the Java Speech Grammar Format JSGF the format of the W3C Speech Recognition Grammar Specification SRGS the Augmented Backus Naur Format ABNF from the IETF s RFC2234 in the form of a stochastic grammar as described in the W3C s Stochastic Language Models N Gram Specification and in other grammar formats as may occur to those of skill in the art. Grammars typically operate as elements of dialogs such as for example a VoiceXML or an X V. A grammar s definition may be expressed in line in a dialog. Or the grammar may be implemented externally in a separate grammar document and referenced from with a dialog with a URI. Here is an example of a grammar expressed in JSFG 

In this example the elements named and are rules of the grammar. Rules are a combination of a rulename and an expansion of a rule that advises an ASR engine or a voice interpreter which words presently can be recognized. In this example expansion includes conjunction and disjunction and the vertical bars mean or. An ASR engine or a voice interpreter processes the rules in sequence first then then . The rule accepts for recognition call or phone or telephone plus that is in conjunction with whatever is returned from the rule and the rule. The rule accepts bob or martha or joe or pete or chris or john or artoush or tom and the rule accepts today or this afternoon or tomorrow or next week. The command grammar as a whole matches utterances like these for example 

The voice server application in this example is configured to receive from a multimodal client located remotely across a network from the voice server digitized speech for recognition from a user and pass the speech along to the ASR engine for recognition. ASR engine is a module of computer program instructions also stored in RAM in this example. In carrying out automated speech recognition the ASR engine receives speech for recognition in the form of at least one digitized word and uses frequency components of the digitized word to derive a SFV for the digitized word. The ASR engine can use the SFV to infer phonemes for the word from the language specific acoustic model . The ASR engine then uses the phonemes to find the word in the lexicon .

In the example of the speech engine operates according to the current configuration for the speech engine . The current configuration may specify the active lexicon and the active acoustic model and noise model used by the speech engine to recognize and synthesize human speech. The current configuration may also specify a current configuration for the automatic speech recognition ASR engine such as for example speech transition times silence detection times speech timeouts and gain maps. Furthermore the current configuration may also specify a configuration for use by a text to speech TTS engine such as for example the voice used in synthesizing speech from text.

In the example of each acoustic model includes a noise model that represents the waveform of the recorded background noise in an environment often the environment in which the speech waveform for the acoustic model was recorded. The noise model may also be implemented as the first twelve or thirteen Fourier or frequency domain components of a sample of the background noise waveform. When the speech engine compares Fourier or frequency domain representations of a voice utterance with the SFVs in the acoustic models to identify phonemes in the acoustic model the speech engine may subtract out the background noise specified by the noise model from the Fourier or frequency domain representations of a voice utterance. In such a manner speech recognition performance is generally increased when the background noise represented by the noise model matches the background noise in the environment in which the voice utterance for recognition is recorded.

Stored in RAM of is a noise monitor a software component that operates to adjust a speech engine for a mobile computing device based on background noise according to embodiments of the present invention. The noise monitor of operates generally for adjusting the speech engine for a mobile computing device based on background noise according to embodiments of the present invention by sampling through a microphone of the mobile computing device background noise for a plurality of operating environments in which the mobile computing device operates generating for each operating environment a noise model in dependence upon the sampled background noise for that operating environment and configuring the speech engine for the mobile computing device with the noise model for the operating environment in which the mobile computing device currently operates. In such a manner the noise monitor may periodically tune the speech engine enhance speech recognition performance based on the mobile computing device s current operating environment. The noise monitor may configure the speech engine for the mobile computing device with the noise model for the operating environment in which the mobile computing device currently operates by updating a current acoustic model for the speech engine with the noise model for the operating environment in which the mobile computing device currently operates or replacing the current acoustic model for the speech engine with another acoustic model already incorporating the noise model for the operating environment in which the mobile computing device currently operates.

In some other embodiments the noise monitor of may operate for adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention by detecting a change in the mobile computing device from a previous operating environment to a current operating environment determining whether a noise model exists for the current operating environment sampling background noise for the current operating environment if a noise model does not exist for the current operating environment generating a noise model for the current operating environment if a noise model does not exist for the current operating environment and configuring the speech engine for the mobile computing device with the generated noise model . If a noise model does exist for the current operating environment the noise monitor may operate to adjust a speech engine for a mobile computing device based on background noise according to embodiments of the present invention by selecting the noise model for the current operating environment and configuring the speech engine for the mobile computing device with the selected noise model .

Also stored in RAM of is a device location manager a software module that includes computer program instructions for monitoring the locations of the mobile computing devices based on location information provided by position detection components installed in the mobile computing devices. The location of a mobile computing device may be specified using the geographic coordinates such as for example 26 38 7.27 N 80 13 37.22 W using a network address or network identifier from a proximate adhoc personal area network such as for example a Bluetooth network or in any other manner as will occur to those of skill in the art. The locations of the mobile computing devices however may also be specified as a semantic representation of the coordinates such as for example home work church or car. To implement the location of a multimodal device using a semantic representation the device location manager may access a device location repository that associates location semantics with a set of geographic coordinates. For further explanation consider the exemplary device location repository network address network identifier or the like illustrated below using XML schema 

Readers will also note that the device location repository may contain location semantics for more than one multimodal device as illustrated in the exemplary device location repository above. Although such an implementation is useful when the device location manager manages the location of multiple multimodal devices the device location repository may contain only the location semantics relevant to a single multimodal device when the device location manager is installed on the multimodal device itself.

In the example of the device location manager maintains the device location repository . The device location manager may receive location definitions that associate a location semantic with a geographic coordinate from a user through a device location manager client operating on a multimodal device. Through a user interface provided by a device location manager client a user may associate particular location semantics with geographic coordinates. For example a user may manually enter coordinates into a user interface and associate those coordinates with a location semantic chosen by the user. The user may also instruct the device location manager client to capture the coordinates of the device s current position and associate those captured coordinates with a location semantic. The device location manager client then provides the data received from the user to the device location manager which in turn stores the location definition into the device location repository . In other embodiments the device location manager may retrieve coordinates and their associated location semantics from data storage or some other repository connected to the network .

As mentioned above the noise monitor adjusts a speech engine for a mobile computing device based on background noise by configuring the speech engine with the noise model for the operating environment in which the mobile computing device currently operates. The noise monitor of may identify the noise model for the operating environment in which the mobile computing device currently operates using a noise model repository . The noise model repository of may be implemented as a data structure or table that associates various noise models with different operating environments. For example consider the following exemplary noise model repository 

Each record of the exemplary noise model repository above includes a noise model identifier and an operating environment identifier. The noise model identifier specifies the particular noise model for use in the associated operating environment. The operating environment identifier specifies various operating environments. By adding an additional Device ID field to table above readers will note that the exemplary table may be augmented to accommodate multiple mobile computing devices. Readers will further note that the exemplary table above is for explanation only and not for limitation.

Using the exemplary noise model repository above the noise monitor of may configure the speech engine with the noise model identified by Noise Model0 when the mobile computing device is in the Home operating environment. The Home operating environment may be further specified by specific geographic coordinates or network identifiers in the device location repository as described above. Similarly using the exemplary noise model repository above the noise monitor of may configure the speech engine with the noise model identified by Noise Model1 when the mobile computing device is in the Office operating environment. Furthermore the noise monitor of may configure the speech engine with the noise model identified by Noise Model2 when the mobile computing device is in the Car operating environment.

In the example of the noise monitor maintains the noise model repository that associates noise models with various operating environments of a multimodal device. The noise monitor may create entries for the noise model repository automatically as the mobile computing device changes location from one operating environment to another or by receiving user specified associations through a user interface provided by the noise monitor . In a thin client architecture such as the one illustrated in where the noise monitor may not be installed on the multimodal device a noise monitor client may be installed on the multimodal device that provides a user interface to a user to receive entries for the noise model repository . The noise monitor client then in turn provides the user input to the noise monitor installed on the voice server . To ensure that the environments for which a user specifies noise models match the locations managed by the device location manager the noise monitor may register with the device location manager to receive notification of changes to the location definitions specified in the device location repository .

Also stored in RAM is an operating system . Operating systems useful in voice servers according to embodiments of the present invention include UNIX Linux Microsoft Vista IBM s AIX IBM s i5 OS and others as will occur to those of skill in the art. Operating system voice server application voice interpreter speech engine device location manager device location repository and configuration parameter repository in the example of are shown in RAM but many components of such software typically are stored in non volatile memory also for example on a disk drive .

Voice server of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in voice servers according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in voice servers according to embodiments of the present invention include Peripheral Component Interconnect PCI and PCI Extended PCI X bus as well as PCI Express PCIe point to point expansion architectures and others.

Voice server of includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the voice server . Disk drive adapter connects non volatile data storage to the voice server in the form of disk drive . Disk drive adapters useful in voice servers include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a voice server as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The example voice server of includes one or more input output I O adapters . I O adapters in voice servers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The example voice server of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary voice server of includes a communications adapter for data communications with other computers and for data communications with a data communications network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapters useful for adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired data communications network communications and 802.11 adapters for wireless data communications network communications.

For further explanation sets forth a functional block diagram of exemplary apparatus for adjusting a speech engine for a mobile computing device based on background noise in a thin client architecture according to embodiments of the present invention. The example of includes a mobile computing device implemented as a multimodal device and a voice server connected for data communication by a VOIP connection through a data communications network . A multimodal application runs on the multimodal device and a voice server application runs on the voice server . The multimodal client application may be a set or sequence of X V or SALT documents that execute on multimodal browser a Java voice application that executes on the Java Virtual Machine or a multimodal application implemented in other technologies as may occur to those of skill in the art. The example multimodal device of also includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec .

In addition to the multimodal sever application the voice server also has installed upon it a speech engine with an ASR engine grammars lexicons acoustic models with noise models and a TTS engine as well as a voice interpreter configuration parameter repository a device location manager and a device location repository . The voice interpreter of is implemented as a VoiceXML interpreter that interprets and executes VoiceXML dialog instructions received from the multimodal application and provided to voice interpreter through voice server application . VoiceXML input to the voice interpreter may originate from the multimodal application implemented as an X V client running remotely on the multimodal device . As noted above the multimodal application also may be implemented as a Java client application running remotely on the multimedia device a SALT application running remotely on the multimedia device and in other ways as may occur to those of skill in the art.

The voice server of also has installed upon it a noise monitor . The noise monitor of operates generally for adjusting the speech engine for a mobile computing device based on background noise according to embodiments of the present invention. The noise monitor of operates generally for adjusting the speech engine for a mobile computing device based on background noise according to embodiments of the present invention by sampling through a microphone of the mobile computing device background noise for a plurality of operating environments in which the mobile computing device operates generating for each operating environment a noise model in dependence upon the sampled background noise for that operating environment and configuring the speech engine for the mobile computing device with the noise model for the operating environment in which the mobile computing device currently operates.

The noise monitor of is operatively coupled to the microphone of the mobile computing device through the data communication network and the noise monitor client installed on the mobile computing device . The noise monitor client interfaces with the hardware and software components of the multimodal device on behalf of the noise monitor installed on the voice server . Through the noise monitor client the noise monitor may periodically sample background noise in the environment in which the mobile computing device operates. In addition the noise monitor client may expose an API that allows the JVM the multimodal application or the multimodal browser to communicate with the noise monitor .

The noise monitor of may also operate for adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention by detecting a change in the mobile computing device from a previous operating environment to a current operating environment determining whether a noise model exists for the current operating environment sampling background noise for the current operating environment if a noise model does not exist for the current operating environment generating a noise model for the current operating environment if a noise model does not exist for the current operating environment and configuring the speech engine for the mobile computing device with the generated noise model. If a noise model does exist for the current operating environment the noise monitor may operate to adjust a speech engine for a mobile computing device based on background noise according to embodiments of the present invention by selecting the noise model for the current operating environment and configuring the speech engine for the mobile computing device with the selected noise model. The noise monitor of may determine whether a noise model exists for the current operating environment using the noise model repository that associates noise models with various operating environments.

In the example of the noise monitor detects a change in the mobile computing device from a previous operating environment to a current operating environment by receiving a notification message from a device location manager . The device location manager of monitors the location of the mobile computing device and provides the noise monitor with notification messages regarding the location of the mobile computing device . The device location manager of monitors the location of the mobile computing device based on position information provided by a position detection component of the device . The position detection component communicates with other devices to determine the mobile computing device s position information. In the example of the position detection component communicates with a group of GPS satellites or the devices in a PAN to determine the mobile computing device s position information. Using the position information provided by the position detection component the device location manager may identify the location of the device using the device location repository that associates position information such as geographic coordinates or network identifiers with location or environment semantics such as house car work school and so on.

In the example of the device location manager is operatively coupled to the position detection component of the multimodal device through network a device location manager client and position detection module . The position detection module operates as a software driver for the position detection component and provides an interface for other software components such as the device location manager and the device location manager client to interact with the position detection component. The device location manager client of is a software module that provides data communications between the position detection module on the multimodal device and the device location manager on voice server . In addition the device location manager client may also provide a user interface to user for receiving a location definition that associates location semantics with geographic coordinates provided by the position detection component . The device location manager client of may in turn provide the location definition to the device location manager which stores the location definition in the device location repository .

As mentioned above the VOIP connection connects for data communication the multimodal device and the voice server . VOIP stands for Voice Over Internet Protocol a generic term for routing speech over an IP based data communications network. The speech data flows over a general purpose packet switched data communications network instead of traditional dedicated circuit switched voice transmission lines. Protocols used to carry voice signals over the IP data communications network are commonly referred to as Voice over IP or VOIP protocols. VOIP traffic may be deployed on any IP data communications network including data communications networks lacking a connection to the rest of the Internet for instance on a private building wide local area data communications network or LAN. 

Many protocols are used to effect VOIP. The two most popular types of VOIP are effected with the IETF s Session Initiation Protocol SIP and the ITU s protocol known as H.323. SIP clients use TCP and UDP port 5060 to connect to SIP servers. SIP itself is used to set up and tear down calls for speech transmission. VOIP with SIP then uses RTP for transmitting the actual encoded speech. Similarly H.323 is an umbrella recommendation from the standards branch of the International Telecommunications Union that defines protocols to provide audio visual communication sessions on any packet data communications network.

The apparatus of operates in a manner that is similar to the operation of the system of described above. Multimodal application is a user level multimodal client side computer program that presents a voice interface to user provides audio prompts and responses and accepts input speech for recognition . Multimodal application provides a speech interface through which a user may provide oral speech for recognition through microphone and have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . Multimodal application then packages the digitized speech in a recognition request message according to a VOIP protocol and transmits the speech to voice server through the VOIP connection on the network .

Voice server application provides voice recognition services for multimodal devices by accepting dialog instructions VoiceXML segments and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and output from execution of semantic interpretation scripts as well as voice prompts. Voice server application supports text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications.

The voice server application receives speech for recognition from a user and passes the speech through API calls to voice interpreter which in turn uses an ASR engine for speech recognition. The ASR engine receives digitized speech for recognition uses frequency components of the digitized speech to derive an SFV uses the SFV to infer phonemes for the word from the language specific acoustic model and uses the phonemes to find the speech in the lexicon . The ASR engine then compares speech found as words in the lexicon to words in a grammar to determine whether words or phrases in speech are recognized by the ASR engine.

The multimodal application is operatively coupled to the ASR engine . In this example the operative coupling between the multimodal application and the ASR engine is implemented with a VOIP connection through a voice services module then through the voice server application and the voice interpreter . Depending on whether the multimodal application is implemented in X V Java or SALT the voice interpreter may be implemented using a VoiceXML interpreter a VoiceXML interpreter exposing a Java interface or a SALT interpreter. The voice services module is a thin layer of functionality a module of computer program instructions that presents an API for use by an application level program in providing dialog instructions and speech for recognition to a voice server application and receiving in response voice prompts and other responses. In this example application level programs are represented by multimodal application JVM and multimodal browser .

The voice services module provides data communications services through the VOIP connection and the voice server application between the multimodal device and the voice interpreter . The API is the same API presented to applications by a voice interpreter when the voice interpreter is installed on the multimodal device in a thick client architecture. So from the point of view of an application calling the API the application is calling the VoiceXML interpreter directly. The data communications functions of the voice services module are transparent to applications that call the API . At the application level calls to the API may be issued from the multimodal browser which provides an execution environment for the multimodal application when the multimodal application is implemented with X V. And calls to the API may be issued from the JVM which provides an execution environment for the multimodal application when the multimodal application is implemented with Java.

Adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention in thick client architectures is generally implemented with multimodal devices that is automated computing machinery or computers. In the system of for example all the multimodal devices are implemented to some extent at least as computers. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a multimodal device in adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention. In a multimodal device implementing a thick client architecture as illustrated in the multimodal device has no connection to a remote voice server containing a voice interpreter and a speech engine. All the components needed for speech synthesis and voice recognition in adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention are installed or embedded in the multimodal device itself.

The example multimodal device of includes several components that are structured and operate similarly as do parallel components of the voice server having the same drawing reference numbers as described above with reference to at least one computer processor frontside bus RAM high speed memory bus bus adapter video adapter video bus expansion bus communications adapter I O adapter disk drive adapter an operating system a voice interpreter a speech engine and so on. As in the system of the speech engine in the multimodal device of includes an ASR engine grammars lexicons acoustic models that each have a noise model and a TTS engine . The voice interpreter may be implemented as a VoiceXML interpreter that administers dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

The speech engine in this kind of embodiment a thick client architecture often is implemented as an embedded module in a small form factor device such as a handheld device a mobile phone PDA and the like. An example of an embedded speech engine that may be improved for adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention is IBM s Embedded ViaVoice Enterprise. The example multimodal device of also includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec . The sound card is connected to processor through expansion bus bus adapter and front side bus .

Also stored in RAM in this example is a multimodal application a module of computer program instructions capable of operating a multimodal device as an apparatus that supports multiple modes of user interaction including a voice mode and one or more non voice modes. The multimodal application implements speech recognition by accepting speech for recognition from a user and sending the speech for recognition through API calls to the ASR engine . The multimodal application implements speech synthesis generally by sending words to be used as prompts for a user to the TTS engine . As an example of thick client architecture the multimodal application in this example does not send speech for recognition across a network to a voice server for recognition and the multimodal application in this example does not receive synthesized speech TTS prompts and responses across a network from a voice server. All grammar processing voice recognition and text to speech conversion in this example is performed in an embedded fashion in the multimodal device itself.

More particularly multimodal application in this example is a user level multimodal client side computer program that provides a speech interface through which a user may provide oral speech for recognition through microphone have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . The multimodal application may be implemented as a set or sequence of X V documents executing in a multimodal browser or microbrowser that passes VoiceXML grammars and digitized speech by calls through an API directly to an embedded voice interpreter for processing. The embedded voice interpreter may in turn issue requests for speech recognition through API calls directly to the embedded ASR engine . Multimodal application also can provide speech synthesis TTS conversion by API calls to the embedded TTS engine for voice prompts and voice responses to user input.

In a further class of exemplary embodiments the multimodal application may be implemented as a Java voice application that executes on Java Virtual Machine and issues calls through an API of the voice interpreter for speech recognition and speech synthesis services. In further exemplary embodiments the multimodal application may be implemented as a set or sequence of SALT documents executed on a multimodal browser or microbrowser that issues calls through an API of the voice interpreter for speech recognition and speech synthesis services. In addition to X V SALT and Java implementations multimodal application may be implemented in other technologies as will occur to those of skill in the art and all such implementations are well within the scope of the present invention.

Stored in RAM of is a noise monitor that operates generally for adjusting the speech engine for a mobile computing device based on background noise according to embodiments of the present invention. The noise monitor of operates generally for adjusting the speech engine for a mobile computing device based on background noise according to embodiments of the present invention by sampling through a microphone of the mobile computing device background noise for a plurality of operating environments in which the mobile computing device operates generating for each operating environment a noise model in dependence upon the sampled background noise for that operating environment and configuring the speech engine for the mobile computing device with the noise model for the operating environment in which the mobile computing device currently operates.

The noise monitor of may also operate for adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention by detecting a change in the mobile computing device from a previous operating environment to a current operating environment determining whether a noise model exists for the current operating environment sampling background noise for the current operating environment if a noise model does not exist for the current operating environment generating a noise model for the current operating environment if a noise model does not exist for the current operating environment and configuring the speech engine for the mobile computing device with the generated noise model. If a noise model does exist for the current operating environment the noise monitor may operate to adjust a speech engine for a mobile computing device based on background noise according to embodiments of the present invention by selecting the noise model for the current operating environment and configuring the speech engine for the mobile computing device with the selected noise model. The noise monitor of may determine whether a noise model exists for the current operating environment using the noise model repository that associates noise models with various operating environments.

In the example of the noise monitor detects a change in the mobile computing device from a previous operating environment to a current operating environment by receiving a notification message from a device location manager . The device location manager of monitors the location of the mobile computing device and provides the noise monitor with notification messages regarding the location of the mobile computing device . The device location manager of monitors the location of the mobile computing device based on position information provided by a position detection component through a position detection module . The position detection component is a component that communicates with other devices to determine the mobile computing device s position information. In the example of the position detection component communicates with a group of GPS satellites or the devices in a PAN to determine the mobile computing device s position information. Using the position information provided by the position detection component the device location manager may identify the location of the device using the device location repository that associates position information such as geographic coordinates or network identifiers with location or environment semantics such as house car work school and so on. The position detection module operates in RAM as a software driver for the position detection component and provides an interface for other software components such as the device location manager to interact with the position detection component.

The multimodal application of is operatively coupled to the ASR engine . In this example the operative coupling between the multimodal application and the ASR engine is implemented through the voice interpreter . Depending on whether the multimodal application is implemented in X V Java or SALT the voice interpreter may be implemented as a VoiceXML interpreter a VoiceXML interpreter exposing a Java interface or SALT interpreter. When the multimodal application is implemented in X V the operative coupling is effected through the multimodal browser which provides an operating environment and an interpreter for the X V application and then through a VoiceXML interpreter which passes grammars and voice utterances for recognition to the ASR engine. When the multimodal application is implemented in Java Speech the operative coupling is effected through the JVM which provides an operating environment for the Java application and the voice interpreter which passes grammars and voice utterances for recognition to the ASR engine . When the multimodal application is implemented in SALT the operative coupling is effected through the multimodal browser which provides an operating environment and an interpreter for the X V application and then through a SALT interpreter which passes grammars and voice utterances for recognition to the ASR engine.

The multimodal application in this example running on a multimodal device that contains its own voice interpreter and its own speech engine with no network or VOIP connection to a remote voice server containing a remote VoiceXML interpreter or a remote speech engine is an example of a so called thick client architecture so called because all of the functionality for processing voice mode interactions between a user and the multimodal application is implemented on the multimodal device itself.

For further explanation sets forth a flow chart illustrating an exemplary method of adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention. The mobile computing device described with reference to is operatively coupled to a microphone used to record the background noise for the environments in which the mobile computing device operates. The example of illustrates three operating environments in which the mobile computing device operates a house a car and a helicopter.

In the example of the speech engine adjusted based on background noise is similar to the speech engines described above. The speech engine includes acoustic models lexicons and grammars used by the speech engine to provide speech recognition and synthesization services. The speech engine provides speech recognition using an ASR engine and speech synthesization using a TTS engine .

The method of includes sampling through the microphone background noise for a plurality of operating environments in which the mobile computing device operates. The noise monitor may sample background noise for a plurality of operating environments according to the method of by periodically at a predetermined time period determining the lack of any foreground noise and digitizing the background noise for the environment in which the mobile computing device is operating. The predetermined time period at which the noise monitor samples the background noise may be a static time period or a time period that is dynamically generated. For example the predetermined time period may specify sampling the background noise every five minutes three minutes after the most recent user interaction with the mobile computing device and so on. Because foreground noise generally results in a sudden change in the input to a microphone the noise monitor may determine the lack of any foreground noise by identifying over a period of time when the input to the microphone does not vary beyond a predefined threshold. The period of time used to identify the lack of any foreground noise may be a several milliseconds several seconds or any other time period as will occur to those of skill in the art.

In some embodiments the noise monitor may sample the background noise while a user is not interacting with the mobile computing device to avoid having additional noise from the user interaction included the background noise for the operating environment. In other embodiments the noise monitor may sample the background noise while the user is interacting with the device. For example the noise monitor may sample the background noise immediately before or after the user provides a voice utterance for speech recognition.

The method of includes generating for each operating environment a noise model in dependence upon the sampled background noise for that operating environment . Each noise model of represents the waveform of the recorded background noise used to adjust the speech engine . The noise model of may be implemented as the first twelve or thirteen Fourier or frequency domain components of the waveform of the background noise . The noise monitor may generate a noise model for each operating environment according to the method of by transforming the background noise for each operating environment from the time domain to the frequency domain using for example a Fourier transformation algorithm and selecting a predetermined number of frequency domain components to represent the background noise waveform in the noise model .

The method of includes configuring the speech engine for the mobile computing device with the noise model for the operating environment in which the mobile computing device currently operates. The noise monitor may configure the speech engine with the noise model for the operating environment in which the mobile computing device currently operates according to the method of by altering the current configuration of the speech engine . The current configuration of specifies the operating settings parameters and other variable used by the speech engine to provide speech recognition and synthesization services. The current configuration may specify the active lexicon and the active acoustic model and noise model used by the speech engine to recognize and generate human speech. The current configuration may also specify a current configuration for the automatic speech recognition ASR engine such as for example speech transition times silence detection times speech timeouts and gain maps.

Furthermore the current configuration may also specify a configuration for use by a text to speech TTS engine such as for example the voice used to synthesize the text.

The noise monitor may alter the current configuration of the speech engine to configure the speech engine with a noise model for the current operating environment according to the method of by updating the current acoustic model for the speech engine with the noise model for the operating environment in which the mobile computing device currently operates. Rather than updating the current acoustic model the noise monitor may also alter the current configuration of the speech engine to configure the speech engine with a noise model for the current operating environment according to the method of by replacing the current acoustic model for the speech engine with another acoustic model already incorporating the noise model for the operating environment in which the mobile computing device currently operates.

The explanation above with reference to describes a noise monitor that periodically adjusts a speech engine for a mobile computing device based on the background noise for the device s current operating environment without taking into account the device s location. In some other embodiments however the noise monitor may incorporate the device s location in adjusting a speech engine for the device based on the background noise. For further explanation consider that sets forth a flow chart illustrating a further exemplary method of adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention. The mobile computing device described with reference to is operatively coupled to a microphone used to record the background noise for the environments in which the mobile computing device operates.

In the example of the speech engine adjusted based on background noise is similar to the speech engines described above. The speech engine includes acoustic models lexicons and grammars used by the speech engine to provide speech recognition and synthesization services. The speech engine provides speech recognition using an ASR engine and speech synthesization using a TTS engine . The speech engine also includes a current configuration that specifies the operating settings parameters and other variable used by the speech engine to provide speech recognition and synthesization services.

The method of includes detecting a change in the mobile computing device from a previous operating environment to a current operating environment . The noise monitor may detect a change in the mobile computing device from a previous operating environment to a current operating environment according to the method of by receiving a location change notification message from a device location manager for the mobile computing device. The location change notification message may provide the noise monitor with location information in the form of position information such as geographic coordinates network identifiers and the like as well as in the form of semantics representing such position information such as for example home work church or car. The location device manager may have obtained the position information from a position detection component installed in the mobile computing device that communicates with GPS satellites or other devices in a PAN .

The method of also includes determining whether a noise model exists for the current operating environment . The noise monitor may determine whether a noise model exists for the current operating environment according to the method of by identifying whether a noise model is associated with an identifier for the current operating environment in a noise model repository. As described above a noise model repository may be implemented as a data structure or table that associates various noise models with different operating environments. If a noise model is associated with an identifier for the current operating environment in the noise model repository then a noise model exists for the current operating environment . If a noise model is not associated with an identifier for the current operating environment in the noise model repository then a noise model does not exists for the current operating environment .

The method of includes sampling background noise for the current operating environment if a noise model does not exist for the current operating environment . The noise monitor may sample background noise for the current operating environment according to the method of by determining the lack of any foreground noise and digitizing the background noise for the current operating environment in which the mobile computing device is operating.

The method of includes generating a noise model for the current operating environment if a noise model does not exist for the current operating environment . The noise monitor may generate a noise model for the current operating environment according to the method of by transforming the background noise for the current operating environment from the time domain to the frequency domain using for example a Fourier transformation algorithm and selecting a predetermined number of frequency domain components to represent the background noise waveform in the noise model . Generating a noise model for the current operating environment according to the method of may also include associating the generated noise model with the current operating environment in a noise model repository such as for example the noise model repository described above with reference to .

The method of includes selecting the noise model for the current operating environment if a noise model exists for the current operating environment . The noise monitor may select the noise model for the current operating environment according to the method of by retrieving the noise model associated with the current operating environment in a noise model repository.

The method of also includes configuring the speech engine for the mobile computing device with the selected noise model . The noise monitor may configure the speech engine for the mobile computing device with the selected noise model according to the method of by altering the current configuration of the speech engine . The noise monitor may alter the current configuration of the speech engine to configure the speech engine for the mobile computing device with the selected noise model according to the method of by updating the current acoustic model for the speech engine with the noise model for the operating environment in which the mobile computing device currently operates. Rather than updating the current acoustic model the noise monitor may also alter the current configuration of the speech engine to configure the speech engine for the mobile computing device with the selected noise model according to the method of by replacing the current acoustic model for the speech engine with another acoustic model already incorporating the noise model for the operating environment in which the mobile computing device currently operates.

In the example of the mobile computing device is implemented as a multimodal device having installed upon it a multimodal application operatively coupled to the speech engine . The multimodal device described with reference to supports multiple modes of user interaction with the multimodal application. The modes of user interaction include a voice mode and one or more non voice modes.

The method of includes performing speech recognition for a multimodal application using the speech engine configured for the mobile computing device with the noise model for the operating environment in which the mobile computing device currently operates. Performing speech recognition for a multimodal application using the speech engine according to the method of may be carried out by receiving a user s voice utterance from the multimodal application passing the voice utterance to the ASR engine for speech recognition using the acoustic model with the selected noise model the lexicon and the grammar and receiving from the ASR engine a textual representation of the voice utterance provided by the user. When the multimodal application is implemented in part using VoiceXML the multimodal application may access the representation of the voice utterance in the application.lastresult array. Readers will note that adjusting a speech engine for a mobile computing device based on background noise according to embodiments of the present invention advantageously increases the speech recognition accuracy of the recognition results returned to the multimodal application.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for adjusting a speech engine for a mobile computing device based on background noise. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

