---

title: Rules library for sales playbooks
abstract: Rules created in a computerized sales playbook system are stored in a rules library. Rules can be shared among playbooks, stages, plays, content and other playbook elements. Any playbook element can be associated with one or more rules. Such rules include one or more conditions that trigger the rule. If the conditions are met, then a playbook element is enabled for use by the user. Rules can be selected from the rules library as the playbook is being created. For example, when adding a play or a content item to a play, a user is prompted to add a rule to be associated with the playbook element. If the user adds a rule, an interface is presented allowing the user to select an existing rule from the rules library or create a new rule. If a new rule is created, it is added to the rules library.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09355376&OS=09355376&RS=09355376
owner: Qvidian, Inc.
number: 09355376
owner_city: Chelmsford
owner_country: US
publication_date: 20120511
---
For sophisticated sales processes companies generally maintain computer systems that track a substantial amount of information about customers and potential customers. Such computer systems are commonly referred to as customer relationship management CRM systems.

Another tool that is commonly used in sophisticated sales processes is a sales playbook. A sales playbook defines a sequence of steps to be performed by a user such as sales personnel marketing personnel customer support personnel and other users in an organization when engaging a prospect. A sales playbook can be implemented on a computer herein called a computerized sales playbook system. A sales playbook includes several playbook elements some of which include instructions content and the like to be used when engaging a prospect.

While some computerized sales playbook systems have access to data in a customer relationship management system the data in the two computer systems generally are maintained through separate processes. In other words one or more users update data in the CRM system and separately one or more users update data in the computerized sales playbook system.

The steps of the sales process often are situational in that they depend on the status of the prospect in the sales process. This situational nature can be expressed by a set of rules that determine based on data about a prospect such as from a CRM system whether a playbook or action within a playbook or specific content in the playbook is provided to a user.

Rules created in a computerized sales playbook system are stored in a rules library allowing rules to be shared among playbooks stages plays and other playbook elements. In one implementation a rule includes one or more conditions based on CRM data an operator on the CRM data and a value. If the conditions of a rule are met then a playbook stage play or other playbook element is enabled for use by the salesperson.

Rules can be selected from the rules library for a playbook element as the playbook is being created. For example when adding a play or a content item to a play a user can be prompted to add a rule to be associated with the playbook element. If the user chooses to add a rule an interface is presented allowing the user to select an existing rule from the rules library or create a new rule. If a new rule is created it can be added to the rules library. An existing rule can be edited to create a new rule and such editing can include adding deleting or modifying one or more conditions of the rule.

Providing a rules library enables rules to be managed as a distinct part of the sales process. Through various data analyses the effectiveness of a rule or rules can be measured. When changes are made to a rule the various playbook elements with which it is associated can be determined. This information can be used to ensure that the changes to the rule are appropriate for each instance in which the rule is used. Rules also can be categorized and filtered to facilitate searching and comparison.

This Summary is intended to provide a brief introduction to concepts in a simplified form which are described further in the Detailed Description. This Summary is intended neither to identify any essential features of the claimed subject matter nor to be used to limit the scope of the claimed subject matter.

The following section describes an example implementation of a computerized sales playbook system with a rules library. Referring to a computerized sales playbook system includes a playbook manager through which an individual can create sales playbooks by providing user input . The sales playbook includes a plurality of playbook elements such as plays and stages which are a set of plays. A playbook element includes instructions content and the like to be used when engaging a prospect. Any playbook element whether content play stage or entire playbook can have one or more rules associated with it indicating when the playbook element should be used. Also one or more update rules may be associated with a playbook element indicating what should occur when the playbook element is completed by a user. The use of update rules is described in more detail in co pending U.S. patent application Ser. No. 13 462 504 filed May 2 2012 entitled Updating Customer Relationship Management Systems Through Sales Playbook Activities with Karen P. Meyer et al. as inventors which is hereby incorporated by reference.

The sales playbooks are stored in computer readable storage. For example playbooks rules and the relationship between rules and playbooks can be stored as rows in a relational database. For example one table can include rows that relate playbook elements with rules. Another table can include rows defining the playbook elements in a playbook and the content used in each element. Another table can include rows defining elements of the rules. A variety of other implementations can be used to define playbooks rules and their interrelationships and the invention is not limited to a specific implementation.

A rules library provides rules to the playbook manager likewise the playbook manager stores rules in the rules library . In the playbook manager through user input rules can be defined or selected by the user. In defining a rule available CRM data from a CRM system can be accessed to allow rules to be defined based on data stored in a CRM system.

A playbook execution engine receives and processes sales playbooks to provide data to users throughout the marketing and sales process. The playbook execution system also has access to rules and CRM data from a CRM system .

When accessing sales playbooks the rules associated with elements of the playbooks and CRM data referenced by the rules are accessed to determine which playbooks plays content and other playbook elements to make available to the sales personnel. In other words the rules specify the conditions based on CRM data under which a playbook or play or content associated with a play is selected by the playbook execution engine. The playbook execution engine has an input for receiving a sales playbook from computer readable storage. It also has an output that presents playbook elements from the sales playbook to a user such as by providing the data to a display or to another computer. For example data defining a sales playbook can be read from a database and such data can be used to generate a document in a markup language such as the eXtensible Markup Language XML which in turn can be sent to an application that renders the document for display.

Rules for sales playbooks can be used to control the playbook or playbooks to which users have access. For example a sales representative focused on selling to small businesses may be presented with only a playbook that is geared for small businesses while a sales representative focused on selling into very large businesses may be presented with only a playbook that is geared toward selling to that kind of customer. As another example a sales representative may be limited in his authority regarding the verticals in which he is permitted to sell which would limit the playbooks available to that sales representative.

Rules also can be used within a playbook to control a sequence of steps to be performed in connection with a prospect and or content to be presented to a prospect based on various information. Such information can include data about the prospect market conditions and business rules of the seller. For example one vertical market for a product may have different competition and or needs than another vertical market for that product which can impact the content delivered by a sales representative when she addresses different prospects in the different vertical markets. As another example the prospect may be a repeat customer which can impact the content presented to that prospect.

Accordingly the variety of specific rules that can be created is very large. However rules in general are based on information known by the seller which for the purposes of this document is presumed to be maintained in a customer relationship management CRM system. Clearly a variety of systems can store relevant data on which rules can be based.

Rules are defined by a user typically a sales manager of the playbook manager who has the authority in an organization to define playbooks and define rules implementing business rules defined by the organization. A state diagram of an example implementation of the playbook manager described below in connection with and associated interfaces illustrates how such rules can be defined.

In the playbook manager starts in an initial state . The initial state can include presentation of a user interface through which one or more existing playbooks can be presented for selection and or an option to create a new playbook can be presented. Additional states can be associated with additional interfaces through which user input can be provided. For example upon selection of a playbook or creation of a new playbook a playbook state can be entered. Various operations for editing the playbook continue to keep the system in playbook state . Upon completion the system can transition back to the initial state .

In the playbook state among a variety of other actions a user can choose to associate a selection rule with the playbook transitioning to state . In state a user is presented with an interface to associate a selection rule with the playbook. See as an example . Upon completion the system can transition back to playbook state .

In the playbook state among a variety of other actions a user can choose to edit an existing play or stage or create a new play or stage which causes a transition to play state or stage state . In stage state a user is presented an interface to edit or create a new stage see . Editing operations on the stage continue to keep the system in a stage state . While in stage state a user can choose to edit an existing play in the stage which causes a transition to play state . In play state a user is presented an interface to edit or create a new play see . Editing operations on the play continue to keep the system in play state . Upon completion of editing or creating the play the system can transition back to playbook state or stage state .

While in the stage state among a variety of other actions a user can choose to associate a rule with the stage transitioning to state . In state a user is presented with an interface to associate a rule with the stage. Upon completion the system can transition back to stage state .

While in the play state among a variety of other actions a user can choose to associate a rule with the play transitioning to state . In state a user is presented with an interface to associate a rule with the play. Upon completion the system can transition back to play state .

While in the play state a user may choose to add content to the play transitioning to item state . In item state a user is presented with an interface to edit or add an item of content to the play. Various editing operations related to the item of content keep the system in item state . Upon completion of editing or adding an item the system can transition back to the play state .

While in the item state among a variety of other actions a user can choose to associate a rule with the item transitioning to state . In state a user is presented with an interface to associate a rule with the item. Upon completion the system can transition back to item state .

In the initial state a user also may select to view rules in which case the playbook manager transitions to rule viewing state . When the user is done viewing rules for example by selecting another interface tab in the user interface a transition back to the initial state can occur.

Having now described a general overview of an example implementation of the playbook manager example interfaces for input of rules will now be described.

Referring now to an example implementation of an interface for entry of playbook selection rules will now be described.

In a playbook selection rule interface is provided in response to a user selecting a selection rules tab . A variety of other mechanisms can be used to access the interface .

The rules interface displays a list of rules already associated with the playbook with each rule displayed in its own row . The information about the rules can be displayed in several columns. In this example a rule name and a description of the rules are displayed. A remove button also is displayed which upon selection by the user allows the rule to be deleted from the list if the rule is not used in any playbook element. In one implementation a rule can be marked as available or unavailable for use.

An add rule button also is displayed which upon selection by the user causes an interface for selecting an existing rule or defining a new rule to be displayed. An example of such an interface is described in more detail below in connection with .

In an additional feature of this interface is shown. In particular at an explanation of a rule can be displayed. This display can be activated for example by an appropriate user interface gesture related to the displayed name of the rule such as causing a cursor of a pointing device to hover over the name. To generate this display the rules library is accessed to retrieve and process the rule definition into the displayed text. In this example the name of the CRM object field an operator and a value are used to define a rule. These values are retrieved from the rules library and concatenated to provide the displayed text.

In an editing interface for a play or a stage is shown. In connection with displayed information about a play or stage a user interface object in this case an add rule button is displayed. Upon selection by the user this button causes an interface for selecting an existing rule or defining a new rule to be displayed. An example of such an interface is described in more detail below in connection with . An add content button is present for the play editing interface and when selected causes an interface for adding content to a play to be displayed. An example of such an interface is described in more detail below in connection with .

In an interface for adding content to a play is shown. For each item of content associated with a play some information about the content is displayed such as a file name or text or the like. In connection with displayed information about one or more items a user interface object in this case an add rule button is displayed one for each item. Upon selection by the user this button causes an interface for selecting an existing rule or defining a new rule to be displayed. Items can be added to a play by selecting an add item button and can be deleted by selecting a delete button . An example of an interface for selecting or defining rules is described in more detail below in connection with .

Referring now to an example implementation of an interface for selecting an existing rule will now be described. This interface displays a list if existing rules accessed from the rules library. Each row of the list displays details about a rule. Each of the columns in the display provides different information about the rules. In this example implementation there are columns to display a rule name a rule description a rule creator and the date of creation of the rule . A checkbox or other selection mechanism is displayed adjacent a row. If a user would like to select a rule the user manipulates the selection mechanism through an appropriate user interface gesture. In this case a touch gesture or mouse click gesture can activate the checkbox for a rule to select that rule. When the user has selected rules the add rules button can be activated so as to add the selected rules to the playbook element that is currently active. If a new rule is to be created the user activates the create rule button .

Upon activation of the create rule button by the user the system presents an interface to allow the user to specify a new rule an example of which is shown in . In this interface a user can specify a rule name a rule description and conditions that activate the rule. In this example interface the conditions are defined in relation to CRM data. In particular a user selects a type of CRM data. Given the selected type the system can access the API of the CRM system to identify the available fields of data stored for the selected CRM type. These fields are presented in a menu labeled CRM object . A user can select one of the presented fields. In addition an operator applicable to that field can be selected through operator element . A value can be input through value interface . When a user has completed defining a condition as a combination of a CRM field an operator and a value for example by activating an OK button the condition is stored as part of this rule.

In after a condition is defined and stored it is presented in the interface such as shown at . The selected CRM field operator and value are displayed. A selector such as a delete condition button is displayed that when activated by the user deletes the condition from the rule. An add condition button when activated by the user causes the condition definition interface e.g. and from to be displayed again for entry of another condition. When a user activates a save button the rule is saved to the rules library and is associated with the currently active playbook element.

Having now described the interfaces through which rules are entered a process for allowing a user to associate a rule with a playbook object will now be described in connection with the flow chart of .

The system first accesses the rule library to access data about available rules. Given the data about the rules a list of available rules such as in is created and displayed . User input is then received which is either a selection of an existing rule or an indication that a new rule is to be created as determined at . If the user input is the selection of an existing rule then the rule is associated with the currently active playbook element.

If the user is adding a new rule then the CRM system is accessed to identify available CRM objects and their fields. An interface is presented to the user to allow the user to provide input to define a condition for a rule such as a CRM field operator and value. The system receives the user input defining the condition for the rule. The condition can be verified and any errors that are detected can be presented to the user. If the condition is verified then it is added to the rule. The user can continue to input additional conditions for the rule. When the user has no more conditions to add the rule can be stored and associated with the currently active playbook element. That playbook element can be an entire playbook a play an item in a play a stage or any other playbook element. Further one or more rules can be associated with each kind of playbook element. The same interface of provides a uniform way in which these rules can be defined regardless of the type of playbook element with which the rules are associated.

Having now described an example implementation of a playbook manager more details about an example implementation of a rules library will now be described.

Referring to the rules library stores each rule. As noted above the data that is stored for a rule includes a rule name a rule description a creator a date of creation a CRM type a list of one or more conditions and a list of one or more playbook elements with which it is associated. A condition is defined by a CRM field an operator and a value . A playbook element is defined by an identifier for that element.

Referring to an example interface for displaying this information is shown. A list of rules is presented with each row presenting information about a rule. The columns in this example interface include the rule name the CRM type for the rule . The creator and date added to the library also are presented. A description of the rule can provide more details about a rule to the user. A used by column indicates where the rule is used i.e. which playbook elements are associated with the rule. In one example implementation this information is represented by a count of the number of playbooks which can be retrieved from the database and a count of the number of plays with which the rule is associated. The display in also can include operations associated with each rule such as copy and or delete as indicated at . A create new rule button also can be provided at to activate an interface such as shown in to allow a user to create a new rule. If other data such as categories or keywords are associated with rules then rules also can be categorized filtered searched and compared more easily by users and facilitate management of the rules in the rules library.

In an example interface shows where a rule is used. The interface can be activated using any of a number of user interface gestures such as a mouse click mouse hover event placing a pointer over the row and column a touch on a touch sensitive device or the like. When the interface is activated the information about where a rule is used is accessed from the rules library. This information is processed and formatted for display for example with a row for each play stage playbook or other playbook element in which the rule is used. Each row in the interface is populated in this example with the names of playbook elements that are using the rule as a selection rule. Plays can be displayed first in the list then playbooks then other playbook elements. Selecting a playbook element from the interface can be used to filter the list to show only those rules that are used in the selected playbook element as a selection rule. Alternatively selecting a playbook element from the list can cause the system to display more information about that playbook element. Thus when changes are made to a rule the various playbook elements with which it is associated can be determined. This information can be used to ensure that the changes to the rule are appropriate for each instance in which the rule is used.

A flowchart describing how to generate the display of will now be described in connection with . The rules database is accessed to identify the available rules. The data for each rule is extracted and processed to generate the display. For example the display can be organized into an array of rule data that can be sorted on each field with the fields corresponding to the display columns of the interface such as . User input such as selection of a column for sorting is then received . If the user input is a selection of where a rule is used as determined at then the database is accessed to identify information about the playbooks and plays where the rule is used to present the interface shown in . Otherwise the system continues to process input and can update the display accordingly If more input is provided as determined at the system continues to process the input until the user otherwise exits the interface.

Having now described an example implementation of a rules library for a computerized sales playbook system a computing environment for supporting such a system will now be described. Such a computing environment can include numerous general purpose or special purpose computing hardware configurations. Examples of well known computing devices which can be microprocessor based systems or multiprocessor systems for example include but are not limited to personal computers server computers hand held computing devices for example media players cellular phones personal data assistants voice recorders laptop computers notebook computers set top boxes game consoles programmable consumer electronics network computers minicomputers mainframe computers distributed computing environments that include any of the above devices and the like.

In client devices and connect to a computer network such as the internet. A client device can be for example a typical personal computer laptop computer notebook computer tablet device mobile phone or smartphone with a variety of possible input devices and output devices.

A hosting server for the computerized playbook system is connected to the computer network . The hosting server accesses a database that stores the rules library and playbook data. The rules library and playbook data may be stored in two separate schemas in the database . A user accesses the hosting server through a host application not shown such as an internet browser running on the client device. After logging in by providing appropriate credentials a user is provided various interfaces by the hosting server for accessing the playbook data and rules such as the interfaces described above.

Similarly a hosting server for a customer relationship management CRM system is connected to the computer network . This hosting server accesses a database that stores CRM data. A user also accesses this hosting server through a host application not shown such as an internet browser running on the client device.

An application programming interface API can connect the hosting server for playbook system to the hosting server for the CRM system. This API can be used as described above to allow the playbook system to access CRM data for use in the sales playbook system such as for creating content defining rules and the like. Other programs such as those that implement data analyses can be added to the system to enable users to measure the effectiveness of rules.

An example computing machine that can be used in such a networked environment to implement all or part of this rules library system will now be described. A computing machine typically includes at least one processing unit and memory. The computing machine may include multiple processing units and or additional co processing units such as a graphics processing unit GPU . Memory may be volatile such as RAM non volatile such as ROM flash memory etc. or some combination of the two. A computing machine may include persistent storage which can be removable or non removable example of which include but are not limited to magnetic or optical disks or tape.

Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer program instructions data structures program modules or other data. Memory removable storage and non removable storage are all examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can accessed by a computing machine. Any such computer storage media may be part of the computing machine.

A computing machine also may have communications connection s that allow the computing machine to communicate with other devices over communication media. Communication media typically transmits computer program instructions data structures program modules or other data between storage in one device to storage in another device. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

A computing machine also has one or more input devices. Example input devices include but are not limited to a keyboard mouse touch input device camera and so on. A computing machine also has one or more output devices. Example output devices include but are not limited to a display speakers a printer and so on. Such devices are well known in the art and are therefore not discussed at length here.

The rules library is generally implemented in such an environment using computer programs which include computer executable instructions and or computer interpreted instructions such as program modules being processed by a computing machine. Generally program modules include routines programs objects components data structures and so on that when processed by a processing unit instruct the processing unit to manipulate data in memory to implement data structures or to process data into another form or representation according to defined operations. Such instructions generally are stored in and read from computer readable storage media by a processing unit.

It should be understood that the subject matter defined in the appended claims is not limited to the specific implementations described above. The specific implementations described above are presented as examples only.

