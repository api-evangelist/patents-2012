---

title: Apparatus and method for testing conformance of service choreography
abstract: An apparatus and method for testing conformance of service choreography are provided. The apparatus for testing conformance of service choreography analyzes an architecture and an operation between web services cooperating on a distributed network to test conformance of a choreography application into which the web services are combined, on the basis of a service choreography specification.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09170923&OS=09170923&RS=09170923
owner: Electronics and Telecommunications Research Institute
number: 09170923
owner_city: Daejeon
owner_country: KR
publication_date: 20120914
---
This application claims the benefit under 35 U.S.C. 119 a of Korean Patent Application No. 10 2011 0143557 filed on Dec. 27 2011 the entire disclosure of which is incorporated herein by reference for all purposes.

The following description relates to a consumer oriented convergence service technology based on a network and more particularly to a technology for testing conformance of service choreography.

Web services operate independently in a network and provide data and service to an application in units of a logical function. Communication between a web service and an application is performed with a data format and a standardized web protocol such as hypertext transport protocol HTTP extensible markup language XML simple object access protocol SOAP or representational state transfer REST . Therefore data flow between all systems is smooth irrespective of a specific platform such as an operating system OS .

Web services can be provided separately but most web services provide a multiple business function in composition with other web services. A service composition type is categorized into orchestration and choreography according to a cooperation scheme between web services. The orchestration is a scheme in which there is an arbitrator among a plurality of cooperating web services and the arbitrator controls a workflow in a centralized scheme. The choreography is a scheme that controls a workflow between a plurality of cooperating web services without an arbitrator. Generally it is easy to select an arbitrator web service and thus the orchestration is used for composition of web services in one organization. The choreography is used for composition of cooperating web services in several business domains.

When developing a choreography application through choreography web services provided in different business domains are provided in only a black box type and thus it is difficult to determine an internal operation. Also since web services are respectively operated by different organizations it is required to perform a conformance test that checks an order in which a plurality of cooperating web services exchange messages and whether all web services participating in choreography well perform an expected operation overall on the basis of only specifications described in a prearranged protocol. Since the conformance test is a test that checks a desired function on the basis of specifications the conformance test is the most fundamental test that needs be performed prior to a performance test or an availability test.

U.S. Patent Publication No. 20070277158 discloses technology that changes a business process expressed as WSDL to an object oriented language element and performs a unit test. Korean Patent Publication No. 2004 0051876 discloses data generation technology of a single web service that relates to a web service test and a test method using WSDL.

The following description relates to an apparatus and method for testing conformance of service choreography which test whether a service choreography application for achieving a business purpose operates as per specifications according to a prearranged protocol through cooperation of web services on a distributed network.

In one general aspect a method of testing conformance of service choreography includes analyzing an architecture and an operation between web services cooperating on a distributed network to test conformance of a choreography application into which the web services are combined on the basis of a service choreography specification.

In another general aspect an apparatus for testing conformance of service choreography includes a test model and test architecture changer configured to change a service choreography specification to a test model and a test architecture a test scenario generator configured to generate a test scenario in consideration of a coverage of the test model and the test architecture and a test executor configured to execute the test scenario in the test architecture to test the web services.

Other features and aspects will be apparent from the following detailed description the drawings and the claims.

Throughout the drawings and the detailed description unless otherwise described the same drawing reference numerals will be understood to refer to the same elements features and structures. The relative size and depiction of these elements may be exaggerated for clarity illustration and convenience.

Hereinafter embodiments of the present invention will be described in detail with reference to the accompanying drawings. In the following description when the detailed description of the relevant known function or configuration is determined to unnecessarily obscure the important point of the present invention the detailed description will be omitted. Moreover the terms that have been defined as described above may be altered according to the intent of a user or operator or conventional practice. Therefore the terms should be defined on the basis of the entire content of this specification.

Referring to the apparatus for testing conformance of service choreography hereinafter referred to as a conformance tester includes a test model and test architecture changer a test scenario generator and a test executor .

The test model and test architecture changer changes a service choreography specification to a test model and a test architecture . The service choreography specification may be described in a web service choreography definition language WS CDL . The WS CDL is a specification language that has been recommended by the World Wide Web Consortium W3C as standard for describing service choreography.

The test model may be a global extended finite state machine EFSM . The test architecture includes a tester and a test monitor. The tester executes a test scenario. The test monitor is disposed in a message link that connects a plurality of web services disposed at different positions physically. The test monitor includes a point of observation PO apparatus that monitors the content of a message transmitted and received between web services and a point of control and observation PCO apparatus that corrects a web service message.

According to an embodiment the test model and test architecture changer extracts an operational function from the service choreography specification and changes the extracted function to a test model. Also the test model and test architecture changer extracts an architecture function from the service choreography specification and changes the extracted function to a test architecture. The operational function includes a message exchange interaction between web services and a message data format. The architecture function includes a role between the web services and an interaction between the web services.

The test scenario generator generates a test scenario in consideration of a coverage of the test model and the test architecture . The test scenario represents a test sequence that is generated according to the test architecture .

The test executor executes the test scenario in the test architecture to test web services thereby obtaining a test result . According to an embodiment the test executor executes the test scenario with the tester and monitors whether a web service message transmitted and received between web services satisfies an input output value and a message procedure described in the test scenario with the test monitor.

Referring to the conformance test apparatus analyzes an interaction architecture of web services cooperating on a distributed network and a control flow and data flow of a message transmitted and received between the web services to thereby test conformance of a choreography application into which a plurality of web services are combined on the basis of the service choreography specification. To this end a process of testing conformance of service choreography is broadly divided into three stages and .

In a first stage the conformance test apparatus changes the service choreography specification to the test model and the test architecture with the test model and test architecture changer . The service choreography specification may be described in the WS CDL. The WS CDL includes a part 1 that describes a dynamic behavior side such as a message exchange interaction sequence between web services that participates in composition and have the same level a part 2 that describes a message data format and a part 3 that describes a static side such as a role and an interaction relationship between participating web services.

The test model and test architecture changer changes a part associated with the part 1 and part 2 of the WS CDL to a global EFSM test model. The global EFSM test model represents a control flow and data flow of a message exchange sequence between web services participating in the choreography application in an overall perspective. The global EFSM test model is configured with a state a transition an input event an output event and a variable. When the input event or the output event occurs a certain state is changed to a different state.

The test model and test architecture changer changes a part associated with the part 3 of the WS CDL to the test architecture . The test architecture includes the tester and the test monitor. The tester executes a test scenario. The test monitor is disposed at the message link that connects a plurality of web services disposed at different positions physically. The test monitor includes the PO apparatus that checks the content of a message transmitted and received between web services and the PCO apparatus that corrects a web service message.

Among processes of the first stage a process that changes the operational function of the WS CDL to the global EFSM test model will be described below with reference to and a process that changes the architecture function of the WS CDL to the test architecture will be described below with reference to .

In a second stage the test scenario generator of the conformance test apparatus receives the global EFSM test model and the test architecture that are generated by the test model and test architecture changer and generates the test scenario in consideration of both a coverage of the test model and the test architecture . The test scenario may be a set of scenarios.

Unlike a conformance test for a single web service the conformance test apparatus dynamically monitors a message exchange sequence between web services cooperating independently on the distributed network to thereby determine a test result while performing the test scenario by using the test executor . To this end the test scenario generator needs to generate the test scenarios in consideration of the test model and consider the coverage of the test model .

According to an embodiment the test scenario generator selects a test model coverage according to a traversal reverence visiting all transitions that connect states between the global EFSM test model on the basis of a control flow coverage. According to another embodiment the test scenario generator selects a test model coverage according to a reference traversing a path that connects a state defined for all variables used in the global EFSM test model and a state where a corresponding variable has been used on the basis of a data flow coverage.

In a third stage the test executor executes the test scenario generated by the test scenario generator to determine a test result under the test architecture changed by the test model and test architecture changer . When an error occurs the test executor analyzes the cause of the error.

As an example of the test result determined by the test executor the test executor determines the test result in consideration of both a response message which the tester receives from a web service and a message transmitted and received between web services which the test monitor monitors. For example when both a response message the tester receives and a message processing result between web services sensed by the PO apparatus and the PCO apparatus pass a final pass is determined but when at least one of the response message and the message processing result do not pass a final failure is determined. The failure includes a case in which a message expected in the test scenario is not received and a different message is received or an abnormal end is performed.

When an error occurs it is not easy to determine which of web services participating in service choreography caused the error with no inspection other than the tester inspecting only a response message. The test executor checks a message link which is a communication line between web services with the test monitor when the test scenario is being executed. Therefore a web service causing an error can be easily determined.

Referring to the test model and test architecture changer extracts an operational function representing an order in which web services exchange messages in the service choreography and changes the extracted operational function to the global ESFM that enables the test scenario to be more easily generated.

To this end the test model and test architecture changer analyzes a WS CDL choreography specification described in extensible markup language XML to parse the XML which is an advance preparation operation that enables a change to the global EFSM model thereby performing a process that changes the WS CDL choreography specification to an internal material architecture in process .

When the WS CDL choreography specification has not a single choreography but a plurality of choreographies the test model and test architecture changer searches an uppermost level choreography and connects lower level choreographies that are in a call relationship with the uppermost level choreography thereby generating a choreography sequence list in process . In single choreography processes and where the test model and text architecture changer generates EFSM chor fragments for a plurality of choreographies and assembles the EFSM chor fragments are not performed.

Subsequently the test model and test architecture changer changes all activities included in respective choreographies of the choreography sequence list to the EFSM chor fragments in process .

The EFSM chor fragment is a global EFSM fragment in which a separate choreography spec has been changed to a portion of the EFSM test model. In this case a syntax related to a basic activity such as and included in choreography is changed to EFSM chor sub fragment. The sequence of EFSM chor sub fragments is arranged for a syntax related to a sequence control activity such as and using the basic activity and then the syntax is changed to EFSM chor fragment corresponding to one choreography spec.

Subsequently the EFSM chor fragment is an EFSM fragment of separate choreography and thus the text model and test architecture changer connects EFSM chor fragments of respective service choreographies to generate the global EFSM test model on the basis of the choreography sequence list in process .

Referring to the WS CDL specification describes which message and in which order and through which channel a web service performing a buyer function and a web service performing a seller function exchange. The present invention changes the WS CDL specification to the EFSM test model. In the EFSM test model the input event and the output event may be expressed in the following formats respectively.

As examples of the input event and the output event as illustrated in an output event Buyer.getQuote.Buyer2SellerC.QuoteRequest moving from a state S to a state S denotes that a buyer web service transmits QuoteRequest to getQuote operation through a channel called Buyer2SellerC in the state S and then moves to the state S. Such an event is respective activities being changed to EFSM fragments through WS CDL analysis.

Referring to the test model and test architecture changer analyzes the WS CDL to change the WS CDL to an internal material architecture in process . Then the test model and test architecture changer changes a web service which has been declared as in the changed internal material architecture to a web service under test hereinafter referred to as a WUT in process changes a name to a test interface of the WUT in process and connects web services having a relationship with the message link in process . In this case a web service performing a client role is replaced by the tester.

According to an additional aspect the test model and test architecture changer disposes the PO apparatus or the PCO apparatus in a channel that is an information exchange port between web services having the relationship and thus completes the change of a test architecture in process . The PO apparatus is disposed when intending to monitor a message transmitted from a message line between web services. The PCO apparatus is disposed when intending to monitor a message and moreover correcting and sending the message. It is obvious that the test architecture varies widely according to the number of channels requiring dynamic monitoring and a scheme in which the PC apparatus or the PCO apparatus is disposed in a corresponding channel.

Referring to an application under test AUT is a choreography application target and provides a desired function in cooperation with WUTs to to a client on a distributed network. The WUTs to may receive an inter web protocol for example SOAP message or respond to the received message through a test interface. The WUTs to are connected by a message link and a test monitor PO or PCO may be disposed in the message link. A tester performs a client role to execute a test scenario. When the test scenario is executed the PO apparatus monitors whether a web service message transmitted and received between the WUTs to satisfies an input output value and a message procedure described in the test scenario and the PCO apparatus corrects the web service message.

As illustrated in a test architecture including the test monitor PO or PCO accurately determines a message exchange sequence between web services when a test scenario is being executed and thus early detects the cause of an error by using the PO apparatus or the PCO apparatus compared to a test architecture having a single tester.

The test architecture having the single tester is capable of determining conformance only when an initial request message passes through a plurality of cooperating web services and then a final response is received in which case it is still not easy to determine which web service causes an error. However according to the present invention when a response message to a request message transmitted to the tester is an abnormal error message the PO apparatus or PCO apparatus disposed in the message link dynamically monitors a message transmitted and received between web services and thus a web service having a malfunction that causes an error can be easily detected. For example as illustrated in by monitoring a message transmitted and received between the WUT1 and the WUT2 and a message transmitted and received between the WUT1 and the WUT3 a web service having a malfunction that causes an error is detected from among Bridge Call of the WUT1 Third Party Call of the WUT2 and Audio Call of the WUT3 .

Referring to a test scenario is a test sequence that is generated according to a test architecture and for example is as follows.

where PO1 is an apparatus that monitors a message line connecting the WUT1 and WUT2 of and PO2 is an apparatus that monitors a message line connecting the WUT1 and WUT3 of .

The test scenario denotes that when a tester transmits a SetupCallRq message the PO1 receives a MakeCallRq message the PO2 receives an AddCallRq message and finally the tester receives the SetupCallRq message.

The above described test scenario is obtained in the following sequence. First the test scenario generator selects a test coverage that traverses the global EFSM test model in process . The test coverage may be selected according to a reverence traversing all transitions that connect states of the global EFSM test model on the basis of a control flow. Alternatively the test coverage may be selected according to a reference traversing a path that connects a state defined for all variables used in the global EFSM test model and a state where a corresponding variable has been used on the basis of a data flow.

Subsequently the test scenario generator calculates a global EFSM test path suitable for the test coverage in process . Then when the start state of the calculated test path does not start from an initial state the test scenario calculates a pre amble that is a shortest path from the initial state to the start state of the test path and adds the pre amble into a fore portion of the test path. Even when a final state of the calculated test path is not ended as the start state the test scenario generator adds a post amble which is a shortest path from the final state to the initial state into the test path in process .

Subsequently when the test path with the pre amble and post amble added therein is a path through which the PO apparatus or the PCO apparatus passes in a test architecture the test scenario generator combines a test path and a test architecture to generate a test scenario in process .

According to the embodiments of the present invention it is easy to determine whether web services cooperating on a distributed network operate normally overall or separately. That is on the basis of the service choreography specification by analyzing an architecture and an operation between the web services cooperating on the distributed network and testing conformance of the choreography application into which web services are combined a web service having a malfunction that causes an error can be easily checked.

Moreover the present invention automatically generates a service test scenario from the service choreography specification executes the test scenario in the test architecture to monitor and control dynamic message exchange between web services and thus can easily pre detect the cause of an error compared to a test scheme using only a single tester.

Furthermore the present invention generates the systematized and automated test scenario quickly analyzes an error using the test architecture minutely checks a coverage with the global EFSM test model and thus can considerably reduce a time taken in testing conformance of service choreography for providing a high quality service choreography application.

A number of examples have been described above. Nevertheless it will be understood that various modifications may be made. For example suitable results may be achieved if the described techniques are performed in a different order and or if components in a described system architecture device or circuit are combined in a different manner and or replaced or supplemented by other components or their equivalents. Accordingly other implementations are within the scope of the following claims.

