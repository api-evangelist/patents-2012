---

title: Systems and methods for comparing configuration files and generating corrective commands
abstract: The present disclosure is directed to systems and methods of synchronizing a target configuration file of a target device with a source configuration file of a source device. A parser of a first device may group commands from a source configuration file of a source device into subsets of commands. Each subset of the subsets of commands may comprise commands uniquely identified by a common attribute. A configurator of the first device may load into memory a command from a target configuration file, the command having a first identifying attribute. The configurator may load into memory a subset of commands having a common identifying attribute that matches the first identifying attribute. The configurator may compare the command with each command in the loaded subset. The configurator may generate a command for the target device, to synchronize a portion of the target configuration file with the source configuration file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09088491&OS=09088491&RS=09088491
owner: CITRIX SYSTEMS, INC.
number: 09088491
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20120307
---
A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the file or records of the Patent and Trademark Office but otherwise reserves all copyright rights whatsoever.

The present application generally relates to data communication networks. In particular the present application relates to systems and methods for synchronizing configuration between two devices.

An application delivery controller may act as an intermediary between clients and servers. The application delivery controller may have multiple features for controlling or managing network traffic between the clients and servers. These features may be configured by an administrators. As the number of supported features of the application delivery controller grow the administrator performs or is responsible for more configuration. As the application delivery controller is deployed in more larger and different environments the use of the application delivery controller becomes more complex as well as its configuration. In many enterprise infrastructures multiple controllers may be deployed to handle different functionality. Each of these controllers may have a different configuration for which the administration maintains. An administrator of these application delivery controller may be challenged in configuring or maintaining a configuration of these controllers in any one or more environments.

The present solution allows a configuration of a network appliance to be updated or synchronized with another configuration which may be from another network appliance. With synchronization differences in configurations across two or more appliances may be determined and changes to configurations may automatically be distributed and applied on one or more appliances. In some embodiments a configuration update may be available for multi site deployment and synchronization. Some configurations may include many lines of commands or configuration statements such that significant amounts of memory are needed to update these configurations or synchronize them with another configuration. The present solution provides a relatively scalable method that makes efficient use of memory.

In one aspect the present disclosure is directed to a method of synchronizing a target configuration file of a target device with a source configuration file of a source device. A parser of a first device may group a plurality of commands from a source configuration file of a source device into subsets of commands. Each subset of the subsets of commands may comprise commands uniquely identified by a common attribute. A configurator of the first device may load into memory a command from a target configuration file of a target device the command having a first identifying attribute. The configurator may load into memory one of the subsets of commands having a common identifying attribute that matches the first identifying attribute. The configurator may compare the command from the target configuration file with each command in the loaded subset of commands. The configurator may generate one or more commands for execution on the target device to synchronize a portion of the target configuration file corresponding to the command compared with the source configuration file.

The parser may write the subsets of commands into an index file each subset of commands indexed by a corresponding identifying attribute. The configurator may locate the subset of commands within the index file by matching the first identifying attribute against the indexed attributes. The configurator may identify the command from the target configuration file as comprising a command that has not been compared for synchronization with the source configuration file. The configurator may load the command into the memory without loading other commands from the target configuration file into the memory. The configurator may load the subset of commands into the memory without loading other subsets into the memory. The configurator may match the command from the target configuration with each command in the subset by comparing each argument of the respective command.

The configurator may delete or mark the subset of commands in the index list responsive to generating the one or more commands for execution on the target device. The configurator may remove from the memory the i command from the target configuration file and ii the subset of commands responsive to generating the one or more commands for execution on the target device. In some scenarios the target device may comprise the first device.

In another aspect the present disclosure is directed to a system of synchronizing a target configuration file of a target device with a source configuration file of a source device. A parser of a first device may group a plurality of commands from a source configuration file of a source device into subsets of commands. Each subset of the subsets of commands may comprise commands uniquely identified by a common attribute. A configurator of the first device may load into memory a command from a target configuration file of a target device the command having a first identifying attribute. The configurator may load into memory one of the subsets of commands having a common identifying attribute that matches the first identifying attribute. The configurator may compare the command from the target configuration file with each command in the loaded subset of commands. The configurator may generate one or more commands for execution on the target device to synchronize a portion of the target configuration file corresponding to the command compared with the source configuration file.

The parser may write the subsets of commands into an index file each subset of commands indexed by a corresponding identifying attribute. The configurator may locate the subset of commands within the index file by matching the first identifying attribute against the indexed attributes. The configurator may identify a command from the target configuration file that has not been compared for synchronization with the source configuration file. The configurator may load the command into the memory without loading other commands from the target configuration file into the memory. The configurator may load the subset of commands from the source configuration file into the memory without loading other subsets into the memory. The configurator may match the command from the target configuration with each command in the subset by comparing each argument of the respective command.

The configurator may delete or mark corresponding entries in the index list responsive to generating the one or more commands for execution on the target device. These entries may correspond to the loaded subset of commands. These entries may include information for identifying the subset of commands e.g. op ot startPoint endPoint and an is Processed flag. The configurator may remove from the memory the i command from the target configuration file and ii the subset of commands responsive to generating the one or more commands for execution on the target device. In some scenarios the target device may comprise the first device.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

For purposes of reading the description of the various embodiments below the following descriptions of the sections of the specification and their respective contents may be helpful 

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In some embodiments the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. In other embodiments the appliance includes any of the product embodiments referred to as WebAccelerator and BigIP manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the DX acceleration device platforms and or the SSL VPN series of devices such as SA 700 SA 2000 SA 4000 and SA 6000 devices manufactured by Juniper Networks Inc. of Sunnyvale Calif. In yet another embodiment the appliance includes any application acceleration and or security related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco ACE Application Control Engine Module service software and network modules and Cisco AVS Series Application Velocity System.

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to an embodiment of a network environment deploying multiple appliances is depicted. A first appliance may be deployed on a first network and a second appliance on a second network . For example a corporate enterprise may deploy a first appliance at a branch office and a second appliance at a data center. In another embodiment the first appliance and second appliance are deployed on the same network or network . For example a first appliance may be deployed for a first server farm and a second appliance may be deployed for a second server farm . In another example a first appliance may be deployed at a first branch office while the second appliance is deployed at a second branch office . In some embodiments the first appliance and second appliance work in cooperation or in conjunction with each other to accelerate network traffic or the delivery of application and data between a client and a server.

Referring now to another embodiment of a network environment deploying the appliance with one or more other types of appliances such as between one or more WAN optimization appliance is depicted. For example a first WAN optimization appliance is shown between networks and and s second WAN optimization appliance may be deployed between the appliance and one or more servers . By way of example a corporate enterprise may deploy a first WAN optimization appliance at a branch office and a second WAN optimization appliance at a data center. In some embodiments the appliance may be located on network . In other embodiments the appliance may be located on network . In some embodiments the appliance may be located on network or network . In one embodiment the appliance and are on the same network. In another embodiment the appliance and are on different networks. In another example a first WAN optimization appliance may be deployed for a first server farm and a second WAN optimization appliance for a second server farm .

In one embodiment the appliance is a device for accelerating optimizing or otherwise improving the performance operation or quality of service of any type and form of network traffic such as traffic to and or from a WAN connection. In some embodiments the appliance is a performance enhancing proxy. In other embodiments the appliance is any type and form of WAN optimization or acceleration device sometimes also referred to as a WAN optimization controller. In one embodiment the appliance is any of the product embodiments referred to as WANScaler manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In other embodiments the appliance includes any of the product embodiments referred to as BIG IP link controller and WANjet manufactured by F5 Networks Inc. of Seattle Wash. In another embodiment the appliance includes any of the WX and WXC WAN acceleration device platforms manufactured by Juniper Networks Inc. of Sunnyvale Calif. In some embodiments the appliance includes any of the steelhead line of WAN optimization appliances manufactured by Riverbed Technology of San Francisco Calif. In other embodiments the appliance includes any of the WAN related devices manufactured by Expand Networks Inc. of Roseland N.J. In one embodiment the appliance includes any of the WAN related appliances manufactured by Packeteer Inc. of Cupertino Calif. such as the PacketShaper iShared and SkyX product embodiments provided by Packeteer. In yet another embodiment the appliance includes any WAN related appliances and or software manufactured by Cisco Systems Inc. of San Jose Calif. such as the Cisco Wide Area Network Application Services software and network modules and Wide Area Network engine appliances.

In one embodiment the appliance provides application and data acceleration services for branch office or remote offices. In one embodiment the appliance includes optimization of Wide Area File Services WAFS . In another embodiment the appliance accelerates the delivery of files such as via the Common Internet File System CIFS protocol. In other embodiments the appliance provides caching in memory and or storage to accelerate delivery of applications and data. In one embodiment the appliance provides compression of network traffic at any level of the network stack or at any protocol or network layer. In another embodiment the appliance provides transport layer protocol optimizations flow control performance enhancements or modifications and or management to accelerate delivery of applications and data over a WAN connection. For example in one embodiment the appliance provides Transport Control Protocol TCP optimizations. In other embodiments the appliance provides optimizations flow control performance enhancements or modifications and or management for any session or application layer protocol.

In another embodiment the appliance encoded any type and form of data or information into custom or standard TCP and or IP header fields or option fields of network packet to announce presence functionality or capability to another appliance . In another embodiment an appliance may communicate with another appliance using data encoded in both TCP and or IP header fields or options. For example the appliance may use TCP option s or IP header fields or options to communicate one or more parameters to be used by the appliances in performing functionality such as WAN acceleration or for working in conjunction with each other.

In some embodiments the appliance preserves any of the information encoded in TCP and or IP header and or option fields communicated between appliances and . For example the appliance may terminate a transport layer connection traversing the appliance such as a transport layer connection from between a client and a server traversing appliances and . In one embodiment the appliance identifies and preserves any encoded information in a transport layer packet transmitted by a first appliance via a first transport layer connection and communicates a transport layer packet with the encoded information to a second appliance via a second transport layer connection.

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

Still referring to an embodiment of the network environment may include a monitoring server A. The monitoring server A may include any type and form performance monitoring service . The performance monitoring service may include monitoring measurement and or management software and or hardware including data collection aggregation analysis management and reporting. In one embodiment the performance monitoring service includes one or more monitoring agents . The monitoring agent includes any software hardware or combination thereof for performing monitoring measurement and data collection activities on a device such as a client server or an appliance . In some embodiments the monitoring agent includes any type and form of script such as Visual Basic script or Javascript. In one embodiment the monitoring agent executes transparently to any application and or user of the device. In some embodiments the monitoring agent is installed and operated unobtrusively to the application or client. In yet another embodiment the monitoring agent is installed and operated without any instrumentation for the application or device.

In some embodiments the monitoring agent monitors measures and collects data on a predetermined frequency. In other embodiments the monitoring agent monitors measures and collects data based upon detection of any type and form of event. For example the monitoring agent may collect data upon detection of a request for a web page or receipt of an HTTP response. In another example the monitoring agent may collect data upon detection of any user input events such as a mouse click. The monitoring agent may report or provide any monitored measured or collected data to the monitoring service . In one embodiment the monitoring agent transmits information to the monitoring service according to a schedule or a predetermined frequency. In another embodiment the monitoring agent transmits information to the monitoring service upon detection of an event.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of any network resource or network infrastructure element such as a client server server farm appliance appliance or network connection. In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any transport layer connection such as a TCP or UDP connection. In another embodiment the monitoring service and or monitoring agent monitors and measures network latency. In yet one embodiment the monitoring service and or monitoring agent monitors and measures bandwidth utilization.

In other embodiments the monitoring service and or monitoring agent monitors and measures end user response times. In some embodiments the monitoring service performs monitoring and performance measurement of an application. In another embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of any session or connection to the application. In one embodiment the monitoring service and or monitoring agent monitors and measures performance of a browser. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of HTTP based transactions. In some embodiments the monitoring service and or monitoring agent monitors and measures performance of a Voice over IP VoIP application or session. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of a remote display protocol application such as an ICA client or RDP client. In yet another embodiment the monitoring service and or monitoring agent monitors and measures performance of any type and form of streaming media. In still a further embodiment the monitoring service and or monitoring agent monitors and measures performance of a hosted application or a Software As A Service SaaS delivery model.

In some embodiments the monitoring service and or monitoring agent performs monitoring and performance measurement of one or more transactions requests or responses related to application. In other embodiments the monitoring service and or monitoring agent monitors and measures any portion of an application layer stack such as any .NET or J2EE calls. In one embodiment the monitoring service and or monitoring agent monitors and measures database or SQL transactions. In yet another embodiment the monitoring service and or monitoring agent monitors and measures any method function or application programming interface API call.

In one embodiment the monitoring service and or monitoring agent performs monitoring and performance measurement of a delivery of application and or data from a server to a client via one or more appliances such as appliance and or appliance . In some embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a virtualized application. In other embodiments the monitoring service and or monitoring agent monitors and measures performance of delivery of a streaming application. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of delivery of a desktop application to a client and or the execution of the desktop application on the client. In another embodiment the monitoring service and or monitoring agent monitors and measures performance of a client server application.

In one embodiment the monitoring service and or monitoring agent is designed and constructed to provide application performance management for the application delivery system . For example the monitoring service and or monitoring agent may monitor measure and manage the performance of the delivery of applications via the Citrix Presentation Server. In this example the monitoring service and or monitoring agent monitors individual ICA sessions. The monitoring service and or monitoring agent may measure the total and per session system resource usage as well as application and networking performance. The monitoring service and or monitoring agent may identify the active servers for a given user and or user session. In some embodiments the monitoring service and or monitoring agent monitors back end connections between the application delivery system and an application and or database server. The monitoring service and or monitoring agent may measure network latency delay and volume per user session or ICA session.

In some embodiments the monitoring service and or monitoring agent measures and monitors memory usage for the application delivery system such as total memory usage per user session and or per process. In other embodiments the monitoring service and or monitoring agent measures and monitors CPU usage the application delivery system such as total CPU usage per user session and or per process. In another embodiments the monitoring service and or monitoring agent measures and monitors the time required to log in to an application a server or the application delivery system such as Citrix Presentation Server. In one embodiment the monitoring service and or monitoring agent measures and monitors the duration a user is logged into an application a server or the application delivery system . In some embodiments the monitoring service and or monitoring agent measures and monitors active and inactive session counts for an application server or application delivery system session. In yet another embodiment the monitoring service and or monitoring agent measures and monitors user session latency.

In yet further embodiments the monitoring service and or monitoring agent measures and monitors measures and monitors any type and form of server metrics. In one embodiment the monitoring service and or monitoring agent measures and monitors metrics related to system memory CPU usage and disk storage. In another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to page faults such as page faults per second. In other embodiments the monitoring service and or monitoring agent measures and monitors round trip time metrics. In yet another embodiment the monitoring service and or monitoring agent measures and monitors metrics related to application crashes errors and or hangs.

In some embodiments the monitoring service and monitoring agent includes any of the product embodiments referred to as EdgeSight manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. In another embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TrueView product suite manufactured by the Symphoniq Corporation of Palo Alto Calif. In one embodiment the performance monitoring service and or monitoring agent includes any portion of the product embodiments referred to as the TeaLeaf CX product suite manufactured by the TeaLeaf Technology Inc. of San Francisco Calif. In other embodiments the performance monitoring service and or monitoring agent includes any portion of the business service management products such as the BMC Performance Manager and Patrol products manufactured by BMC Software Inc. of Houston Tex.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may be have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of Unix operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the application . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and a second network . In some embodiments the device terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the device may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer 2 7 integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the device . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element may comprise a data object in memory of device . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the device such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identifying specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the Encryption processor . In other embodiments the encryption engine comprises executable instructions running on the Encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer 2 7 integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer 2 7 integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packer. Additionally the high speed layer 2 7 integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer 2 7 integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer 2 7 integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming e.g. received or outgoing e.g. transmitted network packets. In some embodiments the high speed layer 2 7 integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2 7 integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer 2 7 integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer 2 7 integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance and either is user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to another embodiment of the appliance is depicted. In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a VServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client . In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer 4 or application layer request data. In one embodiment although the network layer or layer 2 of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Still referring to the appliance may include a performance monitoring agent as discussed above in conjunction with . In one embodiment the appliance receives the monitoring agent from the monitoring service or monitoring server as depicted in . In some embodiments the appliance stores the monitoring agent in storage such as disk for delivery to any client or server in communication with the appliance . For example in one embodiment the appliance transmits the monitoring agent to a client upon receiving a request to establish a transport layer connection. In other embodiments the appliance transmits the monitoring agent upon establishing the transport layer connection with the client . In another embodiment the appliance transmits the monitoring agent to the client upon intercepting or detecting a request for a web page. In yet another embodiment the appliance transmits the monitoring agent to a client or a server in response to a request from the monitoring server . In one embodiment the appliance transmits the monitoring agent to a second appliance or appliance .

In other embodiments the appliance executes the monitoring agent . In one embodiment the monitoring agent measures and monitors the performance of any application program process service task or thread executing on the appliance . For example the monitoring agent may monitor and measure performance and operation of vServers A N. In another embodiment the monitoring agent measures and monitors the performance of any transport layer connections of the appliance . In some embodiments the monitoring agent measures and monitors the performance of any user sessions traversing the appliance . In one embodiment the monitoring agent measures and monitors the performance of any virtual private network connections and or sessions traversing the appliance such an SSL VPN session. In still further embodiments the monitoring agent measures and monitors the memory CPU and disk usage and performance of the appliance . In yet another embodiment the monitoring agent measures and monitors the performance of any acceleration technique performed by the appliance such as SSL offloading connection pooling and multiplexing caching and compression. In some embodiments the monitoring agent measures and monitors the performance of any load balancing and or content switching performed by the appliance . In other embodiments the monitoring agent measures and monitors the performance of application firewall protection and processing performed by the appliance .

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers 5 7. In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers 1 4. Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a min filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client a collection agent and or monitoring agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager. Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as a payload of a network packet of the transport layer protocol.

The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments the client agent includes a monitoring agent as discussed in conjunction with . The monitoring agent may be any type and form of script such as Visual Basic or Java script. In one embodiment the monitoring agent monitors and measures performance of any portion of the client agent . For example in some embodiments the monitoring agent monitors and measures performance of the acceleration program . In another embodiment the monitoring agent monitors and measures performance of the streaming client . In other embodiments the monitoring agent monitors and measures performance of the collection agent . In still another embodiment the monitoring agent monitors and measures performance of the interceptor . In some embodiments the monitoring agent monitors and measures any resource of the client such as memory CPU and disk.

The monitoring agent may monitor and measure performance of any application of the client. In one embodiment the monitoring agent monitors and measures performance of a browser on the client . In some embodiments the monitoring agent monitors and measures performance of any application delivered via the client agent . In other embodiments the monitoring agent measures and monitors end user response times for an application such as web based or HTTP response times. The monitoring agent may monitor and measure performance of an ICA or RDP client. In another embodiment the monitoring agent measures and monitors metrics for a user session or application session. In some embodiments monitoring agent measures and monitors an ICA or RDP session. In one embodiment the monitoring agent measures and monitors the performance of the appliance in accelerating delivery of an application and or data to the client .

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

Referring now to an embodiment of an environment of a multi site deployment of appliances is depicted. In brief overview the deployment may include a plurality of sites such as Site A Site B Site C Site D Site and Site F. Each of the sites may include one or more appliances A F. A client may access or communicate with any one or more servers via any one or more appliances. Each of these appliances may provide any type and form of services control or management of the client s access to one or more servers A N. Any of the appliances may communicate with any other appliance or a client via one or more networks .

In further details of the example embodiment of Site A comprises appliance A managing multiple servers server Svr A through server Svr A. Site B comprises appliance B managing multiple servers server Svr B through server Svr B. Site C comprises appliance C managing multiple servers server Svr C through server Svr C. Site D comprises appliance D managing multiple servers server Svr D through server Svr D. Site E comprises appliance E managing multiple servers server Svr E through server Svr E and Site F comprises appliance F managing multiple servers server Svr F through server Svr F.

In some embodiments the multi site deployment of may represent a global server load balancing GSLB deployment. One or more of the appliances may be configured or designed and constructed to provide global server load balancing and sometimes are referred to GSLB or GSLB appliances. A GSLB appliance may be designed and configured to received DNS requests from clients and resolve the domain name of the request to an internet protocol address of a selected appliance A F at any of the sites A F. In processing the DNS request the GSLB appliance may use any type and form of load balancing scheme to select a desired site and or appliance for processing or handling a client request. By way of example Site A appliance A and Site B appliance B may be configured as GSLB appliances which load balance clients and client request among Sites C D E and F and in some embodiments the appliances A and B also.

Any of the sites and appliances of the environment may be arranged configured or deployed in any type and form of hierarchical or parent child and or peer relationship. Any one appliance or site may be a peer to another appliance or site. For example appliance A may be a peer to appliance B for providing GSLB domain resolution services. Any one appliance or site may be a parent node of another appliance or site. For example appliance A at Site A may be a parent site or appliance to appliance D of Site D. Any one appliance or site may be a child node of another appliance or site. For example appliance F at Site F may be a child node to Site B and appliance B.

Each of the appliances may be configured the same or differently from any other appliance. In some embodiments multiple appliances providing GSLB domain name services may be configured the same. In other embodiments multiple appliances providing GSLB domain name servicing may be configured differently. A Site may have multiple appliances each appliance configured the same or differently. Appliances at one Site may be configured the same or differently as appliances at another site. In view of the functionality of an appliance previously described in connection with one appliance may be configured to provided acceleration and content switching while another appliance may be configured to provide AppFw and SSL VPN functionality. An appliance may be configured to provide the functionality of any of the embodiments of the appliance described herein such as in conjunction with . In some embodiments heterogeneous appliances may be deployed. For example a first appliance may be provided as a product of a first manufacturer and a second appliance may be provided as a product of second manufacturer. In other embodiments homogenous appliances may be deployed in which any version of the appliance is supplied by the same manufacturer. In some embodiments any combination of heterogeneous and homogenous appliances may be deployed.

Referring now to an embodiment of an appliance to provide a batchable and or hierarchical configuration of appliances in a multi site deployment is depicted. In brief overview the appliance A may comprise any embodiment of a vServer . The appliance and or vServer may be configured to provide GSLB services for a multi site deployment such as load balancing Site B and Site C via one or more networks . The appliance may include a configurator . The configurator may further include master slave identification a site hierarchy configuration and a distributor . Via the configurator the appliance may be identified as a master node by the master slave identifier . The appliance A may be configured to have a site hierarchy configuration comprising identification and configuration of all the nodes in the multi site deployment such as in . This site hierarchy configuration may be distributed applied or published to other appliances via a distributor .

In further details the configurator may comprise any type and form of function operations or logic for configuring a vServer . The configurator may comprise software hardware of any combination of software and hardware. The configurator may comprise an application program library script process service task thread or set of executable instructions. The configurator may comprise any type and form of user interface. In one embodiment the configurator comprises a command line interface. In another embodiment the configurator comprises a graphical user interface. In some embodiments the configurator comprises a graphical user interface and a command line interface. The configurator for example may include the CLI and or GUI of embodiments of the appliance described in conjunction with . In some embodiments the configurator is part of the vServer . In other embodiments the configurator interfaces to or communicates with vServer .

The configurator may configure any of the features operations or functionality of any of the embodiments of the appliance described herein. The configurator may establish and or configure one or more vServers of an appliance. The configurator may identify the servers and services that each vServer manages. In some embodiments the configurator establishes and configures a vServer to be a GSLB vServer that provides GSLB load balancing. The configurator may identify services provided via other appliances as a remote service of the GSLB server. In other embodiments the configurator establishes and configures a vServer to be a load balancing vServer such as for servers at a Site. The configurator may identify on the appliance the services of the servers managed by the appliance.

The configurator may configure a site hierarchy for a multi appliance or multi site deployment. The site hierarchy identify the relationships between sites and or appliances of sites in a multi site deployment such as for GSLB. For example the configurator may identify which appliances sometimes referred to nodes are parent child and or peer nodes. In some embodiments a user via the configurator identifies an appliance as a parent site. In some embodiments the user configures and identifies multiple parent sites. In some embodiments the user identifies and configures one or more peer nodes as the top of a hierarchy of sites. The user may further identify and configure child nodes to these top peer nodes which in turn may parent nodes to other appliances. In one embodiment the user identifies and configures one or more appliances as child nodes to any one or more parent nodes. In some of these embodiments the user identifies and configures a child node to be a parent to other children nodes. In some embodiments one or more parent nodes below the top nodes may also be peer nodes. In another embodiment one or more child nodes may also be peer nodes.

The site hierarchy may be defined specified or configured using any type and form of commands instructions or data. These command instructions or data may in a form readable accessible or otherwise understood by the appliance and or vServer. In some embodiments the site hierarchy comprises a set of configuration commands. In some embodiments the site hierarchy may comprise textual instructions and data. For example in one embodiment the site hierarchy is a file. In some embodiments the site hierarchy comprises a list of command line commands or instructions to be processed by a user interface such as CLI of the appliance. In another embodiment the site hierarchy comprises one or more scripts or executables. In some embodiments the site hierarchy references or includes a reference to any one or more files. In many embodiments the site hierarchy includes one or more application programming interface API calls. The site hierarchy may be batchable in that a single configuration or file may be executed run or established on a plurality of appliances.

The configurator may include any type and form of mechanism for identifying an appliance or vServer as a master node or slave node. The master identifier may include any configuration data setting flag or parameter providing an identification of master. In some embodiments a user may set a flag or parameter to identify the node as a master or slave. For example in one embodiment the user may selected a user interface element of a GUI to identify the appliance as a master. In another embodiment the user may pass a parameter value or set a flag on a command line command via the CLI to identify the node as master. In other embodiments the site hierarchy comprises data or configuration command to set a node as a master. In some embodiments if the appliance is not identified as a master node then by default and without specific identification the appliance may be a slave node. In another embodiment the appliance a user selects to perform the configuration for the multi site deployment may be considered the master. In some embodiments any of the peer GSLB nodes may be a master node. In another embodiment multiple nodes may be a master node. In some cases one node may be a backup master node to another node.

The distributor may comprise any logic operations or functionality to publish distribute or otherwise provide a configuration to an appliance. In some embodiments the distributor comprises any type and form of communication interface between appliances or between another computing device and the appliance. In some embodiments the distributor may download upload or file transfer a configuration file to an appliance. In other embodiments the distributor may email a configuration to a computing device or appliance. In some embodiments the distributor makes remote procedure calls such as remote shell calls from one appliance to another appliance to distribute the configuration. In another embodiments the distributor may write configuration to any type and form of computer readable medium. In another embodiments the configuration is distributed via a connection and a protocol supported by the appliances such as the Metric Exchange Protocol MEP described below. The distributor may distribute configuration via a secure call command or connection such as for example a secure SSH a secure copy SCP or a secure file transfer protocol SFTP .

The interface may comprise any logic operations or functionality to receive and apply configuration information. In some embodiments the interface may receive any configuration via a file. In another embodiment the interface may receive a configuration via a metric exchange connection. In some embodiments the interface may receive a configuration distributed by a distributor using any of the interface mechanism described above in conjunction with the distributor. In one embodiment the interface may receive or apply configuration via any type and form of remote command procedure or API calls. The interface may apply configuration to an appliance via a secure call command or connection such as for example a secure SSH a secure copy SCP or a secure file transfer protocol SFTP . In some embodiments the interface may received and apply configuration from a user via a graphical user interface or command line interface. In some embodiment the interface is separate and distinct from the distributor. In other embodiment the interface and distributor are combined into the same unit logic or functionality.

An appliance may communicate with another appliance via any type and form of protocol. In some embodiments and as illustrated in the appliances communicate using any form of a metric exchange protocol MEP such as the MEP protocol provided by NetScaler appliances manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. The metric exchange protocol may be any transport layer protocol any presentation layer protocol or any application layer protocol. In one embodiment the appliances uses a Simple Network Management Protocol SNMP for communications. In another embodiment the appliances use a common management information protocol CIMP . Any of these protocols may be used by the appliances to communicate exchange or provide any type and form of information data metrics and or statistics about the configuration performance and or operation of the appliance or any component thereof. In some embodiments the appliance with the lower internet protocol address initiates the connection or makes the connection request. In other embodiments the appliance with the higher internet protocol address initiates the connection or makes the connection request. In yet another embodiment the appliance identified first or identified as a parent initiates the connection or makes the connection request. In one embodiment the appliance identified as a child initiates or makes the connection request.

Referring now to an embodiment of a multi appliance and multi site deployment is depicted. In brief overview this multi site configuration is based on a peer to peer relationship among all of the sites and appliances. Site A and appliance A is a peer node to each of the appliances at Sites B F. Likewise each of Site B C D and F are peer nodes to the other sites. Each appliance at each site has a separate and distinct configuration A N. Based on the configuration and the peer to peer relationship each appliance establishes and has a metric exchange connection with each of the peer appliances. In this embodiment of a type of hierarchy and configuration all the appliances are communicating with and need to be configured to communicate with every other appliance.

In the example embodiment of each of the appliances have separate configuration. By way of example the following table shows a configuration or portion thereof to identify each of the sites and nodes in the hierarchy of the multi site deployment. The add command illustrated below has a syntax of 

This command adds a site to a gslb configuration and identifies the site by a site identifier and an internet protocol address. Any type and form of site identifier may be used including any text numerics or alphanumeric based characters. The IP address may be any desired or supported IP address available via the networks of the deployment.

Referring now to another embodiment of a multi site deployment is depicted. In this embodiment a centralized or single configuration is used to configure the site hierarchy of each appliance. In this manner each of the appliances may leverage a single configuration to identify and understand the site hierarchy. In brief over the site hierarchy of includes three peering Sites A B and C participating in GSLB. Sites D E and F comprises sites acting as child nodes to one of the peering nodes.

For the topology depicted in the site hierarchy configuration may use an option for defining a site called the parentSite . The parentSite identifies for a child node the site identifier of an established site the parent node. With this option a configuration can be created that will be batch able across all the sites.

With these options to identify nodes of a site hierarchy as peer child and or parent the same configuration provides the logical relationship between sites and provides all the appliances with a complete GSLB site topology. With this type of site hierarchy configuration each site knows which other sites to connect with. In some embodiments this site hierarchy configuration identifies the immediate sites an appliance may reach via a network to connect with. In some embodiments this type of site hierarchy configuration identifies those appliances or sits for received metrics or statistics via a metric exchange connection such as a particular GSLB service s statistics. With this type of site hierarchy configuration which is batchable in some embodiments there may be no change made by a an administrator to the configuration that is deployed. That is in some embodiments the same GSLB site hierarchy configuration is applied to all of the appliances in the topology.

As illustrated in the number of connections between appliances has been reduced. With the site hierarchy configuration identified the entire GSLB topology every site and appliance has knowledge of the total site topology. With this information an appliance may determine a desired or optimized metric exchange connectivity with other appliances. For example in some embodiments an appliance of child site only connects to an appliance of a parent site. In some embodiments a parent site connects to peers that are patents and to any direct children nodes.

In some embodiments a child site makes an metric exchange connection to a parent site. For example appliance E at Site E may provide statistics via a connection to patent site of appliance A of Site A. The GSLB vServer of appliance A may use these statistics to perform load balancing among the sites. In some embodiments the child site does connect to another child site. For example appliance E may not connect to appliance D. In one embodiment the child site does not accept any connections from a non parent Site. For example if appliance D attempts to connect to appliance E the appliance E may reject drop or otherwise not accept the connection request. In some embodiments the child site only accepts connections from a direct parent site. In other embodiments the child site accepts connections from another child site a peer site or an indirect parent site.

For GSLB load balancing statistics of the peer sites may be exchanged. For example in appliance A of Site and appliance B of Site B and appliance C of Site C each have a metric exchange connection to each other. For statistics of services on child sites of peers the parent sites provide this information. For example appliance A obtains statistics from child sites appliance D and appliance E. Appliance A exchanges with appliances B and C the statistics from appliances D and E. Likewise appliance C obtains statistics from appliance F and provides these statistics to appliances B and A. If a site or appliance does not identify a parent site in some embodiments the appliance identifies all sites as peers and connects to each of these sites. If none of the sites configured has a parentSite then all sites are considered as peers and every site has a metric exchange connection to the other.

In some embodiments the hierarchy may have any number of levels. In other embodiments the hierarchy may be limited to a predetermined number of levels. In one embodiments a site hierarchy may be limited to total number of 32 sites participating in GSLB. By way of an example embodiment the following are the characteristics of a site at a particular layer or level in the hierarchy.

Referring now to an embodiment of a method of deploying a site hierarchy via a batchable configuration to each of the appliances in a multi appliance deployment is depicted. In brief overview at step a GSLB site configuration is configured or provided on an appliance identified as a master node. At step each of the appliances in the multiple sites receives a copy of the GSLB site hierarchy configuration. At step each of the appliances apply the GSLB site hierarchy configuration and identify itself in the configuration. At step each of the appliances identifies peer information from the GSLB site hierarchical configuration and step each of the appliance identifies parent and child information from the GSLB site hierarchy configuration. At step appliances establish metric exchange connections responsive to the configuration.

In further details at step a user may configure any type and form of site hierarchy such as a GSLB site hierarchy on any appliance in a multi site deployment. A user may define or specify any topology for a GSLB site hierarchy with any combination of one or more peer sites parent sites and or child sites. In some embodiments the user defines a site hierarchy with a single top node. In other embodiments the user defines a site hierarchy with multiple peers nodes at the top of the hierarchy. The user may specify in the site hierarchy any number of levels of parent and child nodes. Each peer node may be a parent to any number of sites. Each site that is a child of a top node may also be parent node having any number of children and each child may further be a parent to any number of further children nodes.

A user such as an administrator may identify any appliance of any site as a master node for configuring the site hierarchy. In some embodiments the user identifies a top node as a master node. In another embodiment the user identifies an appliance that is a child of a parent site as the master node. In some embodiments the user identifies a plurality of appliances as master nodes. In some cases an appliance is designated as a backup master node. In some embodiments the user specifies via configuration of the appliance that the appliance is a master. In another embodiment an appliance is considered a master node because the user configures the site hierarchy on that appliance.

At step any of the other appliances in the site hierarchy may receive a copy of the site hierarchy from a user the master node or otherwise from another appliance. In some embodiments a user or the appliance may distribute the site hierarchy of the master node to each of the other appliances of the multi site deployment. In some embodiments the user transfers an electronic or computer readable copy of the site hierarchy via a computer readable medium from one appliance to another appliance. In one embodiment a user configures any other appliance via the configuration on that appliance such as via the CLI or GUI of the appliance. In another embodiment the user or the master node publishes or distributes the site hierarchy via the distributor . In some embodiments the user or the master node applies the site hierarchy to one or more appliances via the interface .

At step each of the appliances receiving the site hierarchy executes or otherwise applies the configuration. An interface on each appliance may receive the site hierarchy configuration and execute or apply each configuration command. The configurator on each appliance may receive and apply each configuration command of the site hierarchy configuration. In some embodiments the appliance or any portion thereof executes the site hierarchy configuration as a batchable script via the CLI of the appliance. In other embodiments the configuration executes the site hierarchy as a batchable set of configuration commands. For example either a CLI or GUI of the appliance may read in a site hierarchy configuration file and process each line in the file a configuration command. In some embodiments an API call to the configurator causes the configurator to apply each of the configuration commands in the site hierarchy configuration.

The appliance applying the configuration may determine or recognize any references to the site identifier supported hosted or otherwise provided via the appliance. The appliance may comprise any configuration that identifies an identifier of the site of the appliance. For example the appliance A of Site A may have an identifier of Site A configured for the appliance. In some embodiments the configurator or interface of the configuration when processing the site hierarchy configuration determines the one or more configuration commands that reference the site identifier configured for that appliance. In other embodiments the configurator or interface of the appliance determines any configuration commands in the site hierarchy that reference the IP address supported hosted or otherwise provided via the appliance. For example appliance C may recognize that IP address IP C is the IP address for itself when applying the site hierarchy configuration. In another embodiments the appliances may use a combination of site identifier and IP address to recognize the configuration commands reference itself. In any of these manners an appliance may determine where in the site hierarchy the appliance is configured based on the recognition of the appliances site identifier and or IP address.

Based on this and any of the other Site parent peer and or child information from the configuration the appliance may determine an entire topology of the site represented by the site hierarchy configuration. In some embodiments the appliance may determine based on order or location of configuration commands in the configuration the topology of the site. In some embodiments the appliance may determine via the configuration based on parameters or options of configuration commands or lack thereof the site topology. The appliance such as via configuration may store this site topology in any manner such as via data structures or files in memory or storage. In some embodiments the appliance uses a tree based data structure for representing the site hierarchy.

At step each of the appliances identifies any peer nodes from the configuration. During upon or after applying the site hierarchy configuration the appliance such as via configurator may determine the site identifier and or IP address of any peer nodes to itself. For example any top level GSLB site such as Sites A b and C in may determine the other Sites at the same level in the hierarchy. In some embodiments the appliance determines those Sites not identifying any parent sides as the top level peer nodes. An appliance at any level below the top level may identify other peer nodes such as child nodes which share the same parent node. Being full topology aware the appliance may configure perform or operate based on the topology. For example the appliance may monitor services based on the topology. In another example the appliance may establish and share metrics based on the topology.

At step each of the appliances identifies parent and or child information from the configuration. During upon or after applying the site hierarchy configuration the appliance such as via configurator may determine the site identifier and or IP address of any site identified as a parent. In some embodiments a direct parent of a site is identified via a configuration parameter such as for example parentSite. In some embodiments the appliance determines any site identified via a parent site identifier including those Sites which are not a direct parent to the current appliance. During upon or after applying the site hierarchy configuration the appliance such as via configurator may determine the site identifier and or IP address of any site identified or determined to be a child. For example an configuration command that specifies a parent Site may include a site identifier and or IP address of the node that is a child node.

At step each of the appliances established metric exchange connection responsive to the GSLB site hierarchy represented by the configuration. Upon applying the GSLB site hierarchy configuration to the appliances deployed for the multi sites each of the sites and appliances thereof have a representation of the entire topology. Based on the recognized topology and the configuration of the appliance each appliance may establish metric exchange connections with other appliances according to the site hierarchy. In some embodiments an appliance of a child site establishes a connection with an appliance of a parent site. In some embodiments an appliance of a parent Site establishes a connection with each child Site. In another embodiment each appliance of peer Sites establishes a connection with each peer. In some embodiments depending on and or responsive to the topology an appliance may not accept a connection from another appliance. For example an appliance of a child Site to a first parent site may not accept a connection from a child Site of a second parent site. In this manner the appliances for the multi site deployment may more efficiently establish metric exchange connections and share metrics in manner driven by the topology.

Referring now to systems and methods for synchronization configuration between appliances are depicted. A user driven approach may used to configure an appliance identified as a master node and synchronize that configuration of master node with other appliances. For example as described in connection a user may configure a site hierarchy . With the systems and methods of the user may synchronize each of the appliances of a multi site deployment to use the site hierarchy configuration of the master node.

In a general over this synchronization solution involves identifying a site as the master GSLB node. All the other nodes in the topology may automatically become slaves of this master node. The master node may get the currently running GSLB configuration of each of the slave nodes. For example the master node may be configured to login to each of the slave nodes. Each of these configuration are compared with the currently running configuration of the master node. The master node generates a configuration command set for each slave node that can be applied on the slave node to get the GSLB configuration of the slave the same as the master node. The master node then applies each of these generates configuration command sets to the corresponding slave node.

Referring now to an embodiment of an appliance for synchronizing a configuration between appliances in a multi appliance or multi site deployment is depicted. In brief overview appliances A N and N may be deployed in a multi site environment. Appliance A may be deployed at Site A while appliance B is deployed at Site B and appliance C at Site C. In this example embodiment appliance A may be designed via the master identifier as a master node. A user may configure a site hierarchy via the configuration . The interface of the configuration may obtain the configurations B C from each of appliance B and C. The comparator compares each of the received configurations B and C with the configuration of the master node. A generator responsive to the comparator generates a configuration command set B and C for each appliance. The master node A may apply via the interface each of these configuration command sets A N to the corresponding appliance to synchronize each slave appliance configuration with the master appliance configuration.

In further details the configurator may comprise any embodiments of the master slave mechanism site hierarchy and the interface described above in connection with .

In further embodiments the interface may be designed and constructed to authenticate and or login to an appliance using any authentication techniques and mechanism. In some embodiments the appliance may be configured to use a user identifier and password to login via the interface to another appliance such as via a second interface of a second appliance. In some embodiments an appliance is configured with a predetermined user id and password pair to use to login to another appliance. For example an appliance being logged into may include and identify a userid and password for any other appliance. In some embodiments to avoid providing a password by the master to login each time to a slave the appliances may have master slave pairs to auto login using any type and form of public key authentication methods. In some embodiments predetermined special or internal user ids may be used that do not have passwords.

In some embodiments the interface may comprise initiating or executing any type and form of script on an appliance. In some embodiments the interface may execute a perl awk or sed script. The interface may make any local or remote system calls such as via the script or via an API. The interface may make system calls to an operating system of the appliance. In some embodiments the interface may make an API call to any application or program of the appliance. In one embodiment the interface uses a remote CLI functionality to access and obtain information from a remote appliance. In some embodiments the configurator determinations that a slave or remote node is not to be synchronized. For example one site node specifies via configuration or metric exchange that is not selected to be part of a synchronization process. In some embodiments a site appliance may provide information indicating that the configuration on that appliance should not be changed. In one embodiment a site appliance may provide information indicating that synchronization of the configuration on that appliance should be skipped.

The configurator of the master node such as via the interface may automatically login to each slave node and use one or more remote calls such as SSH SFTP and or SCP to retrieve the configuration from the slave node. Likewise the configurator of the master node may automatically login to each slave node and via one or more remote calls such as SSH SFTP and or SCP apply an updated configuration to each slave node. The configurator may determine a list of appliances or sites to retrieve a configuration via the site hierarchy configuration . For example the configurator may access and or read from memory or storage the current site hierarchy configuration of the master node. In another embodiment the configurator may execute a command to output the locally running site configuration . The configuration may capture this output. The configurator may order the list of slave nodes for obtaining the configuration in any order. In some embodiments the configurator may enumerate the list of slave nodes by Site identifier and or IP address. In another embodiment the configurator may enumerate the list of slave nodes in accordance with the topology of the site such as top peer nodes first then child nodes of these top nodes next and so on.

With an enumerated list of slave nodes the configurator such as via the interface may login to each slave node and retrieve the current configuration. The configurator may obtain the userid and password or authentication credentials for a slave in the list. Each slave node may have the same or different credentials. Using the credentials the configurator ma login to the appliance of the slave node. The configurator may execute a command on the slave node to output or provide the current running configuration of the appliance. The configuration may transfer or copy the slave node s configuration to the master node. For example the configurator may execute a remote shell to output the GSLB site configuration of a remote node to a file and remote copy or file transfer the file to the master node.

The configurator may comprise any type and form of comparator for comparing one configuration to another configuration. The comparator may comprise any of the software and or hardware embodiments of the configurator described in conjunction with . The comparator may comprise logic functions or operations to perform a difference between each of the configuration commands of one configuration A to the configuration commands of a second configuration B. For example the comparator may perform a command by command comparison. In some embodiments the comparator identifies the configuration commands for a site in one configuration and compares the similarities and differences of the configurations commands for that site in a second configuration. The comparator may perform this comparison for each of the sites in the enumerated list of sites. In some embodiments the comparator determines the site topology of each of the configurations being compared and outputs differences between the site topologies. In some embodiments the comparator determines the site topology represented by each configuration and outputs those portions of the topology that are the same. In these embodiments the comparator may compare the topologies of each configuration such as via traversing any type and form of tree representation such as a linked list or data structure in memory. The comparator may output the results of the comparison in any form or format. In some embodiments the comparator produces a file of the differences and or similarities. In another embodiment the comparator provides a data structure or an object comprising information of the differences and or similarities. In some embodiments the comparator provides the differences or similarities in the form of a site configuration .

The configurator may comprise a generator that generates produces or provides a configuration command set A N to address any differences in configuration between compared configurations. The generator may comprise any of the software and or hardware embodiments of the configurator described in conjunction with . The generator may operate responsively to the comparator and or any output produced by the comparator. In some embodiments the generator operates responsively to any portion of the configurator such as the interface or a CLI or GUI.

The generator may generate any commands or instructions A N that changes one configuration to match or synchronize with another configuration. For example the generator may generate a set of configuration commands to change the configuration of a slave node to match or synchronize with the configuration of a master node. The generator may generate the configuration synchronization command set A N using the same command language syntax or format for the site hierarchy configuration . The generator may generates commands scripts or instructions as supported by the appliance. The command sets A N may be any type and form of script for example a script that may be executed via a CLI.

The commands sets may include any commands instructions or configuration to add sites remove sites and or change the configuration of a site or topology of the multi site hierarchy. The command sets may include any commands or instructions to change one or more parameters or options of a site configuration. The commands sets may include any instructions to halt operations while making the changes. The commands sets may include any instructions to backup or save copies of the current configuration. The commands sets may include any instructions to set a rollback point of the configuration. In some embodiments the commands set are designed and generated such that the result of running the command set is a currently running configuration of a slave node matching or corresponding to the currently running configuration of a master node. In some embodiments the commands set are designed and generated such that the result of running the command set is a currently running GSLB site hierarchy configuration of a slave node matching or corresponding to the currently running GSLB site hierarchy configuration of a master node.

Each of the command sets may be the same or different. In some embodiments each of the retrieved configurations of the slave nodes are different resulting in different command sets to synchronize each of the slave. In other embodiments each of the retrieved configurations of the slave nodes are the same resulting in the same command sets to synchronize each of the slave. In another embodiment some of the retrieved configurations of the slave nodes are the same and others are different resulting in some generated command sets being the same and other generated command sets being different.

The configurator via the interface may apply the configuration commands sets to each slave appliance to synchronize the configurations. In some embodiments the configurator synchronizes configurations responsive to the generator and or comparator. In other embodiments the configurator synchronizes configurations on a predetermined schedule. In some embodiments the configurator synchronizes configurations based on a request from a slave node. In another embodiment the configurator synchronizes configurations based on user input or responsive to a request of a user.

Referring now to an embodiment of steps of a method for synchronizing configurations between appliances is depicted. In brief overview at step a master node is identified and the master node logs in to slave nodes. At step the master node obtains the configuration from these appliances. At step the master node compares each of the obtained configurations to the configuration of the master node. At step the master node generates a configuration command set for each appliance based on the comparison. at step the master node applies each of the configuration commands to the corresponding appliances to synchronize configuration. At step each of the appliances operate with the synchronized configuration.

In further details at step a user such as an administrator may identify any appliance of any site as a master node for configuring the site hierarchy. In some embodiments the user identifies a top node as a master node. In another embodiment the user identifies an appliance that is a child of a parent site as the master node. In some embodiments the user identifies a plurality of appliances as master nodes. In some cases an appliance is designated as a backup master node. In some embodiments the user specifies via configuration of the appliance that the appliance is a master. In another embodiment an appliance is considered a master node because the user configures the site hierarchy on that appliance.

The master node may be configured with or operating any type of GSLB site hierarchy. The site hierarchy of the master node may define or specify any topology with any combination of one or more peer sites parent sites and or child sites. In some embodiments the user defines a site hierarchy with a single top node. In other embodiments the user defines a site hierarchy with multiple peers nodes at the top of the hierarchy. The user may specify in the site hierarchy any number of levels of parent and child nodes. Each peer node may be a parent to any number of sites. Each site that is a child of a top node may also be parent node having any number of children and each child may further be a parent to any number of further children nodes.

At step the master node may obtain site hierarchy configuration from one or more other appliances or slave nodes in the multi site deployed represented by the master node s site hierarchy. In some embodiments upon request of a user the master node identifies the appliances and sites in the master s nodes site hierarchy. The master node may automatically login to each appliance using any predetermined authentication scheme. The master node may execute any shell or command line commands to obtain a site hierarchy configuration of each of slave nodes and transfer or copy the configuration to the master node. In some embodiments the master node obtains these configurations concurrently. In other embodiments the master node obtains these configurations subsequently. The master node may uniquely identify and store each configuration from each slave node in memory or storage. In some embodiments the master node determines that one or more slave nodes should not be synchronized. For example configuration on the master node or slave node may identify that a configuration of a slave node should not be changed or the slave node is not participating in synchronization. Responsive to this identification any one or more steps of this method may be skipped or not performed.

At step the master node such as via the comparator compares each of the obtained slave node configurations with the master s node configuration. In some embodiments the master node performs this comparison upon receipt of the slave node s configuration. In other embodiments the master node performs this comparison upon receipt of configurations from all identified slave nodes. In one embodiment the master node performs the comparison with batches of a plurality of slave node configurations. In some embodiments the master node determines if any of the slave node s configuration are the same and responsive to the determination performs a comparison once for the common configuration.

At step the master node generates a configuration command set for each slave node configuration to synchronize the slave nodes configuration with the master nodes configuration. In some embodiments the generator of the master node generates a configuration command set responsive to comparison by the comparator. In other embodiments the generator of the master node generates a configuration command set for each slave node responsive to a user or user request.

At step the master node applies the commands sets to synchronize configuration at each corresponding slave node. In some embodiments the interface of master node applies the synchronization command sets responsive to the generator. In some embodiments the interface of the master node applies the synchronization commands set upon generation. In other embodiments the interface of the master node applies the synchronization command sets upon completion of comparison and or generation of all identified slave nodes configuration. In some embodiments the master node applies the synchronization command sets concurrently with each other. In other embodiments the master node applies the synchronization command sets subsequently to each other. In some embodiments the master node applies synchronization command sets in accordance with levels of the hierarchy starting from either the top node or a bottom leaf node.

At step as a result of completing the synchronization of configurations among the appliances in a multi site deployment each of the appliances operates with at least a same portion of the site hierarchy of the master node. In some embodiments each of the appliances operate with the same GSLB site hierarchy. In other embodiments some of the appliances operates with the same GSLB site hierarchy while some other appliances operate with a portion of the same GSLB site hierarchy. Responsive to the updates or changes to the GSLB site hierarchy any one appliance may changes the appliance s operation in view of the update or change. In some embodiments one or more appliances may disestablish or drop a metric exchange connection. In another embodiment one or more appliances may establish a metric exchange connection.

Although the embodiment of the method of may at times be described in connection with a GSLB site hierarchy the systems and methods described herein may be used for any type and form of configuration that may be common shared or batchable across appliances.

Although the embodiment of the method of is described in view of the master node obtaining configurations performing comparison and generating configuration changes each of the slave nodes may obtain the master nodes configuration perform the comparison and generate and apply the configuration changes on the slave node.

In some aspects the present systems and methods allows a configuration of a network appliance to be updated or synchronized with another configuration which may be from another network appliance. With synchronization differences in configurations across two or more appliances may be determined and changes to one or more configurations may be automatically propagated and or applied on one or more appliances. In some embodiments a configuration update may be available for multi site deployment and synchronization. Some configurations may include many lines of commands or configuration statements such that significant amounts of memory are needed to update these configurations or to synchronize them with another configuration. The present systems and methods can provide a relatively scalable method for configuration synchronization that makes efficient use of memory.

In some embodiments a system such as the system depicted in may include a plurality of devices or appliances in a network. There may be a need to have identical configurations on two of the devices or appliances. One of the device or appliance may be designated a source device having a source configuration. The other device or appliance may be designated a target device having a target configuration. In some embodiments a configurator such as the configurator described above in connection with may perform a configuration update or synchronization between the source and target configurations. The configurator may reside in and or execute on a device in communication with the source and or target devices over the network. In some embodiments the configurator may reside in and or execute on either the target device or the source device.

In some embodiments the configurator may dump an entire or a substantial portion of the source configuration from the source device e.g. into memory to perform a bulk update of the target configuration. In some cases the source and or target configuration may include a significant number of lines or entries of commands and or settings which can be in the order of thousands or orders of magnitude larger. With increasing complexities and new features the size of configurations in new devices can be expected to increase significantly. In some of these embodiments a brute force method of bulk update may not be feasible or efficient. In certain embodiments a configuration update comprises more than a simple replacement or overwriting of a target file. It may be necessary or proper to undo or change a setting or command in a target configuration using one or more settings or commands e.g. applied in the right sequence . Thus a bulk comparison of differences and or a bulk update may be beyond the capacity of conventional methods.

In some other embodiments a configurator may intelligently identify one or more portions of a target configuration for updating and may apply the necessary command s or setting s to perform the update. In some embodiments the configurator may include a program or tool e.g. nsconfigaudit tool may perform such an update. However in some embodiments the configurator is not able to handle huge or large configurations or configurations beyond a certain size e.g. more than 100 thousand lines . In some embodiments a configurator may be able to handle configurations up to a few thousand lines for example. However larger configurations e.g. hundreds of thousands of lines may be beyond the capacity of such a configurator. In various embodiments a configurator may consume more memory as configuration size and or differences between two configurations e.g. source and target configuration combined or individually increase. In some cases a configurator may consume more memory until memory is depleted and may crash and fail to complete the configuration update. A direct dependency of memory usage on the size of configurations and or differences can force a limit on a configurator s processing ability. Moreover in some embodiments the overall process sometimes becomes slower as configuration size and or differences increase.

In some embodiments the present systems and methods provides a configurator that can handle configurations of any size. For example the configurator s use of memory may not be a function of configuration size and or configuration difference. The configurator may in certain embodiments begin generation of corrective commands as soon as comparison is done for a first command between two configuration files. The waiting period in getting corrective commands may be perceptibly reduced. In some embodiments configurator may generate corrective commands in response to a comparison of a number of commands e.g. a predetermined number of commands a predetermined group or type of commands or any other trigger condition. For example the configurator may begin generation of corrective commands upon comparing 100 commands or any preconfigured number of commands from the target configuration or upon comparing all target commands having a specific op and ot combination.

In some embodiments each of the source and target configurations may be contained in one or more files. Each of these files may include one or more commands. A configurator may dump or store one or more of these files into a temporary file for example. The configurator may uniquely identify a command or a type category of command using one or more identifying attributes. Examples of such an attribute may include any identifier argument option string or element of a command. In some embodiments command of a same category or type may be identified using one or a combination of attributes. In one illustrative embodiment the configurator may uniquely identify each command by a combination of an operation op and an object ot . For example in the command enable ns feature cs enable may be an operation and feature may be an object.

Referring again to the comparator may include a parser and a comparator . The comparator may for example comprise any feature of the comparator described above in connection with . The parser may comprise any type and form of function operations or logic for parsing reading analyzing extracting organizing information from a regular formatted and or custom file e.g. a configuration file. In some embodiments the parser is designed configured or adapted to parse commands and or configuration settings from a specific type of configuration file. The parser may be designed configured or adapted to translate a configuration of one format or version e.g. compatible with one appliance to a configuration of another format or version e.g. compatible with another appliance . The parser may incorporate any one or more features of an extract translate and load ETL application. The parser may comprise software hardware of any combination of software and hardware. The parser may comprise an application program library script process service task thread or set of executable instructions. In some embodiments the parser may be a component of the comparator or any other module or may share elements with any other module.

The parser may identify and or extract one or more attributes from a command and may identify the command as belonging to a category or type of command. In some embodiments the parser may group similar commands e.g. commands with a same op and ot combination together. The parser may read the source and or target configuration files as inputs to the parser. The parser may perform grouping of commands e.g. by command type or category for the source and or target configuration files. The parser may remove duplicate commands from the source and or target configuration files. In some embodiments the parser may assume that here are no duplicate commands in the supplied input files.

The parser may perform indexing on the source configuration. The parser may perform indexing based on one or more items or attributes parsed from the configuration. For example and in some embodiments the source configuration file may be parsed to generate a list table database or any other data structure which may include the following entries 

Such a list or date structure may sometimes be referred to as an index list. In some embodiments instead of op and ot a list may be generated with entries corresponding to some other common or identifying attribute or a combination of attributes. The data in the list may be relatively small in size as compared to a configuration file. In some embodiments the configurator may generate or create a list e.g. singly linked list using the following illustrative data structure to store hold or contain the index data in memory 

In various embodiments the index data may not occupy much memory e.g. in comparison with a configuration file . The memory may be memory on an appliance or any device on which the configurator reside. The memory may be shared memory or memory allocated or dedicated to the configurator. The memory may comprise any type or form of memory such as embodiments described above in . By avoiding over use of memory processing speed of the configurator may be improved. When the configurator s comparator matches a target configuration command against command s in the source configuration using the index data the matching comparison may be significantly or relatively faster. For example instead of performing significant amounts of READ WRITE operations as in a bulk loading and comparison method significant time may be saved by using the index list to locate similar groups of commands from the source configuration.

In some embodiments the comparator begins from the bottom of a target configuration and loads a last unprocessed command into memory. The comparator may start from the bottom due to a particular format of the configuration file and or an intrinsic sequence for some of the commands. For example one reason the comparator starts from the bottom and works to the top is that in some embodiments bind commands come after the add commands in a configuration file. In other embodiments the comparator may begin from the top from another location and or according to a certain order e.g. based on some conditions constraints or particular reason. For example the comparator may need or wish to process one type of command e.g. bind command before another type of command e.g. add command . In certain embodiments while generating a corrective command for removal of a bound entity for example an unbind command may have to be generated before a remove command. One way to address this is that the parser may reverse the order of commands in the target configuration. In another embodiment the comparator may start processing of a target configuration file from the bottom e.g. in the way a tail command would do . In certain embodiments the latter e.g. considering the last command first may be preferred or set as a default for the configurator.

The comparator may trace the index list to match an identifying attribute of a target configuration command. For example the comparator may match an op and of combination for a command loaded from the target configuration. A match in the index list can provide the comparator with a corresponding startPoint and or endpoint for commands to be compared from the source configuration. The index list may identify a location and or count of corresponding commands from the source configuration. The comparator may load a portion of the source configuration ranging from startPoint and or till the endpoint into the memory. The comparator and or parser may create with the loaded portion a list with a plurality of nodes. Each node may include information or details of a command from the identified commands e.g. between startPoint and endPoint.

If a match is not found in the index list it may mean that no command exists in the source configuration that corresponds to the identifying attribute s of the selected target configuration command loaded in memory. In some embodiments if a match is not found in the index list no command from the source configuration is loaded. Since no command from the source configuration is loaded no list may be created or generated. If a match is found in the index list a non empty list may be created from the loaded portion. This non empty list may include one or more similar commands e.g. having a common attribute which may correspond to the identifying attribute s used to index this group of commands . Among such a group of similar commands each command may be uniquely identified with an ARGUID or argument identifier. The ARGUID may be a unique argument or a unique combination of arguments in the command. For example and in some embodiments between the following commands the server name may be the distinguishing element. Since no two servers may have the same name within this illustrative group of commands server name may be used as a unique identifier or ARUGUID 

The comparator may compare the command loaded from the target configuration with each command loaded from the source configuration. The comparator may compare until either a match for ARGUID is found or the end of the list is reached. In some embodiments the following two conditions may arise. First a match for ARGUID may be not found. In this case the command may be present in the target configuration but not in the source configuration. To synchronize the target configuration with the source the command may have to be removed from the target configuration. The configurator s generator may generate a corrective command for example responsive to determining that the ARGUID is not matched. The generator may generate a corrective command to remove the target configuration s command. For example the generator may generate a rm unset unbind command corresponding to an original add set bind command in the target configuration or target device.

In some embodiments a match for ARGUID may be found. If the match for ARGUID is found other arguments or attributes between a corresponding pair of commands may be compared. If the entire arguments match the commands may be determined to be identical to each other e.g. synchronized . Responsive to such a determination the configurator may determine that no synchronization action or update is needed for the loaded command. The configurator may determine that no further action or operation is required.

If one or more arguments attributes differ the generator may generate one or more corrective commands to update or synchronize the target configuration. The one or more corrective commands may include for example a set command or a set of unset and set commands or a set of unbind and bind commands depending upon the target configuration command.

If a node from the list is matched with the command loaded from the target configuration the node may be removed from the list. Removing such a node may reduce the number of comparisons for the next command. In some embodiments when all the entries from the list are removed the entry in the index list may be marked as processed e.g. an is Processed variable in the corresponding index list entry may be marked as TRUE.

The next command may be loaded to memory from the target configuration. If an identifying attribute e.g. the op and ot combination of this command matches with that of the list the process described above may be repeated. In some embodiments if there is no match the group of commands having same identifying attribute e.g. op and ot combination at the target configuration may be exhausted. In such case the comparator may check if the list still has any nodes. If there are additional nodes unmatched nodes there may be some extra entries commands at the source configuration which may have to be added to the target configuration. The commands from the unexhausted nodes may be generated by the generator as corrective commands. The list may be freed e.g from memory by the configurator as soon as corrective commands are generated or conveyed to the target device. In some embodiments the list may be freed when the is Processed variable in the corresponding index list entry is marked as TRUE.

The process may be repeated until the commands in the target configuration file are exhausted. In some embodiments the index list may be traced by the configurator to check if there any entry that is unprocessed e.g. still has is Processed marked as FALSE. Absence of such entries may mean that the target configuration has no corresponding command s remaining to be processed e.g. to be removed added and or changed . Where there are extra entries extra configuration commands may be generated as corrective commands by the generator and the index list may be freed e.g. from memory .

In some embodiments the configurator overcomes a dependency of the memory usage for the synchronization upon configuration size e.g. source and target configuration file sizes combined and or differences in the configurations. In certain embodiments at any time only a particular command set from source configuration may be loaded into the memory by the configurator. From the target configuration one command may be loaded by the configurator into memory at any one time. This can reduce memory usage significantly. First of all for the target configuration memory to load just a single command is utilized e.g. instead of loading the whole configuration. The configurator may load only a portion of the commands from the source configuration which are associated with the command loaded from target configuration into memory. The indexing e.g. index list may take up some memory but may be insignificant compared to the memory saved.

In certain embodiments the present method may provide an option for a user to specify a particular type or subset of commands to be compared. One or more commands matching specified criteria may be loaded from the source and or target configurations. In some embodiments only such commands are compared by the system while others may be ignored. In some embodiments the present method may speed up the process as comparisons can be targeted and performed with fewer number of commands. Therefore the probability of matching to an exact command in the source configuration with fewer comparisons may increase. In certain embodiments as commands are compared corrective commands can be generated which can be simultaneously applied at the target device. This may increase the efficiency of configuration updates in an appliance. In some embodiments corrective commands may be generated after a portion or all of the comparison is done.

In some embodiments a way to compare two configurations is to perform a text or text based comparison. This comparison may be done by using typical comparison tools like diff ediff etc. However such comparisons may lack intelligence. First of all such a comparison may identify which commands differ but may not provide a way to correct the difference e.g. the generation of corrective commands. Second such a comparison may require two configurations to be in same order. If the order is not same it may identify differences even though the configurations might be same. Third even if the order of commands is same but the order of arguments in corresponding commands is different such a comparison may identify a difference even though the configurations might be same. As an illustration consider 

In some embodiments a configurator e.g. as available in a nsconfigaudit utility may load two configurations in memory. The configurator may perform a search e.g. linear search to find a corresponding command. The configurator may perform an intelligent comparison and may generate corrective command s to be executed at a target device. In various embodiments such a method may have memory utilization as a direct function of the size of source and target configurations and or the amount of differences detected. Such a configurator may not able to process very large configurations and processing may be time consuming in general.

Illustrated in is one embodiment of a method for synchronizing a target configuration file of a target device with a source configuration file of a source device. This method may be capable of removing dependency of memory utilization on the size of configurations perform an intelligent comparison and or generate corrective commands in a faster manner. A parser of a e.g. first device groups a plurality of commands from a source configuration file of a source device into subsets of commands . Each subset of the subsets of commands may include commands uniquely identified by a common attribute. A configurator of the first device may load into memory a command from a target configuration file of a target device . The command may have an identifying attribute. The configurator may load into the memory one of the subsets of commands having a common identifying attribute that matches the identifying attribute . The configurator may compare the command from the target configuration file with each command in the loaded subset of commands . The configurator may generate one or more commands for execution on the target device to synchronize a portion of the target configuration file corresponding to the command compared with the source configuration file .

Further referring to and in more detail a parser of the e.g. first device groups a plurality of commands from a source configuration file of a source device into subsets of commands . Each subset of the subsets of commands may include commands uniquely identified by a common attribute. The parser may read a source configuration file from a source device. The parser may read a portion of the source configuration file into memory. The parser may identify commands of a particular type or group and or having a common attribute e.g. having a same op and of combination as described above in connection with . The parser may associate link these commands by location in the configuration or may reorder or reorganize the configuration to group these commands together.

In some embodiments the parser may perform an in place replacement rewrite of portions of the source configuration e.g. during the reordering . The parser may generate a new source configuration with the command groupings and may write the new source configuration onto a storage disk. The parser may read a target configuration file from a target device. The parser may read a portion of the target configuration file into memory. In certain embodiments the parser may generate a new target configuration with similar command groupings and may write the new target configuration onto a storage disk. In some embodiments the parser may remove redundant or duplicate commands from a configuration.

In some embodiments the parser may write or identify subsets or groups of commands into an index file. Each subset or group of commands may be indexed by a corresponding identifying attribute or a common attribute e.g. the same op and of combination . The parser may store an identification of a subset group of commands in an entry of a list or data structure. The identification may include one or more of a common identifying attribute a location of the group e.g. in the source configuration new or original a count of commands in the group and a flag e.g. indicating if the group of commands have been processed compared during a synchronization process .

Further referring to a configurator of the device may load into memory a command from a target configuration file of a target device. The command may have an identifying attribute. In some embodiments the device e.g. first device comprising the configurator and the parser comprises the target device. The target device may include the device. The target device may include and or execute the configurator and the parser. In some embodiments the source device may include the device e.g. first device . The source device may include and or execute the configurator and the parser. In some embodiments the configurator performs the synchronization on behalf of the target and or source device for example as a remote service e.g. executing on a virtual server on a network device . In other embodiments the configurator executes on e.g. a virtual server of the source or target device.

A comparator of the configurator may identify a command from the target configuration. The comparator may select a command that has not been processed for synchronization. The comparator may select the command based on a certain order e.g. from the bottom top or a location within the configuration. In some embodiments the comparator may select a command randomly. The comparator may load only this command from the configuration into memory e.g. of the device . The comparator may load the command after removing another command from the target configuration from memory. The parser may load the command into the memory without loading other commands from the target configuration file into the memory. In some embodiments the comparator may load particular attributes of the command for example generated by the parser based on the command e.g. instead of the whole command .

In further details of the configurator may load into the memory a subset of commands having a common identifying attribute that matches the identifying attribute. The configurator may load into the memory a subset of commands having the identifying attribute. For example the configurator may load into the memory one of the plurality of subsets of commands whose common identifying attribute matches the identifying attribute. The configurator may load into the memory one of the plurality of subsets of commands having the identifying attribute as its common identifying attribute. The comparator may identify an identifying attribute of the command from the target configuration e.g. an op and of combination . The comparator may identify one or more subsets of commands based on the identifying attribute of the command from the target configuration. In some embodiments the comparator may identify one subset of commands based on the identifying attribute. The comparator may identify one subset of commands to load. The comparator may identify one of the subsets of commands to load. In some embodiments commands that match the common identifying attribute may be grouped under a single subset. The comparator may load the commands grouped in such a subset.

The comparator may load the index file into memory. In certain embodiments the comparator locates the subset of commands within the index file by matching the identifying attribute against the indexed attributes. The comparator may search entries in the index file based on the identifying attribute. In some embodiments the comparator may use the identifying attribute as a hash key or hash input.

In some embodiments the comparator loads the subset of commands into the memory without loading other subsets into the memory. The comparator may load each command of the subset of commands into the memory without loading other commands from the same subset into the memory. The comparator may load each command from the subset into memory for comparison against the command from the target configuration. For example the comparator may load a next command from the subset after removing a prior command from memory. The comparator may load one or more attributes of each command e.g. arguments or identifiers of arguments of the command instead of the whole command .

In further details of the configurator e.g. via the comparator may compare the command from the target configuration file with each command in the loaded subset of commands. The configurator may compare the command sequentially or in parallel e.g. using parallel processing . The configurator may compare the command according to the order of commands in the subset. The configurator may compare the command based on the order the subset is loaded into memory. The comparator may match the command from the target configuration with each command in the subset by comparing each argument of the respective command. The comparator may match attributes from both commands e.g. arguments command options and or the op and of combination of each command . The comparator may match attributes from both commands regardless of their order position in each command.

In further details of the configurator may generate one or more commands for execution on the target device to synchronize a portion of the target configuration file corresponding to the command compared with the source configuration file. The configurator may generate one or more corrective commands to a file e.g. a new target configuration file or a run file for execution . In some embodiments the configurator may determine that no corrective commands are needed based on the comparison or matching. The configurator e.g. via the generator may generate one or more commands to add remove or change a new configuration command in the target configuration device. The configurator may generate one or more commands to synchronize a command in the target configuration device.

The configurator may convey the one or more corrective commands to the target device e.g. dynamically responsive to the generation of the commands . The target device may execute the one or more corrective commands responsive to receiving the commands. The target device may execute the one or more corrective commands responsive to completion of each matching comparison. The target device may receive and or execute the one or more corrective commands responsive to a complete comparison between the source and target configurations.

In some embodiments the configurator may remove from the memory the command from the target configuration file responsive to the comparison matching. The configurator may remove from the memory the subset of commands responsive to the comparison matching. The configurator may remove from the memory the command from the target configuration file responsive to generating the one or more commands. The configurator may remove from the memory the subset of commands responsive to generating the one or more commands e.g. commands for execution on the target device .

In some embodiments the configurator deletes or marks the subset of commands in the index list e.g. as completed or processed responsive to generating the one or more commands for execution on the target device. If all subsets are marked or deleted the comparison between the source and target configurations may be complete. The configurator may release the index list loaded commands and or loaded subsets from memory. The configurator may signal a completion of the process to the source and or target devices. The configurator may indicate to or instruct the target device to update its configuration using the generated commands.

Having described certain embodiments of the methods and systems it will now become apparent to one of skill in the art that other embodiments incorporating the concepts of the invention may be used. It should be understood that the systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or in some embodiments on multiple machines in a distributed system. The systems and methods described above may be implemented as a method apparatus or article of manufacture using programming and or engineering techniques to produce software firmware hardware or any combination thereof. In addition the systems and methods described above may be provided as one or more computer readable programs embodied on or in one or more articles of manufacture. The term article of manufacture as used herein is intended to encompass code or logic accessible from and embedded in one or more computer readable devices firmware programmable logic memory devices e.g. EEPROMs ROMs PROMs RAMs SRAMs etc. hardware e.g. integrated circuit chip Field Programmable Gate Array FPGA Application Specific Integrated Circuit ASIC etc. electronic devices a computer readable non volatile storage unit e.g. CD ROM floppy disk hard disk drive etc. . The article of manufacture may be accessible from a file server providing access to the computer readable programs via a network transmission line wireless transmission media signals propagating through space radio waves infrared signals etc. The article of manufacture may be a flash memory card or a magnetic tape. The article of manufacture includes hardware logic as well as software or programmable code embedded in a computer readable medium that is executed by a processor. In general the computer readable programs may be implemented in any programming language such as LISP PERL C C C PROLOG or in any byte code language such as JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.

