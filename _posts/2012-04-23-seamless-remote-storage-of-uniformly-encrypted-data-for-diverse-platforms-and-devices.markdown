---

title: Seamless remote storage of uniformly encrypted data for diverse platforms and devices
abstract: A way of providing seamless remote data storage and access with a universal encryption key is provided. Data may be able to be uploaded from and/or downloaded to a variety of user devices and/or types of user devices. During transfer of data, a secure communication channel may be established between a user device and a destination storage. Data may be compressed and/or encrypted before being passed to the destination storage. Such compression and/or encryption may be performed at the user device or an intermediate processing module. Likewise, when downloading data, the data may be decompressed and/or decrypted before being made available to a destination user device. Such decompression and/or decryption may be performed at the destination device or the intermediate processing module. In any case, the universal encryption key may be utilized by all user devices to generate uniformly encrypted data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09137225&OS=09137225&RS=09137225
owner: 
number: 09137225
owner_city: 
owner_country: 
publication_date: 20120423
---
A typical user of electronic devices may access generate manipulate and or store data on a variety of different user devices. The different user devices may include various different types of device e.g. Smartphones personal computers or PCs tablet devices home electronics industrial electronics etc. . Such devices may operate using a variety of different platforms e.g. Windows Mac OS Android etc. . In addition the devices may utilize files with various structures and or components.

Many users may want to store their data using a remote storage e.g. cloud storage such that the users may access their data using multiple devices independent of the original source device of the data e.g. a user may wish to take photos using a Smartphone and edit those photos using a PC a user may wish to use a tablet device to access a set of files generated using a PC etc. .

Current remote storage solutions may not allow a user to use a universal encryption key across all devices. In addition any encryption key may be exposed when authenticating a user device during storage or retrieval of data.

In some situations a user also may not wish to burden the user device e.g. by using processing power storage battery life etc. when encrypting or decrypting data.

For these reasons there exists a need for an integrated solution that allows a user to utilize a universal encryption key across multiple devices without overly burdening any user devices.

Some embodiments provide a way for a user to backup data from any of a variety of user devices to a destination storage or remote storage . The data may in turn be restored to various devices from the destination storage as desired by the user. Some embodiments compress and encrypt data before it is sent to the destination storage. In some of these embodiments the compression and encryption are performed at an intermediate processing module such that the user device is not overburdened. Similarly some embodiments decompress and decrypt data when it is restored from the destination storage. Some of these embodiments perform the decryption and decompression at the intermediate processing module to conserve resources of the user device.

A way for the user to establish a secure communication channel when backing up or restoring data may be provided by some embodiments. Some of these embodiments allow a user to select a private key that is used for universal data encryption. A user may initially select a private key and then may be required to enter the private key every time the user wishes to access data associated with the user s account from certain user devices. Alternatively a default key may be used if the user does not wish to create and or utilize the private key. In either case the private key or default key may be used among all user devices but may not be passed either directly or after encryption among the user devices intermediate processing module and or destination storage.

Some embodiments provide a seamless method for remotely storing user data having uniform encryption among a plurality of devices. The method may include opening a first secure communication channel between a user device and an intermediate processing module receiving user account information from the user device over the secure communication channel for temporary use wherein the user account information includes at least a user account encryption key receiving user data for remote storage from the user device encrypting the user data at the intermediate processing module using the received user account encryption key opening a second secure communication channel between the intermediate processing module and a destination storage wherein the communication channel is opened after authentication of a user account using the received account information transferring the encrypted user data to the destination storage and removing the user account information from the intermediate processing module.

Some embodiments provide a method of opening a secure communication channel for access to a remote server from a user device associated with a user. The method may include encoding a set of user account information using a private encryption key generating a concatenated string that includes the encoded set of user account information encrypting the concatenated string using a shared encryption key that is based at least partly on a dynamic string and sending the encrypted concatenated string to the remote server for authentication.

Some embodiments provide a method of opening a communication channel between a remote storage and a user device associated with a user. The method may include receiving an encrypted concatenated string from the user device for authentication wherein the encrypted concatenated string includes at least some user account information that is encrypted using a user account encryption key decrypting the encrypted concatenated string using a shared encryption key that is generated using a dynamic string and retrieving a set of user account information from the decrypted string for authenticating user access.

The preceding Summary is intended to serve as a brief introduction to some embodiments of the invention. It is not meant to be an introduction or overview of all inventive subject matter disclosed in this document. The Detailed Description that follows and the Drawings or Figures or FIGS. that are referred to in the Detailed Description will further describe the embodiments described in the Summary as well as other embodiments. Accordingly to understand all the embodiments described by this document a full review of the Summary Detailed Description and the Drawings is needed. Moreover the claimed subject matter is not to be limited by the illustrative details in the Summary Detailed Description and the Drawings but rather is to be defined by the appended claims because the claimed subject matter may be embodied in other specific forms without departing from the spirit of the invention.

In the following detailed description of the invention numerous details examples and embodiments of the invention are set forth and described. However it will be clear and apparent to one skilled in the art that the invention is not limited to the embodiments set forth and that the invention may be practiced without some of the specific details and examples discussed.

Several more detailed embodiments of the invention are described in the sections below. Section I provides a conceptual overview of the system used to implements some embodiments. Section II describes the software architecture used in some embodiments. Section III then describes data backup of some embodiments. Next Section IV describes data restoration of some embodiments. Section V then describes initial user account creation in some embodiments. Section VI then describes the process used to define the media editing application of some embodiments. Lastly Section VII describes a computer system which implements some of the embodiments of the invention.

The user may be any entity that is able to control access and or communicate with one or more user devices. The user device may be any electronic device adapted to access store and or process data. Such user devices may include various different types of devices e.g. Smartphones personal computers laptops tablets etc. . In addition the user devices may operate on various different platforms e.g. Windows Mac OS X Linux etc. . Furthermore the user devices may be adapted to communicate using various different protocols e.g. 3G 4G 3GPP Long Term Evolution or LTE Ethernet Internet Protocol or IP etc. and or communications systems e.g. a cellular network a local area network such as a wireless network a network of networks such as the Internet etc. .

The intermediate processing module may be adapted to compress and or encrypt and or decompress and or decrypt data before sending and or after receiving data to and or from destination storage device . The destination storage may be adapted to receive data from various user devices and or one or more intermediate processing modules store such received data and send data to one or more intermediate processing modules and or various user devices .

As shown in some user devices may communicate directly with the destination storage . Such direct communication may include various devices data interfaces communication systems etc. Although some user devices are shown as not communicating directly with the destination storage some embodiments allow all devices to communicate directly with the destination storage regardless of whether the devices also communicate with the intermediate processing module .

If the user device has sufficient capability e.g. computing and or processing power to compress and or encrypt the data to be stored the compressed and or encrypted data may be sent directly to the destination storage . If the user device has insufficient capability data may be sent from the user device to the intermediate processing module where the data may be compressed and or encrypted. The compressed and or encrypted data may in turn be sent from the intermediate processing module to the destination storage . In this way a user device with insufficient processing capability may not be unnecessarily loaded during backup or restoration of data. In some cases although a particular user device may be capable of processing the data e.g. compressing and encrypting or decrypting and decompressing locally the processing may still be offloaded to the intermediate processing module e.g. to extend battery life of the user device to allow the user device to perform other tasks etc. .

When restoring data from the destination storage data may be sent from the destination storage directly to a user device . Data may or may not pass through the intermediate processing module as appropriate e.g. based on the processing capability of the user device . Data backed up on the destination storage device may be restored to any user device i.e. data may be restored to a different user device than the device from which the data originated . In this way a user may backup and or restore data among several different user devices devices operating on various different platforms etc.

In some embodiments some or all communication pathways may utilize secure encrypted channels. In addition as described above the data sent over the channels may be encrypted before being sent or at the intermediate processing module.

One of ordinary skill in the art will recognize that the conceptual system may be implemented in various different ways without departing from the spirit of the invention. For instance although the intermediate processing module and destination storage have been represented as separate entities they may be implemented on a single device e.g. a remote server . In addition although various communication pathways may be represented as direct connection e.g. from the user device to the destination storage one of ordinary skill in the art will recognize that the pathways may include various signal pathways e.g. wireless wired etc. devices e.g. cellular communication towers routers etc. connections etc.

During operation the data organization may allow various entities e.g. users applications etc. to efficiently and easily access data. In addition whichever entities may access the data may be able to determine the source of the data and act accordingly when appropriate. For instance in some embodiments data uploaded from a first device may be restored to a second device. In such cases it may be desirable to format or otherwise present the data such that the second device is able to use the data as needed.

As shown the client side application may include a communication module a compression module an encryption module a verification module and or other modules not shown . The communication application may include a client side interface and or other modules not shown . The server side application may include a communication module a verification module an access module and or other modules not shown . The intermediate processing application may include a communication module a compression module an encryption module a verification module and or other modules not shown .

The client side application may be adapted to allow a user device to seamlessly communicate with access and or otherwise utilize the destination storage and or the intermediate processing module provided by some embodiments. Such a client side application may be installed on multiple user devices of various types e.g. Smartphone PC etc. . The communication module may be adapted to facilitate communication between the user device and one or more external devices that execute the server side application . The compression module may be adapted to compress and or decompress data. The encryption module may be adapted to uniformly encrypt and or decrypt data e.g. by encrypting and or decrypting data using a single encryption key across multiple devices . The verification module may be adapted to generate various data that may be authenticated by the server side application and or the intermediate processing application . In addition the verification module may be adapted to evaluate authentication data generated by the server side application and or the intermediate processing application .

The communication application e.g. a web browser plug in platform etc. may likewise allow the user device to communication with access and or otherwise utilize the destination storage and or the intermediate processing module provided by some embodiments. In this example a client side interface runs on the communications application . The client side interface may include similar modules and functionality as the client side application described above. In this way users may be able to access the destination storage from various devices without having to install any system specific software.

The client side application and the communication application with client side interface may utilize commonly available protocols architectures and or communication mediums. For instance some embodiments may utilize hypertext transfer protocol secure HTTPS calls representational state transfer REST application programming interfaces APIs etc. Such utilization may allow the source device to avoid using processing power as the processing is done elsewhere.

The server side application may be adapted to communicate with various user devices and or applications and allow such devices and or applications to access and or otherwise utilize the destination storage and or intermediate processing module . The communication module may be adapted to facilitate communication among one or more external devices that execute the server side application and a user device running the client side application . The verification module may be adapted to generate various data that may be authenticated by the client side application. In addition the verification module may be adapted to evaluate authentication data generated by the client side application. The access module may be adapted to provide access to the destination storage and or intermediate processing module once the user device and or client side application has been verified.

The server side application may be implemented using various combinations of external devices. For instance some embodiments may implement the server side application using a single device e.g. a server . As another example some embodiments may implement the server side application using multiple devices communicatively coupled over a network. In addition the server side application may be able to access various external devices such as storages as appropriate. For instance data may be stored redundantly e.g. the same data may be stored in multiple storages may be distributed e.g. the data may be partitioned into sub sets with the sub sets being stored among the multiple storages and or stored in other appropriate ways.

The intermediate processing application may be adapted to communicate with various user devices and or applications and or a destination storage and or server side application provided by some embodiments. The communication module may be adapted to facilitate communication among one or more external devices that execute the server side application and a user device running the client side application . The compression module may be adapted to compress and or decompress data. The encryption module may be adapted to encrypt and or decrypt data. The verification module may be adapted to generate various data that may be authenticated by the client side and or server side applications. In addition the verification module may be adapted to evaluate authentication data generated by the client side and or server side applications.

One of ordinary skill in the art will recognize that the conceptual architecture may be implemented in various different ways without departing from the spirit of the invention. For instance the client device may include a user interface UI module that may be adapted to allow a user to select data to backup data to download and or otherwise control the operation of the client side application. In addition although various modules have been represented as separate blocks they may be combined into a single block in some embodiments e.g. the compression and encryption modules may be combined into a single module the communication and verification modules may be combined into a single module etc. . Furthermore various modules shown as single blocks may be separated into separate modules as appropriate e.g. the communication module may be separated into multiple modules each adapted to a specific network or protocol etc. . Moreover different embodiments may distribute the various modules in different ways e.g. the server side application may include modules such as a compression or encryption module on an intermediate processing device a verification module on a destination storage device and a communication module with elements distributed among the devices .

Next process may open at a communication channel. Opening the channel may require various specific operations depending on the type of user device e.g. Smartphone PC etc. the connection employed e.g. wireless cellular etc. and or other relevant factors. The communication channel may include hardware elements e.g. wired connections antennas servers etc. and or software elements e.g. APIs data transfer protocols etc. . The communication channel may be opened by components such as the communication modules and or verification modules described above in reference to . The communication channel may connect various components or devices as appropriate e.g. the user devices intermediate process module and or destination storage described above in reference to . Opening such a channel will be described in more detail in reference to below.

Process may then identify at data for backup. The data may be identified in various appropriate ways. Such identification may be based on information provided by a user e.g. a user may select specific files or folders for backup using a UI provided by the client side application and or other factors e.g. backup of a folder that has been set up to occur at regular intervals . In some cases changes to files or folders that have been previously selected for backup will be automatically applied. In addition some embodiments may upload only the data that has changed e.g. a file may include multiple blocks of data where only a subset have been updated resulting in only a subset of the blocks being uploaded rather than the entire file .

Next the process may compress at the data selected for backup. Such compression may reduce the amount of storage needed for a user s data and may also reduce the load on other operations e.g. encryption . The compression may be performed in various ways using various different compression algorithms. Such compression may for instance be performed by a component such as the compression module or described above in reference to .

The process may then encrypt at the compressed data. Such encryption may be performed in various appropriate ways using various appropriate encryption algorithms. The encryption may be performed using a private or default key as described below in reference to processes and .

Finally process may transfer at the compressed encrypted data to the destination storage and then end. Such transfer may use various secure communications pathways and protocols as appropriate. The compression transfer and encryption of data will be described in more detail in reference to below.

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently e.g. certain operations of a first process may be performed concurrently with certain operations of a second process while other operations of the first process may need to be completed before continuing to other operations of the second process . Moreover the operations of the process may be performed in different orders.

Next the process may ping at a server side application e.g. server side application described above in reference to . Such a ping may be any request for authorization that is able to be received and recognized at the server side application. The process may then receive at a dynamic string of data. The dynamic string may for instance include data such as timestamp data e.g. month day year hour minutes seconds etc. and or other appropriate data e.g. data related to the user device data related to the destination storage etc. .

Process may generate at a shared encryption key where the shared encryption key is at least partly based on the dynamic string. In some embodiments the shared key may be generated using salt cryptography. Such cryptography may be used to generate a key from a set of random bits and a supplied password in this case the supplied password may include the dynamic string . Next the process may determine at whether there is a private key. Such a private key may be generated by a user when the user initially sets up an account with the destination storage service. Some embodiments may require the user to enter the private key every time the user attempts to access the destination storage e.g. the user may be provided with a login screen that may include fields such as username password and private key . Such account generation will be described below in reference to .

If the process determines at that there is not a private key the process may retrieve at a default key. The default key may be available to the client side application and the server side application. If the process determines at that a private key is available the process may retrieve at the private key. In either case whether a default key or a private key is used the key may not be transferred between the client side application and the server side application. After retrieving at or the appropriate key process may encode at user data e.g. username and password associated with the user that is using the client side application to access the destination storage using the retrieved key. Such encoding may be performed using various appropriate tools algorithms etc. e.g. base encoding .

Next the process may generate and encrypt at a concatenated string. The concatenated string may include the user data the encoded user data a flag indicating whether a private or default key is used for encryption and or other appropriate flags and or data. The concatenated string may be encrypted at at the client side using the shared key generated at and appropriate algorithms. Such encryption may use the shared key to transform e.g. lock data into an unreadable form that requires the same shared key to transform the data into a readable form.

Once the concatenated string is encrypted the process may send at the encrypted concatenated string to the server side application. The process then may receive at verification authentication from the server side application if the supplied information has been verified as correct at the server side application or the request to establish communication may be denied if the supplied information is determined to be incorrect at the server side application and the process ends.

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders.

Next the process may receive at a ping from the client side application or other appropriate application device etc. . Such a ping may be any request that is able to be received and recognized by the server side application. The process may then generate and send at a dynamic string to the client side application. The dynamic string may be the same dynamic string described above in reference to operation of process . Thus both the server side application and client side application may have access to the same dynamic string.

Returning to process the process may then receive at a concatenated string from the client side application. Next the process may generate at a shared key based at least partly on the dynamic string generated at . As above the shared key generated may be a salt key. By using the same algorithm to generate the key as that used in operation described above in reference to process the client side and server side application may have access to the same shared key i.e. a key including the same data as a key at the other application . In this way the client side and server side applications may be able to share the same key without having to expose the key during communication.

Process may then decrypt at the concatenated string using the shared key. Such decryption may be performed using a decryption algorithm that is complementary to the encryption algorithm used in operation described above in reference to process .

Next process may retrieve user data encoded with the private or default key as appropriate. Such encoded data may have been generated for instance when the user created an account as described below in reference to . Thus the encoded data may have been included in a previous concatenated string or other appropriate form that is available to the server side application.

Next the process may determine at whether the elements of the concatenated string match the data previously provided to the server e.g. username password user data encoded with the private or default key etc. . If the elements of the string do not match the process may deny at the client side application access to data stored on the remote server. If the elements of the string do match the process may allow at the client side application access to the data. Such denial or allowance may include sending a particular message or signal to the client side application to indicate that the client side application is authorized to access the resources provided by the server side application. After indicating the denial or allowance the process ends.

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders e.g. the shared key may be generated before the concatenated string is received .

Process may begin for instance after a communication channel has been opened between the client side application and the server side application. The process may then determine at whether the source device is capable of compressing and or encrypting data. Such a determination may be made by the client side application in some embodiments. The determination may be based on various relevant factors such as for instance whether the source device has sufficient computing power processing power storage battery life etc. In some cases a particular source device may be technically capable of compressing and or encrypting data but may still pass the data to an intermediate processing module e.g. to extend battery life of the source device to allow the source device to perform other tasks to avoid affecting other operations of the source device etc. .

If the source device does not have sufficient capability the data may be passed at to an intermediate processing module e.g. module described above in reference to . The data may be securely passed using channel encryption with for example a secure socket layer SSL connection between the source device and the intermediate processing module.

The data may then be compressed at at the intermediate processing module. Such compression may utilize various appropriate tools and or algorithms e.g. lossless data compression algorithms hypertext transfer protocol or HTTP compression etc. to encode the data using fewer bits than the uncompressed representation. The data may then be encrypted at at the intermediate processing module. Encryption may utilize various appropriate algorithms and or tools e.g. Advanced Encryption Standard or AES symmetric key block ciphers such as Serpent etc. . In some embodiments the data may be encrypted using the private or default key described above in reference to processes and as appropriate.

If process determines at that the source device has sufficient processing capability the data may be compressed at at the source device. The compressed data may then be encrypted at at the source device. As above the encryption and compression may be performed using various appropriate algorithms and or tools. The compression and or encryption at the source device or the intermediate processing module may be performed block by block or a whole file or folder may be encrypted. In addition the encryption may be accomplished using the private or default key described. After encrypting at or the data process ends.

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders.

Process may begin for instance when a communication channel has been opened as described above in reference to . Process may then determine at whether the data will be processed at the source device. The determination may be made as described above in reference to . If process determines that the data will not be processed at the source device i.e. when the data will be processed at the intermediate processing module the process may open at a communication channel with the intermediate processing module. Such a channel may be opened in a similar manner to that described above in reference to . Next the process may send at account information to the intermediate processing module. The account information may include the private or default key user data e.g. user name and password and or other data e.g. various flags information regarding the user device etc. .

The process may then send at data to the intermediate processing module. Such data may be sent block by block as a complete file or folder etc. Next the process may send at an indication that the transfer of data is complete.

If process determines at that the data will be processed at the source device the process may compress at the data at the source device. The process may then encrypt at the data at the source device. Next the process may send at the data from the source device to the destination storage. Such data may be sent for instance over the previously opened communication channel. The process may then send at an indication that the transfer is complete.

Finally after sending at or an indication that the transfer is complete the process may close at any open communication channel s . Alternatively the channel s may be left open to allow transfer of additional data e.g. when transferring multiple files or folders at one time .

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders.

Process may begin for instance when a communication channel has been opened as described above in reference to operation of process . Process may then receive at account information from the source device. The account information may include the private or default key user data e.g. user name and password and or other data e.g. various flags information regarding the user device etc. . The process may then extract at the key user data and or other data as appropriate from the concatenated string. Next the process may open at a communication channel with the destination storage. Such a channel may be opened in a similar manner to that described above in reference to .

The process may then receive at data from the source device. Such data may be received block by block as a complete file or folder and or other appropriate ways. Next the process may compress at and encrypt at the data. The process may then send at the compressed encrypted data to the destination storage. Next the process may receive at from the source device an indication that the transfer is complete. Process may in turn send at to the destination storage an indication that the transfer is complete. Next the process may close at any open communication channels. As above the channel s may alternatively be left open to allow transfer of additional data e.g. when transferring multiple files or folders at one time .

The process may then delete at all data received from the user device including the private or default key and the transferred data and then end. In this way no data is exposed by the intermediate processing module.

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders.

Process may begin for instance when a communication channel has been opened as described above in reference to . Process may then determine at whether the data will be processed at the source device. The determination may be made as described above in reference to . If process determines that the data will not be processed at the source device i.e. when the data will be processed at the intermediate processing module the process may open at a communication channel with the intermediate processing module. Such a channel may be opened in a similar manner to that described above in reference to . Next the process may receive at data from the intermediate processing module.

If process determines at that data will be processed at the source device the process may receive at data from the source device. Such data may be received for instance over the previously opened communication channel. Next after receiving at or the data the process may store at the received data. The data may be received and stored in a block by block fashion as a complete file or folder and or other appropriate ways. Storing the data may include writing the data to one or more storage devices or storages as appropriate.

The process may then receive at an indication that the transfer of data is complete. The indication may be received from the source device and or the intermediate processing module as appropriate. Next the process may close at any open communication channels. Alternatively the channel s may be left open to allow transfer of additional data e.g. when transferring multiple files or folders at one time .

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders.

Process may begin for example when a user launches the client side application of some embodiments when the user selects data to be restored at other appropriate times and or based on other events. For instance in some cases data may be restored any time there is a change in associated data on the destination storage e.g. a user device may be synced such that a folder on the user device is updated whenever there is change to the data stored at the destination storage . Next the process may open at a communication channel between the destination storage and the destination device. The communication channel may be opened in a similar manner to that described above in reference to processes and .

Process may then identify at data for restore. The data may be identified in various other appropriate ways. Such identification may occur when for example a user selects data using a client side application running on a user device. The selected data may be remotely stored on an external device e.g. destination storage described above in reference to . Next process may transfer at the identified data to a processing device. The processing device may be the destination device or an intermediate processing module.

Process may then decrypt at the identified data. Such decryption may use various appropriate tools and or algorithms. The decryption may utilize the private or default key as appropriate. Next the process may decompress at the decrypted data. The decryption and decompression operations may be performed using various appropriate resources as described above in reference to process .

Next process may provide at the decompressed decrypted data to the destination device and then end. If the decryption and decompression operations are performed at the destination device e.g. a user device the unlocked data may be moved to local storage passed to a particular application running on the destination device or otherwise made available to the destination device as appropriate. If the decryption and decompression operations are performed at an intermediate processing module the decompressed decrypted data may be passed to the destination device from the intermediate processing module using channel encryption or some other secure way.

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders e.g. data may be transferred to a destination device before being decrypted and decompressed .

Next process may prepare at a request to restore data. Such a request may be initiated by for example a user of the client side application. Alternatively the request may be generated automatically by an appropriate module. The process may then determine at whether a specific version of the data has been requested. Such a determination may be at least partly based on data received from a user through an appropriate resource e.g. the client side application .

If no specific version of data is requested the process may send at a request to the server side application for the latest version of the data e.g. the most recently uploaded data . If a specific version of data is requested the process may then send at a request for the specific version to the destination storage. A request for a version may include any data blocks associated with the version.

The process may then receive at the requested data from the destination storage. The requested data may be received at for example the intermediate processing module or a user device as appropriate. Next the process may decrypt at the received data using appropriate tools and or algorithms. The process may then decompress at the decrypted data.

The decryption and decompression operations may be performed at the destination device if the device has sufficient capability. Alternatively the decryption and decompression operations may be performed at the intermediate processing module. Finally the decrypted and decompressed data may be provided at to the destination device and process ends.

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders e.g. data may be provided to the destination device before being decrypted and decompressed .

Process may then receive at a request to restore data. The request may include appropriate information e.g. user data user device data version requested etc. . The process then may determine at whether a specific version of data has been requested. The determination may be at least partly based on an analysis of the request received at .

If a specific version of requested data is not specified the process may retrieve at the latest version of the data. If a specific version of requested data is requested the process may retrieve at the specific version. The retrieved version may include all data blocks associated with the version.

Next process may decrypt at the retrieved data. The process may then decompress at the decrypted data. Such decryption and or decompression may be performed at the intermediate processing module or the destination device as appropriate. The decryption and decompression may be performed using various appropriate tools and or algorithms. The decryption may be performed using the private or default key as appropriate. The process may then send at the decrypted decompressed data to the destination device and ends.

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders e.g. the data may be sent to the destination device before being decrypted and or decompressed .

Process may begin for instance after a communication channel has been opened between the client side application and the server side application. The process may then determine at whether the destination device is capable of decompressing and or decrypting data. Such a determination may be made by the client side application in some embodiments. The determination may be based on various relevant factors such as for instance whether the destination device has sufficient computing power processing power storage battery life etc. In some cases a particular destination device may be technically capable of compressing and or encrypting data but may still pass the data to an intermediate processing module e.g. to extend battery life of the source device to allow the destination device to perform other tasks to avoid affecting other operations of the destination device etc. .

If the destination device does not have sufficient capability the data may be passed at to an intermediate processing module e.g. module described above in reference to . The data may be passed using channel encryption with for example a secure socket layer SSL connection between the destination storage and the intermediate processing module.

The data may then be decrypted at at the intermediate processing module. Decryption may utilize various appropriate algorithms and or tools. In some embodiments the data may be decrypted using the private or default key described above in reference to processes and as appropriate. The data may then be decompressed at at the intermediate processing module. Such decompression may utilize various appropriate tools and or algorithms to restore the data to its original format.

If process determines at that the destination device has sufficient processing capability the data may be decrypted at at the destination device. The decompressed data may then be decompressed at at the destination device. As above the decryption and decompression may be performed using various appropriate algorithms and or tools. The decryption may be performed block by block or a whole file or folder may be decrypted. In addition the decryption may be accomplished using the private or default key.

Process then provides at the decrypted and decompressed data to the destination device. After providing the data the process ends. If the decryption and decompression operations are performed at the destination device e.g. a user device the unlocked data may be moved to local storage passed to a particular application running on the destination device or otherwise made available to the destination device as appropriate. If the decryption and decompression operations are performed at the intermediate processing module the decompressed decrypted data may be passed to the destination device from the intermediate processing module using channel encryption or some other secure way.

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders.

Process may begin for instance when a communication channel has been opened as described above in reference to . Process may then determine at whether the data will be processed at the destination device. The determination may be made as described above in reference to . If process determines that the data will not be processed at the destination device i.e. when the data will be processed at the intermediate processing module the process may open at a communication channel with the intermediate processing module. Such a channel may be opened in a similar manner to that described above in reference to . Next the process may send at account information to the intermediate processing module. The account information may include the private or default key user data e.g. user name and password and or other data e.g. various flags information regarding the user device etc. .

The process may then receive at data from the intermediate processing module. Such data may be received block by block as a complete file or folder etc. Next the process may receive at an indication that the transfer of data is complete.

If process determines at that the data will be processed at the destination device the process may receive at the data from the destination storage. The data may be received block by block as a complete file or folder etc. Such data may be received for instance over the previously opened communication channel. Next the process may decrypt at the data. The process may then decompress at the data. The process may then receive at an indication that the transfer is complete.

Finally after receiving at or an indication that the transfer is complete the process may close at any open communication channel s . Alternatively the channel s may be left open to allow transfer of additional data e.g. when transferring multiple files or folders at one time . The transferred data may be used in various different ways by the user device e.g. placed in storage provided to an application etc. .

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders.

Process may begin for instance when a communication channel has been opened as described above in reference to operation of process . Process may then receive at account information from the destination device. The account information may include the private or default key user data e.g. user name and password and or other data e.g. various flags information regarding the user device etc. . The process may then extract at the key user data and or other data as appropriate from the concatenated string. Next the process may open at a communication channel with the destination storage. Such a channel may be opened in a similar manner to that described above in reference to .

The process may then receive at data from the destination storage. Such data may be received block by block as a complete file or folder etc. Next the process may decrypt at and decompress at the data. The process may then send at the decompressed decrypted data to the user device. Next the process may receive at from the destination storage an indication that the transfer is complete. Process may in turn send at to the destination device an indication that the transfer is complete. Next the process may close at any open communication channels. As above the channel s may alternatively be left open to allow transfer of additional data e.g. when transferring multiple files or folders at one time .

The process may then delete at all data received from the destination device including the private or default key and the transferred data and end. In this way no data is exposed by the intermediate processing module.

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders.

Process may begin for instance when a communication channel has been opened as described above in reference to . Process may then determine at whether the data will be processed at the destination device. The determination may be made as described above in reference to . If process determines that the data will not be processed at the destination device i.e. when the data will be processed at the intermediate processing module the process may open at a communication channel with the intermediate processing module. Such a channel may be opened in a similar manner to that described above in reference to . Next the process may send at data to the intermediate processing module.

If process determines at that data will be processed at the destination device the process may send at data to the destination device. Such data may be sent for instance over the previously opened communication channel. The data may be sent in a block by block fashion as a complete file or folder etc. Next after sending at or the data the process may send at an indication to the destination device and or intermediate processing module as appropriate that the transfer is complete.

The process may then close at any open communication channels. Alternatively the channel s may be left open to allow transfer of additional data e.g. when transferring multiple files or folders at one time .

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders.

Next the process may receive at requested data from the destination storage or intermediate processing module . In some embodiments data may be stored to the destination storage using an intermediate format that allows the data to be transformed as appropriate to be accessible to a particular destination device. The process may then determine at whether the requested data is in a format compatible with the destination device. Such a determination may be based on various appropriate factors e.g. the type of data the type of destination device the type of device used to generate the data etc. .

If data received from the server is not in a format matching the destination device the process may transform at the data into a proper format compatible with the destination device. The transformation may involve various appropriate operations e.g. the data may be reorganized reformatted etc. . The transformation may be performed by for example a client side application e.g. application described above in reference to running on a user device e.g. user device described above in reference to .

After transforming at the data or determining at that the data is in a format compatible with the destination device process may provide at the data to the destination device.

The ability to restore data in different formats is beneficial as it allows information to be easily accessible from numerous types of devices e.g. contacts from a first type of Smartphone may be restored to a second type of Smartphone .

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders.

Next the process may receive at a request to generate a new account. The process then may receive at a username. The process then may receive at a password for the user. Such a username and password may be supplied by the user and entered in any appropriate way e.g. using a keyboard touchscreen etc. .

The process may then determine at whether the user prefers to use a private key. Such a determination may be at least partly based on data entered by the user e.g. a selection of a private key option instead of a default key option . If the process determines that the user does not desire to use a private key the process may retrieve at a default key otherwise the process may receive at the private key from the user. In either case the process then may receive at various user settings. Such settings may include user preferences e.g. automatic backup frequency and or other appropriate information. Next the process may generate and store at client side user data. Finally the process may generate and store at server side user data. Such client side and or server side data may include information such as the username password private key biographical information name address etc. and or other appropriate information.

One of ordinary skill in the art will recognize that process may be performed in various appropriate ways without departing from the spirit of the invention. For instance the process may not be performed as one continuous series of operations in some embodiments. In addition the process may be implemented using several sub processes or as part of a larger macro process. Furthermore various processes may be performed concurrently sequentially or some combination of sequentially and concurrently. Moreover the operations of the process may be performed in different orders.

Process may begin when a manufacturing facility generates a computer program product for use by consumers. As shown the process may define at sets of instructions for implementing a communication module e.g. communication module described above in reference to . In some cases such sets of instructions are defined in terms of object oriented programming code. For example some embodiments may include sets of instructions for defining classes and instantiating various objects at runtime based on the defined classes. The process may then define at sets of instructions for implementing a compression module e.g. compression module described above in reference to .

Next process may define at sets of instructions for implementing an encryption module e.g. encryption module described above in reference to . Process then may define at sets of instructions for implementing a verification module e.g. verification module described above in reference to . Finally the process may write at the sets of instructions to a non volatile storage medium.

One of ordinary skill in the art will recognize that the various sets of instructions defined by process are not exhaustive of the sets of instructions that could be defined and stored on a computer readable storage medium for a destination storage application incorporating some embodiments of the invention. In addition the process is a conceptual process and the actual implementations may vary. For example different embodiments may define the various sets of instructions in a different order may define several sets of instructions in one operation may decompose the definition of a single set of instructions into multiple operations etc. In addition the process may be implemented as several sub processes or combined with other operations within a macro process.

Many of the processes and modules described above may be implemented as software processes that are specified as at least one set of instructions recorded on a non transitory storage medium. When these instructions are executed by one or more computational elements e.g. microprocessors microcontrollers Digital Signal Processors DSPs Application Specific ICs ASICs Field Programmable Gate Arrays FPGAs etc. the instructions cause the computational element s to perform actions specified in the instructions.

Computer system may be implemented using various appropriate devices. For instance the computer system may be implemented using one or more personal computers PC servers mobile devices e.g. a Smartphone tablet devices and or any other appropriate devices. The various devices may work alone e.g. the computer system may be implemented as a single PC or in conjunction e.g. some components of the computer system may be provided by a mobile device while other components are provided by a tablet device .

Computer system may include a bus at least one processing element a system memory a read only memory ROM other components e.g. a graphics processing unit input devices output devices permanent storage devices and or a network connection . The components of computer system may be electronic devices that automatically perform operations based on digital and or analog input signals. For instance the various example software modules described above in reference to may be at least partially implemented using sets of instructions that are run on computer system .

Bus represents all communication pathways among the elements of computer system . Such pathways may include wired wireless optical and or other appropriate communication pathways. For example input devices and or output devices may be coupled to the system using a wireless connection protocol or system. The processor may in order to execute the processes of some embodiments retrieve instructions to execute and data to process from components such as system memory ROM and permanent storage device . Such instructions and data may be passed over bus .

ROM may store static data and instructions that may be used by processor and or other elements of the computer system. Permanent storage device may be a read and write memory device. This device may be a non volatile memory unit that stores instructions and data even when computer system is off or unpowered. Permanent storage device may include a mass storage device such as a magnetic or optical disk and its corresponding disk drive .

Computer system may use a removable storage device and or a destination storage device as the permanent storage device. System memory may be a volatile read and write memory such as a random access memory RAM . The system memory may store some of the instructions and data that the processor uses at runtime. The sets of instructions and or data used to implement some embodiments may be stored in the system memory the permanent storage device and or the read only memory . For example the various memory units may include instructions for authenticating a client side application at the server side application in accordance with some embodiments. Other components may perform various other functions. These functions may include interfacing with various communication devices systems and or protocols.

Input devices may enable a user to communicate information to the computer system and or manipulate various operations of the system. The input devices may include keyboards cursor control devices audio input devices and or video input devices. Output devices may include printers displays and or audio devices. Some or all of the input and or output devices may be wirelessly or optically connected to the computer system.

Finally as shown in computer system may be coupled to a network through a network adapter . For example computer system may be coupled to a web server on the Internet such that a web browser executing on computer system may interact with the web server as a user interacts with an interface that operates in the web browser.

As used in this specification and any claims of this application the terms computer server processor and memory all refer to electronic devices. These terms exclude people or groups of people. As used in this specification and any claims of this application the term non transitory storage medium is entirely restricted to tangible physical objects that store information in a form that is readable by electronic devices. These terms exclude any wireless or other ephemeral signals.

It should be recognized by one of ordinary skill in the art that any or all of the components of computer system may be used in conjunction with the invention. Moreover one of ordinary skill in the art will appreciate that many other system configurations may also be used in conjunction with the invention or components of the invention.

Moreover while the examples shown may illustrate many individual modules as separate elements one of ordinary skill in the art would recognize that these modules may be combined into a single functional block or element. One of ordinary skill in the art would also recognize that a single module may be divided into multiple modules.

While the invention has been described with reference to numerous specific details one of ordinary skill in the art will recognize that the invention can be embodied in other specific forms without departing from the spirit of the invention. For example several embodiments were described above by reference to particular features and or components. However one of ordinary skill in the art will realize that other embodiments might be implemented with other types of features and components. One of ordinary skill in the art would understand that the invention is not to be limited by the foregoing illustrative details but rather is to be defined by the appended claims.

