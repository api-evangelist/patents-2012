---

title: System and methods for management virtualization
abstract: A method of executing an original agent application as a virtual agent, the method comprising encapsulating an original agent in a container file to produce a virtual agent; providing the virtual agent to an endpoint machine; and executing the virtual agent, within the container, on the endpoint machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509553&OS=09509553&RS=09509553
owner: INTIGUA, INC.
number: 09509553
owner_city: Newton
owner_country: US
publication_date: 20120813
---
With development of computing systems management of large scale software installations has become a challenging task. Modern computing systems may involve distributed software modules and or applications e.g. in an organization community or data center. Management and maintenance of large scale and or distributed software applications or systems typically involve tasks such as update procedures monitoring version control etc. For example management of software installations in an organization may include updating software modules or monitoring various aspects on a large number of servers and or user computers.

In another example management of a virtual machine VM environment may involve management of a large number of virtual machines. The term virtual machine VM generally refers to an isolated operating system also referred to as a guest operating system that runs on a physical machine. A VM may be a software implementation of a machine e.g. a computer that executes programs as if it were a physical computer having its own resources e.g. a central processing unit CPU memory e.g. random access memory RAM hard disk and network interface cards NICs .

A number of VMs may be and typically are executed on a single hardware machine. For example a number of different operating systems e.g. Windows Unix and Mac OS may run on a single hardware machine. One of the essential characteristics of a VM is that applications programs or services running inside a VM are limited to or by the resources provided by the VM. Accordingly VM technology offers a number of advantages. For example consolidation may be realized by utilizing a single hardware server in order to execute a number of operating systems. Other advantages may be redundancy and fail over.

However management of large scale computing software and or VM systems may pose a number of challenges. For example various services e.g. backup monitoring and or software updates security compliance configuration management inventory management software distribution etc. may need to be managed and or performed for or even on each computer in an organization or on each VM installed on a single computer or on a number of hardware machines.

Additionally agent software needs to be installed upgraded configured and monitored for failures. Once a failure occurs a troubleshooting process which is often manual is required. In addition monitoring for agent application resource consumption is required and when needed resolving of excessive resource consumption. All these management services are performed very often by distributed computing software compromising servers and agent on each endpoint.

It will be appreciated that for simplicity and clarity of illustration elements shown in the figures have not necessarily been drawn accurately or to scale. For example the dimensions of some of the elements may be exaggerated relative to other elements for clarity or several physical components may be included in one functional block or element. Further where considered appropriate reference numerals may be repeated among the figures to indicate corresponding or analogous elements.

In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of the invention. However it will be understood by those skilled in the art that the present invention may be practiced without these specific details. In other instances well known methods procedures and components modules units and or circuits have not been described in detail so as not to obscure the invention. Some features or elements described with respect to one embodiment may be combined with features or elements described with respect to other embodiments. For the sake of clarity discussion of same or similar features or elements may not be repeated.

Although embodiments of the invention are not limited in this regard discussions utilizing terms such as for example processing computing calculating determining establishing analyzing checking or the like may refer to operation s and or process es of a computer a computing platform a computing system or other electronic computing device that manipulates and or transforms data represented as physical e.g. electronic quantities within the computer s registers and or memories into other data similarly represented as physical quantities within the computer s registers and or memories or other information non transitory storage medium that may store instructions to perform operations and or processes. Although embodiments of the invention are not limited in this regard the terms plurality and a plurality as used herein may include for example multiple or two or more . The terms plurality or a plurality may be used throughout the specification to describe two or more components devices elements units parameters or the like. Unless explicitly stated the method embodiments described herein are not constrained to a particular order or sequence. Additionally some of the described method embodiments or elements thereof can occur or be performed simultaneously at the same point in time or concurrently.

Embodiments of the present invention may provide a system and method for management of a system such as for example datacenter private hybrid or public cloud in an environment of virtual and physical machines by virtualized management agents. Original management agents such as for monitoring backup performance antivirus compliance automation security configuration and or other agents may be virtualized and or run virtually on machines for example remote machines for example machines that may be included in datacenters environment. A system according to embodiments of the present invention may control a virtual infrastructure of virtual agents that may run virtually on machines in the datacenters environment. The execution of the virtual agents may be done based on pre defined policies. Embodiments of the present invention may provide system management based on virtual agents without the requirement to install and configure agents on each machine. This may save for example time and operational overhead costs so as shortening time to market improve and protect application performance and uptime and ensure and simplify compliance.

An endpoint machine may be running on any available Operating System for example Windows 2000 Windows 2003 Windows 2008 Linux from multiple distributions Unix HP UX AIX etc. These Operating Systems may be of 16 bit architecture 32 bit architecture and 64 bit architecture.

Additionally a system and method according to embodiments of the present invention may monitor for example continuously activity of virtual agents. Embodiments of the present invention may enable controlling of consumption of resources across the infrastructure of virtual agents and thus for example enable optimization of application performance.

In some embodiments of the present invention tracking and or management of the entire virtual management infrastructure may be performed from one central console.

Although a virtual agent as described herein may function and behave as if it was installed on each machine the operation or execution of a virtual agent may be decoupled from the underlying operating system. Otherwise described an agent may be executed on a machine physical or virtual machine without being installed on the machine as done in prior art systems and methods.

Virtually executing virtual agents instead of installing agent software on thousands of machines may drastically cut down agent management overhead. For example agent upgrade processes may include a simple replacing of a file on the endpoint machine and or may be performed according to embodiments of the invention for example with a mouse click or other command input by an input device from a user. Other operations e.g. rebooting scripting logging on and off servers coordinating change management windows testing for agent conflicts and manual installations when scripting tools fail may all be avoided using embodiments of the invention. In an embodiment user defined policies may control virtual agents operation or deployment e.g. in order to proactively optimize application performance and avoid agent storms.

Reference is now made to which is a schematic illustration of a system for datacenters environment management according to embodiments of the present invention. System may manage datacenters and in an environment of virtual and physical data centers and . Data centers and may include endpoint virtual and or physical machines that may be managed by virtual agents. As discussed in detail below embodiments of the present invention may enable execution of virtual agents at endpoint machines by containers such as for example package files that include the virtual agents without a requirement to install the virtual agents in the endpoint machines. System may include a management unit a console virtualization management servers and core servers . A container may include a plurality of virtual agents and the plurality of virtual agents may be executed within a single container file on the endpoint machine.

Management unit may manage console virtualization management server and the virtual environment including infrastructure of virtual agents and or virtual machines for example endpoint machines. Management unit may store images of the virtual agents policies to control the virtual agents data about the virtual infrastructure of virtual agents and or virtual machines data about the physical infrastructure of environment and or any other data that may be required for example in order to manage the virtual infrastructure of virtual agents. In some embodiments a virtual agent may be automatically joined to the managed environment upon executing the virtual agent on the endpoint machine and automatically disjoining the virtual agent from the managed environment upon removing the endpoint machine from an installation in environment .

Console may enable a user to control and manage system via management unit . Console may enable users to view monitor define and manage system and environment from console for example by a graphical user interface such as for example a dashboard for example displayed on a display not shown that may be included in console . A user may control and input commands to console by any interface and or input device such as a keyboard a mouse a touch screen a virtual pen and or by any other suitable manner.

Management unit may enable a user to create a library of virtual agents. Management unit may convert original agent installers which may be uploaded to management unit by a user into virtual agents. The virtual agents may be stored for example in a designated storage library in management unit . As described in more detail below the virtual agents may be encapsulated in a virtual agent container may also be called package which may include in addition to the virtual agent a configuration for execution of the virtual agent at the endpoint machine for example without installing the virtual agent in the endpoint machine. A virtual agent container file may include and or wrap one or more virtual agents for example multiple virtual agents and their configurations.

Virtualization management servers may include any third party software for management of virtual machines. Any number of virtualization management servers may be included in system and the invention is not limited in this respect.

Core servers may push the virtual agent container file to relevant endpoint machines for example upon a command received from a user. Upon such command management unit may share container files with core servers which may push the container files to relevant endpoint machines. Virtual datacenters may be managed by hypervisors . Communication between core servers and virtual endpoint machines may be facilitated through hypervisor for example without the need for direct network connectivity between core servers and endpoint virtual machines . Physical endpoint machines and virtual endpoints may communicate with core servers by standard network connections. Any number of core servers and any number of datacenters and may be included and the invention is not limited in this respect. Each core server may support up to about 2500 virtual agents. Each management unit may support and or manage a number of core servers according to the number of virtual agents in the datacenters environment.

Core servers may further enable controlling the virtual agents executed at the endpoint machines inside the container e.g. not installed on the operating system. The execution of the virtual agents at the endpoint machines inside the container may be decoupled from the operating system of the endpoint machine such as for example the management virtual deployment upgrades downgrades troubleshooting and termination of the virtual agents may be performed in the container independently from the operating system. Components of the container may monitor processes performed by a virtual agent detect failures and or remedy failures in the operation of the virtual agent for example in real time. Additionally components of the container may communicate with hypervisor and or coordinate operations with operations performed by other virtual agents for example in other virtual endpoint machine supervised by the same hypervisor . The coordination may resolve and or prevent performance bottlenecks. Management actions performed by modules components of the container may be executed based on policies stored in the container and or in management unit which may be predefined or defined during operation for example by a user. By decoupling execution of agents from the operating system in the described manners users may save time and risk of agent deployments upgrades and troubleshooting.

Reference is now made to which is a schematic illustration of a virtual agent container according to embodiments of the present invention. Container may constitute a package or a sandbox that may include agent files together with a virtual operating system OS and other components as described herein. Container file may be for example a .vai file encapsulating the original agent files which may include all the components of the original agent such as an executable file DLL files registry files configuration files and or any other components of the original agent. In addition container may include components which enable the virtual agent to function without being installed on the local operating system OS of the endpoint machine. In addition container may include additional configurations such as for example relation of the virtual agent to endpoint machines and additional configurations that may be configured for each virtual agent or for a group of virtual agents. As described herein a user may configure these parameters for each virtual agent and for example may create templates of such configurations on console .

Virtual OS may enable container to create a logical separation between the operating system of the endpoint machine and the virtual agent processes. The container may be configured to isolate the execution of the virtual agent from the operating system executed on the endpoint machine. According to some embodiments isolation of the execution of the virtual agent may include at least one of encapsulating substantially all configurations related to the virtual agent into the container file monitoring by the container resources used by the virtual agent intercepting by the container system requirements made by the virtual agent and enforcing constraints on an execution of the virtual agent according to a policy. The virtual agent may be fully controlled within container and may function without using the registry or services of the endpoint machine. Once an agent is executed within the container virtual OS manages the system requirements of the execution intercepts system requirements made by the virtual agent and or redirects some system requirements to the virtual registry file service and some to the local OS of the endpoint machine. Virtual OS may include a virtual registry virtual services and virtual files . Container may further include an OS performance probe a virtual OS performance analyzer an OS activity probe a virtual agent profiler a virtual agent resource consumption manager and hypervisor probe .

Container may enforce performance constraints determined by predefined policies. OS performance probe may monitor performance load and condition of the local OS . Virtual OS performance analyzer may detect consumption of resources of virtual OS . Virtual OS performance analyzer may compare and or balance the resource consumption of virtual OS and the local OS resource consumption monitored by OS performance probe . Based on the comparison virtual OS performance analyzer may decide when to decrease or increase the activity speed of a virtual agent for example in order to comply with a performance policy of this virtual agent. In case a virtual agent exceeds the allowed consumption of resources according to the policy virtual OS performance analyzer may notify virtual agent resource consumption manager . Virtual agent resource consumption manager may decrease or increase the activity speed of a virtual agent to fit the required resource consumption. Virtual agent resource consumption manager may intercept and throttle down specific system calls made by the virtual agent in relation to the source of contention. It may for example be alerted of a CPU contention and throttle down CPU intensive system calls. It may also be alerted of I O contention and therefore detect I O intensive system calls and throttle them down. Another example is that the virtual agent resource consumption manager may also be alerted of memory shortage on the OS level and memory overconsumption in the virtual agent and it may decide to limit memory consumption or to stop one or more processes of the virtual agent.

Container may also enforce performance constraints determined by predefined policies on operating systems services. For example during a backup significant resources may be consumed by a Volume Shadow Service VSS or daemon. The virtual agent resource consumption manager may intercept and throttle down such services.

Virtual agent resource consumption manager may receive commands from virtual OS performance analyzer or from core server to throttle activity of a virtual agent e.g. slow down the activity speed of a virtual agent in order to consume less computing power produce less intense input output activity and or otherwise reduce consumption of resources.

Hypervisor probe may provide virtualization awareness in the sense described herein. Hypervisor probe may communicate with hypervisor and or coordinate operations with operations performed by other virtual agents for example in other virtual endpoint machine supervised by the same hypervisor . The coordination may resolve and or prevent performance bottlenecks. Hypervisor probe may be able to collect performance information from the host virtual machine the virtual machine on which the virtual agent is applied and from other virtual machines supervised by the hypervisor such as CPU consumption Input Output load memory utilization and or any other required performance data.

OS activity probe may detect malfunctions on the local OS such as a non responsive or shut OS service which may harm the functioning of the virtual agent. Virtual agent profiler may estimate average and maximum resource consumption of a virtual agent so that the real resources consumption by the virtual agent may be assessed by a user.

Reference is now made to which is a schematic illustration of a system for datacenters environment management according to embodiments of the present invention which shows management unit in more detail. Management unit may include an Application Programming Interface API a database a virtual agents generator a virtual agents library a policy manager communications channel and virtualization management servers connectors . Management unit may also include and or interface with console described above by which a user may monitor and manage system . Console may include a graphical user interface that may communicate with management unit via application programming interface by which a user may view monitor and manage system .

Management unit may act as a central management server for deployment configuration auditing and or performing any other suitable operation for supervision and or execution of virtual management agents across the datacenters supervised by management unit . Management unit may constitute a management center for management of multiple virtualization management servers and multiple physical and virtual datacenters via core servers . Virtualization management servers connectors may include a plug in mechanism to integrate with virtualization management servers which may be for example third party virtualization management servers such as VMware vCenter Microsoft Hyper V Management Server Oracle Virtualization Citrix Xen KVM Virtual Box Parallels Linux Containers Linux zones Red Hat Enterprise Virtualization and or any other suitable virtualization management servers. Communications with core servers may be performed via communications channel .

A user may log in to management unit via a web browser and then the user may configure and monitor system by the graphical user interface on console . Once a user applies settings and configurations to system the management unit may process the settings and configurations and send the relevant commands to core servers . Core servers may interact via a hypervisor or directly with virtual and or physical endpoint machines to apply the settings and commands. Via console a user may apply settings and configurations to specific servers datacenters or machines or may apply a policy e.g. a set of automatic rules for setting and or configuring a group of servers datacenters or machines. For example a user may determine which virtual agents should be applied to which servers datacenters or machines. For example a user may determine management policies for cases of virtual agent failure of an operating system failure. For example a user may determine performance requirements such as memory computing power and or bandwidth consumption and or any other suitable performance requirements for virtual agents. Policy manager may compile management policies and may apply corresponding tasks to the relevant core servers which may apply the tasks on the relevant endpoint machines. Additionally or alternatively a user may partially or fully automate management unit by developing and integrating software into management unit for example by a software development kit SDK that may be included in management unit . Policies applied by a user and or by policy manager may include for example deployment policies for deployment of virtual agents performance protection policies and proactive management policies.

Proactive management policies applied by a user via console may include policies for troubleshooting problems such as for example errors in the original agent errors in the configuration errors in a virtual agent process errors due to external factors and or interferences and or any other problem that may occur. Management unit may detect virtual agent failures and or errors for example via core servers . Management unit may cure the detected problems according to pre defined policies of troubleshooting by a user. A predefined troubleshooting policy may include for example restarting a virtual agent restarting an OS service such as a Windows Management Instrumentation WMI and or any other suitable policy. Additionally when problems occur management unit may send to console alerts that may console may be displayed and or sounded for a user to be notified.

Deployment policies applied via console may apply specific virtual agents to certain types of endpoint machines. These policies may be dynamic such that when a virtual machine of a certain type joins the environment predetermined agents for this type of virtual machines may be applied to this virtual machine automatically e.g. without any further user involvement. For greater control the user may instruct that a personal approval will be required before certain operations and or implementations.

By console the user may define deployment policies to schedule and control the virtual agents deployments in endpoint machines. Users may define in policies which virtual agents and which versions are to be applied to which servers machines groups types. Performance protection policies applied via console may control virtual agents resource consumption including CPU Memory and Input Output performance for example to protect applications from excessive resource consumption. Performance thresholds determined by performance protection policies may be included in the virtual agent container.

By hypervisor probe and resource consumption manager real time performance statistics from operating systems of endpoint machines and from hypervisors may be collected and combined which may enable accurate monitoring of resource consumption across the datacenters in the virtual environment of virtual agents and virtual machines. In case it is detected by virtual OS performance analyzer that the resource consumption of a virtual agent exceeds the pre defined thresholds as determined in the policy virtual agent resource consumption manager may throttle down the resource consumption of the virtual agent or may reschedule the activities of the virtual agent in order to free up sufficient resources for the application to meet the policy requirements. Policy parameters may be changed by a user at any time via console . The change may be pushed for example automatically upon a command from a user to the relevant virtual agents.

In order to manage virtual agents by console a user may be required to enter identification such as for example a user name and password which may be stored for example encrypted in database . Access to virtual agents may be provided according to authorizations of a specific user. Additionally communications between core server and management unit may be authenticated and or encrypted such as by SSL certificates .

Once executed at an endpoint machine within container the virtual agents are independent in the sense they may continue functioning even if core server and or management unit fail. In such case management features such as version changes of the virtual agent may be disabled until core server and or management unit function. Both server and or management unit may be restarted upon failure.

Console may include an uninstall feature which may uninstall and or halt operation of the managed virtual agents and or may restart corresponding non virtual agents if such are installed in the endpoint machine. The uninstall feature may uninstall the managed virtual agents from virtual endpoint machines also when the virtual endpoint machines are turned off.

Database may store data about servers datacenters and or endpoint machines data about virtual agent container associations between servers datacenters and or endpoint machines and virtual agent container and management policies data. In addition database may store events and logs generated by endpoint machines. Database may include a relational database to relate data about endpoint machines with data about virtual agents. Data about endpoint machines may include name Internet Protocol IP address operating system in use and or any additional suitable data. Database may also collect and or store events and logs from endpoint machines process the events and logs and generate reports for example upon a user s request or periodically. The generated reports may be in a fully searchable format.

For example database may generate audit reports reports about endpoint machines excessive resource consumption events virtual agent predicted performance and or any other report based on data collected and or stored in database . Audit reports generated by database may include logs of changes in the managed environment including the time and user identification. Reports about endpoint machines may present endpoint machines in the managed environment that are managed or not managed by management unit . In some embodiments any endpoint machine in the environment may be automatically controlled and or manageable by management unit . In some embodiments an endpoint machine in the managed environment may be unmanageable by management unit because of a problem error or failure that may be solved by a troubleshooting policy or by a user through console . Reports about endpoint machine may enable a user to identify such problems and solve them. Reports about excessive resource consumption events may constitute an events log and or present for example events that triggered excessive resource consumption by virtual agents. The report may also present data about initiated proactive actions for moderating these events for example by management unit . Reports about virtual agent predicted performance may predict resource consumption by virtual agents before pushing virtual agents to endpoint machines. For example management unit may detect that a particular virtual agent will consume a lot of memory. As a result management unit and or the user may compute that a certain number and or percentage of machines may experience memory shortage.

As described above management unit may enable a user to create a library of virtual agents for example by virtual agents generator . Virtual agents generator may convert original agent installers which may be uploaded to management unit by a user into virtual agents. The virtual agents may be stored for example in virtual agents library in management unit . The virtual agents may be encapsulated in a virtual agent container which may include in addition to the virtual agent a configuration for execution of the virtual agent at the endpoint machine for example without installing the virtual agent in the endpoint machine. Virtual agents library may store in addition to the converted virtual agents configuration of the virtual agents for execution on endpoint machines for example as configured by a user. The virtual agents together with corresponding configurations may be included in virtual agent container files which may be stored in virtual agents library . As described herein a virtual agent container file may be pushed to an endpoint machine by core server for example upon a command by a user for example to apply a virtual agent container to a target server or virtual machine. Then the virtual agent container may be executed at the endpoint machine from within the container without being installed on the endpoint machine.

As discussed above system and the virtual agents may be monitored and managed through console including a dashboard and or a graphical user interface. Console may display data about managed endpoint machines virtual agents which are running on the endpoint machines and proactive management policies which are applied to each machine. Console may enable a user to create and embed in management unit management and performance policies for the virtual agents. In some embodiments of the present invention viewing controlling managing and or any other kind of accessing into a virtual agent may be performed for example exclusively by a user identified as an owner and or any kind of administrator of the virtual agent.

Management unit may detect all the machines across the data centers and in environment . Management unit may collect and store in database real time information about statuses of endpoint machines operating system used on each machine virtual agents running on each machine versions of virtual agents and any other suitable data required for managing system and the virtual agents.

In order to deploy virtual agents to endpoint machines a user can select a virtual agent and push it to substantially any number of selected endpoint machines by commands via console . The virtual agent may then be executed on the selected machines as described herein and deliver all the functionality of the original agent without actually being installed on the endpoint machine and without incurring excessive costs and waste of time associated with mass agent deployments on each machine separately. Additionally via console a user may schedule in advance specific time slots for virtual agents to be pushed to their endpoint machine automatically.

For virtual datacenters pushing of virtual agents by core server to endpoint machines may be performed whether the virtual endpoint machine is powered on or powered off. In case the virtual endpoint machine is powered off during the pushing of the virtual agent the virtual agent is already included and may be executed in the endpoint machine once the machine is powered on.

In order to upgrade a version of a virtual agent a user may upload the selected version of the original agent installer files to management unit which as described above may convert the original agent installer files to a virtual agent and may distribute the virtual file to core managers . Then core manager may push the virtual agent to all the relevant endpoint machines. The pushing may be done upon a command form a user via console . Reverting back to a previous version may be done in a similar manner.

Console may display virtual agents applied to endpoint machines and non virtual agents installed on the same endpoint machines. When a virtual agent is applied to an endpoint machine the installed agent may be deactivated. The virtual agent container may copy configurations from the installed agent to the container and or the virtual agent may be executed with configurations of the installed agents. The non virtual installed agent may not be removed from the machine and may be reactivated if desired. This side by side architecture of virtual and non virtual agents may allow users to implement the use of system gradually and with minimal risk.

Reference is now made to which is a schematic flowchart illustrating a method for datacenters environment management according to embodiments of the present invention. As indicated in block the method may include encapsulating an original agent in a container to produce a virtual agent for example according to embodiments of the present invention as described in detail herein. As indicated in block the method may include providing the virtual agent to an endpoint machine for example according to embodiments of the present invention as described in detail herein. As indicated in block the method may include executing the virtual agent within the container on the endpoint machine for example according to embodiments of the present invention as described in detail herein.

It should be understood that the systems described above may provide multiple ones of any or each of those components and these components may be provided on either a standalone machine or in some embodiments on multiple machines in a distributed system. The systems and methods described above may be implemented as a method apparatus or article of manufacture using programming and or engineering techniques to produce software firmware hardware or any combination thereof. In addition the systems and methods described above may be provided as one or more computer readable programs embodied on or in one or more articles of manufacture. For example some embodiments may be provided in a computer program product that may include a non transitory machine readable medium stored thereon instructions which may be used to program a computer or other programmable devices to perform methods as disclosed herein. Embodiments of the invention may include an article such as a computer or processor readable non transitory storage medium such as for example a memory a disk drive or a USB flash memory encoding including or storing instructions e.g. computer executable instructions which when executed by a processor or controller cause the processor or controller to carry out methods disclosed herein.

The term article of manufacture as used herein is intended to encompass code or logic accessible from and embedded in one or more computer readable devices firmware programmable logic memory devices e.g. EEPROMs ROMs PROMs RAMs SRAMs etc. hardware e.g. integrated circuit chip Field Programmable Gate Array FPGA Application Specific Integrated Circuit ASIC etc. electronic devices a computer readable non volatile storage unit e.g. CD ROM floppy disk hard disk drive etc. . The article of manufacture may be accessible from a file server providing access to the computer readable programs via a network transmission line wireless transmission media signals propagating through space radio waves infrared signals etc. The article of manufacture may be a flash memory card or a magnetic tape. The article of manufacture includes hardware logic as well as software or programmable code embedded in a computer readable medium that is executed by a processor. In general the computer readable programs may be implemented in any programming language such as LISP PERL C C C PROLOG or in any byte code language such as JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.

Having described certain embodiments of methods and systems for providing consumers with codes for authorizing payment completion via mobile phone communications it will now become apparent to one of skill in the art that other embodiments incorporating the concepts of the disclosure may be used.

