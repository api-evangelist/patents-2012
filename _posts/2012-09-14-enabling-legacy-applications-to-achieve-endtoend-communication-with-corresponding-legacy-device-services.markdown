---

title: Enabling legacy applications to achieve end-to-end communication with corresponding legacy device services
abstract: Embodiments described herein enable legacy applications to achieve end-to-end communication with their corresponding device services in a host computer. To that end, one or more legacy protocol stacks are configured to interface with a component that implements and manages a Device Service Streams (DSS) application programming interface (API) which communicates through a Mobile Broadband class driver to a Device Service residing in a Mobile Broadband Interface Model (MBIM) compliant device attached to the computer. In one or more embodiments, end-to-end communication is illustratively achieved through the use of a plurality of components: a Device Services Composite Driver (DSCD), a Device Services Legacy Software Protocol Driver (DSLSPD), and a Device Services Legacy Software Protocol Controller (DSLSPC).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08959534&OS=08959534&RS=08959534
owner: MCCI Corporation
number: 08959534
owner_city: Ithaca
owner_country: US
publication_date: 20120914
---
The present utility patent application claims priority from a provisional patent application of common title inventorship and ownership. The provisional patent application which is assigned Ser. No. 61 652 633 and filed on May 29 2012 is hereby incorporated herein by reference.

The present disclosure relates generally to communication between legacy software stacks and corresponding device software when direct communication is not possible for example when an operating system of a computer no longer provides native support. More specifically the present disclosure relates to end to end communication between legacy software protocol stacks and corresponding device software through the use of a Device Service Streams DSS feature of a Mobile Broadband Interface Model MBIM .

Hardware and software technology advancements as well as increases in communication data transfer rates are often accompanied by a corresponding desire to decrease complexity. Whereas a device that previously supported multiple functions required multiple interfaces and associated requisite hardware and software many modern device implementations attempt to achieve similar functionality through multiplexing control and data traffic for those functions over a single interface. This allows device manufacturers to reduce hardware cost and to theoretically reduce software requirements because minimizing the number of interfaces translates into fewer drivers that need to be installed and loaded to operate the interfaces.

However if a software stack controlling this single interface which carries multiplexed control and data traffic for multiple device functions does not support communication with existing i.e. legacy software stacks then a promise of an overall reduction in software requirements and thereby cost may be difficult if not impossible to achieve. As used herein legacy software protocol stack denotes existing software that was previously used to communicate with like similar services on a device. Device manufacturers may be justifiably reluctant to fund a massive rewrite of legacy software in order to simply maintain the same level of functionality as was achievable in the past. This situation results in the additional backlash effect of a potential negative impact on the adoption of such technology.

Embodiments described herein enable legacy applications to achieve end to end communication with their corresponding device services in a host computer. To that end one or more legacy protocol stacks is configured to interface with a component that implements and manages a Device Service Streams DSS application programming interface API to communicate through a Mobile Broadband MB class driver to a Device Service residing in a Mobile Broadband Interface Model MBIM compliant device attached to the computer. In one or more embodiments end to end communication is illustratively achieved through the use of a system infrastructure that includes a plurality of components a Device Services Composite Driver DSCD a Device Services Legacy Software Protocol Driver DSLSPD and a Device Services Legacy Software Protocol Controller DSLSPC .

In an embodiment the DSCD is a component that is loaded by an operating system of the host computer when the system is first started or restarted. The DSCD registers a unique device interface globally unique identifier GUID with the system. The DSLSPC is another component that is loaded by the operating system when the system is first started or restarted. The DSLSPC registers with the system for one or more event notifications indicating that the MBIM compliant device has been attached to the system and that the DSCD has successfully registered its unique device interface GUID. The DSLSPC utilizes the DSS API to enumerate any Device Service Streams supported by the device that can be controlled by one or more legacy protocol stacks embodied as e.g. one or more DSLSPDs. The DSLSPC has a capability to cause multiple instances of the DSLSPD to load corresponding to the number of similar Device Service Streams supported by the MBIM device. The DSLSPD is a component that contains the functionality of a legacy protocol stack and which has the ability to communicate with the DSLSPC through the DSCD.

Operationally the DSLSPC is loaded by the operating system during a system boot process and registers to receive one or more event notifications when the MBIM device is detected. The DSCD which is illustratively a root enumerated bus driver also loaded by the system during the system boot process registers its unique device interface GUID in order to bind to the DSLSPC and establish a private API for subsequent communication. The DSCD receives messages from the DSLSPC through the private API when the MBIM device with supporting device services is detected by the DSLSPC. When the MBIM compliant device is attached to the operating system the MB class driver is loaded by the operating system to communicate with the device and a notification is received by the DSLSPC.

In an embodiment the DSLSPC uses the DSS API to enumerate the device services supported by the MBIM device. If any device services of interest are supported by the device the DSLSPC notifies the DSCD through the previously established private API. Upon receiving this notification the DSCD prepares for further messages from the DSLSPC indicating the detection of specific device services. For each different device service enumerated on the device the DSLSPC issues a message to the DSCD through the private API identifying the specific device service which causes the DSCD to create a child driver instance of the appropriate DSLSPD that is then loaded by the system. Once loaded the DSLSPD instance registers a unique device interface GUID for the desired specific legacy protocol stack thus establishing an interface available for legacy applications to utilize for end to end communication.

When the MBIM device is detached from the system a notification is received by the DSLSPC which in turn informs the DSCD through the private API. The DSCD then causes one or more departure notifications to be received by each loaded DSLSPD instance. Each DSLSPD instance responds to this notification by deregistering the unique device interface GUID for its legacy protocol stack previously registered and begins the process of unloading. The DSCD reports a change in status of its children and participates in their subsequent unloading thus tearing down the system infrastructure that enabled legacy applications to achieve end to end communication with their corresponding device services.

The memory may include a plurality of locations that are addressable by the processor and or host controller for storing software programs and data structures associated with the embodiments described herein. The processor may include logic adapted to execute the software programs and manipulate i.e. control the data structures. An exemplary processor may include single or multi core Central Processing Unit CPU Graphics Processing Unit GPU Field Programmable Gate Array FPGA and or Application Specific Integrated Circuit ASIC .

An operating system portions of which is typically resident in memory and executed by the processor functionally organizes the computer system by inter alia invoking operations in support of software programs including processes and or applications executing on the system. The software processes applications may include various processes and or applications associated with a communication arrangement and as such contain computer executable instructions executed by processor of computer system to perform functions described herein.

The operating system is illustratively organized as a series of software layers including protocol stacks organized as e.g. driver stacks. A suitable operating system may include the Linux operating system the MAC OS series of operating systems from Apple Inc. of Cupertino Calif. and the UNIX series of operating systems among others. However the disclosure herein is directed to the Microsoft Corporation Operating Systems and in particular the Windows series of operating systems from Microsoft Corp. of Redmond Wash. These systems are well known to those who develop software that interfaces with a kernel of the operating system. Except for certain of the components or modules provided by the communication arrangement the various software modules referred to herein may have been published by Microsoft Corporation.

It will be apparent to those skilled in the art that other types of processors and memory including various tangible non transitory computer readable media may be used to store and execute program instructions pertaining to the system described herein. Also while the embodiments herein are described in terms of software processes components and or applications stored in memory alternative embodiments also include those processes components and or applications being embodied as modules consisting of hardware software firmware or combinations thereof.

In one or more embodiments the software processes components and or modules including the drivers and controller described herein may be implemented as separately scheduled processes within the computer system however in an alternate embodiment the modules may be implemented as pieces of code within a single process. Communication between the modules of the computer system may thus illustratively be effected through the use of message passing shared memory or remote procedure calls RPCs between the modules. A suitable message passing shared memory and or RPC mechanism provided by the operating system to transfer information between modules processes is the Inter Process Communication IPC mechanism.

The VSP Application 1 communicates with a GPS receiver function of the device to provide various map functions to the computer . The VSP Application 2 is used to synchronize specific data in the computer with information maintained in the device . The VSP Application 3 communicates with a diagnostic VSP function of the device . Network applications communicate with a network interface function IFC of the device to provide access to an external radio network.

The network applications are interfaced with a kernel of the operating system through a Transmission Control Protocol Internet Protocol TCP IP stack and a network driver interface specification NDIS module . The NDIS in turn communicates with a network class driver . The VSP applications are interfaced with the operating system kernel by a Win32 serial application program interface API . The Win32 API in turn communicates with an instance of a VSP device driver which also registers as a virtual communication com port for applications to access. The communication path is completed by a composite USB bus driver which includes driver stacks for incoming and outgoing data and control information for each child function driver and which interfaces to a system USB driver interface USBDI of a USB host stack .

When a USB device is connected to the system or when the system is first turned on or restarted a USB host controller driver of host stack checks the I O bus for external USB devices. The host controller interrogates the devices that it finds and identifies them to the operating system. The operating system then loads the composite bus driver for the device which in turn causes the relevant child function drivers e.g. the network class function driver and VSP driver instances to be loaded into memory . The applications can then communicate with the respective peripheral functions on the device .

Removal of the device during computer operation is detected by the USB host controller driver which informs the operating system of the removal. The operating system then signals the device function and composite drivers to release their resources thereby unloading the drivers.

As noted the present disclosure is directed to end to end communication between legacy software protocol stacks and corresponding device software through the use of the Device Service Streams DSS feature of the Mobile Broadband Interface Model MBIM . Broadly stated MBIM is a well known networking protocol specification defined by the Universal Serial Bus Implementers Forum USBIF that provides a data and control transport mechanism through the use of inter alia command identifiers CIDs . MBIM also provides Device Services Streams that enables transport of various types of protocol traffic e.g. over a single interface which carries multiplexed data and control traffic for multiple device functions. It should be noted that the description of virtual serial ports VSP as the legacy software protocol stacks of the present disclosure is merely exemplary and as such the legacy software protocol stacks could embody any existing software protocol stack such as mass storage networking etc.

Embodiments described herein enable legacy applications to achieve end to end communication with their corresponding device services in a host computer. To that end one or more legacy protocol stacks may be configured to interface with a component that implements and manages a DSS API to communicate through a Mobile Broadband MB class driver to a Device Service residing in a MBIM compliant device attached to the computer. In one or more embodiments end to end communication is illustratively achieved through the use of a system infrastructure that includes a plurality of components a Device Services Composite Driver DSCD a Device Services Legacy Software Protocol Driver DSLSPD and a Device Services Legacy Software Protocol Controller DSLSPC .

In one or more embodiments the Legacy VSP Application 1 communicates with a GPS receiver device service in the device to illustratively provide various map functions to the computer . The Legacy VSP Application 2 is used to synchronize specific data in the computer with information maintained by a Sync device service. The Legacy VSP Application 3 communicates with a diagnostic device service in the device . Network applications communicate with a MBIM interface function of the device to provide access to an external radio network. The network applications an example of which is a browser are interfaced with the operating system kernel through a TCP IP stack and NDIS . NDIS in turn communicates with a MB class driver which illustratively is a Microsoft MB class driver. The legacy VSP applications are illustratively interfaced with the operating system kernel by a Win32 API. The Win32 API in turn communicates with an instance of VSP DSLSPD which also registers as a virtual com port for legacy applications to access e.g. when communicating with a corresponding device service on the device .

In an embodiment the DSCD is a component that is loaded by the operating system of the host computer when the system is first started or restarted. The DSCD registers a unique device interface globally unique identifier GUID with the operating system. The DSLSPC is another component that is loaded by the operating system when the system is first started or restarted. The DSLSPC registers with the system for one or more event notifications indicating that the MBIM compliant device has been attached to the system and that the DSCD has successfully registered its unique device interface GUID. The DSLSPC utilizes the DSS API to enumerate any Device Service Streams supported by the device that can be controlled by one or more legacy protocol stacks embodied as e.g. one or more DSLSPDs . The DSLSPC has a capability to cause multiple instances of the DSLSPD to load corresponding to the number of similar Device Service Streams supported by the MBIM device . The DSLSPD is a component that contains the functionality of a legacy protocol stack and which has the ability to communicate with the DSLSPC through the DSCD .

Specifically the DSLSPD instances communicate with DSLSPC through DSCD . The DSLSPC handles conveying data and translating control plane information to appropriate MBIM DSS CIDs for transport through the MB class driver e.g. via DSS API to the individual device services on the device . The MB class driver communicates with the MBIM compliant device through a composite USB bus driver or USB generic parent driver e.g. of USB host stack depending on whether the MBIM device is also a composite device. The USB bus driver or generic parent driver illustratively includes driver stacks for incoming and outgoing data and control information for each child function driver and interfaces to a system USB driver interface USBDI of host stack .

According to one or embodiments during a system boot process when e.g. the system is first turned on or restarted the DSLSPC is loaded by the operating system and utilizes one or more user mode DSS APIs to register for one or more event notifications when the MBIM device is detected as having arrived or departed. The DSCD is loaded by the operating system as a root enumerated bus driver i.e. a driver that is loaded at power on during system boot process and registers a specific unique device interface GUID to bind with and inform the DSLSPC of its presence and to establish a private API channel private API for subsequent communication. As used herein the private API is illustratively embodied as an interface that provides an exchange of function pointers and or private I O control codes IOCTLs between e.g. the DSLSPC and DSCD .

When a USB device such as MBIM compliant device is attached to the system or when the system is first turned on or restarted USB host controller driver of host stack illustratively checks the I O bus for external USB devices . The host controller illustratively enumerates the devices that it finds and identifies them to the operating system . The operating system then loads the composite USB bus or generic parent driver for the device which in turn causes the MB class driver and any other relevant child function drivers to be loaded into memory . When the MB class driver is loaded by the operating system to operate and communicate with the device a notification is received by the DSLSPC . The DSLSPC utilizes the DSS API e.g. a Microsoft Device Service Extensions API to enumerate any VSP device services supported by the MBIM device . If any VSP device services of interest are detected as being supported by the device the DSLSPC notifies the DSCD through the private API . That is the DSCD receives one or more messages from the DSLSPC through the private API when the MBIM device with supporting device services is detected by the DSLSPC. Furthermore when the MBIM compliant device e.g. a cell phone or dongle is attached to the operating system e.g. a Windows 8 or above system the MB class driver is also loaded by the operating system to communicate with the device and a notification is received by the DSLSPC.

Upon receiving this notification the DSCD prepares for further messages e.g. IOCTLs from the DSLSPC indicating the detection of specific VSP device services. For each different VSP device service enumerated on the device the DSLSPC issues a message to the DSCD through the private API identifying the specific VSP device service which causes the DSCD to create a child driver instance of the appropriate DSLSPD that is then loaded by the system. When loaded the DSLSPD instance registers the serial com port device interface GUID thus establishing an interface available for the legacy applications to utilize for end to end communication. The legacy applications utilize the Win32 API to open and configure their respective com ports for communication.

In one or more embodiments the DSLSPD may be configured to receive I O Request Packets IRPs and IOCTLs from the legacy applications and pass them down the driver stack to the DSCD . If the DSCD can satisfy e.g. process a given request itself it does so. If it cannot immediately satisfy a given request the DSCD transfers the request to the DSLSPC using the previously established private API connection . The DSLSPC translates IOCTL requests to appropriate MBIM VSP DSS CIDs and forwards them through the MB class driver via the DSS API to the corresponding VSP device service in the device . The DSLSPC also formats outbound data for transfer as a targeted DSS payload to the MB class driver for subsequent transmission over the bus in e.g. a Network Transfer Block NTB . Similarly inbound data forwarded by the MB class driver is extracted and sent through the private API shared with the DSCD through to the targeted DSLSPD driver instance .

Removal of the MBIM device during computer operation is detected by the USB host controller driver which informs the operating system of the removal. The operating system then signals the device function and composite drivers to release their resources thereby unloading the drivers. While the MB class driver is processing the device removal a notification is received by the DSLSPC which then sends a message to the DSCD via the private API for each affected device service. This causes the DSCD to deregister the unique device interface GUIDs which result in one or more departure notifications to be received by each loaded DSLSPD instance . The DSLSPD instances respond to this notification by deregistering the com port interface GUID previously registered and begin the process of unloading. The DSCD reports a change in status of its children driver instances and participates in their subsequent unloading thus tearing down the system infrastructure that enabled legacy VSP applications to achieve end to end communication with their corresponding VSP device services.

The foregoing description has been directed to particular embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically it should be noted that embodiments of the present invention may be implemented in connection with various host systems and are not limited to host systems that rely on a particular operating system. Also the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof.

