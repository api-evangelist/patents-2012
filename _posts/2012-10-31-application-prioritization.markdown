---

title: Application prioritization
abstract: Among other things, one or more techniques and/or systems are provided for application prioritization. For example, an operating system of a computing device may contemporaneously host one or more applications, which may compete for computing resources, such as CPU cycles, I/O operations, memory access, and/or network bandwidth. Accordingly, an application (e.g., a background task or service) may be placed within a de-prioritized operating mode during launch and/or during execution, which may result in the application receiving a relatively lower priority when competing with applications placed within a standard operating mode for access to computing resources. In this way, an application placed within a standard operating mode (e.g., a foreground application currently interacted with by a user) may have priority to computing resources over the de-prioritized application, such that the application within the standard operating mode may provide enhanced performance based upon having priority to computing resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489236&OS=09489236&RS=09489236
owner: Microsoft Technology Licensing, LLC
number: 09489236
owner_city: Redmond
owner_country: US
publication_date: 20121031
---
An operating system of a computing device such as a desktop device a mobile device a tablet device etc. may host one or more applications. For example an operating system of a touch screen device may provide the user with access to a web browser a text messaging service an email application a social network application and or a variety of other applications. Because multiple applications may be concurrently hosted by the operating system such applications may compete for computing resources such as CPU cycles memory access I O operation network bandwidth etc. For example while a user is interacting with a web browser of the touch device a text messaging service may launch in response to an incoming text message. Launching and or executing the text messaging service may consume computing resources that may otherwise be used by the web browser to provide the user with a robust web browsing experience. For example the web browser may provide a suboptimal video playback experience because the web browser may not have access to adequate computing resources for displaying a video to the user when the user is concurrently presented with a text message from the text messaging service.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Among other things one or more systems and or techniques for application prioritization are provided herein. That is an operating system may be configured to host applications within a standard operating mode and or a de prioritized operating mode. The standard operating mode may allow applications to compete for computing resources such as CPU cycles I O operations and or memory according to a standard priority. In contrast the de prioritized operating mode may allow applications to compete for computing resources with a relatively lower priority. For example a thread of a text messaging application operating in the de prioritized operating mode may be scheduled by a CPU scheduler only after applications operating in the standard operating mode. In this way computing resource consumption by applications operating in the de prioritized operating mode e.g. a background task a service a background application etc. may be controlled so that such de prioritized applications do not hold up and or over consume computing resources that may be otherwise used by other applications e.g. a foreground application currently being used by a user .

In one example of application prioritization an application may be identified for placement within the de prioritized operating mode. For example while a user is interacting with a web browser a text messaging service may attempt to launch in order to process an incoming text message in the background. The text messaging service may be identified for placement within the de prioritized operating mode because the text messaging service may provide background task functionality. It may be appreciated that an application may be identified for placement within the de prioritized operating mode based upon various factors such as whether the application is to execute in a background state whether the application is a service whether the user is presently interacting with a different application whether the application is visible to the user a predefined priority for the application etc.

The de prioritized operating mode may comprise various operating constraints e.g. restrictions for the application. In one example the de prioritized operating mode may comprise a CPU scheduling de prioritization for a thread of the application such that the thread may receive a relatively lower priority than other threads managed by a CPU scheduler. In another example the de prioritized operating mode may comprise an I O access de prioritization for one or more I O operations by the application such that I O operations of the application may be processed after I O operations of applications operating within the standard operating mode. In another example the de prioritized operating mode may comprise a memory access de prioritization for memory page access by the application. In another example the de prioritized operating mode may comprise a GPU scheduling de prioritization which may have increasing importance or impact as larger workloads are scheduled with or applied to the GPU for example. It may be appreciated that the de prioritized operating mode may comprise other operating constraints such as network bandwidth constraints system resource constraints etc.

Once the application is identified for placement within the de prioritized operating mode the application may be launched and or executed within the de prioritized operating mode. In one example where the application has not yet launched e.g. DLLs and or other binaries associated with the application have not yet been loaded and or initialized the application may be launched within the de prioritized operating mode. Because the application may become resource starved due to de prioritization of resource consumption enforced upon the application during the de prioritization operating mode e.g. text messaging service may be unable to make forward progress with launch because the text messaging service may not have a chance to access computing resources due to other applications with relatively higher priorities consuming such resources progress of the application launch may be monitored. If the progress of the application launch is below a launch progress threshold then one or more restrictions placed upon the application by the de prioritized operating mode may be reduced e.g. temporality removed a priority may be increased etc. . Reducing restrictions may facilitate completion of the launch phase so that system resources e.g. critical system resources that cannot be relinquished until the launch is completed are relinquished in a timely fashion.

In another example where the application has launched the application may be executed within the de prioritized operating mode. Because the application may experience resource starvation the execution of the application may be monitored to determine whether the application is executing below a service level that is to be provided for the application. If the application is executing below the service level then one or more restrictions placed upon the application by the de prioritized operating mode may be reduced e.g. temporality removed a priority may be increased etc. . Because the application may consume computing resources without making forward task progress e.g. text messaging service may continue polling a messaging server that is unavailable the execution of the application may be monitored to determine whether the application is in an idle state e.g. making relatively little task progress which may be identified based upon relatively low resource utilization for example . That is the application may be identified as being in an idle state when the application is not making significant task completion progress e.g. the application may be wasting memory resources and or may be preventing the device from entering a lower power state without making significant task completion progress due to inactivity e.g. as identified by relatively low resource utilization of the application . In one example if the application is not making signification task completion progress then resource utilization quotas may be imposed upon the application which may allow the application to be de scheduled e.g. cancelled once a sufficient amount of resources have been consumed. In another example if the application is in the idle state e.g. for a predefined period of time then the application may be cancelled. In this way the application may be launched and or executed within the de prioritized operating mode so that the application does not hold up and or over consume computing resources that may be used by other applications e.g. with relatively higher priorities such as a system service and or a foreground application being interacted with by the user .

In another example of prioritizing applications quotas may be defined for resource consumption. For example a quota associated with consumption of a resource by an application may be defined e.g. a limit on CPU usage I O usage network usage GPU usage etc. . Resource consumption by the application may be throttled and or paused based upon the quota e.g. once a particular percentage of the quota has been used the resource consumption by the application may be throttled down . In one example the quota may be set based upon a priority of the application e.g. an application in the de prioritized operating mode may be assigned a relatively low quota . In this way aggregate resource usage may be controlled in light of application priorities.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are generally used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide an understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are illustrated in block diagram form in order to facilitate describing the claimed subject matter.

An operating system of a computing device e.g. a touch device a mobile device a desktop device an integrated device for a household appliance etc. may host one or more applications that provide various functionality. Because the operating system may host one or more applications contemporaneously such applications may share and or compete for computing resources. Applications may have various priorities to a user and or the operating system at different times. In one example an application that the user is currently interacting with may have a relatively higher priority to the user than a background service. In another example a system service may have a relatively higher priority to the operating system than a background application. Accordingly as provided herein access to computing resources such as CPU cycles network bandwidth memory access GPU access prioritization etc. may be controlled for applications executing within a de prioritized operating mode. In this way applications executing within a standard operating mode may be afforded relatively higher priority to such computing resources than the de prioritized application which may provide the user with a robust experience and or improve operability of the operating system for example.

One embodiment of application prioritization is illustrated by an exemplary method in . At the method starts. At an application that is to be placed within a de prioritized operating mode may be identified. For example the application may be identified as a background task an application that is not in a foreground state a service a low priority application etc. The application may be placed within the de prioritized operating mode during launch and or during execution.

The de prioritized operating mode may place various constraints e.g. restrictions upon the application. In one example the de prioritized operating mode may comprise a CPU scheduling de prioritization that assigns a relatively low priority to a thread of the application e.g. compared with relatively higher priorities assigned to threads of system services and or applications placed within a standard operating mode . A CPU scheduler may schedule the thread after other threads having relatively higher priorities. In this way the thread may not utilize e.g. hold up and or over consume CPU cycles that may otherwise be used by threads of applications with relatively higher priorities e.g. a web browser currently used by a user may have priority access to the CPU in comparison with the de prioritized application such that web browser may provide enhanced browsing performance for the user based upon the prioritized CPU access . In another example the de prioritized operating mode may comprise an I O access de prioritization for one or more I O operations by the application. In this way I O operations performed by applications operating within the standard operating mode may have priority over I O operations of the de prioritized application. In another example the de prioritized operating mode may comprise a memory access de prioritization for memory page access by the application. In this way memory access operations by applications operating within the standard operating mode may have priority over memory access operations of the de prioritized application. It may be appreciated that the de prioritized operating mode may comprise other constraints such as network bandwidth constraints and or operating system resource constraints for example and is not limited to the examples provided herein.

At the application may be launched e.g. DLLs and or other code such as binaries associated with the application may be loaded and or initialized within the de prioritized operating mode. Because the application launch may not make appropriate forward progress towards launch completion due to the application having relatively lower priority access to computing resources progress of the application may be monitored. That is the application may need system resources during an initial bootstrap of the launch that cannot be released until the initial bootstrap has been completed and thus it may be advantageous to facilitate completion of the initial bootstrap so that such system resources are relinquished e.g. freed up for use by other applications . For example I O activity memory access by the application CPU scheduling information e.g. provided by a kernel and or a variety of other information may be monitored to determined whether the progress of the application launch is below a launch progress threshold e.g. the application has not launched within an expected launch time the application has not been provided adequate access to computing resources to make forward progress with launch etc. . Responsive to the progress of the application launch being below a launch progress threshold one or more restrictions e.g. constraints on memory access I O operation access CPU access network bandwidth etc. placed on the application by the de prioritized operating mode may be reduced e.g. a constraint may be temporarily removed a priority may be increased etc. . In this way the application may have access to computing resources e.g. the application may compete at a similar priority with other applications for access to computing resources . Responsive to the progress of the application launch not being below the launch progress threshold e.g. the application completes launch and or starts to execute the one or more restrictions may be restored e.g. the application may execute within the de prioritized operating mode .

At the application may be executed within the de prioritized operating mode. The application execution of the application may be monitored e.g. based upon a watchdog timer functionality to determine whether the application is idle e.g. the application may be identified as not making significant task completion progress based upon relatively low resource utilization or is resource starved e.g. unable to make forward task progress based upon one or more restrictions placed upon the application by the de prioritized operating mode . In one example responsive to a determination that the application execution of the application is below a service level provided for the application one or more restrictions placed upon the application by the de prioritized operating mode may be reduced. In this way the application may contend for computing resources at a priority that may be similar to priorities of applications placed within a standard operating mode which may allow the application to access computing resources for making forward task progress. In another example responsive to determining that the application execution of the application is below an idle threshold e.g. a determination that the application is consuming resources below an idle resource threshold while in an idle state a determination that a device hosting the application can at least one of enter a lower power state or free up memory etc. if the application is cancelled etc. the application may be cancelled to free up computing resources e.g. a text messaging service that continuously polls a message server that is not currently online may be cancelled . During execution the application may be transitioned between the de prioritized operating mode and the standard operating mode. For example the application may be transitioned from the de prioritized operating mode into the standard operating mode based upon the application being brought into a foreground state. It may be appreciated that other various triggers may be used to transition the application between modes. At the method ends.

In one example responsive to a launch initialization of the application the priority component may place the application into the de prioritized operating mode during launch e.g. initiate launch . In this way the application may access computing resources based upon the de prioritized operating mode policy . During launch the priority component may be configured to monitor the application for resource starvation. For example the priority component may reduce one or more restrictions placed upon the application by the de prioritized operating mode policy based upon progress of the application launch being below a launch progress threshold e.g. the application is unable to make adequate forward progress towards launch because the application has a relatively low priority to compete for access to computing resources . In this way the application may compete for resources using a new priority e.g. a temporarily assigned priority that may be relatively similar to priorities of applications operating in a standard operating mode for example.

In one example responsive to an execution initialization of the application the priority component may place the application into the de prioritized operating mode during execution e.g. execute application . In this way the application may access computing resources based upon the de prioritized operating mode policy . During execution the priority component may be configured to monitor the application execution of the application based upon an idle threshold and or a service level associated with resource starvation of the application . It may be appreciated that one example of monitoring an application based upon an idle threshold is illustrated in and that one example of monitoring an application based upon a service level is illustrated in .

In another example the de prioritized operating mode policy may comprise an I O access de prioritization that may be used to assign a relatively low priority to I O operations of the application in relation to I O operations of other applications not within the de prioritized operating mode. In this way I O operations of the application may wait for I O operations of the other applications to complete before being processed. In another example the de prioritized operating mode policy may comprise a memory access de prioritization which may be used to assign a relatively low priority for memory page access by the application in relation to applications not within the de prioritized operating mode. It may be appreciated that the de prioritized operating mode policy may comprise other restrictions and or constraints not illustrated.

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to implement one or more of the techniques presented herein. An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to one or more of the principles set forth herein. In one such embodiment the processor executable computer instructions may be configured to perform a method such as at least some of the exemplary method of for example. In another such embodiment the processor executable instructions may be configured to implement a system such as at least some of the exemplary system of at least some of the exemplary system of at least some of the exemplary system of and or at least some of the exemplary system of for example. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 13104 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via a network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form. Also at least one of A and B and or the like generally means A or B or both A and B.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

