---

title: Backup of a virtual machine configured to perform I/O operations bypassing a hypervisor
abstract: A virtual machine may use a first one or more volumes in which one or more virtual disk image files are stored. The virtual machine may also use data stored in a second one or more volumes, where the virtual machine is configured to bypass a hypervisor to access the second one or more volumes. A time consistent backup of the virtual machine, including both the virtual disk image files of the first one or more volumes and the data of the second one or more volumes, may be created.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08850146&OS=08850146&RS=08850146
owner: Symantec Corporation
number: 08850146
owner_city: Mountain View
owner_country: US
publication_date: 20120727
---
This invention relates generally to the field of virtual computing and more particularly to a system and method for backing up a virtual machine that uses a storage device that bypasses the hypervisor I O layer of the virtualization platform on which the virtual machine executes.

A virtual machine VM also referred to as a virtual computer is a software implementation of a machine computer that executes programs like a real machine. Virtualization provides the ability for multiple virtual machines to run together on the same physical computer. Each virtual machine may execute its own operating system and may appear to a user of the virtual machine to be the same as an independent physical computer. A user may interact with a virtual machine similarly as if the user were interacting with a physical computer. For example various software applications may be installed on the virtual machine and the virtual machine may enable the user to launch the software applications provide input to the software applications and view output from the software applications identically as if they were executing on a physical computer.

A virtual machine typically maintains its own set of files similarly as a physical computer would such as operating system files application program files data files etc. Whereas the files of a physical computer are typically stored on a hard disk files of a virtual machine are often stored in one or more virtual disk image files. A virtual disk image file represents the contents and structure of a hard disk drive e.g. by representing disk sectors. Sectors of the virtual disk image file are allocated as necessary for storing the files used by the virtual machine. In addition to the sector data the virtual disk image file also includes various data structures for managing the sector data such as a sector bitmap indicating which sectors are currently in use and store valid data.

Various embodiments of a system and method for backing up a virtual machine are disclosed. The virtual machine may execute within a virtualization environment that includes a hypervisor that controls access to physical resources used by the virtual machine. The virtual machine may use one or more virtual disk image files that are included in a first one or more volumes. The virtual machine may also use additional data stored in a second one or more volumes. The virtual machine may be configured to bypass the hypervisor to access the second one or more volumes.

According to some embodiments of the system and method a first snapshot may be initiated of the first one or more volumes that include the one or more virtual disk image files and the second one or more volumes that include the additional data. The first snapshot may be based on a first point in time. In some embodiments the first snapshot may be initiated by requesting the virtual machine to initiate the first snapshot.

The system and method may operate to create a first backup image of the second one or more volumes using the first snapshot. The first backup image may be based on the first point in time. In some embodiments the first backup image of the second one or more volumes may be created by requesting the virtual machine to create the first backup image of the second one or more volumes using the first snapshot.

The system and method may further operate to initiate a second snapshot of the first one or more volumes that include the one or more virtual disk image files of the virtual machine. The second snapshot may be based on a second point in time after the first point in time. In some embodiments the second snapshot may be initiated by requesting the virtual machine host software that manages the virtual machine to initiate the second snapshot.

A second backup image of the one or more virtual disk image files of the virtual machine may be created using the second snapshot. The second backup image of the one or more virtual disk image files may be based on the second point in time. In some embodiments the second backup image may be created by requesting the virtual machine host software to create the second backup image using the second snapshot.

The second backup image of the one or more virtual disk image files is based upon the second point in time which is a later point in time than the first point in time upon which the first backup image of the second one or more volumes is based. The system and method may operate to revert the second backup image of the one or more virtual disk image files to the first point in time using the first snapshot e.g. to make the second backup image of the one or more virtual disk image files time consistent with the first backup image of the second one or more volumes. In some embodiments the system and method may request the virtual machine host software to mount the second backup image of the one or more virtual disk image files and revert the one or more virtual disk image files to the first point in time using the first snapshot.

In some embodiments at the second point in time the one or more virtual disk image files of the virtual machine may include snapshot data of the first snapshot. Thus since the second backup image of the one or more virtual disk image files is created using the second snapshot which corresponds to the second point in time the second backup image of the one or more virtual disk image files may include the snapshot data of the first snapshot. Reverting the second backup image of the one or more virtual disk image files of the virtual machine to the first point in time using the first snapshot may comprise reading the snapshot data of the first snapshot from the second backup image and using the snapshot data of the first snapshot to revert the second backup image of the one or more virtual disk image files of the virtual machine to the first point in time.

In various embodiments the second one or more volumes may be stored on any kind of storage device that the virtual machine is configured to access without using an input output I O layer of the hypervisor. In some embodiments the second one or more volumes may be stored on one or more physical disk drives such as one or more disk drives configured as pass through disks or configured to be accessed using raw device mapping RDM for example. In some embodiments the second one or more volumes may be stored on one or more iSCSI Internet Small Computer System Interface disk drives or storage area network SAN devices that are inaccessible to the hypervisor or virtual machine host software that implements the virtualization environment.

While the invention is susceptible to various modifications and alternative forms specific embodiments are shown by way of example in the drawings and are herein described in detail. It should be understood however that drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the invention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

The virtual machine host software may execute on a physical computer system . The virtual machine host software may include a hypervisor that functions as a layer or manager between the virtual machine and the physical devices or resources of the physical computer system . Although only a single virtual machine is illustrated in multiple virtual machines may be executed on the physical computer system and the hypervisor may coordinate access among them to the physical resources of the physical computer system .

The virtual machine may have one or more associated configuration files that are managed by the virtual machine host software and which store configuration settings for the virtual machine .

The virtual machine may be implemented with one or more virtual disk image files. The virtual disk image files may represent one or more virtual storage devices e.g. virtual hard disk on which files used by the virtual machine are stored such as operating system files application files etc. In various embodiments the virtual disk image file s of the virtual machine may be any kind of virtual disk image files e.g. may be formatted according to any specification or standard. Examples of virtual disk image file formats include the Virtual Hard Disk VHD format and the Virtual Machine Disk Format VMDK format.

The virtual disk image file s may be included in one or more volumes . As used herein the term volume refers to a set of files. The volume s in which the virtual disk image file s are included are also referred to herein as the virtual disk image file volume s . The virtual disk image file volume s may be stored on one or more physical storage devices included in or coupled to the physical computer system such as a disk drive for example. In some embodiments the virtual disk image file volume s may be stored on a storage device coupled to the physical computer system through a network such as a network attached storage NAS device or a storage area network SAN device.

The hypervisor of the virtual machine host software may be configured to manage access by the virtual machine to the virtual disk image file volume s . For example when the virtual machine performs input output I O calls to access files in the one or more virtual disk image files the I O calls may pass through an I O layer of the hypervisor .

In addition to the data stored in the one or more virtual disk image files in the volume s the virtual machine may also use other data stored in one or more pass through volumes . Unlike the volume s in which the virtual disk image file s are stored the virtual machine may be configured to access the pass through volume s directly e.g. bypassing the hypervisor . For example when the virtual machine performs an I O call to access data in the pass through volume s the I O call may not be intercepted or received by the I O layer of the hypervisor . In some embodiments the pass through volume s may be stored on a different physical storage device than the virtual disk image file volume s . In other embodiments they may be stored on the same physical storage device. The data in the pass through volume s is referred to herein as pass through data.

Various virtual machine host software environments may provide various features such as pass through disks e.g. supported by Microsoft Corp. Hyper V virtual machine host software and raw device mapping RDM e.g. supported by VMWare Inc. virtual machine host software that can be used to implement the pass through volume s . As another example the pass through volume s may be stored on one or more iSCSI Internet Small Computer System Interface disk drives or storage area network SAN devices that are not accessible by the virtual machine host software and hypervisor .

Bypassing the hypervisor may enable the I O operations of the virtual machine to be performed faster when accessing the pass through volume s . However since the virtual machine bypasses the hypervisor to access the pass through volume s directly the virtual machine host software may not have knowledge of or may not be able to access the pass through volume s . This may make it difficult to create a backup of the virtual machine .

To create a backup of the virtual machine all the data used by the virtual machine needs to be backed up including both the volume s that store the virtual disk image file s and the pass through volume s . Some conventional backup software operates to create a backup of a virtual machine by calling an application programming interface API of the virtual machine host software to request the virtual machine host software to perform the backup. However in a system such as illustrated in the virtual machine host software may not be able to create a complete backup of the virtual machine since the pass through volume s may not be accessible to the virtual machine host software . To overcome this problem the system may include backup software which is configured to create a complete backup of the virtual machine as described below with reference to the flowchart of .

In some embodiments the backup software that executes on the physical computer system may act as a backup agent which communicates with other backup software executing on another computer system. For example in some embodiments the system of may include a physical backup server computer system not shown which is coupled to the physical computer system via a network and which communicates with the backup software on the physical computer system to cause the backup software to backup the virtual machine s that execute on the physical computer system .

The physical computer system may include at least one central processing unit or CPU processor which may be coupled to a processor or host bus . The processor may be any of various types. For example in some embodiments the processor may be compatible with the x86 architecture while in other embodiments the processor may be compatible with the SPARC family of processors. Also in some embodiments the physical computer system may include multiple processors .

The physical computer system may also include memory in which program instructions implementing the virtual machine the hypervisor and other components of the virtual machine host software may be stored. In some embodiments the memory may also store the backup software that executes to backup the virtual machine according to the method described below. In some embodiments the backup software that executes on the physical computer system may be a client portion of the backup software e.g. where the backup software also includes a server portion that executes on a separate backup server physical computer that manages backup operations performed for the physical computer system . In some embodiments the memory may include one or more forms of random access memory RAM such as dynamic RAM DRAM or synchronous DRAM SDRAM . In other embodiments the memory may include any other type of memory configured to store program instructions. The memory may also store operating system software or other software used to control the operation of the physical computer system . The memory controller may be configured to control the memory .

The host bus may be coupled to an expansion or input output bus by means of a bus controller or bus bridge logic. The expansion bus may be the PCI Peripheral Component Interconnect expansion bus although other bus types can be used. Various devices may be coupled to the expansion or input output bus such as a video display subsystem which sends video signals to a display device and a network card or device that enables the physical computer system to send and receive information over a network.

In the example of a disk drive is also coupled to the expansion or input output bus . In some embodiments the storage volume s that include the virtual disk image file s of the virtual machine and or the pass through volume s may be stored on the disk drive . In other embodiments the storage volume s and or the pass through volume s may be stored across multiple disk drives or may be stored on another kind of storage device other than a disk drive. Examples of other kinds of storage devices include solid state drives optical drives tape drives etc. The storage device s on which the storage volume s and the pass through volume s are stored may be included in or coupled to the physical computer system in any of various ways e.g. via an input output bus via a network via a wireless connection etc.

The physical computer system may communicate with one or more other computer systems or storage devices via any type of network or combination of networks. For example the physical computer system may be coupled to a local area network LAN a wide area network WAN a wireless network an Intranet the Internet etc. Examples of local area networks include Ethernet networks Fiber Distributed Data Interface FDDI networks and token ring networks. The physical computer system may be coupled to the network s using any type of wired or wireless connection medium. For example wired mediums may include Ethernet fiber channel a modem connected to plain old telephone service POTS etc. Wireless connection mediums may include a wireless connection using a wireless communication protocol such as IEEE 802.11 among others.

The method of may enable the virtual machine to be backed up while it is being executed by the physical computer e.g. without stopping the virtual machine or taking it offline. This may be advantageous since the virtual machine can continue performing tasks while the backup occurs.

As indicated in block the backup software may request the virtual machine to initiate a first snapshot of the virtual disk image file volume s and the pass through volume s at a time T1. In response the virtual machine initiates the first snapshot. The first snapshot enables a point in time representation of the virtual disk image file volume s and the pass through volume s e.g. to represent the volume s and the volume s as they exist at the time T1. illustrates an example of a first snapshot taken by the virtual machine in response to the request by the backup software . If any data blocks in the pass through volume s are changed after the first snapshot is initiated the old data from those data blocks may be copied into the first snapshot illustrated in as the snapshot data . Similarly if any data blocks in the virtual disk image file volume s are changed after the first snapshot is initiated the old data from those data blocks may be copied into the first snapshot illustrated in as the snapshot data . Thus the state of the pass through volume s and the state of the virtual disk image file volume s at the time T1 are effectively saved via the first snapshot .

In various embodiments the virtual machine may initiate or implement the first snapshot using any of various snapshot techniques. For example in some embodiments an operating system or file system of the virtual machine may provide a service that the virtual machine can call to initiate a first snapshot representing the volume s and the volume s at the point in time T1. In various embodiments various kinds of snapshots may be initiated or created. For example in some embodiments the first snapshot may be a copy on write COW snapshot.

Although the virtual machine host software may not be able to access the pass through volume s the virtual machine itself can access the pass through volume s . Thus the virtual machine is able to create a backup of the pass through volume s . As indicated in block the backup software may request the virtual machine to backup the pass through volume s using the first snapshot. In some embodiments the virtual machine may support an API which the backup software can call to request the virtual machine to backup the pass through volume s . In other embodiments the backup software may configure the virtual machine to execute backup software to perform the backup of the pass through volume s .

In response to receiving the request in block the virtual machine may copy the files or data blocks of the pass through volume s to a backup image based on the first snapshot. As used herein the term backup image refers to any set of data created to represent another set of data at a particular point in time. A backup image may be stored in the form of one or more files or as data stored in a database. For each data block of the pass through volume s if the data block has not changed since the first snapshot was initiated then the virtual machine may read the data block from the pass through volume s . Otherwise if the data block has changed since the first snapshot was initiated then the virtual machine may read the old value of the data block from the first snapshot. As a result the backup image created by the virtual machine may represent the pass through volume s at the time T1 upon which the first snapshot is based.

Once the backup of the pass through volume s has been created the virtual disk image file s of the virtual machine still need to be backed up. It may be desirable for the backup of the virtual disk image file s to be created by the virtual machine host software instead of the virtual machine . For example the virtual machine host software can store the configuration files of the virtual machine along with the backup whereas the configuration files may not be accessible by the virtual machine itself. Also the virtual machine host software may provide an application programming interface API for backing up a virtual machine and it may be desirable to leverage this API to perform the backup.

As indicated in block the backup software may request the virtual machine host software to initiate a second snapshot of the virtual disk image file volume s at a time T2 after the time T1. In response the virtual machine host software may initiate the second snapshot at the time T2. illustrates an example of a second snapshot taken by the virtual machine host software . The data of the first snapshot corresponding to the time T1 may be stored in the virtual disk image file s of the virtual machine . Since the second snapshot of the virtual disk image file volume s is taken at the time T2 which is after the time T1 when the first snapshot was initiated and since the data of the first snapshot is within the data of the virtual disk image file s in the volume s the second snapshot effectively captures the first snapshot as illustrated in .

As indicated in block the backup software may request the virtual machine host software to backup the virtual disk image file s from the volume s using the second snapshot. For example the virtual machine host software may provide an API that the backup software can invoke to request the virtual machine host software to backup the virtual disk image file s . In response to the request the virtual machine host software may create a backup image of the virtual disk image file s of the virtual machine based on the second snapshot. The backup image may include a complete copy of the virtual disk image file s as they existed at the time T2. The virtual machine host software may also backup the configuration file s for the virtual machine .

The backup images created by the virtual machine and the virtual machine host software may include all the data of the virtual machine . However the backup images may not be time consistent with each other since the backup image of the pass through volume s is based on the first snapshot corresponding to the time T1 and the backup image of the virtual disk image file s is based on the second snapshot corresponding to the time T2. In order for the backup image of the virtual disk image file s to be made consistent with the backup image of the pass through volume s the backup software may request the virtual machine host software to mount the virtual disk image file s from the backup image as indicated in block . As used herein mounting a virtual disk image file refers to configuring the files contained within the virtual disk image file to be viewed by the file system as an active volume. The virtual machine host software may provide an API which the backup software can call to request the virtual disk image file s to be mounted e.g. so that the files contained in the virtual disk image file s can be browsed.

As noted above the second snapshot effectively captures the first snapshot as illustrated in . Thus since the backup image of the virtual disk image file s was created based on the second snapshot the backup image of the virtual disk image file s includes the snapshot data of the first snapshot. Once the virtual disk image file s have been mounted from the backup image the first snapshot is accessible from the mounted virtual disk image file s . As indicated in block the backup software may request the virtual machine host software to revert the backup image of the virtual disk image file s to the time T1 using the first snapshot. The virtual machine host software may provide an API that the backup software calls to request the virtual machine host software to perform the reversion e.g. by passing an ID of the first snapshot to the virtual machine host software and requesting the reversion to be performed based on the first snapshot. The virtual machine host software may then revert the virtual disk image file s to the first snapshot e.g. revert the virtual disk image file s to their earlier state as represented by the first snapshot . For example the virtual machine host software may use the first snapshot ID to read the snapshot data of the first snapshot from the virtual disk image file s mounted from the backup image and may use the snapshot data to revert the virtual disk image file s to their state as they existed at the time T1. The reverted virtual disk image file s will then correspond to the same point in time T1 as the backup image of the pass through volume s so that the reverted virtual disk image file s are time consistent with the backup image of the pass through volume s .

In some embodiments the virtual disk image file s may be reverted to the first snapshot as part of the backup process. For example after the virtual disk image file s have been reverted the original backup image of the virtual disk image file s may be replaced by a new backup image of the reverted virtual disk image file s . If a user or administrator later wants to restore the virtual machine the backup image of the reverted virtual disk image file s and the backup image of the pass through volume s may be used to restore the virtual machine to the time T1.

In other embodiments the virtual disk image file s may not be reverted to the first snapshot as part of the backup process but instead may be reverted as part of the restore process. For example in response to a user or administrator later requesting to restore the virtual machine the backup image of the virtual disk image file s may be mounted and reverted to the first snapshot. It is possible to do the reversion at the time of the restore since the data of the first snapshot is stored in the backup image of the virtual disk image file s which is created from the second snapshot.

In some embodiments the first snapshot and the second snapshot may both be released after the backup image of the virtual disk image file s has been created by the virtual machine host software . The first snapshot does not need to continue being maintained after this point since the backup image of the virtual disk image file s will have the data for the first snapshot up to the time T2. 

Turning now to a block diagram of a computer accessible storage mediums is shown. The computer accessible storage medium may store program instructions of the backup software . The program instructions stored on the computer accessible storage medium may be executable by one or more processors to implement various functions described above. In some embodiments a portion of the backup software may be executed by the physical computer system on which the virtual machine executes and another portion of the backup software may be executed by another physical computer system such as a backup server computer system. Generally speaking various embodiments of a computer accessible storage medium are contemplated for storing any set of instructions which when executed implement a portion or all of the functions described above.

A computer accessible storage medium may include any storage media accessible by one or more computers during use to provide instructions and or data to the computer s . For example a computer accessible storage medium may include storage media such as magnetic or optical media e.g. one or more disks fixed or removable tapes CD ROMs DVD ROMs CD Rs CD RWs DVD Rs DVD RWs or Blu Ray disks. Storage media may further include volatile or non volatile memory media such as RAM e.g. synchronous dynamic RAM SDRAM Rambus DRAM RDRAM static RAM SRAM etc. ROM Flash memory non volatile memory e.g. Flash memory accessible via a peripheral interface such as the Universal Serial Bus USB interface a flash memory interface FMI a serial peripheral interface SPI etc. Storage media may include microelectromechanical systems MEMS as well as storage media accessible via a communication medium such as a network and or a wireless link. A carrier medium may include computer accessible storage media as well as transmission media such as wired or wireless transmission.

Numerous variations and modifications will become apparent to those skilled in the art once the above disclosure is fully appreciated. It is intended that the following claims be interpreted to embrace all such variations and modifications.

