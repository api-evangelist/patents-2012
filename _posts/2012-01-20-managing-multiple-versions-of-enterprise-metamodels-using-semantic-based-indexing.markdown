---

title: Managing multiple versions of enterprise meta-models using semantic based indexing
abstract: A method, system and program product of managing multiple versions of enterprise meta-models within an enterprise model using semantic based indexing. The steps include: receiving a query; determining from the query a topic and at least two versions of a topic map meta-model of the enterprise meta-models to compare; applying the query to a merged topic map meta-model of the at least two versions of the topic map meta-model by searching a topic map based index of the merged topic map meta-model for the topic, producing a result; and using the result to translate the topic from the query in at least one of the at least two versions of the topic map meta-model to coexist and correspond to the other version of the topic map meta-model, allowing data between the at least two versions topic map meta-model of the enterprise meta-models within the enterprise model to be correlated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08666951&OS=08666951&RS=08666951
owner: International Business Machines Corporation
number: 08666951
owner_city: Armonk
owner_country: US
publication_date: 20120120
---
The present invention relates to managing multiple versions of enterprise meta models of a complex legacy application environment or enterprise model and more specifically to querying differences between multiple versions of an enterprise model.

Almost all companies have complex legacy application environments. Such an environment consists of all the applications programs and data that a company depends on to successfully manage its day to day operations. Within these applications programs and data are encapsulated one or more meta models of the company s physical intellectual and financial assets.

An enterprise meta model of a complex legacy application environment defines the ontology for these assets and the enterprise meta model can evolve and change over time. Beyond changes to the enterprise meta model the instance data that is referenced through the enterprise meta model will also very likely change over time.

According to one embodiment of the present invention a method of managing multiple versions of enterprise meta models within an enterprise model using semantic based indexing. The method comprising the steps of a computer receiving a search query from a user the computer determining from the search query a topic and at least two versions of a topic map meta model of the enterprise meta models within the enterprise model to compare the computer applying the search query from the user to a merged topic map meta model of the at least two versions of the topic map meta model by searching a topic map based index of the merged topic map meta model for the topic producing a result and the computer using the produced result to translate the topic from the query in at least one of the at least two versions of the topic map meta model of the enterprise meta model to coexist and correspond to the other version of the topic map meta model of the enterprise meta model allowing data between the at least two versions topic map meta model of the enterprise meta models within the enterprise model to be correlated.

According to another embodiment of the present invention a computer program product for managing multiple versions of models using semantic based indexing. The computer program product comprising one or more computer readable tangible storage devices program instructions stored on at least one of the one or more storage devices to receive a search query from a user program instructions stored on at least one of the one or more storage devices to determine from the search query a topic and at least two versions of a topic map meta model of the enterprise meta models within the enterprise model to compare program instructions stored on at least one of the one or more storage devices to apply the search query from the user to a merged topic map meta model of the at least two versions of the topic map meta model by searching a topic map based index of the merged topic map meta model for the topic producing a result and program instructions stored on at least one of the one or more storage devices to use the produced result to translate the topic from the query in at least one of the at least two versions of the topic map meta model of the enterprise meta model to coexist and correspond to the other version of the topic map meta model of the enterprise meta model allowing data between the at least two versions topic map meta model of the enterprise meta models within the enterprise model to be correlated.

According to another embodiment of the present invention a computer system of managing multiple versions of models using semantic based indexing. The computer system comprising one or more processors one or more computer readable memories and one or more computer readable tangible storage devices program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories to receive a search query from a user program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories to determine from the search query a topic and at least two versions of the topic map meta model of the enterprise meta models within the enterprise model to compare program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories to apply the search query from the user to a merged topic map meta model of the at least two versions of the topic map meta model by searching a topic map based index of the merged topic map meta model producing a result and program instructions stored on at least one of the one or more storage devices for execution by at least one of the one or more processors via at least one of the one or more memories to use the produced result to translate the topic from the query in at least one of the at least two versions of the topic map meta model of the enterprise meta model to coexist and correspond to the other version of the topic map meta model of the enterprise meta model allowing data between the at least two versions topic map meta model of the enterprise meta models within the enterprise model to be correlated.

The illustrative embodiments recognize that a challenge with enterprise meta models is the requirement to intelligently manage them and their associated instances as the enterprise meta models evolve and change over time. The illustrative embodiments also recognize that simply merging enterprise models and enterprise model instances may not be sufficient as not only is such merging often difficult and time consuming but the notion of a temporal reference to the models as it had previously existed is lost. The evolution of enterprise meta models and their associated instance data presents an opportunity for an intelligent approach to handling enterprise model versions.

Referring to network data processing system is a network of computers in which illustrative embodiments may be implemented. Network data processing system contains network which is the medium used to provide communication links between various devices and computers connected together within network data processing system . Network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example client computer storage unit and server computer connect to network . In other exemplary embodiments network data processing system may include additional client computers storage devices server computers and other devices not shown. Client computer includes a set of internal components and a set of external components further illustrated in . Client computer may be for example a mobile device a cell phone a personal digital assistant a netbook a laptop computer a tablet computer a desktop computer or any other type of computing device. Client computer may contain a topic map interface and or other interfaces . Through topic map interface different topic maps in different scopes may be viewed by users. Additionally through topic map interface queries between different versions of enterprise models of a topic map may be performed and results of the searches may be displayed. Topic map interface may accept commands and data entry from a user as shown in . Topic map interface can be for example a command line interface a graphical user interface GUI or a web user interface WUI through which a user can access an enterprise meta model topic map generator program and or a version compare meta model program on client computer as shown in or alternatively on server computer . Server computer includes a set of internal components and a set of external components illustrated in .

In the depicted example server computer provides information such as boot files operating system images and applications to client computer . Server computer can compute the information locally or extract the information from other computers on network .

Program code meta models a Service oriented architecture SOA industry model repository IMR component illustrated in and programs such as enterprise meta model topic map generator program and version compare meta model program may be stored on at least one of one or more computer readable tangible storage devices shown in on at least one of one or more portable computer readable tangible storage devices as shown in on storage unit connected to network or downloaded to a data processing system or other device for use. For example program code meta models SOA IMR component and programs such as enterprise meta model topic map generator program and version compare meta model program may be stored on at least one of one or more tangible storage devices on server computer and downloaded to client computer over network for use on client computer . Alternatively server computer can be a web server and the program code meta models SOA IMR component and programs such as enterprise meta model topic map generator program and version compare meta model program may be stored on at least one of the one or more tangible storage devices on server computer and accessed on client computer . Enterprise meta model topic map generator program and version compare meta model program can be accessed on client computer through topic map interface . In other exemplary embodiments the program code meta models SOA IMR component and programs such as enterprise meta model topic map generator program and version compare meta model program may be stored on at least one of one or more computer readable tangible storage devices on client computer or distributed between two or more servers.

In the depicted example network data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course network data processing system also may be implemented as a number of different types of networks such as for example an intranet local area network LAN or a wide area network WAN . is intended as an example and not as an architectural limitation for the different illustrative embodiments.

IMR architecture system includes federated physical model assets that are stored in different types of repositories depending on the model driven framework tools and products that IMR architecture system deploys. Federated physical model assets may include framework industry models business models unified modeling language UML design applications data models business services service components and technical services. Federated physical model assets are not limited to the assets shown in .

Applications and services are provided to IMR users through network using interfaces . Interfaces may be graphically enabled allowing display of topic maps to IMR users such as through a model manager. Interfaces include reports generation and tools supporting multi formats and visualization tools supporting complex views. Interfaces may be packaged as an Eclipse client provided by a vendor specialized in providing software development tools and products or deployed inside bigger scope modeling tools for example IBM Rational Software Architect or WebSphere Business Modeler products of International Business Machines Corporation.

Applications and services may include registration and profile management creating and customizing repository meta model importing customized and disparate model data into the repository examining decomposing complex diagrams and structures structure link and trace change disparate model assets advanced search and query navigate browse data assets select and download model assets customize add models assets submit for repository upload querying between versions of the meta models and impact analysis. Applications and services are not limited to the assets shown in . Applications and services are described in greater detail in applications entitled FRAMEWORK TO POPULATE AND MAINTAIN A SERVICE ORIENTED ARCHITECTURE INDUSTRY MODEL U.S. Publication No. 2011 0153292 filed Dec. 17 2009 MANAGING AND MAINTAINING SCOPE IN A SERVICE ORIENTED ARCHITECTURE INDUSTRY MODEL REPOSITORY U.S. Publication No. 2011 0153293 filed Dec. 17 2009 and RECOGNITION OF AND SUPPORT FOR MULTIPLE VERSIONS OF AN ENTERPRISE CANONICAL MESSAGE MODEL U.S. Publication No. 2011 0153767 filed Dec. 17 2009. Interfaces are further described in greater detail in an application entitled SERVICE ORIENTED ARCHITECTURE INDUSTRY MODEL REPOSITORY META MODEL WITH A STANDARD BASED INDEX U.S. Publication No. 2011 0153636 filed Dec. 17 2009.

IMR users may include but are not limited to a repository administrator a model manager a system architect and a business analyst.

Within model assets are different versions of abstract models version x to version y where y x which versions can each be an enterprise meta model such as reference semantic model RSM . The RSM is a model that provides a meta model representation for a user s process automation of assets. The model manager which may be an IMR use manages the meta model representation of RSM for asset definitions including their interrelationships as well as references to real time production control sensor data that can be attained with interaction to those assets.

Within abstract models are domains respectively with their own instance ontology . Instance ontology is equivalent to a meta model for each domain. Instance ontology can also be referred to as instance data. An example of domain is water and an example of instance ontology is the pipes associated with the water.

The cloud or topic map has topics and shown as circles which topics may be any of the meta models present in the Meta Model service or in physical asset repositories . For example if topic was an asset that existed in model assets topic would be associated with another topic which may be an industry vertical meta model. Topic may have occurrences in abstract model accessible through a uniform resource identifier URI shown by the dashed lines. Other topic may have occurrences in abstract model within the model assets accessible through URIs . By using topic maps as a meta model internal to the physical asset repositories a web service may programmatically access manage and maintain SOA IMR component .

Meta Model service of SOA IMR component is an SOA IMR Meta Model service using topic map meta model which is an ISO IEC Standard ISO 13250 1 topic map meta model. Topic maps map both web and real world information resources by reifying real world resources as subjects and creating topic constructs to capture their characteristics and relationships with other topics and subjects. By using topic maps as a meta model internal to the physical asset repositories a common interface to Meta Model service allows users to programmatically access manage and maintain these meta models.

The Meta Model service maps or implements the ISO topic map meta model to a web ontology language OWL representation of the topic map. The SOA IMR component provides the context for the implementation of the ISO topic map meta model to the OWL representation of the topic map. The OWL representation of the topic map is stored in a resource description framework RDF repository for example repositories .

Some of the advantages of using a topic map based meta model for SOA IMR component are that the topic maps are independent of the implementation and are reusable for other service consumers. Topic maps can map to multiple occurrences and each model can be stored in different locations as different types of physical occurrences. Furthermore Meta Model service provides and supports full read and write capabilities of abstract and instance ontology regarding an industry model.

SOA IMR component has the capability of managing multiple domains. Each domain has its own meta model and its own instance ontology. A topic map meta model is created by SOA IMR component through enterprise meta model topic map generator program .

In a first step enterprise meta model topic map generator program creates topic map meta models including a topic map based index and instance ontology for every version of the enterprise meta model and stores the created topic map meta models in a repository step . Enterprise meta model topic map generator program assigns to each topic map meta model created for each version of the enterprise meta model its own specific scope. The repository may be repository as shown in . It should be noted that while separate repositories for the different versions of the enterprise meta model are shown one repository may be used. Similarly the repository in which RDF triples are stored in the next step may be the same repository as the repository in which the different versions of the enterprise meta models are stored.

An example of a portion of a topic map representation of a meta model in version x scope x is shown in and an example of a portion of a topic map representation of the meta model in version y scope y with y x is shown in .

In the portion of the topic map representation shown in the topic of RSM WorkEquipment is located at or has an occurrence at RSM FunctionalLocation shown by a solid line . The topic of RSM WorkEquipment has the attributes or plays the role of equipment and the topic RSM FunctionalLocation has the attributes or plays the role of location. RSM PhysicalEntity is present.

In the portion of topic map representation shown in the topic of RSM WorkEquipment is located at or has an occurrence at RSM FunctionalLocation shown by a solid line . The topic of RSM WorkEquipment has the attributes or plays the role of equipment and the topic RSM FunctionalLocation has the attributes or plays the role of location. RSM WorkEquipment is a RSM PhysicalEntity shown by a dashed line .

Referring back to enterprise meta model topic map generator program creates RDF triples from the topics of the topic map meta models and stores the RDF triples in a repository step . The repository may be repository as shown in .

From the topic map of version x of the RSM enterprise meta model in this example version 1 the RDF triples in Table 1 below represent an association between a RSM WorkEquipment being connected to the other pieces of RSM WorkEquipment. The relationship between RSM WorkEquipment and other pieces of RSM WorkEquipment is the type equipment connects .

Note that for brevity in the following discussion the following RDF namespace prefixes will be used with URLx replacing an actual Uniform Resource Locator designation or other designation of a location on a network 

Therefore for foo rsm Workequiment equipmentconnects rsmworkequipment the following RDF triples would be present for the association between WorkEquipment and RSM WorkEquipment. A UML representation of version x scope x of the enterprise meta model is shown in .

Stored within a resource description framework RDF repository for example repository are RDF triples of the assigned topics occurrences and attributes of the topic map meta model of version x scope x where y x of the RSM enterprise meta model. The RSM enterprise meta model in which the topic map meta model is based may be stored within the RDF repository or in a separate repository as shown in . The separate repository is preferably part of the physical asset repositories of the SOA IMR component .

From the topic map representation of version y in scope y where y x of the RSM enterprise meta model in this example version 2 the RDF triples in Table 3 below represent an association between a RSM WorkEquipment being a type of RSM PhysicalEntity. The relationship between RSM WorkEquipment and RSM PhysicalEntity is the type is a . Therefore for foo rsm WorkEquipment EquipmentConnects RSM WorkEquipment the following RDF triples would be present for the association between WorkEquipment and RSM WorkEquipment. A UML representation of version y where y x of the meta model is shown in .

The difference between and and thus the difference between the two versions of the RSM enterprise meta models is the relationship between the RSM WorkEquipment and the RSM PhysicalEntity. In version y where y x or for example version 2 RSM WorkEquipment is a RSM PhysicalEntity whereas in version x for example version 1 no such relationship is present even though RSM PhysicalEntity is present.

Referring back to version compare meta model program recursively creates a merged topic map of the versions of the enterprise meta model and stores the merged topic map in a repository step . In other words every time a new version of the enterprise meta model is created version compare meta model program creates the merged topic map meta model to add the new version. Therefore the merged topic map always contains all of the versions of the enterprise meta model. The merged topic map meta model includes a topic map based index and instance ontology from both versions of the enterprise meta models. The repository may be repository .

Version compare meta model program receives a query input from a user step through an interface such as interface . The interface may be topic map interface or another interface . The search query preferably includes at least one domain at least one a topic and at least one scope. A radix may also be present as part of the search query. The query allows the user or a computer to obtain information regarding the differences in instance ontology and instance data that occurs between the two versions and to get the two versions of the enterprise meta models to coexist and communicate with each other within the same merged enterprise model.

User may input the query into topic map interface . Topic map interface may be a representational state transfer REST based interface although other interfaces may be used. A REST interface is preferably used since REST is a standards based Internet protocol and is self documenting in terms of how to do the search for example which domain to search which topic to search and how much of the topic map meta model should be returned as a result of the search.

The domain of the query is the overall relevant system to be searched. The topic of the query is the name of an asset relevant to the search. The scope of the query is a subset of the domain for example a model version. If a radix is included within the search query the radix of the query is the number of degrees from the search topic to be returned. For example a radix of 1 would display results directly connected to the topic. A radix of 2 would display results of everything directly connected to the topic and directly connected to the matters directly connected to the topic.

An example of a search query received in step to compare the version x of the enterprise model in scope x of the topic map shown in to version y of the enterprise model in scope y of the topic map shown in is 

The search query is therefore to query the differences between a topic RSM WorkEquipment in version x and version y of the model. It should be noted that while version x is compared to version y in the above query any version can be compared to any other version of the meta model for example version 4 to version 2 or version 5 to version 1 for example. It should also be noted that while only two versions are shown by example being compared at one time multiple versions may be compared at one time.

Version compare meta model program then determines from the query which topics and which topic map versions to compare step . Version compare meta model program then applies the query input from the user to the merged topic map meta model in a new scope step .

The version compare meta model program uses the results of the query of the merged topic map meta model to automatically translate the topics from the query of the merged topic map. In translating the topics form the query of the merged topic map version compare meta model program maps or corresponds the topics between the two versions of the enterprise meta models of the query allowing data between the different versions of the meta models in different scopes within the enterprise model to be correlated step . Version compare meta model program displays the results of the query to the user through an interface. For example a topic or association that exists in one version of the meta model may not be present in a later or another version and therefore the versions of the meta model need to be altered to compensate for this lack of a topic or association.

If there are additional queries step return to step of receiving a query from a user. If there are no additional queries step the method ends.

Each set of internal components also includes a R W drive or interface to read from and write to one or more portable computer readable tangible storage devices such as a CD ROM DVD memory stick magnetic tape magnetic disk optical disk or semiconductor storage device. Enterprise meta model topic map generator program and version compare meta model program can be stored on one or more of the portable computer readable tangible storage devices read via R W drive or interface and loaded into hard drive .

Each set of internal components also includes a network adapter or interface such as a TCP IP adapter card. Enterprise meta model topic map generator program or a version compare meta model program can be downloaded to computer and server computer from an external computer via a network for example the Internet a local area network or other wide area network and network adapter or interface . From the network adapter or interface enterprise meta model topic map generator program and version compare meta model program are loaded into hard drive . The network may comprise copper wires optical fibers wireless transmission routers firewalls switches gateway computers and or edge servers.

Each of the sets of external components includes a computer display monitor a keyboard and a computer mouse . Each of the sets of internal components also includes device drivers to interface to computer display monitor keyboard and computer mouse . The device drivers R W drive or interface and network adapter or interface comprise hardware and software stored in storage device and or ROM .

Enterprise meta model topic map generator program and version compare meta model program can be written in various programming languages including low level high level object oriented or non object oriented languages. Alternatively the functions of an enterprise meta model topic map generator program and a version compare meta model program can be implemented in whole or in part by computer circuits and other hardware not shown .

Based on the foregoing a computer system method and program product have been disclosed for managing multiple versions of enterprise meta models using semantic based indexing. However numerous modifications and substitutions can be made without deviating from the scope of the present invention. Therefore the present invention has been disclosed by way of example and not limitation.

