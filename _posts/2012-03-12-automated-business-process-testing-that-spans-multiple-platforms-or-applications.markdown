---

title: Automated business process testing that spans multiple platforms or applications
abstract: A system and method for automated software testing includes defining a data model of an automated software test for a feature or business process being tested and then identifying an address for a function library at a local or remote location for executing the data model of the automated software test based upon the platform of the application. This identified function library is accessed at the address at the local or remote location so that an execution of a function within the function library may be invoked to obtain results therefrom.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08296736&OS=08296736&RS=08296736
owner: Worksoft, Inc.
number: 08296736
owner_city: Addison
owner_country: US
publication_date: 20120312
---
This application is a Continuation application of U.S. patent application Ser. No. 11 781 701 filed on Jul. 23 2007 and entitled AUTOMATED BUSINESS PROCESS TESTING THAT SPANS MULTIPLE PLATFORMS OR APPLICATIONS published on Jan. 17 2008 as U.S. Publication No. 2008 0016499 now U.S. Pat. No. 8 141 043 issued on Mar. 20 2012. U.S. Publication No. 2008 0016499 and U.S. Pat. No. 8 141 043 are incorporated herein by reference.

Application Ser. No. 11 781 701 is a Continuation in part of U.S. patent application Ser. No. 11 033 361 filed on Jan. 11 2005 and entitled EXTENSIBLE EXECUTION LANGUAGE published on Jul. 13 2006 as U.S. Publication No. 2006 0156288 now U.S. Pat. No. 7 600 220 issued on Oct. 6 2009. U.S. Publication No. 2006 0156288 and U.S. Pat. No. 7 600 220 are incorporated herein by reference.

The present invention relates to automated software testing across multiple software platforms and more particularly to a method for testing across multiple software platforms using a mix of languages.

The implementation of software on a computer system requires that the software be tested in order to confirm that is operating as expected. Historically software functionality has been tested by creating a large combination of inputs to the software and verifying the outputs against the expected correct response.

To date these inputs have been supplied and outputs verified either by manual or automated test execution. Manual execution is time and labor intensive so automation is important to achieve economical test coverage. Scripting languages enable a programmer to automate test execution by simulating manual activity using code.

The problem with using scripting languages is that they are platform specific. Modern applications and business processes comprise components that are distributed over multiple platforms and functionality may be ported from one platform to another. This requires a means of test automation that can execute across multiple platforms using the languages best suited to each platform with flexibility to change to different languages should future needs arise.

This need for test procedures that span multiple platforms or applications is exemplified by enterprise planning applications such as SAP software whose functionality may be implemented using one or more platforms or whose business processes may integrate with third party applications. In either case there is a need to execute tests that span platforms or applications end to end within a single procedure.

The present invention disclosed and described herein in one aspect thereof comprises a system and method for automated software testing. A data model is defined of an automated software test for a business process being tested. The data model may span test steps across multiple applications or multiple components of the same application. An identification is made of at least one available address for a function library at a local or remote location for executing the automated software test based upon a platform of the application being tested. The identified function library is accessed at the local or remote location to invoke an execution of a function in the function library to obtain results from the execution of the function.

Referring now to the drawings and more particularly to there is a system and method for automated software testing that enables the automation of test procedures whose definition is independent from a specific platform or scripting language. The system comprises a database containing the test procedures that is logically connected during execution to one or more function libraries containing a number of functions that are specific to a particular language or platform. This database describes the enterprise execution environment including all applications application components platforms and their location and a table that describes how each type of component is recognized and what actions can be performed against it.

The test procedures are constructed within the database by selecting the application the component within the application the action to be performed against the component and the relevant data value s to be either input to the software or verified against the output. This data is passed to an application program interface API that makes a call to the function library associated with the platform and invokes the function needed to execute the specified action. The function returns its results to the API that in turn logs the results into the database . These functions may be written in any language or protocol that is appropriate to the associated platform or software operating environment. Thus a mix of these functions on different platforms may be executed during a single test procedure and functions may be substituted if the same test procedure must be executed on another platform.

Platforms are identified by an interface mechanism. This interface mechanism may be operating system dependent or independent or may be a capability of the development environment used to construct the application. For example the Windows operating system provides an API for standard application components within its environment as this interface mechanism while the Java runtime environment is operating system independent and supports accessibility through a standard class. Applications developed using either Java or .NET provide reflection interfaces and applications executing within a browser may be accessed through the document object model interface. This multiplicity of potential interface mechanisms introduces complexity into the automated test process that this invention addresses.

Software applications may also provide their own interface mechanism for interacting with the software. SAP software as a specific instance of this provides an interface known as the SAP GUI API graphical user interface application programming interface that allows actions to be performed with and against the components of SAP software for various purposes including the automated execution of tests. SAP software also provides services in the form of XML messages that may be used to invoke business processes and related functionality within the SAP software that may also be used for automated testing. A business process is a transaction such as creating a sales order or generating an invoice that may require the use of one or more software components or applications to complete the transaction.

Referring now to there is illustrated the manner in which a business process may be implemented across a plurality of software applications . A business process could comprise any business application such as generating a sales order or invoice that may require the use of multiple software components or applications in order to complete the business process. Each of the software components or applications which are implementing the business process may be executed on a number of different platforms . Thus each business process in addition to requiring operation across multiple software components or applications require the execution of these components or applications on multiple types of platforms . This of course renders the testing of the business process a very complex process.

Referring now also to there is illustrated the manner in which a business process may be implemented and tested to confirm its proper operation. Various software components or applications necessary to incorporate a desired business process are purchased at step . The software components or applications are configured to a desired business process at step . Once the software has been configured to operate according to the desired business process on the appropriate platforms the configuration of the business process is tested at step . The proper operation of the configuration of the software may then be tested.

Referring now to there is illustrated a software application or business process that requires an automated software testing procedure. The software application or business process may include any type of code operable on any hardware platform or in any software environment. The software application or business process includes components that are distributed across a mainframe a browser a PC a server mobile devices and XML messages . The mobile devices may include any number of devices including a mobile telephone personal data assistant mobile e mail device etc. The XML messages may be delivered across multiple transports using various protocols. Thus the execution of the software application or business process requires the execution of each of these components in different platforms as discussed previously and any testing procedure must demonstrate this behavior.

As can be seen an automated test procedure using a scripting language formatted only for the mainframe platform would be able to test the inputs and outputs of the mainframe component of the software application or business process but cannot provide testing capabilities with respect to the remaining components. Likewise scripting languages for mobile devices may not be able to execute components against the mainframe browser PC or server . The execution of XML messages may require yet another language depending on the protocol and transport. The limits of a particular scripting language to a specific component greatly limits the use of the scripted language. The manner of overcoming this problem is using multiple scripting languages one for each separate component. However composing a testing procedure for each component would require a great deal of programming time.

Referring now to there is illustrated a block diagram of the system enabling the automation of software testing across any platform using a mix of scripting languages. The database contains data models of automated test procedures described by actions to be performed on the application and components associated with different platforms to execute tests over each of the components. The data model of the automated test procedure including the application its platform interface component the component type action and data combined are generated and forwarded from the database to an API . The application its platform interface the component the component type action and data comprises the test action request illustrated in

The application includes an indication of the software application that is being tested by the automated testing software. The platform interface information provides an indication of the location of the function library for the application being tested. The component information includes an indication of the part of the software application that is to be tested. The component type indicates what kind of component is to be tested. The action information provides an indication of which particular function or activity is to be formed on the selected component type and the data includes any physical data necessary to carry out the requested action on the component. The test action request enables the API and function libraries to perform any desired test execution.

Referring now back to the API selects the particular function from a function library based on the platform interface necessary to perform the action forwarded from the database in the test action request and routes the test action request to the proper function library based on the location of the application. The selected function performs the action included within the test action request to generate a particular test result based upon the provided data. The function receives back the actual results which are compared to the expected results at the function . These results including either or both of the actual results and the comparison results are sent back to the database through the API and saved for logging purposes.

The function library comprises one or more functions each associated with a particular component. Each of the functions executes the test action request and generates a result of the action including any returned data values. The results illustrated in includes the results provided by function library and the results of the comparison of the results with an expected result. The expected result is provided to the function library from the database in the test action request . Using a combination of the functions applications and business processes may be tested over a number of platforms. Thus for example the test procedure data model for an application or business process that is executed on a browser PC and a mobile device would provide a set of test action requests that accessed function libraries and to generate results simulating execution of the application and business process across these components. Each of the functions in the function libraries enable particular actions to be executed on the platform with which the function library is associated. Function library enables the execution of actions on a mainframe platform . Function library executes actions against components on a browser platform Function library executes actions on a PC platform . Function library executes actions on a server platform and function library executes actions against components associated with mobile device platforms . Function library executes actions on an XML message platform .

Referring now to there is a flow diagram illustrating the process by which a particular test procedure may use the cross platform automated software testing functionalities of the present invention. Initially at step an application or business process to be tested is selected from the database . Next the platform interface of the application or business process is selected at step from a list of the platform interfaces within the database . Next a component within the application or business process is selected at step . The component comprises some part of the application that is to be tested by the automated testing process. The database performs at step a lookup of the component type from the database . The type of the component describes its characteristics for example whether it is a text field a push button a menu or a list. Each component type has an associated list of actions that may be performed against the component for example input or verify the value in a text box. Next an action that may be associated with the selected component type is selected at step and all necessary data parameters for performing the selected action on the component are supplied at step . This collection of information is stored as a test action request at step and passed to the API at step .

The API uses the IP address of the function library within the test action request to connect at step to the associated function in the function library necessary for carrying out the software test. The test action request is used to invoke the function to execute at step the information contained in the test action request . This process involves performing the provided action on the provided component using any of the data provided in the test action request . A result is received from the execution of the function at step and the result may be compared to an expected result at step . The results are returned to the database via the API at step . The results are stored at step within the database .

In there are illustrated function libraries and an application or business process that resides upon multiple platforms at multiple locations. The function libraries are distributed across a PC platform in a first location a mainframe platform in a second location and a web browser platform in a third location. Each of these platforms is able to communicate with each other via the Internet or intranet . The application or business process is additionally implemented on each of the different platforms illustrated in . The fact that the application or business process may be executed on the PC platform mainframe platform and browser platform require that locations of the function libraries must be able to be determined such that the automated test execution may be run. The locations of the function libraries are identified by an IP address.

The PC platform includes application or business process and function libraries that are associated with execution on the PC platform . The PC platform is able to communicate with the mainframe platform via an intranet . The intranet may comprise any type of internal network that is implemented within a defined location or area such as a company intranet. The PC platform communicates with the browser platform over the Internet . The Internet comprises a worldwide communications network enabling wide spread communication amongst connected entities.

The mainframe platform also includes applications and function libraries that are executed within this operating environment. Likewise the browser platform includes applications and function libraries that are executable and operable within the browser environment. Since the function libraries are located and associated with different platforms that are interconnected via an intranet or internet in order for an application program interface to access these function libraries to perform automated testing procedures there is the necessity of some manner for accessing these function libraries in different locations.

In there is illustrated the operation of the automated software testing system of the present invention having function libraries located at a number of locations having separate IP addresses. Thus the mainframe browser PC server mobile devices and XML message and the associated functions of the function libraries are at separate locations associated with separate IP addresses. In order to make it possible for the API to locate a particular function in a function library each function library will have associated therewith an IP address. The function library at that location associated with the application or business process is accessed via the Internet or an intranet using this IP address. In this manner the API may access functions by routing test action requests to and receiving results from the IP address which is associated with the function library 

The table containing the information including the application or business process function library and IP address is contained within the database described with respect to . In this manner a much greater variety of function libraries may be accessed since a user is not limited to those function libraries contained within the processing entity with which the user is working but may access any platform containing function libraries that are accessible via some type of intranet or Internet network.

Referring now to there is illustrated a function library which is comprised of a set of functions that are each associated with a component type and the action to be performed against the component type and the process performed by the function . The API passes the test action request that contains the component component type action and data to the function library and the function library selects the function that is associated with the selected action and component type. This function executes the action and retrieves the result which is returned to the API . The particular function within the function library that is selected for generating the execution results is selected based upon the component selected the type of action that is being performed and the data upon which the action is to be performed. The function library is at a location having an associated IP address.

The operation of the function library is more fully illustrated in wherein once the function is selected at step the test action request is provided to the selected function at step . The function extracts at step the provided data from the test action request and uses this data to perform the particular action associated with the selected function on a particular component at step . This operation provides a particular result and this result is retrieved at step such that the results may be provided back to the application program interface at step . Alternatively results from step may be compared to an expected result and this result is additionally provided back to the API at step . In this manner for the selected action and associated data automated execution may be performed on any number of platforms or software operating environments.

Referring now to there is provided a particular example wherein the system of the present disclosure is used to execute tests for an application or business process . The application or business process includes three components a browser component that is operable within a browser environment a server component that is operable within a server environment and a mobile device component that is operable within a mobile device environment. A test action request is created for each of these components. The makeup of the test action request depends upon the particular action that is desired to be tested with respect to the application or business process for the associated component. While the disclosure with respect to illustrates a test action request being created for each of the browser component server component and mobile device component a user might desire to test only a single one or pair of these components in which case there would only be one or two test action requests provided to the application program interface . Additionally any component of the application or business process may be tested in addition to those discussed above.

The application program interface utilizes the IP address information within each of the test action requests to route the test action request to three different function libraries associated at three different locations having separate IP addresses. For the test action request for the browser component the API routes the test action request at to function library one at IP address one. For the server component the test action request is routed at from the API to a function library two at IP address two. Finally the test action request for the mobile device component is routed to function library three at wherein the function library three is located at IP address three. It is noted that no test action request is transmitted to function library four at IP address four since no component requiring the functions of function library four is included within the application being tested.

Each of the function libraries and generates a result in the manner described hereinabove responsive to each of the test action requests received from the application program interface . The results may be compared with an expected result in the test action request to see if they match. The function libraries and transmit the results back to the API . Function library one transmits the results of the test for the browser component to the API at . Function library two transmits the results for the test of the server component back to the API at . Function library three transmits the results of the test for the mobile device component back to the API at . Each of the results received at the API is transmitted from the API at to a result log . There are three separate results transmitted from the API to the result log at since there are three separate results coming from each of the function libraries and . Each of these results are associated with a separate test for each of the browser component server component and mobile device component respectively. The result log then has three separate results stored therein that may be accessed by the user to determine the results of a test for application .

Although the preferred embodiment has been described in detail it should be understood that various changes substitutions and alterations can be made therein without departing from the spirit and scope of the invention as defined by the appended claims.

