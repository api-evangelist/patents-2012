---

title: Systems and methods for enabling database disaster recovery using replicated volumes
abstract: A computer-implemented method for enabling database disaster recovery using replicated volumes. The method may include (1) identifying at least one primary volume that is replicated to at least one secondary volume and includes at least one database, (2) detecting an attempt by a database application to write to the database on the primary volume, (3) detecting a write to a transaction log of the database on the primary volume by the database application that updates the transaction log to reflect the write to the database on the primary volume, and (4) replicating the write to the transaction log to the secondary volume to enable the database application to failover to the secondary volume without replicating the write to the database to the secondary volume. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08874508&OS=08874508&RS=08874508
owner: Symantec Corporation
number: 08874508
owner_city: Mountain View
owner_country: US
publication_date: 20121002
---
As enterprises increasingly rely on and store large amounts of information in their day to day operations database replication and recovery has become increasingly important. Failure of a database may result in significant losses of productivity and or significant financial losses. Thus the true cost of a database failure may be proportional to the amount of time the database is unavailable. Accordingly timely recovery of failed databases may be critical for many enterprises.

One traditional method of replicating databases may include maintaining a primary database on a primary server and a standby database on a standby server. In this method the standby database is structurally identical to the primary database and is kept synchronized with the primary database. In the event of a failure of the primary database the standby database may take on the role of the primary database. Unfortunately maintaining active standby databases and servers using this method may be costly.

Another method of replicating databases may include replicating the volumes that store databases. For example a database may be stored to volumes on a primary server using this method the volumes on the primary server may be replicated to volumes on a secondary server. In the event of a failure of the database on the primary server the database may be brought online on the secondary server. Unfortunately this method of replicating databases has traditionally required that all data associated with the database e.g. data files transaction logs archived transaction logs control files etc. be replicated to the secondary server even though much of this data may be redundant. Accordingly the instant disclosure identifies and addresses a need for additional and improved systems and methods for enabling database disaster recovery using replicated volumes.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for enabling database disaster recovery using replicated volumes.

In one example a computer implemented method for enabling database disaster recovery using replicated volumes may include 1 identifying at least one primary volume that is replicated to at least one secondary volume and that includes at least one database 2 detecting an attempt by a database application to write to the database on the primary volume 3 detecting a write to a transaction log of the database on the primary volume by the database application wherein the write to the transaction log updates the transaction log to reflect the write to the database on the primary volume and 4 replicating the write to the transaction log to the secondary volume to enable the database application to failover to the secondary volume without replicating the write to the database to the secondary volume.

In some embodiments the step of replicating the write to the transaction log to the secondary volume may include replicating a control file of the database to the secondary volume that indicates how the transaction log should be used to roll forward the replicated database on the secondary volume prior to failing over the database application to the secondary volume.

In certain embodiments the method may further include 1 detecting a failure of the database application 2 recovering in response to detecting the failure of the database application the write to the database to the secondary volume by rolling forward the replicated database on the secondary volume using the replicated write to the transaction log on the secondary volume and 3 failing over upon recovering the write to the database the database application to the secondary volume.

In one embodiment the method may further include enabling prior to failing over the database application to the secondary volume the database application to failback to the primary volume without rolling back the database on the primary volume by 1 intercepting the write to the database on the primary volume and the write to the transaction log on the primary volume 2 buffering the write to the database and the write to the transaction log to a replication buffer 3 determining that the write to the transaction log has been replicated to the secondary volume and 4 flushing in response to the determination the write to the database and the write to the transaction log to the primary volume.

Failure of the database may occur before the write to the database and the write to the transaction log have been flushed to the primary volume. In some embodiments the method may further include resynchronizing after failing over the database application to the secondary volume the primary volume with the secondary volume by 1 discarding writes buffered to the replication buffer and 2 replicating transaction logs on the secondary volume that were updated on the secondary volume after failing over the database application to the secondary volume to the primary volume to enable the database application to failback to the primary volume by rolling forward the database on the primary volume using the replicated transaction logs.

In certain embodiments the method may further include 1 receiving a request to failback the database application to the primary volume 2 rolling forward in response to the request the database on the primary volume using the replicated transaction logs and 3 failing back upon rolling forward the database on the primary volume the database application to the primary volume.

In at least one embodiment the method may further include 1 receiving a request to create a snapshot of the primary volume and 2 creating in response to the request to create the snapshot of the primary volume the snapshot of the primary volume and a snapshot of the replication buffer.

In other embodiments the method may further include 1 detecting an overflow of the replication buffer and 2 creating in response to detecting the overflow of the replication buffer a snapshot of the primary volume to enable resynchronization of the primary volume with the secondary volume after failing over the database application to the secondary volume by rolling forward the database on the primary volume from the snapshot of the primary volume.

In some embodiments the method may further include 1 tracking in response to detecting the overflow of the replication buffer updates to transaction logs on the primary volume and 2 replicating updated transaction logs to the secondary volume.

In various embodiments the method may further include 1 detecting that the database application has archived the transaction log on the primary volume by creating a copy of the transaction log on the primary volume and 2 archiving in response to detecting that the database application has archived the transaction log on the primary volume the replicated transaction log on the secondary volume by creating a copy of the replicated transaction log on the secondary volume.

In certain embodiments replication of the write to the transaction log to the secondary volume may be performed by a volume replication application using block level replication.

In one embodiment a system for implementing the above described method may include 1 an identification module programmed to identify at least one primary volume that is replicated to at least one secondary volume and that includes at least one database 2 a database module programmed to detect an attempt by a database application to write to the database on the primary volume 3 a transaction module programmed to detect a write to a transaction log of the database on the primary volume by the database application that updates the transaction log to reflect the write to the database on the primary volume 4 a replication module programmed to replicate the write to the transaction log to the secondary volume to enable the database application to failover to the secondary volume without replicating the write to the database to the secondary volume and 5 at least one processor configured to execute the identification module the database module the transaction module and the replication module.

In some examples the above described method may be encoded as computer readable instructions on a computer readable storage medium. For example a computer readable storage medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 identify at least one primary volume that is replicated to at least one secondary volume and that includes at least one database 2 detect an attempt by a database application to write to the database on the primary volume 3 detect a write to a transaction log of the database on the primary volume by the database application that updates the transaction log to reflect the write to the database on the primary volume and 4 replicate the write to the transaction log to the secondary volume to enable the database application to failover to the secondary volume without replicating the write to the database to the secondary volume.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for enabling database disaster recovery using replicated volumes. As will be explained in greater detail below by selectively replicating primary volumes containing database components to secondary volumes the systems and methods described herein may reduce the amount of data that is replicated to secondary volumes to enable a database to be quickly and efficiently recovered from the secondary volumes. For example by selectively replicating only changes to transaction logs on primary volumes to secondary volumes the systems and methods described herein may enable database applications to failover to secondary volumes without needing to replicate changes to the databases associated with these transaction logs. Furthermore in some examples by ensuring that writes to databases and or transaction logs are first committed to secondary volumes before they are committed to primary volumes these systems and methods may enable databases to be quickly and efficiently recovered from the primary volumes.

The following will provide with reference to and detailed descriptions of exemplary systems for enabling database disaster recovery using replicated volumes. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with and . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In addition and as will be described in greater detail below exemplary system may include a transaction module programmed to detect a write to a transaction log of the database on the primary volume by the database application that updates the transaction log to reflect the write to the database on the primary volume. Exemplary system may also include a replication module programmed to replicate the write to the transaction log to the secondary volume to enable the database application to failover to the secondary volume without replicating the write to the database to the secondary volume. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application. For example one or more of modules in may represent a block level volume replication application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. server and or server computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

As illustrated in exemplary system may also include one or more databases such as database and replicated database . In one example database and replicated database may be configured to store database data managed by a database application. For example database and replicated database may represent one or more files e.g. an ORACLE DATAFILE that contain database data and or objects e.g. database tables database indexes etc. . In various examples replicated database may represent a partial or complete copy of database that has been replicated e.g. transmitted to a secondary location. In at least one example database and or replicated database may also represent other files and data associated with a database and or a database application.

Database may also represent portions of a single database or computing device or a plurality of databases or computing devices. For example database may represent a portion of server in computing system in and or portions of exemplary network architecture in . Alternatively database in may represent one or more physically separate devices capable of being accessed by a computing device such as server in computing system in and or portions of exemplary network architecture in

As illustrated in exemplary system may also include a primary volume and a secondary volume configured to store one or more databases transaction logs archived transaction logs control files and or replication buffers.

As illustrated in exemplary system may also include one or more transaction logs such as transaction log replicated transaction log archived transaction log and replicated archived transaction log . Transaction log and replicated transaction log may represent a log e.g. an ORACLE REDO LOG configured to record changes e.g. committed changes or pending changes to a database e.g. database or replicated database . In one example transaction log and replicated transaction log may be used to roll forward a database from a backup or snapshot of the database. Transaction log and replicated transaction log may also represent one or more files e.g. an ORACLE REDO LOG FILE used to record changes to a database. In various examples replicated transaction log may represent a partial or complete copy of transaction log that has been replicated e.g. transmitted to a secondary location.

Archived transaction log and replicated archived transaction log may represent a transaction log e.g. transaction log or replicated transaction log that has been archived. In one example archived transaction log and replicated archived transaction log may each represent a copy of a transaction log. For example archived transaction log may represent a copy of transaction log and replicated archived transaction log may represent a copy of replicated transaction log . Archived transaction log and replicated archived transaction log may also represent one or more files e.g. an ORACLE ARCHIVED REDO LOG FILE used to archive a transaction log.

As illustrated in exemplary system may also include one or more control files such as control file and replicated control file . In one example control file and replicated control file represent one or more files that indicate how transaction logs and archived transaction logs should be used to roll forward a database from a backup snapshot or copy. For example as will be explained in greater detail below replicated control file may indicate how replicated transaction log and or replicated archived transaction log may be used to roll forward replicated database prior to failing over database application to secondary volume . In at least one example control file and replicated control file may represent one or more ORACLE CONTROL FILES.

As illustrated in exemplary system may also include one or more database applications such as database application . In various examples database application may represent an application e.g. ORACLE DATABASE or IBM DB2 used to interact manage and or modify a database.

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a server in communication with a server via a network . Server and or server may be programmed with one or more of modules and or may store all or a portion of the data in database and or replicated database .

In one embodiment one or more of modules from may when executed by at least one processor of server and or server facilitate server and or server in enabling database disaster recovery using replicated volumes. For example and as will be described in greater detail below one or more of modules may cause server and or server to 1 identify at least one primary volume e.g. primary volume that is replicated to at least one secondary volume e.g. secondary volume and includes at least one database e.g. database 2 detect an attempt by a database application e.g. database application to write to the database on the primary volume 3 detect a write to a transaction log e.g. transaction log of the database on the primary volume by the database application that updates the transaction log to reflect the write to the database on the primary volume and 4 replicate the write to the transaction log to the secondary volume to enable the database application to failover to the secondary volume without replicating the write to the database to the secondary volume.

Servers and generally represent any type or form of computing device that is capable of reading computer executable instructions. Examples of servers and include without limitation application servers and database servers configured to provide various database services and or run certain software applications. Additional examples of servers and may include without limitation laptops tablets desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a Wide Area Network WAN a Local Area Network LAN a Personal Area Network PAN the Internet Power Line Communications PLC a cellular network e.g. a Global System for Mobile Communications GSM network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between server and server .

At step one or more of the systems described herein may identify at least one primary volume that is replicated to at least one secondary volume and that includes at least one database. For example at step identification module may as part of server in identify primary volume that is replicated to secondary volume and that includes database .

The systems described herein may perform step in any suitable manner. In one example identification module may identify primary volume by examining a database or replication configuration file. In another example identification module may represent a portion of a volume replication application that enables an administrator to indicate primary volume database and or secondary volume and configure replication of primary volume to secondary volume .

In at least one example identification module may identify one or more primary volumes used by a database application to store database components e.g. databases transaction logs control files etc. and may initially replicate the one or more primary volumes to one or more secondary volumes. As a result of this initial replication the one or more primary volumes and the one or more secondary volumes may contain identical data. For example identification module may perform an initial complete replication of primary volume to secondary volume . For example identification module may create a copy of database e.g. replicated database transaction log e.g. replicated transaction log archived transaction log e.g. replicated archived transaction log and control file e.g. replicated control file on secondary volume .

As will be explained in greater detail below the systems and methods described herein may subsequently replicate modifications to primary volume to secondary volume in a selective manner. For example changes to transaction log archived transaction log and control file on primary volume may be replicated to replicated transaction log replicated archived transaction log and replicated control file on secondary volume while changes to database on primary volume may not be replicated to replicated database on secondary volume . In this example as will be explained in greater detail below replicated database on secondary volume may be rolled forward to the state of database on primary volume using replicated transaction log replicated archived transaction log and or replicated control file .

As used herein the term volume may refer to storage on one or more computer readable storage mediums e.g. a portion or portions of one or more physical disks capable of storing database components. In various examples a volume may include and be organized by at least one file system. The term volume may also refer to any volume that may be managed by a volume manager e.g. VERITAS VOLUME MANAGER or replicated by a volume replicator e.g. VERITAS VOLUME REPLICATOR . In at least one example a volume may appear to a database application as a physical disk partition.

The term volume may also refer to a set of volumes to which a database application stores its database and database components. For example a database application may store control files to one volume data files to another volume transaction logs to yet another volume and archived transaction logs to still another. In this example the term volume may include the group of volumes that stores the control files the data files the transaction logs and the archived transaction logs.

The term primary volume as used herein may generally refer to a volume that is used to store a database and or associated other database components and that is replicated to a secondary volume. For example a primary volume may include at least a portion of the storage available to a primary database server e.g. server in . In this example to ensure that data stored within the database will not be lost and or to ensure that the database will remain accessible after a failure of the primary volume the database and or associated other database components on the primary volume may be replicated to a secondary volume which may be a portion of the storage available to a standby database server e.g. server in .

As used herein the term replication may generally refer to the process of copying or mirroring data from one volume to another. Volumes may be replicated in a variety of ways. In one example each block of a volume may be independently replicated to another volume. In another example each file within a volume may be independently replicated to another volume.

At step one or more of the systems described herein may detect an attempt by a database application to write to the database on the primary volume. For example at step database module may as part of server in detect an attempt by database application to write to database on primary volume . As used herein the term database may generally refer to any collection of data that is organized by and or accessible via a database application and or one or more files that store this data e.g. an ORACLE DATAFILE .

The systems described herein may perform step in any suitable manner. In one example database module may monitor database on primary volume and detect any committed and or uncommitted changes to database . In another example database module may represent a portion of a volume manager that communicates directly e.g. via a storage or database application programming interface with a database application and or that provides storage to the database application. For example database module may manage writes to and reads from primary volume for database application . In this example database module may detect the attempt by database application to write to database on primary volume by receiving a request from database application to write to database on primary volume .

In some instances a database application may not immediately write a change to database to primary volume . For example database application may record a pending write to database to transaction log of database prior to actually committing the write to database . In these instances database module may detect the attempt by database application to write to database on primary volume by detecting a write to transaction log of database on primary volume by database application .

At step one or more of the systems described herein may detect a write to a transaction log of the database on the primary volume by the database application that updates the transaction log to reflect the write to the database on the primary volume. For example at step transaction module may as part of server in detect a write to transaction log of database on primary volume by database application that updates transaction log to reflect the write to database .

As used herein the term transaction log may generally refer to one or more logs e.g. an ORACLE ONLINE REDO LOG or files e.g. an ORACLE ONLINE REDO LOG FILE that record transactions pending on a database e.g. committed and uncommitted changes to the database and or one or more logs or files that may be used to roll forward a database from a previous state and or roll back a database to a previous state. For example transaction logs may be applied to a backup of a database to bring current the backup of the database.

The systems described herein may perform step in any suitable manner. For example step is similar to step therefore the discussion of step may also apply to step .

At step one or more of the systems described herein may replicate the write to the transaction log to the secondary volume to enable the database application to failover to the secondary volume without replicating the write to the database to the secondary volume. For example at step replication module may as part of server in replicate the write to transaction log to secondary volume to enable database application to failover to secondary volume e.g. as shown in without replicating the write to database to secondary volume .

The systems described herein may perform step in any suitable manner. For example replication module may replicate the write to transaction log on primary volume by duplicating or mirroring the write to replicated transaction log on secondary volume . In one example replication module may mirror the write to transaction log on primary volume to replicated transaction log on secondary volume by identifying one or more blocks on primary volume that have been modified by the write to transaction log and mirroring these modifications to corresponding blocks on secondary volume . For example replication module may identify one or more modified blocks on primary volume transmit these modified blocks to server and store the modified blocks to secondary volume . In this way replication module may ensure that replicated transaction log is kept in sync with transaction log .

In some examples replication module may synchronously replicate the write to transaction log to secondary volume . In other examples replication module may asynchronously replicate the write to transaction log to secondary volume . In at least one example replication module may replicate the write to transaction log to replicated transaction log in the same order that the write was written to transaction log .

In at least one example replication of the write to transaction log to secondary volume may be performed by a volume replication application using block level replication. For example a volume replication application may be configured to replicate primary volume to secondary volume . In this example replication module may cause the volume replication application to replicate the write to transaction log to secondary volume while also causing the volume replication application to not replicate the write to database to secondary volume .

Some database applications may use control files to record how transaction logs should be used to roll forward a database. For example an ORACLE CONTROL FILE may be used to roll forward an ORACLE DATABASE without resetting its transaction logs. In these instances replication module may replicate a control file of the database to the secondary volume as needed as part of replicating the write to a transaction log. In one example replication module may replicate control file to secondary volume after detecting that control file has been written to by database application and or otherwise modified.

Some database applications may also periodically archive transaction logs. For example some database applications record transactions to one of several fixed size transaction log files. After a transaction log file fills up and before the transaction log file is reused the database application will archive the transaction log file by creating an archived transaction log file from the transaction log file. In these scenarios one or more of the systems described herein may track the archival of transaction logs on the primary volume and in response to detecting that a transaction log has been archived archive an associated replicated transaction log on the secondary volume.

In one example replication module may 1 detect that database application has archived transaction log on primary volume by creating a copy of transaction log e.g. by creating archived transaction log on primary volume and 2 archive replicated transaction log on secondary volume by creating a copy of replicated transaction log e.g. by creating archived transaction log on secondary volume . To illustrate replication module may as part of server in detect that database application has archived transaction log on primary volume and transmit a message to another instance of replication module on server indicating that transaction log has been archived and or that replicated transaction log should be archived. In response to receiving the message sent from server replication module may as part of server in archive replicated transaction log on secondary volume by creating a copy of replicated transaction log e.g. archived transaction log on secondary volume . Upon completion of step exemplary method in may terminate.

At step one or more of the systems described herein may detect a failure of the database application. For example at step database module may as part of server in detect a failure of database application .

The systems described herein may perform step in any suitable manner. In one example database module may determine that database application has failed by determining that server database application primary volume and or database has failed or become inaccessible. In another example database module as part of server or a monitoring server may periodically query server and or database application for status updates and may determine that database application has failed as a result of receiving a status indicating that database application has failed or as a result of receiving no status in response to the query.

At step one or more of the systems described herein may recover the write to the database to the secondary volume in response to detecting the failure of the database application by rolling forward the replicated database on the secondary volume using the replicated write to the transaction log on the secondary volume. For example at step database module may as part of server in recover the write to database to secondary volume by rolling forward replicated database on secondary volume using the replicated write to transaction log e.g. replicated transaction log on secondary volume .

The systems described herein may perform step in any suitable manner. As mentioned above in an example at step identification module may have performed an initial replication of primary volume to secondary volume . At that point in time database transaction log archived transaction log and control file may have been identical to replicated database replicated transaction log replicated archived transaction log and replicated control file respectively. Thereafter database application on server may have updated e.g. written to database transaction log archived transaction log and or control file .

Thereafter as mentioned above at step replication module may have selectively replicated updates to transaction log archived transaction log and control file while not replicating updates to database . For this reason at the moment database application failed replicated transaction log replicated archived transaction log and replicated control file may have been virtually identical depending on the method of replication to transaction log archived transaction log and control file respectively. On the other hand replicated database may have remained unchanged since being initial replicated. In this example database module may roll forward replicated database to the state of database using replicated transaction log replicated archived transaction log and replicated control file . Database module may roll forward replicated database to the state of database by applying the writes to database recorded to replicated transaction log and or replicated archived transaction log according to replicated control file . After database module has rolled forward replicated database to the state of database replicated database may be virtually identical to database and be ready to failover database application to secondary volume .

At step one or more of the systems described herein may failover the database application to the secondary volume upon recovering the write to the database. For example at step database module may as part of server in failover database application to secondary volume . The systems described herein may perform step in any suitable manner. In one example database module may failover database application to secondary volume by configuring database application to read and write to replicated database replicated transaction log and replicated control file on secondary volume and bringing online database application on server as illustrated in . Upon completion of step exemplary method in may terminate.

In some scenarios after failing over a database application to a secondary volume it may be desirable to return the database application to the original primary volume. If the primary volume had been synchronously replicated to the secondary volume then at the time that the database application failed the primary volume and the secondary volume may be identical and the database application may failback to the primary volume after the database on the primary volume has been rolled forward without first having to roll back the database on the primary volume.

On the other hand if the primary volume was asynchronously replicated to the secondary volume the state of the primary volume may be ahead of the state of the secondary volume. For example using traditional data replication a write by a database application to a primary volume may first be written to the primary volume and then transmitted and replicated to a secondary volume. If the database application or the primary volume fails before the write has been replicated the primary volume will contain the write but the secondary volume will not. If the database application then fails over to the secondary volume and begins to write to the secondary volume the write may be lost and the changes made to the primary volume by the write may need to be rolled back prior to resynchronizing the primary volume with the secondary volume. As will be described in greater detail below to eliminate the need to roll back the write one or more of the systems described herein may replicate the primary volume to the secondary volume in a way that causes the state of the primary volume to lag behind that of the state of the secondary volume.

The steps shown in may be performed in a variety of ways. is an exemplary flow diagram that illustrates how modules and replication buffer on server in and modules on server in may enable database application to failback to primary volume without having to first roll back database on primary volume .

At step one or more of the systems described herein may intercept the write to the database on the primary volume and the write to the transaction log on the primary volume. For example at step replication module may as part of server in intercept the write to database on primary volume and the write to transaction log on primary volume .

The systems described herein may perform step in any suitable manner. In one example replication module may intercept all writes to primary volume . For example replication module may represent a portion of a volume manager that communicates directly with a database application and or that provides storage to the database application. In this example replication module may manage writes to and reads from primary volume for database application and may intercept each write made by database application . For example as shown in replication module may as part of server intercept a write step e.g. a write to database transaction log archived transaction log or control file .

At step one or more of the systems described herein may buffer the write to the database and the write to the transaction log to a replication buffer. For example at step replication module may as part of server in buffer the write intercepted at step to replication buffer .

The systems described herein may perform step in any suitable manner. In one example replication module may buffer the write to primary volume to replication buffer acknowledge to database application that the write was successful and then transfer the write e.g. if the write was to transaction log archived transaction log or control file to server to be replicated to secondary volume . For example as shown in replication module may as part of server buffer step the write intercepted at step to replication buffer acknowledge step to database application that the write was successful and transmit step the write to server to be replicated to secondary volume . In various examples steps and may be performed in an alternative order and or simultaneously. Even though writes to database may not be replicated to secondary volume the writes may still be intercepted and buffered to replication buffer .

Additionally and or alternatively replication module may track the order of writes buffered to replication buffer . For example replication module may track the order of a write buffered to replication buffer by associating a sequence identifier e.g. a serial number to the write. In at least one example replication module may include this sequence identifier when transferring the write to server . The sequence identifier may be used to ensure the write is committed to secondary volume in the same order that the write was buffered to replication buffer .

Returning to at step one or more of the systems described herein may determine that the write to the transaction log has been replicated to the secondary volume. For example at step replication module may as part of server in determine that the write to transaction log has been replicated to secondary volume .

The systems described herein may perform step in any suitable manner. For example as shown in replication module may as part of server receive the write sent at step commit step the write to secondary volume and acknowledge step to server that the write was successfully replicated to secondary volume . In this example replication module may as part of server determine that the write to transaction log has been replicated to secondary volume upon receiving the acknowledgement sent as part of step . In at least one example replication module may as part of server buffer the write to a replication buffer e.g. a replication buffer similar to replication buffer and then acknowledge that the write was successfully replicated to secondary volume before the write has been committed to secondary volume .

Returning to at step one or more of the systems described herein may flush the write to the database and the write to the transaction log to the primary volume. For example at step replication module may as part of server in flush the write to database and the write to transaction log to primary volume .

The systems described herein may perform step in any suitable manner. For example as shown in replication module may retrieve step the write from replication buffer and commit step the write to primary volume . By waiting to flush writes to primary volume until after the writes are written to secondary volume the systems described herein may cause the state of primary volume to lag behind that of the state of primary volume thereby eliminating the need to roll back database prior to failing back database application to primary volume . Upon completion of step exemplary method in may terminate.

As a result of buffering writes to replication buffer primary volume may not contain every write that database application has attempted to write to database transaction log archived transaction log and or control file . Instead some of the writes that database application attempted to write to primary volume may be stored to replication buffer . For this reason in at least one example a subsequent request e.g. by database application to read from database transaction log archived transaction log and or control file may be serviced at least in part from replication buffer . Similarly if a snapshot of primary volume is created the snapshot may not include every write that database application has attempted to write to primary volume . For this reason database module may create a snapshot of replication buffer whenever a snapshot of primary volume is created. For example database module may 1 receive a request to create a snapshot of primary volume and 2 create the snapshot of primary volume and a snapshot of replication buffer in response to the request to create the snapshot of primary volume . A snapshot of primary volume may include a snapshot of all or a portion of primary volume .

In some examples replication buffer may have a fixed size and may possibly overflow e.g. because of network connectivity issues . In these examples replication module may ensure that database application may quickly failback to primary volume by creating a snapshot of database before replication buffer overflows. This snapshot may later be used to roll forward database without having to first roll back database . For example replication module may 1 detect an overflow of replication buffer and then 2 create a snapshot of primary volume to enable resynchronization of primary volume with secondary volume after failing over database application to secondary volume by rolling forward database on primary volume from this snapshot of primary volume .

Even though replication buffer overflows modifications to transaction log archived transaction log and control file may still be required to be replicated to secondary volume . For this reason in some examples in response to detecting the overflow of the replication buffer replication module may 1 track updates to transaction log archived transaction log and or control file on primary volume and 2 replicate any tracked updates to secondary volume when possible. In one example replication module may track updates to transaction log archived transaction log and or control file by tracking writes to primary volume using region bitmap logging e.g. tracking which blocks on primary volume have been modified by writes to primary volume . As replication module begins to buffer writes to replication buffer replication module may determine whether transaction log archived transaction log and or control file have been updated and if so replicate the updates to secondary volume .

At step one or more of the systems described herein may discard writes buffered to the replication buffer. For example at step replication module may as part of server in discard writes buffered to replication buffer . The systems described herein may perform step in any suitable manner. In one example replication module may discard writes buffered to replication buffer by flushing replication buffer and or by clearing replication buffer .

Additionally and or alternatively replication module may identify and discard only writes buffered to replication buffer that have not yet been successfully committed to secondary volume . As mentioned above in one example replication module may track the order of writes buffered to replication buffer using sequence identifiers. In this example replication module may identify and discard only writes that have not yet been successfully committed to secondary volume by 1 identifying e.g. by querying server the sequence identifier associated with the last write that was successfully committed to secondary volume and 2 discarding all writes buffered to replication buffer associated with sequence identifiers greater than the identified sequence identifier. In at least one example replication module may flush the remaining writes buffered to replication buffer to primary volume .

At step one or more of the systems described herein may replicate transaction logs on the secondary volume that were updated on the secondary volume after failing over the database application to the secondary volume to the primary volume to enable the database application to failback to the primary volume by rolling forward the database on the primary volume using the replicated transaction logs. For example at step replication module may as part of server in replicate transaction logs on secondary volume that were updated on secondary volume after failing over database application to secondary volume to primary volume to enable database application to failback to primary volume by rolling forward database on primary volume using these replicated transaction logs.

The systems described herein may perform step in any suitable manner. In one example replication module may in response to failing over database application to secondary volume track modifications to replicated transaction log replicated archived transaction log and or replicated control file on secondary volume and upon determining that primary volume has been restored replicating these modifications to primary volume .

In at least one example upon replicating transaction logs on secondary volume that were updated on secondary volume after failing over database application to secondary volume to primary volume one or more of the systems described herein may continue to replicate writes to secondary volume to primary volume as described in steps in . Step is similar to steps therefore the discussion of steps may also apply to step .

At step one or more of the systems described herein may receive a request to failback the database application to the primary volume. The systems described herein may perform step in any suitable manner. For example at step database module may as part of server in receive a request from an administrator to failback database application to primary volume . In another example database module may receive the request to failback database application to primary volume via a configuration file.

At step one or more of the systems described herein may roll forward in response to the request the database on the primary volume using the replicated transaction logs. The systems described herein may perform step in any suitable manner. For example at step database module may as part of server in roll forward database on primary volume using the replicated transaction logs. Step is similar to step in therefore the discussion of step may also apply to step .

At step one or more of the systems described herein may failback upon rolling forward the database on the primary volume the database application to the primary volume. The systems described herein may perform step in any suitable manner. For example at step database module may as part of server in failback database application to primary volume . Step is similar to step in therefore the discussion of step may also apply to step . Upon completion of step exemplary method in may terminate.

As explained above by selectively replicating primary volumes containing database components to secondary volumes the systems and methods described herein may reduce the amount of data that is replicated to secondary volumes to enable a database to be quickly and efficiently recovered from the secondary volumes. For example by selectively replicating only changes to transaction logs on primary volumes to secondary volumes the systems and methods described herein may enable database applications to failover to secondary volumes without needing to replicate changes to the databases associated with these transaction logs. Furthermore in some examples by ensuring that writes to databases and or transaction logs are first committed to secondary volumes before they are committed to primary volumes these systems and methods may enable databases to be quickly and efficiently recovered from the primary volumes.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . In one example database from may be stored in primary storage device .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. The phrase computer readable storage medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable storage media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. Compact Disks CDs or Digital Video Disks DVDs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable storage medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable storage medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for enabling database disaster recovery using replicated volumes.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example modules and or data described herein may reside and or execute within a virtual machine. As used herein the phrase virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the phrase virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable storage media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive a request by a database application to write to a database on a primary volume that has been replicated to a secondary volume detect that the write to the database has been recorded via a write to a transaction log on the primary volume transform the write to the transaction log on the primary volume to a write to a replicated transaction log on the secondary volume use the write to the replicated transaction log on the secondary volume to roll forward a replicated database on the secondary volume and failover the database application to the secondary volume. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

