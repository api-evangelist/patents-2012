---

title: Systems and methods for improving performance of remote USB storage
abstract: Methods and systems described herein facilitate improving universal serial bus (USB) storage performance in remote computing environments. A virtual USB host is associated with a virtual machine running a guest operating system (OS) and is configured to communicate with a USB storage device that is connected to a remote terminal. The virtual USB host is further configured to transmit one of a data-in request to the USB storage device before the guest OS transmits the data-in request or an acknowledgement of a data-out request to the guest OS before the USB storage device transmits the acknowledgement.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09081722&OS=09081722&RS=09081722
owner: VMware,  Inc.
number: 09081722
owner_city: Palo Alto
owner_country: US
publication_date: 20121211
---
Virtual Desktop Infrastructure VDI refers to a system of providing complete centrally managed desktops to users using computer virtualization technology. VDI is used to create a large number of independent computing environments for a large number of users. In VDI each desktop is exported to the user from a virtual machine VM that is assigned to the user. The user interacts with the desktop using a remote terminal which may have its own resources such as compute resources memory network and storage. The remote terminal may include a Universal Serial Bus USB host for USB storage devices connected by the user. The USB host the device is connected to is therefore separated from the USB device driver within the VM by a virtualization layer and a remoting layer. The additional latency introduced between the USB device and the USB device driver results in lower performance due to the synchronous nature of USB data transfers. This issue is especially severe for USB storage devices because each operation consists of multiple requests which are submitted serially by the USB device driver.

As each request requires a round trip between the USB device and the USB device driver before the next request is submitted the total latency may be three times the round trip latency of the data pathway. When a connection over a high latency network such as the Internet is involved a latency of 100 ms is multiplied to at least 300 ms for each operation. The throughput to and from the USB device is therefore reduced substantially. Accordingly the throughput to and from the USB device is therefore reduced substantially impacting user experience.

Methods and systems described herein facilitate improving universal serial bus USB storage performance in remote computing environments. A virtual USB host is associated with a virtual machine running a guest operating system OS and is configured to communicate with a USB storage device that is connected to a remote terminal. The virtual USB host is further configured to transmit one of a data in request to the USB storage device before the guest OS transmits the data in request or an acknowledgement of a data out request to the guest OS before the USB storage device transmits the acknowledgement.

Host includes hardware virtualization software running on hardware and one or more VMs executing on hardware by way of virtualization software . Virtualization software is therefore logically interposed between and interfaces with hardware and VMs . Virtualization software may be implemented directly in hardware e.g. as a system on a chip firmware FPGA etc. Hardware includes at least one processor not shown wherein each processor is an execution unit or core on a microprocessor chip. Hardware also includes system memory not shown which is general volatile random access memory RAM a network interface port NIC a storage system not shown and other devices. Virtualization software is sometimes referred to as a hypervisor and includes software components for managing hardware resources and software components for virtualizing or emulating physical devices to provide virtual devices such as virtual disks virtual processors virtual network interfaces etc. for each of the VMs . Each of VMs may be an abstraction of a physical computer system and may include an operating system OS such as Microsoft Windows and applications which are referred to as the guest OS and guest applications respectively wherein the term guest indicates it is a software entity that resides within one of VMs .

In the exemplary embodiment an end user not shown connects to and interacts with one or more of VMs using remote terminal that is capable of communicating with host via network which may be the Internet a LAN a WAN or any combination thereof. Remote terminal may be or include VDI client software executing on a desktop computer laptop mobile device thin client server or other similar device. Remote terminal may be capable of displaying the graphical user interface GUI for the guest OS running inside each of VMs for the end user using a computer display or similar device. Remote terminal is also capable of receiving user input from the end user and transmitting the received user input to the guest OS running inside VMs . Remote terminal includes USB host that enables the end user to connect one or more USB storage devices to remote terminal .

Remote terminal is configured to interact with USB storage device on behalf of one of VMs . More specifically remote terminal includes USB stack that enables communication between remote terminal and USB storage device via USB host . USB stack may provide application programming interfaces APIs and or other interfaces for providing interaction between remote terminal and USB storage device . USB stack therefore provides an interface that enables the guest OS running inside one of VMs to communicate with USB storage device . USB stack may include a generic USB device driver not shown . More specifically virtualization software may provide a virtual USB host controller for use with the guest OS. Each guest OS running inside VMs may provide a guest USB stack and a USB device driver . USB device driver communicates with guest USB stack which is in communication with virtual USB host controller . Virtual USB host controller may be configured to pass data between USB device driver and USB storage device via network and USB stack . Thus the guest OS running inside one of VMs can communicate with USB storage device physically connected to remote terminal .

As an example of a communication between USB device driver and USB storage device a single command may be generated by USB device driver . USB device driver passes the command to guest USB stack for processing and forwarding to USB storage device . Virtualization software presents virtual USB host controller in a manner consistent with a physical USB host controller such that in one embodiment USB device driver and guest USB stack may be standard software components of commodity operating systems with no modifications. Guest USB stack passes the command to virtual USB host controller . Virtual USB host controller is aware of USB storage device on remote terminal and encapsulates or otherwise prepares the command for transmission via network . The command is sent via network to remote terminal which receives the command and de encapsulates the command or otherwise processes the command. Remote terminal passes the command to USB stack which processes and passes the command to USB host . Finally the command is transmitted via a USB bus not shown from USB host to USB storage device .

In the exemplary embodiment the USB mass storage class s bulk only protocol is used for communication between USB device driver and USB storage device . This protocol includes three types of requests a command block wrapper CBW having a read write or other request to the underlying storage device a data in or data out request used for transferring data to or from the underlying device as appropriate based on the command in the CBW and a command status wrapper CSW having a status returned by the underlying device after executing the command.

During a read request as described in further detail with respect to a CBW containing a data in indication is sent from USB device driver to USB storage device . USB host controller identifies the data in indication and determines an appropriate number of data in requests necessary to retrieve the requested data. USB host controller transmits the appropriate number of data in requests to USB storage device . In other words rather than waiting for USB device driver to transmit data in requests the USB host controller anticipates the data in requests and transmits them in advance. As USB device driver transmits data in requests to USB host controller USB host controller may immediately acknowledge the data in request. USB host controller delivers requested data to USB device driver as it arrives or as it is requested whichever comes later. Thus USB host controller may request and store data before USB device driver has requested data. In some embodiments USB host controller may receive some or all of the requested data before acknowledging the CBW to USB device driver .

USB stack receives the data in requests and as necessary places the requests in a queue. As USB stack receives data from USB storage device USB stack transmits the data to USB host controller . In some embodiments the USB stack may itself determine the appropriate number of data in requests and transmits them to USB storage device in anticipation of receiving the data in requests from USB device driver and or host controller .

Regardless of whether USB host controller or USB stack generates the anticipatory data in requests data is transmitted from USB storage device to USB host controller independently of when USB device driver issues data in requests. By transmitting anticipatory data in requests without waiting for USB device driver the requested data can be sent via network without waiting for requests and or acknowledgements to make a round trip between USB device driver and USB storage device . In order to enable out of sync communication between USB device driver and USB storage device USB host controller may simulate acknowledgements to commands sent by USB device driver .

USB device driver transmits a CSW signaling the completion of the read request to USB storage device . USB storage device acknowledges the CSW and an acknowledgement is sent to from USB storage device to USB device driver . Similar to data in requests the CSW may be simulated by USB host controller and or USB stack in anticipation of USB device driver transmitting the CSW.

In some embodiments USB host controller and or USB stack may generate and transmit a CBW data in requests and a CSW before USB device driver initiates a read operation i.e. with a CBW . For example commonly accessed data can be read from USB storage device and transmitted to USB host controller in anticipation of a read request from USB device driver . More specifically when USB storage device is connected to USB host data associated with the file system of USB storage device may be requested and transmitted to USB host controller . For example as described in further detail with respect to if the file system uses a File Allocation Table FAT further optimization may be achieved by optimizing an initial read of the FAT. Since the FAT is typically read once a storage device e.g. USB storage device is connected FAT sectors can be read from USB storage device and pushed directly to USB host controller before being explicitly requested by USB device driver . Thus the FAT may be read and stored by USB host controller before USB device driver requests the FAT. This reduces round trips for reading the FAT for each sector that needs to be read.

During a write operation in the exemplary embodiment and as described in further detail with respect to a CBW containing a data out indication is sent from USB device driver to USB storage device . USB host controller may immediately acknowledge the CBW without waiting for an acknowledgement from USB storage device . USB device driver may transmit one or more data out requests serially i.e. by waiting for each data out request to be acknowledged before sending the next data out request. In certain embodiments USB host controller may immediately acknowledge each data out request such that USB device driver sends data to USB host controller without waiting for an acknowledgement from USB storage device . USB host controller transmits the data out requests to USB storage device . After USB device driver transmits the final data out request USB device driver transmits a CSW. The CSW is forwarded to and acknowledged by USB storage device . Accordingly the data out requests may be sent asynchronously to USB storage device .

Thus USB read operations over a high latency connection are optimized by sending one or more anticipatory data in requests. By sending an appropriate number of data in requests without waiting for data to be returned round trip delays are at least partially obviated. In USB write operations data out requests are immediately acknowledged such that data can be transmitted without waiting for high latency acknowledgements.

In operation USB device driver initiates a transmission of a CBW to USB storage device indicating a data in operation. In operation USB host controller receives the transmission of the CBW from USB device driver and in operation USB host controller determines based on the CBW or otherwise an appropriate number of data in operations needed to retrieve the requested data. In operation USB host controller generates an appropriate number of data in operations needed to retrieve the requested data which are queued in operation by or for USB host . After the data in operations are received by USB host USB host controller sends CSW to be queued in USB host in operation . Also in response to receiving the CBW in operation USB host controller forwards the CBW to USB storage device in operation and an indication that the CBW is completed is sent from USB host controller to USB device driver in operation . In various embodiments operations and may be immediately carried out upon receipt of the CBW in operation at the same time i.e. concurrently or in close proximity in time such preceding or following one another without waiting for acknowledgement either from USB storage device of receipt of the CBW or from USB host .

USB storage device in operation transmits an acknowledgement that the CBW was received and completed. In one embodiment the acknowledgment sent by USB storage device to USB stack and not across network except in a case of potential errors. In operation USB host transmits the queued data in operations to USB storage device once the CBW is identified as being complete in operation . Operations and may occur before USB storage device responds in operation as the acknowledgement of the CBW is not necessary to determine the data in indication and transmit data in requests to USB Host . In operation USB storage device transmits the data requested in each data in request and in operation the queued CSW is transmitted from USB host to USB storage device .

USB device driver in operation transmits data in requests to USB host controller . Operation may be executed before or after either operation or . In other words data in requests are sent to USB storage device independent of when USB device driver transmits data in requests to USB host controller . As there may be more than one data in request some or all data in requests transmitted by USB host controller may be transmitted before the data in requests transmitted by USB device driver . In operation USB host controller transmits data to USB device driver in response to data in requests transmitted in operation . As USB device driver may request data before USB host controller has received the data operation may not execute until USB host controller has received the data.

In operation USB device driver transmits a CSW to USB host controller . In operation USB storage device transmits an acknowledgement that the CSW was received and completed to USB device driver . In some embodiments USB host controller requests a CSW from USB storage device before the USB device driver sends a CSW request to USB host controller . In that case the USB host controller stores the CSW received from storage device until the CSW request is received at USB host controller from USB device driver .

In operation USB device driver initiates a transmission of a CBW to USB host indicating a data out operation. In operation USB host controller receives the CBW and sends an identification to USB device driver that the CBW is complete in operation . In operation USB host controller forwards the CBW to USB storage device . In one embodiment operations and are carried out at the same time upon receipt of the CBW in operation . In operation USB device driver sends one or more data out requests with data and in response to USB host controller receiving the data out requests in operation USB host controller acknowledges the data out request being sent in operation . By acknowledging the data out request in operation USB device driver may continue to send data i.e. may send additional data out requests to USB host controller regardless of whether USB storage device has sent an acknowledgement that the CBW or prior data out requests were received and completed. In operation in response to receiving the data out requests USB host controller transmits data out requests with data to USB host where it is queued. As there may be more than one data out request some or all data out requests transmitted by USB device driver may be transmitted before the data out requests are transmitted by USB host controller . In operation USB device driver transmits a CSW to USB host where it is also queued.

In operation USB storage device transmits a CBW complete message to USB host and in response thereto USB host transmits the queued data out requests to USB storage device in operation . As USB host controller may have already acknowledged a data out request to USB device driver the acknowledgement from USB storage device may be ignored or discarded. In operation USB storage device transmits an acknowledgement that the data out request is complete to USB host . In operation USB host transmits the queued CSW to USB storage device and in operation USB storage device sends an indication that CSW is complete to USB device driver .

In one embodiment FAT sectors can be read from USB storage device and pushed or alternatively pulled directly to USB device driver before being explicitly requested by USB device driver . For example in operation USB host reads the FAT and submits a CBW to USB storage device once USB storage device is connected. In operation USB storage device sends an indication that the CBW is completed. In one embodiment the indication from USB storage device that the CBW is completed is sent to USB host controller . However once USB host receives the indication that the CBW is completed USB host transmits data in requests to USB storage device in operation . In operation USB storage device transmits the requested data. In one embodiment the data from USB storage device is sent to USB host controller . However once USB host receives the data USB host transmits in operation a CSW to USB storage device . In operation USB storage device transmits an acknowledgement that the CSW was received and completed. As a result of the above operations one or more of the completed CBW data and completed CSW may be received by USB host controller at the host prior to USB host controller receiving an expected request to read the FAT or a request to submit the CBW from USB storage driver . Therefore one or more of the completed CBW data and completed CSW may be queued within USB host controller .

In operation a request to read the FAT and submit the CBW is sent from USB device driver to USB host controller . As explained above USB host previously read the FAT and submitted the CBW once USB storage device was connected. In response USB storage device submitted an indication that the CBW is completed to USB host controller . As such once USB host controller receives the CBW from USB device driver USB host controller can immediately respond that the CBW is completed in operation . In operation USB device driver transmits data in requests to USB host controller . In response to receiving the data in requests from USB device driver USB host controller transmits the queued data to USB device driver in operation . In operation USB device driver transmits a CSW to USB host controller . In operation USB host controller transmits an acknowledgement that the CSW was received and completed to USB device driver . As explained above USB host controller may have already received the CSW from USB storage device before USB device driver sends a CSW. As such USB host controller stores the CSW until USB device driver sends the CSW. FAT data that is expected to be requested can be sent to USB host controller via network without waiting for requests and or acknowledgements to make high latency round trip between USB device driver and USB storage device .

The various embodiments described herein may employ various computer implemented operations involving data stored in computer systems. For example these operations may require physical manipulation of physical quantities usually though not necessarily these quantities may take the form of electrical or magnetic signals where they or representations of them are capable of being stored transferred combined compared or otherwise manipulated. Further such manipulations are often referred to in terms such as producing identifying determining or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The various embodiments described herein may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive network attached storage NAS read only memory random access memory e.g. a flash memory device a CD Compact Discs CD ROM a CD R or a CD RW a DVD Digital Versatile Disc a magnetic tape and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

Although one or more embodiments of the present invention have been described in some detail for clarity of understanding it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly the described embodiments are to be considered as illustrative and not restrictive and the scope of the claims is not to be limited to details given herein but may be modified within the scope and equivalents of the claims. In the claims elements and or steps do not imply any particular order of operation unless explicitly stated in the claims.

In addition while described virtualization methods have generally assumed that virtual machines present interfaces consistent with a particular hardware system persons of ordinary skill in the art will recognize that the methods described may be used in conjunction with virtualizations that do not correspond directly to any particular hardware system. Virtualization systems in accordance with the various embodiments implemented as hosted embodiments non hosted embodiments or as embodiments that tend to blur distinctions between the two are all envisioned. Furthermore various virtualization operations may be wholly or partially implemented in hardware or implemented with traditional virtualization or paravirtualization techniques. Many variations modifications additions and improvements are possible regardless the degree of virtualization. The virtualization software can therefore include components of a host console or guest operating system that performs virtualization functions. Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the appended claims s .

