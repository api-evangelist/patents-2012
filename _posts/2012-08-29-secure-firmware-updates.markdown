---

title: Secure firmware updates
abstract: A firmware update system is described that collectively handles secure firmware updates for hardware resources in a defined and consistent manner. The firmware update system may be configured to manage at least some firmware updates in a pre-boot environment (e.g., before an operating system is loaded). By doing so, the firmware update system exercises control over the updates and reduce entry points exposed to attackers. In one approach, update states are defined for hardware resources that are managed by the firmware update system. In a pre-boot environment, the update states for the managed hardware resources are set to enable firmware updates. The firmware update system may then detect and apply firmware updates available for the managed hardware resources. Update states may be set to disable before loading the operating so that firmware updates for managed resources are disabled outside of the secure pre-boot environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09218178&OS=09218178&RS=09218178
owner: Microsoft Technology Licensing, LLC
number: 09218178
owner_city: Redmond
owner_country: US
publication_date: 20120829
---
Different hardware resources e.g. modules components and devices of a computing platform may have firmware for which updates are published from time to time. Traditionally independent hardware vendors IHVs and original equipment manufacturers OEMs are responsible for handling firmware updates for their own hardware resources. Accordingly different vendors and manufacturers may establish different independent and or proprietary mechanisms and systems for deploying and applying updated firmware which generally operate in a post boot environment e.g. after an operating system is loaded by the computing platform . These multiple third party mechanisms may create security threats by providing corresponding entry points that may be exploited to inject improper and or malicious firmware for hardware resources. Accordingly traditional firmware updates that are enabled in a post boot environment present security threats that may potentially be used to take control of and or cause harm to computing platform.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Secure firmware updates are described. In one or more embodiments a firmware update system is implemented to collectively handle firmware updates for hardware resources in a defined and consistent manner. The firmware update system may be configured to handle at least some firmware updates in a pre boot environment e.g. before an operating system is loaded . By doing so the firmware update system may exercise control over the updates and reduce the entry points exposed to attackers. In one approach update states are defined for hardware resources that are managed by the firmware update system. In a pre boot environment the update states for the managed hardware resources are set to enable firmware updates. The firmware update system may then detect and apply firmware updates available for the managed hardware resources. Following application of the updates the update states are set to disable firmware updates and the operating system is loaded. In the runtime environment of the loaded operating system firmware updates are disabled for the managed hardware resources.

Traditionally independent hardware vendors IHVs and original equipment manufacturers OEMs are responsible for handling firmware updates for their own hardware resources which may expose uncontrolled entry points that attackers may take advantage of to inject malicious firmware.

Secure firmware updates are described. In one or more embodiments a firmware update system is implemented to collectively handle firmware updates for hardware resources in a defined and consistent manner. The firmware update system may be configured to handle at least some firmware updates in a pre boot environment e.g. before an operating system is loaded . By doing so the firmware update system may exercise control over the updates and reduce the entry points exposed to attackers. In one approach update states are defined for hardware resources that are managed by the firmware update system. In a pre boot environment the update states for the managed hardware resources are set to enable firmware updates. The firmware update system may then detect and apply firmware updates available for the managed hardware resources. Following application of the updates the update states are set to disable firmware updates and the operating system is loaded. In the runtime environment of the loaded operating system firmware updates are disabled for the managed hardware resources.

In the discussion that follows a section titled Operating Environment is provided and describes one environment in which one or more embodiments can be employed. Following this a section titled Secure Firmware Update Examples describes example techniques and details in accordance with one or more embodiments. Last a section titled Example System describes example computing systems and devices that can be utilized to implement one or more embodiments.

The computing device can be embodied as any suitable computing system and or device such as by way of example and not limitation a gaming system a desktop computer a portable computer a tablet or slate computer a handheld computer such as a personal digital assistant PDA a cell phone a set top box and the like. For example as shown in the computing device can be implemented as a television client device a computer and or a gaming system that is connected to a display device to display media content. Alternatively the computing device may be any type of portable computer mobile phone portable device tablet or slate device and or may include an integrated display. Any of the computing devices can be implemented with various components such as one or more processors and memory devices as well as with any combination of differing components. One example of a computing system that can represent various systems and or devices including the computing device is shown and described below in .

The computer readable media can include by way of example and not limitation all forms of volatile and non volatile memory and or storage media that are typically associated with a computing device. Such media can include ROM RAM flash memory hard disk removable media and the like. Computer readable media can include both computer readable storage media and communication media examples of which can be found in the discussion of the example computing system of .

The computing device also includes a variety of different hardware resources that represent different components and devices typically associated with the computing devices. The hardware resources may include integrated components removable components and external peripheral devices connectable to the computing device via wired and or wireless connections. At least some of the hardware resources have associated firmware that may be updated in accordance with the techniques described above and below. Some example hardware resources are discussed below in relation to .

The computing device of also includes a firmware system and a secure update module that reside on the computer readable media and which are executable by the processor s . The firmware system represents functionality to implement a firmware interface and perform various techniques to collectively manage firmware updates for a plurality of hardware resources as described above and below. The firmware system may be implemented as a standalone component as depicted in . The firmware system may also be implemented as an integrated component of the operating system .

The secure update module represents functionality to implement techniques for secure firmware updates described above and below. In particular the secure update module may manage updates for selected hardware resources of a computing device. Broadly speaking this involves enabling updates for managed hardware resources in a pre boot environment invoking and interacting with the firmware system to cause application of available firmware updates to occur in the pre boot environment and subsequently disabling firmware updates for the managed hardware resources prior to booting of the OS. In this way firmware updates for the managed hardware resources are disabled outside of a secure pre boot environment that is controlled by the secure update module . The secure update module may be implemented as a standalone component as depicted in . Some functionality described herein in relation to the secure update module and or the firmware system may also be implemented by a boot program for the computing device and or by the operating system .

Management of firmware updates by the firmware system may include but is not limited to discovery of resources and detection analysis acquisition distribution installation and tracking of firmware updates for particular resources that are registered or otherwise designated to obtain firmware updates through the firmware update system. Generally speaking resources are identified that are designated for firmware handling by the system and available updates for the resources are detected. The firmware system may further operate to acquire the updates in a suitable form and deploy distribute the updates to appropriate resources to initiate installation. The firmware system may also perform tracking of the updates to identify success or failure record version information for installed firmware enable rollbacks of firmware and so forth.

In this manner firmware updates may be performed securely in a pre boot environment through the secure update module in conjunction with the firmware system . Handling of firmware updates is offloaded to the firmware system which is configured to collectively manage firmware updates on behalf of different hardware resources and or corresponding IHVs and OEMs. The secure update module then operates to disable firmware updates outside of the pre boot environment. These and other aspects are described in greater detail in relation to the following figures.

A variety of different hardware resources that may be designated for management by the firmware system are contemplated. By way of example and not limitation depicts generally at some representative hardware resources in relation to an example computing device . The computing device shown in includes system firmware that may be associated with the particular processing system architecture and or platform for the device which in this example is depicted as central processing unit CPU that may be configured in various ways. For example the CPU may be implemented as a system on chip SoC processor that is configured to include multiple different integrated hardware components as a single chip. Other types of CPU architectures including ARM based and x86 architectures are also contemplated. Various other example hardware resources shown in that may have corresponding device firmware that is updateable include different communication radios e.g. WiFi mobile broadband Bluetooth Near Field Communication NFC etc. microprocessors sensors e.g. camera gyroscope accelerometer GPS pressure sensor proximity sensor etc. controllers e.g. touch controller audio video controller memory controller USB controller etc. and other integrated hardware resources of the computing devices.

The techniques for secure firmware updates described herein may also be applied to accessory devices that are connectable to the computing device via corresponding interfaces . A variety of different accessories are contemplated that may be connected via wired and or wireless interfaces. The accessory devices include external peripheral devices and or removable swappable devices that are configured to be received and connected by way of a corresponding port bay or other integrated connection portion of the computing device . Different accessory devices may be connected to the computing device at different times. At least some accessory devices are configured as hot swappable e.g. plug and play devices. By way of example and not limitation accessory devices may include input devices e.g. keyboard mouse stylus etc. output devices e.g. speakers a headset a printer etc. and display devices as well as various other devices such as a game controller power adapter musical accessory device and so forth. Accessory devices may have associated firmware maintained on the devices as depicted in that may be updated through the firmware system.

Each resource may accordingly have its own associated device firmware . Updates to device firmware may be matched to resources and applied on an individual basis to both integrated and accessory devices. Additionally or alternatively device firmware for some resources may be updated as part of an update to system firmware in a combined manner. For example a plurality of microprocessors controllers and other components may be integrated as part of the SoC processor or other CPU and may be updated together. Generally the secure firmware updates described herein may be selectively applied in a pre boot environment to a selected group of designated hardware resources which may include both integrated components and accessory devices. The designated hardware resources for management through the system may be selected as core components of the computing device according to various criteria. For example core hardware resources may include those resources that are developed by or closely associated with the computing device manufacturer associated with partner OEMs IHVs considered critical to device operation and user experience such as core processing memory display components and or provided as part of the device design and or default configuration. Integrated components of a SoC design are one example of core hardware resources that may be designated for collective management via the system. Multiple other microprocessors controllers and or other individual components may also be designated for management of firmware through the system.

In some cases firmware updates for some non chosen hardware resources may be managed outside of the firmware system and or in a post boot environment using traditional techniques. In one or more embodiments though the secure update module may be configured to restrict or prevent any firmware updates from occurring outside of the pre boot environment. In this approach the secure update module is implemented to control firmware updates for each hardware resource of a computing device through the firmware system in a secure manner.

Having described an example operating environment consider now example details regarding secure firmware updates in accordance with one or more embodiments.

In the following section implementation details and example techniques for a secure firmware updates are discussed. The discussion includes some example procedure s that can be implemented in connection with any suitable hardware software firmware or combination thereof. In at least some embodiments the procedures may be implemented by way of a suitability configured computing device such as the example computing device of that includes or otherwise makes use of a firmware system and secure update module .

The boot program may include or make use of a firmware system and or secure update module as described herein. The firmware system and or secure update module provides a firmware interface configured to initialize hardware resources load appropriate drivers for the resources and otherwise perform operations defined for a boot sequence to set up the system. The techniques described herein may be implemented in conjunction with various different types of firmware systems. Examples of suitable firmware systems include but are not limited to Unified Extensible Firmware Interface UEFI Advanced Configuration and Power Interface ACPI Basic Input Output System BIOS interfaces and or custom Application Programming Interfaces APIs .

The secure update module may also be configured to implement a secure boot mode for the device. Secure boot mode provides a secure pre boot environment that prevents untrusted unrecognized and or malicious code from executing. In particular the secure update module may implement and enforce a security policy that defines what kinds of programs and boot services are able to run and restricted in the pre boot environment. Various techniques to verify code may be employed to ensure that any code allowed to run in the secure boot mode is trusted. For example a trust determination may be made by checking digital signatures associated with code against digital keys associated with known trusted entities. Assuming that a digital signature corresponding to code is determined to be valid the code may be designated as trusted and is allowed to run. On the other hand code which is un signed or does not have a valid digital signature may be designated as un trusted and execution of the un trusted code may be prevented. Additionally the secure update module may ensure that the boot program and or a corresponding operating system to load on the computing device are trusted.

Firmware updates for selected hardware resources of the computing device are enabled in the pre boot environment block . Here hardware resources may be configured to switch between different update states so that firmware updates may be selectively enabled and disabled. This may occur in various ways. For example firmware associated with hardware resources may be configured to toggle a data field defined to control firmware updates between an update enabled state and an update disabled state in response to corresponding events input and or triggers. In one approach a Boolean field or other suitable update state data object parameter associated with hardware resources may be set by default to enable updates when a computing device is powered on or reset. In addition or alternatively the secure update module may be configured to send a command as part of a boot sequence that causes hardware resources to enable firmware updates. In response to the enable command firmware or other code associated with the hardware resources may set an appropriate data field or otherwise take action to enable firmware updates.

Installation of firmware updates that are available for the selected hardware resources are initiated in the secure pre boot environment block . In particular secure firmware updates are applied in a pre boot environment to a selected group of designated hardware resources which may include both integrated components and accessory devices as noted above. Updates may be enabled in the secure pre boot environment for the designated hardware resources by default in response to an appropriate command or otherwise.

As mentioned the firmware system is configured to manage firmware updates which includes discovery of resources and detection analysis acquisition distribution installation and tracking of firmware updates for particular resources that are registered or otherwise designated to obtain firmware updates through the firmware update system. Updates may be discovered obtained and applied using various different techniques including techniques associated with UEFI ACPI and or BIOS firmware interfaces. Propriety and custom APIs and code to implement firmware updates may also be employed in some scenarios.

In the context of firmware updates any updates that are applied in the secure pre boot environment conform to an established security policy. Thus update packages handled and applied by the firmware system are digitally signed and identified as trusted by the system. As part of the update process the system may examine available updates and or installed versions of firmware to verify that the versions are correct the firmware is correctly matched to resources of the platform and that the firmware is secure trusted. The system may be further configured to flag or report any issues and automatically attempt to correct any deficiencies by locating and re applying correct firmware in appropriate circumstances.

Additionally a delayed firmware update feature may be implemented to stage updates for devices that may be unavailable such as a disconnected accessory device. In this case the system may obtain an available update and continue to check for the corresponding resource on each re boot until the device is available. The update is then applied to the appropriate resource. In one approach some hardware resources e.g. a designated CPU or microcontroller may be configured to pass through firmware updates updates to other resources including delayed. In this approach a master resource may stage updates for other components at the direction of the firmware system and then handle interactions with the other components to apply the updates. This may include checking for availability of the components upon start up and distributing the updates as appropriate.

Following application of any available updates firmware updates for the selected resources are disabled outside of the secure pre boot environment block . In this manner the firmware system may control firmware updates for managed devices such that updates are performed within the secure pre boot environment and prevented outside of this controlled environment. To disable firmware updates for managed devices the secure update module may communicate an appropriate command to hardware resources that causes hardware resources to disable firmware updates. A disable command or other comparable techniques may also be employed to disable updates and bypass the firmware update process when a secure pre boot environment cannot be established by the system. Another option is to associate a timer with a device that sets a limited time period for updating firmware. Updates may then be disabled according to the timer as described in greater detail below. As with the previously described enable command or enable on start up behavior firmware or other code associated with the hardware resources may set an appropriate data field or otherwise take corresponding action in response to the disable command to disable firmware updates.

The boot program may then pass control and hand off processing to a boot loader to load the operating system with firmware updates being disabled for the managed devices. Accordingly firmware updates are disabled in the runtime environment for the OS. Since firmware updates are disabled at the device level potential entry points exposed at runtime cannot be used to install malicious firmware. Further details regarding these and other aspects of secure firmware updates are discussed in relation to the following example procedures.

A determination is made regarding whether a secure environment is established by the boot program block . For instance the secure update module may implement a secure boot mode. Secure boot mode may be employed as an exclusive or optional boot mode for devices to provide a secure pre boot environment in which un trusted code is restricted and or prevented from executing. For some devices a user selectable option may be set to control whether or not secure boot mode is active. Another user selectable option may control whether or not secure firmware updates are active. As a precursor to applying available firmware updates the secure update module may perform one or more checks to determine whether secure boot mode and secure updates are active. If secure boot mode is active the secure update module also determines if a secure pre boot environment has been successfully established.

A firmware update process may be selectively performed based upon the results of the above mentioned determinations. Generally secure firmware updates for managed resources are applied when the secure pre boot environment is established. The firmware update process may be bypassed however if the secure pre boot environment cannot be established because secure boot mode is deactivated or for some other reason.

Assuming a secure environment exists per block hardware resources that are designated for management of firmware updates through the firmware system are ascertained block . Then a determination is made regarding whether there are updates available for the managed hardware resources ascertained per block block . If updates are available then the available updates are applied block . Block represents various techniques and operations that may be employed to implement firmware updates.

By way of example the firmware system and or operating system may be configured to reference a data structure in a defined format that identifies and describes properties of hardware resources and corresponding firmware associated with a computing device . The data structure provides a mechanism for identifying system firmware device firmware and accessory device firmware for updating to the system. In at least some embodiments core system firmware is responsible for allocating and populating the data structure in the designated format. In addition or alternatively the boot program may operate to create and populate the data structure to enumerate hardware resources associated with the computing device. This may occur during a boot sequence for the computing platform. A different instance of the data structure may be instantiated for each boot sequence to reflect current data for the firmware resources. The data structure may be exposed via UEFI or another suitable interface e.g. ACPI BIOS custom APIs etc. . The firmware system and or secure update module may then make use of data entries regarding resources contained in the data structure to discover resources configure firmware updates deploy the updates and otherwise set up and handle firmware updates for devices enumerated in the data structure.

As but one illustrative example the data structure may be configured as a table for a Unified Extensible Firmware Interface UEFI system. The UEFI is a standard that defines parameters of an interface between an operating system and firmware for a platform in the pre boot environment. The UEFI provides standard conventions for describing aspects of a platform to the OS through functions methods tables and so forth. Specifically the UEFI provides infrastructure conventions and techniques for data exchange and interaction between system boot code and a boot loader of the OS during booting. In at least some embodiments the infrastructure defined per UEFI may be leveraged to create a suitable data structure for implementation of secure firmware updates. Nonetheless it should be appreciated that a variety of other kinds of techniques systems tables databases and or data structures may also be employed to enumerate hardware resources to the firmware system in a comparable manner.

Entries in a suitable data structure identify and describe hardware resources that have updateable firmware. This may include resource types and categorization data instructions details regarding how to interact with the resources and update the resources links locations and or addresses that may be used to register for download or otherwise obtain updates and so forth. Moreover metadata for the entries may record status version information corresponding to the described resources. A variety of different fields may be defined for entries to capture information that is sufficient to enable the secure update module to set up and carry out updates. In at least some embodiment the different fields include an update state field as described previously that may be selectively set in accordance with techniques described herein to enable or disable firmware updates for corresponding resources. The update state fields associated with entries in the data structure reflect corresponding update state fields contained within firmware associated with hardware resources that are enumerated. Accordingly setting a value of the update state field for a particular resource may cause a change to the value within firmware for the particular resource.

It is once again noted that the above described table and or UEFI implementations are provided as illustrative examples of data structures suitable for use by a firmware update system. In practice a variety of different formats and techniques for exposing data regarding hardware resources may be employed. For example a table or other data structure comparable to the foregoing examples may be configured for other kinds of interfaces between an OS and system boot code including but not limited to ACPI custom APIs and BIOS interfaces.

The firmware update process employed may vary depending upon the particular type of firmware system that is implemented. Generally though the secure update module may check whether updates are available for resources identified from the exposed data structure. For instance firmware version information contained in the data structure may be compared with published updates to determine if firmware currently installed for resources is up to date. The secure update module may then locate and obtain available updates for out of date firmware in a manner prescribed by the particular firmware system. The secure update module may also examine digital signatures and or other credentials associated with the updates to make a trust determination as previously described. Trusted updates may be applied within the secure pre boot environment. This may involve distributing update packages that are trusted for consumption by corresponding hardware resources to apply the updates. Update packages may be configured and distributed in accordance with UEFI or another firmware system implemented by the platform. In another approach the secure update module may be configured to apply the updates on behalf of at least some hardware resources. On the other hand the secure update module may be configured to reject un trusted updates by discarding deleting ignoring quarantining or otherwise preventing the un trusted updates from being executed and applied by the system.

Once available updates are handled as directed by the secure update module a notification is sent to the managed resources to cause the managed resources to disable firmware updates block . This effectively disables firmware updates for managed devices outside of the secure pre boot environment. The notification may contain a disable command for processing by hardware resources. In particular firmware of hardware resources may be configured to handle commands from the firmware system to enable or disable firmware updates as directed. A global notification message may be sent to multiple resources. In addition or alternatively device specific messages may be sent to at least some resources.

Moreover for some resources timers may be used to control firmware updates and prevent updates from occurring outside of a defined time period. For instance a timer may be set when the device powers up which enable updates for a defined time period after power up. When the timer expires updates are automatically disabled. In this approach the length of the timer may be set to less than an expected time for the boot sequence so that updates are disabled before the OS loads.

The operating system may then be loaded with firmware updates disabled for the managed resources block . Here processing may be handed off to a boot loader after firmware updates are disabled in the described manner. The boot loader then handles booting of the OS. In the runtime environment for the OS attempts to update firmware of managed hardware resources are rejected since these resources have been set to disable updates at the device level.

When updates are not available per block the procedure may proceed to the disable notification at block and operating system loading of block directly without performing the operations to apply updates represented by block . Likewise in the case that a secure environment does not exist per block the procedure may disable updates by way of a disable command per block and then load the operating system be block . In this case the system may bypass firmware updates altogether when a secure environment is not available.

In some cases the boot program may generate an error message when the secure environment is not available. A prompt may be presented to request input from a user regarding options to handle the error. For example the user may be prompted to indicate whether to abort the load start normally start in a safe mode that provides a reduced set of functionality and so forth. Alternatively the system may be configured to automatically abort the boot sequence when a secure environment does not exist.

In another approach core system firmware for a SoC device or other designated component e.g. a designated central processing unit CPU microprocessor or controller device may be configured as a gatekeeper which is connected to each managed hardware resource. In this approach firmware updates for the managed hardware resources may be updated and handled collectively through system firmware corresponding to the gatekeeper device. The system firmware may be responsible for distributing updates to the other resources when firmware updates are enabled. Accordingly updates to multiple different hardware resources may be controlled by managing an update state for the SoC device or other designated gatekeeper. When the update state for the designated gatekeeper device is set to disable updates the system firmware is configured not to distribute updates to other devices resources. In this way firmware updates for a group of selected devices may be enabled or disabled by managing the state associated with the designated gatekeeper device.

Updates are detected that are available for the one or more managed hardware resources block and the available updates that are detected are applied block . Processing and installation of updates may occur using different firmware systems and techniques in the manner previously described. Generally this involves enumerating a group of designated hardware resources for firmware management through the system. So long as secure updates are enabled for the enumerated resources the firmware system in conjunction with the secure update module may discover and deploy updates that are available for the enumerated resources. For instance the system may obtain update packages and distribute the update packages for application of the updates by individual resources. When a designated gatekeeper device is employed update packages formatted in accordance with the firmware system may be discovered and deployed collectively through firmware of the gatekeeper device. In some embodiments the secure update module is configured as a component of the gatekeeper device to handle secure firmware updates collectively for designated hardware resources.

A disable command is communicated to the one or more managed hardware resources following application of the updates to change the update states to disable firmware updates in a post boot environment block . This may occur just before control is passed to a boot loader to load the OS. Again updates for resources may be disabled individually by setting update fields that are associated with each different hardware resource. When a designated gatekeeper device is employed though updates for resources collectively managed through the gatekeeper device may be disabled together by setting the state of the gatekeeper device itself which disables updates for the multiple resources. Setting the state to disable prevents the gatekeeper device from distributing any firmware updates to other resources.

Having considered example details and techniques regarding secure firmware updates consider a discussion of an example system in accordance with one or more embodiments.

The example computing device as illustrated includes a processing system one or more computer readable media and one or more I O interfaces that are communicatively coupled one to another. Although not shown the computing device may further include a system bus or other data and command transfer system that couples the various components one to another. A system bus can include any one or combination of different bus structures such as a memory bus or memory controller a peripheral bus a universal serial bus and or a processor or local bus that utilizes any of a variety of bus architectures. A variety of other examples are also contemplated such as control and data lines.

The processing system is representative of functionality to perform one or more operations using hardware. Accordingly the processing system is illustrated as including hardware elements that may be configured as processors functional blocks and so forth. This may include implementation in hardware as an application specific integrated circuit or other logic device formed using one or more semiconductors. The hardware elements are not limited by the materials from which they are formed or the processing mechanisms employed therein. For example processors may be comprised of semiconductor s and or transistors e.g. electronic integrated circuits ICs . In such a context processor executable instructions may be electronically executable instructions.

The computer readable media is illustrated as including memory storage . The memory storage represents memory storage capacity associated with one or more computer readable media. The memory storage may include volatile media such as random access memory RAM and or nonvolatile media such as read only memory ROM Flash memory optical disks magnetic disks and so forth . The memory storage may include fixed media e.g. RAM ROM a fixed hard drive and so on as well as removable media e.g. Flash memory a removable hard drive an optical disc and so forth . The computer readable media may be configured in a variety of other ways as further described below.

Input output interface s are representative of functionality to allow a user to enter commands and information to computing device and also allow information to be presented to the user and or other components or devices using various input output devices. Examples of input devices include a keyboard a cursor control device e.g. a mouse a microphone for voice operations a scanner touch functionality e.g. capacitive or other sensors that are configured to detect physical touch a camera e.g. which may employ visible or non visible wavelengths such as infrared frequencies to detect movement that does not involve touch as gestures and so forth. Examples of output devices include a display device e.g. a monitor or projector speakers a printer a network card tactile response device and so forth. Thus the computing device may be configured in a variety of ways as further described below to support user interaction.

Various techniques may be described herein in the general context of software hardware elements or program modules. Generally such modules include routines programs objects elements components data structures and so forth that perform particular tasks or implement particular abstract data types. The terms module functionality and component as used herein generally represent software firmware hardware or a combination thereof. The features of the techniques described herein are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

An implementation of the described modules and techniques may be stored on or transmitted across some form of computer readable media. The computer readable media may include a variety of media that may be accessed by the computing device . By way of example and not limitation computer readable media may include computer readable storage media and communication media. 

 Computer readable storage media may refer to media and or devices that enable persistent storage of information in contrast to mere signal transmission carrier waves or signals per se. Thus computer readable storage media does not include signal bearing or transitory media. The computer readable storage media includes hardware such as volatile and non volatile removable and non removable media and or storage devices implemented in a method or technology suitable for storage of information such as computer readable instructions data structures program modules logic elements circuits or other data. Examples of computer readable storage media may include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage hard disks magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other storage device tangible media or article of manufacture suitable to store the desired information and which may be accessed by a computer.

 Communication media may refer to a signal bearing medium that is configured to transmit instructions to the hardware of the computing device such as via a network. Communication media typically may embody computer readable instructions data structures program modules or other data in a modulated data signal such as carrier waves data signals or other transport mechanism. Communication media also include any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

As previously described hardware elements and computer readable media are representative of instructions modules programmable device logic and or fixed device logic implemented in a hardware form that may be employed in some embodiments to implement at least some aspects of the techniques described herein. Hardware elements may include components of an integrated circuit or on chip system an application specific integrated circuit ASIC a field programmable gate array FPGA a complex programmable logic device CPLD and other implementations in silicon or other hardware devices. In this context a hardware element may operate as a processing device that performs program tasks defined by instructions modules and or logic embodied by the hardware element as well as a hardware device utilized to store instructions for execution e.g. the computer readable storage media described previously.

Combinations of the foregoing may also be employed to implement various techniques and modules described herein. Accordingly software hardware or program modules including the operating system applications firmware system secure update module and other program modules may be implemented as one or more instructions and or logic embodied on some form of computer readable storage media and or by one or more hardware elements . The computing device may be configured to implement particular instructions and or functions corresponding to the software and or hardware modules. Accordingly implementation of modules as a module that is executable by the computing device as software may be achieved at least partially in hardware e.g. through use of computer readable storage media and or hardware elements of the processing system. The instructions and or functions may be executable operable by one or more articles of manufacture for example one or more computing devices and or processing systems to implement techniques modules and examples described herein.

As further illustrated in the example system enables ubiquitous environments for a seamless user experience when running applications on a personal computer PC a television device and or a mobile device. Services and applications run substantially similar in all three environments for a common user experience when transitioning from one device to the next while utilizing an application playing a video game watching a video and so on.

In the example system multiple devices are interconnected through a central computing device. The central computing device may be local to the multiple devices or may be located remotely from the multiple devices. In one embodiment the central computing device may be a distributed cloud environment implemented via one or more server computers that are connected to the multiple devices through a network the Internet or other data communication link.

In one embodiment this interconnection architecture enables functionality to be delivered across multiple devices to provide a common and seamless experience to a user of the multiple devices. Each of the multiple devices may have different physical requirements and capabilities and the central computing device uses a platform to enable the delivery of an experience to the device that is both tailored to the device and yet common to all devices. In one embodiment a class of target devices is created and experiences are tailored to the generic class of devices. A class of devices may be defined by physical features types of usage or other common characteristics of the devices.

In various implementations the computing device may assume a variety of different configurations such as for computer mobile and television uses. Each of these configurations includes devices that may have generally different constructs and capabilities and thus the computing device may be configured according to one or more of the different device classes. For instance the computing device may be implemented as the computer class of a device that includes a personal computer desktop computer a multi screen computer laptop computer netbook and so on.

The computing device may also be implemented as the mobile class of device that includes mobile devices such as a mobile phone portable music player portable gaming device a tablet computer a multi screen computer and so on. The computing device may also be implemented as the television class of device that includes devices having or connected to generally larger screens in casual viewing environments. These devices include televisions set top boxes gaming consoles and so on.

The techniques described herein may be supported by these various configurations of the computing device and are not limited to the specific examples of the techniques described herein. This is illustrated through inclusion of the secure update module on the computing device . The functionality represented by the secure update module and other modules applications may also be implemented all or in part through use of a distributed system such as over a cloud via a platform as described below.

The cloud includes and or is representative of a platform for resources . The platform abstracts underlying functionality of hardware e.g. servers and software resources of the cloud . The resources may include applications and or data that can be utilized while computer processing is executed on servers that are remote from the computing device . Resources can also include services provided over the Internet and or through a subscriber network such as a cellular or Wi Fi network.

The platform may abstract resources and functions to connect the computing device with other computing devices. The platform may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the resources that are implemented via the platform . Accordingly in an interconnected device embodiment implementation of functionality described herein may be distributed throughout the system . For example the functionality may be implemented in part on the computing device as well as via the platform that abstracts the functionality of the cloud .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

