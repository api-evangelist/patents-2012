---

title: Systems and methods for providing early hinting to nonvolatile memory charge pumps
abstract: Systems and methods for providing early hinting to nonvolatile memory charge pumps are disclosed. Charge pumps associated with one or more nonvolatile memory dies can be proactively activated based on a determination that a command queue of access requests contains at least a threshold number of consecutive access requests of the same type. Based on analysis of the command queue, the memory controller can transmit an early hint command to a nonvolatile memory die to proactively activate its charge pump to provide a voltage suitable for executing the consecutive access requests of the same type.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08874828&OS=08874828&RS=08874828
owner: Apple Inc.
number: 08874828
owner_city: Cupertino
owner_country: US
publication_date: 20120502
---
Various types of nonvolatile memory NVM such as flash memory e.g. NAND flash memory and NOR flash memory can be used for mass storage. For example consumer electronics e.g. portable media players use flash memory to store data including music videos images and other media or types of information.

Memory controllers can be used to perform access requests e.g. program read and erase operations and memory management functions on NVM. In typical nonvolatile memory systems these different access requests each require different voltage levels one or more of which may exceed the voltage available from a system power supply. Charge pumps may be included to solve this problem. However they introduce their own attendant drawbacks. In particular charge pumps are typically activated and deactivated for each and every access request provided to the NVM. Moreover the charge pump output voltage must be readjusted for consecutive access requests of different types. These drawbacks can result in added system latency and power loss.

Systems and methods for providing early hinting to nonvolatile memory charge pumps are provided. A system for providing early hinting to nonvolatile memory charge pumps can include a host controller of a host device a memory controller of an NVM package and one or more NVM dies. Each NVM die can include a charge pump for generating voltages in excess of the system s power supply voltage. The higher voltages may be required for example for performing various access requests e.g. read program and erase operations which may all require different voltage levels on the NVM dies. According to various embodiments each charge pump may be physically located within or outside of and communicatively coupled to its respective NVM die. In further embodiments each NVM die may be associated with more than one charge pump or alternatively a single charge pump may be shared across multiple NVM dies.

The charge pumps can be proactively activated based on a determination that a set of access requests received at a controller e.g. the host controller or the memory controller contains at least a threshold number of consecutive access requests of the same type. Based on analysis of the set of access requests an early hint command can be transmitted to a nonvolatile memory die to proactively activate its charge pump for providing a voltage suitable for executing consecutive access requests of the same type. According to some embodiments the early hint command can be provided to the NVM die over a side band communications channel. After the access requests are executed the charge pump may be deactivated.

According to some embodiments the set of access requests may be re queued by the controller in order to group together access requests of the same type and or to optimize overall system performance.

Host can be any of a variety of host devices and or systems such as a portable media player a cellular telephone a pocket sized personal computer a personal digital assistant PDA a desktop computer a laptop computer and or a tablet computing device. NVM package can include NVMs e.g. in NVM dies and can be a ball grid array package or other suitable type of integrated circuit IC package. NVM package can be part of and or separate from host . For example host can be a board level device and NVM package can be a memory subsystem that is installed on the board level device. In other embodiments NVM package can be coupled to host with a wired e.g. SATA or wireless e.g. Bluetooth interface.

Host can include host controller that is configured to interact with NVM package . For example host can transmit various access requests such as read program and erase operations to NVM package . Host controller can include one or more processors and or microprocessors that are configured to perform operations based on the execution of software and or firmware instructions. Additionally or alternatively host controller can include hardware based components such as application specific integrated circuits ASICs that are configured to perform various operations. Host controller can format information e.g. commands and or data transmitted to NVM package according to a communications protocol shared between host and NVM package .

Host can include volatile memory . Volatile memory can be any of a variety of volatile memory types such as cache memory or RAM. Host can use volatile memory to perform memory operations and or to temporarily store data that is being read from and or written to NVM package . For example volatile memory can temporarily store a set of access requests to be sent to or to store data received from NVM package .

Host can communicate with NVM package over communications channel using host interface and memory controller . Communications channel can be any bus suitable for bidirectional communications. Communications channel can be fixed detachable or wireless. Communications channel can be for example a universal serial bus USB serial advanced technology SATA bus or any other suitable bus.

Memory controller can include one or more processors and or microprocessors that are configured to perform operations based on the execution of software and or firmware instructions. Additionally or alternatively memory controller can include hardware based components such as ASICs that are configured to perform various operations. Memory controller can perform a variety of operations such as dispatching commands issued by host .

Host controller and memory controller alone or in combination can perform various memory management functions such as garbage collection and wear leveling. In implementations where memory controller is configured to perform at least some memory management functions NVM package can be termed managed NVM or managed NAND for NAND flash memory . This can be in contrast to raw NVM or raw NAND for NAND flash memory in which host controller external to NVM package performs memory management functions for NVM package .

As depicted in memory controller can be incorporated into the same package as NVM dies . In other embodiments memory controller may be physically located in a separate package or in the same package as host . In some embodiments memory controller may be omitted and all memory management functions that are normally performed by memory controller e.g. garbage collection and wear leveling can be performed by a host controller e.g. host controller .

Memory controller may include volatile memory . Volatile memory can be any of a variety of volatile memory types such as cache memory or RAM. Memory controller can use volatile memory to perform access requests and or to temporarily store data that is being read from and or written to NVMs in NVM dies . For example volatile memory can store firmware and memory controller can use the firmware to perform operations on NVM package e.g. read program operations . Memory controller can use NVMs to persistently store a variety of information such as debug logs instructions and firmware that NVM package uses to operate.

Memory controller can use shared internal bus to access NVMs . Although only one shared internal bus is depicted in NVM package an NVM package can include more than one shared internal bus. Each internal bus can be connected to multiple e.g. 2 3 4 8 32 etc. memory dies as depicted with regard to NVM dies . NVM dies can be physically arranged in a variety of configurations including a stacked configuration and may be according to some embodiments integrated circuit IC dies.

NVMs can be any of a variety of NVM such as NAND flash memory based on floating gate or charge trapping technology NOR flash memory erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM ferroelectric RAM FRAM magnetoresistive RAM MRAM phase change memory PCM or any combination thereof.

NVMs can be organized into blocks which can the smallest erasable unit and further organized into pages which can be the smallest unit that can be programmed or read. In some embodiments NVMs can include multiple integrated circuits where each integrated circuit may have multiple blocks. Memory locations e.g. blocks or pages of blocks from corresponding integrated circuits may form super blocks . Each memory location e.g. page or block of NVMs can be referenced using a physical address e.g. a physical page address or physical block address .

NVM package may also include charge pumps each of which can be associated with a corresponding one of NVM dies . In some embodiments more than one charge pump may be associated with the same NVM die. Conversely the same charge pump may be shared between multiple NVM dies. In general charge pumps may be DC to DC converters that can amplify or reduce a given supply voltage. As one example a charge pump can double a given supply voltage V by connecting a capacitor across the supply thereby charging the capacitor to V. The circuit can then be switched such that the capacitor is in series with the power supply thereby supplying an output voltage of 2V. A constant DC output of 2Vmay be achieved by switching the circuit at a relatively high frequency e.g. 1 kHz 10 MHz and smoothing the output voltage with an output capacitor.

As depicted in charge pumps may be included within NVM dies . For example charge pumps can be fabricated in bare die form on NVM dies . In other embodiments charge pumps may be separate modules that are communicatively coupled to NVM dies . In typical NVM systems where access requests are dispatched in the order they are received charge pumps are activated and deactivated for each access request received at an NVM die. This is because each different type of access request generally requires a voltage level tailored to that request. The continual activation and deactivation of charge pumps in these NVM systems contributes to system latency because of the finite time lag associated with activating and deactivating the charge pumps.

Dispatching an early hint command along with a set of consecutive access requests of the same type can alleviate those and other issues found in typical NVM systems. An early hint command may proceed a set of access requests of the same type in order to proactively activate one or more charge pumps. The charge pump s may remain activated e.g. producing a specified voltage level suitable for executing the access requests until all of the access requests of the same type are executed. After all of the consecutive access requests of the same type are executed a command may be provided to deactivate the charge pump s .

System can include one or more command queues e.g. command queues and or command queue to assist with providing early hint commands. Command queue of NVM package and command queue of host are drawn in dashed lines to indicate that in various embodiments one or more command queues may reside in both either or neither of host and NVM package .

In some embodiments volatile memory can include one or more command queues for saving access requests e.g. read program and or erase commands received from host that have not yet been dispatched to NVM dies . The one or more command queues can be block device level queues. For example volatile memory may include a single command queue configured to retain all types of access requests e.g. read program and erase commands and or volatile memory can include a read queue for retaining read commands a program queue for retaining program commands and an erase queue for retaining erase commands. In some embodiments two or more different types of access requests may be combined in the same command queue. Persons skilled in the art will appreciate that other types of command queues for storing further types of access requests may be available. Consequently memory controller can scan one or more command queues in order to select one or more commands that may be dispatched to NVM . Prior to dispatching the one or more commands from a command queue e.g. command queue memory controller can determine whether to provide early hint commands to one or more charge pumps 

In embodiments in which two or more different types of access requests are stored in a single command queue and or all types of access requests are stored in a single command queue memory controller may be configured to analyze the command queue and provide an early hint command to a charge pump when a certain threshold number of access requests of the same type are found. Access requests that are of the same type e.g. read write or erase requests may sometimes be referred to as like access requests. As one example memory controller may provide an early hint to a charge pump e.g. charge pump if it determines that there are at least five consecutive read commands for NVM in queue .

In some embodiments memory controller may re queue the single command queue to group together like access requests in a single queue in order to take advantage of providing an early hint command for a group of like access requests. In other embodiments memory controller may re queue the single command queue into separate command queues for each type of access request. As used herein re queuing a command queue may involve reordering the access requests in a command queue and or separating access requests in a single command queue into multiple separate command queues.

In other embodiments host controller may use a command dispatcher to re queue and group together like access requests into a multi access command which can be dispatched to NVM package for further processing and or execution. These embodiments will be discussed in more detail below with respect to .

In yet further embodiments volatile memory may include multiple command queues where each command queue can include access requests addressed to one of NVM dies . Upon examining the access requests of such a command queue and determining that when a certain threshold number of access requests of the same type are found memory controller can provide an early hint command to a corresponding charge pump of an NVM die that corresponds to the access requests. Access requests from each of the command queues may thus be dispatched to the different NVM dies in parallel.

In other embodiments memory controller can re queue the commands addressed to each NVM die within a single command queue and re queued commands in each command queue can be dispatched sequentially such that only one NVM die is active at a time e.g. read commands for NVM die can be queued ahead of read commands for NVM die etc. . After the consecutive access requests of the same type from a particular command queue are dispatched memory controller can remove those commands from the queue and dispatch one or more commands to deactivate the relevant activated charge pumps.

The one or more command queues can generally each be serviced consecutively until the queue is empty thereby fully utilizing the benefits achieved from using an early hint command e.g. reduced latency resulting from keeping a charge pump activated for a string of consecutive access requests of the same type . In some embodiments however memory controller can have a set of fairness rules for servicing each of the separate command queues. For instance memory controller may attempt to service the command queues such that the benefits attained from utilizing early hinting to charge pumps are balanced against other system priorities in order to optimize overall system performance. In one example memory controller may determine that a particular set of access requests in an inactive command queue is of high priority for system function. Consequently memory controller may interrupt the servicing of the active command queue to run the high priority access requests in the inactive command queue.

In some embodiments memory controller can provide early hint commands to charge pumps over shared internal bus . However in other embodiments system can include side band communications channel which may reduce latency and improve signal integrity. Side band communications channel may be used by memory controller to provide early hint commands directly to charge pumps . According to some embodiments side band communications channel may include one or more busses similar to shared internal bus . In other embodiments side band communications channel may include individual direct communications links between memory controller and each of charge pumps 

Although the foregoing embodiments refer to memory controller and command queue a person skilled in the art will appreciate that one or more of those embodiments may be performed by host controller and command queue . In particular in managed NVM systems where memory controller is omitted host controller may perform any and all of the functions discussed above with respect to memory controller . As used herein host controller and memory controller may each be referred to as an NVM system controller. 

In still further embodiments an early hint command may be initiated by host . In particular if host initiates a long string of consecutive access requests of the same type e.g. from command queue and or transmits a multi access command to NVM package system can enter a system mode. For example system may enter a program mode when a long string of consecutive program commands is initiated e.g. while host syncs with another electronic device . Persons skilled in the art will appreciate that similar system modes may be available for other types of access requests.

When system enters such a mode host can provide a special early hint command to NVM package . The early hint command can be received at NVM package e.g. at memory controller and used to proactively activate one or more of charge pumps . Consequently a suitable voltage for the initiated access requests can be provided such that the respective addressed NVM die or dies can be immediately accessed without waiting for the charge pump s to be activated and deactivated between each individual access request.

In some embodiments a command dispatcher can be used to dispatch access requests. For example is a graphical view of an illustrative command dispatcher of a system e.g. command dispatcher of system of . Command dispatcher may be an individual module residing in the system e.g. in host or command dispatcher may be part of another system component e.g. software configured to be run on host controller .

Command dispatcher may receive multiple access requests to access one or more memory locations of an NVM for a period of time. As used herein an NVM refers collectively to the NVM package of a system e.g. NVM package . In some embodiments command dispatcher can save the multiple access requests in a command queue e.g. command queue . If command dispatcher analyzes the command queue and determines that a number of consecutive access requests stored in the command queue exceeds a threshold value are of the same type and or are addressed to the same NVM die command dispatcher can initiate an early hint command and then dispatch the memory commands to the NVM.

Alternatively after receiving the multiple access requests command dispatcher can analyze the command queue and actively select commands that are of the same type e.g. read program or erase commands . As a result the set of commands may include only read program or erase commands. Thus if during a particular period of time command dispatcher receives five read commands followed by two program commands and five read commands command dispatcher can group together the ten read commands. In embodiments where an NVM package includes multiple NVM dies command dispatcher may consult a logical to physical address table and only select commands that are addressed to the same NVM die. Command dispatcher can dispatch commands and an early hint command associated with commands to the NVM package for execution.

In other embodiments after determining set of commands command dispatcher can combine commands into multi access command . In some embodiments command dispatcher can form multi access command by combining a set of logical addresses a set of counters and a set of buffers associated with a set of commands into an array of logical addresses an array of counters and an array of buffers respectively. For instance each array of buffers may be used to cache data associated with a particular set of commands . Additionally command dispatcher may attach an early hint command to multi access command . The early hint command may include data used for early hinting including the number of commands in multi access command and the voltage required to execute those commands.

At an appropriate time command dispatcher can dispatch multi access command to the NVM package. For example command dispatcher can dispatch multi access command to the NVM package over a bus e.g. bus of .

In some embodiments command dispatcher can dispatch multi access command to the NVM in the form of an application programming interface API operation. An API can be any suitable interface that can allow a software program or module to interact with other software.

In some embodiments command dispatcher can dispatch multi access command to a memory controller e.g. NVM controller of . Upon receiving multi access command the memory controller can separate multi access command into its component set of commands. In some embodiments the memory controller may then reorder the set of commands such that they may be executed as efficiently as possible. For instance the memory controller may translate the array of logical addresses associated with the set of commands e.g. LBA into respective physical addresses and reorder the set of commands to group together commands addressed to the same NVM die. In other embodiments the memory controller may reorder the set of commands such that high priority commands are executed before low priority commands.

Early hint commands received from a memory controller e.g. memory controller of or a host device e.g. host of can be received at memory die over side band communications channel which can correspond to for example side band communications channel of . Side band communications channel may be part of a shared bus that communicatively couples a memory controller to more than one charge pump or it may be a single direct communications link to charge pump . According to some embodiments side band communications channel and data channel may communicate with memory die via separate I O interfaces. In other embodiments however one of data channel and side band communications channel can be omitted and memory die can communicate with the memory controller over a single communications channel.

Referring now to flowcharts of illustrative processes are shown in accordance with various embodiments. These processes may be executed by one or more components in a system e.g. system of or electronic device of . For example at least some of the steps in the processes of may be performed by control circuitry e.g. host controller and or memory controller of .

Turning first to process is shown for providing early hinting to nonvolatile memory charge pumps. Process may begin at step at which a set of access requests can be received at an NVM system controller e.g. host controller or memory controller of . In addition the set of access requests can be stored in a command queue. According to some embodiments the set of access requests may be received from a file system at a host controller e.g. host controller of . In other embodiments the set of access requests may be received at a memory controller e.g. memory controller of from a host device e.g. host of .

At step the controller can determine that the command queue includes a number of consecutive access requests of a particular type. Then at step the controller can determine whether the number of consecutive access requests of the particular type exceeds a predetermined threshold. If the number of consecutive access requests of the same type does not exceed the predetermined threshold process can return to step . On the other hand at step upon determining that the number of consecutive access requests of the particular type exceeds a predetermined threshold the controller can transmit an early hint command to an NVM e.g. NVM of to proactively activate a charge pump to a voltage suitable for executing the consecutive access requests of the same type. Then at step the consecutive access requests of the same type can be executed. Continuing to step the charge pump can be deactivated.

For instance the controller can analyze the command queue and determine that it contains a long string of consecutive read commands step . The controller can then compare the number of consecutive read commands to a predetermined threshold for initiating an early hint command. In one particular example the predetermined threshold may be set at three consecutive access requests at the same type. Thus if the number of consecutive read commands exceeds three the controller can transmit an early hint command to the NVM step . The early hint command can proactively activate the charge pump associated with the NVM to provide a voltage suitable for executing the consecutive read commands step . Once all of the consecutive read commands are executed step the charge pump can be deactivated step .

Turning now to process is shown for providing early hinting to nonvolatile memory charge pumps. Process may begin at step in which a set of access requests can be received at a controller e.g. host controller or memory controller of . Next at step a predetermined number of access requests can be stored in a memory. For example a set of access requests can be stored as a command queue in a volatile memory e.g. volatile memory or volatile memory of .

At step the controller can re queue the access requests to group together access requests of the same type. In some embodiments a single command queue can be re queued such that all or a predetermined number of access requests of the same type stored in the memory are grouped together. For example the controller can re queue the access requests such that all of the program commands are queued before all of the read commands and all of the read commands are queued before all of the erase commands. In some embodiments the controller can segregate all of the access requests of the same type into separate command queues. In further embodiments the controller can re queue the access requests based on which die of a multi die NVM system the access requests are directed to. For example the controller may re queue the access requests stored in the command queue to group together all of the program commands for a first NVM die e.g. NVM die of before all of the program commands for a second NVM die e.g. NVM die of FIG. etc. In additional embodiments the controller may organize the re queued access requests into a multi access request e.g. multi access request of .

At step for each group of access requests or alternatively for each multi access request the controller can transmit a command to proactively activate charge pumps to a voltage suitable for the access request type. For instance prior to or concurrently with servicing of the one or more command queues an early hint command can be dispatched to the relevant charge pump or pumps associated with the access requests. As one particular example before the controller begins to dispatch a string of consecutive program commands to an NVM die an early hint command can be dispatched to that die such that the charge pump associated with that die can be proactively activated to generate a voltage suitable to execute the program commands. At step the access requests can be executed.

It is to be understood that the steps shown in processes and are merely illustrative and that existing steps may be modified or omitted additional steps may be added and the order of certain steps may be altered.

While there have been described systems and methods for providing early hinting to charge pumps of a nonvolatile memory system it is to be understood that many changes may be made therein without departing from the spirit and scope of the invention. Insubstantial changes from the claimed subject matter as viewed by a person with ordinary skill in the art now known or later devised are expressly contemplated as being equivalently within the scope of the claims. Therefore obvious substitutions now or later known to one with ordinary skill in the art are defined to be within the scope of the defined elements.

The described embodiments of the invention are presented for the purpose of illustration and not of limitation.

