---

title: Identifying impact of database changes on an application
abstract: A technique is disclosed for identifying impact of database changes on an application. Given a proposed database change, affected source code is identified that is affected by the proposed database change. References to the affected source code are created and organized into a hierarchy. A user can ascertain the extent of the impact by viewing the hierarchy and by using the hierarchy to access and view the affected source code in a visually distinct manner.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08499281&OS=08499281&RS=08499281
owner: International Business Machines Corporation
number: 08499281
owner_city: Armonk
owner_country: US
publication_date: 20120224
---
This application is a continuation of co pending U.S. patent application Ser. No. 12 255 946 filed Oct. 22 2008. The aforementioned related patent application is herein incorporated by reference in its entirety.

Embodiments of the invention relate to application development and in particular to application development tools for identifying impact of database changes on an application.

Databases are computerized information storage and retrieval systems. A Relational Database Management System RDBMS is a database management system DBMS which uses relational techniques for storing and retrieving data. Relational databases are organized into tables which consist of rows and columns of data. The rows are formally called tuples. A database will typically have many tables and each table will typically have multiple tuples and multiple columns. The tables are typically stored on random access storage devices RASD such as magnetic or optical disk drives for semi permanent storage.

RDBMS software using a Structured Query Language SQL interface is well known in the art. The SQL interface has evolved into a standard language for RDBMS software and has been adopted as such by both the American National Standards Institute ANSI and the International Standards Organization ISO . The SQL interface allows users to formulate relational operations on the tables either interactively in batch files or embedded in host languages such as C or COBOL. SQL allows the user to manipulate data. The definitions for SQL provide that a RDBMS should respond to a particular query with a particular set of data given a specified database content.

Applications i.e. application programs communicate with relational databases using Structured Query Language SQL . SQL statements are issued to the RDBMS which executes the SQL statements to access a relational database. The SQL statements received from an application are executed within a unit of work which is a collection of related SQL statements. Once the SQL statements are executed they are either committed i.e. the changes made by the executed SQL statements is made permanent in the relational database or they are rolled back i.e. the changes made by the executed SQL statements are removed returning the relational database to the state it was in prior to execution of these statements.

SQL statements that involve modifying data e.g. inserting updating or deleting rows are called Data Manipulation Language DML statements. The SQL statements that involve defining database elements e.g. defining data tables views or indexes are called Data Definition Language DDL statements.

Tools are available for altering database schemas e.g. tools used to generate DDL statements . However such tools are disconnected from the tools for various artifacts that access them such as applications routines containing database access and database web services. When proposing changes to database schemas via DDL database administrators DBAs and developers cannot predict how the application and the artifact it accesses would be affected by the change.

One embodiment of the invention includes a method for assessing impacts to an application resulting from changes to a database accessed by the application. The method may generally include receiving a proposed database change identifying one or more database objects of the database modified by the proposed database change for each identified database object analyzing source code of the application to identify one or more portions of the source code which access a respective database object generating a reference to each portion of source code which accesses one of the identified database objects wherein each reference links one of the identified portions of source code to a corresponding database object modified by the proposed database change organizing the references in a hierarchy and generating a display of the hierarchy of references wherein the display allows a user to access a corresponding portion of source code by selecting one of the references.

Another embodiment of the invention includes a computer program product for assessing impacts to an application resulting from changes to a database accessed by the application. The computer program product may provide a computer usable medium having computer usable program code. The computer program code may be configured to receive a proposed database change identify one or more database objects of the database modified by the proposed database change and for each identified database object analyze source code of the application to identify one or more portions of the source code which access a respective database object. The program code may be further configured to generate a reference to each portion of source code which accesses one of the identified database objects. Each reference links one of the identified portions of source code to a corresponding database object modified by the proposed database change. The program code may be further configured to organize the references in a hierarchy and generate a display of the hierarchy of references. The display allows a user to access a corresponding portion of source code by selecting one of the references.

Still another embodiment of the invention includes a system having a processor and a memory containing a program which when executed by the processor is configured to perform an operation for assessing impacts to an application resulting from changes to a database accessed by the application. The operation may generally include receiving a proposed database change identifying one or more database objects of the database modified by the proposed database change for each identified database object analyzing source code of the application to identify one or more portions of the source code which access a respective database object generating a reference to each portion of source code which accesses one of the identified database objects wherein each reference links one of the identified portions of source code to a corresponding database object modified by the proposed database change organizing the references in a hierarchy and generating a display of the hierarchy of references wherein the display allows a user to access a corresponding portion of source code by selecting one of the references.

Embodiments of the invention provide techniques for identifying an impact that proposed database changes may have on an application configured to access the database. In one embodiment given a proposed database change source code affected by the change is identified. This technique may include accessing a SQL model associated with a proposed DDL statement and comparing the SQL model to a SQL model of a given application. References to the affected source code are created and organized into a hierarchy. Links are created from the hierarchy to the affected source code. By viewing the hierarchy a user can identify how the proposed changes may impact the application. Further the user can quickly access relevant portions of source code.

By browsing affected source code a developer can determine the scope of change required before a DBA commits to a change in database schema. Furthermore a developer can better ensure that sensitive information does not erroneously flow to unauthorized sources as an unintended consequence of a schema change. In addition a developer can obtain similar insight in related application contexts such as application frameworks and web services.

In team development a developer can ascertain the scope of change required in her application given proposed changes from a fellow developer. Teams can meet and tweak a DDL statement and see the impact that each DDL statement may have on an application facilitating team review and agreement on a particular schema change.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore in various embodiments the invention provides numerous advantages over the prior art. However although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

One embodiment of the invention is implemented as a program product for use with a computer system. The program s of the program product defines functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive on which information is permanently stored ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive on which alterable information is stored. Such computer readable storage media when carrying computer readable instructions that direct the functions of the present invention are embodiments of the present invention. Other media include communications media through which information is conveyed to a computer such as through a computer or telephone network including wireless communications networks. The latter embodiment specifically includes transmitting information to from the Internet and other networks. Such communications media when carrying computer readable instructions that direct the functions of the present invention are embodiments of the present invention. Broadly computer readable storage media and communications media may be referred to herein as computer readable media.

In general the routines executed to implement the embodiments of the invention may be part of an operating system or a specific application component program module object or sequence of instructions. The computer program of the present invention typically is comprised of a multitude of instructions that will be translated by the native computer into a machine readable format and hence executable instructions. Also programs are comprised of variables and data structures that either reside locally to the program or are found in memory or on storage devices. In addition various programs described hereinafter may be identified based upon the application for which they are implemented in a specific embodiment of the invention. However it should be appreciated that any particular program nomenclature that follows is used merely for convenience and thus the invention should not be limited to use solely in any specific application identified and or implied by such nomenclature.

As shown the database server system includes a processor which obtains instructions and data from memory and storage . The processor could be any processor adapted to support the methods of the invention. The memory is any memory sufficiently large to hold the necessary programs and data structures. The memory could be one or a combination of memory devices including Random Access Memory nonvolatile or backup memory e.g. programmable or Flash memories read only memories etc. . In addition the memory and the storage may be considered to include memory physically located elsewhere in a server for example on another computer coupled to the database server . The database server system may be operably connected to the network not shown which generally represents any kind of data communications network. Accordingly the network may represent both local and wide area networks including the Internet. On the database server system a database server resides in memory with its associated database residing in storage . Illustratively database includes one or more schemas and data . Each schema defines an organizational arrangement for a corresponding set of data .

As shown client computers each include a processor which obtains instructions and data via a bus from a memory and client storage. A processor is a programmable logic device that performs all the instruction logic and mathematical processing in a computer. Client storage stores application programs and data for use by the client computer . Client storage includes hard disk drives flash memory devices optical media and the like. A client computer is operably connected to the network. Client memory includes an operating system. The operating system is the software used for managing the operation of the client computer . Examples of operating systems include the UNIX operating system a version of the Microsoft Windows operating system and distributions of the Linux operating system. Note Linux is a trademark of Linus Torvalds in the United States and other countries. 

As shown client computer includes an application in memory that accesses the database via the database server . Similarly client computer includes a database web service in memory that accesses the database via the database server . Further client computer includes a DDL statement in memory to be executed against the database via the database server . However executing the DDL statement against database may alter the database schemas in ways that adversely affect the application and or the database web service . For example DDL statements may rename or drop a column or change the data type of a column. DDL statements may also rename or drop a table.

As shown the method begins at step where a proposed DDL statement is received by the impact analyzer . For example assume a DDL statement for renaming the name of a table column is received. At step the impact analyzer connects to the database . Once connected the impact analyzer may request information from the database describing the structure or schema of a particular database. Alternatively this information may be determined from a model or other representation of database state. In such case rather than connect to the actual database or DBMS system the impact analyzer may access the model describing the database. At step the impact analyzer identifies each database object affected by the proposed DDL statement. Examples of database objects include database schemas tables table spaces views columns constraints privileges primary keys foreign keys and procedures. For example the impact analyzer may identify the column renamed by the DDL statement.

In step the impact analyzer identifies all application web service objects and methods that access the database objects. For example for a Java application the impact analyzer identifies source code that accesses the database column renamed by the DDL statement. At step the impact analyzer creates and organizes references to the affected source code into a hierarchy. The references include a source code filename and a line number. For example the hierarchy may be grouped by source code filenames and each filename is associated with a list of line numbers corresponding to the affected source code.

At step the impact analyzer generates analysis results which displays the hierarchy and allows users to access and view the affected source code in a visually distinct e.g. highlighted manner. Further additional output from the impact analyzer may be generated e.g. proposed actions to adapt the code and or the SQL to the change. For example assume the data type of a column is changed from a character to an integer and that a function call in an application program may include a character or string variable used to store values from the column. In such a case the impact analyzer may suggest a modification to the function definition changing the character to an integer data type.

For example the user may double click on an entry in the hierarchy to access source code formatted in a visually distinct manner e.g. highlighted . Thus a user can ascertain expected impact of the DDL statement on a web application or web service by viewing the analysis results . In one embodiment the impact analyzer may support an edit mode wherein a user can read and modify the affected source code and a read only mode wherein a user can read but not modify the affected source code. Further the impact analyzer may be a standalone tool or part of an IDE tool such as the Eclipse IDE. After step method terminates.

The hierarchy can be displayed as a tree widget in a user interface. In such a case the tree may include nodes representing source code files. The nodes in the tree can display the names of the source code files and can be expanded to show or collapsed to hide references to affected source code for example line numbers .

Once the user selects a reference using an input device such as a mouse the impact analyzer may display the associated source code file in a new user interface window. In addition the impact analyzer can scroll to the referenced location of the source code file move the cursor to the referenced object or method and format the appropriate source code in a visually distinct manner highlight underline bold etc. .

For the Java applications and database web services the impact analysis results include references to Java source code and line numbers thereof to provide a clearer view of the impact of the column change.

Of course the embodiments described herein are intended to be illustrative and not limiting of the invention and other embodiments are broadly contemplated. Those skilled in the art will recognize for example that impact analyzer may be a standalone application or be integrated into an IDE database administration application or data modeling tool. Furthermore the proposed database change may be in the form of an SQL DDL statement or be specified via a query builder interface. Moreover the application may be written in any programming language that has database access capability via libraries extensions modules packages etc. such as the Java or C C programming languages. In addition the hierarchy can be further organized by variable and method names the affected source code can be from a specified workspace project application or database web service and the database object that is the target of the proposed database change may be a database schema table table space view column constraint privilege primary key foreign key procedure etc.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

