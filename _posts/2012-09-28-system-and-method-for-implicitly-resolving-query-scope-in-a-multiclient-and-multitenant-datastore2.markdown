---

title: System and method for implicitly resolving query scope in a multi-client and multi-tenant datastore
abstract: An apparatus comprising a multi-tenant datastore and a processor coupled to the multi-tenant datastore, wherein the processor is configured to receive a request comprising one or more security tokens, wherein the one or more security tokens comprise identification information, and generate a query based on the request to access the multi-tenant datastore, wherein generating the query comprises deriving a query scope based on the one or more security tokens.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542546&OS=09542546&RS=09542546
owner: Volusion, Inc.
number: 09542546
owner_city: Austin
owner_country: US
publication_date: 20120928
---
A multi tenant database or datastore system may have multiple subscribing tenants that access applications and or data from a network source. Each tenant may for example be a merchant that owns a website or electronic store e store maintained by the datastore system. The merchant may use the website to sell products service and or information to customers. With a multi tenant datastore system the tenants may have an advantage in the fact that they do not need to install and maintain all hardware and software from the e store. Rather each tenant may only need a computing device with network connectivity such as a desktop computer with Internet access and a web browser. With the computing device the tenant may access the multi tenant datastore to operate applications and or data. Third party developers may also be involved to provide various third party applications to the datastore system. Since different parties including tenants customers and third party developers may share a common datastore it is necessary to prevent unwarranted data application accesses e.g. one tenant from accessing data belonging to other tenants . Thus it is desirable to develop secure and reliable data access schemes to accommodate service to multiple parties involved in the datastore system.

In one embodiment the disclosure includes an apparatus comprising a multi tenant datastore and a processor coupled to the multi tenant datastore wherein the processor is configured to receive a request comprising one or more security tokens wherein the one or more security tokens comprise identification information and generate a query based on the request to access the multi tenant datastore wherein generating the query comprises deriving a query scope based on the one or more security tokens.

In another embodiment the disclosure includes a method of accessing a datastore comprising receiving a request comprising one or more security tokens wherein the one or more security tokens comprise identification information and generating a query based on the request to access the datastore wherein generating the query comprises deriving a query scope based on the one or more security tokens.

In yet another embodiment the disclosure includes an apparatus comprising a datastore and a web server coupled to the datastore wherein the web server is configured to receive a request comprising at least one security token wherein the at least one security token comprises identification information determine a validity of the at least one security token generate a query based on the request to access the datastore if all of the one or more security tokens are valid wherein generating the query comprises deriving a query scope based on the at least one security token and generate an error message if not all of the one or more security tokens are valid.

These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.

It should be understood at the outset that although an illustrative implementation of one or more embodiments are provided below the disclosed systems and or methods may be implemented using any number of techniques whether currently known or in existence. The disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below including the exemplary designs and implementations illustrated and described herein but may be modified within the scope of the appended claims along with their full scope of equivalents.

A multi tenant datastore system may involve multiple parties including the implementer of the datastore system tenants customers and independent developers. The implementer may equip the datastore system with infrastructure and built in applications while the independent developers may enrich the datastore system with third party applications. When accessing data a request may be sent from the end of a tenant a customer or a third party developer to the datastore system. Upon reception of the request a server in the system may generate a query based on the request to access the datastore. In generating the query the server needs to identify a scope of the data that the query pertains to.

In use the implementation mechanisms of this scope may vary across datastores and the management of datastores across a physical environment may cause data to be moved between different datastore instances or servers. Consequently managing the variety of data and or applications in a multi tenant datastore system may sometimes be complicated. For example the multi tenancy may restrict the implementer or administrator of the datastore system from being able to change how a query scope is managed. Additionally it may force the implementer to share the contract of how to negotiate a query scope with a third party developer. If the scope is explicitly provided to the third party developer it may offer an opportunity for the third party developer to maliciously or erroneously access data in an unauthorized scope. Further the third party developer may be forced to understand and manage semantics of query scope identifiers which may cause undue complexity. As a result building and managing multi tenant applications and or data may be complex for both the implementer and third party developers. The complexity may lead to undesirable consequences such as slowing down the rate of innovation at which third party developers add to the platform provided by the implementer.

Disclosed herein are systems and methods for improved management of data and or application in a datastore system. When generating a query based on a received request the present disclosure may implicitly derive or resolve a scope of the query which determines the scope or context of data the query may access. The present disclosure may use one or more authentication or security tokens and a tenant identification ID to implicitly derive the query scope. The security tokens may be verified by the system in order to limit access of the query to valid applications tenants and users. Two exemplary tokens are described herein including an application token and a user token. The application token may comprise information regarding an application ID while the user token may comprise information regarding a user ID. By extracting the tenant ID a user ID and application ID from the request the query scope may be automatically derived. Since the disclosed schemes may use already existing security tokens in implicitly deriving the query scope no additional information from an outside party may be required. Thus if the query scope is being changed by the implementer of the datastore system the change may not need to be known by the outside party which simplifies implementation.

In use the platform provider may host and manage a website on behalf of each tenant which may be a merchant subscribing to the platform provider . The various websites may serve any purpose such as the sale of goods services and or information to the customers in which case the system architecture may be referred to as an electronic commerce e commerce system. Note that the websites are not limited to e stores for business purposes as they may also provide other services to the customers such as public information personal blog space and so forth. Rather than the tenants having their own network infrastructure e.g. servers and software to host their own website the platform provider provides a platform or hosting system which may include both hardware e.g. infrastructure including server machine data storage media networking facility etc. and software e.g. operating systems applications etc. . The tenants may only need to have a computing device e.g. a desktop computer laptop computer smart phone etc. with access to the network and a web browser to create their own website or e store maintain their e store and complete transactions with the customers . Similarly each of the customers may only need a computing device with a web browser and access to the network in order to complete transactions. The terms tenant and customer in this disclosure may include a computing device of some sort to access the hosting system managed by the platform provider via the network .

The hosting system or datastore system may comprise a web server and a datastore . The web server may be equipped with a processor a memory an operating system as well as various built in applications including application which are software programs implemented by the platform provider to facilitate services to the other parties. For example the application may be a shipping label printing application that a tenant uses when shipping an order to a customer . For another example the application may be a product recommendation engine. When a customer is shopping on the website of a tenant the recommendation engine may list certain goods on top of a webpage based on any personal preference the customer may have and that are known or detectable by the application .

The datastore may be coupled to the web server or may be included in the web server . In use the datastore may be any type of datastore or database may be configured to store any suitable data or information and may be managed by any suitable data management system. In an embodiment the datastore may be a relational datastore. In this case it may be managed by for example structured query language SQL which is a programming language designed for managing data in relational database management systems RDBMS . In an alternative embodiment the datastore may be a non relational datastore managed by a non relational database management system NDBMS also referred to sometimes as NoSQL . The non relational datastore may be a key value store allowing data to be stored in a schema less way e.g. in a data type of a programming language or an object . Various types of non relational datastores or NDBMS may include but are not limited to Apache Cassandra Dynamo Hibari OpenLink Virtuoso Project Voldemort Riak Greystone Technology M GT.M InterSystems Cach Freebase Google Appengine Cloudant Data Layer Oracle Coherence NCache Redis Hazelcast Tuple Space Velocity BigTable Berkeley Database DB International Business Machines IBM Informix C ISAM InfinityDB MemcacheDB MongoDB Northgate Information Solutions Reality Extensible Storage Engine ESE jBASE OpenQM RavenDB Revelation Software s OpenInsight Rocket U2 D3 Pick database InterSystems Cach InfinityDB database for objects db4o Eloquera GemStone S InterSystems Cach JADE NeoDatis ODB Objectivity DB ObjectStore Versant Object Database Wakanda Zope Object Database ZODB Meronymy SPARQL Database Apache Accumulo Apache Hbase Hypertable Mnesia Apache River Tarantool any other non relational type and any combination thereof. Further although only shows one datastore it should be understood that a plurality of datastores may be implemented in the hosting system. Each of the plurality of datastores may be relational or non relational.

In an embodiment the datastore is a multi tenant datastore accessible to the plurality of tenants through built in applications such as the application . In use each tenant may be limited or restricted to access data authorized to him by the platform provider . For example the datastore may comprise a plurality of tables divided into small groups. Each group of tables may be assigned to a tenant thus the tenant may only access the group of tables assigned to him. Identification information of the tenant may be used to determine the scope of accessible data.

In addition to built in applications offered by the platform provider there may be third party applications such as application developed by one or more third party developers . The third party applications may enrich the hosting system by providing better performance than the built in applications or providing additional features that are otherwise not available. For example the application may be a shipping label printing application that performs better than the built in shipping label printing application. In this case a tenant may elect to subscribe to the third party shipping label printing application. For another example the application may be a product recommendation engine that offers more features or functionalities than the built in product recommendation engine. For instance a customer may shop on the website of a tenant while being logged onto a social or personal networking site such as FACEBOOK or TWITTER. In this case the third party recommendation engine may call an application programming interface API released by the social site and thereby extract personal preferences of the customer e.g. favorite book movie etc. . Based on the personal preferences the third party recommendation engine may determine that certain goods are more appealing to the customer and thus list these goods on top of the website of the tenant .

In a server client context an application e.g. the application developed by a third party developer may be considered a client while the hosting system provided by the platform provider may be considered a server. Each client may access the web server via an API which is a software to software interface designed to facilitate communication between two software programs or applications. The API may be released by an entity such as the platform provider to the public so that third party applications developed by other entities may communicate seamlessly with built in applications to access the datastore . The API is implemented in the background thus a user using the third party applications may not be aware of its existence. The term user as used herein may refer to any person interacting with the host system typically via a computer. For example the user may be someone associated with a tenant e.g. owner administrator employee contractor of the tenant website . The user may be a customer interacting with the tenant website which integrates one or more third party applications. The user may also be a third party developer or someone on behalf of the third party developer .

As mentioned above the datastore may be a multi client multi tenant datastore that supports multiple tenants multiple clients e.g. the application and multiple customers . Consequently data stored in the datastore may correspond to a variety of scopes or contexts. Thus embodiments of datastore access schemes are described herein to regulate data access and prevent a user from accessing data assigned to other users a tenant from accessing data assigned to other tenants and or an application from accessing data assigned to other applications.

In an embodiment prior to accepting the request the web server may be configured to verify or authenticate the validity of the one or more security tokens contained in the request. Each security token may be a piece of software code or information designed to identify a user or an application. For example one security token may be an application token which comprises encrypted information about an application ID. The application ID may be sent by a third party application calling the API and may uniquely identify the third party application from any other application. In an embodiment the application ID comprises a function identification variable FID and a shared secret.

When a new third party application is incorporated into the hosting system for the first time the application ID may be set up by the hosting system or negotiated between the third party application and the hosting system. A copy of the application ID is stored in the datastore . After that at any given time the third party application may initiate a communication session with the web server . In an embodiment the third party application may initiate the communication by sending its application ID to the web server which may then compare the application ID with another copy in the datastore . If the application ID is determined to be valid the web server may issue an application token back to the third party application. Otherwise if the application ID is determined to be invalid the web server may respond by sending an error signal or message back to the third party application .

After receiving the application token the third party application may for a period of time freely access its authorized application data in the datastore . In an embodiment the third party application may attach it in every request e.g. as part of the header being sent to the web server . The application token may be updated after each period of time a length of which is pre determined by the web server . For example the web server may require the third party application to re send the application token after every 15 minutes. For another example the web server may not require the third party application to re send the application token unless the application is restarted or has not been active for more than 30 minutes.

Similarly to the application token a user token may be another security token contained in a request sent from a user end to the web server . The user end may represent the end of a tenant a customer or a third party developer. The request from the user end may call the web server directly if no third party application is involved. Otherwise if the third party application is involved the request may call the API through the third party application . In either case the user token may comprise encrypted information about a user ID which uniquely identifies a user at the user end from any other user. In an embodiment the user ID comprises a user name and a password.

When a new user is added for the first time its user ID may be negotiated between the user end and the hosting system. A copy of the user ID is stored in the datastore . After that at any given time the added user may initiate a communication session with the web server . In an embodiment the user may initiate the communication by sending its user ID to the web server which may then compare the user ID with another copy in the datastore . If the user ID is determined to be valid the web server may issue a user token back to the user. If the user ID is determined to be invalid the web server may respond by sending an error signal or message back to the user.

After receiving the user token the user may for a period of time freely access user data authorized to him. In an embodiment the user token may be attached in the header of every user request being sent to the web server . The user token may be updated after each period of time a length of which is pre determined. For example the web server may require the user end to re send the user token after every 15 minutes. For another example the web server may not require the user end to re send the user token unless the user end is logged off and back on or has not been active for more than 30 minutes.

As mentioned above the web server may generate a query based on a received request wherein the query scope is derived from one or more security tokens described above. In an embodiment a hypertext transfer protocol HTTP may be used in the datastore access scheme . In this case the received request may further contain a uniform resource locator URL and deriving the query scope is further based on the URL. A site or tenant ID may be directly extracted from the URL or translated from the URL. For example if the URL is www.kittenmittens.com api userdata the tenant ID may simply be the base portion www.kittenmittens.com or kittenmittens . Then the tenant ID may be used together with a user token and or an application token to derive the query scope. Each tenant ID may uniquely identify a tenant from other tenants. Although HTTP is used as an exemplary protocol it should be understood that any other suitable protocol may also be utilized without departing from principles of the present disclosure.

In implementation a request received by the web server may contain an application token a user token or a tenant ID or various combinations of the three. Depending on the identification information contained in the request various query scopes may be derived in the web server and different data types may be accessed in the datastore .

Some data in the datastore may be specific to an application but global for all tenants. For example a shipping label printing application may have configuration settings or variables such as default page setup page range control default portrait landscape orientation etc. that are globally applicable to all subscribing tenants. A query scope may limit a query to access these configuration variables based on an application token. Application data belonging to other applications e.g. the product recommendation engine may be excluded from the query scope.

Other data in the datastore may be specific to an application as well as a tenant. For example the shipping label printing application may have tenant specific information such as merchant name logo etc. which may be stored as tenant data of the application. In this case a query scope may limit a query to access the tenant data of the application based on an application token and a tenant ID. Tenant data belonging to other tenants who also use the same application may be excluded from the query scope.

Yet other data in the datastore may be specific to an application a tenant and a user of the application and or tenant. For example the shipping label printing application may have tenant and user specific information such as a tenant user s preference in interface color window size and so forth. In this case a query scope may limit a query to access the tenant and user specific information based on an application token a user token and a tenant ID. User data belonging to other users of the same tenant or other tenants who also uses the same application may be excluded from the query scope.

Yet other data in the datastore may be specific to a user of a tenant but independent of any application that may be used by the tenant. For example the website of the tenant may have many user accounts each of which is identified by a user name and password. Each user account may have account specific information such as user profile credit card information and so forth. In this case a query scope may limit a query to access the account specific information based on a user token comprising the username and password and a tenant ID. Account specific information belonging to other users of the same tenant as well as information belonging to other tenants may be excluded from the query scope.

Yet other types of data may still be present in the datastore such as data specific to each tenant but global to all applications and all users data specific to each user of an application but global to all tenants and so forth. A query scope to access these other types of data may be similarly derived using principles of the present disclosure. Moreover after the scope of a query is derived the scope of accessible data for the query may be determined. Then the web server may perform any suitable read write operation within the authorized data scope. For example the web server may create read update and or delete any data from the authorized data scope. If data or information requested by the request can be located or generated in the hosting system the web server may generate a response comprising the requested information. Otherwise if information requested by the request cannot be located or generated in the hosting system the web server may generate a response comprising an error message or a reminder message.

Since the user token and application token are information already required from the application and user the disclosed data access scheme may require no additional information in the implicit derivation of query scopes. This may provide convenience to a client e.g. third party application as it does not need to provide any additional data other than application ID or concern about the contract of query scope negotiation. From the platform provider point of view the implicit derivation of query scopes may prevent clients from accessing data in an unauthorized scope because valid credentials are required to generate the security tokens. Further the disclosed scheme may also allow the platform provider to change implementation details of the scope management solution without having to coordinate with any other parties since the other parties are shielded from understanding the identifier semantics and implementation details of the query scope. Briefly users may have a multi client multi tenant datastore without having to worry about multi client multi tenant management.

In step a third party application may receive and process the request. For example if the user end is requesting to print a shipping label the shipping label printing application may translate or convert the request into another request to gather information such as configuration variables tenant specific information and user preferences etc. In step the third party application may call the API of the hosting system with the request comprising the URL the user token and an application token. If no third party application is needed the steps and may be replaced by a step where the request from the user end is directly received by the hosting system.

In step the method may determine whether the user and application tokens contained in the request from the application is valid. If the tokens are invalid the method may proceed to step where the web server of the hosting system may generate an error message indicating the invalidity of the tokens. Otherwise the method may proceed to step where the web server may generate a query based on the request received from the application. Generating the query may comprise deriving a query scope from the user token the application token as well as the URL. In step the query may access a datastore in the hosting system and a response comprising requested information may be generated. The response may be sent back to the user end via the third party application.

It should be noted that the method may only include only a portion of necessary steps in data communication between a hosting system and a user end. Accordingly other steps such as the establishment of application and or user tokens configuration of error messages if token validity fails periodical updating of security tokens etc. may be incorporated into the method wherever appropriate. Moreover the execution order or sequence of steps may be flexibly changed e.g. if a step does not depend on a preceding step.

The schemes described above may be implemented on any general purpose network component such as a computer or network component with sufficient processing power memory resources and network throughput capability to handle the necessary workload placed upon it. illustrates a typical general purpose network component or computer system suitable for implementing one or more embodiments of the methods disclosed herein such as the datastore access scheme and the datastore access method . The general purpose network component or computer system includes a processor which may be referred to as a central processor unit or CPU that is in communication with memory devices including secondary storage read only memory ROM random access memory RAM input output I O devices and network connectivity devices . The processor may be implemented as one or more CPU chips one or more cores e.g. a multi core processor or may be part of one or more application specific integrated circuits ASICs and or digital signal processors DSPs . For example the processor may be part of the web server in . The processor may be configured to implement any of the schemes described herein including the datastore access scheme and the datastore access method . The processor may be implemented using hardware software or both.

The secondary storage is typically comprised of one or more disk drives or tape drives and is used for non volatile storage of data and as an over flow data storage device if RAM is not large enough to hold all working data. Secondary storage may be used to store programs that are loaded into RAM when such programs are selected for execution. The ROM is used to store instructions and perhaps data that are read during program execution. ROM is a non volatile memory device that typically has a small memory capacity relative to the larger memory capacity of secondary storage . The RAM is used to store volatile data and perhaps to store instructions. Access to both ROM and RAM is typically faster than to secondary storage .

At least one embodiment is disclosed and variations combinations and or modifications of the embodiment s and or features of the embodiment s made by a person having ordinary skill in the art are within the scope of the disclosure. Alternative embodiments that result from combining integrating and or omitting features of the embodiment s are also within the scope of the disclosure. Where numerical ranges or limitations are expressly stated such express ranges or limitations should be understood to include iterative ranges or limitations of like magnitude falling within the expressly stated ranges or limitations e.g. from about 1 to about 10 includes 2 3 4 etc. greater than 0.10 includes 0.11 0.12 0.13 etc. . For example whenever a numerical range with a lower limit R and an upper limit R is disclosed any number falling within the range is specifically disclosed. In particular the following numbers within the range are specifically disclosed R R k R R wherein k is a variable ranging from 1 percent to 100 percent with a 1 percent increment i.e. k is 1 percent 2 percent 3 percent 4 percent 7 percent . . . 70 percent 71 percent 72 percent . . . 95 percent 96 percent 97 percent 98 percent 99 percent or 100 percent. Moreover any numerical range defined by two R numbers as defined in the above is also specifically disclosed. The use of the term about means 10 of the subsequent number unless otherwise stated. Use of the term optionally with respect to any element of a claim means that the element is required or alternatively the element is not required both alternatives being within the scope of the claim. Use of broader terms such as comprises includes and having should be understood to provide support for narrower terms such as consisting of consisting essentially of and comprised substantially of. Accordingly the scope of protection is not limited by the description set out above but is defined by the claims that follow that scope including all equivalents of the subject matter of the claims. Each and every claim is incorporated as further disclosure into the specification and the claims are embodiment s of the present disclosure. The discussion of a reference in the disclosure is not an admission that it is prior art especially any reference that has a publication date after the priority date of this application. The disclosure of all patents patent applications and publications cited in the disclosure are hereby incorporated by reference to the extent that they provide exemplary procedural or other details supplementary to the disclosure.

While several embodiments have been provided in the present disclosure it may be understood that the disclosed systems and methods might be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive and the intention is not to be limited to the details given herein. For example the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.

In addition techniques systems subsystems and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems modules techniques or methods without departing from the scope of the present disclosure. Other items shown or discussed as coupled or directly coupled or communicating with each other may be indirectly coupled or communicating through some interface device or intermediate component whether electrically mechanically or otherwise. Other examples of changes substitutions and alterations are ascertainable by one skilled in the art and may be made without departing from the spirit and scope disclosed herein.

