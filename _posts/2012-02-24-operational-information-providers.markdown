---

title: Operational information providers
abstract: In a computer program product, system and method for retrieving operational data, a front-end unit generates a query for operational data. In an embodiment, in response to the generation of the query, an operational information provider is sent to a back-end unit to retrieve real-time operational data from the back-end unit using a retrieval method specified in the operational information provider. The retrieved operational data, including the real-time operational data is received by the front-end unit from the back-end unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08549035&OS=08549035&RS=08549035
owner: SAP AG
number: 08549035
owner_city: Walldorf
owner_country: DE
publication_date: 20120224
---
The present invention relates generally to the field of Enterprise Service Oriented Architecture ESOA and more particularly to a system and method of using operational information providers to standardize and unify data access to operational data.

Enterprise Service Oriented Architecture ESOA is a business driven software architecture pioneered by SAP that can serve as a blueprint for an adaptable flexible and open IT architecture for developing services based enterprise scale business solutions and can provide increased adaptability flexibility openness and cost efficiency to end users. Service Oriented Architecture SOA is an available computer architecture used by information technology professionals to develop business applications. An SOA can be used to define a set of global service modules that can be distributed over a network and used to give business applications functionality. Examples of service modules might include a log in service a reservation service a data retrieval service and so on. By linking a series of these services an application designer can create new applications without the need for redundant programming. For example when developing a reservation application for a hotel a designer may define the way in which the already programmed service modules e.g. log in module a reservation module a scheduling module interact with one another.

As software solutions become more complex the number of software applications and modules used in an application may also increase and there may be many dependencies between the different applications and the modules used by each application. Different portions of the software may need to convey data to or retrieve data from other portions and while much of this data may be similar much of the data may be stored in different locations and formats and accessed in different ways. For example each software application may use a different interface to transfer data from and to other applications leading to a complex architecture that is difficult to manage.

Developing reporting applications can be complicated for example because the data needed to generate the report might be located in multiple disparate locations including on third party hosts. Some of the data used might be static data residing in a data warehouse. For example budget data from past fiscal years can be accessed directly from a data warehouse because the data does not change once entered. Other types of data needed to generate a report however might not be suitable for storage in a business warehouse database because it is constantly being changed. For example the percentage of a budget consumed is the function of a budget to date value and a total budget value and because the budget to date value is constantly changing with time so is the percentage of budget consumed. Therefore the percentage of budget consumed is operational information that needs to be obtained by a business process rather than a database.

Operational data can frequently be the product of many business processes and calculations involving such can often be quite complex. Because of this complexity it is undesirable to have individual applications recalculate operational data when it is needed. Accordingly a need exists to provide a system which allows for the retrieval and use of operational data from one application by another application in an enterprise system.

The present invention provides systems methods computer readable medium able to implement methods which include using operational information providers to enhance an enterprise service oriented architecture ESOA and other such architectures by providing an interface to operational data that can be optimized for data and metadata retrieval.

One or more of the terminals may be personal computers computer workstations handheld personal digital assistants PDA or any other type of microprocessor based device. The network may be a local area network LAN wide area network WAN remote access network an intranet or the Internet for example. Network links for the network may include telephone lines DSL cable networks T1 or T3 lines wireless network connections or any other arrangement that implements the transmission and reception of network signals. However while shows the terminals connected through a network the terminals may be connected through other means including directly hardwired and or wirelessly connected. In addition the terminals may be connected to other network devices not shown such as wired or wireless routers servers and databases. The terminals may be connected to one or more peripheral devices such a local or network printer mouse display storage drives etc.

The controller processor may be any programmed processor available to one of skill in the art. However the concepts of the present invention can also be implemented on a general purpose and or a special purpose computer a programmed microprocessor and or microcontroller peripheral integrated circuit elements an application specific integrated circuit ASIC and or other integrated circuits hardware electronic logic circuits such as a discrete element circuit a programmable logic device such as a Programmable Logic Device PLD Programmable Logic Array PLA Field Programmable Gate Arrays FPGA Programmable Array Logic PAL and or the like. In embodiments any device or devices capable of implementing a framework based software application can be used to implement aspects of the present invention.

In an embodiment the Input Output interface is connected to one or more input devices such as e.g. a keyboard mouse pen operated touch screen and or monitor voice recognition device and or any other device that accepts input. In an embodiment the Input Output interface is connected to one or more output devices such as e.g. a monitor printer disk drive speakers and or any other device for outputting data.

In an embodiment the memory includes volatile and nonvolatile data storage including e.g. one or more electrical magnetic and or optical memories such as a RAM cache hard drive CD ROM drive tape drive and or removable storage disk.

In an embodiment the network interface is connected to a communication device modem network interface card and or any other device capable of transmitting and receiving signals over a network . In an embodiment the components of the terminals are connected via an electrical bus for example and or linked wirelessly.

In an embodiment client software and databases are accessed by the controller processor from memory and or through the database interface and may include for example database applications word processing applications the client side of a client server application such as a billing system as well as components that embody the decision support functionality of the present invention. The terminals may implement any operating system such as Windows or UNIX for example. Client and server software may be written in any programming language such as ABAP C C Java or Visual Basic for example.

In an embodiment the back end application has access to internal data such as business warehouse data . In an embodiment the application has access to external data from one or more third party data providers. In an example system embodying aspects of the present invention the back end application retrieves data from external data providers through the use of consumer services in communication with provider services associated with each of the information providers not shown . The services can operate to transform data from provider formats into formats usable by the system . In an embodiment the back end application is associated with and or includes an online analytical processing OLAP processor not shown to facilitate handling of complex data selection expressions for data retrieval.

In an embodiment the back end unit includes one or more consumer services e.g. consumer query views to import business data into the system e.g. external data from one or more information providers . In an embodiment consumer services allow the tools from the front end to work with data from information providers and access the data in a unified way for different information providers or sources of data. Consumer services can provide client application like access to the provider data. In an embodiment the consumer services provide enhanced services allowing detailed exception reporting list calculation document integration and other services typically unavailable when retrieving data from external and or foreign data sources. In an embodiment the consumer services expose an application programming interface API that describes the data in each request and provides relatively easy access to the data in the result set. For example the consumer services may be implemented as a Java API although those skilled in the art will appreciate that other languages and or conventions may be used.

In an embodiment the back end includes one or more storage services that store and archive business information. For example a storage service provides access to different data targets available in the system archive dormant data and or manage relational and or multi dimensional databases. In an embodiment one or more analysis and access services are provided in the back end . In an embodiment such a service facilitates an analysis of structured and or unstructured information stored in the system and may include a data mining engine. In an embodiment the back end includes one or more presentation services to provide different ways of presenting information to an end user. In an embodiment the presentation service includes a query design engine a formatting engine and or an Extensible Mark up Language XML interface e.g. to provide data via a Web portal .

In an embodiment one or more meta data services is provided at the back end. In general meta data may refer to for example information about business data that is distributed across a landscape of a system s architectural components e.g. describing what data resides where . In an embodiment the meta data service for example stores meta data and handles requests to retrieve add change and or delete the meta data. In an embodiment the meta data service provides uniform information that can be customized system wide by the user on how special values like division by zero and or undefined currency unit aggregation should be prepared for presentation in order to guarantee homogeneous presentation of all sources.

In an embodiment the system includes a front end unit accessible by a user for executing front end applications. In an embodiment the front end application is remote from the back end application e.g. and the two applications may communicate via a communication network such as the Internet . In an embodiment the front end application is for example a reporting application configured display several types of data including business warehouse data as well as operational information from the back end application . A user may access the front end application to request particular information in a particular format from the back end application . For example the user might generate a request or query asking for weekly inventory information from a number of different regions over the last year. After the data is retrieved by the back end application it may be formatted as a report and displayed to the user via the front end application . Data such as weekly inventory information is a type of data that is static and can be stored in a database such as business warehouse database .

A front end application such as a reporting application however may need to utilize operational data that is determined in real time and not stored in a database. In an embodiment the front end application uses operational information providers to retrieve operational data from the back end application for purposes such as reporting. In an embodiment the operational data is identified by metadata. In an embodiment the operational information provider includes a data description describing the data to be retrieved and a retrieval method. In an embodiment based on the identifying metadata the operational information provider identifies the operational data to be retrieved. In an embodiment the operational information provider is accessible to a developer as an enterprise service to be used as a query interface to operational data.

In an embodiment the operational information providers include for example metadata optimized for formatting. An example of an operational information provider in WSDL format might appears as follows 

The example above shows aspects of the abstract part of the WSDL scheme and describes the OIP s specific modelling. The abstract part of the WSDL can contain the XML elements and . The area of can be used to declare all used data elements used by the OIP. This data types can be simple or complex. The element can contain the abstract definition of the OIP and the assigned data types. The OIP can have two different messages. The first message can be a data request message such as Query Service.GetData where the assigned data structure might contain for example the selection conditions set by the client. A second message such as Query Service.GetDataResponse can send the requested data back to the client. The data structure of the message can depend on the content of the OIP and is individual. The operations can be described in the section. The OIP works with a request response operation and contains the two messages which are defined in the message area. Other XML elements used in the WSDL definition such as and can describe the concrete content of the services dependent on the interface language and transport protocol like HTTP or SOAP.

In an embodiment the front end application is the SAP BI Business Explorer or NetWeaver both available from SAP AG. In an embodiment the Business Explorer provides a user interface allowing a user to define and submit desired queries and reports using a Web HTML client and or a MICROSOFT WINDOWS client.

In an embodiment the front end is used to construct submit and view data obtained through the back end . For example a user creates and submits a query view through a reporting application or through some other tools associated with the front end . In an embodiment the query view definition and or query view state change commands are transmitted to the back end and is operated on to cause relevant data to be retrieved from information sources including internal data sources and one or more external or provider data sources. In an embodiment users interact with the data via the front end using a number of different types of applications including a reporting application a spreadsheet application a Web tool a portal a mobile device or a third party application. In an embodiment the interaction is communicated via state change commands to the backend or the front end technology directly calls query view APIs for applying the interaction to the query view.

The foregoing description of embodiments is provided to enable a person skilled in the art to make and use the present invention. Various modifications to these embodiments will be readily apparent to those skilled in the art and the generic principles and specific examples defined herein may be applied to other embodiments without the use of inventive faculty. For example some or all of the features of the different embodiments discussed above may be deleted from the embodiment or may be combined with features of alternate embodiments. Therefore the present invention is not intended to be limited to the embodiments described herein but is to be accorded the widest scope defined only by the claims below and equivalents thereof.

