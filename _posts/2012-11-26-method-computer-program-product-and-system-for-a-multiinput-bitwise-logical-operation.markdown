---

title: Method, computer program product, and system for a multi-input bitwise logical operation
abstract: A method, computer program product, and system are provided for multi-input bitwise logical operations. The method includes the steps of receiving a multi-input bitwise logical operation instruction that specifies two or more input operands and a function operand, where a first input operand of the two or more input operands comprises a number of bits, each bit having a corresponding bit in each of the additional input operands in the two or more input operands. The function operand is written to a lookup table. Then, the lookup table is accessed for each set of corresponding input operand bits in the two or more input operands to generate an output for the multi-input bitwise logical operation instruction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471310&OS=09471310&RS=09471310
owner: NVIDIA Corporation
number: 09471310
owner_city: Santa Clara
owner_country: US
publication_date: 20121126
---
The present invention relates to logical operations and more particularly to hardware and software implementations of bitwise logical operations.

Bitwise logical operations perform functions on a single input or on two inputs where each input is at least one bit. An example of a single input bitwise logical operation is NOT which inverts each hit of the single input i.e. NOT 011 produces 100. An example of a two input bitwise logical operation is AND which performs an AND function on each corresponding bit pair of the two inputs i.e. 011 AND 110 produces 010. Other two input bitwise logical operations include OR and XOR exclusive OR .

While the one and two input bitwise logical operations are useful for many applications some functions require more than two inputs. Thus there is a need for addressing this issue and or other issues associated with the prior art.

A method computer program product and system are provided for multi input bitwise logical operations. The method includes the steps of receiving a multi input bitwise logical operation instruction that specifies two or more input operands and a function operand where a first input operand of the two or more input operands comprises a number of bits each bit having a corresponding bit in each of the additional input operands in the two or more input operands. The function operand is written to a lookup table. Then the lookup table is accessed for each set of corresponding input operand bits in the two or more input operands to generate an output for the multi input bitwise logical operation instruction.

When more inputs are needed for a bitwise logical operation such as three inputs several of the two input bitwise logical operation instructions may be used to perform the function. For example the three input logical operation A B C E where is the bitwise logical AND operator may be implemented using two instructions to perform the following two input logical operations A B D C D E Each additional input over two requires at least one additional two input bitwise logical operation. For example A B B C is a three input bitwise logical operation that requires three two input bitwise logical operations performed using three two input bitwise logical operation instructions.

When circuitry is configured to perform the two input bitwise logical operation the output from the first two input bitwise logical operation is provided as an input to the circuitry to perform the second two input bitwise logical operation. Therefore the time needed to perform a three input bitwise logical operation may be twice the time needed to perform a two input bitwise logical operation or more in case of complex three input operations. An approach is described for performing multi input bitwise logical operations using look up table circuitry.

A multi input bitwise logical operation instruction is provided that computes an arbitrary bitwise logical function on two or more input operands. The bitwise logical function to be computed is specified as a 2 bit lookup table that is provided as an additional operand to the instruction where N the number of input operands. The definition of a three input version of the multi input bitwise logical operation instruction LOP3 is 

Rd is the destination register where the computed output is stored. Ra Rb and Rc are the input operands and the 8 bit operand Imm8 defines the bitwise logical function.

More illustrative information will now be set forth regarding various optional architectures and features with which the foregoing framework may or may not be implemented per the desires of the user. It should be strongly noted that the following information is set forth for illustrative purposes and should not be construed as limiting in any manner. Any of the following features may be optionally incorporated with or without the exclusion of other features described.

Certain algorithms particularly cryptographic algorithms can benefit from bitwise logical operation instructions having three or more input operands. The number of instructions needed to perform the algorithm may be reduced when bitwise logical operation instructions having three or more input operands are available compared with using bitwise logical operation instructions having less than three input operands. Also when circuitry is configured to perform bitwise logical operations for three or more input operands directly the algorithm may be executed in less time compared with using bitwise logical operation instructions having less than three input operands. Therefore a multi input bitwise logical operation instruction accepting three or more input operands may improve the performance of some algorithms particularly cryptographic algorithms.

When three input operands are provided the number of bits in the lookup table is 2and the number of different logical functions that may be performed is 2. The lookup table LUT may be configured via the function operand to perform any of the 2different logical functions. For each individual bit i the result Rd i LUT Ra i Rb i Rc i where Ra i Rb i Rc i is the concatenation of the corresponding bit from each input operand i.e. the set of corresponding input operand bits.

TABLE 1 illustrates some of the different logical functions that may be defined by the function operand where is a bitwise logical XOR operator is a bitwise logical AND operator is a bitwise logical OR operator and is a bitwise logical NOT operator.

The three input operands input operands and correspond to the input operands Ra Rb and Rc. As shown the input operands and are each 32 bits where the input operand includes hits A 0 A 1 . . . A 31 the input operand includes bits B 0 B 1 . . . B 31 and the input operand includes bits C 0 C 1 . . . C 31 . In other embodiments the input operands and may include fewer or more bits. Each one of the input operands and may be obtained from a register that was written by an earlier instruction obtained from a register that stores a constant value or the input operand may be used directly. The function operand may be used directly obtained from a register that was written by an earlier instruction or obtained from a register that stores a constant value. The function operand is stored in the UT that is accessed to provide the multi input bitwise logical operation defined by the function operand as an input to each of the multiplexors . As shown the output of the LUT is a 8 bit value e.g. LUT 0 LUT 1 . . . LUT 7 because there are three input operands and . The LUT may also be configured to perform a bitwise logical operation for only two of the three input operands.

TABLE 2 illustrates one example of Verilog code which may be used for generating at least a portion of the multi input bitwise logical operation unit in . Of course it should be noted that the code set forth in TABLE 2 is for illustrative purposes only and thus should not be construed as limiting in any manner.

When executed in a multi threaded processing architecture two or more threads may be configured to execute the multi input bitwise logical operation instruction in parallel. A predicate operation may be provided with the multi input bitwise logical operation instruction to control whether each individual thread executes the instruction. For example in one embodiment a group of 32 threads may be configured to execute a stream of instructions in parallel and any number of the 32 threads may be disabled enabled for execution of each instruction in the stream using the predicate operation.

TABLE 3 illustrates one example of pseudo code which may be used for performing a multi input bitwise logical operation unit in a multi threaded processing unit according to the multi input bitwise logical operation instruction LOP3 Rd Ra Rb Ro Imm8 Of course it should be noted that the code set forth in TABLE 3 is for illustrative purposes only and thus should not be construed as limiting in any manner.

It will be appreciated that the framework set forth above may be implemented in a multi threaded architecture such as a CPU that is configured to execute a plurality of threads using time slicing techniques. In one embodiment the encoding process may be implemented using a highly parallel architecture such as a graphics processing unit that is configured to execute tens or hundreds of threads in parallel. The following description illustrates one such architecture that could be used to implement at least a portion of the framework set forth above.

In one embodiment the PPU includes an input output I O unit configured to transmit and receive communications i.e. commands data etc. from a central processing unit CPU not shown over the system bus . The I O unit may implement a Peripheral Component Interconnect Express PCIe interface for communications over a PCIe bus. In alternative embodiments the I O unit may implement other types of well known bus interfaces.

The PPU also includes a host interface unit that decodes the commands and transmits the commands to the grid management unit or other units of the PPU e.g. memory interface as the commands may specify. The host interface unit is configured to route communications between and among the various logical units of the PPU .

In one embodiment a program encoded as a command stream is written to a buffer by the CPU. The buffer is a region in memory e.g. memory or system memory that is accessible i.e. read write by both the CPU and the PPU . The CPU writes the command stream to the buffer and then transmits a pointer to the start of the command stream to the PPU . The host interface unit provides the grid management unit GMU with pointers to one or more streams. The GMU selects one or more streams and is configured to organize the selected streams as a pool of pending grids. The pool of pending grids may include new grids that have not yet been selected for execution and grids that have been partially executed and have been suspended.

A work distribution unit that is coupled between the GMU and the SMs manages a pool of active grids selecting and dispatching active grids for execution by the SMs . Pending grids are transferred to the active grid pool by the GMU when a pending grid is eligible to execute i.e. box no unresolved data dependencies. An active grid is transferred to the pending pool when execution of the active grid is blocked by a dependency. When execution of a grid is completed the grid is removed from the active grid pool by the work distribution unit . In addition to receiving grids from the host interface unit and the work distribution unit the GMU also receives grids that are dynamically generated by the SMs during execution of a grid. These dynamically generated grids join the other pending grids in the pending grid pool.

In one embodiment the CPU executes a driver kernel that implements an application programming interface API that enables one or more applications executing on the CPU to schedule operations for execution on the PPU . An application may include instructions i.e. API calls that cause the driver kernel to generate one or more grids for execution. In one embodiment the PPU implements a SIMD Single Instruction Multiple Data architecture where each thread block i.e. warp in a grid is concurrently executed on a different data set by different threads in the thread block. The driver kernel defines thread blocks that are comprised of k related threads such that threads in the same thread block may exchange data through shared memory. In one embodiment a thread block comprises 32 related threads and a grid is an array of one or more thread blocks that execute the same stream and the different thread blocks may exchange data through global memory.

In one embodiment the PPU comprises X SMs X . For example the PPU may include 15 distinct SMs . Each SM is multi threaded and configured to execute a plurality of threads e.g. 32 threads from a particular thread block concurrently. Each of the SMs is connected to a level two L2 cache via a crossbar or other type of interconnect network . The L2 cache is connected to one or more memory interfaces . Memory interfaces implement 16 32 64 128 bit data buses or the like for high speed data transfer. In one embodiment the PPU comprises U memory interfaces U where each memory interface U is connected to a corresponding memory device U . For example PPU may be connected to up to 6 memory devices such as graphics double data rate version 5 synchronous dynamic random access memory GDDR5 SDRAM .

In one embodiment the PPU implements a multi level memory hierarchy. The memory is located off chip in SDRAM coupled to the PPU . Data from the memory may be fetched and stored in the L2 cache which is located on chip and is shared between the various SMs . In one embodiment each of the SMs also implements an L1 cache. The L1 cache is private memory that is dedicated to a particular SM . Each of the L1 caches is coupled to the shared L2 cache . Data from the L2 cache may be fetched and stored in each of the L1 caches for processing in the functional units of the SMs .

In one embodiment the PPU comprises a graphics processing unit GPU . The PPU is configured to receive commands that specify shader programs for processing graphics data. Graphics data may be defined as a set of primitives such as points lines triangles quads triangle strips and the like. Typically a primitive includes data that specifies a number of vertices for the primitive e.g. in a model space coordinate system as well as attributes associated with each vertex of the primitive. The PPU can be configured to process the graphics primitives to generate a frame buffer i.e. pixel data for each of the pixels of the display . The driver kernel implements a graphics processing pipeline such as the graphics processing pipeline defined by the OpenGL API.

An application writes model data for a scene i.e. a collection of vertices and attributes to memory. The model data defines each of the objects that may be visible on a display. The application then makes an API call to the driver kernel that requests the model data to be rendered and displayed. The driver kernel reads the model data and writes commands to the buffer to perform one or more operations to process the model data. The commands may encode different shader programs including one or more of a vertex shader shader geometry shader pixel shader etc. For example the GMU may configure one or more SMs to execute a vertex shader program that processes a number of vertices defined by the model data. In one embodiment the GMU may configure different SMs to execute different shader programs concurrently. For example a first subset of SMs may be configured to execute a vertex shader program while a second subset of SMs may be configured to execute a pixel shader program. The first subset of SMs processes vertex data to produce processed vertex data and writes the processed vertex data to the L2 cache and or the memory . After the processed vertex data is rasterized i.e. transformed from three dimensional data into two dimensional data in screen space to produce fragment data the second subset of SMs executes a pixel shader to produce processed fragment data which is then blended with other processed fragment data and written to the frame buffer in memory . The vertex shader program and pixel shader program may execute concurrently processing different data from the same scene in a pipelined fashion until all of the model data for the scene has been rendered to the frame buffer. Then the contents of the frame buffer are transmitted to a display controller for display on a display device.

The PPU may be included in a desktop computer a laptop computer a tablet computer a smart phone e.g. a wireless hand held device personal digital assistant PDA a digital camera a hand held electronic device and the like. In one embodiment the PPU is embodied on a single semiconductor substrate. In another embodiment the PPU is included in a system on a chip SoC along with one or more other logic units such as a reduced instruction set computer RISC CPU a memory management unit MMU a digital to analog converter DAC and the like.

In one embodiment the PPU may be included on a graphics card that includes one or more memory devices such as GDDR5 SDRAM. The graphics card may be configured to interface with a PCIe slot on a motherboard of a desktop computer that includes e.g. a northbridge chipset and a southbridge chipset. In yet another embodiment the PPU may be an integrated graphics processing unit iGPU included in the chipset i.e. Northbridge of the motherboard.

As described above the work distribution unit dispatches active grids for execution on one or more SMs of the PPU . The scheduler unit receives the grids from the work distribution unit and manages instruction scheduling for one or more thread blocks of each active grid. The scheduler unit schedules threads for execution in groups of parallel threads where each group is called a warp. In one embodiment each warp includes 32 threads. The scheduler unit may manage a plurality of different thread blocks allocating the thread blocks to warps for execution and then scheduling instructions from the plurality of different warps on the various functional units i.e. cores DPUs SFUs and LSUs during each clock cycle.

The instruction cache may store one or more multi input bitwise logical operation instructions. The input operands specified by each multi input bitwise logical operation instruction may be stored in the register file and the result of the multi input bitwise logical operation instruction may be written back to the register file . Each multi input bitwise logical operation instruction is executed for one or more threads in a warp. One or more or the cores DPUs SFUs and LSUs may include a multi input bitwise logical operation unit and be configured to execute a multi input bitwise logical operation instruction.

In one embodiment each scheduler unit includes one or more instruction dispatch units . Each dispatch unit is configured to transmit instructions to one or more of the functional units. In the embodiment shown in the scheduler unit includes two dispatch units that enable two different instructions from the same warp to be dispatched during each clock cycle. In alternative embodiments each scheduler unit may include a single dispatch unit or additional dispatch units .

Each SM includes a register file that provides a set of registers for the functional units of the SM . In one embodiment the register file is divided between each of the functional units such that each functional unit is allocated a dedicated portion of the register file . In another embodiment the register file is divided between the different warps being executed by the SM . The register file provides temporary storage for operands connected to the data paths of the functional units.

Each SM comprises L processing cores . In one embodiment the SM includes a large number e.g. 192 etc. of distinct processing cores . Each core is a fully pipelined single precision processing unit that includes a floating point arithmetic logic unit and an integer arithmetic logic unit. In one embodiment the floating point arithmetic logic units implement the IEEE 754 2008 standard for floating point arithmetic. Each SM also comprises M DPUs that implement double precision floating point arithmetic N SFUs that perform special functions e.g. copy rectangle pixel blending operations and the like and P LSUs that implement load and store operations between the shared memory L1 cache and the register file . In one embodiment the SM includes 64 DPUs 32 SFUs and 32 LSUs .

Each SM includes an interconnect network that connects each of the functional units to the register file and the shared memory L1 cache . In one embodiment the interconnect network is a crossbar that can be configured to connect any of the functional units to any of the registers in the register file or the memory locations in shared memory L1 cache .

In one embodiment the SM is implemented within a GPU. In such an embodiment the SM comprises J texture units . The texture units are configured to load texture maps i.e. a 2D array of texels from the memory and sample the texture maps to produce sampled texture values for use in shader programs. The texture units implement texture operations such as anti abasing operations using mip maps i.e. texture maps of varying levels of detail . In one embodiment the SM includes 16 texture units .

The PPU described above may be configured to perform highly parallel computations much faster than conventional CPUs. Parallel computing has advantages in graphics processing data compression biometrics stream processing algorithms and the like.

The system also includes input devices a graphics processor and a display i.e. a conventional CRT cathode ray tube LCD liquid crystal display LED light emitting diode plasma display or the like. User input may be received from the input devices e.g. keyboard mouse touchpad microphone and the like. In one embodiment the graphics processor may include a plurality of shader modules a rasterization module etc. Each of the foregoing modules may even be situated on a single semiconductor platform to form a graphics processing unit CPU .

In the present description a single semiconductor platform may refer to a sole unitary semiconductor based integrated circuit or chip. It should be noted that the term single semiconductor platform may also refer to multi chip modules with increased connectivity which simulate on chip operation and make substantial improvements over utilizing a conventional central processing unit CPU and bus implementation. Of course the various modules may also be situated separately or in various combinations of semiconductor platforms per the desires of the user.

The system may also include a secondary storage . The secondary storage includes for example a hard disk drive and or a removable storage drive representing a floppy disk drive a magnetic tape drive a compact disk drive digital versatile disk DVD drive recording device universal serial bus USB flash memory. The removable storage drive reads from and or writes to a removable storage unit in a well known manner.

Computer programs or computer control logic algorithms may be stored in the main memory and or the secondary storage . Such computer programs when executed enable the system to perform various functions. The memory the storage and or any other storage are possible examples of computer readable media.

In one embodiment the architecture and or functionality of the various previous figures may be implemented in the context of the central processor the graphics processor an integrated circuit not shown that is capable of at least a portion of the capabilities of both the central processor and the graphics processor a chipset i.e. a group of integrated circuits designed to work and sold as a unit for performing related functions etc. and or any other integrated circuit for that matter.

Still yet the architecture and or functionality of the various previous figures may be implemented in the context of a general computer system a circuit board system a game console system dedicated for entertainment purposes an application specific system and or any other desired system. For example the system may take the form of a desktop computer laptop computer server workstation game consoles embedded system and or any other type of logic. Still yet the system may take the form of various other devices including but not limited to a personal digital assistant PDA device a mobile phone device a television etc.

Further while not shown the system may be coupled to a network e.g. a telecommunications network local area network LAN wireless network wide area network WAN such as the Internet peer to peer network cable network or the like for communication purposes.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

