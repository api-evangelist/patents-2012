---

title: Efficient motion estimation for remote desktop sharing
abstract: This disclosure relates to systems and methods for estimation of motion in a frame as compared to a reference frame based upon knowledge of windows in the frame and reference frame.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09235313&OS=09235313&RS=09235313
owner: Google Inc.
number: 09235313
owner_city: Mountain View
owner_country: US
publication_date: 20120111
---
This disclosure generally relates to systems and methods that facilitate efficient motion estimation for remote desktop sharing.

Remote desktop sharing involves capturing image frames of a remote desktop and transmitting frames such as in the form of a video typically employing an encoder decoder to a client desktop. The amount of data representing the captured frames can be extremely large. Further transmitting digital media information over communication networks can consume large amounts of bandwidth. The cost of transmitting data from one location to another is a function of number of bits transmitted per second. Typically higher bit transfer rates are associated with increased cost. Higher bit rates can also progressively add to required storage capacities of memory systems thereby increasing storage cost. Thus at a given quality level it can be much more cost effective to use fewer bits as opposed to more bits to store digital images and videos.

It therefore can be desirable to compress media data for recording transmitting or storing. For a typical compression scheme achieving higher media quality requires more bits used which can in turn increase cost of transmission and storage. While lower bandwidth traffic is desired so is higher quality media.

An encoder is a device capable of encoding e.g. coding and sometimes decoding digital media data. A decoder is a device capable of decoding digital media data. An encoder generally employs a codec for coding and or decoding digital media data. The term codec is derived from a combination of the terms code and decode or the terms compress and decompress. A variety of codecs are commercially available. Generally speaking for example codec classifications include discrete cosine transfer codecs fractal codecs and wavelet codecs. An encoder or codec by encoding the digital media data can reduce the number of bits required to transmit signals thereby reducing associated transmission costs.

One part of the encoding process typically involves using motion estimation to facilitate encoding of digital media data. In most cases consecutive frames in a sequence of frames will be relatively similar except for movement of an object s within a frame from one frame to the next frame. Motion estimation techniques take advantage of similarities between consecutive frames in order to more efficiently encode a frame. For instance an encoder employing a motion estimation technique can use a previous frame as a reference frame when encoding a current frame. The encoder generates motion vectors for the current frame based on the reference frame which can be a reconstructed video frame. The encoder identifies differences between the reference frame and current frame and codes the portions of the current frame that are different from the reference frame without having to code the portions of the current frame that are unchanged from the reference frame. This can thereby make the encoding process and decoding process more efficient.

Precise motion estimation in frame compression can be desirable to attain desired quality and efficiency of the encoder. Typically the more precise the motion estimation the less complicated residual data can be for encoding of digital media content the lower the bit rate and the better the encoding quality.

However the computational complexity of motion estimation generally can be very high thereby making motion estimation a primary time consuming portion of encoding.

A simplified summary is provided herein to help enable a basic or general understanding of various aspects of exemplary non limiting embodiments that follow in the more detailed description and the accompanying drawings. This summary is not intended however as an extensive or exhaustive overview. Instead the purpose of this summary is to present some concepts related to some exemplary non limiting embodiments in simplified form as a prelude to more detailed description of the various embodiments that follow in the disclosure.

In accordance with an implementation a window analyzing component identifies respective location size and z order of at least one window captured in a frame a tracking component tracks relocation or re sizing of the at least one window over a plurality of frames and a motion estimation component estimates motion of at least one motion compensation unit in the frame as a function of its location with respect to the at least one window.

In accordance with another non limiting implementation respective location size and z order of at least one window captured in a frame are identified. Relocation or re sizing of the at least one window over a plurality of frames is tracked and motion of at least one motion compensation unit in the frame as a function of its location with respect to the at least one window is estimated.

Various aspects or features of this disclosure are described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In this specification numerous specific details are set forth in order to provide a thorough understanding of this disclosure. It should be understood however that certain aspects of this disclosure may be practiced without these specific details or with other methods components materials etc. In other instances well known structures and devices are shown in block diagram form to facilitate describing this disclosure.

Motion estimation is often used to facilitate encoding digital media data e.g. desktop sharing content . During the motion estimation process motion vectors for a current raw frame of a frame sequence can be generated based on a reference frame which is typically a prior frame in the sequence. Precise motion estimation in frame compression can be desirable to attain desired quality and efficiency of the encoder. Typically the more precise the motion estimation the less complicated residual data can be for encoding of content the lower the bit rate and the better the encoding quality. However motion estimation is generally one of the most computing and time intensive portions of the encoding process.

A motion vector generally represents motion estimation between a current raw frame and a reference frame. Considering the high correlation between a reference frame and its raw frame it is possible to obtain a good motion estimate based on a raw reference frame and then refine the motion estimation when a reconstructed reference frame is available if desired. Accordingly in one implementation an initial motion estimation can be generated using raw frame data. Certain other coding techniques performed during video encoding can use motion vectors based directly on the initial motion estimation or refined motion vectors based on a reconstructed reference frame when the reconstructed reference frame is available. The decision to use motion vectors based on the initial motion estimation or refined motion vectors based on a reconstructed reference frame can be based on variable factors such as for example available bandwidth available computing cycles statistics of previously encoded frames slices etc.

Typically block based motion compensation can be used in motion estimation. Block based motion compensation takes into account that much of what makes up a new frame in a video sequence can be found in an earlier frame but perhaps in a different location. One implementation divides a frame into a series of macroblocks. A macroblock is a set of pixels of a frame within a defined area non limiting examples of which are a 16 by 16 pixel block an 8 by 8 pixel block or a 4 by 4 pixel block. Performing a search for the macroblocks of a current frame a new frame can be composed or predicted with respect to a reference frame by looking for a macroblock in the reference frame that matches a macroblock in a current frame. If a matching macroblock is found the motion vector of the matching macroblock in the reference frame to the macroblock in the current frame is associated with the current frame.

In remote desktop sharing unlike in conventional video encoding motion vectors of a frame of a desktop screen capture are closely related to movement of windows on the desktop. This movement which includes changes in location and or size of the windows is knowable. Information about windows in a desktop is typically available from the operating system for example through application programming interfaces APIs . As such for a macroblock that is located in a window of a current frame the window location and size can be employed to provide a better estimate of a potential motion vector and or suggested search area for a matching block with respect to the same window in a reference frame.

Disclosed in one or more non limiting embodiments described below are aspects relating to motion estimation for an encoder based upon knowledge of locations and sizes of desktop windows in captured frames.

Referring now to the drawings depicts a system that provides desktop screen captures from remote client to local client . System includes a remote desktop sharing component that captures frames of the desktop screen from remote client encodes the frames and communicates the frames to local client over a network. Furthermore remote desktop sharing component can receive input from local client to control the desktop on remote client .

Remote desktop sharing component includes a memory that stores computer executable components and a processor that executes computer executable components stored in the memory a non limiting example of which can be found with reference to . In one implementation remote desktop sharing component can be incorporated into remote client . Alternatively remote desktop sharing component can be located on a server communicating via a network to remote client . Remote desktop sharing component communicates via a network to local client . It is to be appreciated that while only one local client is depicted sharing the desktop on remote client there can be any number of local clients sharing the desktop on remote client and remote desktop sharing component can communicate captured frames from remote client to a plurality of local clients concurrently.

Remote desktop sharing component includes a window analyzing component that captures frames of the desktop screen on remote client and determines window information in the frame. Remote desktop sharing component further includes a tracking component that logs captured frames and determined window information. In addition remote desktop sharing component includes an encoder component that determines motion vectors associated with captured frames and employs the captured frames and motion vectors to generate encoded data for communication to local client . Additionally in remote desktop sharing component includes a data store that stores data generated by window analyzing component tracking component and encoder component . Data store can be stored on any suitable type of storage device non limiting examples of which are illustrated with reference to . Data store may also be external but coupled to remote desktop sharing component .

With continued reference to window analyzing component periodically captures a desktop screen frame of remote client . In a non limiting example this can be performed at a regular interval based upon a predetermined frame rate for example based upon quality type of encoder codec performance etc. Window analyzing component obtains window information regarding windows in the captured frames. For example referring to a remote desktop is depicted with WINDOW WINDOW and WINDOWN. It is to be appreciated that a desktop can have any number N windows where N is an integer. In this example WINDOWs and N are completely visible and WINDOW is partially visible.

Referring to is depicted an example captured FRAMEby window analyzing component of the desktop screen of . Window analyzing component obtains window information for each WINDOW and N that can include 

LEFT which indicates a position of the left edge of the window on the desktop with respect to an x axis 

TOP which indicates a position of the top edge of the window on the desktop with respect to a y axis 

RIGHT which indicates a position of the right edge of the window on the desktop with respect to an x axis 

BOTTOM which indicates a position of the bottom edge of the window on the desktop with respect to a y axis 

ZORDER or z order which indicates the window s position in a stack of windows. This window stack is oriented along an imaginary z axis extending outward from the screen. The window at the top of the z order is in front of all other windows. The window at the bottom of the z order is behind all other windows. ISNEW which indicates whether the window is present in a reference frame. While window analyzing component is depicted outside of encoder component it is to be appreciated that window analyzing component can be a part of encoder component .

Continuing with reference to window analyzing component obtains window information for WINDOWN including ID TOP LEFT RIGHT BOTTOM ZORDER ISNEW . In this example IDindicates the identifier for WINDOWN and LEFT RIGHT TOP and BOTTOMindicate the respective x axis and y axis positions on remote desktop for the respective edges of WINDOWN . ZORDERis set to indicate the relative z axis position of WINDOWN in this case relative to WINDOW . For example ZORDERmay be set to a value of 1 if WINDOWN is the active window on remote desktop indicating its position as topmost window. Given that FRAMErepresents an initial remote desktop screen capture there is no reference frame. As such ISNEW would be set to a value such as true or 1 indicating that WINDOWN is not present in a reference frame. Window information is also obtained by window analyzing component for WINDOW . Additionally window analyzing component determines if a window is not visible based upon the ZORDERs locations and sizes of the windows in the frame and could not maintain windows information for a frame for windows that are not at least partially visible in that frame. For example if there were a WINDOWN 1 in FRAMEthat had a ZORDER indicating that is was behind WINDOW and located completely within the boundary of WINDOW then WINDOWN 1 would not be visible and in one implementation windows information would not be maintained for WINDOWN 1 for FRAME.

Referring to there is depicted an example captured FRAMEof remote desktop where i is an integer. Any number i of frames can be captured. In this example WINDOWN is moved by a vector . As such window analyzing component obtains window information for WINDOWN including ID TOP LEFT RIGHT BOTTOM ZORDER ISNEW. In this example IDindicates the identifier for WINDOWN and LEFT RIGHT TOP and BOTTOMindicate the respective x axis and y axis positions on remote desktop for the respective edges of WINDOWN in FRAME. ZORDERmay continue to be set to a value of 1 if for example WINDOWN is still the active window on remote desktop . FRAMErepresents a subsequent frame to FRAME which may be designated as a reference frame. As such ISNEWwould be set to a value such as false or 0 indicating that WINDOWN is present in reference FRAME. Furthermore depicts WINDOW which was not present in reference FRAME. Therefore window analyzing component would obtain window information ID TOP LEFT RIGHT BOTTOM ZORDER ISNEW for WINDOW and designate a value for ISNEW such as true or 1 indicating that WINDOW is not present in a reference FRAME. Similarly window information is also obtained by window analyzing component for WINDOW in FRAME.

Referring back to tracking component maintains a list of the captured frames and windows information for in one implementation at least partially visible windows associated with each captured frame. For example tracking component can generate a list showing a sequential order of the captured frames from remote client and associate the window information obtained by window analyzing component for each captured frame. Furthermore tracking component may indicate in the list which captured frames have been designated as raw reference frames. Furthermore tracking component can maintain a list of reconstructed frames where a reconstructed frame is a captured frame that has been encoded by an encoder component and then decoded by encoder component into a reconstructed frame. Tracking component may also indicate in the list which reconstructed frames have been designated as reconstructed reference frames. Determination of which frames are reference frames either raw or reconstructed can be based upon the type of encoder codec. In addition tracking component maintains window information for reconstructed frames corresponding to their associated captured frames. Tracking component stores the list frames and windows information in data store . While tracking component is depicted outside of encoder component it is to be appreciated that tracking component can be a part of encoder component .

Continuing with reference to encoder component encodes captured frames. Encoder component includes motion estimation component that estimates motion vectors for captured frames 1 to i. For each frame i motion estimation component divides FRAMEinto k motion compensation units MCU where k is an integer and then examines each motion compensation unit also referred to as a macroblock 1 to k in FRAMEfor a matching macroblock in one or more reference frames 1 to j where j is an integer to determine a motion vector for the motion compensation unit k. It is to be appreciated that a reference frame can be a raw reference frame or a reconstructed reference frame and the choice of reference frame s is typically determined by the type of encoder codec that is employed. In one example embodiment motion estimation component employs a window based motion estimation process or algorithm such as disclosed with reference to for each MCUin FRAME. A windows based motion estimation algorithm takes into account knowledge of windows that exist in frames to perform motion estimation. Motion compensating units and associated motion vectors are tracked and stored with respective frames e.g. captured frames encoded captured frames reconstructed frames reference frames or reconstructed reference frames by tracking component .

Encoder component further includes coder component that performs e.g. executes one or more encoding related functions e.g. data compression to encode captured frames e.g. frames of a frame sequence such as for example encoding related functions other than the motion estimation functions performed by motion estimation component . Coder component can employ tracked information from tracking component for example captured frames encoded captured frames window information reconstructed frames reference frames reconstructed reference frames or motion vectors for the encoding related functions. Encoded captured frames can be stored in data store and maintained in the list by tracking component .

Referring to an exemplary method for capturing and encoding frames of a remote desktop is depicted. At reference numeral an initial frame 0 is captured of a remote desktop and encoded e.g. using the remote desktop sharing component . At reference numeral a frame counter i is set to 1. At reference number an additional frame i is captured of the remote desktop and encoded e.g. using a remote desktop sharing component . At reference numeral a decision is made whether more frames are to be processed e.g. using remote desktop sharing component . If the decision is NO then the process ends. If the decision is YES then at reference number the frame counter i is incremented by 1 and the process returns to reference number e.g. using remote desktop sharing component .

Referring to an exemplary method for capturing and encoding initial frame 0 is depicted. The method may be employed at for example in method . At reference numeral an initial frame is captured from the remote desktop e.g. using window analyzing component . At reference numeral windows information for windows in the initial frame is determined e.g. using window analyzing component . At reference numeral the initial captured frame 0 is encoded e.g. using encoder component . At reference numeral the captured frame 0 windows information for frame 0 the encoded frame 0 possibly along with a reconstructed frame 0 are tracked and stored e.g. using tracking component and data store .

Referring to an exemplary method for capturing and encoding additional frame i is depicted. The method may be employed at for example in method . At reference numeral an additional frame i where i is an integer is captured from the remote desktop e.g. using window analyzing component . At reference numeral windows information for windows in the additional frame i is determined e.g. using window analyzing component . At reference number motion estimation is performed for all motion compensation units 1 to k where k is an integer in additional captured frame i against one or more reference frames j where j is an integer for example using a windows based motion estimation algorithm such as disclosed with reference to e.g. using motion estimation component . At reference numeral the additional captured frame i is encoded e.g. using encoder component . At reference numeral the captured frame i windows information for frame i motion vectors for frame i the encoded frame i possibly along with a reconstructed frame i are tracked and stored e.g. using tracking component and data store .

Referring to an exemplary method for estimating motion for a motion compensation unit k based upon knowledge of windows in frame i window based motion estimation algorithm . The operations at reference numerals and can be performed using for example motion estimation component . Coordinates and vectors discussed herein generally employ a common coordinate system across all frames e.g. captured frame reconstructed frame reference frame and reconstructed reference frame etc. . At reference numeral a determination is made whether the location of motion compensation unit k of frame i MCU belongs to a window in frame i FRAME that is not a new window If the determination is false NO then the method proceeds to reference numeral . If the determination is true YES then the method proceeds to reference numeral .

At reference numeral the IDfor window N in FRAMEin which MCUis located is determined. For example this information can be retrieved based upon the coordinate position of MCUand windows information associated with FRAME. At reference numeral a relative vector Vfor MCUis determined indicating the vector from the top left corner coordinate position LEFT TOP of window IDto the x y coordinate position of MCU. At reference numeral where j is an integer is set equal to a value e.g. 1 indicating the first reference frame j FRAME . In one implementation j is set to a value indicating a reference frame prior to the determination at .

At reference numeral a determination is made whether there is a window in reference FRAMEthat has an identifier IDthat is equivalent to ID. If the determination is false NO meaning that reference FRAMEdoes not contain a window that is the same window in which MCUis located in FRAME then the method proceeds to reference numeral . If the determination is true YES then the window in which MCUis located in FRAMEis also in reference FRAMEand the method proceeds to reference numeral .

At reference numeral a determination is made using relative vector Vand ZORDERas to whether a coordinate position in reference FRAMEa distance Vfrom the top left corner LEFT TOP of window IDis visible. If the determination is false NO meaning that the coordinate position is not visible for example because that location in window IDis obstructed by another window then the method proceeds to reference numeral . If the determination is true YES meaning that the coordinate position is visible then the method proceeds to reference numeral .

At reference numeral a potential motion vector Vfrom reference FRAMEto FRAMEfor MCUis set equal to a vector from the top left corner coordinate position LEFT TOP of window IDto the top left corner LEFT TOP of window ID.

At reference numeral a determination is made whether Vis verified by comparing a macroblock MCU in reference FRAMEat a coordinate location a distance Vfrom the x y coordinate location of MCUto MCU. The comparison determines whether MCUmatches MCU. It is to be appreciated that the potential motion vector Vcan be verified using a raw reference frame j or an associated reconstructed reference frame j. In an embodiment using the reconstructed reference frame j for the verification may not result in an exact match and thus a decision needs to be made as to whether Vis adequate for encoding. For example because MCU. comes from a captured frame FRAMEthat is raw which is compared to MCUfrom a reconstructed reference frame j the raw contents of the motion compensation unit MCU. may not exactly match the reconstructed contents of the macroblock MCU. This decision can be based for example on a threshold defined in the encoder that can be based on display quality performance or other criteria. If the determination is true YES meaning that Vis verified then the method proceeds to reference numeral . If the determination is false NO meaning that Vis not verified then the method proceeds to reference numeral .

At reference numeral a suggested search area Sfor MCUwithin reference FRAMEis set equal to the area within the window IDboundary TOP LEFT RIGHT BOTTOM minus any portion of window IDthat is not visible in reference FRAMEbased upon ZORDER. For example window IDmay be partially obstructed from view by other windows in reference FRAME. As such window information for the other windows can be used to determine which portion of window IDis obstructed by the other windows and this portion would be excluded when determining the suggested search area.

At reference numeral a determination is made whether a macroblock MCUwithin the suggested search area Smatches MCU. If the determination is false NO meaning that a MCUwas not found within Sthat matches MCU the method proceeds to reference numeral . If the determination is true YES meaning that a MCUwas found within Sthat matches MCU the method proceeds to reference numeral .

At reference numeral the potential motion vector Vfrom reference FRAMEto FRAMEfor MCUis set equal to a vector from the coordinate position of the matching MCUto the coordinate position of MCUand the method proceeds to reference numeral .

At reference numeral conventional motion estimation techniques are employed to perform motion estimation for MCUwith respect to reference FRAMEto determine a potential motion vector V. Non limiting examples of conventional motion estimation techniques can include full search or coarse to fine search. However other conventional motion estimation techniques known to those skilled in the art are within the scope of this method. The method then proceeds to reference number .

At reference numeral MCUis tagged as containing new pixels for encoding and an indication is made for MCUthat there is no Vfrom reference FRAMEto FRAMEfor MCU. The method proceeds to reference numeral .

At reference number a determination is made whether Vis verified by comparing a macroblock MCU in reference FRAMEat a coordinate location a distance Vfrom the x y coordinate location of MCUto MCU. The comparison determines whether MCUmatches MCU. It is to be appreciated that the potential motion vector Vcan be verified using a raw reference frame j or an associated reconstructed reference frame j. In an embodiment using the reconstructed reference frame j for the verification may not result in an exact match and thus a decision is made as to whether Vis adequate for encoding. For example in that embodiment because MCU. comes from a captured frame FRAMEthat is raw which is compared to MCUfrom a reconstructed reference frame j the raw contents of the motion compensation unit MCU. may not exactly match the reconstructed contents of the macroblock MCU. This decision can be based for example on a threshold defined in the encoder that can be based on display quality performance or other criteria. If the determination is true YES meaning that Vis verified then the method proceeds to reference number . If the determination is false NO meaning that Vis not verified then the method proceeds to reference numeral .

At reference numeral the motion vector Vfrom reference FRAMEto FRAMEfor MCUis set equal Vand the method ends. At reference numeral a motion vector is selected from the unverified potential motion vectors V for reference frames 1 to j that has a corresponding MCUin reference FRAMEat a coordinate location a distance Vfrom the x y coordinate location of MCUthat is a closest match to MCU for example as defined by the encoder. The selected potential motion vector Vis set as the motion vector Vfrom reference FRAMEto FRAMEfor MCU.

At reference numeral a determination is made whether there is an additional reference frame for which motion estimation needs to be performed for MCU. If the determination if false NO meaning there are no additional reference frames for MCU then the method ends. If the determination if true YES meaning there are additional reference frames for MCU then the method proceeds to reference numeral . At reference numeral is set equal to j 1 to indicate the next reference frame for MCUand the method proceeds to reference numeral .

One of ordinary skill in the art can appreciate that the various embodiments described herein can be implemented in connection with any computer or other client or server device which can be deployed as part of a computer network or in a distributed computing environment and can be connected to any kind of data store where media may be found. In this regard the various embodiments described herein can be implemented in any computer system or environment having any number of memory or storage units and any number of applications and processes occurring across any number of storage units. This includes but is not limited to an environment with server computers and client computers deployed in a network environment or a distributed computing environment having remote or local storage.

Distributed computing provides sharing of computer resources and services by communicative exchange among computing devices and systems. These resources and services include the exchange of information cache storage and disk storage for objects such as files. These resources and services can also include the sharing of processing power across multiple processing units for load balancing expansion of resources specialization of processing and the like. Distributed computing takes advantage of network connectivity allowing clients to leverage their collective power to benefit the entire enterprise. In this regard a variety of devices may have applications objects or resources that may participate in the various embodiments of this disclosure.

Each computing object etc. and computing objects or devices etc. can communicate with one or more other computing objects etc. and computing objects or devices etc. by way of the communications network either directly or indirectly. Even though illustrated as a single element in network may comprise other computing objects and computing devices that provide services to the system of and or may represent multiple interconnected networks which are not shown. Each computing object etc. or computing objects or devices etc. can also contain an application such as applications that might make use of an API or other object software firmware and or hardware suitable for communication with or implementation of various embodiments of this disclosure.

There are a variety of systems components and network configurations that support distributed computing environments. For example computing systems can be connected together by wired or wireless systems by local networks or widely distributed networks. Currently many networks are coupled to the Internet which provides an infrastructure for widely distributed computing and encompasses many different networks though any suitable network infrastructure can be used for exemplary communications made incident to the systems as described in various embodiments herein.

Thus a host of network topologies and network infrastructures such as client server peer to peer or hybrid architectures can be utilized. The client is a member of a class or group that uses the services of another class or group. A client can be a computer process e.g. roughly a set of instructions or tasks that requests a service provided by another program or process. A client process may utilize the requested service without having to know all working details about the other program or the service itself.

In a client server architecture particularly a networked system a client can be a computer that accesses shared network resources provided by another computer e.g. a server. In the illustration of as a non limiting example computing objects or devices etc. can be thought of as clients and computing objects etc. can be thought of as servers where computing objects etc. provide data services such as receiving data from client computing objects or devices etc. storing of data processing of data transmitting data to client computing objects or devices etc. although any computer can be considered a client a server or both depending on the circumstances. Any of these computing devices may be processing data or requesting transaction services or tasks that may implicate the techniques for systems as described herein for one or more embodiments.

A server is typically a remote computer system accessible over a remote or local network such as the Internet or wireless network infrastructures. The client process may be active in a first computer system and the server process may be active in a second computer system communicating with one another over a communications medium thus providing distributed functionality and allowing multiple clients to take advantage of the information gathering capabilities of the server. Any software objects utilized pursuant to the techniques described herein can be provided standalone or distributed across multiple computing devices or objects.

In a network environment in which the communications network bus is the Internet for example the computing objects etc. can be Web servers file servers media servers etc. with which the client computing objects or devices etc. communicate via any of a number of known protocols such as the hypertext transfer protocol HTTP . Objects etc. may also serve as client computing objects or devices etc. as may be characteristic of a distributed computing environment.

As mentioned advantageously the techniques described herein can be applied to any suitable device. It is to be understood therefore that handheld portable and other computing devices and computing objects of all kinds are contemplated for use in connection with the various embodiments. Accordingly the below computer described below in is but one example of a computing device. Additionally a suitable server can include one or more aspects of the below computer such as a media server or other media management server components.

Although not required embodiments can partly be implemented via an operating system for use by a developer of services for a device or object and or included within application software that operates to perform one or more functional aspects of the various embodiments described herein. Software may be described in the general context of computer executable instructions such as program modules being executed by one or more computers such as client workstations servers or other devices. Those skilled in the art will appreciate that computer systems have a variety of configurations and protocols that can be used to communicate data and thus no particular configuration or protocol is to be considered limiting.

With reference to an exemplary computing device for implementing one or more embodiments in the form of a computer is depicted. Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit .

Computer typically includes a variety of computer readable media and can be any available media that can be accessed by computer . The system memory may include computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and or random access memory RAM . By way of example and not limitation system memory may also include an operating system application programs other program modules and program data.

A user can enter commands and information into the computer through input devices non limiting examples of which can include a keyboard keypad a pointing device a mouse stylus touchpad touchscreen trackball motion detector camera microphone joystick game pad scanner or any other device that allows the user to interact with computer . A monitor or other type of display device is also connected to the system bus via an interface such as output interface . In addition to a monitor computers can also include other peripheral output devices such as speakers and a printer which may be connected through output interface .

The computer may operate in a networked or distributed environment using logical connections to one or more other remote computers such as remote computer . The remote computer may be a personal computer a server a router a network PC a peer device or other common network node or any other remote media consumption or transmission device and may include any or all of the elements described above relative to the computer . The logical connections depicted in include a network such local area network LAN or a wide area network WAN but may also include other networks buses e.g. cellular networks.

As mentioned above while exemplary embodiments have been described in connection with various computing devices and network architectures the underlying concepts may be applied to any network system and any computing device or system in which it is desirable to publish or consume media in a flexible way.

Also there are multiple ways to implement the same or similar functionality e.g. an appropriate API tool kit driver code operating system control standalone or downloadable software object etc. which enables applications and services to take advantage of the techniques described herein. Thus embodiments herein are contemplated from the standpoint of an API or other software object as well as from a software or hardware object that implements one or more aspects described herein. Thus various embodiments described herein can have aspects that are wholly in hardware partly in hardware and partly in software as well as in software.

The word exemplary is used herein to mean serving as an example instance or illustration. For the avoidance of doubt the aspects disclosed herein are not limited by such examples. In addition any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs nor is it meant to preclude equivalent exemplary structures and techniques known to those of ordinary skill in the art. Furthermore to the extent that the terms includes has contains and other similar words are used in either the detailed description or the claims for the avoidance of doubt such terms are intended to be inclusive in a manner similar to the term comprising as an open transition word without precluding any additional or other elements.

Computing devices typically include a variety of media which can include computer readable storage media and or communications media in which these two terms are used herein differently from one another as follows. Computer readable storage media can be any available storage media that can be accessed by the computer is typically of a non transitory nature and can include both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable storage media can be implemented in connection with any method or technology for storage of information such as computer readable instructions program modules structured data or unstructured data. Computer readable storage media can include but are not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other tangible and or non transitory media which can be used to store desired information. Computer readable storage media can be accessed by one or more local or remote computing devices e.g. via access requests queries or other data retrieval protocols for a variety of operations with respect to the information stored by the medium.

On the other hand communications media typically embody computer readable instructions data structures program modules or other structured or unstructured data in a data signal such as a modulated data signal e.g. a carrier wave or other transport mechanism and includes any information delivery or transport media. The term modulated data signal or signals refers to a signal that has one or more of its characteristics set or changed in such a manner as to encode information in one or more signals. By way of example and not limitation communication media include wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

As mentioned the various techniques described herein may be implemented in connection with hardware or software or where appropriate with a combination of both. As used herein the terms component system and the like are likewise intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on computer and the computer can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers. Further a device can come in the form of specially designed hardware generalized hardware made specialized by the execution of software thereon that enables the hardware to perform specific function e.g. coding and or decoding software stored on a computer readable medium or a combination thereof.

The aforementioned systems have been described with respect to interaction between several components. It can be appreciated that such systems and components can include those components or specified sub components some of the specified components or sub components and or additional components and according to various permutations and combinations of the foregoing. Sub components can also be implemented as components communicatively coupled to other components rather than included within parent components hierarchical . Additionally it is to be noted that one or more components may be combined into a single component providing aggregate functionality or divided into several separate sub components and that any one or more middle layers such as a management layer may be provided to communicatively couple to such sub components in order to provide integrated functionality. Any components described herein may also interact with one or more other components not specifically described herein but generally known by those of skill in the art.

In view of the exemplary systems described above methodologies that may be implemented in accordance with the described subject matter will be better appreciated with reference to the flowcharts of the various figures. While for purposes of simplicity of explanation the methodologies are shown and described as a series of blocks it is to be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Where non sequential or branched flow is illustrated via flowchart it can be appreciated that various other branches flow paths and orders of the blocks may be implemented which achieve the same or a similar result. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

In addition to the various embodiments described herein it is to be understood that other similar embodiments can be used or modifications and additions can be made to the described embodiment s for performing the same or equivalent function of the corresponding embodiment s without deviating there from. Still further multiple processing chips or multiple devices can share the performance of one or more functions described herein and similarly storage can be effected across a plurality of devices. Accordingly the invention is not to be limited to any single embodiment but rather can be construed in breadth spirit and scope in accordance with the appended claims.

