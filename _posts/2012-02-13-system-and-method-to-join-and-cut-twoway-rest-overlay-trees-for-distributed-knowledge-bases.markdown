---

title: System and method to join and cut two-way rest overlay trees for distributed knowledge bases
abstract: System and method of event-driven synchronization of a database distributed among servers connected in a tree topology, including: transmitting, from a root server, a composition request to a first level of child servers of the root server; recursively transmitting, from each child server of a first level, a composition request to child servers at a second level, wherein the second level is lower than the first level; recursively transmitting, from each child server of the second level, a notification message to child servers at the first level, wherein the notification message comprises an identification of database fragments accessible to the child server; transmitting, from child servers at the first level, respective notification messages to the root server, wherein the root server synchronizes an availability of database fragments from the respective notification messages transmitted to the root server. Subtrees may be cut from or joined to the tree topology.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09092497&OS=09092497&RS=09092497
owner: Avaya Inc.
number: 09092497
owner_city: Basking Ridge
owner_country: US
publication_date: 20120213
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 61 540 637 filed on Sep. 29 2011 the content of which is hereby incorporated by reference in its entirety.

Embodiments of the present invention generally relate to maintaining distributed knowledge bases. More specifically embodiments of the present invention relate to a system and method for maintaining distributed knowledge bases topologically distributed as overlay trees by use of REST web services.

There is a huge amount data in enterprises that can be harvested into knowledge bases using well defined semantic web technologies including Resource Description Framework RDF and ontologies. In most cases these knowledge bases will be managed by different organizations without any central coordination. These knowledge bases will also be highly dynamic as each organization changes them frequently and independently. To address these issues there is a need for a method to transform the dynamic and complex knowledge bases into reusable knowledge services that can be easily integrated with other enterprise applications.

As the Web is becoming a communication and collaboration platform there is an acute need for an infrastructure to disseminate real time events over the Web. However such infrastructure is still seriously lacking certain capabilities because conventional distributed event based systems are not designed for the Web.

An architectural style that underlies the Web is REpresentational State Transfer REST . A web service that is compatible with REST is said to be RESTful. Event based distributed systems using REST services have been studied. Recursive REST service composition frameworks have been developed for supporting semantic based proactive search in enterprise. But those systems and frameworks do not provide Virtual Knowledge Bases VKBs for clients to select or synchronize updates to knowledge bases.

Systems to store large RDF triple stores in networked computers have been studied. However these systems are designed to support SPARQL queries not knowledge virtualization and synchronization for REST services.

As used herein the term MapReduce refers to a scalable relevance search algorithm as known to persons of skill in the art. In particular one implementation of MapReduce may be described at least in part by U.S. Pat. No. 7 650 331 to Dean et al. the entire content of which is hereby incorporated by reference in its entirety. As used herein the term Hadoop refers to an open source version of MapReduce as known to persons of skill in the art. Hadoop is a software system that supports data intensive distributed applications. Hadoop enables applications to work with thousands of nodes and petabytes of data. However MapReduce is a programming model not a REST service framework. Also MapReduce does not provide knowledge virtualization or synchronization for the map and reduce functions because the data used by MapReduce is not controlled by it.

Message Passing Interface MPI is a message passing library interface specification. MPI may provide portability and ease of use in a distributed memory communication environment in which the higher level routines and or abstractions are built upon lower level message passing routines. Scalability may be enhanced by providing vendors with a clearly defined base set of routines that they can implement efficiently or provide hardware support for. Interior nodes in a two way overlay tree can be regarded as massively parallel computers and MPI can be used for communication and synchronization between nodes. However MPI does not follow REST architectural style therefore at least some of the benefits of REST are not available.

The VKB can be managed by parallel and distributed database systems. However such an approach introduces database coupling into a distributed system that is not based on REST services. Database coupling refers to servers used by a distributed database system in particular to an additional layer of communication between the servers used by the distributed database system.

Some Peer to Peer P2P networks allow a node to join or leave the network at random. Some systems use structured P2P technologies to support distributed databases and RDF stores. However these systems are based on Distributed Hash Table DHT techniques that partition the nodes and data into the same key space such that the partition of data and the topology of the nodes is not completely independent. Furthermore the P2P protocols are not based on REST.

Thus there is a need for a system and method to maintain distributed databases for example in enterprise systems and networks using REST web services.

Embodiments in accordance with the present invention transform distributed knowledge bases into a distributed hypermedia system using REST web services because REST encourages independent development and maintenance of components and fragments in the distributed system. In addition REST supports flexibility usability simplicity efficiency scalability and extensibility.

To support decentralized and incremental development of large scale dynamic and complex knowledge based applications in enterprises where knowledge is managed by different organizations and is often changing embodiments in accordance with the present invention provide a system and method to access and synchronize distributed knowledge bases through REST services. Embodiments in accordance with the present invention transform these knowledge bases into a distributed hypermedia system using REST web services. REST web services are suitable because REST encourages independent development of components in the distributed system. In addition REST supports flexibility usability simplicity efficiency scalability and extensibility.

In some embodiments a system includes a tree structured overlay network of REST servers connected by two unidirectional links composition links and notification links. Composition links provide transparent access to distributed knowledge bases through recursive composition of replicated knowledge services. Notification links provide knowledge synchronization through events triggered by updates to knowledge bases. Together the composition links and notification links permit bidirectional i.e. two way communication. The synchronized knowledge bases enable clients to control the outcome of knowledge services and the knowledge services to avoid unnecessary compositions. A two way overlay tree can be regarded as a special case of a broker overlay network.

A prototype system was implemented and experimental studies on applications to enterprise knowledge bases were performed. Experimental results indicated that the proposed REST service method and processes are feasible and efficient.

Embodiments in accordance with the present invention may provide a system and method of event driven synchronization of a database distributed among servers connected in a tree topology the method comprising transmitting from a root server a composition request to a first level of child servers of the root server recursively transmitting from each child server of a first level a composition request to child servers at a second level wherein the second level is lower than the first level recursively transmitting from each child server of the second level a notification message to child servers at the first level wherein the notification message comprises an identification of database fragments accessible to the child server transmitting from child servers at the first level respective notification messages to the root server wherein the root server synchronizes an availability of database fragments from the respective notification messages transmitted to the root server.

Optionally the method may further include the steps of pausing a processing of update events retrieving a reference count from a root node of a subtree to add to the tree topology updating a database mapping in the root server and resuming the processing of update events.

Certain embodiments in accordance with the present invention may also include the steps of providing a delete command to child servers and updating a database mapping in a parent server.

The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to. To facilitate understanding like reference numerals have been used where possible to designate like elements common to the figures. Optional portions of the figures may be illustrated using dashed or dotted lines unless the context of usage indicates otherwise.

Large scale knowledge bases often contain billions of facts and are distributed over networked machines. Each networked machine contains a fragment of the large scale knowledge base. Different organizations in an enterprise may manage and update the networked machines independently. A problem with the management of such a large scale knowledge base is how to enable transparent and efficient access to these dynamic and distributed knowledge bases to an end user. Embodiments in accordance with the present invention provide access by use of REST services thereby achieving scalability efficiency and flexibility.

Embodiments of the present invention generally relate to maintenance of distributed knowledge bases. More specifically embodiments of the present invention relate to a system and method for querying and maintaining a distributed knowledge base based upon Representational State Transfer web services.

As used herein in connection with embodiments of the present invention the term REST refers to REpresentational State Transfer web services as described below in further detail. REST provides resource management and promotes architectural choices that include 

3 Uniform Interface all resources support a subset of a uniform interface between components namely GET PUT DELETE and POST. GET is safe and idempotent i.e. can be resubmitted if failed without corrupting resource states . PUT and DELETE are not safe but are idempotent.

4 Statelessness all requests to a resource contain all of information necessary to process the requests and the servers do not need to keep any context about the requests. Stateless servers are robust and easy to scale. Statelessness induces the properties of visibility reliability and scalability. Visibility is improved because a monitoring system does not have to look beyond a single request datum in order to determine the full nature of the request. Reliability is improved because it eases the task of recovering from partial failures. Scalability is improved because not having to store state between requests allows the server component to quickly free resources and further simplifies implementation because the server does not have to manage resource usage across requests.

5 Layering intermediate proxies between clients and servers can be used to cache data for efficiency. The layered system style allows an architecture to be composed of hierarchical layers by constraining component behavior such that each component cannot see beyond the immediate layer with which they are interacting. By restricting knowledge of the system to a single layer layering places a bound on the overall system complexity and promote substrate independence. Layers can be used to encapsulate legacy services and to protect new services from legacy clients simplifying components by moving infrequently used functionality to a shared intermediary. Intermediaries can also be used to improve system scalability by enabling load balancing of services across multiple networks and processors.

As used herein in connection with embodiments of the present invention the term RESTful refers to a web service that is compatible with REST.

As used herein in connection with embodiments of the present invention the term R Event refers to a RESTful web service framework and in particular to a RESTful web service framework which is usable to implement distributed event based systems.

As used herein the term module refers generally to a logical sequence or association of steps processes or components. For example a software module may comprise a set of associated routines or subroutines within a computer program. Alternatively a module may comprise a substantially self contained hardware device. A module may also comprise a logical set of processes irrespective of any software or hardware implementation.

Embodiments in accordance with the present invention provide a tree structured overlay network to connect the REST knowledge servers also referred to as nodes in an enterprise. A tree structure provides a single entry point for instance by way of a uniform resource indicator URI for clients and is relatively easy to extend.

The tree structure includes a parent REST server node in direct communicative contact with one or more REST server child nodes. The knowledge base is formed from an overlay of the REST tree structure. In the tree structure each REST server hosts a set of REST services. Each REST service accepts a request and returns a response by consulting available knowledge bases. The REST services in a node also interact with other services over the two way links. The composition links allow parent services to send requests to their children services e.g. in order to query the distributed database and the notification links allow the children to send event notifications to their parents e.g. to maintain a map of how the database fragments are distributed and or what database fragments are accessible to each child node including children of the child node . A large knowledge base is broken into fragments and distributed among the REST servers. As the result a knowledge service can directly access the local knowledge bases stored in local memory or disk. A large database may be distributed in this way if for instance different fragments of the database are developed or maintained by different entities. For example in an airline scheduling scenario a database fragment pertaining to equipment status may be maintained by the airline s maintenance group while a database fragment pertaining to crew availability may be maintained by a training or personnel group that tracks pilot qualifications on various aircraft and or flying times while a database fragment pertaining to available capacity may be maintained by a demand forecasting group.

Embodiments in accordance with the present invention provide transparent access to the distributed knowledge bases and a consistent view of them. Transparent access means that a knowledge service can consult a knowledge base regardless how it is distributed. A knowledge service may include a set of software tools and services to query a database thereby providing local and or remote access service to the knowledge base. A list of knowledge bases accessible from a node at any given time is referred to herein as view at that node. A consistent view presented to users tracks the knowledge bases used by each knowledge service as the knowledge bases undergo independent changes. It allows clients of these knowledge services to select appropriate knowledge bases to customize the response of a requested service in different situations. A client can contact any node in the tree. The views at that node tell the client what knowledge bases that node has so the client can select a subset of the available knowledge bases or not to use the node at all if the knowledge that the client wants is not stored there.

For example when reading a medical document a user may want an annotation service to just annotate concepts related to the medical knowledge bases. A consistent view also allows a parent service to avoid unnecessary composition link messages when its children do not have required knowledge bases.

To achieve these goals we introduce the concept of a virtual knowledge base VKB to refer to a set of knowledge bases distributed over a network which are accessible to a knowledge service at a given point of time. Transparent access to virtual knowledge bases i.e. transparent in the sense that a user does not need to know how the information is distributed is achieved through recursive composition of knowledge services replicated over the network. For efficiency a parent service sends identical service requests in parallel to its child services and combines the partial results from the children into the final response. The child services process a request recursively as its parent i.e. the child sends requests as a parent to its own children. Consistent views are achieved by event driven knowledge synchronization over notification links established by specialized REST services as described below in further detail.

The network is formed from servers interconnected in a tree topology. A root server i.e. root node is a server which is a point of interface to and from a user. Each server in the tree topology will be connected in the tree topology at a level determined by the number of links that the server is removed from the root server. For example child servers of the root server are at a first level. Servers are at a second level if they are children of servers at the first level and so forth. The root is considered the highest level and each successive level or generation beneath the root is at a lower level. A subtree is a self contained portion of the tree topology including a server and at least some child servers logically connected to the server either directly or through intermediate child servers which also are included in the subtree. The highest level server of the subtree may in the context of the subtree be referred to as a root node or a root node of the subtree. The root node of the full tree topology may also be treated as a root node of a subtree. Nodes at interior levels of the subtree may be both a child of a higher level node and a parent to a lower level node.

The tree topology may be considered to have a plurality of levels or generations that are determined by how many links separate servers at that level from the root node. For instance child nodes of a root node are at a first level and are separated from the root by one link. Child nodes are at a second level if they are children of nodes at the first level and child nodes at the second level are separated from the root by two links. The first level is considered higher than the second level. This model may be extended for additional levels.

Each server may include a processor a memory coupled to the processor a receiver transmitter transceiver and or I O interfaces. Transceiver couples the server to an internal and or external communication path such as an Ethernet connection or an RF connection. RF connection may be WiFi Bluetooth ZigBee UWB or similar technologies used for RF networking. I O interfaces couple the server to one or more optional user input output I O devices e.g. display screen keyboard mouse etc. . Memory stores data and or program instructions used by the processor. Memory may include permanent non volatile memory e.g. ROM or volatile memory e.g. RAM or rewritable memory e.g. hard drive or flash memory or any combination thereof. The program instructions when executed by the processor carry out the processes performed by the server.

Assume that a two way overlay free T includes a set of REST servers nodes T P P is a REST server that form a tree determined by the function c P C C is a child of P. Each node P contains a set of replicated REST services s P S Sis a REST service. There are two types of services 1 a management service MS which maintains event channels i.e. a communication link between two nodes such that one node can send event notifications to the other and 2 a knowledge service KS which provides knowledge to clients. The services replicated at different nodes perform the same function but their output depends on the states of those nodes. The output may depend upon the state of the node if for example one node has knowledge about Avaya from Wikipedia and another node has knowledge about Avaya from an internal database. In that situation the two nodes will tag the word Avaya differently based on their knowledge bases.

The tree T stores a set of knowledge bases K T K Kis a KB. Each knowledge base KB includes one or more fragments i.e. portions or sections of a larger knowledge base K K Kis a fragment. P S K K K K denotes the fragments of Kused by knowledge service Son node P. K P S K P S K denotes the knowledge bases used by knowledge service Son node P. In other words a knowledge service uses a knowledge base as long as the knowledge service uses one of its fragments.

To obtain the virtual knowledge base for service Son node P each node transmits composition messages to request information from its child nodes in order to calculate a function V P S recursively according to Equation 1 in which each C is a child node of node P and in which the function V P S represents a view of the virtual knowledge base of a service Son node P

For example knowledge service Son node gains access to Kand Kon nodes by recursively composing with the replicated Son those nodes. Similarly Sand Son any node have their own virtual knowledge bases. In general the virtual knowledge base of any parent service includes the virtual knowledge bases of all its child services.

Because a knowledge base is included in a virtual knowledge base as long as at least one fragment of the knowledge base is included in the virtual knowledge base we need to keep track of the remaining fragments of each knowledge base when fragments are deleted. A fragment may be deleted when for example an organization that maintains a fragment of the virtual knowledge base performs routine maintenance on fragment of the knowledge base thus taking it offline or when the knowledge base is updated to remove information in the fragment. For example deleting fragment Kfrom node in does not remove Kfrom the virtual knowledge bases in other nodes because Khas remaining fragments but deleting fragment Kin node removes Kas it is the only fragment of Kin the example of .

To support fragment deletions each node calculates a reference count function rc P S K that records the number of knowledge base fragments Kused by service Sin a tree rooted at node P. The k subscript indexes the fragments of a knowledge base as each knowledge base usually has different number of fragments. Any node in the tree can store fragments of different knowledge bases used by different services. The function can be calculated recursively according to Equation 2 in which the function represents the set of fragments of knowledge base Kj used by service Si on node P 

In an overlay tree whenever there is a change to a virtual knowledge base on any interior node i.e. a node that has a parent node Equations 1 and or 2 will be violated until the change is propagated to all the affected parent nodes. Embodiments in accordance with the present invention attempt to minimize the cost of propagating the change to the affected parent nodes which in turn should minimize the amount of time that the equations are violated. To be independent of physical computers and networks we define the cost to be the total number of messages needed to correct the violations and the number of links to deliver the corrective messages. A violation is a state of the overlay tree such that Equation 1 and or Equation 2 is not true for at least one node in the overlay tree. A violation may occur whenever a node adds or deletes a knowledge base fragment without having yet informed other relevant parent nodes in the overlay tree of the addition or deletion. The overlay tree remains in the violation state until such time that sufficient corrective messages have been exchanged among the affected parent nodes to inform them of the addition or deletion of the knowledge base fragment. Violation time is an amount of time during which a violation of Equation 1 and or Equation 2 exists in the overlay tree. It is evident the violation time is proportional to the time needed to deliver the number of corrective messages over the longest path in an overlay tree. Since the longest path in a tree is fixed and not affected by changes to virtual knowledge base embodiments in accordance with the present invention attempt to reduce or minimize the total number of corrective messages.

In order to reduce the total number of corrective messages embodiments in accordance with the present invention use an event driven approach to treat uncoordinated knowledge updates as asynchronous events. An uncoordinated knowledge updates may be for example when an organization that maintains a fragment of the virtual knowledge base performs routine maintenance on the knowledge base thus taking it offline or back online or when the knowledge base is updated to change information in the fragment. Updating the knowledge base to add or delete a knowledge base fragment causes an update event. In the absence of a fault e.g. any condition that prevents the normal program execution such as disk or network failure each update event will trigger at most one corrective message although several events may be addressed in one corrective message. Therefore the number of corrective messages is bound by the number of events. By setting up proper notification links i.e. event channels the messages will propagate along a shortest path such that the violation time for Equations 1 and 2 is reduced or minimized.

The event channels are managed by the management service hosted on special resources a directory resource a monitor resource and a listener resource. The directory resource returns the initial virtual knowledge base for each node. The monitor and listener resources are used to set up the event channels through subscription. The monitor resource accepts subscriptions and the listener resource accepts event notifications. The directory resource at node P provides the single entry point to other resources and its URI is denoted by URI P directory . Based on these resources a two way overlay tree can be created in two steps 

First an administrator configures the following values for each node P 1 c P URI C directory C is a node with c P being the set of child nodes of node P and 2 P S K for each service Son P. Then the administrator starts the nodes i.e. launches a web server in any order and each node computes the initial K P S values from the configurations.

Second the administrator uses a web browser to interact with the root node. These interactions trigger the nodes in the tree to exchange messages using one of three management service processes service discovery event subscription and event notification. The service discovery process discovers the current virtual knowledge base i.e. by calculating the V function according to Equation 1 on each node in the tree. The event subscription process establishes event channel from children to parent and the event notification process send notifications over the event channels. is a sequence diagram that illustrates with respect to the tree in a service discovery an event subscription process and an event notification process . For clarity only three nodes and an administrative web browser are shown in wherein node is a root node. The messages exchanged are numbered in as t through t.

Upon receipt of an initial message t from administrative web browser to root node REST service discovery process includes parallel and recursive GET requests initiated by root node as illustrated by message t and message t. In service discovery process the V P S and rc P S K values on the child nodes and are calculated in parallel according to Equations 1 and 2 . The values calculated by child nodes and are sent back in response message t and response message t from child nodes and respectively to the root node . Root node will combine its local values with the values returned in messages t and t. Combined values are reported back to administrative web browser by message t. Upon completion of service discovery process the initial V P S and rc P S K values for each node will have been calculated and each knowledge service will know the virtual knowledge bases of its children. For the complete tree in the equations are calculated in a bottom up fashion first for node and node then node and and finally node .

RESTful event subscription process begins with an initial message t from administrative web browser to root node . Event subscription process includes parallel and recursive PUT requests in accordance with REST services initiated by the root node via message t and message t. In process event channels from children to parents are created in a top down fashion. For example in the full topology of the event subscription process proceeds first from nodes and to node then from node to and node to . The complete event channels are shown by the dotted arrows in .

Referring again to RESTful event notification process includes POST requests and responses in accordance with REST services between child node or child node and its parent node as illustrated by messages t and t and associated acknowledgements messages t and t .

If any knowledge base additions or deletions occur before the event channels are set up those changes will be picked up by the initial discovery protocol. After the event channels are set up knowledge base additions and deletions are permitted. Adding a knowledge base Kwith c references to a set of services S triggers an event kb added S K c . For example in when two fragments of new knowledge base Kis added to Sin Node an event kb added S K 2 will be sent from node to node and then from node to node . Similarly deleting a knowledge base will trigger an event kb deleted S K c . Upon receiving the events each node will update its V P S and rc P S K values according to equations 3 and 4 .

As discussed with respect to Equations 1 and or 2 function V S represents a view of the virtual knowledge base of a service Son node P Krepresents the jth knowledge base K represents the set of all database fragments that make up K and rc is a reference count function.

Equations 1 and 2 are maintained i.e. satisfied if these equations are executed correctly by the nodes. Unexpected failures at the node e.g. disk or network failures may cause a node not to execute Equations 1 and 2 correctly. Correct execution requires that the events for equations 3 and 4 must be delivered and triggered exactly once and in the order they are generated. However events in a batch notification i.e. a notification which itself includes a list of individual notifications may be in any order as long as they are executed in one transaction. Because multiple update events may arrive at a node at the same time executions of these equations should be synchronized to avoid race conditions.

For an overlay tree of E edges also referred to herein as links the discovery process and the subscription process each results in E requests and responses. So the total number of messages required to set up the tree is 4E. Suppose the height of a tree is d i.e. number of links in a longest path the maximum network latency between nodes is Tand the maximum message processing time on the nodes is T then the maximum time during which the Equation 1 is violated is the time it takes for the update event to travel the height of the tree T d T T T. The maximum number of messages in the notification process required to correct this violation is 2d.

In a poll based approach wherein a node periodically contacts another node to learn its state changes with a poll interval of T only the discovery process is required and the total number of messages for setup is 2E. The maximum violation time 2T Tis the time it takes for the root node to get the updates from the farthest leaf node by the end of the poll interval. The total number of messages in the service discovery process required to correct the violation is 2E. Therefore in the worst case the violation time of constant poll is more than twice of the event driven approach. Similarly constant poll requires significantly more messages to correct a violation since 2E 2d for typical overlay trees.

Instead of creating a fixed two way overlay tree for the entire enterprise in one step it is more likely that the tree will be created incrementally from small trees owned by different organizations and portions of the tree may be removed for maintenance. To support these topological changes illustrates an exemplary Join process in which two separate trees of configuration are joined to produce a single tree in configuration . Conversely also illustrates an exemplary Cut process in which the single tree in configuration is cut into two separate trees of configuration . Join process and Cut process can be applied to trees that are in operation without disrupting their services or losing any update events. Furthermore processes and minimize the violation time and number of correction messages.

Referring to Join process is carried out by an administrator using a web browser to add child node as a child of parent node . The message sequence diagram of the join process illustrating messages t through t is illustrated in . A location at which to join a child node to the overlay tree may be selected based on factors such as load balancing at the nodes or distributing the knowledge base more evenly etc.

Join process embeds the service discovery process and event subscription process without recursion between a pause operation message t and message t and a resume operation message t and message t . The pause and resume operations postpone the processing of updating events received by child node until its state and event channels are obtained by parent node . Without the pause any update events to child node received between message t and message t would be lost and the violation would never be corrected.

Once parent node retrieves V C S and rc C S K at message t parent node updates V P S and rc P S K as if an event kb added S K rc C S K is triggered for every Sin C and every Kin V C S . It is evident that the values obtained by parent node at message t may be outdated if any update events arrive at child node between message t and message t. However these update events will be kept and dispatched after message t and P will be resynchronized thereafter.

For Join process the violation time is the time difference from message t to message t if there are held update events or the time difference from message t to message t if there are no held update events. The maximum number of messages to correct the violation is 8.

A prototype system was implemented using SWI Prolog with HTTP and Semantic Web libraries. The parallel service compositions were implemented based on its multithread and message queue facilities. In the following experiments all nodes were running on two computers connected by LAN a Windows 2003 Server machine with Dual Core 3.0 GHz and 2.99 GHz and 2 GM RAM and a Linux machine with 1.6 GHz CPU 4 GB RAM. To focus on communication cost and parallelism overhead a small knowledge base of 44 MB is used. The time measurements in millisecond are obtained by Prolog time 1 predicate on the root nodes for compositions and on the leaf node for notifications.

This invention chooses a tree structured overlay network to connect the REST knowledge servers nodes in an enterprise because a tree provides a single entry point URI for clients and is easy to extend. In this tree each REST server hosts a set of REST services. Each service accepts a request and returns a response by consulting available knowledge bases. The services in a node also interact with other services over the two way links. The composition links allow parent services to send requests to their children services and the notification links allow the children to send event notifications to their parents. A large knowledge base is broken into fragments and distributed among the REST servers. As the result a knowledge service can directly access the local knowledge bases through memory or disk.

A goal of this system is to provide transparent access to the distributed knowledge bases and a consistent view of them. Transparent access means that a knowledge service can consult a knowledge base regardless how it is distributed. A consistent view tracks the knowledge bases used by each knowledge service as the knowledge bases undergo independent changes. The consistent view allows clients of these knowledge services to select appropriate knowledge bases to customize the response of a requested service in different situations. For example when reading a medical document a user may want an annotation service to just annotate concepts related to the medical knowledge bases. A consistent view also allows a parent service to avoid unnecessary compositions when its children do not have required knowledge bases.

To achieve these goals embodiments in accordance with the present invention include usage of a virtual knowledge base VKB to refer to a set of knowledge bases KB distributed over a network that are accessible to a knowledge service at a given point of time. Transparent access to virtual knowledge bases is achieved through recursive composition of knowledge services replicated over the network. For efficiency a parent service sends identical service requests in parallel to its child services and combines the partial results from the children into the final response. The child services process a request recursively as its parent thus sending a request to a grandchild. Consistent views are achieved by event driven knowledge synchronization over notification links established by the REST services described herein in accordance with an embodiment of the invention. Instead of creating a fixed two way overlay tree for the entire enterprise in one step the tree is created incrementally from smaller trees owned by different organizations and portions of the tree may be removed for maintenance. To support these topological changes we introduce the Join and Cut operations and processes that can be applied to trees in operation without disrupting their services or losing any update events. Furthermore the processes reduce the violation time and number of correction messages. An update event is an event that represents updates to a knowledge bases.

Embodiments in accordance with the present invention include two tree operations and the corresponding REST REpresentational State Transfer processes join and cut to change the topology of an overlay tree that includes REST knowledge servers without disrupting the running services or losing any propagating events. These operations allow a large distributed working knowledge system to be assembled dynamically and incrementally from working subsystems and portions of the system to be removed and replaced by new subsystems. These operations are useful for creating large scale knowledge systems from federated servers owned and managed by different organizations without any central coordination.

The proposed join and cut processes allows incremental creation of large knowledge base systems. The creation process minimizes the violation time of the system invariants with minimal number of corrective messages. The join and cut processes are based on REST services that can be discovered across extended through accessed using and integrated with the Web.

At a high level of abstraction client uses message to instruct root REST server to tag i.e. to identify all text data elements etc. which are part of a knowledge base Y . REST server at step will identify all local text data elements etc. which are part of a knowledge base Y and at the essentially the same time recursively transmit the request to all of its child REST servers i.e. REST servers and . REST server at step and REST server at step will in turn identify all text data elements etc. local to the respective REST servers which are part of a knowledge base Y . This process would continue recursively for any child REST servers of REST servers and .

The query results from each REST server are passed upstream back to root REST server which merges all of the returned results and at step provides a combined view of the query of knowledge base Y.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the present invention may be devised without departing from the basic scope thereof. It is understood that various embodiments described herein may be utilized in combination with any other embodiment described without departing from the scope contained herein. Further the foregoing description is not intended to be exhaustive or to limit the present invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the present invention.

No element act or instruction used in the description of the present application should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the terms any of followed by a listing of a plurality of items and or a plurality of categories of items as used herein are intended to include any of any combination of any multiple of and or any combination of multiples of the items and or the categories of items individually or in conjunction with other items and or other categories of items.

Moreover the claims should not be read as limited to the described order or elements unless stated to that effect. In addition use of the term means in any claim is intended to invoke 35 U.S.C. 112 6 and any claim without the word means is not so intended.

