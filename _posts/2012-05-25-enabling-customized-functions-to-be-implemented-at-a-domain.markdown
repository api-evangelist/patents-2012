---

title: Enabling customized functions to be implemented at a domain
abstract: A system for enabling a customized function to be implemented at at least one device in a domain, including: a set of application programming interfaces (APIs) coupled with a system, wherein the system is coupled with a server managing a premises, wherein the system is configured for interacting with at least one third party application that has a set of instructions thereon, via the set of APIs, such that the at least one third party application can communicate with a device driver at the premises without having knowledge of a protocol thereon and without having knowledge of the at least one device, wherein the premises comprises the at least one device; and an instruction translator coupled with the set of APIs which translates the set of instructions received from the at least one third party application to be an action and protocol that the at least one device understands.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08812644&OS=08812644&RS=08812644
owner: Candi Controls, Inc.
number: 08812644
owner_city: Lafayette
owner_country: US
publication_date: 20120525
---
This application claims priority to and benefit of co pending U.S. provisional patent application Ser. No. 61 490 275 entitled Domain Management by Steve Raschke et al. filed May 26 2011 which is herein incorporated by reference in its entirety claims priority to and benefit of co pending U.S. provisional patent application Ser. No. 61 490 286 entitled Domain Communications by Mike Anderson et al. filed May 26 2011 which is herein incorporated by reference in its entirety claims priority to and benefit of co pending U.S. provisional patent application Ser. No. 61 490 294 entitled Network Operations Center by Steve Raschke et al. filed May 26 2011 which is herein incorporated by reference in its entirety claims priority to and benefit of co pending U.S. provisional patent application Ser. No. 61 490 302 entitled Building Customized Applications by Mike Anderson et al. filed May 26 2011 which is herein incorporated by reference in its entirety claims priority to and benefit of co pending U.S. provisional patent application Ser. No. 61 490 313 entitled Partnership Services by Steve Raschke et al. filed May 26 2011 which is herein incorporated by reference in its entirety and claims priority to and benefit of co pending U.S. provisional patent application Ser. No. 61 490 317 entitled Managing Device Information by Mike Anderson et al. filed May 26 2011 which are incorporated herein in their entirety by reference.

This Application is related to U.S. patent application Ser. No. 13 481 639 entitled MANAGING A DOMAIN by Steve Raschke et al. assigned to the assignee of the present invention filed May 25 2012.

This Application is related to U.S. patent application Ser. No. 13 481 647 entitled MAINTAINING A DOMAIN by Mike Anderson et al. assigned to the assignee of the present invention filed May 25 2012.

This Application is related to U.S. patent application Ser. No. 13 481 661 entitled ACHIEVING A UNIFORM DEVICE ABSTRACTION LAYER by Steve Raschke et al. assigned to the assignee of the present invention filed May 25 2012.

This Application is related to U.S. patent application Ser. No. 13 481 687 entitled TARGETING DELIVERY DATA by Steve Raschke et al. assigned to the assignee of the present invention filed May 25 2012.

This Application is related to U.S. patent application Ser. No. 13 481 701 entitled CLOUD ASSISTED NETWORK DEVICE INTEGRATION by Mike Anderson et al. assigned to the assignee of the present invention filed May 25 2012.

The drawings referred to in this description should not be understood as being drawn to scale unless specifically noted.

Reference will now be made in detail to various embodiments examples of which are illustrated in the accompanying drawings. While the subject matter will be described in conjunction with these embodiments it will be understood that they are not intended to limit the subject matter to these embodiments. On the contrary the subject matter described herein is intended to cover alternatives modifications and equivalents which may be included within the spirit and scope. Furthermore in the following description numerous specific details are set forth in order to provide a thorough understanding of the subject matter. However some embodiments may be practiced without these specific details. In other instances well known structures and components have not been described in detail as not to unnecessarily obscure aspects of the subject matter.

Herein various embodiments of a system and method for integrating a networked device within a premises are described. The description begins with a partial glossary of defined terms associated with various embodiments. Following this glossary is a brief general discussion of various embodiments associated with the cloud assisted network device integration CANDI system and the benefits thereof to consumers and service providers. This general discussion provides a framework of understanding for more particularized descriptions of features and concepts of operation associated with one or more embodiments of the described CANDI system that follows.

A subscriber is an end user of the web services of the cloud assisted network device integration CANDI system. The subscriber usually wants to control and monitor devices in a home or commercial building.

A domain is the integrated sum of devices and software applications that interoperate to provide control feedback and monitoring within a home or commercial building under a single subscriber login.

A product is an off the shelf component as delivered to the market by its manufacturer. The product is not necessarily capable of interfacing within the CANDI system.

A device is a product that the CANDI system is able to monitor and control through being characterized defined below and implemented within a domain of the CANDI system.

 Characterized refers to a product being defined to be within a specific device class able to perform specific actions. Products are classified by type or types e.g. TV Light Dimmer . The CANDI system addressable products are further uniquely identified by their particular make manufacturer and model number. Additionally every CANDI system addressable product is identified by having one or more communication port defined below .

A communication port refers to the following 1 a physical communication method e.g. infrared Z Wave ZigBee serial IP X 10 INSTEON RF and 2 a protocol running over that port. Depending on the physical communication method a port may also have field determined information e.g. address login information used for operation.

An action refers to at least one of the following a service a network and a default attribute of a set of attributes wherein the set of attributes includes but is not limited to codes and parameters. An action may be static.

A device driver is located at the premises and associates the following three product characteristics of a device 1 one or more protocols for that device 2 an implementer that implements an action and 3 a specific list of actions possible to be implemented through the device using the protocol s . A protocol may handle more actions e.g. commands than are actually supported by the implementer. Thus the device driver supports actions specific to the implementer. Over time and with new versions of implementers more actions may become available to be implemented. Actions are assigned and configured for a particular device driver.

Presently networked products of the same product type e.g. light switches but of different brands may not be controlled by a consumer and or a third party using the exact same commands and methodology. For example not every product supports the same number of actions as every other product of the same product type. Nor do similar products support the same command in the same way.

Embodiments enable various and otherwise incompatible networked products in businesses and homes to be controlled over a network using the same commands and methods. For example within a device type the CANDI system standardizes actions so that subscribers and or developers can achieve expected results from a particular action regardless of the vendor or protocol associated with the device within the device type. More particularly an interface of the CANDI system may be used to control a device type such as a set of light switches of different product brands or protocols using the same command despite these products having been manufactured by different companies.

Further embodiments provide developers with the ability to build applications that take advantage of device capabilities without having to understand the complexities or protocols associated with a particular device or the differences across multiple devices. Thus developers do not have to account for fundamental differences in device and protocol characteristics. For example when a new Light Dimmer product is added to the CANDI system database the new product is characterized such that it may be uniformly treated in the same way as existing devices in the CANDI system database.

Referring now to a block diagram of the CANDI system is shown in accordance with an embodiment. The CANDI system includes a network operations center NOC and a system including the server coupled with one or more databases . In some embodiments the server includes an application server and a server dedicated to information relating to the system operations. The NOC and the system are connected over a network e.g. Internet . The system manages device s within a domain of the premises .

The NOC functions to manage as will be described herein at least but not limited to any of the following application libraries device driver libraries product administration third party application development tools and quality control system and account administration premises communications premises system creation and editing managed services and hosted services.

The NOC also manages Web sites such as but not limited to any of the following a marketing site an eCommerce site a forum and a support site. Further corporate functionalities may also occur at the NOC such as but not limited to any of the following development and quality control CRM office functionalities collaboration accounting and human resources and IT management.

The server hosts local applications and via application services provides data to and receives commands from remote applications such as would be installed on a mobile phone. The local applications and remote applications are represented by the box application in . The server and components thereon are programmed by the NOC based on the configuration s of a device s . The NOC accesses either from a third party or the server a list of the devices on the premises . The NOC then uses its power intelligence and library to compile the device drivers and the applications or application services necessary to be accessible by the server in order to manage the devices. The NOC then downloads these necessary components to the system including the server . Once this compilation and download have occurred the NOC is no longer needed to facilitate actions to be accomplished in the domain .

The NOC and the server also exchange historic and real time information regarding diagnostics operations and support tools associated with the devices premises and external information known to the NOC .

As part of the system coupled with the premises and in association with the functioning of the CANDI system are at least the following the server one or more database a control engine transport links and an embedded platform.

Also shown in is a set of devices one or more devices having one or more computers thereon such as a mobile phone personal computer etc. that are capable of communicating with the NOC and or the server remotely. This set of devices may include but is not limited to the following a desktop computer a laptop computer a personal digital assistant a tablet a networked television and a mobile phone. A subscriber may send instructions to the NOC and or the server via the set of devices .

With regard to how a customer initially integrates a product within the CANDI system the following may occur. The customer buys the server and a CANDI compatible product at a store. Of note to be CANDI compatible a product s inherent attributes have already been characterized by the NOC thereby becoming a device such that it may be integrated within the CANDI system once installed and information about the device is downloaded onto the server at the premises .

The customer then installs this device on the premises . Next the customer goes on line and downloads information which may include a device driver which is a CANDI characterization of the device to the server . Once the information is downloaded a representation of the device may be displayed such that the customer can identify its accessible location and attributes on the server .

Additionally once the information is downloaded the device may be controlled by the server by a remote device of the set of devices and or indirectly remotely controlled by a third party or the NOC . For example third parties may access the server over the network and update and or change an application of a device via the server . Developers may easily perform these modifications because the device is already CANDI compatible and the developers do not have to know anything about the protocols associated with the device .

In another instance an electrical utility company may write its own software application such as an application for a mobile phone. This software application is configured for talking to the server . The server in turn interprets the software application s instructions and converts these instructions to represent the correct actions and the correct protocols needed to communicate with products such as the device . Thus a person may click on a mobile phone energy conservation icon an application that a third party e.g. utility company wrote which then sends a command to the server . The command is intended to instruct all devices within the premises to conserve energy. The server translates this command for the various device types instructing lights to dim and the thermostat to lower itself by a measurable number of degrees.

Thus embodiments provide a method and system enabling standards based communication and control of otherwise incompatible networked devices in businesses and homes. Further the CANDI system s unifying framework and open application APIs allow major manufacturers and service providers to quickly and easily extend their consumer services to offer the industry s most complete personalized integration of energy management entertainment security health monitoring and networked appliances.

The CANDI system also reduces the cost of on premises product installation by shifting labor intensive device configuration and personalization to a web process. Highly trained system integrators and programmers are no longer required to deploy smart appliances which reduces the time and cost of deploying premises control by 50 or more.

The CANDI system is globally deployable because it is product agnostic and platform agnostic. Product libraries application suites user accounts domain setup and product selection may all be administered on the WEB. Secure control applications are also remotely accessible by a subscriber. Additionally a small footprint gateway stack residing on premises in a partner s local router cable box or other CE product is configured automatically by the NOC for each unique domain .

Therefore through its open application interfaces and device agnostic integration and control capabilities via standard Web services the CANDI system decreases the installation costs of devices and increases a customer s choice of products brands and user interfaces.

The following discussion includes the following six sections 1 Managing a Domain 2 Achieving a Uniform Device Abstraction Layer 3 Maintaining a Domain 4 Targeting Delivery Data 5 Enabling Customized Functions to be Implemented at a Domain and 6 CANDI system . Further Section One begins with a broad description via of various component operations of the CANDI system .

As described briefly above the CANDI system includes a system for managing devices within a domain and a NOC wherein the system and the NOC are connected over and communicate via the network . The following discussion referencing provide an introduction to further functioning aspects of the CANDI system while assisting the reader to understanding the management of the domain within the larger framework of the CANDI system .

Significantly the personal computer is not required for interactions with the device . For example a user can connect via any mobile or stationary computing device application to the server in order to access the system at the premises . In this manner the user may configure the system add equipment and manage schedules and macros. Further the personal computer is also accessible using the server coupled with the local area network LAN of the NOC .

The premises is coupled with via the Internet the NOC . The NOC includes all protocol device and security integration knowledge. The NOC enables the user to configure devices create macros and schedules authorize user access and get support. Additionally once configurations are complete with code data schedules protocol interactions etc. a customized download e.g. application may be downloaded from the NOC to the system .

The server connects on occasion to the NOC to determine if the NOC has tasks for the server to download and process for example third party system alerts managing NOC configuration getting the latest control scripts streaming e.g. video audio photos and remote access. The server handles security interactions between protocols and has locked and unlocked modes for security. The server also handles device initiated events which can trigger configured actions e.g. macros device actions and the execution of macros and scheduled events. The server may be resident on various forms of hardware e.g. stand alone box router cable set top box . The server s connection to the NOC is established through an outbound HTTP based polling process so that no domain router firewall changes are required on the premises for the system to operate.

The web service interface is an interface that is used by all applications CANDI configured to communicate with the device s . The device driver is a protocol specific device driver that understands how to talk to the hardware the protocols specific hardware . The device driver is downloaded to the system via the NOC when needed.

The hardware may be built into the server or may be a pluggable or a network addressed attachment e.g. USB RS 232 Ethernet .

The one or more databases provide file storage for the server for such items as server files e.g. control scripts macros schedules device data repository e.g. camera snap shots web pages for home management pages created by the homeowner and CANDI system configured applications.

With reference now to coupled with the server are but not limited to the following entities and or services factory partner services public WEB operations and data services .

Services associated with the factory include at least any of the following ability to configure device information e.g. name location ID ability to configure application information e.g. images device locations and creating and managing scenes and macros.

Services associated with the partner services include at least any of the following event e.g. demand message management export reports such as usage data alarms about usage and other events NOC administrative and operational services creation of groups of domains and device unavailability alarms.

Services associated with the operations include at least any of the following drop ship pre configured devices to domains and automatically discovering of device configuration information.

Services associated with the data services include at least any of the following demand response events and tracking weather by domain location resource usage rates real time events setup and triggering real time messages creation and queuing and message transmittal e.g. to email SMS twitter applications .

Coupled with the server is the application s . The application s can either be hosted locally on the server or natively on a computer such as a mobile device or laptop. In regard to the application HTTP or HTTPS is used to transmit communications between the application and the server . A login is optionally required for such communication. In one embodiment there is a REST JSON interface for all requests through which commands and data retrieval requests to from devices are normalized for ease of use by the application e.g. all device type Lights regardless of make model or protocol are addressed by the application through an identical POWER ON POWER OFF command presented by the REST JSON interface .

With regard to the relationship between the server and application the server has sync capabilities over HTTPS and is enabled to be coupled with various hardware . The server can perform device action management and subscription management the application gets notified when the action changes on the device via the device driver and associated hardware . Metered data from actions and reports from the device and usage of the application is archived.

The syncing capabilities occur via Ethernet based packets including HTTP HTTPS and UDP. They include but are not limited to the following device configuration changes e.g. names scenes ids adding and removing devices on demand events and messages updating the system with new versions of software archiving local data to the NOC archiving polling device data to the NOC server address information including local and WAN IP and host hardware MAC ID downloading new local application code and supporting files creating a local configuration file which contains all current device and domain information for local use by applications and data services deliveries.

With reference now to first the configuration applications run on the server using a database that is already CANDI system configured . Once all the configuration applications have been run on the server then the server talks to the system and downloads all appropriate information drivers for the system to coordinate with the application for the purposes of controlling and monitoring the domain and its associated devices . The application that was configured by the server makes a request of a control operation to be performed. If when the web service interface accepts this request the request is written to the one or more databases . A device driver polls the database frequently for new requests and acts on these requests as appropriate. In one embodiment the device driver may be a Z Wave device driver and the hardware coupled therewith may be a Z Wave radio transceiver. In one embodiment a device driver detects a monitored event from a device via the hardware and writes the event to the one or more databases . A scheduler is always monitoring the one or more databases for scheduled timed events and the occurrence of real time events. The scheduler in one embodiment runs strings of predetermined requests macros as appropriate e.g. from events schedules or users .

The system data of the system is data having at least any of the following characteristics that data which is needed for the system to work queryable by applications for the current web environment web service queryable data e.g. device ID name type of device brand model available actions and system use data e.g. control scripts protocol driver information user login information .

The application data is that data having at least any of the following characteristics application data that is served up by the server type of computer hosting the application application usage information such as web analytics user screen layouts and page configurations and user information.

The one or more databases coupled with the server may be at least any of the following a database holding application information a database holding current domain configurations and a data base holding device information. Of note all information may be held by one database at the server or by more than one database at the server .

The database holding application information holds information such as but not limited to user screen layouts and information about how the application is intended to work. The database holding current domain configurations holds information such as but not limited to the current configuration for every premises devices macros users and a copy of the data associated with the system . The database holding device information holds information such as but not limited to all the devices that are supportable in the system and models and scripts.

If the server already exists in the premises then at the user selects the server . Once the server is selected then at a JOIN command is sent from the NOC to the server . At the server receives the JOIN request and goes into the JOIN mode. Further the server returns a confirmation of the JOIN mode. At the server accepts the new device JOIN. At the server uploads the new device information to the NOC . At the NOC receives and saves the uploaded new device information. The server at updates the one or more databases . As an alternative after the sending of the JOIN command is ordered at at the user is told to press a button on the device to join. If the user wishes to remove a device from the domain then instead of the JOIN command being sent at a REMOVE command is sent at . At pre install devices are flagged.

At the server s configuration information is sent to the NOC . Of note the following additional characteristics of the server s configuration are known at this step server s unique identifier within the NOC the server s local and remote IP address. Also at it is possible that the server is auto selected for the user since the server is known.

At the user selects the device that he she wishes to add to the domain. At a new server configuration file is downloaded. At the server receives the server configuration file. At the server is ready to integrate the new devices. Of note the following additional characteristics of the configuration are known at this step the type make and model and associated required device drivers and required hardware if any of the new device s .

When a triggered event occurs for a device whether polled or real the event triggers a macro. The macro is run at the Prime server server C . The application finds the server C on the LAN in the following manner the browser points to userDefinedUniqueName.candicontrols.com appName and the DNS managed by the NOC returns the IP address for the device C the Prime device and the application starts running.

In the example given in the application runs the macro that turns off all lights. In regards to the macro the macro is set up in the NOC the macro is ready to run on the device C prime device zPrime the application sends RUN MACRO to zPrime the zPrime executes the macro and the zPrime for the macro sends the command for each action to each responsible server. Thus when the application requests that light B be turned off the zPrime sends the request to the server B to turn off the device A. With respect to the zPrime server the scheduler runs at this server only macros are supported here only applications are supported here only and action requests application macro to run actions on other server managed devices are sent to that server.

The above discussion with reference to provides a framework for understanding for the following description of embodiments.

The system of includes a system see for managing a domain as will be described with reference to below. show block diagrams of a system for managing a domain in a premises wherein the domain includes at least one device A B and C hereinafter referred to as device unless specifically noted otherwise configured for providing an action according to embodiments. The system and components thereof includes a server e.g. analogous to the server of thereon and is configured to perform the function of the system on a small footprint computing device e.g. router cable TV box at least one device in the domain .

The system is bought at a store along with a device and a piece of hardware. The buyer retrieves on line downloaded information about the device . The system informs the buyer of the location within the system at which the device is accessible. The software that is seen on the computer associated with the device may be branded by the provider of the device hardware.

The system includes an action identifier a device driver determiner a comparer and a device driver implementer . In further embodiments the system optionally includes a gateway module a data tracker a data sender a device searching module and a device notifier .

The action identifier identifies an action to be mapped to a device such as device B of the at least one device wherein the device includes a communication port that supports a first protocol . Of note according to embodiments actions are supported by device drivers that are specific to the system . However device drivers may be designed to support more actions than the current version of the system is able to implement. For example a newer version of the system installed on the server may support the actions that are already supported by installed device drivers. Further in embodiments actions are standardized so that expected results can be achieved from a particular action regardless of the vendor or protocol.

As shown in devices A and C includes communication ports A and C respectively. Communication ports A B and C will hereinafter be referred to as communication port unless specifically noted otherwise. Also communication ports A B and C include first protocols A B and C hereinafter referred to as first protocol unless specifically noted otherwise . As will be explained in further detail below the communication port supports the first protocol of the device .

In embodiments the communication ports A B and C are configured to communicate via physical communication methods A B and C respectively hereinafter referred to as communication method unless noted otherwise only communication method B is shown in . This communication method may be any of but not limited to the following infrared z wave Zigbee serial IP X 10 RF Ethernet and USB.

In one embodiment the physical communication method is coupled with a legacy device C in this instance such that the legacy device C is compatible with a functioning of the system .

For example but not limited to such example a third party may connect via the network to the server . The third party requests that its developed third party application be run on device B within the domain . Once receiving this request the action identifier of the system identifies the action s associated with the third party application that is requested to be run on the device B.

Next the device driver determiner determines a device driver for example that supports a second protocol wherein the second protocol supports the action that was identified. For example the device driver determiner determines what device driver located at the premises if any that includes the protocol which will support the functioning of the action associated with running the third party application on the device B. Device drivers are coupled with devices such as device and are built specifically for a supporting a protocol of n number of actions such as action .

The comparer compares the second protocol with a domain configuration store of a database . The domain configuration store includes device configuration information for the at least one device and more specifically for device B. The device configuration information includes information regarding the devices such as what protocols are supported by the communication ports disposed thereon. In the example given regarding the third party application being requested to be run on the device B the comparer determines if the first protocol B corresponds to the second protocol supported by the device driver . The term corresponds refers to a matching or a substantially matching circumstance in which the first protocol B is the same or substantially the same as the second protocol such that the action may be performed since the device B is supported by an appropriate device driver . Thus without a device driver that is able to support the requested actions to be run on the device B it would not be possible for the third party application to be run on the device B.

The device driver implementer implements the device driver when the first protocol corresponds to the second protocol such that the action is enabled for performance. In other words if it is found that the first protocol and the second protocol of the device driver at least substantially match in terms of performing the action that was identified then the device driver is implemented. The term implemented refers to the designation that an action is directed to be performed using the device driver . Thus once it is determined that the first protocol B of the device B corresponds to the second protocol of the device driver then the device driver is implemented such that the action s relating to running the third party application may be performed.

Thus embodiments automatically map the actions requested to be performed to a device that is capable of supporting the actions by discovering device drivers that also support a protocol supported on a communication port of that device.

Domain is identified by a unique combination of subscriber name and domain address. Devices within the domain can be populated and edited on the site in real time. Domain configurations are saved to the domain configuration store as device configuration information . Devices are validated and auto mapped within the domain . The local application is recompiled and synchronized to the domain s universal bridge.

In the system a manufacturer s product which is desired to become a device located at the premises is characterized and implemented to become a device . Examples are end point control products e.g. light dimmer DLNA TV and protocol bridges e.g. Global Cache IP to Infrared Bridge or the server . The manufacturer s product is further uniquely characterized by their particular manufacturer Make and Model number.

Every CANDI system addressable product is further characterized with one or more communication ports which are defined by their physical communication method e.g. infrared z wave Zigbee serial IP X 10 RF etc. and by a protocol running over that communication port . Once a communication port and protocol have been defined for a device the system or third party device driver developers determine whether that communication port requires field determined information concerning its configuration. For example if a device has a communication port with a z wave physical communication method then the device driver must include a data field for the individual z wave node address on that communication port . A single communication port may require more than one port data filed such as both address and login information.

Based on the protocol that is supported on the communication port the system maps the action s supportable by the device by discovering device drivers such as device driver that also support that protocol presuming a device driver implementer is coupled with the server .

In one embodiment the gateway module coupled with the server manages an application . Of note while the application is shown to be residing on and native to the server it should be appreciated that the application may be downloaded and be running on devices such as phones computers etc. that may be located on the premises or be remote from the premises and are able to communicate with the server . Thus the application need not be served from the server but from a device remote from the server . The downloaded application controls the at least one device . The downloaded application has access to the system in order to control the devices by via the gateway module calling handling macros polling for device status accessing historic data etc.

In one embodiment the data tracker coupled with the server tracks data associated with the at least one device . For example in one embodiment the data tracker tracks diagnostic information for every device such as but not limited to communications routing the hops between the server and the device the radio strength and communication attempts and failures. This diagnostic information is uploaded and stored in the database of NOC for aggregation and presentation of metrics through the NOC software. In another embodiment the data tracker performs any of the following tracks every request made which user made a request and when the request occurred. Essentially the data tracker tracks and reports different kinds of data for different devices and needs.

In one example for energy management logs are kept on the system for between 15 minute and up to 2 months. Data beyond that is archived at the NOC . The storage location is transparent to the system although the retrieval time will be a little longer for data retrieved from the NOC .

In one embodiment the data sender coupled with the data tracker sends tracked data to a remote location . This remote location may be the NOC or a component coupled with the NOC such as the remote server. Hereafter the remote server is denoted to be server residing on the NOC . This tracked data is stored at the NOC in a database or a component coupled with the NOC for aggregation and presentation of metrics via the NOC software.

In one embodiment the device searching module coupled with the server discovers a device such as device B of the at least one device on the premises . For example when a new device is added to the premises then the device searching module discovers that this new device exists. In one embodiment the device notifier coupled with the device searching module notifies a subscriber of the discovered device B.

In one embodiment the system automates the control of different devices with different protocols . The automating of the control of the different devices is different from talking to different devices. For example the energy consumption levels for a premises may be adjusted by applying internal and external characteristics to heating cooling and lighting systems within the premises . This process may be termed to be environmentally driven hysteresis . Thus the system tailors an environment to a person. For example when it is very cold outside and one walks into a house premises the house feels warmer than it really is. The system provides for an action in anticipation of this feeling and turns the heat down in the house. This functioning provides significant energy savings.

Furthermore device drivers such as device driver may be populated and edited via a proprietary web site in real time.

In one embodiment the system pre categorizes content across all available sources. The order of the pre categorized content is by hierarchy instead of location. In contrast the current method by which DLNA compatible devices reveal media content is by location. Libraries of content within a network are organized by device location and not by the content e.g. music itself.

At in one embodiment and as described herein the method includes identifying an action to be mapped to a device such as device B of the at least one device wherein the device B includes a communication port B that supports a first protocol .

At in one embodiment and as described herein the method includes determining a device driver such as device driver which supports a second protocol wherein the second protocol supports the action .

At in one embodiment and as described herein the method includes comparing the second protocol with a domain configuration store wherein the domain configuration store includes device configuration information for the at least one device .

At in one embodiment and as described herein the method includes based on the comparing at implementing the device driver when the first protocol B corresponds to the second protocol thereby enabling the action for performance.

At in one embodiment the method includes populating the at least one device editing the at least one device and tracking data for the at least one device wherein the tracked data includes device configuration information and usage data. It should be appreciated that the populating editing and tracking denoted at may be performed separately in one embodiment and in various combinations in other embodiments.

By populating it is meant that the system updates and or edits the application associated with the at least one device . In another embodiment the at least one device is enabled to be populated manually by a user. In one embodiment the at least one device is enabled to be edited manually by a user. Additionally the following data may be tracked diagnostic information a request made by the user which user made the request and when the request occurred. The tracking of diagnostic information for the at least one device includes communications routing hops between the server and the device radio strength and communication attempts and failures.

At in one embodiment and as described herein the step further includes uploading the tracked data to a remote location . It is discussed herein that the remote location is the server of at least .

At in one embodiment and as described herein the method further includes reporting data for the at least one device . The reporting may be provided locally at the premises or to a remote location e.g. NOC .

At in one embodiment and as described herein the method further includes actuating the action based on one of a user input and at least one predetermined condition. For example the device B may be adjusted by the system to be a predetermined condition e.g. energy saving instructions given to a thermostat such that the thermostat lowers itself . The user input is an input given to the system directly or indirectly by a user.

At in one embodiment and as described herein the method further includes presenting pre categorized content from available source by hierarchy wherein the available sources reside within an accessible network.

As discussed above the CANDI system includes a system for managing devices within the domain and the NOC . The NOC interacts with the system of the system to achieve a uniform device abstraction layer. The uniform device abstraction layer in one example enables a third party developer to develop applications to be run on at least one device in the domain without needing to know anything about the device or the protocol on the device driver associated with the device.

The device class determiner establishes a device class See device classes A B and C located at the database hereinafter device class unless noted otherwise . for at least one device residing in a domain of the premises . The device class refers to a device that would fit within a type of devices such as a light dimmer in a device class lights incorporating all light related products from various companies or a thermostat from Company A in a thermostat class thermostats incorporating all thermostat products from various companies. For example when the system adds a new Light Dimmer product to its local database it is added with planning and precision so that it is uniformly treated the same as existing products in the database .

Other possible device classes may be but are not limited to the following list energy monitors light dimmers and switches plug in modules electrical infrastructure solar systems smart grid security systems cameras health products control systems door locks window coverings audio video components appliances network and bridges and communications and services.

Based on the establishing of a device class an action is enabled to be mapped to the device such as device B thereby enabling an application to be built and run on the device B wherein the application utilizes a capability of the device B.

As explained herein the at least one device resides in a domain of a premises . The domain is coupled with the remote server . A device such as device B of the at least one device includes the communication port B that supports a first protocol B that corresponds to the second protocol . The second protocol is supported by a device driver such as device driver which is also coupled with the domain .

The CANDI system including the system achieves the uniform device abstraction in the following four dissimilar cases 1 similar devices in a domain may operate with different protocol versions and therefore different actions. For example a General Electric z wave light that is 2 years old supports a z wave version 1.0 while a newer General Electric z wave light in the same domain supports a z wave version 2.0 2 different devices may implement different actions over the same protocol. For example a General Electric z wave light dimmer supports data subscriptions but Lutron s z wave light dimmer does not support subscriptions 3 across all CANDI system domains there exist different versions of device drivers supported for the same products. For example the Tivo Device Driver at Bob s house is a CANDI system version 1.0 but at Steve s house it has been updated to version 2.0. Both versions are running on the same bridge hardware and 4 enables uniformity in the case of a new product being available and the CANDI system has the device driver but the subscriber may have an older version of the server that does not support the newest device driver. The database would not allow the newest product to be added to that subscriber s domain until the subscriber upgrades his her firmware or bridge. For example Silver Spring s electric meter requires a USB key to access its data log but the subscriber s bridge does not have a USB port.

Further embodiments provide for uniform remote provisioning of web based services generically across the CANDI system so that schedules scenes macros backups online configuration etc. are all available easily to the developer regardless of their device protocol control platform or application choices. The CANDI system is agnostic about integrating web services.

The threshold notifier is coupled with the server and notifies an entity when a threshold is achieved. An entity may be the subscriber or a third party connected to the system . Thus based on internally and or externally performed data analysis a notification is provided by the threshold notifier to an appropriate entity when a threshold is met and or exceeded.

The updated information requester is coupled with the server and requests updated information from the remote server . This updated information may include but is not limited to new devices available at the premises and ongoing information gathered from monitoring the domain .

The data receiver is coupled with the server and receives data from an external source. The external source is from an entity external to the system . The data storer is coupled with the data receiver and stores the data in the database that is coupled with the server .

The data comparer is coupled with the server and compares received data with the database . The data set determiner is coupled with the data comparer and determines a set of data that meets a predetermined condition based on the comparing of the data comparer . For example after receiving information of a particular device and a competing device a determination and comparison is made as to the energy efficiency of each device compared to each other. In another example the system compares the total or partial energy usage of neighbors of a subscriber with the subscriber assuming the neighbors are also subscribers to the CANDI system .

The history reporter is coupled with the server and reports a history of received data. For example the history reporter provides a history of a particular event s occurring at one or more servers applications etc.

The trend projector is coupled with the server and projects a future trend on received data. For instance in regard to time use rates the trend projector calculates and displays a customer s current rate and projects for the future based on the customer s historical usage at the moment when that customer will reach the next tier given a tiered system of energy use corresponding to a dollar amount . In another example in regard to predictive rate reduction the trend projector projects a rate to occur at the end of a billing cycle. In some situations the season and rate program for that particular customer must be accessed. Additionally input from the utility side is also needed.

The recommendation generator is coupled with the device class determiner and generates a recommendation for a subscriber based on data stored in the database wherein the database is coupled with the server . In one embodiment the recommendation generator includes the data analyzer that analyzes the data stored in the database . For example after receiving data including device information energy usage usage of appliances house temperature seasonal temperature the age of a refrigerator etc. the system sends a recommendation to the subscriber to Turn down the temperature on your refrigerator . The data stored in the database in one instance is that received data gathered from devices monitored and the customer s use of the device s monitored. In another example the recommendation generator recommends alternating the use of two or more devices in certain situations in order to extend the life of at least one of the devices.

The action initiator is coupled with the server and initiates an action to achieve a predetermined criteria. The action initiator may take a predetermined action based on an occurrence associated with a monitored device and or the customer s use of that device. For example the action initiator initiates an action having the intent of meeting a predetermined budget such as directing a thermostat to be lowered to reach the dollar amount allotted for heat for that particular billing cycle.

The subscriber data receiver is coupled with the server and receives data associated with different subscribers actions. The action comparor is coupled with the subscriber data receiver and compares the different subscribers actions with each other based on the received data. The received data is placed in the database thereby expanding the amount of information within the database .

In another embodiment a subscriber grouper is coupled with the subscriber data receiver and groups subscribers based on the received data. In this manner the system is able to analyze data and send massages regarding a certain bit of data. Having large numbers of subscribers enables the collection of large amounts of data. Being able to group similar data and send messages associated with the data enables greater advertising and revenue making possibilities.

In yet another embodiment the subscriber manager is coupled with the subscriber data receiver and utilizes received data for managing at least one subscriber.

The web service accessor is coupled with the server and accesses a web service that requires a permission for such access. The subscriber information comparor is coupled with the web service accessor and compares the subscriber s information with information associated with at least one third party. For example the web service accessor uses the local and regional information from a web service which requires the permission of system to view to make comparisons between a subscriber s energy usage and another s energy usage in various areas of the state.

The registration processor is coupled with the server and processes registration of the at least one subscriber. Registration of a subscriber may occur at a URL directed to the CANDI system or portions thereof such as but not limited to system .

A subscriber s account is handled through a secure database with username password login and administrative oversight of permissions and other factors. Subscribers are tracked by unique IDs which reference their personal contact and other information. An administrative level user logs into the CANDI system or a portion thereof and verifies creates or deletes a subscriber and the domains e.g. homes buildings associated with the subscriber. The database is then updated with the edited subscriptions.

The secure subscriber tunnel initiator is coupled with the server and in response to a request from a subscriber to the server to remotely access the premises negotiates between the server and the server a subscriber communication tunnel such that the subscriber can securely remotely and directly connect to the server and have access to the premises . In one embodiment the communication tunnel is secure. In another embodiment the communication tunnel requires registration with the system .

The third party tunnel initiator is coupled with the server and sends data to the application from a third party. In one embodiment the data sent to the application includes messages such as those described herein.

The device discovery module is coupled with the server and automatically discovers a device of the at least one device at the premises .

As previously discussed the system functions in part to manage products devices domains and subscribers. The system manages these components of the CANDI system through in part product device domain and subscriber database administration tables. Below is an illustration of tables and relationships thereof used to manage the components.

Examples of table naming conventions are the following 1 original tbl name INFO and 2 TBLMAP table12 table 2.

With regard to original tbl name INFO Many tables have an associated table in the format of original tbl name info. These are extended information tables for the main table. For example The TBLDEVICE table has a TBLDEVICE INFO table. In the TBLDEVICE INFO table we can track things that are specific to this particular device like for the CWD application we track the location of lights on the floor plan in this table .

The INFO tables have three main parts an INFO TYPE LCD a TEXT column and a VALUE column. These fields can be used for anything the application desires. The INFO TUPE LCD is a mnemonic that identifies which kind of data is stored in this INFO record. Light layout for CWD Example i INFO TYPE LCD IT APPLICATION ii TEXT CANDI IPHONE APP Floor Plan Position and iii VALUE X Y.

Tables that have INFO associated tables include TBLPRODUCT TBLDEVICE TBLPROTOCOL TBLMAPPEDPRODUCT PORT TBLPRODUCT DRIVER TBLHOME TBLUSER etc.

With regard to TBLMAP table1 2 table 2 To support many to many relationships between tables system contains a mapping table. It has keys into both main tables 1 and 2 . For example TBLMAPPRODUCT2 PROTOCOL maps the TBL PRODUCT table to the TBL PROTOCOL table. It has its own unique key and the PRODUCT CD and a PROTOCOL CD as 2keys.

Some database naming conventions and definitions include i Product TBLPRODUCT an artifact that has been created by someone or some process ii Product Port TBLPRODUCT PORT A port on a product iii Protocol TBLPROTOCOL rules determining the format and transmission of data iv Product Driver TBLPRODUCT DRIVER Actions implementable on the product and v Product type TBLPRODUCT TYPE Categories of products lights cameras bridges etc. .

The system is coupled with the database which also includes libraries available to end users and third party developers such as but not limited to web applications native applications third party control applications and device drivers. The third party control applications include multiple levels of tools for third parties such as corporate customers and their partners as well as the general public to create both web apps and native apps. The device drivers as already explained herein are characterized to be a device within the domain .

The system also in one embodiment functions to manage services including but not limited to real time database populating the database in real time monitoring dashboard alerts and reports a help deck and ticketing a diagnostics database customizing reporting and displaying of product performance metrics in order to provide ratings and feedback to customers and subscribers and hosted servers at a colocation provider on the internet backbone the co location at which the domain and mail servers are hosted .

Additionally regarding the URL specifically directed to web site for the CANDI system and portions thereof such as system the web site has at least four core components 1 subscriber and domain interfaces 2 marketing brand and messaging pages 3 E commerce subscribers can buy hardware and software products to populate their domains and 4 customer support such as user and developer forums FAQs and a problem resolution logic tree.

At in one embodiment and as described herein the method includes automatically establishing a device class for the at least one device residing in the domain of the premises wherein the domain is coupled with the server and a device such as the device B of the at least one device includes a communication port B that supports a first protocol B corresponding to the second protocol . The second protocol is supported by the device driver coupled with the domain . In various embodiments the establishing of the device class at includes any of the following automatically establishing the device class manually establishing the device class establishing a device class for similar devices in the domain that operates with different protocol versions and different actions establishing a device class for different devices implementing different actions over a same protocol establishing a device class across all domains for different versions of device drivers supported for the same products establishing a device class for an available new product when a subscriber has an older version of the server that is coupled with the domain wherein the older version of the server does not support an updated device driver.

At in one embodiment and as described herein the method includes based on the establishing of the device class at enabling a mapping of at least one action to the device B thereby enabling an application such as application to run on and utilize a capability of the device B. In one embodiment the enabling of of a mapping of an action to a device B includes enabling integrating of web based services within the application .

At in one embodiment and as described herein the method further includes based on the establishing of the device class at enabling multiple applications to be built uniformly using the mapping of the at least one action .

At in one embodiment and as described herein the method further includes based on performed data analysis notifying an entity when a threshold is achieved.

In one embodiment and as described herein the method further includes requesting updated information from the server .

At in one embodiment and as described herein the method further includes receiving data from an external source. At in one embodiment and as described herein the method at further includes storing the data in the database that is coupled with the server . At in one embodiment and as described herein the method at further includes comparing received data with the database and based on the comparing determining a set of data that meets a predetermined criteria. At in one embodiment and as described herein the method at further includes reporting a history of received data. At in one embodiment and as described herein the method at further includes based on the received data projecting a future trend.

At in one embodiment and as described herein the method further includes based on data stored in the database coupled with the server generating a recommendation for a subscriber . At in one embodiment and as described herein the generating at of the recommendation includes analyzing the data stored in the database .

At in one embodiment and as described herein the method further includes initiating an action to achieve a predetermined condition.

At in one embodiment and as described herein the method further includes receiving data associated with different subscribers actions and based on received data comparing the different subscribers actions with each other. At in one embodiment and as described herein the method further includes receiving data associated with different subscribers actions and based on the received data grouping subscribers.

At in one embodiment and as described herein the method further includes accessing a web service requiring a permission and comparing the subscribers information with information associated with at least one third party.

In one embodiment and as described herein the method further includes processing registration of at least one subscriber . At in one embodiment and as described herein the method further includes receiving data associated with at least one subscriber and managing the at least one subscriber .

As discussed above the NOC interacts with the system of the system to achieve a uniform device abstraction layer. This interaction is accomplished through a communication method and system having specific functionalities. For example the communication method and system functions to maintain and update a domain through such operations as but not limited to the following as will be described below sync management a cloud mirror security management transport links remote editing compiling and uploading control system application software and reporting by the system to the NOC .

With reference now to in one embodiment and as will be described herein the system includes the following an instruction receiver a secure connection establisher a data exchange module and an updating module . The system in various embodiments optionally includes any of the following a preload file creator a device driver manager which optionally includes a device driver adder and a device driver remover a code downloader an update indicator a task instructor a mirror image provider and a device modifier .

The instruction receiver is coupled with the server . The instruction receiver receives a set of instructions relating to managing the domain . The set of instructions includes a complete set of instructions associated with the managing of a configuration of the domain such that the domain functions according to the complete set of instructions without any further communication necessary between the server with the server until a change in the domain occurs. The set of instructions may be but is not limited to being application updates third party instructions regarding a device and device configuration information.

The change that occurs in the domain will require an update to the server and components coupled therewith. For example a change may occur if a subscriber adds a new CANDI enabled device onto the premises . The system will recognize the presence of a new device. The system will communicate with the NOC including system to provide information to the cloud about the new device.

In one embodiment in response to being provided this information the system may send device configuration information to the system for the newly added device. Device configuration information is information that the NOC including system has access to with regard to a particular device s individualized operational needs capabilities as well as predetermined operating instructions instructions directing the particular device to use its capabilities in a predetermined manner .

However in another embodiment and as will be described in more detail below in Section IV a third party developer may contact the CANDI system including the system to transfer to the system an update for example to an application that resides on the system . The system will address the third party developer s request that an application controlling the at least one device be updated by pushing the updates to the system of the system for the update to be performed.

As described herein the domain includes at least one device wherein a device B of the at least one device includes the communication port B that supports the first protocol B corresponding to the second protocol wherein the second protocol is supported by the device driver that is coupled with the domain. .

The secure connection establisher is coupled with the instruction receiver and establishes a secure connection between the server and the server .

The data exchange module is coupled with the secure connection establisher . The data exchange module exchanges device configuration information between the server and the server .

The updating module is coupled with the data exchange module . The updating module updates an application residing on at least one of the server and a computing device e.g. mobile phone personal computer etc. that is separate not residing on the server from the server and updating device configuration information stored on a first database hereinafter database coupled with the server . In one embodiment the updating module updates a second database hereinafter database that is coupled with the server .

In one embodiment the system performs sync management to maintain an updated domain in the premises . For example usage data is pushed from the server of the system to the server of the system . When a user such as a subscriber makes changes to the domain or more broadly to the premises a sync is performed to push the changes into the premises as it applies to the at least one device of the domain .

To perform the sync and as described above the secure connection establisher creates a secure connection between the server and the server . The data exchange module in one embodiment uploads device configuration information such as but not limited to all device log data diagnostics and activity logs from the server coupled with the system to the server for archiving. Based on this uploaded device configuration information the updating module updates applications coupled with the system as needed. This updating includes but is not limited to the following as described below adding or removing specific device drivers due to changes in devices updating the database coupled with the system downloading to the system via the server the latest device configuration information creating local application preload files and updating system served client applications such as application .

In one embodiment diagnostic information and request information tracked by the system is uploaded during the sync process and is stored in the database coupled with the system such that metrics may be aggregated and presented through various components coupled with the NOC .

Another description of the process of syncing is as follows. After a user such as subscriber makes changes to the at least one device in the domain as well as scenes on the website associated with the CANDI system the system syncs the new data occurring in the NOC with the system coupled with server associated with the domain . The instruction receiver receives a set of instructions relating to managing the domain . This set of instructions includes a predetermined instruction based on a recognized pattern. For example when the user makes changes at the website associated with the CANDI system the instruction receiver of the system detects and understands these changes to be a set of instructions following which a secure connection establisher a data exchange module and an updating module operates as described above.

For example a domain sync transaction is initiated by a wizard or by prompts from the web site to the user through the secure connection establisher . During the domain sync transaction the current domain configuration is checked for completeness via the data exchange module . If the domain configuration is found to be complete after exchanging information between the server and the server then the current domain configuration of the domain is archived stored to the database . In one embodiment device data is updated in the database . Current diagnostics from the domain and the system are uploaded to the system . The system in one embodiment compiles the necessary drivers in progress and applications for downloading to the system at the server .

In yet one more embodiment new code is downloaded to the system . The user in one instance in then informed of a successful update to the user s domain .

In yet another embodiment the system is polled by the system through the server periodically e.g. every five seconds to ask if there is any work to be performed. Work can be anything from a sync request due to changes by the user to a device action request. Types of work which the system may request of the system to perform include but are not limited to the following sync the database or applications coupled with the system with the system of the NOC execute a device action upload diagnostic data to the system download notification to the system e.g. utility demand response notification upload stored data for archiving to the system e.g. power meter hourly metered data or video cache from local cameras indicating alarms to push to the system requesting archived or partner services data from the system for use in applications associated with the domain and updating firmware of the system .

The task instructor is coupled with the server and instructs by the server the server to have a task e.g. work performed. Once the task instruction is sent to the system and performed the polling resumes. Of note in communications between the server and the server to overcome any challenges with port forwarding through firewalls and routers on the premises the server runs an algorithm that instigates a poll of the server using SSL over port . This obviates the need to change firewall settings on the premises . For example on a periodic configured bases e.g. defaulting to every 5 seconds the system receives an HTTPS request from the system via the servers and . The system authenticates the specific server and checks its database for any work to be performed. If the system has work for the system then the system returns an appropriate command back to the system . If there is not work to do as may be the case then the system does not respond to the polling of the system .

The preload file creator is coupled with the server and creates preload files for the application . The device driver manager is coupled with the server and adds and or removes a device driver to accommodate a change made to the domain . In one embodiment the device driver manager includes any of the following a device driver adder and a device driver remover . The device driver adder is coupled with the server and adds a device driver such as device driver to accommodate a change made to the domain . The device driver remover is coupled with the server and removes a device driver such as device driver to accommodate a change made to the domain . The code downloader is coupled with the server and downloads code to the server . In one embodiment the application for a device such as device is determined and compiled in the system . The compressed footprint of the application is downloaded to the system . All of the compression is done at the system . In one instance the application is downloaded from the system into the server and the application is served from the server . Significantly the server enables immediate accessibility because the server works even when the server at the system does not. In this instance the subscriber accesses a local area network LAN mirror on the premises and coupled with the server .

The update indicator is coupled with the server and indicates a successful update to the domain . This indication may be a visual e.g. blinking icon or auditory indication.

The mirror image provider is coupled with the server and provides a mirror image of an application managed at the server wherein the mirror image is accessible to a subscriber over a wide area network via the mirror image . The mirror image may be accessed during remote operation by a user of at least one device . CANDI enabled applications such as application have the ability to be served by either the system in the premises or by the system . Significantly this capability minimizes latency and maximizes user experience with the application depending on the location from which the user is accessing their domain .

Users on the premises are connected to the system served by the system . Remote users out on the WAN are connected to the mirror image of their application served by the system . When a CANDI domain is set up in a factory the factory compiles the application with product drivers that are necessary and pushes the product drivers down to the sync operation to the server on the domain . The application is held in the domain . However the system also keeps a mirror copy of that application to be accessed during remote operation so that the remote operator does not have to access the server . Whatever is done to the application is also done to the mirror image including updates. This is a user experience optimization feature. The NOC must be accessed to access the mirror image of the application .

In one embodiment a cloud to premises tunneling occurs. For example the subscriber is connected to the mirror image of the application and the system provides a unique tunneling capability down to the domain for low overhead communications with the system . During the sync process described above the system in the domain tells the system what the local IP address is in the domain . The IP address never has to be typed in by the subscriber .

The device modifier is coupled with the server and facilitates a change in the domain by changing a status of the at least one device .

At in one embodiment and as described herein the method includes receiving a set of instructions at the server wherein the set of instructions requests that a change occur in the domain . The domain includes at least one device . The at least one device includes a communication port B that supports a first protocol B corresponding to a second protocol wherein the second protocol is supported by a device driver that is coupled with the domain . In one embodiment the set of instructions includes a complete set of instructions associated with the managing of the configuration of the domain such that the domain functions according to the complete set of instructions without any further communication necessary between the server and the server until a change in the domain occurs. The change requires an update to the server and components coupled therewith.

At in one embodiment and as described herein the method includes establishing a secure connection between the server and the server .

At in one embodiment and as described herein the method includes communicating the request for the change between the server and the server .

At in one embodiment and as described herein the method includes exchanging configuration information between the server and the server . In various embodiments and as described herein the exchanging of configuration information between the server and the server includes any of the following uploading from the server device log data uploading from the server diagnostics and uploading from the server device activity information.

At in one embodiment and as described herein the method includes based on the request and the exchanging at updating an application on at least one of the server and a computing device that is separate from the server and updating device configuration information stored on a database coupled with the server . In various embodiments and as described herein the updating at includes any of the following downloading code to the server and instructing by the server the server to perform a task.

At in one embodiment and as described herein the method further includes based on the exchanging at updating the database coupled with the server . In one embodiment the updating at includes archiving at the server the device configuration information.

At in one embodiment and as described herein the method further includes creating preload files for the application .

At in one embodiment and as described herein the method further includes managing a device driver on the premises to accommodate a change made to the domain . In one embodiment and as described herein the managing a device driver at includes adding a device driver such as device driver to the premises to accommodate a change made to the domain . Further in another embodiment and as described herein the managing a device driver at includes removing a device driver such as device driver from the premises to accommodate a change made to the domain . At in one embodiment and as described herein the method further includes indicating a successful update to the at least one device .

At in one embodiment and as described herein the method further includes providing a mirror image of an application managed at the server wherein the application is accessible to a subscriber over a wide area network via the mirror image .

At in one embodiment and as described herein the method further includes receiving by the server from the server a local IP address of the domain .

At in one embodiment and as described herein the method further includes facilitating the change in the domain by changing a status of the at least one device . The changing a status may be at least any of the following editing a device adding a device and deleting a device.

As discussed above the NOC interacts with the system of the system to achieve a uniform device abstraction layer. The creation of the uniform device abstraction layer enables third parties such as providers and or manufacturers to tailor messages delivery data to the subscriber . These messages may be in the form of coupons energy saving advice alerts as to application updates etc. Thus while the NOC receives and collects data provided by the system within the system this collected data is pushed back to the system as business intelligence such that based on the knowledge that is happening around the premises and stored at the database the message is tailored for the subscriber . For example it may be sensed that a dish washer is almost in need of repair. Therefore a coupon for that dish washer is sent to the subscriber in anticipation of the dish washer breaking down. Below is a description of a system for targeting delivery data.

In one embodiment the database accessor is coupled with a local server and accesses a database also coupled with the local server wherein the database includes information associated with a set of premises . It should be appreciated that a set of premises can be just one premises or a plurality of premises. Each premises of the set of premises includes the domain coupled with the server and includes at least one device . The at least one device includes a communication port that supports a first protocol corresponding to the second protocol wherein the second protocol is supported by the device driver coupled with the domain .

The information analyzer is coupled with the database accessor and analyzes the information associated with the set of premises . In one embodiment the information analyzer includes the threshold value determiner . The threshold value determiner determines if a threshold value is achieved. The threshold value is a predetermined value that once met or exceeded is considered to be achieved. For example a threshold value is the threshold temperature of 68 degrees Fahrenheit. In one embodiment it is predetermined that the temperature should remain below 68 degrees Fahrenheit in the living room of the premises . Thus if the temperature is registered to be 69 degrees Fahrenheit then it is determined that threshold temperature for the living room is achieved.

The functioning of the threshold value determiner enables an event to be created. For example and as indicated above based upon a threshold value being met or exceeded as determined by the threshold value determiner the provider and or manufacturer performs an action directed towards the subscriber . This action as will be explained below may be any of but not limited to the following customized messaging repairing applications updating applications creation of a new product and offering a new product to a subscriber. Notifications through the customized messaging may be sent to the subscriber by the provider and or manufacturer when a certain event occurs that meets or exceeds a threshold. Thus the provider and or manufacturer are enabled to have more positive feedback regarding predetermined thresholds being met or exceeded. Additionally manufacturers and providers are enabled to send relevant and revenue generating customized messages to subscribers thereby potentially increasing a revenue base. Moreover these actions directed towards subscribers help to build a customer provider relationship.

The customized message sender is coupled with the information analyzer and sends a customized message to the set of premises . The customized message is a message tailored to the particular subscriber . For example the database includes information regarding a dishwasher its make model and warranty information. The manufacturer of the dishwasher has a new dishwasher model that saves energy while also cleaning dishes better than the subscriber s dishwasher. The manufacturer through system is able to send a customized message to the subscriber offering a cost reduction coupon for the new dishwasher model while also illustrating to the subscriber possible energy savings should the new dishwasher model be used. See below for product advertiser . The customized message sender optionally includes any of the following a usage sender and a group discount sender .

The usage sender sends a customized message to the set of premises based on a frequency of usage of a product by the set of premises . For example if is it determined that a subscriber uses a washing machine every day then the customized message sent from the usage sender might include advice for running the washing machine at times of the day at which the cost of energy to the consumer is lower. In another example one customized message may be sent to high usage users while another customized message may be sent to users of a different frequency. Thus customized messages vary depending on a subscriber s frequency of use

The group discount sender sends a group discount to the set of premises . For example a coupon offering a discount for a new refrigerator may be sent to a group of selected subscribers within the set of premises wherein the coupon offers a discount if a predetermined number of subscribers within the group of selected subscribers choose to buy the refrigerator using the coupon. This feature of the system enables a provider and or a manufacturer to track and sort data based on what subscribers like e.g. high usage group discount using at least the data stored at the database of the system . This takes away from the uncertainty of who is going to buy a product that is manufactured. It also creates more confidence in manufacturing the product. The group discount sender thus is able to send customized messages targeting specific groups of subscribers.

As described above the system further optionally includes any of the following coupled with the threshold value determiner an application repairer an application updater and a product advertiser . The application repairer repairs an application at the set of premises if the threshold value is achieved. The application updater updates an application at the set of premises if the threshold value is achieved. The product advertiser offers a new product to the set of premises if the threshold value is achieved.

The product advertiser is coupled with the database accessor and offers a new product to the set of premises if the threshold value is achieved.

At in one embodiment and as described herein the method includes accessing the database coupled with the server wherein the database includes information associated with the set of premises wherein each premises of the set of premises includes a domain that is coupled with the server and includes at least one device . The at least one device includes a communication port that supports a first protocol corresponding to the second protocol . The second protocol is supported by the device driver that is coupled with the domain .

At in one embodiment and as described herein the method includes analyzing the information. At in one embodiment and as described herein the analyzing the information includes determining if a threshold value is achieved. At in one embodiment and as described herein the method further includes based on the analyzing at repairing an application at the set of premises if the threshold value is achieved. At in one embodiment and as described herein the method further includes based on the analyzing at updating an application at the set of premises if the threshold value is achieved. At in one embodiment and as described herein the method further includes based on the analyzing at offering a new product to the set of premises if the threshold value is achieved.

At in one embodiment and as described herein the method includes based on the analyzing at sending a customized message to the set of premises . In one embodiment and as described herein the sending at of the customized message is based on a frequency of usage of a product by the set of premises . In another embodiment and as described herein the sending at of the customized message includes sending a group discount to the set of premises .

As discussed above the NOC interacts with the system of the system to achieve a uniform device abstraction layer. The creation of the uniform device abstraction layer enables third parties to build customized functions for implementation at the domain . More particularly a third party developer may develop an application to be run on at least one device within the domain without knowing anything about the protocols associated with that device. For example using well known established application development platforms a utility company may write a mobile phone software application including a set of instructions to be implemented on a mobile phone. Additionally the developer of the mobile phone software application may communicate with an API coupled with the system and select a widget of a set of selectable widgets that the developer wishes to appear in its third party application. The widget is a predesigned user interface element that is enabled to be integrated within a third party application to provide user information and enable user interaction through the third party application via communication with the device driver.

This mobile phone software application is an example of a third party application described below. The mobile phone software application communicates with the system coupled with the system and using an API of the set of APIs of the system described below the system converts the set of instructions within the mobile phone software application to a description of an action and a protocol which the at least one device understands and can implement.

At the subscriber s end the subscriber downloads the mobile phone software application to his her mobile phone and then is able to click on an icon such as my energy savings . Once the my energy savings option is selected the mobile phone software application sends a command to the system that instructs the application to perform actions that conserve energy on the devices present at the domain . For example the system knows how to convert this action request to an action for each of the at least one device such as instructing the lights to dim the thermostat to set back a couple of degrees etc. The developer of the mobile phone software application does not need to know who makes the thermostat and what the thermostat is in order for the thermostat to respond to the mobile phone software application s action request. The system as will be described below converts aspects of the developed third party application into descriptions of actions and protocols that the at least one device understands. In this manner a third party may develop an application for a group of devices residing in the domain without having to create specific programs to match the protocol requirements of different devices within the domain .

Below is a description of a system for enabling a customized function for the at least one device to be implemented within the domain .

The system is coupled with the system . The system includes the server thereon for managing the premises . The system interacts with at least one third party application via the set of APIs wherein the at least one third party application has a set of instructions thereon such that the at least one third party application can communicate with the device driver at the premises without having knowledge of the protocol thereon and without having knowledge of the at least one device . The premises as described herein includes the at least one device wherein a device of the at least one device is coupled with the server and includes a communication port that supports a first protocol corresponding to a second protocol wherein the second protocol is supported by a device driver that is coupled with the domain .

Various functions of the set of APIs include but are not limited to the following creating and checking state subscriptions setting and getting action states getting device information and properties lists querying and running macros handling logins and preloading data to a web page.

In one embodiment at least one API such as API of the set of APIs includes a set of selectable widgets . Upon the selection of a selectable widget of the set of selectable widgets by a third party provides to the third party a predesigned user interface element that is enabled to be integrated within the at least one third party application . In various embodiments the set of selectable widgets are any of but not limited to being the following picture an interactive graphic and an interactive object. Thus the system provides a method by which a third party developer may develop a customized application for the subscriber and or the domain .

The instruction translator is coupled with the server and translates the set of instructions received from the at least one third party application to be a description of an action and protocol that the at least one device understands. Once the at least one device understands the action and protocol then the action the object of an action request by the at least one third party application may be executed by the at least one device and the application associated therewith. In one embodiment the instruction translator includes the instruction analyzer . The instruction analyzer analyzes the set of instructions and compares and determines a match for information within the set of instructions with a portion of the domain . The term compares refers to the instruction analyzer looking at the set of instructions to be applied to a particular device and the at least one device within the domain and determining similarities and differences between the set of instructions and which devices are within the domain . The term determines a match for information within the set of instructions refers to the determination of which device if any of the at least one device is able to perform an action or plurality of actions requested within the set of instructions . If it is determined that a device of the at least one device is able to perform the action then a match is determined to have been found.

The instruction sender is coupled with the instruction translator and sends the translated instructions to the at least one device for implementation by said at least one device .

The instruction manager is coupled with the instruction translator and manages a performance of an object of the set of instructions . The object of the set of instructions includes an action as described herein.

The performance indicator is coupled with the instruction translator and provides an indication of when the action has been performed.

The library is coupled with the instruction translator and manages the sending and receiving of the action request. As described herein in various embodiments the library includes any of the following a subscription manager which may include a remote server polster an object administrator and a user access manager .

The subscription manager manages a subscription to the execution and result of the action . The subscription to the action in one example is a result of the action request. Once an action has been requested to be performed the action request it becomes a subscription to the action and the process begins to determine if and with which device the action may be performed. In another instance the system polls the system whenever a subscribed action like a thermostat s temperature changes. The object administrator administers a list of objects comprising the set of selectable widgets .

The user access manager manages user access to the set of selectable widgets . For example the user access manager handles the secure user login and authentication before opening the developer s application.

Additionally the system provides a controlled list of objects that may include more than the set of selectable widgets and a method for controlling and polling devices as well as customizing simpler applications and user interfaces. For example the objects may also be associated with different product types. The system includes methods specific to each different product type that handles the intricacies of the actions and provides call back functions for when the command is complete such as notifications that an action has been performed .

Capabilities which the system and or the system combined with the system provide to developers include but are not limited to specific device control for lights thermostats cameras etc. is provided simple device image toggle controls such as 1 choice of images to represent a device s state on off unknown images and placing it anywhere on the page and 2 when an image is clicked the device s command is sent to the system and the image is updated appropriately i.e. on or off image slider controls such as to control light levels volume level and shade height. This allows developers to specify where the GUI will display a slider for setting a device s power dim level as a percentage. The developer can choose the location colors image on the slider direction horizontal vertical increment 0 to 100 percent steps 0 33 66 99 percent etc. Once the slider has been moved the physical light is sent the appropriate command dynamic device lists are easily handled which enable the easy display of any information about the device including filtering by the specific device types e.g. lights only device name location type protocol information etc. dynamic lists of macros are easily handled and automatically displayed in the application such as application scenes aka macros are presented easily for developers to assign individual buttons to call the scene. An image can be automatically displayed to indicate that the scene is running inclusion of best of breed mobile development environment tools and libraries inclusion of CANDI pre load scripts which have all the devices in the environment ready for use in a web based environment multiple web application pages can be built by the developer and managed as separate files. However at runtime all application pages are combined into a seamless single page to optimize speed and presentation to the end user apple style page tweens are available managed by a simple on click control element which allows page paints to slide from any direction top bottom left right . . . or back after closing the page by remembering the last slide direction and creating the opposite effect on return to the prior page sounds can be triggered for page changes and other events when desired developers can specify global variables to be used in and across multiple pages in their application. Examples are objects such as directory locations named sound files default image files for devices etc. HTML and Java Script may be added to CANDI applications as desired. Developers have full access to the CANDI pre load scripts and capabilities. Any standard HTML or JavaScript function can be added to customize the application or enhance the user experience and the use of CANDI libraries built on the background processing power of Ajax to communicate with the server . On an IP network this allows the user experience to be quick and seamless.

Further features provided by the system or the combination of system and include but are not limited to the following unsolicited event notification to devices e.g. a user turns on a light in the house and the application then changes to indicate the light as ON ability to automatically select applications based on the platform or browser loaded e.g. loading pages specific to company A s product on the company A s product loading pages specific to company B s product on the company B s product and loading pages specific to company C s product on the company C s product DLNA compliant entertainment browsing playback and control.

Additionally the system or the combination of the system and enable a method and system for pre delivery network creation. For example a non skilled person in a factory is able to configure a device such as a light switch via a computer after looking at NOC for the requirements of the device.

In another embodiment the system enables the designing of a brand for a product device using available widgets. This may happen at the factory linked with NOC or at a location remote from the factory e.g. the premises coupled with system .

Overall the tools available to developers via systems and provide open APIs to allow easy application and driver development by customers end users and anyone else. In one embodiment the system includes HTTP API. In house and third party developers can create sophisticated software applications that interface fully with the CANDI system and server . The API describes syntax for software driven inputs and outputs handled by device classes. The HTTP GET method is used.

At a high level the HTTP GET request and response include but are not limited to asynchronous requests and HTTP GET responses. In regard to asynchronous requests many commands have an option to send them in asynchronously and get the finished command response at a later time. This type of command request requires the addition of a CREATE REQUEST parameter and a REQUEST ID parameter when querying the result. The syntax is CREATE REQUEST and REQUST ID REQUEST ID. The inbound CREATE REQUEST returns an alpha numeric that is unique for this request and is used again on the Check Request command to retrieve the command response. When the CREATE REQUEST is sent in the WAIT SECONDS parameter is ignored.

In regard to HTTP GET responses the HTTP Get responses use the bar and tilde delimited strings. Multiple elements in a list are separated by a bar . Object attributes are separated by the tilde character . GET responses can also encompass action responses.

Additionally in one embodiment third party applications will be subject to a stringent automated testing process.

At in one embodiment and as described herein the method includes receiving a set of instructions residing on at least one third party application wherein the set of instructions comprises a request for an action to be performed at the at least one device within the domain coupled with the premises .

At in one embodiment and as described herein the method includes translating the set of instructions and the action into an action request and a protocol that the at least one device understands such that the at least one third party application can communicate with the device driver at the premises without having knowledge of a protocol thereon and without having knowledge of the at least one device wherein a device of the at least one device is coupled with the server and includes a communication port that supports a first protocol corresponding to the second protocol wherein the second protocol is supported by the device driver that is coupled with the domain .

At in one embodiment and as described herein the method includes operating at the at least one device via the set of APIs the at least one third party application including the action request having the set of instructions thereon.

At in one embodiment and as described herein the method includes providing an indication of when the action request has been performed.

At in one embodiment and as described herein the method includes managing the sending and receiving of the action request via a library . In one embodiment and as described herein the managing the sending and receiving of the action request via the library at optionally includes any of the following managing a subscription to the execution and result of the action the managing the subscription further optionally including polling the server that is coupled with the device driver when the action that is subject to the subscription changes administering a list of objects comprising a set of selectable widgets and managing user access to a list of objects including the set of selectable widgets .

With reference now to the CANDI system will be described. is a block diagram of the CANDI system . Shown in overview is the NOC coupled with the system . As described above in detail the NOC includes in various embodiments the system for achieving a uniform device abstraction layer and the system for maintaining a domain. The system includes in various embodiments the system for managing a domain and the system for enabling a customized function for at least one device to be implemented within the domain . Additionally coupled with both the NOC and the system is the system for targeting delivery data. It should be appreciated that the embodiments associated with the systems and have been described in detail above and the various features therein are incorporated into the embodiment shown in . In addition the CANDI system optionally includes a data manager that is coupled with the device driver implementer of the system . The data manager sends and receives data associated with the at least one device .

In one embodiment the CANDI system includes the NOC including the system and the domain manager including the system . The system is coupled with the server while the system is coupled with the server .

As described herein the system includes a device class determiner coupled with the server . The device class determiner establishes a device class for the at least one device residing in the domain at the premises. Based on the establishing the device class an action is enabled to be mapped to the device thereby enabling an application to run on and utilize a capability of the device.

In one embodiment and as described herein the CANDI system optionally includes any of the following an updated information requester a data receiver a data storer and a recommendation generator. The updated information requester is coupled with the device class determiner and is configured for requesting updated information from the remote server. The data receiver is coupled with the device class determiner and receives data from an external source. The data storer is coupled with the data receiver and stores the data in a local database coupled with the local server. The recommendation generator is coupled with the device class determiner and generates a recommendation for a subscriber based on data stored in the local database.

As described herein the system includes an action identifier coupled with the remote server the action identifier configured for identifying an action to be mapped to the at least one device a device driver determiner coupled with the action identifier the device driver determiner configured for determining a device driver that supports a second protocol wherein the device driver is coupled with the domain and the second protocol supports the action a comparer configured for comparing the second protocol with a domain configuration store including device configuration information for the at least one device and a device driver implementer configured for based on the comparing implementing the device driver when the first protocol corresponds to the second protocol such that the action is enabled for performance.

In one embodiment and as described herein the CANDI system further includes a gateway module coupled with the device driver implementer the gateway module configured for managing an application wherein the application controls said at least one device. In yet another embodiment and as described herein the CANDI system includes a data manager coupled with the device driver implementer the data manager configured for sending and receiving data associated with the at least one device. In one embodiment and as described herein the CANDI system further includes a communication manager wherein the communication manager includes the system which includes an instruction receiver a secure connection establisher a data exchange module and an updating module. The instruction receiver is coupled with the local server. The instruction receiver receives a set of instructions relating to managing the domain wherein the set of instructions includes a complete set of instructions associated with the managing a configuration of the domain such that the domain functions according to the complete set of instructions without any further communication necessary between the remote server with the local server until a change in the domain occurs wherein the change requires an update to the remote server and components coupled therewith.

The secure connection establisher is coupled with the instruction receiver and establishes a secure connection between the local server and the remote server.

The data exchange module is coupled with the secure connection establisher and exchanges device configuration information between the local server and the remote server.

The updating module is coupled with the data exchange module and based on the exchanging updates an application residing on the at least one of the remote server and a computing device that is separate from the remote server and updates device configuration information stored on a first database coupled with the remote server. In one embodiment and as described herein the updating module is further configured for updating a second database that is coupled with the local server.

In one embodiment and as described herein the system for targeting delivery data includes a database accessor an information analyzer and a customized message sender. The database accessor is coupled with the local server and accesses the second database wherein the second database includes information associated with a set of premises. The information analyzer is coupled with the database accessor and analyzes the information. The customized message sender is coupled with the information analyzer and sends a customized message to the set of premises.

At in one embodiment and as described herein the method includes automatically establishing a device class for the at least one device. At in one embodiment and as described herein the method includes based on the establishing of the device class enabling a mapping of at least one action to the device thereby enabling an application to run on and utilize a capability of the device.

At in one embodiment and as described herein the method includes receiving a set of instructions at the local server wherein the set of instructions requests that a change occur in the domain establishing a secure connection between the local server and the remote server communicating the request for the change between the local server and the remote server exchanging configuration information between the local server and the remote server based on the request and the exchanging updating an application residing on at least one of the remote server and a computing device that is separate from the remote server and updating device configuration information stored on a first database coupled with the remote server. At in one embodiment and as described herein the method at further includes updating a second database that is coupled with the local server.

At in one embodiment and as described herein the method includes storing at a second database coupled with the local server information associated with the premises analyzing the information and sending a customized message to said set of premises.

At in one embodiment and as described herein the method includes manages an application by a gateway module coupled with the remote server wherein the application controls the at least one device. At in one embodiment and as described herein the method includes managing by the remote server data associated with the at least one device.

At in one embodiment and as described herein the method includes receiving by the local server data from an external source. At in one embodiment and as described herein the method at further includes storing received data in a second database coupled with the local server.

At in one embodiment and as described herein the method includes generating a recommendation for a subscriber based on data stored in the second database. At in one embodiment and as described herein the method includes accessing the first database coupled with the local server wherein the first database comprises information associated with a set of premises wherein each premises of the set of premises comprises a domain coupled with the remote server and includes at least one device analyzing the information and sending a customized message to the set of premises.

At in one embodiment and as described herein the method includes receiving a set of instructions residing on at least one third party application wherein the set of instructions comprises a request for an action to be performed at the at least one device within the domain coupled with the premises and translating the set of instructions into an action request and a protocol that the at least one device understands such that the at least one third party application can communicate with the device driver at the premises without having knowledge of a protocol thereon and without having knowledge of the at least one device.

The present technology may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The present technology may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

It is appreciated that system of is an example only and that the present technology can operate on or within a number of different computer systems including general purpose networked computer systems embedded computer systems routers switches server devices user devices various intermediate devices artifacts stand alone computer systems and the like. As shown in computer system of is well adapted to having peripheral computer readable media such as for example a floppy disk a compact disc and the like coupled thereto.

System of includes an address data bus for communicating information and a processor A coupled to bus for processing information and instructions. As depicted in system is also well suited to a multi processor environment in which a plurality of processors A B and C are present. Conversely system is also well suited to having a single processor such as for example processor A. Processors A B and C may be any of various types of microprocessors. System also includes data storage features such as a computer usable volatile memory e.g. random access memory RAM coupled to bus for storing information and instructions for processors A B and C.

System also includes computer usable non volatile memory e.g. read only memory ROM coupled to bus for storing static information and instructions for processors A B and C. Also present in system is a data storage unit e.g. a magnetic or optical disk and disk drive coupled to bus for storing information and instructions. System also includes an optional alphanumeric input device including alphanumeric and function keys coupled to bus for communicating information and command selections to processor A or processors A B and C. System also includes an optional cursor control device coupled to bus for communicating user input information and command selections to processor A or processors A B and C. System of the present embodiment also includes an optional display device coupled to bus for displaying information.

Referring still to optional display device of may be a liquid crystal device cathode ray tube plasma display device or other display device suitable for creating graphic images and alphanumeric characters recognizable to a user. Optional cursor control device allows the computer user to dynamically signal the movement of a visible symbol cursor on a display screen of display device . Many implementations of cursor control device are known in the art including a trackball mouse touch pad joystick or special keys on alpha numeric input device capable of signaling movement of a given direction or manner of displacement. Alternatively it will be appreciated that a cursor can be directed and or activated via input from alpha numeric input device using special keys and key sequence commands.

System is also well suited to having a cursor directed by other means such as for example voice commands. System also includes an I O device for coupling system with external entities. For example in one embodiment I O device is a modem for enabling wired or wireless communications between system and an external network such as but not limited to the Internet. A more detailed discussion of the present technology is found below.

Referring still to various other components are depicted for system . Specifically when present an operating system applications modules and data are shown as typically residing in one or some combination of computer usable volatile memory e.g. random access memory RAM and data storage unit . However it is appreciated that in some embodiments operating system may be stored in other locations such as on a network or on a flash drive and that further operating system may be accessed from a remote location via for example a coupling to the internet. In one embodiment the present technology for example is stored as an application or module in memory locations within RAM and memory areas within data storage unit . The present technology may be applied to one or more elements of described system . For example a method for identifying a device associated with a transfer of content may be applied to operating system applications modules and or data .

The computing system is only one example of a suitable computing environment and is not intended to suggest any limitation as to the scope of use or functionality of the present technology. Neither should the computing environment be interpreted as having any dependency or requirement relating to any one or combination of components illustrated in the example computing system .

All statements herein reciting principles aspects and embodiments as well as specific examples thereof are intended to encompass both structural and functional equivalents thereof. Additionally it is intended that such equivalents include both currently known equivalents and equivalents developed in the future i.e. any elements developed that perform the same function regardless of structure. The scope of embodiments therefore is not intended to be limited to the embodiments shown and described herein. Rather the scope and spirit of embodiments are embodied by the appended claims.

