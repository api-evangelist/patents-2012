---

title: Automatically configuring virtual private networks
abstract: Disclosed are various embodiments for configuring virtual private networks (VPNs). A request is made, through a service call, for creation of a VPN through a client VPN gateway and a server VPN gateway. In response to the service call, a generic gateway configuration document is received. The generic gateway configuration document is applicable to the client VPN gateway. The generic gateway configuration document is translated to a device-specific gateway configuration document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09338053&OS=09338053&RS=09338053
owner: Amazon Technologies, Inc.
number: 09338053
owner_city: Seattle
owner_country: US
publication_date: 20121207
---
This application is a continuation of U.S. patent application Ser. No. 12 862 412 filed Aug. 24 2010 which is incorporated herein by reference in its entirety.

A virtual private network VPN provides users with private access to an organization s network using a public communication infrastructure such as the Internet. This privacy is provided by encapsulating data transfers between devices which are not on the same private network. The logical connection between two such devices is known as a VPN tunnel. A VPN may also provide authentication and encryption to keep tunnels secure. Creating a VPN involves configuring network devices on both sides of the connection.

The present disclosure relates to programmatically configuring a virtual private network VPN between a client and a server. A VPN utilizes a VPN gateway device at the client site and another VPN gateway device at the server site. During VPN creation each of these two devices is provisioned or configured with information about the other. More specifically in response to a programmatic request by a client to create a VPN a component at the server site generates a configuration for the client VPN gateway device where this configuration includes information about the server VPN gateway device. This configuration is provided to the client in a format which is not specific to a particular type of VPN gateway device. The configuration is then translated at the client into a format which is specific to the VPN gateway device used by the client. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes one or more computing devices in data communication with one or more client devices by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks. The client device utilizes a virtual private network VPN gateway to connect to the network . The computing devices also utilize a server VPN gateway to connect to the network . The networked environment further includes one or more computing devices . The gateways implement a VPN such that the client device can communicate privately with computing devices over a VPN tunnel .

The networked environment can be viewed as including a data plane and a control plane . The data plane includes the client device s and the computing device s . These components exchange data with each other over the VPN tunnel . The control plane includes one client device the computing device the client VPN gateway and the server VPN gateway . The control plane is used to configure the data plane . More specifically client device and computing device cooperate to configure the gateways and which enables the data plane .

The computing device or may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices or may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. A plurality of computing devices together may comprise for example a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices or may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device or is referred to herein in the singular. Even though the computing device or is referred to in the singular it is understood that a plurality of computing devices or may be employed in various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Also various data is stored in a data store that is accessible to the computing device . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing device for example include a virtual private network VPN connection manager . The components executed on the computing device may also include other applications services processes systems engines or functionality not discussed in detail herein. The VPN connection manager is executed to service requests from the client device related to VPN connections. One example of such a request is a request to provide a client configuration that is appropriate for a new VPN connection. The data stored in the data store includes for example VPN configuration data used by the VPN connection manager and potentially other data. In various embodiments the VPN connection manager may utilize any type of middleware framework to communicate with a client application executing on a client device . Examples of such frameworks include remote procedure calls service oriented architecture protocol SOAP representational state transfer REST and other frameworks.

The client device is representative of a plurality of client devices that may be coupled to the network . The client device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer a personal digital assistant a cellular telephone a set top box a music player a web pad a tablet computer system a game console or other devices with like capability.

The client device may be configured to execute various applications such as a VPN configuration application a browser and or other applications. The VPN configuration application may be executed in the client device to configure the client VPN gateway . The browser may be executed in the client device for example to access and render network pages such as web pages or other network content served up by the computing device and or other servers. The client device may be configured to execute applications beyond browser such as for example email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin the VPN configuration application executing on the client device makes a request to the VPN connection manager executing on the computing device to create a VPN connection. In response to the request the VPN connection manager returns a gateway configuration document to the VPN configuration application . The gateway configuration includes parameters that are needed to establish a VPN connection between the client device and the computing device . In some embodiments the gateway configuration includes all parameters that are needed to establish a VPN connection between the client device and the computing device . These parameters are expressed in a manner which is device agnostic i.e. is not specific to a particular gateway device .

The gateway configuration is translated at the client device into a device specific configuration. This translation may be performed automatically by the VPN configuration application or the user may invoke another application for translation. The device specific configuration is then applied to the client VPN gateway . After this application the client device is part of a VPN which also includes computing device s . Applying the device specific configuration may be performed automatically by the VPN configuration application or the user may apply the configuration by invoking another application residing on the client device or by executing an application residing on the client VPN gateway .

Use of a generic gateway configuration document exists simplifies the process when a user switches from one type of client VPN gateway to another e.g. from a Cisco gateway to a Juniper gateway . In this regard the VPN configuration application performs the translation process again on the original generic configuration but specifying a different gateway type. In some embodiments the VPN configuration application retrieves the same generic document from the VPN connection manager . In other embodiments the VPN configuration application maintains a copy of the original generic gateway configuration.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the VPN configuration application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the VPN configuration application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the VPN configuration application makes a service call to the VPN connection manager to create a VPN. This service call includes various parameters which describe the client VPN gateway for example an externally visible IP address an autonomous system number ASN and the type of gateway. The gateway type may be described for example in terms of vendor product model etc. At box the VPN configuration application receives a response to the service call. The response includes a configuration document to be applied to the client VPN gateway . The configuration document is a serializable structured document which may use for example Extensible Markup Language XML YAML JSON Javascript Object Notation and other such formats. The configuration document is not specific to a particular type of VPN gateway but is generic so that it applies to many different types of VPN gateways.

The configuration document contains parameters which when applied to the client VPN gateway result in the creation of a VPN that includes the client device and the computing device s . As noted above a VPN is implemented via one or more tunnels which may be implemented by Internet Protocol Security IPsec tunnels. The configuration document may include for example a description of one or more IPSec tunnel interfaces which receive traffic going to and from the tunnel IPsec security associations which handle authentication and or encryption on a tunnel Internet Key Exchange IKE security associations used to exchange keys for the IPsec security association Border Gateway Protocol BGP peerings which exchange routes between the client VPN gateway and the server VPN gateway and or other relevant configuration objects.

Next at box the VPN configuration application determines the type of the client VPN gateway and retrieves a translation table that is specific to the gateway type. At box the VPN configuration application uses this translation table to translate the configuration document that was received in box from a generic document to a document that is specific to the client VPN gateway . The device specific translation table may have been received in response to the service call of box . The translation table is a mechanism for mapping a configuration into a series of commands that are specific to a type of client gateway.

In some embodiments which use XML as the format for the generic configuration document the translation table may take the form of a device specific style sheet. In such embodiments an Extensible Stylesheet Language Transformations XSLT template processing engine takes as input the received XML configuration document and an XSLT style sheet and produces as output another XML configuration document which is device specific.

At box the VPN configuration application applies the configuration document produced in box to the client VPN gateway . In some embodiments the VPN configuration application configures the client VPN gateway by sending commands to the client VPN gateway . The commands may be sent for example through a network interface a serial interface or other appropriate interface. In other embodiments the VPN configuration application invokes a utility program which in turn communicates with the client VPN gateway . After box the VPN creation process is complete and the process ends.

In some embodiments the VPN configuration application maintains a copy of the original generic gateway configuration. Using this original configuration the VPN configuration application can translate to a different gateway type without having to obtain the generic document again from the VPN connection manager . This allows the user for example to switch from a Cisco gateway to a Juniper gateway.

Turning now to shown is a flowchart that provides one example of the operation of a portion of the VPN connection manager according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the VPN configuration application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the VPN connection manager receives a service call from the VPN configuration application requesting creation of a VPN. The service call includes parameters describing the client VPN gateway for example an externally visible IP address an autonomous system number ASN and the type of gateway. The gateway type may be described for example in terms of vendor product model etc. At box the VPN connection manager uses the service call parameters to determine appropriate configuration parameters for the client VPN gateway as well as appropriate values for these parameters. In making such a determination the VPN connection manager uses VPN configuration data from the data store for example data describing network data describing other VPNs for the requesting client and data describing VPNs for other clients. The VPN connection manager may also use the client gateway type specified in the create VPN service call in determining which configuration parameters are appropriate and or in choosing appropriate values for these parameters.

Next at box VPN connection manager uses the configuration parameters and values to create a generic configuration document. This generic configuration document results in the creation of a VPN between the client device and the computing device when applied to the client VPN gateway . The configuration document may include for example a description for one or more Internet Protocol Security IPSec tunnel interfaces IPsec security associations Internet Key Exchange IKE security associations Border Gateway Protocol BGP peerings and or other relevant configuration objects.

At box the VPN connection manager sends the configuration document to the VPN configuration application as a response to the service call received in box . The VPN connection manager may additionally send a device specific style sheet to the VPN configuration application where the device specific style sheet is selected based on the gateway type parameter of the service call. Having sent the configuration document the VPN creation process is then complete and the process ends.

Next at box the VPN connection manager programmatically configures the VPN server gateway with parameters and values chosen based on the description of the client VPN gateway received in box . Once the VPN configuration application has used information in the generic configuration document to configure the VPN client gateway then configuration of the VPN is complete.

Moving on to shown is a flowchart that provides another example of the operation of a portion of the VPN connection manager according to various embodiments. In the embodiment described in connection with the configuration document is created in response to a series of service calls from the VPN configuration application . In contrast the VPN connection manager described in connection with creates a configuration document in response to a single service call from the VPN configuration application . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the VPN configuration application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the VPN connection manager receives a service call from the VPN configuration application requesting creation of a data structure describing the client VPN gateway . The service call includes parameters describing the client VPN gateway for example an externally visible IP address and an autonomous system number ASN . At box the VPN connection manager returns to the VPN configuration application a handle or identifier for the client gateway data structure. Next at box the VPN connection manager receives a service call from the VPN configuration application requesting creation of a data structure describing the server VPN gateway . At box the VPN connection manager returns to the VPN configuration application a handle or identifier for the server gateway data structure. At box the VPN connection manager receives a service call from the VPN configuration application requesting creation of a VPN. The service call includes the handle of the client gateway data structure the handle of the server gateway data structure and the type of gateway. The gateway type may be described for example in terms of vendor product model etc. In some embodiments the VPN connection manager also validates the parameters in the service calls of box and and returns an error code back to the VPN configuration application if the validation fails.

At box the VPN connection manager uses the service call parameters to determine appropriate configuration parameters and values for these parameters for the client VPN gateway . In making such a determination the VPN connection manager uses VPN configuration data from the data store for example data describing network data describing other VPNs for the requesting client and data describing VPNs for other clients. The VPN connection manager may also use the client gateway type specified in the create VPN service call in determining which configuration parameters are appropriate and or in choosing appropriate values for these parameters.

Next at box VPN connection manager uses the configuration parameters and values to create a generic configuration document. This generic configuration document results in the creation of a VPN between the client device and the computing device when applied to the client VPN gateway . The configuration document may include for example a description of one or more IPSec tunnel interfaces IPsec security associations IKE security associations BGP peerings and or other relevant configuration objects. At box the VPN connection manager sends the configuration document to the VPN configuration application as a response to the service call received in box . The VPN creation process is complete and the process ends.

Referring next to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the VPN connection manager and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

Turning now to shown is a schematic block diagram of the client device according to an embodiment of the present disclosure. The client device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the client device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the VPN configuration application and potentially other applications. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory or and are executable by the processors or as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java Javascript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory or and are executable by the processor or . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor or . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory or and run by the processor or source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory or and executed by the processor or or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory or to be executed by the processor or etc. An executable program may be stored in any portion or component of the memory or including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory or is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory or may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor or may represent multiple processors and the memory or may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors or between any processor or and any of the memories or or between any two of the memories or etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor or may be of electrical or of some other available construction.

Although VPN connection manager VPN configuration application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the VPN connection manager and the VPN configuration application . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor or in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including VPN connection manager and VPN configuration application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor or in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

