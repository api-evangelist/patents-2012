---

title: Messaging in a parallel computer using remote direct memory access (‘RDMA’)
abstract: Messaging in a parallel computer using remote direct memory access (‘RDMA’), including: receiving a send work request; responsive to the send work request: translating a local virtual address on the first node from which data is to be transferred to a physical address on the first node from which data is to be transferred from; creating a local RDMA object that includes a counter set to the size of a messaging acknowledgment field; sending, from a messaging unit in the first node to a messaging unit in a second node, a message that includes a RDMA read operation request, the physical address of the local RDMA object, and the physical address on the first node from which data is to be transferred from; and receiving, by the first node responsive to the second node's execution of the RDMA read operation request, acknowledgment data in the local RDMA object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08495655&OS=08495655&RS=08495655
owner: International Business Machines Corporation
number: 08495655
owner_city: Armonk
owner_country: US
publication_date: 20121126
---
This application is a continuation application of and claims priority from U.S. patent application Ser. No. 13 167 911 filed on Jun. 24 2011.

The field of the invention is data processing or more specifically methods apparatus and products for messaging in a parallel computer using remote direct memory access RDMA .

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

In high performance computing HPC high speed communications adapters use remote data memory access RDMA operations to move data between the memory of a local computer and the memory of a remote computer. The high speed adapters which perform these operations characteristically work under a software stack known as Open Fabrics Enterprise Distribution OFED .

Messaging in a parallel computer using remote direct memory access RDMA the parallel computer including a plurality of nodes each node including a messaging unit including receiving by a kernel of the first node through an application programming interface API a send work request the send work request including a local virtual address on the first node from which data is to be transferred and a specification of a size of data to be transferred from the first node to a second node wherein the size of data to be transferred from the first node to a second node is larger than a messaging packet size for sending data from the first node to a second node responsive to the send work request translating by the kernel of the first node the local virtual address on the first node from which data is to be transferred to a physical address on the first node from which data is to be transferred from creating by the kernel of the first node a local RDMA object that includes a counter set to the size of a messaging acknowledgment field sending from a messaging unit in the first node to a messaging unit in a second node a message that includes a RDMA read operation request the physical address of the local RDMA object and the physical address on the first node from which data is to be transferred from and receiving by the first node responsive to the second node s execution of the RDMA read operation request acknowledgment data in the local RDMA object.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for messaging in a parallel computer using RDMA in accordance with the present invention are described with reference to the accompanying drawings beginning with . sets forth example apparatus for messaging in a parallel computer using RDMA according to embodiments of the present invention. The apparatus of includes a parallel computer non volatile memory for the computer in the form of a data storage device an output device for the computer in the form of a printer and an input output device for the computer in the form of a computer terminal . The parallel computer in the example of includes a plurality of compute nodes . The compute nodes are coupled for data communications by several independent data communications networks including a high speed Ethernet network a Joint Test Action Group JTAG network a global combining network which is optimized for collective operations using a binary tree network topology and a point to point network which is optimized for point to point operations using a torus network topology. The global combining network is a data communications network that includes data communications links connected to the compute nodes so as to organize the compute nodes as a binary tree. Each data communications network is implemented with data communications links among the compute nodes . The data communications links provide data communications for parallel operations among the compute nodes of the parallel computer .

The compute nodes of the parallel computer are organized into at least one operational group of compute nodes for collective parallel operations on the parallel computer . Each operational group of compute nodes is the set of compute nodes upon which a collective parallel operation executes. Each compute node in the operational group is assigned a unique rank that identifies the particular compute node in the operational group . Collective operations are implemented with data communications among the compute nodes of an operational group. Collective operations are those functions that involve all the compute nodes of an operational group . A collective operation is an operation a message passing computer program instruction that is executed simultaneously that is at approximately the same time by all the compute nodes in an operational group of compute nodes. Such an operational group may include all the compute nodes in a parallel computer or a subset all the compute nodes . Collective operations are often built around point to point operations. A collective operation requires that all processes on all compute nodes within an operational group call the same collective operation with matching arguments. A broadcast is an example of a collective operation for moving data among compute nodes of an operational group. A reduce operation is an example of a collective operation that executes arithmetic or logical functions on data distributed among the compute nodes of an operational group . An operational group may be implemented as for example an MPI communicator. 

 MPI refers to Message Passing Interface a prior art parallel communications library a module of computer program instructions for data communications on parallel computers. Examples of prior art parallel communications libraries that may be improved for RDMA in a parallel computer according to embodiments of the present invention include MPI and the Parallel Virtual Machine PVM library. PVM was developed by the University of Tennessee The Oak Ridge National Laboratory and Emory University. MPI is promulgated by the MPI Forum an open group with representatives from many organizations that define and maintain the MPI standard. MPI at the time of this writing is a de facto standard for communication among compute nodes running a parallel program on a distributed memory parallel computer. This specification sometimes uses MPI terminology for ease of explanation although the use of MPI as such is not a requirement or limitation of the present invention.

Some collective operations have a single originating or receiving process running on a particular compute node in an operational group . For example in a broadcast collective operation the process on the compute node that distributes the data to all the other compute nodes is an originating process. In a gather operation for example the process on the compute node that received all the data from the other compute nodes is a receiving process. The compute node on which such an originating or receiving process runs is referred to as a logical root.

Most collective operations are variations or combinations of four basic operations broadcast gather scatter and reduce. The interfaces for these collective operations are defined in the MPI standards promulgated by the MPI Forum. Algorithms for executing collective operations however are not defined in the MPI standards. In a broadcast operation all processes specify the same root process whose buffer contents will be sent. Processes other than the root specify receive buffers. After the operation all buffers contain the message from the root process.

A scatter operation like the broadcast operation is also a one to many collective operation. In a scatter operation the logical root divides data on the root into segments and distributes a different segment to each compute node in the operational group . In scatter operation all processes typically specify the same receive count. The send arguments are only significant to the root process whose buffer actually contains sendcount N elements of a given datatype where N is the number of processes in the given group of compute nodes. The send buffer is divided and dispersed to all processes including the process on the logical root . Each compute node is assigned a sequential identifier termed a rank. After the operation the root has sent sendcount data elements to each process in increasing rank order. Rank 0 receives the first sendcount data elements from the send buffer. Rank 1 receives the second sendcount data elements from the send buffer and so on.

A gather operation is a many to one collective operation that is a complete reverse of the description of the scatter operation. That is a gather is a many to one collective operation in which elements of a datatype are gathered from the ranked compute nodes into a receive buffer in a root node.

A reduction operation is also a many to one collective operation that includes an arithmetic or logical function performed on two data elements. All processes specify the same count and the same arithmetic or logical function. After the reduction all processes have sent count data elements from compute node send buffers to the root process. In a reduction operation data elements from corresponding send buffer locations are combined pair wise by arithmetic or logical operations to yield a single corresponding element in the root process receive buffer. Application specific reduction operations can be defined at runtime. Parallel communications libraries may support predefined operations. MPI for example provides the following pre defined reduction operations 

In addition to compute nodes the parallel computer includes input output I O nodes coupled to compute nodes through the global combining network . The compute nodes in the parallel computer may be partitioned into processing sets such that each compute node in a processing set is connected for data communications to the same I O node. Each processing set therefore is composed of one I O node and a subset of compute nodes . The ratio between the number of compute nodes to the number of I O nodes in the entire system typically depends on the hardware configuration for the parallel computer . For example in some configurations each processing set may be composed of eight compute nodes and one I O node. In some other configurations each processing set may be composed of sixty four compute nodes and one I O node. Such example are for explanation only however and not for limitation. Each I O node provides I O services between compute nodes of its processing set and a set of I O devices. In the example of the I O nodes are connected for data communications I O devices through local area network LAN implemented using high speed Ethernet.

The parallel computer of also includes a service node coupled to the compute nodes through one of the networks . Service node provides services common to pluralities of compute nodes administering the configuration of compute nodes loading programs into the compute nodes starting program execution on the compute nodes retrieving results of program operations on the compute nodes and so on. Service node runs a service application and communicates with users through a service application interface that runs on computer terminal .

The parallel computer of includes many nodes. In the example of two nodes are illustrated in more detail a first node and a second . Each node includes a messaging unit for exchanging messages with other nodes a kernel to provide operating system type services to the nodes and computer memory . In the example of the computer memory includes a local RDMA object which is a data structure useful in messaging in the parallel computer using RDMA according to embodiments of the present invention. The computer memory also includes an API a module of computer program instructions operations and classes for initiating a send work request .

The parallel computer of operates generally for messaging in the parallel computer using RDMA. The parallel computer of includes a plurality of nodes such as the first node and the second node that may be embodied as a compute node an I O node or other module of automated computing machinery that forms a parallel computer . In the example of each node includes a messaging unit . The messaging units of may be embodied for example as a communications adapter for point to point data communications with other nodes in the parallel computer as a library of data communications operations for carrying out data communications with other nodes in the parallel computer or any combination thereof. In the example of the messaging units may carry out data communications with other nodes in the parallel computer for example over a torus network as described with reference to .

The parallel computer of carries out messaging using RDMA by receiving by a kernel of the first node through an application programming interface API a send work request . The API of may include one or more software routines that an application level program can invoke to initiate a send work request . In the example of a work request represents a request for the recipient of the work request to perform some task. The send work request of is a particular type of work request. The send work request of represents a request for the recipient of the send work request to perform the task of sending data to another node. In the example of the send work request is received by the first node and as such the send work request represents a request for the first node to perform the task of sending data to another node designated here as the second node .

In the example of the send work request includes a local virtual address on the first node from which data is to be transferred. The local virtual address points to a location in virtual memory of the first node that is mapped to actual physical memory of the first node for example by a page table that is accessible by the kernel . In the example method of the send work request also includes a specification of a size of data that is to be transferred from the first node to the second node .

In the example method of data can be transferred from the first node to the second node by exchanging messages between a messaging unit of the first node and a messaging unit of the second node . Such messages may have a predefined packet size to include control information such as the address of the recipient as well as a payload representing the actual data that is to be transferred. In the example of the size of data to be transferred from the first node to the second node is larger than a messaging packet size for sending data from the first node to a second node . Because the size of the data to be transferred from the first node to the second node is larger than the messaging packet size transferring the data referenced in the send work request by exchanging messages between the messaging unit of the first node and the messaging unit of the second node would necessitate exchanging multiple messages.

The parallel computer of further carries out messaging using RDMA by translating by the kernel of the first node the local virtual address on the first node from which data is to be transferred to a physical address on the first node from which data is to be transferred from. The physical address represents the physical address in memory from which data is to be transferred. In the example of translating the local virtual address on the first node to a physical address on the first node may be carried out for example by looking up the virtual address in a page table stored on the first node by looking up the virtual address in a translation lookaside buffer TLB stored on the first node by using an address translation algorithm and so on.

The parallel computer of further carries out messaging using RDMA by creating by the kernel of the first node a local RDMA object that includes a counter set to the size of a messaging acknowledgment field. In the example of a messaging acknowledgment field represents a data structure used to store acknowledgement data that is sent in response to the receipt of a message. For example if the first node sent a message to the second node using the messaging unit in the first node the first node would expect to receive acknowledgment data from the second node indicating that the message was received by the second node . Such acknowledgment data may include information used to verify that the message was received correctly such as for example a checksum. In the example of the acknowledgment data would be written into a messaging acknowledgment field in computer memory of the first node . Because the local RDMA object includes a counter set to the size of a messaging acknowledgment field as acknowledgment data is received by the first node the first node may decrement the counter for the purpose of determining when all acknowledgment data has been received. In the example of the size of a messaging acknowledgment field may be expressed in any unit of measure for example such as byte kilobyte megabyte and so on.

The parallel computer of further carries out messaging using RDMA by sending from a messaging unit in the first node to a messaging unit in a second node a message. In the example of the message includes a RDMA read operation request the physical address of the local RDMA object and the physical address on the first node from which data is to be transferred from.

In the example of a RDMA read operation request is sent from the first node to the second node to prompt the second node to read data stored in memory of the first node into memory on the second node . In such an example the RDMA read operation request is accompanied by the physical address on the first node from which data is to be transferred from so that the second node is informed of the address in memory on the first node that the data is to be read from.

The parallel computer of further carries out messaging using RDMA by receiving by the first node responsive to the second node s execution of the RDMA read operation request acknowledgment data in the local RDMA object. In the example of acknowledgment data is sent from the recipient of a message to the sender of a message in response to the receipt of a message. For example if the first node sent a message to the second node using the messaging unit in the first node the first node would expect to receive acknowledgment data from the second node indicating that the message was received by the second node . Such acknowledgment data may include information used to verify that the message was received correctly such as for example a checksum. In the example of the acknowledgment data is written into a messaging acknowledgment field in the local RDMA object of the first node .

The arrangement of nodes networks and I O devices making up the example apparatus illustrated in are for explanation only not for limitation of the present invention. Apparatus capable of messaging using RDMA according to embodiments of the present invention may include additional nodes networks devices and architectures not shown in as will occur to those of skill in the art. The parallel computer in the example of includes sixteen compute nodes parallel computers capable of RDMA in a parallel computer according to embodiments of the present invention sometimes include thousands of compute nodes. In addition to Ethernet and JTAG networks in such data processing systems may support many data communications protocols including for example TCP Transmission Control Protocol IP Internet Protocol and others as will occur to those of skill in the art. Various embodiments of the present invention may be implemented on a variety of hardware platforms in addition to those illustrated in .

Messaging in a parallel computer using RDMA according to embodiments of the present invention is generally implemented on a parallel computer that includes a plurality of compute nodes organized for collective operations through at least one data communications network. In fact such computers may include thousands of such compute nodes. Each compute node is in turn itself a kind of computer composed of one or more computer processing cores its own computer memory and its own input output adapters. For further explanation therefore sets forth a block diagram of an example compute node useful in a parallel computer capable of messaging using RDMA according to embodiments of the present invention. The compute node of includes a plurality of processing cores as well as RAM . The processing cores of may be configured on one or more integrated circuit dies. Processing cores are connected to RAM through a high speed memory bus and through a bus adapter and an extension bus to other components of the compute node. Stored in RAM is an application program a module of computer program instructions that carries out parallel user level data processing using parallel algorithms.

Also stored RAM is a parallel communications library a library of computer program instructions that carry out parallel communications among compute nodes including point to point operations as well as collective operations. A library of parallel communications routines may be developed from scratch for use in systems according to embodiments of the present invention using a traditional programming language such as the C programming language and using traditional programming methods to write parallel communications routines that send and receive data among nodes on two independent data communications networks. Alternatively existing prior art libraries may be improved to operate according to embodiments of the present invention. Examples of prior art parallel communications libraries include the Message Passing Interface MPI library and the Parallel Virtual Machine PVM library.

Also stored in RAM is an operating system a module of computer program instructions and routines for an application program s access to other resources of the compute node. It is typical for an application program and parallel communications library in a compute node of a parallel computer to run a single thread of execution with no user login and no security issues because the thread is entitled to complete access to all resources of the node. The quantity and complexity of tasks to be performed by an operating system on a compute node in a parallel computer therefore are smaller and less complex than those of an operating system on a serial computer with many threads running simultaneously. In addition there is no video I O on the compute node of another factor that decreases the demands on the operating system. The operating system may therefore be quite lightweight by comparison with operating systems of general purpose computers a pared down version as it were or an operating system developed specifically for operations on a particular parallel computer. Operating systems that may usefully be improved simplified for use in a compute node include UNIX Linux Windows XP AIX IBM s i5 OS and others as will occur to those of skill in the art.

The example compute node of includes several communications adapters for implementing data communications with other nodes of a parallel computer. Such data communications may be carried out serially through RS 232 connections through external buses such as USB through data communications networks such as IP networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a network. Examples of communications adapters useful in apparatus for messaging using RDMA include modems for wired communications Ethernet IEEE 802.3 adapters for wired network communications and 802.11b adapters for wireless network communications.

The data communications adapters in the example of include a Gigabit Ethernet adapter that couples example compute node for data communications to a Gigabit Ethernet . Gigabit Ethernet is a network transmission standard defined in the IEEE 802.3 standard that provides a data rate of 1 billion bits per second one gigabit . Gigabit Ethernet is a variant of Ethernet that operates over multimode fiber optic cable single mode fiber optic cable or unshielded twisted pair.

The data communications adapters in the example of include a JTAG Slave circuit that couples example compute node for data communications to a JTAG Master circuit . JTAG is the usual name used for the IEEE 1149.1 standard entitled Standard Test Access Port and Boundary Scan Architecture for test access ports used for testing printed circuit boards using boundary scan. JTAG is so widely adapted that at this time boundary scan is more or less synonymous with JTAG. JTAG is used not only for printed circuit boards but also for conducting boundary scans of integrated circuits and is also useful as a mechanism for debugging embedded systems providing a convenient back door into the system. The example compute node of may be all three of these It typically includes one or more integrated circuits installed on a printed circuit board and may be implemented as an embedded system having its own processing core its own memory and its own I O capability. JTAG boundary scans through JTAG Slave may efficiently configure processing core registers and memory in compute node for use in dynamically reassigning a connected node to a block of compute nodes useful in systems for messaging using RDMA according to embodiments of the present invention.

The data communications adapters in the example of include a Point To Point Network Adapter that couples example compute node for data communications to a network that is optimal for point to point message passing operations such as for example a network configured as a three dimensional torus or mesh. The Point To Point Adapter provides data communications in six directions on three communications axes x y and z through six bidirectional links x x y y z and z .

The data communications adapters in the example of include a Global Combining Network Adapter that couples example compute node for data communications to a global combining network that is optimal for collective message passing operations such as for example a network configured as a binary tree. The Global Combining Network Adapter provides data communications through three bidirectional links for each global combining network that the Global Combining Network Adapter supports. In the example of the Global Combining Network Adapter provides data communications through three bidirectional links for global combining network two to children nodes and one to a parent node .

The example compute node includes multiple arithmetic logic units ALUs . Each processing core includes an ALU and a separate ALU is dedicated to the exclusive use of the Global Combining Network Adapter for use in performing the arithmetic and logical functions of reduction operations including an allreduce operation. Computer program instructions of a reduction routine in a parallel communications library may latch an instruction for an arithmetic or logical function into an instruction register . When the arithmetic or logical function of a reduction operation is a sum or a logical OR for example the collective operations adapter may execute the arithmetic or logical operation by use of the ALU in the processing core or typically much faster by use of the dedicated ALU using data provided by the nodes on the global combining network and data provided by processing cores on the compute node .

Often when performing arithmetic operations in the global combining network adapter however the global combining network adapter only serves to combine data received from the children nodes and pass the result up the network to the parent node . Similarly the global combining network adapter may only serve to transmit data received from the parent node and pass the data down the network to the children nodes . That is none of the processing cores on the compute node contribute data that alters the output of ALU which is then passed up or down the global combining network . Because the ALU typically does not output any data onto the network until the ALU receives input from one of the processing cores a processing core may inject the identity element into the dedicated ALU for the particular arithmetic operation being perform in the ALU in order to prevent alteration of the output of the ALU . Injecting the identity element into the ALU however often consumes numerous processing cycles. To further enhance performance in such cases the example compute node includes dedicated hardware for injecting identity elements into the ALU to reduce the amount of processing core resources required to prevent alteration of the ALU output. The dedicated hardware injects an identity element that corresponds to the particular arithmetic operation performed by the ALU. For example when the global combining network adapter performs a bitwise OR on the data received from the children nodes dedicated hardware may inject zeros into the ALU to improve performance throughout the global combining network .

In the example of the compute node may utilize message unit MU hardware for I O data transport across I O links and for flexible I O configurations across an I O torus. An I O software architecture may specify a network layer on which I O services are built. The network layer components may be modeled after the Open Fabrics RDMA framework or OpenFabrics Enterprise Distribution OFED framework an organization of companies and individuals providing open source software in the high performance computing HPC arena. As such internal network interfaces may be modeled after the OFED interfaces and processes running in the I O node environment may communicate over I O links using standard OFED RDMA verbs.

For further explanation sets forth a block diagram of an example Point To Point Adapter useful in systems for messaging using RDMA according to embodiments of the present invention. The Point To Point Adapter is designed for use in a data communications network optimized for point to point operations a network that organizes compute nodes in a three dimensional torus or mesh. The Point To Point Adapter in the example of provides data communication along an x axis through four unidirectional data communications links to and from the next node in the x direction and to and from the next node in the x direction . The Point To Point Adapter of also provides data communication along a y axis through four unidirectional data communications links to and from the next node in the y direction and to and from the next node in the y direction . The Point To Point Adapter of also provides data communication along a z axis through four unidirectional data communications links to and from the next node in the z direction and to and from the next node in the z direction .

For further explanation sets forth a block diagram of an example Global Combining Network Adapter useful in systems for messaging using RDMA according to embodiments of the present invention. The Global Combining Network Adapter is designed for use in a network optimized for collective operations a network that organizes compute nodes of a parallel computer in a binary tree. The Global Combining Network Adapter in the example of provides data communication to and from children nodes of a global combining network through four unidirectional data communications links and also provides data communication to and from a parent node of the global combining network through two unidirectional data communications links .

For further explanation sets forth a line drawing illustrating an example data communications network optimized for point to point operations useful in systems capable of messaging using RDMA according to embodiments of the present invention. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with point to point data communications adapters similar to the one illustrated for example in with data communications links on three axis x y and z and to and fro in six directions x x y y z and z . The links and compute nodes are organized by this data communications network optimized for point to point operations into a three dimensional mesh . The mesh has wrap around links on each axis that connect the outermost compute nodes in the mesh on opposite sides of the mesh . These wrap around links form a torus . Each compute node in the torus has a location in the torus that is uniquely specified by a set of x y z coordinates. Readers will note that the wrap around links in the y and z directions have been omitted for clarity but are configured in a similar manner to the wrap around link illustrated in the x direction. For clarity of explanation the data communications network of is illustrated with only 27 compute nodes but readers will recognize that a data communications network optimized for point to point operations for use in messaging in a parallel computer using RDMA in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes. For ease of explanation the data communications network of is illustrated with only three dimensions but readers will recognize that a data communications network optimized for point to point operations for use in messaging in a parallel computer using RDMA in accordance with embodiments of the present invention may in facet be implemented in two dimensions four dimensions five dimensions and so on. Several supercomputers now use five dimensional mesh or torus networks including for example IBM s Blue Gene Q .

For further explanation sets forth a line drawing illustrating an example global combining network useful in systems capable of messaging using RDMA according to embodiments of the present invention. The example data communications network of includes data communications links connected to the compute nodes so as to organize the compute nodes as a tree. In the example of dots represent compute nodes of a parallel computer and the dotted lines between the dots represent data communications links between compute nodes. The data communications links are implemented with global combining network adapters similar to the one illustrated for example in with each node typically providing data communications to and from two children nodes and data communications to and from a parent node with some exceptions. Nodes in the global combining network may be characterized as a physical root node branch nodes and leaf nodes . The physical root has two children but no parent and is so called because the physical root node is the node physically configured at the top of the binary tree. The leaf nodes each has a parent but leaf nodes have no children. The branch nodes each has both a parent and two children. The links and compute nodes are thereby organized by this data communications network optimized for collective operations into a binary tree . For clarity of explanation the data communications network of is illustrated with only 31 compute nodes but readers will recognize that a global combining network optimized for collective operations for use in RDMA in a parallel computer in accordance with embodiments of the present invention may contain only a few compute nodes or may contain thousands of compute nodes.

In the example of each node in the tree is assigned a unit identifier referred to as a rank . The rank actually identifies a task or process that is executing a parallel operation according to embodiments of the present invention. Using the rank to identify a node assumes that only one such task is executing on each node. To the extent that more than one participating task executes on a single node the rank identifies the task as such rather than the node. A rank uniquely identifies a task s location in the tree network for use in both point to point and collective operations in the tree network. The ranks in this example are assigned as integers beginning with 0 assigned to the root tasks or root node 1 assigned to the first node in the second layer of the tree 2 assigned to the second node in the second layer of the tree 3 assigned to the first node in the third layer of the tree 4 assigned to the second node in the third layer of the tree and so on. For ease of illustration only the ranks of the first three layers of the tree are shown here but all compute nodes in the tree network are assigned a unique rank.

For further explanation sets forth a flow chart illustrating an example method for messaging in a parallel computer using RDMA according to embodiments of the present invention. The parallel computer of includes a plurality of nodes . In the example of each node may be embodied for example as a compute node an I O node or other module of automated computing machinery that forms a parallel computer .

In the example of each node includes a messaging unit . The messaging units of may be embodied for example as a communications adapter for point to point data communications with other nodes in the parallel computer as a library of data communications operations for carrying out data communications with other nodes in the parallel computer or any combination thereof. In the example of the messaging units may carry out data communications with other nodes in the parallel computer for example over a torus network as described above with reference to .

The example method of includes receiving by a kernel of the first node through an API a send work request . The API of may include one or more software routines that an application level program can invoke to initiate a send work request . In the example of a work request represents a request for the recipient of the work request to perform some task. The send work request of is a particular type of work request. The send work request of represents a request for the recipient of the send work request to perform the task of sending data to another node. In the example of the send work request is received by the first node and as such the send work request represents a request for the first node to perform the task of sending data to another node designated here as the second node .

In the example method of the send work request includes a local virtual address on the first node from which data is to be transferred. The local virtual address of points to a location in virtual memory of the first node that is mapped to actual physical memory of the first node for example by a page table that is accessible by the kernel . In the example method of the send work request also includes a specification of a size of data that is to be transferred from the first node to the second node .

In the example method of data can be transferred from the first node to the second node by exchanging messages between a messaging unit of the first node and a messaging unit of the second node . Such messages may have a predefined packet size to include control information such as the address of the recipient as well as a payload representing the actual data that is to be transferred. In the example of the size of data to be transferred from the first node to the second node is larger than a messaging packet size for sending data from the first node to a second node . Because the size of the data to be transferred from the first node to the second node is larger than the messaging packet size transferring the data referenced in the send work request by exchanging messages between the messaging unit of the first node and the messaging unit of the second node would necessitate exchanging multiple messages.

The example method of also includes translating the local virtual address on the first node to a physical address on the first node . The physical address represents the physical address in memory from which data is to be transferred. In the example of translating the local virtual address on the first node to a physical address on the first node may be carried out for example by looking up the virtual address in a page table stored on the first node by looking up the virtual address in a TLB stored on the first node by using an address translation algorithm and so on.

The example method of also includes creating by the kernel of the first node a local RDMA object that includes a counter set to the size of a messaging acknowledgment field. In the example of a messaging acknowledgment field represents a data structure used to store acknowledgement data that is sent in response to the receipt of a message. For example if the first node sent a message to the second node using the messaging unit in the first node the first node would expect to receive acknowledgment data from the second node indicating that the message was received by the second node . Such acknowledgment data may include information used to verify that the message was received correctly such as for example a checksum. In the example of the acknowledgment data would be written into a messaging acknowledgment field in computer memory of the first node . Because the local RDMA object includes a counter set to the size of a messaging acknowledgment field as acknowledgment data is received by the first node the first node may decrement the counter for the purpose of determining when all acknowledgment data has been received. In the example of the size of a messaging acknowledgment field may be expressed in any unit of measure for example such as byte kilobyte megabyte and so on.

The example method of also includes sending a message from a messaging unit in the first node to a messaging unit in the second node . In the example of the message includes a RDMA read operation request the physical address of the local RDMA object and the physical address on the first node from which data is to be transferred from. In the example of a RDMA read operation request is sent from the first node to the second node to prompt the second node to read data stored in memory of the first node into memory on the second node . In such an example the RDMA read operation request is accompanied by the physical address on the first node from which data is to be transferred from so that the second node is informed of the address in memory on the first node that the data is to be read from.

The example method of also includes receiving by the first node responsive to the second node s execution of the RDMA read operation request acknowledgment data in the local RDMA object . In the example of acknowledgment data is sent from the recipient of a message to the sender of a message in response to the receipt of a message. For example if the first node sent a message to the second node using the messaging unit in the first node the first node would expect to receive acknowledgment data from the second node indicating that the message was received by the second node . Such acknowledgment data may include information used to verify that the message was received correctly such as for example a checksum. In the example of the acknowledgment data is written into a messaging acknowledgment field in the local RDMA object of the first node .

For further explanation sets forth a flow chart illustrating an example method for messaging in a parallel computer using RDMA according to embodiments of the present invention. The example method of is similar to the example method of as it also includes 

The example method of also includes populating by a kernel on the second node receive work requests. In the example of a work request represents a request for the recipient of the work request to perform some task. The receive work requests of are a particular type of work request. The receive work requests of represent a request for the recipient of the receive work requests to perform the task of receiving data from another node. In the example of the receive work requests reside on the second node and as such the receive work requests represent a request for the second node to perform the task of receiving data from another node designated here as the first node . In particular the receive work requests represent a request for the second node to perform the task of receiving data that was sent from the first node to the second node in response to the send work request carried out by the first node . As such the receive work requests can be populated with information such as for example the size of data to be transferred from the first node to the second node an identification of the first node as the sender of the data to be received by the second node and so on such that executing the populated receive work requests causes the second node to receive data that was sent from the first node to the second node in response to the send work request carried out by the first node .

The example method of also includes receiving by the messaging unit in the second node the message. In the example of the second node can receive the message that includes a RDMA read operation request the physical address of the local RDMA object and other necessary information over a data communications network such as the torus network as described above with reference to .

The example method of also includes creating by the kernel of the second node a local RDMA object that includes a counter set to the size of the amount of data to be transferred from the first node to the second node . In the example of the size of the amount of data to be transferred from the first node to the second node may be included for example in the RDMA read operation request . Because the local RDMA object includes a counter set to the size of the amount of data to be transferred from the first node to the second node the second node may decrement the counter as data is read from the first node for the purpose of determining when all data has been received. In the example of the size of the amount of data to be transferred from the first node to the second node may be expressed in any unit of measure for example such as byte kilobyte megabyte and so on.

The example method of also includes transferring by one or more RDMA operations executing on the messaging unit in the second node the data to be transferred from the first node to the second node . In the example of the one or more RDMA operations executing on the messaging unit in the second node may be embodied for example as computer program instructions executing on computer hardware such as a processor that transfer data between messaging units in nodes. In the example of the RDMA operations executing on the messaging unit may include for example computer program instructions for retrieving data from memory on the first node encapsulating the data to be transferred and transmitting the data over a computer network. In the example of the RDMA operations transfer data without using the central processing unit s of the nodes such that the data transfers occur without creating heavy workload requirements for the central processing unit s of the nodes.

The example method of also includes transferring by one or more RDMA operations executing on the messaging unit in the second node acknowledgment data from the second node to the first node . In the example of the RDMA operations executing on the messaging unit may include for example computer program instructions for retrieving acknowledgement data from memory on the second node encapsulating the acknowledgment data to be transferred and transmitting the acknowledgment data over a computer network.

In the example of the send work request is thereby carried out through the use of RDMA operations rather than through the use of messages that are exchanged between the messaging units . That is data is transferred from the first node to the second node as is requested in the send work request by executing an RDMA read operation on the second node so as to directly read the data from memory in the first node . Similarly the transfer of data from the first node to the second node is acknowledged by the second node by executing an RDMA write operation on the second node so as to place acknowledgment data in the computer memory of the first node .

For further explanation sets forth a flow chart illustrating an example method for messaging in a parallel computer using RDMA according to embodiments of the present invention. The example method of is similar to the example method of as it also includes 

The example method of also includes decrementing by the kernel on the first node the counter by an amount equal to the size of acknowledgment data received from the second node . In the example of the counter is set to the size of a messaging acknowledgment field. By decrementing the counter by an amount equal to the size of acknowledgment data received from the second node the kernel can determine when all acknowledgment data has been received. That is when the counter is equal to zero the kernel can determine that enough data to populate the entire messaging acknowledgment field has been received thereby indicating that all of the acknowledgment data has been received from the second node . Such acknowledgment data may subsequently be used to determine whether the message that included a RDMA read operation request was received as expected.

The example method of also includes notifying by the kernel on the first node a user level application that the acknowledgment data has been received by the first node when the counter is equal to zero. When the counter is equal to zero the kernel can determine that enough data to populate the entire messaging acknowledgment field has been received thereby indicating that all of the acknowledgment data has been received from the second node . As such the kernel may therefore notify the user level application that all acknowledgment data has been received by the first node so that the user level application can analyze the acknowledgment data to verify that the message was received by the second node to determine that the message should be retransmitted and so on.

In the example method of notifying a user level application that the acknowledgment data has been received by the first node when the counter is equal to zero includes raising an interrupt in the user level application . In the example of raising an interrupt in the user level application may be carried out by issuing an interrupt request IRQ indicating the need for attention by an interrupt handler. Raising an interrupt in the user level application can cause a context switch to the interrupt handler that can signal to the user level application that all acknowledgment data has been received by the first node .

In the example method of notifying a user level application that the acknowledgment data has been received by the first node when the counter is equal to zero can alternatively include being polled by the user level application . In the example of the user level application may include computer program instructions that enable the user level application to actively sample to the status of the send work request and subsequent DMA read operation request for example by periodically checking the value of the counter in the local RDMA object .

The example method of also includes sending an error message indicating that the send work request cannot be serviced. In the example of the send work request may not be serviced for example due to a communications failure between the first node and the second node due to an error reading from memory in the first node due to an error writing to memory in the second node and so on. In response to determining that an error has occurred an error message can be sent to the user level application so that the user level application can retry the send work request or simply proceed without executing the R send work request .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

