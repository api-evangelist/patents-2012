---

title: Method and system for communicating within a messaging architecture using a structured data object
abstract: A method, system, and computer-program product for communicating within a messaging architecture using a structured data object are disclosed. The method includes identifying a structured data object configured to represent structured data, receiving the structured data at a messaging system, generating a message that includes the structured data, and sending the message. The structured data object is configured to be accessed by an application and the messaging system, and includes a request element and a response element. The sending includes transferring the message via the messaging system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09501764&OS=09501764&RS=09501764
owner: Oracle International Corporation
number: 09501764
owner_city: Redwood Shores
owner_country: US
publication_date: 20121005
---
The present invention relates to providing communications via a messaging system and more particularly to a method and system for communicating within a messaging architecture using a structured data object.

As network based communications also referred to colloquially as online communications have become increasingly important in the business academic and personal communications arenas improved mechanisms for quickly and efficiently using such functionality have also become increasingly important. For example messaging systems e.g. online chat instant messaging and the like are employed in a variety of settings from internal business communications to providing customer service to social networking.

Such applications employ what are referred to herein as messaging architectures which allow their users to quickly communicate with one another by for example typing in textual information into a messaging application or web page. A properly designed messaging architecture quickly delivers messages while providing for future upgrades scalability and other avenues of growth. At a basic level a messaging architecture provides functionality such as 

Central to such an architecture is a server system that includes a messaging server which is typically a collection of components capable of sending and delivering messages. In addition to mechanisms provided in such a messaging server other components of such a server system may include a Lightweight Directory Access Protocol LDAP server and a Domain Name System DNS server. Many enterprises have existing LDAP servers databases and related infrastructure that can be used in conjunction with a messaging server to provide support for the aforementioned sending and delivery of messages.

One example of such messaging is online chat which may refer to any kind of communication over a network e.g. the Internet that offers a real time or near real time direct transmission of messages e.g. text voice or video based messages from a sender to a receiver. Such an online chat system may provide point to point e.g. one on one communications as well as multicast communications i.e. communications from one sender to many receivers . Voice and video based chat may for example be supported as a feature of a Web conferencing service. In a push mode architecture messages flow between two or more people using personal computers smartphones or other computing devices. Along with shared clients such messaging techniques may offer real time or near real time direct written language based communications typically conveyed over a network e.g. the Internet . Such techniques may be configured to provide point to point communications as well as multicast communications i.e. the ability to send messages from one sender to many receivers . Online chat has become popular in enterprise collaboration e.g. in customer service and social networking.

However despite the advanced features offered by today s messaging systems the available technologies fail to adequately address certain aspects of messaging systems in a variety of applications as well as the needs of users employing such messaging systems. For example interactions between a user and the messaging system employed typically involve numerous human initiated operations and human interpretation of the information thus conveyed.

One shortcoming of today s messaging systems is that such systems fail to provide an easy to use mechanism for conveying information between such systems and other applications the messaging system user may employ. When using online chat as a separate communication channel with unstructured data e.g. text several challenges exist. For example chat data is not integrated into the systems used requiring many copy and paste operations. This is particularly problematic in commercial settings where for example a customer service representative typically conducts several conversations simultaneously and thus may have not only several messaging dialogues open at once but also some number of application dialogues. Clearly keeping track of so many dialogue windows and which ones belong to which conversation can be tremendously challenging. Further the other party s response may not be formatted properly and or contain the proper information for use by the application program employed. This requires mental processing and re typing of the information into the application program s dialogue further complicating the process.

One solution to the aforementioned problems involves participants in a messaging session completing a survey in advance of communicating with other parties via the messaging system sometimes referred to in an online chat environment as a pre chat survey . In such a scenario a set of questions is presented to potential participants before the messaging session begins in order to collect information regarding the participant and their needs e.g. information about a customer and their situation . However such an approach is not without its problems. For example a pre chat survey creates a barrier between participants e.g. a customer service agent and customer by forcing one or more of them to complete such a questionnaire prior to communicating with other participants potentially causing the customer to abandon the messaging session before the session has even begun. Further a pre chat survey cannot be used during a messaging session only beforehand. Further still a pre chat survey supports only predefined questions in a predefined order whether or not any given question presented therein is pertinent to the user and or the situation at hand. Having to wade through a number of questions some of which may be completely irrelevant to the user and their situation only serves to frustrate users and discourage them from using the messaging system to communicate with other participants.

Another solution to the aforementioned problems involves messaging session participants collaborating by way of common access to some manner of collaborative web site. This may be accomplished using what is referred to in certain scenarios as joint form filling by co browsing a web site that affords simultaneous access or some other such approach. In a system that supports joint form filling the participants both access a web page by way of a co browsing feature with one user e.g. a customer completing a web page that the other user e.g. an agent can also view and thus direct entry of information by the first user . Certain such systems support joint form filling by allowing cutting and pasting from other windows into the chat window.

However this alternative also suffers from a variety of drawbacks. Such problems include a lack of security both all users can see the information entered as discussed in greater detail subsequently the need for a separate web page which results in the messaging session becoming fragmented the mandatory presentation and completion of the entire questionnaire with the attendant problems thereof including increased complexity and overhead for both parties and the resource intensive nature of such an approach having to load view complete a completely separate web page document among other such shortcomings.

Further the aforementioned cut and paste features are only useful in personal collaboration when both parties can see and access the same form a situation that can prove problematic. In the CRM context for example sharing the agent s forms with customers can be particularly awkward because such forms are configured to address the agent s needs not those of the customer and may in fact allow a party to see information meant solely for the other party s use . Moreover because the shared interactive web application and the messaging window must be presented in two separate browser windows mobile users are unable to view the message communications when interacting with the shared interactive web application. In such systems the two parties interacting must also maintain separate windows for the messaging session and form.

In this vein another possible solution is the use of a collaborative approach that employs two or more web sites or some combination of web site s and application program s . In such an out of band approach in which certain operations actions communications and the like take place via a communications channel other than the primary communications channel users essentially run a messaging system and a separate web site or application program in tandem. In such an approach the participants employ collaborative structures that allow for the creation viewing and editing of documents by launching a separate document based dialog window. However opening such documents in windows separate from that of the messaging session fragments the conversation causing inefficiency errors and ultimately frustration and fails to provide a single comprehensive view of the messaging session. Such problems only become worse as the number of such documents and so windows in the user interface are opened.

Further existing solutions define supported types of documents must be defined prior to the messaging session causing the same issues as those faced by approaches employing a pre chat survey. If no such document is defined prior to the messaging session communications devolve into the usual unstructured format with the attendant problems such systems are intended to address . Further given that one or more communications channels other than the primary communications channel are employed i.e. the messaging system no record of such communications are maintained at least with regard to recording mechanisms extant in the primary communications channel .

As alluded to earlier another usability problem encountered in the design and operation of messaging systems pertains to security and privacy concerns. For example because messaging system transcripts are displayed in plain text user concerns with regard to the need for users to enter sensitive information often arise e.g. in order to verify their identities by entering personal identification numbers PINs the last four digits of their SSNs or other such confidential information . Even though the security of a messaging session may be guaranteed by the networking protocol employed messaging system users often express concern over security and privacy issues at least because such information appears as plain text in the messaging session s transcripts rather than being masked as would normally be the case when completing web forms . In this regard users of such systems suffer from the loss of a sense of security in that sensitive information e.g. social security numbers passwords and other such sensitive information is not masked or otherwise protected. There is thus a need to provide an easy to use mechanism for maintaining the security of information conveyed thereby while avoiding inefficiency and complexity.

To address user s security concerns some messaging systems simply advise users not to enter personal or sensitive information into the messaging session. Instead certain approaches have users employ the aforementioned pre chat survey redirecting users to a separate secure web site e.g. an SSL protected web page . As noted such an approach is something less than ideal causing fragmented and confusing interactions thereby causing errors and compromising user satisfaction among other failings. Another approach is to provide messaging services only to authenticated customers but not to the general public thereby drastically restricting the use of such communications and preventing the general use of such communications in particular without the need for a priori information such as a username and password for the site .

Another alternative to address security concerns might be the use of pattern matching techniques to identify and then mask certain types of sensitive information e.g. Social Security Numbers credit card numbers and so on in messaging system transcript display and storage. However as an initial matter such pattern matching must be performed prior to or simultaneously with a message being submitted into a messaging session. Even if such masking were achievable there would be no opportunity to edit a response once the information was submitted into the messaging session in fact a problem faced by all existing techniques that submit information into a messaging session . Further such identification and masking experiences errors with regularity sufficient to raise users concerns. Further still the use of pattern matching typically fails to comprehend sensitive information that does not have a specific pattern e.g. certain account identifiers passwords and other such information that varies in length and content .

What is therefore needed is a messaging architecture that provides for efficient interaction between a messaging system of the messaging architecture and one or more applications. Preferably such a messaging system should provide for an efficient and secure user interface when effecting the communication of information using such a messaging system. Further such a messaging system should improve the efficiency and security provided by such a messaging system when interacting with other applications.

In one embodiment a method system and computer program product for communicating within a messaging architecture using a structured data object are disclosed. The method includes identifying a structured data object configured to represent structured data receiving the structured data at a messaging system generating a message that includes the structured data and sending the message. The structured data object is configured to be accessed by an application and the messaging system and includes a request element and a response element. The sending includes transferring the message via the messaging system.

The following is intended to provide a detailed description of an example of the invention and should not be taken to be limiting of the invention itself. Rather any number of variations may fall within the scope of the invention which is defined in the claims following the description.

As discussed online e.g. web based messaging systems have become a standard communication channel in social networking commercial settings and government applications. For example in a commercial setting online messaging is a primary customer contact channel for companies especially in the sales and customer service arenas. A well implemented strategy in this regard can transform a business s ability to drive sales increase productivity achieve operational savings and deliver an excellent customer experience.

In such a customer relationship management CRM setting the communication pattern carried out by a customer service agent assisting a customer can be viewed as a Question Answer Lookup QAL process though in fact the last activity in this paradigm can be any activity in furtherance of or related to the interaction taking place . In the question phase of this paradigm an agent asks a customer a question. In the answer phase the customer replies to the agent providing the agent with the requested information. Finally in the lookup stage the agent uses the answer submitted in the messaging session to perform actions such as identifying the customer locating relevant information or other such actions.

In order to address the aforementioned problems with usability security integration and other such issues embodiments of the present invention facilitate messaging communications through the provision of GUI graphical UI user interface elements such as form widgets or other comparable constructs within online messaging conversations. Instead of asking questions in free form unstructured text an agent is able to send a form to a customer as a part of a message. The customer is then able to complete the form in the customer s messaging window and submit the completed form into the messaging session. In so doing the customer is able to send a response with the completed data from the customer s computing system to that of the agent. Such inline forms structure customer input data in the messaging session such that the information can more easily be interpreted and used by the agent in updating system applications and can even be used to provide such functionality automatically.

Embodiments of the present invention enjoy a number of advantages over existing approaches. For example as compared to various of the earlier mentioned collaborative approaches a messaging system according to embodiments of the present invention provide the requisite functionality within the user interface presented by the messaging system i.e. within the messaging session rather than having to resort to multiple windows manual cutting and pasting and other such machinations. Further as a result of the in band approach employed a messaging system according to embodiments of the present invention is able to provide a single coherent view of the messaging session for both or all participants. Such a messaging system is also able to maintain a record of the communications that occur including any messages that contain forms and or associated information. Such an in band approach also allows messaging sessions employing forms to be conducted using mobile devices. Further still a messaging system according to embodiments of the present invention facilitates communication through the ability to create and send forms that are created dynamically on the fly rather than being limited to a pre defined set of message types.

As noted earlier some messaging systems allow for simple cut and paste operations e.g. communicating information pasted from another application in order to support joint form filling but force both parties to use the same form. By contrast a messaging system according to embodiments of the present invention allow an agent to use applications web forms and the like that are geared to the needs of the agent while presenting the customer with forms that are geared to the customer s needs. Conversely joint form filling implementations are by definition incapable of providing different interfaces to different participants at least because such joint accessing and completion can only be achieved by the presentation of the same form to both parties. In a messaging system according to embodiments of the present invention the messaging system creates a new form e.g. dynamically using pushed input fields so that confidential information e.g. customer rating information that might be contained in a form in the agent s console isn t visible on the customer s interface.

Further in implementations of messaging systems according to embodiments of the present invention that provide support for mobile applications customers employing mobile devices are able view other message communications e.g. textual portions of a messaging session when interacting with a form that an agent has submitted into a messaging session. Such interactions are made possible by the in band nature of such a system s communications and user interface. This is in contrast with the need for two separate user interface windows e.g. a shared web page and a messaging window mandated by the use of existing technology.

In light of the aforementioned advantages as well as others discussed subsequently and still others that will be evident from the present disclosure as a whole it will be appreciated that a messaging system that allows agents to avoid the need to manually enter or copy and paste customer data across different interfaces is both desirable and advantageous. These and other such advantages are illustrated in the examples now and subsequently presented.

Clearly a user e.g. agent employing such a messaging system faces a number of challenges. First because messaging sessions e.g. chat transcripts the text content in the chat session are unstructured and not integrated into other system applications copy and paste functionality or duplicated typing across different user interfaces is required in order to use the data entered by a customer. For example when identifying a customer an agent might ask for the customer s name and their company s name. After the customer enters the requisite information and submits that information into the messaging session the agent must then copy and paste the requisite information e.g. keywords from the messaging window to the customer profile management interface. Sometimes the free form chat response from a customer must be mentally processed by the agent and then confirmed with the customer. As another example if a customer indicates that she should be available next Wednesday for an onsite visit in order to follow the grammatical rules specified by the agent s company the agent has to figure out the exact date confirm that date with the customer and enter that date into the company s calendar to create an event. Unstructured data that requires re entry among one or more different interfaces makes the use of such messaging systems inefficient and error prone. By marked contrast embodiments of the present invention avoid the aforementioned problems by allowing users to submit one or more forms into the messaging session providing a flexible solution that provides a single comprehensive view of the messaging session and information conveyed thereby

However in embodiments of the claimed invention forms are communicated as messages which provides numerous and valuable advantages. In the question phase instead of typing a question in plain text an agent is able to forward a form to a customer. The form is posted as a message into the messaging session ready for the customer to complete. In the answer phase the customer completes the form that appears in the messaging session and then submits the completed form back into the messaging session. The submission generates a new message with a list of possibly read only name value pairs. The name is the label of individual input fields on the form and the value is the input data. Treating form forwarding and form submission as separate messages provides a single complete view of the messaging session to both parties by maintaining a record of such messaging transactions. Because form data is structured the lookup phase can be automated. At the end of the lookup phase the lookup results as well as associated action buttons if necessary are appended at the end of the form submission message in the agent view of the messaging session. Form re submission is also straightforward. Customers can generate a new message by entering different data and re submitting the form.

One of the advantages of embodiments of the present invention include the availability of form features in the messaging session. In addition to automating the lookup phase without requiring agents to manually move data between the messaging application window and other applications support for the use of forms in messaging sessions enhances the user experience of the QAL paradigm by exploiting the form s features.

First form widgets such as a date time picker choice list or input with auto complete can be leveraged to improve the input efficiency at the customer side. For example instead of typing in a long string of the model number of a problematic printer a customer can choose the model from a choice list populated by the model numbers from all the printers that he has bought. Moreover the customers need only to type in the required values for example John Smith without the extra typing to describe what the values are about for example my name is John Smith . Such input efficiency improvement can be significant to the customers who are using mobile devices to chat since typing in mobile devices is known to be slow and unwieldy. Such features are discussed for example in connection with below.

Second web forms can mask sensitive data submission without specifying patterns to match the specific data types. As a result the same sense of security gained from a web form submission process can be achieved during a chat session. Based on privacy configurations sensitive data submissions can be either masked only on the customer side or masked on both sides automatically launching the system process without revealing sensitive information to the agent as discussed subsequently in connection with .

Third data validation supported by forms can automatically detect certain types of input errors from customers and thus prevent invalid data from being submitted which is impossible with text based chat. Form based data validation not only reduces network traffic but also relieves agents from manually validating customer data as described for example in connection with below.

Turning to departure return dates in itinerary form once this form has been pushed to the customer by the agent s submission of the form into the messaging session the customer is able to enter the desired departure and return dates and optionally times . Once again in the manner of using itinerary form the customer can enter and or return dates and times in itinerary form by manually typing the requisite information into the input fields of itinerary form or by using drop down menus to enter the information. For example a user can enter a departure date in a departure date field manually or by selecting a date from a drop down menu accessed from a drop down menu icon . Similarly the user can enter the date of return in a return date field either manually or by selecting a date using a drop down menu icon .

In the example depicted in the customer has selected drop down menu icon resulting in the display of a calendar . Calendar allows the customer to select the desired date from the dates displayed and or scroll through other dates e.g. months of a given year and select the desired date from the month and year to which the customer has scrolled. The customer can select the time of day for departure and return by manually entering a time in a departure time field or by selecting a time of day from a drop down menu accessed by selecting a drop down menu icon an example of which is depicted in as a drop down menu icon . Similarly the customer can provide a time at which the customer desires to return by entering the desired time of day in a return time field . Alternatively the customer can select a drop down menu icon and select from the times of day presented in the resulting menu displayed.

In certain embodiments the messaging system can present the customer with default values in one or more of the aforementioned fields. For example in itinerary form departure time field and return time field are shown as having been presented to the customer with a default value of Anytime signifying that the customer has no preference as to the time of day for departure return .

Once the customer is satisfied with the entries in itinerary form the customer selects a submit button . If the customer makes a mistake in entering information on itinerary form or wishes to make a change to the information entered therein the customer can clear the existing entry entries by selecting i.e. clicking on a reset button the selection of a button causing the activation of the button s functionality . As will be appreciated providing the customer with the ability to enter such information directly into a form which can then be communicated to the agent as single complete response greatly simplifies the tasks required of the agent whether to obtain information necessary to assist the customer or perform some other function. Advantages of this approach include a marked reduction in the efforts required of the agent to query the customer as well as a reduced risk of errors in the information thus obtained.

In the manner of itinerary form form provides the customer with the ability to enter a departure destination cities and departure return times dates either manually or by using one or more drop down menus. As before form also provides a submit button and a reset button with functionality comparable to that of such earlier described elements. As will be appreciated in light of the present disclosure and particularly discussions in connection with certain subsequent figures the various elements of form e.g. submit button and reset button are depicted as remaining enabled and thus allow for the re submission of information via form . As will be appreciated in light of the present disclosure other alternatives for the presentation of such information and the implementation of such functionality can be realized in a messaging system according to embodiment of the present invention. Such alternatives are discussed subsequently for example in connection with .

Upon selection of submit button by the customer the results of such selection are displayed in agent chat dialogue as well as customer chat dialogue . The selection of submit button results in the display of textual information in a form in agent chat dialogue and textual information in a form in customer chat dialogue . In a manner comparable to the presentation of other such functionality the messaging system presents a search button in form . Search button allows the agent to submit the relevant information provided by the customer and so appearing in form to one or more application programs used by the agent to provide the requisite information and or services to the customer e.g. searching for flights in an online flight reservation system . As will be appreciated in light of the present disclosure and particularly discussions in connection with certain subsequent figures the process of submitting the relevant information to the one or more application programs can in fact be performed automatically upon submission of the information into the messaging session.

As can be seen the messaging system can be designed to update a form such as form in agent chat dialogue to reflect information entered by the customer and changes made thereto. As can also be seen in once the customer submits the information via the form in question the information submitted via the form then appears as text possibly in another form in agent chat dialogue . Also it will be observed that search button is depicted in as being disabled a result of form having been used to submit the information thus received to the online flight reservation system and the desire to prevent the agent from mistakenly resubmitting the information. Alternatively search button could be configured to remain enabled thereby allowing for the resubmission of the information in form . Further still such a configuration could be employed to allow the agent to submit the information appearing in form while that information was being entered by the customer such that in a given scenario the agent could pre enter some or even all of such information in order to overlap such operations with the customer s entry thereof thereby potentially saving time during such interactions . These and other alternatives are discussed subsequently for example in connection with .

Once the customer submits their desired departure and return dates and times using form this information appears in a form in agent chat dialogue . Included in form is a search flights button . In certain embodiments the selection of search flights button by the agent results in information regarding departure and destination cities from form as well as departure and return dates and times from form to be submitted to the application software e.g. a flight reservation system . As can be seen then a messaging system according to embodiments of the present invention can be present agents and customers among other such users with actionable items that can cause the associated messaging system and or associated enterprise application systems web application systems and other such systems to take single or multiple inputs.

It should be noted that as depicted in the reset and submit buttons of form remain enabled despite the information entered therein having been submitted into the messaging session and so appearing as form in agent chat dialogue . As will be discussed in further detail in connection with albeit in a slightly different configuration such a mechanism allows a customer to re submit the given form into the messaging session e.g. a customer accessing the messaging system via customer chat dialogue could change the departure date and resubmit form into the messaging session . Such functionality and associated alternatives are discussed in detail in connection with .

Further support can also be provided for what is referred to herein as active monitoring the ability of the messaging system to present changes in form in the corresponding form in agent chat dialogue . This is depicted in as well as other figures herein by way of the information entered into form also appearing in form . This allows the agent to view the information entered by the customer as that information is entered into the form submitted into the messaging session by the agent e.g. information entered into form appears in form as that information is entered into form . Thus for example an agent sees the form in the messaging transcript as one to be completed by the customer also including typically the various other elements in the form e.g. the disabled Submit and the Reset buttons depicted in form . In a CRM environment active monitoring can be extended to the form resubmission as well such that the agent is presented with a preview of the form as the customer completes the form and so can stand ready to provide appropriate assistance as necessary. Such functionality and associated alternatives are discussed in detail in connection with .

As can be seen in the elements of forms and are depicted as being disabled. In the aforementioned fashion this represents a configuration in which an agent using agent chat dialogue is able to monitor information as the customer enters the information but is not permitted to make any changes to the information or effect any actions thereby. Similarly the customer using customer chat dialog is prevented from making further changes to the information thus entered e.g. useful in a situation in which it is preferable not to allow the customer to change re enter certain information . In the scenario depicted in the messaging system is configured to automatically disable such fields upon the submission of the form into the messaging session. As will be appreciated in light of the present disclosure other alternatives for the presentation of such information and the implementation of such functionality can be realized in a messaging system according to embodiment of the present invention. Such alternatives are discussed subsequently for example in connection with .

Messaging session also includes the provision of a form to the customer that requests the customer s confidential information depicted in as a form in agent chat dialogue and a form in customer chat dialogue . In a situation similar to that posited earlier the agent in this example finds him herself in need of the customer s confidential information in this scenario the customer s social security number . Rather than request that the customer type in their social security number in the clear i.e. without masking the actual information with placeholders such as asterisks as before the agent can instead send form which is configured to mask the customer s social security number depicted in as confidential information . Moreover once the customer submits their social security number using form confidential information can remain masked and so appear in form as masked confidential information . Thus the customer s confidential information can remain masked throughout the process and be submitted to the given application without ever having been visible to either party. Further still form can via the messaging system be configured to not only mask confidential information but also to encrypt this information in a manner that protects confidential information and does so in a manner that can only be unencrypted within the given application. As will be appreciated from the present disclosure in masking the confidential information in both agent chat dialogue and customer chat dialogue the example depicted in assumes that the confidential information is automatically communicated from the forms in the messaging session to the application in question by the messaging system.

As a result of the messaging system s capabilities and the functionality built into the forms that are generated operations such as the identification of a customer can be performed as part of the generation in display of a form in agent chat window for example e.g. form . In the scenario depicted in form includes a customer identification alert field and an account number field . Based on the first name last name and company name information provided by the customer the functionality provided by form is able to interact with one or more applications in order to attempt to identify the customer. In the scenario depicted in the customer John Smith of Kingo s is identified as is reflected by the information presented in customer identification alert field . With the customer having been identified the messaging system via form presents the agent with the salient information e.g. the customer s account number e.g. 1234567 presented in account number field .

In the example depicted in another feature of a messaging system according to embodiments of the present invention is shown in which such a messaging system is configured not only to interact with an application but is further capable of presenting information in the messaging session. Using such an approach the messaging system provides for closer integration of the messaging application and the system application. For example such integration can be employed not only to automatically initiate application functionalities such as those just discussed but can also allow the application messaging system to be configured to automatically submit one or more results from the system function in question or other such functions into the messaging session. Thus the messaging system can be configured to automatically provide a response appropriate to the result of the customer s having submitted the now completed form into the messaging session e.g. depicted in as the sentiment Thank you Kingo s account has been identified. . As will be appreciated such automation provides the customer with a pleasant efficient interaction while reducing the agent s workload. The approach can also be used as another example in generating yes button and no button in in which those UI elements can be automatically generated and submitted or even the entire form depicted as form into the messaging session depicted in . Other aspects of this latter alternative are discussed in connection for example .

Web architecture also provides for communication via intranet WAN using one or more other devices. Such devices can include for example a general packet radio service GPRS client e.g. a smart phone or comparable mobile device a secure web client depicted in as a secure hypertext transfer protocol HTTPS client and a cellular phone using standard texting protocols depicted in as a simple messaging service SMS client . HTTPS client can be for example a laptop computer using the HTTP Secure HTTPS protocol. Support for GPRS clients SMS clients HTTP clients and the like thereby provide users with messaging functionality according to embodiments of the present invention in a mobile environment. As is also depicted in SMS client can communicate via internet WAN via several channels. SMS client can communicate directly for example with an SMS gateway which in turn communicates with internet WAN via a messaging gateway and optionally elements within intranet for example. Alternatively SMS client can via SMS gateway communicate with intranet and so internet WAN via public messaging services to which SMS gateway and intranet are connected.

As is also depicted in a client is also able to communicate via internet WAN by way of public messaging services and intranet . In order to support such communications as well as other communications according to embodiments of the present invention intranet includes a server system as well as providing for a number of clients now shown in the manner of intranet . Server system includes a number of elements that allow server system to support messaging communications according to embodiments of the present invention. Among these elements are a web server a messaging server an application server a database server and a directory server among other possible such servers in communication with one another. Various configurations of the elements of server system are discussed in greater detail for example in connection with .

It will be appreciated that in light of the present disclosure the variable identifier N is used in several instances in various of the figures herein to more simply designate the final element of a series of related or similar elements e.g. intranets N clients N and web servers N . The repeated use of such variable identifiers is not meant to imply a correlation between the sizes of such series of elements. The use of variable identifiers of this sort does not require that each series of elements has the same number of elements as another series delimited by the same variable identifier. Rather in each instance of use the variable identified by N may hold the same or a different value than other instances of the same variable identifier.

In turn web server cluster includes a number of servers N each of which support one or more server side web applications depicted in as server side applications N . As noted clients N access servers N via internet . More specifically each of clients N support one or more browsers depicted in as browser N which in turn each support one or more client side web applications depicted in as client side web applications N . Each of client side web applications N is configured to communicate with one or more of server side web applications N as is depicted in .

In order to support such communications browsers N can be configured to access one or more servers of web server cluster via internet and more specifically by accessing a Domain Name System DNS server . A DNS is a hierarchical distributed naming system for computers services and other resources connected to a network supporting DNS e.g. the Internet or a private network . A DNS associates various information with domain names assigned to each of the participating entities. For example browser on client can access DNS server in order to determine an internet protocol IP address of server . Use of a DNS also allows for load balancing referred to as DNS balancing.

DNS balancing is an easy and efficient mechanism for implementing a web site that can process more web traffic than might otherwise be the case. DNS balancing involves executing multiple copies of the site on separate physical servers. The DNS server for the hostname of the site e.g. www.travelmagic.com is configured to direct access requests such that different access requests are directed to different ones of those servers. This can be accomplished in a number of ways such as by having the DNS server return more than one internet protocol IP address for the hostname e.g. return multiple IP addresses for the site from which the requesting browser can choose or returning a different IP address for each DNS request received for example. In any event this results in the distribution of accesses across the web servers of web server cluster although from the perspective of a given one of browsers N there is only one web site. Alternative approaches for load balancing include for example techniques such as round robin DNS balancing hardware based load balancing software based load balancing reverse proxying content spreading across hosts content spreading across outsourced providers and other such techniques.

Once browser is in communication with server client side web application is then able to communicate with server side web application . In so doing client side web application and server side web application are able to access information stored in one or more of the databases maintained in database server cluster . In certain embodiments client side web applications N can be implemented as an AJAX client a client supporting an Asynchronous JavaScript and XML AJAX framework . AJAX is a group of interrelated web development techniques used on the client side to create asynchronous web applications. Such client side web applications can be implemented in JavaScript and extensible markup language XML using related web development techniques including jQuery and Java Script Object Notation JSON . jQuery is a cross browser Java Script library designed to simplify the client side scripting of hypertext markup language HTML while JSON is a lightweight text base open standard design for human readable data interchange. On the server side server side web applications N can be implemented for example using any number of approaches for such server side support e.g. including Java C and .NET Ruby on Rails the PHP Hypertext Processor or more simply PHP scripting language and or other such technologies typically some manner of a general purpose server side scripting language . As will be discussed subsequently embodiments of the present invention can take advantage of the aforementioned mechanisms and facilities in order to provide additional advantages in their implementation.

In the context of a messaging system according to embodiments of the present invention a web architecture such as web architecture can support various features of such a messaging system using a number of mechanisms. For example support for the transitioning of messaging sessions between servers can be provided by the maintenance of information e.g. information maintained on a computer system as a type of cookie or other small amount of data sent from a website and stored for access by a web browser which is depicted in as a number of cookies cookies N . Cookies N maintain information regarding the state of a given messaging session or multiple messaging sessions allowing the messaging session s to be passed from one server to another and thus facilitating load balancing and failure recovery.

Alternatively state information for a messaging session can be kept on the server side e.g. at one of servers N depicted in e.g. as server side state information or maintained in a database used to support the messaging system e.g. session information can be maintained in a database in database server cluster depicted in e.g. as a session information database . Server side maintenance of messaging session information and management thereof can be managed by a particular server tasked with this responsibility or can be shared among servers and or transferred between servers . Another alternative is to configure the DNS server e.g. DNS server to manage the messaging sessions by sending accesses to different servers e.g. the selection of one or more certain URLs links can be sent to one server while the selection of other URLs links are sent to another server DNS server can be configured to send such accesses to various ones of servers N according to a round robin or other scheduling paradigm or by way of some other comparable mechanism . Clearly the functionalities provided by a messaging system according to embodiments of the present invention support the implementation of a wide array of features that allow users to communicate in a particularly effective and efficient manner.

Client system serves as an example of various of the clients depicted in e.g. one of clients N GPRS client HTTPS client SMS client or other such clients . As part of messaging architecture client system provides support for a browser which is capable of presenting a user with for example a page employing a generic markup language or the like depicted in as an HTML page . HTML page in turn presents the user with a section and more specifically a form presented therein. HTML page receives information regarding form for display as part of section from a server within server system via network .

Server system can comprehend a number of subsystems including for example a web server a user information database and a session information database . Web server is configured to access user information database to obtain user identification information such as mappings between a user s instant messaging IM identifier and their user identifier e.g. user id . Similarly session information database can maintain information such as the messages communicated between users engaged in a messaging session. Server system also provides web server with access to web pages e.g. depicted in as a web page and one or more web applications e.g. depicted in as web applications N . The foregoing can be implemented for example in a manner such as that discussed in connection with .

Server system also provides support for messaging by way of a messaging system to which web server is communicatively coupled. Messaging system in certain embodiments includes a framework and a messaging server . Messaging server is able to communicate with framework via a framework interface and facilitates messaging services by way of supporting the requisite protocols e.g. Extensible Messaging and Presence Protocol XMPP . Similarly messaging server supports one or more messaging applets depicted in as a messaging applet . In addition to being able to communicate with web server via various communication paths and mechanisms messaging system is able to communicate with the elements of enterprise systems and more specifically with the resources depicted in as resources and application programs depicted in as application programs of enterprise systems .

Messaging system as noted is also able to communicate with web server via a variety of communication paths and mechanisms. For example messaging server can communicate directly with web server as well as doing so by way of its support of messaging applet and the communications between messaging applet and web server . Framework can communicate with web server via messaging server using framework interface of messaging server or by communicating with web server directly. In this manner information from application programs and or web applications web apps N can be communicated to and from browser in HTML page via network . By way of further example the output of messaging applet representing information from application programs and or web applications N can be conveyed via web server and presented in HTML page as form .

In turn web layer of messaging services stack includes a web server and a messaging server . Web server and messaging server access the elements of services layer and database layer via a repository access interface which is also a component of web layer at least on a conceptual level . Services layer in turn provides the elements of web layer with access to the elements of database layer via a number of framework adapters depicted in as framework adapters N and a data definition adapter . The elements of services layer provide a layer of abstraction over the information maintained in database layer and allow for a generic interface thereto as well as allowing of a more configurable interface by way of supporting data definition using data definition adapter . Information to be access by the elements of web layer e.g. web server and messaging server database layer maintains a number of repositories depicted in as one or more repositories the definition of which can be maintained in a data definition repository for example thus providing the aforementioned configurability by way of maintaining information regarding the structure and contents of repositories . A data definition repository such as data definition repository can include for example certain metadata as well as information regarding data access and analytical engines needed to gain access to the information and perform the necessary operations when accessing repositories .

Once the messaging system receives such a command the messaging system performs processing to identify the information to be sent via the messaging system step . More detailed examples of such operations are discussed in connection with e.g. with respect to a structured data object SDO and e.g. with respect to a dynamic form object DFO .

Having identified the information to be sent the information or access thereto is transferred from the application to the messaging system step . More detailed examples of such operations are discussed in connection with e.g. with respect to an SDO and e.g. with respect to a DFO .

The messaging system then submits the information into the messaging session step . More detailed examples of such operations are discussed in connection with e.g. with respect to an SDO and e.g. with respect to a DFO .

The messaging system then awaits a response from the other party or parties to the messaging session step . Once a response is received step the messaging system performs the operations necessary to communicate such response to the application step . More detailed examples of such operations are discussed in connection with e.g. with respect to an SDO and e.g. with respect to a DFO . A determination is then made as to whether the messaging session is to end or to await further commands to push objects and or their associated information into the messaging session via the messaging system step .

As will be appreciated in light of the present disclosure each of the operations of may be executed by a module e.g. a software module or a portion of a module or a computer system user. Thus the above described method the operations thereof and modules therefor may be executed on a computer system configured to execute the operations of the method and or may be executed from computer readable media. The method may be embodied in a machine readable and or computer readable medium for configuring a computer system to execute the method. Thus the software modules may be stored within and or transmitted to a computer system memory to configure the computer system to perform the functions of the module.

The software modules described herein may be received by a computer system for example from computer readable media. Such computer readable media may be permanently removably or remotely coupled to the computer system. Computer readable media may non exclusively include for example any number of the following magnetic storage media including disk and tape storage media optical storage media such as compact disk media e.g. CD ROM CD R etc. and digital video disk storage media nonvolatile memory storage memory including semiconductor based memory units such as FLASH memory EEPROM EPROM ROM or application specific integrated circuits and volatile storage media including registers buffers or caches main memory RAM etc. . In a UNIX based embodiment the software modules may be embodied in a file which may be a device a terminal a local or remote file a socket or other such element. Other new and various types of computer readable media may also be used to store and or transmit the software modules discussed herein.

In a messaging system e.g. a CRM agent customer environment a user such as a customer service agent can use predefined forms to gather information from other users e.g. customers or coworkers . A list of frequently asked questions is defined and a form is designed for each question beforehand. At the front end appropriate form widgets are chosen with proper input masking for sensitive data and validation while at the back end the automatic system flow is defined to consume information submitted via the customer form.

During the messaging session such predefined forms can be inserted into the message input area e.g. messaging entry pane either by selecting an insert button or perhaps more efficiently by typing a special prompt in the chat input area. When a form is inserted users can edit the form before submitting the form into the messaging session such as typing more help text above or below the form. If a user changes their mind the user can close the form to undo the insertion. The list of predefined forms available for insertion can be dynamic and context sensitive. For example before a customer is identified all the customer specific forms can be hidden. This list can thus serve as helpful guidance for agents to follow e.g. when assisting customers with specific problems . Eventually the form and any accompanying text are submitted into the messaging session.

In enterprise messaging architecture web server and messaging system provide support for one or more messaging applications that allow messaging communications between users accessing server system . Within an enterprise for example a user might access server system and more specifically messaging system through the use of a messaging application such as one or more of messaging applications N . In order to support such messaging communications messaging system includes a messaging server which in turn includes a messaging repository . Messaging system can also provide for a structured data framework which supports a messaging paradigm that includes the ability to push structured data into a message based messaging session. To support such operations structured data framework includes a structured data framework SDF manager a framework type repository a framework instance repository and a framework metadata repository among other such elements.

Server system supports communications with enterprise systems by direct communication as well as via constructs such as resource interface modules which include e.g. a resource query module and a resource invocation module and structured data objects SDOs N . As will be appreciated in light of the present disclosure messaging system is designed to convey an SDO such as one of SDOs N or alternatively the structured data represented stored thereby and or information associated therewith and or access thereto between an application program and or a messaging application e.g. one of messaging applications N and client system via network and web server . In so doing such structured data is conveyed e.g. in a message to client system for presentation in a GUI in which the message is presented e.g. browser as a form for example.

Resource interface modules support communication between SDF and one or more resources depicted in e.g. as resources N via a server bus . Resource interface module and resources N are also able to use service bus to communicate with one or more application programs depicted in as application programs N . Information from application programs N are communicated to structured data objects N via a corresponding one of messaging application interfaces MAIs N and adapters N as illustrated in . By providing both messaging system and more specifically structured data framework and application programs N enterprise messaging architecture is able to allow users of messaging applications N and users accessing server system via their browsers e.g. browser and thereby communicate structured data from one to the other.

Further messaging functionality is provided in enterprise messaging architecture at least in part by providing messaging system and more particularly SDF and application programs N via MAIs N and adapters N with access to SDOs N . To this end as will be appreciated in light of the present disclosure SDOs N are depicted in as being accessed by both SDF and application programs N . In such a scenario enterprise messaging architecture can provide messaging system and application programs N with shared access to SDOs N for example. In another embodiment messaging system and application programs N can alternate accessing SDOs N under the control of SDF or on a first come first served basis for example. In fact any one of a number of methods can be used to provide SDF and application programs N with access to SDOs N . Alternatively SDOs N can be passed between messaging system and application programs N . The foregoing alternatives as well as other alternatives comparable thereto are intended to come within the scope of the present disclosure which is therefore intended to comprehend such alternatives.

In SDF architecture an SDF manager e.g. comparable to SDF manager is designed to access a framework type repository FTR a framework instance repository FIR and a framework metadata repository FMR among other such constructs. SDF manager accesses FTR via a framework type repository FTR application programming interface API and an FTR adapter . In so doing SDF manager is able to store and retrieve type descriptions such as type descriptions N to and from FTR . Type descriptions N provide information used in the instantiation of SDO instances. An SDO type also allows for the identification of a messaging session to which the SDO type relates and in so doing gives participants a common understanding of the information being communicated and its context. In certain embodiments this relationship can be designed in a manner similar to the programming concept of a class and an object.

In similar fashion SDF manager is able to access FIR via an FIR API and an FIR adapter . In so doing SDF manager is able to store and retrieve instance descriptions such as instance descriptions N to and from FIR . SDO instances are thus stored in FIR . As noted the instantiation of SDO instances represented by instance descriptions N can employ information maintained in type descriptions N .

Similarly SDF manager is also able to access FMR via an FMR API and an FMR adapter . In so doing SDF manager is able to store and retrieve metadata such as metadata N to and from FMR . As will be appreciated form the present disclosure FMR stores metadata e.g. metadata N that describes SDO instances e.g. the description of certain aspects of instance descriptions N . Additionally as can be seen in the application programming interfaces FTR API FIR API and FMR API are depicted as dashed boxes in order to demonstrate that while such APIs may include other software modules FTR API FIR API and FMR API primarily represent the definition of the interface between SDF manager and their respective repositories.

Thus in operation as well as the manner described in connection with SDF manager causes SDO to be stored in FIR . Further data adapter can query FIR periodically if desired or on an as needed basis to determine the state of any recently updated SDO instances. Such a determination can be made for example using metadata retrieved from FMR that possibly has been retrieved via resource interface modules . This provides agents with the ability to query and track messaging sessions as well as make such information available to other applications e.g. via resource interface modules .

Structured data object includes various elements including one or more pre processing elements request elements response elements and post processing elements . Pre processing elements generally include elements that are used in defining the attributes of the given SDO prior to its use e.g. if the SDO s use allowed in the given circumstances . Conversely post processing elements provide for operations that are to occur after the given SDO is used e.g. providing feedback in the given circumstances interfacing with an application e.g. a web application and the like . A comparable relationship exists between request elements and response elements which provide for definitions regarding information requests made via the given SDO e.g. the programmatic constructs used to represent the form sent to the customer by the agent and the information received in reply e.g. the programmatic constructs used to represent the information sent in reply thereto .

Structured data object includes various elements including one or more pre processing elements request elements response elements and post processing elements . Pre processing elements generally include elements that are used in defining the attributes of the given SDO prior to its use. To this end pre processing element can include for example a show SDO prerequisite which determines whether or not a given SDO is visible in the interface and so potentially available for use an enable SDO prerequisite which determines whether or not a visible SDO is actually available for use and related SDO information . Conversely post processing elements provide for operations that are to occur after the given SDO is used.

A comparable relationship exists between request elements and response elements which provide for definitions regarding information requests made via the given SDO and the information received in reply. Thus request elements generally include elements that are used in defining the structure behavior and attributes of the given form as well as information requested thereby. To this end request elements can include for example a form entry . Associated with form entry is form look and feel information LFI having associated therewith hint text and client form validation information FVI . As noted then form entry and its associated elements provide definitional information as to the structure and behavior of a given form being pushed into a messaging session. Further LFI provides information regarding the appearance of the form while hint text allows a form to provide hints as to the values to be entered into a given field. Also included in request element is an entry label having associated therewith an entry input widget entry look and feel information entry LFI or ELFI and entry validation information EVI . Associated with entry input widget are a widget type the type of widget if any used as part of the given form a default value which as its name implies provides a default value for a given entry and optional values . EVI and client FVI provide information that allows widgets in the form to validate information entered into the form see e.g. and its associated description . Similarly LFI and ELFI can be employed to control the look and feel of the form and its elements when requesting information.

In a similar fashion response elements generally include elements that are used in defining the structure and attributes of a response to a given form. To this end response elements include a text entry . Associated with text entry is text LFI which can be used to control the look and feel of the form and its elements upon a response being communicated. In turn hint text is associated with text look and feel information and is used to provide a hint as to the given field. Response element further includes an entry label . Associated with entry label are an entry value which can contain the information responsive to the request and ELFI which can be used to control the look and feel of the entry in question .

As noted post processing elements provide for operations that occur after the given SDO is used e.g. how the SDO is accessed information regarding the SDO and its use actions to be taken in light thereof and so on . Post processing elements thus can include a system method having associated therewith feedback information and server form validation information . Another of post processing elements is a feedback message . Associated with feedback message are feedback look and feel information and associated action information .

Method description in turn refers to one or more operations an example of which is depicted in as an operation . In turn operation refers to one or more parameters an example of which is depicted in as a parameter . Parameters such as parameter can contain information one or more references to the contents of one or more fields of structured data object and or the like. In a scenario in which the method description is invoked the then existing contents of structured data object are used to create a method instance depicted in as a request method instance .

As is shown in request method instance may refer to one or more of the parameters of structured data object e.g. parameter . Once a request method has been instantiated as a request method instance e.g. request method instance a method dispatcher determines the manner in which to conduct communications with the web service in question e.g. which protocol and transport mechanism s to employ in conducting such communications . Method dispatcher can for example make this determination using the contents of request method instance and one or more service descriptions e.g. as depicted in as a service description . Method dispatcher having made such a determination then invokes the requisite web service depicted in as a web service via the appropriate protocol transport handlers depicted in as protocol transport handlers . Once web service has been invoked via protocol transport handler web service provides its response to method dispatcher via protocol transport handlers . In response to the receipt of this information by method dispatcher method dispatcher creates a response method instance which can then be used to update structured data object .

Once the messaging system receives such a command the messaging system performs processing to identify the SDO s structured data and or information associated therewith to be pushed via the messaging system step . The details of such operations are discussed in connection with . Having identified the SDO s structured data and or associated information to be pushed the SDO s and or associated information or access thereto are transferred from the application software to the messaging system step . The details of such operations are discussed in connection with .

A determination is then made as to whether the SDO s structured data and or associated information were successfully transferred from the application to the messaging system step . If the transfer was unsuccessful an indication that the transfer was unsuccessful is provided to for example the messaging system e.g. for presentation to one or more of the users involved in the messaging session step . Once this indication is provided a determination is then made step as to whether the messaging system should restart the process in an attempt to successfully transfer the SDO s structured data information from the application to the messaging system or to switch the messaging session to text based messaging step . In the latter case the messaging session continues albeit without using the given form. As will be appreciated in light of the present disclosure the switch to text based messaging can indicate that only the form in question will not be employed or that the messaging session will use text based messaging from that point forward or until some condition is met . If another attempt to transfer the SDO s structured data information is to be made the process loops back to identifying the SDO s structured data information to be pushed via the messaging system step . However if the messaging session is to switch to text based messaging step any operations requisite to switching to such text based messaging are performed such that the messaging session can proceed on a text based messaging basis and the process at least with respect to the given SDO s structured data information concludes.

As will be appreciated in light of the present disclosure the messaging session can proceed in a number of ways at this point including switching to text based messaging for the remainder of the messaging session. Alternatively the messaging system can indicate the situation ignore the given SDO s structured data information allow for text based messaging and then attempt to support subsequent transfers of further SDO s structured data information. These and other such alternatives are intended to be within the scope of embodiments of the present invention described herein.

If the transfer of the SDO s structured data information to the messaging system is successful step the messaging system having received the object and or object information pushes the object and or object information into the messaging session step . The details of such operations are discussed in connection with .

The messaging system then awaits a response from the other party or parties to the messaging session step . Once a response is received step the messaging system performs the operations necessary to communicate such response to the application step . The details of such operations are discussed in connection with . A determination is then made as to whether the messaging session is to end or to await further commands to push objects and or their associated information into the messaging session via the messaging system step .

However if the command command information are successfully identified step any structured data needing to be obtained from the application is identified based at least in part on the command and possibly associated information thus identified step . A determination is then made as to whether the structured data to be obtained from the application has been successfully identified step . If the structured data and command commend information are successfully identified steps and the structured data is ready for transfer to the messaging system. The process then concludes.

However if the structured data to be obtained from the application has not been successfully identified step a determination is made as to whether the identification process should be retried step . If the identification process is to be retried the process loops back to the identification of the command command information step . If the identification process will not be retried the messaging system indicates that the structured data was not successfully identified step . As before the messaging system then switches the messaging session to text based messaging step and the messaging session proceeds. In either event the process of concludes the structured data in question remaining unsent.

The process begins with the messaging system requesting the structured data from the application program step in order to have such structured data transferred therebetween. The details of such operations are discussed in connection with . Alternatively while not shown in it will be appreciated that in light of earlier discussions and the present disclosure generally the aforementioned request can be implemented as a request to a control mechanism or more simply as access provided by an access sharing scheme such that access to the SDO in question is transferred from the application program to the messaging system and so reflecting an implementation of one of the alternatives discussed earlier in connection with .

A determination is then made as to whether or not the structured data or access has been received step . If necessary the messaging system waits for the reception of the structured data or access to complete step . Should the structure data not be successfully received from the application an indication to this effect is provided step . In such a case the messaging system can switch the messaging session to text based messaging if desired in the manner noted in connection with step . In the case in which this eventuality occurs the process then concludes.

Alternatively if the structured data is successfully received step the structured data is transferred from the application to the messaging system. In an embodiment of the present invention this transfer is accomplished by invoking a web service via protocol and transport handlers step and then transferring the structured data in question from the application to the messaging system step . The details of such operations are discussed in connection with . Alternatively while not shown in it will be appreciated that as noted above with regard to the request for an SDO generally the aforementioned transfer can be implemented as a transfer of access from the application program to the messaging system as per the corresponding request discussed above.

A determination is then made as to whether the transfer of the structured data has completed successfully step . While the transfer of structured data is ongoing and no problem has occurred the process loops step . However should a problem occur during the transfer step the messaging system provides an indication of such problem s occurrence step . As before the messaging system can switch the messaging session to text based messaging in the manner noted in connection with step . At this point the process then concludes.

Once the structured data is successfully transferred to the messaging system step a determination is then made as to whether any further data remained to be obtained from the application step . While further data remain to be transferred from the application to the messaging system the process performs the aforementioned operations until all such structured data has been transferred to the messaging system step . Once the requisite structured data has been transferred to the messaging system an indication is provided that such operations have been completed and the structured data successfully transferred from the application to the messaging system step . Optionally the structured data thus transferred can be prepared for submission to the messaging session by having the messaging system collect the structured data obtained from application step .

Once such a request has been received a determination is made as to whether the requisite method description can be invoked step . If the method invocation is unsuccessful the messaging system provides an indication to this effect step . In such a scenario the messaging system can switch the messaging session to text based messaging in the manner noted in connection with step . At this point the process then concludes.

However if the messaging description can be properly be invoked by the messaging system step the messaging system creates a method instance by invoking the method description using the structured data object s current content step . The messaging system then accesses the structured data frameworks framework type repository FTR step and retrieves a method call type pattern from the FTR step . A determination is then made as to whether the method call type pattern indicates that such interaction is permitted step . If the interaction is not permitted and indication to this effect is provided by the messaging system step . As before the messaging system can then switch the messaging session to text based messaging in the manner noted in connection with step . At this point the process then concludes.

If the interaction is permitted step however the request method instance s RMI s content and web service s service description are obtained step . The service s service description can be formatted using a web services description language WSDL for example. Next the requisite protocol and transport handlers over which the web service should be invoked are determined using the RMI content and web service s service description step . The web service in question is then invoked via the protocol and transport handlers thus identified step .

If none of the aforementioned determinations provide guidance as to the routing of the information from the RMI the messaging system provides an indication to that effect indicating that the routing of information from the RMI was not routed step . In such a scenario the messaging system can switch the messaging session to text based messaging in the manner noted in connection with earlier figures step . Once the information is routed from the RMI appropriately or an indication is made as to such routing having not been performed the process concludes.

The messaging system then awaits a command to push the structured data thus received into the messaging session step . Such a command can take the form of user input provided via a send button e.g. send button of for example. The process loops until the command is received step . Once the command has been received step the structured data in question is pushed to the messaging server of the messaging system step . Once in receipt of the structured data thus pushed the messaging system generates a message containing the structured data step . The messaging system then passes this message containing the structured data to an associated web server step . The web server then pushes the message contained in the structured data to a client participating in the messaging session via a network coupled there between step .

Once such a reply has been received step the message containing the structured data is processed at the web server step . The receipt of this information allows for the creation of a response method instance step . The web server then passes this message containing the structured data to the messaging server of a messaging system associated therewith step . The messaging system passes the message containing structured data to a messaging application step . The messaging application having received the message containing the structured data then displays the structured data as part of the message thus received step . A determination is then made as to whether the structured data should also be passed to the application program or other application software step . If the structured data should be passed from the messaging system to the application step the messaging system performs the operations necessary to pass the structured data from the messaging application to the enterprise or other applications step . Once the structured data is passed to the appropriate application or a determination is made that such operations are not to be performed the process concludes.

In operation the foregoing mechanisms and facilities allow participants in a messaging session to send and receive forms and simplify communication via the messaging system while improving efficiency and accuracy thereof. An example of the communications that might occur in such a system are now presented in Table 1.

Table 1 depicts certain portions of the messages being communicated in a graphical format e.g. as input fields of a form that would be presented to a user receiving such information .

The code that results in the foregoing input fields appears as follows and is listed in a message by message fashion 

Chat dialogue supports text based messaging such as that discussed earlier by allowing a message to be entered into message entry pane after which the user selects a send button in order to submit the message into the messaging session. Selection of send button thus results in the message thus entered being submitted to the messaging session and so appearing in a messaging session pane which results in the display of the message not only in messaging session pane but also in a comparable messaging session pane of the chat dialogue s employed by the one or more other users who are parties to the messaging session. In the two examples

In the example depicted in however the user is able to right click in message entry pane in order to access a special prompt and so display a menu of predefined forms that can be inserted into the messaging session in the manner noted earlier. The user s action thus results in the display of a special prompt menu . Special prompt menu provides the user with a number of predefined forms from which the user can choose. In the example depicted in the selections include several predefined forms depicted in as predefined forms and . By selecting one of predefined forms a user can insert the desired form into the messaging session. This is depicted in with respect to the selection of predefined form Where do you want to go and its corresponding predefined form depicted in as form .

As depicted in the use of a special prompt such as special prompt menu can be implemented in a number of ways. As depicted in special prompt menu is illustrated as being configured to submit the desired predefined form directly into the messaging session upon selection of the requisite predefined form thereby obviating the need to select send button . Alternatively the use of special prompt menu can result in the insertion of the corresponding predefined form in message entry pane . While doing so will then typically necessitate additional actions by the user e.g. the selection of select button such an approach also provides for the ability to edit the predefined form prior to its submission into the messaging session.

Further the selections presented in special prompt menu can be changed dynamically presenting the user e.g. agent with selections that are particularly pertinent to the given customer especially likely to be used in the given situation or driven by other such considerations. For example a messaging system employing such an approach can be designed to maintain information regarding the forms most commonly used by all agents in a given call center reflecting the forms in use in an up to the minute fashion. Based on such information the messaging system can be configured to present an agent with a selection of forms that are the most likely to meet the agent s needs. Further forms can be listed in special prompt menu in the order the forms are most likely to be needed in an alphabetical order or some other useful and convenient manner. Such a messaging system can also be configured to provide support for scrolling through such forms allowing the agent access to a larger number of forms than might be able to be displayed. Further still the selections presented by special prompt menu can provide a number of look and feel options for a given form. Indications as to the handling of a given form can also be supported. For example the agent can be given the ability to choose between submitting the selected form directly into the messaging session e.g. directly into messaging session pane by right clicking on the given selection or into message entry pane e.g. by hitting the Enter key .

As the foregoing examples illustrate access to messaging functionality according to embodiments of the present invention can be provided in a number of ways. As discussed in connection with a special prompt can be provided that can used to display a menu of possible forms for selection. As noted while a given implementation may be limited to displaying some fixed number of selections there are any number of mechanisms that can be employed to efficiently and effectively present the agent with more such selections and or the particular selections needed in a given situation. As discussed in connection with an alternative to the use of a special prompt is the provision of an insert button in the user s messaging window. Here again any number of variations can be provided to allow the agent access to selections that best meet the agent s needs in the circumstances at hand. Further it is within the scope of embodiments of the present invention to combine these two approaches and allow the user e.g. agent to use the approach that most effectively addresses their needs. Such a combined approach allows for the greatest flexibility e.g. by presenting different selections based on the approach used such as by using a special prompt for customer centric selections or situation centric selections or other such basis of determining the selections presented and an insert button for generic selections e.g. scheduling dates generic questions as to travel arrangements and so on . Thus based on the selections presented by each alternative the agent can create a form that allows the most efficient effective communications to occur by way of quickly creating forms that are closely tailored to the needs of the participants. Further such predefined form menus can provide for scrolling allowing the user agent to scroll through a number of selections forms within the predefined form menu. As noted elsewhere such efficiency and effectiveness not only makes agents for example more efficient and less error prone but vastly improves the experience of the customer being serviced in this manner. Further to this end as part of such messaging functionality a messaging system according to embodiments of the present invention can provide a user e.g. customer service agent with the ability to edit forms prior to their submission into the messaging session as is now discussed in connection with .

In certain embodiments such as that depicted in message entry pane provides one or more toolbar commands that permit the user to edit and or otherwise modify items displayed in message entry pane e.g. such as predefined form . Thus message entry pane provides a message editing toolbar which allows the user to modify text and forms displayed in message entry pane prior to such information being submitted into the messaging session. Message editing toolbar includes a bold button an italics button an underline button a font menu and a font size menu . As will be apparent in light of the present disclosure text and forms can be modified using the functionalities provided by message editing toolbar in the aforementioned ways as well as many other not explicitly offered as part of message editing toolbar or shown in . Form can also provide a delete button that is configured to allow the given predefined form to be deleted from message entry pane or alternatively the insertion of the given predefined form undone and depicted e.g. in as a form deletion button 

Such form modification allows a form to be edited prior to submission to a messaging session for example in the message entry pane. Further there may be instances in which the user receiving such form may want to perform editing in addition to entering responses in the form thus received for which certain embodiments may provide. Further such editing prior to submission can include the ability to undo the insertion of the form e.g. by deleting the form as a whole typing help text above or below the form modifying the predefined help text in the form modifying the predefined labels in form if a label is not intuitive to the customer and other such operations. Further still the user can elect to drop individual optional input fields in form e.g. no need for information that is already known .

When using such approaches the list of potential questions from either one or both of an insert button and or a special prompt can be configured dynamically e.g. to be context sensitive . For example if a customer has already been identified there is no need to present the agent with an option to submit an identification question and so the corresponding menu item could be disabled or not presented. Similarly prior to a customer being identified there would be no need to present the agent with an option to submit an verification question and so the corresponding menu item could be disabled or not presented.

An alternative to interfacing with application programs is the use of web applications. In such situations an approach according to embodiments of the present invention employ the generation of dynamic forms. While providing a number of desirable advantages the use of predefined forms does require the design of the forms to be used prior to their use. Also the application programs used typically need to be configured to consume input data automatically from the messaging system which may not always be possible. In a setting in which the messaging system is to interface with one or more web applications such web applications can be made messaging aware and so provide messaging aware inputs. In such a scenario input fields from such messaging aware web applications are configured to be pushed into the chat input area. Thus with embedded online messaging the input fields of web applications e.g. web pages can be made messaging aware. In such an approach a form is dynamically composed in response to the input fields that have been pushed into the messaging session. After form submission from the other side the submitted data is then automatically populated to the corresponding input fields.

As will be appreciated from discussions elsewhere herein e.g. in connection with among others at least certain of the functionality provided by DFF manager framework repository rules repository and model repository is comparable to that of comparable elements depicted therein. However given that web messaging architecture supports dynamic form object DFOs DFF manager framework repository rules repository and model repository provide additional functionality that supports the dynamic nature of DFOs. Thus framework repository maintains information regarding instantiations of the DFOs. Rules repository maintains information regarding rules that are used to ensure that the information transferred from a form s input field to the corresponding input field in the web page in which the input field is displayed and back in fact is in a form expected by web application in which the web page is displayed. Model repository stores among other information information regarding the data models used in conjunction with the DFOs and their operation referred to herein as a data model set and discussed in further detail below in connection with the discussion of the form builder rules example of .

As will be appreciated in light of the present disclosure web application user interface elements request elements and response elements each support one or more aspects of the overall functionality that is used to provide the ability for the transfer of dynamic forms through the messaging system employed and so allow for the communication of information obtained in this manner to be provided to other applications e.g. one or more web applications . Thus web application user interface elements provide information as to the user interface elements of the web application to which the information thus obtained is to ultimately be provided. Similarly request elements provide information as to the form representing the DFO that is communicated to the other party e.g. customer via the messaging system. In comparable fashion response elements provide information as to the information that is communicated from the other party e.g. customer to the original party e.g. agent via the messaging system in responding to the communications conducted by way of the form representing the DFO .

As noted then web application user interface elements generally include elements representing the structure behavior and attributes of the entry or entries of the web application to which information is to be provided. To this end web application user interface elements thus include an original user interface entry . Original user interface entry represents the original entry in the user interface of the web application such entry being the entry to receive input from the other party e.g. customer via the form submitted into the messaging session. Original user interface entry and its associated elements provide definitional information as to the structure and behavior of a given entry being pushed into a messaging session. Original user interface entry references an original user interface OUI entry label a label that can be used to identify original user interface entry an original user interface entry input widget a widget that provides functionality associated with input field in the original user interface entry e.g. in the application that is to receive the input and original user interface entry LFI which provides information regarding the look and feel of the original web application s entry . Original user interface entry input widget in turn references a widget type the type of widget if any used as part of the given form a default value which as its name implies provides a default value for a given entry and optional values .

Also associated with original user interface entry are a container identifier and an entry identifier . As will be appreciated in the generic sense a container is a class data structure abstract data type ADT or other such programmatic construct instances of which are collections of other objects e.g. widgets . Thus container identifier identifies the container that contains possibly among other objects the given input widget original user interface entry input widget . Such a container might for example correspond to the web page in which the input widget exists. Similarly entry identifier provides information that facilitates the identification of the entry input field in question. Thus container identifier and entry identifier allow the messaging system to relate input received via a DFO such as DFO to the input fields of the web application employed. The operation of DFO elements such as container identifier and entry identifier are discussed further in connection with .

In comparable fashion request elements define information that will be used in the creation and submission of a form into a messaging session e.g. the programmatic constructs used to represent the form sent to the customer by the agent and generally include elements that are used in defining the structure behavior and attributes of the given form as well as one or more entries therein. Such a form is thus designed to obtain and return the information to be provided as input to the original user interface entry and so make that information available to the corresponding web application.

To this end request elements include a form entry which is comparable in configuration to original user interface entry . Form entry is depicted in as referencing a form entry label which maintains information regarding a label e.g. a name that can be used to identify the form a form entry input widget the input widget sent as part of the form submitted into the messaging session that provides functionality to assist in obtaining the requisite input information and form entry LFI which allows for control over the look and feel of the form entry . Form entry input widget in turn references a widget type the type of widget if any used as part of the given form a default value which as its name implies provides a default value for a given entry and optional values . With respect to request elements dynamic form object also references a portion thereof. More specifically within request elements dynamic form object references form LFI which in turn references hint text . In the manner of other such elements form LFI allows for control over the look and feel of the form and its elements while hint text allows a form to provide hints as to the values to be entered into the given field.

In turn DFO data model set includes as referenced by DFO and defined at least in part by request elements response elements which provide information regarding the structure behavior and attributes of various structures that allow a user to provide a response to the requests for information presented in a form. To this end response elements include a text entry . While text entry may in fact employ any number of programmatic constructs text entry typically deals a simple value e.g. alphanumeric value of some sort entered an input into the given entry in the form communicated within the messaging session. Text entry references a text entry label which maintains information regarding a label e.g. a name that can be used to identify the form an entry value and text entry LFI which allows for control over the look and feel of the text entry . As will be appreciated entry value maintains or at the least references the user s response with regard to the given original user interface entry. As with request elements dynamic form object references certain elements within response elements . For example dynamic form object can reference text LFI which in turn references hint text . In the manner of other such elements text LFI allows for control over the overall look and feel of text sent in response to the form while hint text allows a form to provide hints as to the values to be entered into the given field.

In the embodiment depicted in it will be noted that each of web application user interface elements request elements and response elements shares certain common element types. These common element types include an entry label element type an entry input type and an entry LFI . As noted earlier information regarding such relationships is maintained at least in part by mapping information which can also serve to maintain information regarding the manner in which these elements relate to one another and not simply the fact of the relationship s existence . Further as will be appreciated in light of the present disclosure the mappings represented by element type entry input type and entry LFI can be governed to at least some extent by rules such as those maintained in rules repository .

In the scenario depicted in a messaging system has received information in an input field of a dynamic form object the information e.g. being depicted in as input . Having received this information messaging system makes an AJAX call in order to transfer the information to a web application . Messaging system via AJAX call is able to transfer the information in input field to an input field of web application using a web page identifier e.g. from an element of DFO such as container identifier of web application user interface elements of DFO and an input field identifier e.g. from an element of DFO such as entry identifier of web application user interface elements of DFO . In the manner previously discussed in connection with container identifier and entry identifier of web page identifier and input field identifier facilitate the identification of web page and input field . As will be appreciated from web application includes web page and in turn web page includes input field into which input is to be entered . In order to properly convey the information in input field i.e. input to input field in addition to the aforementioned identifying information web page identifier and input field identifier AJAX call employs one or more rules such as those described elsewhere herein as well as in the alternative the mapping represented by entry input type which maps e.g. original user interface entry input widget form entry input widget and entry value to one another and or other mappings maintained as mapping information which ensure that the information is conveyed from input field to input field in the manner and form expected by web application .

As will be appreciated in light of the present disclosure a situation may arise in which the destination of one or more input fields for a given form become unavailable. For example in certain embodiments in which the messaging system implementation does not support maintenance of such information for subsequent use the messaging application may be unable to complete the input fields of the given messaging enable web application dialogue containing the input widgets originally pushed into the messaging session if the user navigates away from or closes that messaging enable web application dialogue. However even in such a case the user is able to perform cut and paste operations to insert the requisite input data into the input fields once the user navigates to the messaging enable web application dialogue again. Preferably however the messaging system is configured to maintain the input data thus returned and the input fields to which those input fields correspond. In such a scenario the messaging system can be configured to convey the input data to the messaging enable web application dialogue at the next opportunity e.g. the next time the given web application is executed and the messaging enable web application dialogue is displayed the input fields are automatically populated with the input data .

In the situation in which one or more input fields are not available the issue becomes one of what to do with input data e.g. when the interface containing the pushed input fields is navigated away or closed and submitted data cannot be used to auto populate the original input fields . Such situations can be addressed in several ways. First is to warn users when they are about to navigate way from or close the interface. Alternatively or in addition the messaging system can store the input fields in question as well as the corresponding values and populate those input fields with their corresponding input values the next time the interface is open. Another alternative is to include a widget with the submitted input data that forces the interface to open.

Once the requisite input field information has been obtained the input field information is transferred to the messaging system from the web application step . Next a determination is made as to whether the input field information has been successfully transferred from the web application to the messaging system step . If the aforementioned determination indicates that the transfer was not successful step the user attempting to send the form is provided with an indication that a problem occurred during the transfer of input field information from the web application to the messaging system step . In such a case the messaging system can switch the messaging session to text based messaging if desired in the manner noted in connection with step . In the case in which this eventuality occurs the process then concludes.

However if the transfer of input field information from the web application to the messaging system was successful step a determination is then made as to whether further input fields are to be identified step . If further input fields remain to be identified step the process loops to its beginning in order to receive identification of the next input field to be identified step . If no further input fields remain to be identified step the process concludes.

The process of begins with the messaging system s receipt of information regarding the input field to be identified step . Next the messaging system obtains input field information for the given input field from the web application step . Having obtained the input field information from the web application the input field information is transferred to the messaging system step . A determination is then made as to whether the user has requested that the selected input field s are ready to be submitted to the messaging session step . If a request indicating that the selected in put fields are to be pushed into the messaging session has not been received step the process loops and performs the aforementioned operation once again with respect to one or more additional input fields that will be assembled with the other input fields for assembly into a form and subsequent submission into the messaging session . If a request to submit the selected input fields has been received indicating that no further input fields are to be identified step an indication that the identification of input field s is complete is provided step . The selected fields are then submitted step . The process then concludes. As will be appreciated from the present disclosure the information in the selected fields can be sent either by way of an automatic communications between the messaging server e.g. an XMPP server and the customer s interface i.e. browser or the communication can be performed as a result of the agent s selection of a submission button as discuss elsewhere herein.

If the DFI is successfully received e.g. is complete step a determination is made as to whether the transfer of the object and or object information is a single field transfer of a multiple field transfer step . If the transfer is a single field transfer step the DFI for the single field is transferred to the messaging system step . A determination is then made as to whether the single field transfer was successful step . If a problem has occurred an indication of this problem is provided signifying an problem during the transfer of the DFI to the messaging system step . In that case the messaging session can be switched to a text based messaging session step .

However if the transfer was successful step a determination is then made as to whether any other DFI s remained to be transferred to the messaging system step . As will be appreciated in light of the present disclosure this determination allows for multiple DFO elements to be aggregated into the form that will ultimately be submitted into the messaging session. The set of operations that make up this loop are an example of a concept referred to herein as assembly operations. If no further DFI s remain to be transferred step an indication is provided as to the successful transfer of the DFI object and or object information from the web application to the messaging system step .

Returning to the determination as to whether the transfer is a single field transfer or a multiple field transfer step if the transfer is a multiple field transfer the input fields involved are assembled in order to create the desired form step . In certain embodiments such assembly involves the assembly of the DFI for each of the input fields. Once the input fields have been assembled in this manner step the now assembled DFI is transferred to the messaging system step . The process then loops waiting for the transfer of the dynamic form information to complete step . Once the transfer of the assembled DFI has completed step a determination is made as to whether the transfer was successful step . If a problem occurs during the transfer an indication is provided as to the occurrence of a problem during the transfer of the assembled DFI to the messaging system step and the process concludes.

If the transfer is successful step a determination is made as to whether any DFI whether single field transfers or multiple field transfers remain step . If further DFI s remain to be transferred the process loops to the receipt of such DFI s from one or another of the web applications step . If no further DFI s remain to be transferred step an indication of the successful transfer of the DFI s in question from the web application to the messaging system is provided step . The process then concludes.

The process of begins with the receipt of dynamic form information at a messaging application step . The messaging application then displays a dynamic form using the dynamic form information step . The messaging application then awaits a command to push the dynamic form thus received to a client step . Such an event can be for example a user s selection of a send button step . Upon receiving a command to push the dynamic form to the client step the dynamic form framework sends the dynamic form information to the messaging server step . A message including the dynamic form is then generated by the messaging server using the dynamic form information step . A message containing the dynamic form having now been generated is then transferred from the messaging server to the web server step . Once the web server has received the message the web server pushes the message to the client step .

The process of begins with the processing of the message containing one or more input values by the web server step . Once this message has been processed by the web server the message is passed from the web server to the messaging server of the messaging system step . The messaging server extracts the input value s from the message step and passes the input value s thus extracted from the messaging server to the messaging application step . Once the messaging application has received the input value s the messaging application displays the message and input value s contained therein step . As will be appreciated in light of the present disclosure the actual value s of the such input value s may be masked in order to maintain the confidentiality of the information conveyed thereby. Further such values may be maintained in an encrypted or otherwise secure state while being conveyed through the messaging system in order to provide enhanced security thereof while transiting the messaging system. In addition to passing the input value s to the appropriate messaging application the messaging server in the present example is configured to automatically pass the input value s thus received from the messaging application to the web application via the web server step .

As illustrated in agent chat dialogue reflects such customer information depicted in as customer information and corresponding to a customer s job title contact information and physical address in the example of . Correspondingly web application dialogue includes a variety of customer information fields which facilitate the entry of such information into a web application not shown . In the example presented in the customer service agent must somehow convey customer information and into customer information fields in order to be able to enter that information into and work with the given web application.

At this point the customer having entered and submitted this information to the customer service agent via the messaging session form initiates verification of the customer account and contact information. In the example depicted in the results of the verification are displayed in a customer account verification window e.g. in the example of indicating that the customer account has indeed been verified and a contact verification window e.g. indicating in the example of that John Smith does not exist as a contact associated with the given customer account . Given that John Smith does not exist as a contact for this customer account in the example of a fictitious company referred to as Kingo s form presents the customer service agent with a create contact button .

By selecting create contact button the customer service agent can cause a web application dialogue to be displayed. Alternatively it will be appreciated that in light of the present disclosure the actions set in motion by the agent s selection of create contact button can also be performed automatically for example upon an indication in contact verification window that the contact does not exist e.g. for the given customer . In the example depicted in in which the contact does not exist and the agent has selected create contact button the web application dialogue thus displayed is messaging enabled and so is referred to as a messaging enable web application dialogue . As before messaging enabled web application dialogue includes a number of customer information fields . However in the example depicted in certain ones of customer information fields are messaging enabled. In this example the messaging enabled ones of customer information fields have associated with them a push to messaging session PTMS button depicted in as PTMS buttons . PTMS buttons allow a user e.g. a customer service agent to select one of PTMS buttons in order to push a corresponding one of customer information fields into the agent s message entry pane and ultimately into the given messaging session. In the example depicted in fields for the contact s first name last name and customer s name in customer information fields of web application dialogue are auto completed from information appearing in form though as will be appreciated in light of the present disclosure such information need not actually be displayed in such a form in order to be made available to other applications as the customer s name in this example and other information in subsequent examples demonstrate .

In the example depicted in the customer service representative agent has accessed a message enabled web application resulting in the display of a messaging enabled web application dialogue as before messaging enabled web application dialogue which includes a number of customer information fields for example as before depicted in as customer information fields and their corresponding PTMS buttons as before depicted in as PTMS buttons . As noted the agent is able to select or more of PTMS buttons in order to insert the corresponding one of customer information field into a form in a message entry pane of agent chat dialogue . In the example depicted in the agent has selected PTMS buttons and corresponding to a job title field a telephone number field and an email address field . By selecting these fields the agent is able to build form in message entry pane . In terms of the constructs depicted in these operations are the result of the given web application transferring information e.g. elements of the DFO s structured data to the messaging system which in turn assembles this information e.g. elements into the form presented to the agent in the messaging application.

As will be appreciated from the present disclosure e.g. and their associated descriptions the messaging application messaging system may provide the agent with the ability to edit the information in a form such as form as a whole including for example the ability to delete one or more input fields presently in the form change fonts change font size change shading re order input fields and make other such revisions to the form. Further in the case in which one or more fields e.g. such as those depicted in are selected and appear in message entry pane e.g. form each such element can be individually modified and or deleted. To this end form provides a number of field edit buttons depicted in as field edit buttons and field deletion buttons depicted in as field deletion buttons . Thus the functionality in this regard can be provided in a manner comparable to that discussed with regard to as noted except that such functionality can be provided on a per field basis and can even be combined therewith . Further still such functionality can be configured to allow modification editing of the labels used to identify each field e.g. if a label is not intuitive to the customer e.g. due to its implementation as an agent side application the agent can edit the field to be more intuitive and useful to the customer.

Once the agent has selected the desired fields for form the agent can then select a send button which submits form into the agent s messaging session pane as before messaging session pane in agent chat dialogue . In terms of the constructs depicted in these operations result in the messaging system packaging the given form into a message and providing the message to the client system for display in the client system s browser.

The foregoing operations in the aggregate are referred to herein as dynamic form generation e.g. as depicted in . As will be appreciated in light of the present disclosure such dynamic form generation can be combined with the use of pre defined forms e.g. as depicted in . For example in the CRM context dynamic form generation can be combined with predefined forms by using various criteria e.g. historical usage for a given agent agents in a given area and the like to determine the configuration of the pre defined forms presented to an agent. In such an approach an agent s repetitively pushing certain input fields into a messaging session with a given customer may be used to suggest new pre defined forms that the messaging system can present to the agent whenever the given customer is being assisted. Further as will be appreciated in light of the aforementioned figures the agent is also at liberty to create a form that includes all the fields needed to complete the corresponding fields of messaging enable web application dialogue or other alternative combinations thereof based on relationships therebetween ease of use for the customer and or other such considerations demonstrating the flexibility of a messaging system according to embodiments of the present invention.

Moreover a select all button depicted in as a select all fields button can be provided in order to simplify the agent s work in preparing and submitting a form including the desired fields. In fact once such an operation is performed having prepared a draft of the form by submitting all the fields e.g. the agent can then edit the form thus created in a manner such as that described elsewhere herein. As will be appreciated in light of the present disclosure a variety of groupings can be employed in order to simplify the agent s work in preparing and submitting a form into a given messaging session e.g. an address PTMS button to push the requisite address fields into a given form after which editing of the form can be performed as may be necessary and or desired. Further still historical information can serve as the basis for creating such forms e.g. a PTMS button that allows the agent to create a form like the last one created or the last one create for a given client situation or the like . As will be appreciated in light of the present disclosure a wide variety of such alternatives are possible and are intended to come within the scope of the present disclosure.

The process depicted in begins with a user e.g. a customer service agent selecting one or more input fields to be used in creating a form to be pushed into the messaging session step . Once the requisite input fields have been assembled the form thus generated is submitted into the messaging session for example by the messaging application sending the message including the form to the server system step .

Once the server system has received the message as part of processing the message and forwarding the requisite information to the other participant s in the messaging session the server system sends the message including the form to the client system for display by a messaging applet executed thereon step . The server system also sends a message including the form back to the messaging application for display on the sender s messaging dialogue step . The server system then waits for a reply to this message which will be received from the client system not shown . Once a message is sent from the client system in response to the original message the reply message including a response to the form is received at the server system step .

In a manner comparable to that described earlier with regard to the original message the server system then sends a message including the response to the form to the client system for display by the messaging applet step . At substantially the same time or thereafter the server system sends the message including the response to the form to the messaging application for display in the messaging session pane of the messaging application s window step . Once this information has been sent to the client system and messaging application at substantially the same time or thereafter steps and the input data corresponding to each of the one or more input fields is used to automatically populate the corresponding input fields of the web application dialogue step . Once the input fields of the web application dialogue have been populated the process concludes.

In operation computing system submits a form into the current messaging session depicted in as a message . This can be accomplished using one of the approaches described herein for example. Server system then sends messages to computing system and computing system depicted in as a message and a message respectively which are messages that include information regarding the form to be displayed in the messaging session pane displayed by each of computing systems and .

In turn a user employing computer system is then able to complete the form in question and submits their response into the messaging session. This communication is depicted in as a message sent from computing system to server system . The form in message can be generated and posted and so displayable in the messaging session for example using a format such as 

Upon receipt of message including the form post string server system proceeds with providing the results thereof to computing systems and . Such results the user s reply are provided by way of messages that include formatted name value pair depicted in as a message and a message .

Thus message can be generated and so displayable in the messaging session using for example formatted name value pairs in a manner such as 

Similarly message can be generated and so displayable in the messaging session using for example formatted name value pairs such as 

In operation the communications conducted in the architecture depicted in begin with the creation of a form e.g. a dynamic form object which is accomplished by the first user selecting one or more push to messaging session PTMS buttons such selections being depicted in by the selection of PTMS buttons and . The selection of PTMS buttons and result in the insertion of the corresponding input fields into a form depicted in as an input field and an input field which are ultimately submitted into the messaging session between the first and second users. As part of creating the form for submission into the messaging session the JavaScript hash table is updated to associate the label name in the messaging session and the input identifier for the input field in the web application s web page. This association allows information supplied by the customer for these fields to be associated with the proper corresponding input fields.

As is depicted in the form containing input fields and appear in the first user s messaging session pane messaging session pane as part of a form . Form having been submitted into the messaging session also appears in messaging session pane of the second user as a form having been conveyed via a server system .

Having receiving form the second user provides the requested information by entering input data in input fields and . The second user then submits this information into the messaging session which appears as a form in messaging session pane and a form in messaging session pane . At this juncture information identifying input fields and are used to auto populate input fields and with the input data provided by the second user. This is accomplished by the JavaScript code using the aforementioned label name in the messaging session to identify the hash table entries that contain the corresponding input identifiers and so determining which input fields in messaging enabled web application dialogue to auto populate. This operation is depicted in by the auto population of input fields and and is reflected in the changes to messaging enabled web application dialogue .

The process depicted in begins with the transfer of one or more input fields from an application e.g. a messaging enabled application dialogue to a messaging application e.g. a messaging application used by a customer service agent or more simply an agent step . Next the agent s messaging application sends a message including the form in question to the server system providing communications between the agent and the customer step . At this juncture the server system sends a message including the form in question back to the messaging application for display step . At approximately the same time or thereafter the server system sends a message also including the form in question to the client system being used by the customer for display by a messaging applet for display on the client system step .

Once the customer has entered the requested information into the form the customer then submits the completed form into the messaging session. In turn this message including input data provided in response to the form is sent from the client system to the server system step . As will therefore be appreciated an element presented to a customer in a form in this manner is referred to herein as an execution enabled element. This indicates that selection of the GUI element not only results in the performance of one or more operations within the messaging system but also initiates one or more operations within one or more applications e.g. one or more enterprise or web applications . The server system then sends a message including the aforementioned response to the agent s messaging application for display by the agent s computer system step . At approximately the same time or thereafter of course the server system sends a message including the aforementioned response back to the client system for display by the client system via the messaging applet step . At approximately the same time or thereafter a call is automatically made to the server system to perform one or more operations using the input data provided by the customer step . The requisite operation s are then performed step . Once the server system has performed the desired operations e.g. searching a help database for a solution to a problem the server system sends an update to the application dialogue and provides a status update in the messaging session step . Once the input fields of the application dialogue have been populated and the requisite operations performed the process concludes.

Server system supports various mechanisms to provide the requisite functionality to support a messaging system according to embodiments of the present invention. As before server system can be implemented for example by one or more servers e.g. messaging system of messaging system of or the like . However server system provides not only servers that include for example an online chat server e.g. an XMPP server but also support for one or more applications e.g. via the provision of a web server e.g. a Hyper Text Transfer Protocol HTTP Server . Software modules supported by server system can include for example a Cascading Style Sheet CSS form e.g. form.css a JavaScript module for processing the form e.g. form process.js and a JavaScript module supporting functionality in the agent s console executed on agent computing system e.g. agent console process.js .

In operation agent computing system submits a form into the current messaging session which can be accomplished using one of the approaches described herein for example. The form is communicated from agent computing system to customer computing system via server system . In the scenario depicted in the customer s response is used to not only auto populate the input fields of a messaging enabled application dialogue but also to cause such submission to initiate the corresponding operation s .

The process depicted in thus begins with the submission of a form into the current messaging session as part of a message sent from agent computing system to server system depicted in as a message . In turn server system sends a message to agent computing system and a message to customer computing system thereby displaying the given form in the messaging session displayed by agent computing system and customer computing system respectively.

Message can be generated and so displayable in the messaging session using a predefined form structure with a form identifier form id for example as follows 

Message can be generated and so displayable in the messaging session using a predefined form structure with a form identifier form id for example as follows 

The customer then enters the requested information into the form and submits the completed form into the messaging session. This submission can be accomplished by sending a form post string as a message from customer computing system to server system . The form in message can be generated and posted and so displayable in the messaging session for example using a format such as 

Printer Model PX1260S Problem Type Driver Issue Problem Details The printer stops working after driver update form id solution form . . . .

Once in receipt of message server system communicates the information thus received to agent computing system as a message and to customer computing system as a message . Message includes one or more formatted name value pairs as well as a form post string message includes one or more formatted name value pairs. Thus message can be generated and so displayable in the messaging session using for example formatted name value pairs in a manner such as 

Similarly message can be generated and so displayable in the messaging session using for example formatted name value pairs such as 

Once in receipt of message agent computing system makes a program call e.g. an AJAX call to server system depicted in as an AJAX call as a result of having received message . In the case of AJAX call such a call can be based for example on the form identifier e.g. form id using the form post string. As will be appreciated in light of the present disclosure in certain embodiments AJAX call is the same as or comparable to the form post string that can be launched in the agent s console on agent computing system .

Once server system has received AJAX call the requested operations are performed e.g. using the input data received in the form communicated in message and the results provided as a message . Message can include for example information such as a partial page update and can also be configured to result in a status update in the given messaging session.

In a manner comparable to that discussed elsewhere herein a user e.g. a customer service agent selects a form for submission into the messaging session which can then be submitted into the given messaging session. In the example depicted in the agent submits a form with fields corresponding to the fields of messaging enabled application dialogue into messaging session as a form that appears in agent messaging window as a form . In so doing a form is also communicated to the customer s computing system via server system and is thus displayed in customer messaging window as a form .

Once in receipt of the form the customer can enter the requested information into the appropriate input fields of form . However rather than being presented with the ability to simply submit the now completed form into the messaging session the customer is presented with one or more buttons that allow the customer to actually initiate the operations for which the information was requested. For example as depicted in the customer is presented with a search button which once the requisite fields of form have been completed allows the customer to initiate a search using the information thus entered. As will be appreciated in light of the present disclosure search button is an example of the aforementioned execution enabled element the selection of which in the example of not only sends the completed form from the customer i.e. customer messaging window to the agent agent messaging window but also causes a search to be performed by the given application in the example the results of which appear in messaging enabled application dialogue . As will be further appreciated in light of the present disclosure providing such functionality to the part requesting service e.g. in this case the customer relieves the party providing the service e.g. in this case a customer service agent of the task of initiating such operations.

Thus in the manner noted with regard to the example depicted in the customer s selection of search button not only results in the provision of the entered information to the customer service agent e.g. depicted as the display of such information in agent messaging window as a form and in customer messaging window as a form but also results in not only the auto population of input fields and of messaging enabled application dialogue but also the operations involved in actually using the information thus provided in effecting the desired operations. In the process depicted in messaging session the customer s selection of search button also results in the identification of a solution and its description depicted in as a solution description but also in the provision of an alert within form in agent messaging window . As can be seen alert presents the customer service agent with a send button within alert which allows the customer service agent to send the solution this identified solution description to the customer simply by selecting send button . Moreover such functionality can simply though optionally provide the agent with just an alert and proceed with sending the requisite information e.g. solution description to the customer without any intervention by the agent. As will be appreciated in light of the present disclosure the automation of such operations greatly simplifies the tasks that need to be accomplished by the customer service agent and thereby also provide the customer with faster and more efficient service.

As noted throughout the foregoing discussions the use of SDOs DFOs and other such constructs according to embodiments of the present invention allow for a number of useful and advantageous user interface features. Examples of such user interface features are now presented along with discussions thereof.

In the example depicted in a customer service agent viewing an agent chat dialogue and a customer viewing a customer chat dialogue communicate with one another in a messaging session. As can be seen an agent form in agent chat dialogue includes a checkbox allowing the agent to indicate whether or not the re submission of agent form from the customer via customer chat dialogue is allowed. In this scenario the user has entered the requested information into the various input fields depicted in as input fields and of a customer form . At the point in time depicted in however the customer has entered a value Value1 into an input field a value Value2 into an input field and a value Value3 into an input field . In the scenario depicted in the customer replies to the agent by completing input fields of customer form and selecting a submit button the fields of customer form can also be reset via the selection of a reset button . This results in the requested information being returned to the messaging system as well as the display of that information in a form in agent chat dialogue and form in customer chat dialogue .

As will be appreciated in light of the present disclosure the depiction of checkbox in being checked i.e. selected allows a customer inputting information via customer chat dialogue to change information entered in one or more of input fields and and re submit the revised information into messaging session as noted. In such case input fields and of customer form are enabled as depicted in . Alternatively if checkbox is unchecked i.e. not selected the customer cannot enter new information in any of input fields and . In that case input fields and would be disabled grayed out upon the original information being submitted into the messaging session and so the customer would be prevented from entering any further information in these fields . Further in such a case the messaging system will typically also disable submit button as well as reset button upon submission of information via customer form .

As the foregoing examples presented by demonstrate a messaging system according to embodiments of the present invention offer a variety of features and alternatives thereto with respect to a number of aspect of such a messaging system including for example control over input to the system by the messaging session s participants. For example as observed elsewhere herein a variety of interactions can be made available to the remote user e.g. customer when dealing with a form submitted to that user after submission of the form. In one embodiment elements of such a form or an entire form can have three different states 

2. Disabled on the customer side with a checkbox on the agent side that allows for resubmission of the elements entire form thus enabled and

The first case is the basic case in which the customer is provided with the ability to resubmit information using the form. The second case as depicted in the preceding figures allows the agent to control whether or not the customer is able to resubmit the given form though such control can also be made the purview of the messaging system . As will be appreciated from the present disclosure this includes the ability not only to enable or disable resubmission presently but also to do so subsequently. In the latter case this means that the agent is able to allow the user to submit the form only once but is then subsequently able to change the setting and so permit the user to resubmit information by way of the now enabled form. Thus for example if the agent later determines that information that should not be changed during the messaging session was entered incorrectly e.g. credit card information the agent can allow the customer to re enter resubmit such information. An example of the last case would be login information which would typically not change during a messaging session . Such one time only entries could be put under the control of the agent or mandated by the messaging system s configuration.

Similarly active monitoring can be provided not only to allow an agent to follow along with the customer as they enter information e.g. in order to point out errors work ahead and so on as discussed in connection with but can actually provide the agent with the ability to enter act on information as that information is entered by the customer. Thus on the agent side a form according to embodiments of the present invention can for example provide functionality such as 

The first case is the basic case in which the agent is provided with the ability to submit the form but cannot see any changes to the form made by the customer or interact with any of the form s functionality e.g. reset and submit buttons . The second case allows the agent to view one or more of the fields of the given form while leaving the functionality of the form that results in actual entries being made disabled as to the agent. An example of such a scenario s application is a case in which the agent is able to review all options including hidden options from a dropdown list to ensure that the selections therein are understandable to the customer. The third case allows the agent to fully interact with one or more of the fields of the given form and so make changes thereto. An example of the last case would be a form having some number of text fields to be completed by the customer which the agent could also edit thereby providing a limited joint form filling feature e.g. allowing the agent to fix typos made by the customer .

An example of a mechanism for allowing an agent to view information entered by a customer now follows. In one embodiments as will be appreciated in light of the present disclosure input text can change as the result of a number of actions including keypresses copy and paste operations modification e.g. by JavaScript auto completed entries and the like. In such situations such information can be obtained in a number of ways including for example a JavaScript function that is called with the current input value any time that input value changes which can be achieved for example by the following operations 

As will be further appreciated the foregoing is merely an example the functionality of which can be implemented in any number of ways in light of the present disclosure.

In the scenario depicted in the messaging system auto populates the input fields of a messaging enabled web application dialogue which can also be configured to mask such information. Thus such information is masked in agent chat dialogue and the forms presented therein and is also masked when such information is used to auto populate the input fields of a dialogue such as messaging enable web application dialogue . By employing such auto population and masking functionality the confidentiality of a customer s sensitive information can be maintained while still allowing a customer service agent or other such user to perform tasks associated with providing service to the customer. Once the input fields of messaging enabled web application dialogue are auto populated the agent can simply select a search button in order to search for the desired customer information. Further as noted elsewhere herein the customer s confidential information can be encrypted upon entry into the form in question and such encryption and so security maintained until the web application receives and processes the encrypted information. This provides a high level of security for users of such messaging systems.

As noted in an implementation such as that depicted in customers employing mobile devices are able view other message communications e.g. textual portions of a messaging session such as mobile messaging dialogue while still being able to interact with a form that an agent has submitted into a messaging session e.g. thumbwheel selections presented as the result of the display and selection of printer model selection button . As also noted such interactions are made possible by the in band nature of the messaging system s communications and user interface.

As shown above the present invention can be implemented using a variety of computer systems and networks. An example of one such computing and network environment is described below with reference to .

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system are generally stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium.

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present invention. The devices and subsystems can be interconnected in different ways from that shown in . The operation of a computer system such as that shown in is readily known in the art and is not discussed in detail in this application. Code to implement the present invention can be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . The operating system provided on computer system may be MS DOS MS WINDOWS UNIX Linux or another such operating system.

Moreover regarding the signals described herein those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block or a signal can be modified e.g. amplified attenuated delayed latched buffered inverted filtered or otherwise modified between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next other embodiments of the present invention may include modified signals in place of such directly transmitted signals as long as the informational and or functional aspect of the signal is transmitted between blocks. To some extent a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved e.g. there will inevitably be some attenuation and delay . Therefore as used herein a second signal derived from a first signal includes the first signal or any modifications to the first signal whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and or final functional aspect of the first signal.

With reference to computer system modem network interface or some other method can be used to provide connectivity from each of client computer systems and to network . Client systems and are able to access information on storage server A or B using for example a web browser or other client software not shown . Such a client allows client systems and to access data hosted by storage server A or B or one of storage devices A N B N N or intelligent storage array . depicts the use of a network such as the Internet for exchanging data but the present invention is not limited to the Internet or any particular network based environment.

The present invention is well adapted to attain the advantages mentioned as well as others inherent therein. While the present invention has been depicted described and is defined by reference to particular embodiments of the invention such references do not imply a limitation on the invention and no such limitation is to be inferred. The invention is capable of considerable modification alteration and equivalents in form and function as will occur to those ordinarily skilled in the pertinent arts. The depicted and described embodiments are examples only and are not exhaustive of the scope of the invention.

The foregoing describes embodiments including components contained within other components e.g. the various elements shown as components of computer system . Such architectures are merely examples and in fact many other architectures can be implemented which achieve the same functionality. In an abstract but still definite sense any arrangement of components to achieve the same functionality is effectively associated such that the desired functionality is achieved. Hence any two components herein combined to achieve a particular functionality can be seen as associated with each other such that the desired functionality is achieved irrespective of architectures or intermediate components. Likewise any two components so associated can also be viewed as being operably connected or operably coupled to each other to achieve the desired functionality.

The foregoing detailed description has set forth various embodiments of the present invention via the use of block diagrams flowcharts and examples. It will be understood by those within the art that each block diagram component flowchart step operation and or component illustrated by the use of examples can be implemented individually and or collectively by a wide range of hardware software firmware or any combination thereof.

The present invention has been described in the context of fully functional computer systems however those skilled in the art will appreciate that the present invention is capable of being distributed as a program product in a variety of forms and that the present invention applies equally regardless of the particular type of computer readable media used to actually carry out the distribution. Examples of computer readable media include computer readable storage media as well as media storage and distribution systems developed in the future.

The above discussed embodiments can be implemented by software modules that perform one or more tasks associated with the embodiments. The software modules discussed herein may include script batch or other executable files. The software modules may be stored on a machine readable or computer readable storage media such as magnetic floppy disks hard disks semiconductor memory e.g. RAM ROM and flash type media optical discs e.g. CD ROMs CD Rs and DVDs or other types of memory modules. A storage device used for storing firmware or hardware modules in accordance with an embodiment of the invention can also include a semiconductor based memory which may be permanently removably or remotely coupled to a microprocessor memory system. Thus the modules can be stored within a computer system memory to configure the computer system to perform the functions of the module. Other new and various types of computer readable storage media may be used to store the modules discussed herein.

The above description is intended to be illustrative of the invention and should not be taken to be limiting. Other embodiments within the scope of the present invention are possible. Those skilled in the art will readily implement the steps necessary to provide the structures and the methods disclosed herein and will understand that the process parameters and sequence of steps are given by way of example only and can be varied to achieve the desired structure as well as modifications that are within the scope of the invention. Variations and modifications of the embodiments disclosed herein can be made based on the description set forth herein without departing from the scope of the invention. Consequently the invention is intended to be limited only by the scope of the appended claims giving full cognizance to equivalents in all respects.

Although the invention has been described in connection with several embodiments the invention is not intended to be limited to the specific forms set forth herein. On the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.

