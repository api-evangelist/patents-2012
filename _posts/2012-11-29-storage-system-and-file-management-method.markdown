---

title: Storage system and file management method
abstract: In a first file storage apparatus, a first controller, which manages a first file system comprising a plurality of files, transfers a copy of the first file to a second file storage apparatus when managing the first file, manages the copy of the first file as a first replication file, configures the replication destination of the first replication file in the first file as a first pointer and, when processing a second file as a de-duplication target file, manages the first replication file as a copy of the first file and second file, configures a first pointer in the second file, and deletes the first data on condition that the storage destination of the first data which comprises the first file has been configured in the first file, or deletes the second data on condition that the storage destination of the second data which comprises the second file has been configured in the second file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09092446&OS=09092446&RS=09092446
owner: HITACHI, LTD.
number: 09092446
owner_city: Tokyo
owner_country: JP
publication_date: 20121129
---
The present invention relates to a storage system which exchanges information via a network between a plurality of local file storage apparatuses and a remote file storage apparatus and to a file management method.

A method has been adopted where in a plurality of local file storage apparatuses which are connected to a remote file storage apparatus via a network copies of file write data are transferred at regular intervals to a remote file storage apparatus as replication files and the replication files are stored in the remote file storage apparatus as backup files. Here technology which deletes data of files in the local file storage apparatus edge side file storage apparatus manages the files as stub files and suppresses an increase in the capacity of storage devices for storing files see PTL 1 .

However in the case of PTL 1 no consideration is given to de duplication processing in each edge side file storage apparatus to eliminate the duplication of processing of a plurality of files when processing a plurality of files with the same data. Hence in a case where a first file and a second file with the same data are processed by using the technology mentioned in PTL 1 a copy of write data of a first file is transferred to the remote file storage apparatus as a replication file and a copy of write data of a second file is transferred to the remote file storage apparatus as a replication file whereby the data transfer amount increases and the network line load increases.

Therefore in the technology mentioned in PTL 1 de duplication processing cannot be efficiently executed for a plurality of files in a process where a file changes to a normal file a replicated file or a stub file.

The present invention was conceived in view of problems faced by the prior art and an object thereof is to provide a storage system and a file management method which enable a data transfer amount to be reduced when processing de duplication target files.

In order to solve the foregoing problem the present invention is a storage system in which a plurality of first file storage apparatuses are connected to a second file storage apparatus wherein when a first file which is stored in a first file storage apparatus and which stores a first replication file in a second file storage apparatus and a second file which is stored in the first file storage apparatus after the first file are managed as de duplication target files a first pointer indicating a replication destination of the first replication file is configured in the first file the first replication file is managed as a copy of the first file and a copy of the second file the first pointer is configured in the second file and the first data is deleted on condition that a storage destination of the first data comprising the first file has been configured in the first file or the second data is deleted on condition that a storage destination of the second data comprising the second file has been configured in the second file.

The present invention enables a data transfer amount to be reduced when processing de duplication target files.

The present example is devised such that when a first file among a plurality of files is processed if a copy of a first file is transferred from a first file storage apparatus to a second file storage apparatus the copy of the first file is managed as a first replication file and when a second file is processed as a de duplication target file in the process of managing the first file by changing the first file from a first normal file to a first stub file a GI file is created second data comprising a second file is stored in the created GI file the first replication file is managed as a copy of the second file a second reference destination to the effect that the storage destination of the second data is a GI file is configured in the metadata of the second file and a first reference destination to the effect that the storage destination of the first data is the GI file is configured in the metadata of the first file and then the second data is deleted.

An Example of the present invention will be described herein below on the basis of the drawings. is an overall configuration of a storage system. In the storage system comprises edge sites and and a core site and each of the edge sites and and the core site are each interconnected via a network .

The edge sites and are each sites comprising a local computer for example sites where the user actually performs a task such as a store or place of business. The edge sites and comprise PC Personal Computers a file server and a first file storage apparatus local file storage apparatus which are interconnected via a bus . A first file system which comprises files and directories is connected to the first file storage apparatus . Note that the edge sites and each have the same configuration and the description herein below will mainly focus on the edge site among the edge sites and .

The core site is a site comprising a remote computer for example a site for centrally managing servers or storage apparatuses or a site for providing cloud services or the like. This core site comprises a PC and a second file storage apparatus remote file storage apparatus and the PC and second file storage apparatus are connected via a bus . A plurality of file systems which correspond to a plurality of tenants which are file systems comprising files and directories are constructed in the second file storage apparatus .

The CPU is configured as a first controller for centrally managing the whole first file storage apparatus and executes various processing in accordance with a program which is stored in the memory .

The memory is a storage device for storing information such as various programs. The memory stores a scheduler program for managing schedules of various programs a de duplication program for executing file de duplication a migration program for executing file migration a stubbing program for executing file stubbing a file referencing program for executing file referencing a file update program for executing file updates and a file deletion program for executing file deletion.

The scheduler program starts any of the programs among the de duplication program the migration program and the stubbing program on the basis of a schedule configured by the user. The file referencing program the file update program and the file deletion program are started in response to an API Application Programming Interface call from the user.

The disk is a storage device for storing information such as various tables and files and is configured from storage devices such as HDD Hard Disk Drives for example. This disk stores a file management table a GI Golden Image management table and an inode management table and stores a plurality of files and one or more GI files . The GI files are files for which among the plurality of files duplicate processing of the files must be eliminated and which are configured as shared files for storing data of the files which are de duplication target files. Here files are a collection of data with a fixed relationship which comprise a file body or file entity as real data and metadata. Further the metadata is file attribute information which comprises information relating to file path file size file existence file hash value file update date and time and stub existence and the like.

The network interface is configured as an interface for exchanging data with another first file storage apparatus or second file storage apparatus via a network .

Note that the second file storage apparatus can be configured as an apparatus which like the first file storage apparatus comprises a CPU a memory a disk a network interface I F and a bus. In this case the CPU of the second file storage apparatus functions as a second controller which performs the exchange of data and information with the first file storage apparatus via the network and which manages the file system .

An inode is an identifier enabling the inodes of each file constructed in the first file system to be uniquely identified by the first file system .

The file name is the file name of each file constructed in the first file system . The file size is information indicating the capacity of each file constructed in the first file system . The hash value is a hash value which is obtained from the data of each file constructed in the first file system . If files with identical hash values exist these files are managed as files with the same data. For example because the respective hash values of a file with the file name C and a file with the file name D are 00c1 these files are managed as files comprising the same data.

The replication destination of the second file storage is information indicating the replication destination of the replication file copy of the file stored in the first file storage apparatus which is replicated from the first file storage apparatus to the second file storage apparatus . The name of the file system where the replication file is stored for example Tenant 1 A is stored as information on the replication destination of the replication file in the entry of the replication destination field E of the second file storage.

The GI flag is information indicating the existence of de duplication execution on the files . If de duplication processing has not been executed on the files OFF is stored in the entry of the GI flag field F and if de duplication processing is executed on the files ON information is stored as an entry of the GI flag field F.

The stub flag is information indicating whether the files have been stubbed. If the files have not been stubbed OFF information is stored as an entry of the stub flag field G and if the file has been stubbed and is managed as a stub file that is if data real data of the file has been deleted and only metadata of the file exists ON information is stored.

The recall flag is information indicating whether it is necessary to recall a replication file stored in the second file storage apparatus from the second file storage apparatus to the first file storage apparatus . If it is not necessary to recall a replication file as an entry of the recall flag field H OFF information is stored and when a replication file must be recalled ON information is stored.

The file update date and time is information indicating the date and time day month year when data is stored in the file and when the data of the file is updated.

The migration execution date and time is information indicating the date and time day month year when the file is migrated replicated from the first file storage apparatus to the second file storage apparatus and when the file is stored in the second file storage apparatus as a replication file.

Here when the CPU manages files for constructing the first file system if the files comprise data real data and metadata indicating information for managing the data the files are managed as normal files. If a data copy of a normal file is replicated migrated from the first file storage apparatus to the second file storage apparatus a replication file comprising the normal file data copy is stored in the second file storage apparatus and if information indicating the replication destination of the replication file storage destination of the normal file data is configured as a pointer in the normal file metadata the normal file is managed as a replicated file. The replicated file is managed as a stub file stubbed file if the data of the replicated file is deleted only metadata exists and if information indicating the replication destination data storage destination of the normal file of the replication file has been configured as a pointer in the metadata.

Further the normal file is managed as a de duplication target file if the data of the normal file matches the data of the other files for example the data of a stub file data which is deleted when the stub file changes from a replicated file to a stub file . The de duplication target file is managed as a de duplicated file if data matching the stub file data is deleted and the deleted data is stored in the GI file . Information to the effect that the data storage destination is a GI file is configured as a reference destination in the metadata of the de duplicated file and information indicating the replication destination of the replication file the copy destination of the replicated file which is the original file of the stub file is configured as a pointer. In this case information to the effect that the data storage destination is the GI file is configured as a reference destination in the metadata of the stub file stubbed file . Note that the files are managed such that an inode has a fixed value even if a file is changed to a normal file a replicated file a stub file stubbed file or a de duplicated file.

An inode is an identifier enabling each GI file stored on the disk to be uniquely identified by the first file storage apparatus . A file name is the name of each GI file stored on the disk . The file size is information indicating the capacity of each GI file stored on the disk . The hash value is information relating to the hash value obtained from the data of each GI file stored on the disk .

The reference counter is information indicating the number of files for which the GI file is the reference destination. Here if the GI file with the file name X is configured as the reference destination data storage destination of two files with identical data files with the file names C and D whose hash value is 00c1 for example 2 is stored as an entry of the reference counter field E. Further if the GI file is configured as a reference destination data storage destination of one file for example the file with the file name F whose hash value is 0f10 1 information is stored as an entry of the reference counter field E.

An inode is an identifier enabling the inode of each file constructed in the first file system to be uniquely identified by the first file system . The file name is the file name of each file constructed in the first file system . The creation date and time is information indicating the creation date and time of each file constructed in the first file system .

The update date and time is information indicating the date and time when the update data is stored in each file constructed in the first file system and when the data of each file is updated.

The reference configuration is information indicating the reference destination data storage destination of the files with data stored in the GI file among each of the files constructed in the first file system . If the data of each file constructed in the first file system is stored in the GI file GI file information is stored as an entry of the reference configuration field E. If the data of each file constructed in the first file system is not stored in the GI file the information is stored as an entry in the reference configuration field E.

In the case of a combination in which the GI flag is ON the stub flag is ON and the recall flag is OFF the file exists in the first file system and hence the CPU determines the file existence determination to be present. The file in this case corresponds to a stub file in which the GI file is the reference destination.

In the case of a combination in which the GI flag is ON the stub flag is OFF and the recall flag is ON the file does not exist in the first file system and hence the CPU determines the file existence determination to be none. In this case recall is not generated for files other than stub files.

In the case of a combination in which the GI flag is ON the stub flag is OFF and the recall flag is OFF the file exists in the first file system and hence the CPU determines the file existence determination to be present. The file in this case corresponds to a de duplicated file and a replicated file.

In the case of a combination in which the GI flag is OFF the stub flag is ON and the recall flag is ON the file exists in the first file system and hence the CPU determines the file existence determination to be present. The file in this case corresponds to a stub file for which de duplication has not been performed.

In the case of a combination in which the GI flag is OFF the stub flag is ON and the recall flag is OFF the file does not exist in the first file system and hence CPU determines the file existence determination to be none. In this case the stub files must be managed as files for which the GI file must be referenced or managed as files for executing recall.

In the case of a combination in which the GI flag is OFF the stub flag is OFF and the recall flag is ON the file does not exist in the first file system and hence the CPU determines the file existence determination to be none. In this case because the file is a file other than a stub file recall is not generated.

In the case of a combination in which the GI flag is OFF the stub flag is OFF and the recall flag is OFF the file exists in the first file system and hence the CPU determines the file existence determination to be present. The file in this case corresponds to a replicated file.

The file replicated to the second file storage apparatus is managed as a replication file which represents a copy of the file . Further files files with file names A and B for which the replication file exists in the second file storage apparatus are managed as replicated files. A pointer indicating the replication destination of the replication file is configured in the replicated file metadata.

Further when the file with the file name B is stubbed and is managed as a stub file if the file with the file name B is accessed the replication file is recalled from the second file storage apparatus on the basis of the pointer configured in the metadata of the stub file and the data of the replication file is stored in the file with the file name B. In this case the file with the file name B is restored from a stub file to a normal file and is managed as a normal file.

In addition if the data of the file with the file name B matches the data of the file with the file name A for example if the hash value obtained from the data of the file with the file name B matches the hash value obtained from the data of the file with the file name A the file with the file name B and the file with the file name A are managed as de duplication target files.

Here in order to store the data of the file with the file name B the GI file is created and data of the file with the file name B is stored in the GI file . Thereafter the data of the file with the file name B is deleted and a pointer indicating the replication destination of the replication file which is information to the effect that a copy of the data of the file with the file name B is the replication file replication file of the file with the file name A is configured in the metadata of the file with the file name B. That is the replication file is a replication file shared by the file with the file name A and the file with the file name B.

Hence when the file with the file name B is processed processing to replicate a copy of the data of the file with the file name B from the first file storage apparatus to the second file storage apparatus is unnecessary and an increase in the data transfer amount can be suppressed. In addition reference destination information indicating that the data storage destination of the file with the file name B and the data storage destination of the file with the file name A are GI files is managed in the inode management table as a reference setting. In this case the file with the file name B and the file with the file name A are managed as de duplicated files.

If the file with the file name B and the file with the file name A are accessed after the file with the file name B and the file with the file name A have been managed as de duplicated files the data of the file with the file name B and the data of the file with the file name A can be accessed by referencing the inode management table and accessing the GI file . Hence even when the file with the file name B or the file with the file name A are accessed there is no need to recall the replication file and it is possible to reduce the data transfer amount from the second file storage apparatus to the first file storage apparatus and suppress an increase in the line load of the network . Note that if the update data of the de duplicated file is stored the update data is managed as differential data in the de duplicated file.

In if a file which is a normal file or replicated file for example a file with the file name A is processed the CPU references the file management table on the basis of the file with the file name A and determines whether the file with the file name A exists in the file management table S .

If a negative determination result is obtained in step S that is if the file with the file name A is a new storage file the CPU calculates the hash value of the file with the file name A S and moves to the processing of step S.

If an affirmative determination result is obtained in step S that is if the file with the file name A exists in the file management table the CPU compares the hash value of the file with the file name A with the hash value of the file in the file management table S . Note that if the file with the file name A is a new storage file the CPU compares the hash value calculated in step S with the hash value of the file in the file management table .

If it is determined in step S that none of the hash values match that is if files with identical hash values do not exist the CPU uses the file with the file name A to newly create the GI file in order to store the data of the file S and moves to the processing of step S. In this case in step S the CPU configures a pointer for which the newly created GI file is the reference destination data storage destination in the metadata of the file with the file name A and subsequently deletes the data of the file with the file name A S and newly registers the file with the file name A in the file management table S .

If on the other hand it is determined in step S that one or more of the hash values match that is if one or more files with identical hash values exist the CPU checks the state of each GI flag in a group of files with file name B which are files with identical hash values S .

If it is determined in step S that the states of the GI flags in the group of files with file name B are all OFF the CPU uses a file with file name A to newly create a GI file for storing the data of the file on condition that the GI file does not exist on the disk S and moves to the processing of step S. In this case in step S the CPU configures the pointer for which the newly created GI file is the reference destination data storage destination in the metadata of the file with the file name A subsequently deletes the data of the file with the file name A S and registers the information of the file with the file name A information such as the hash value and file size in the file management table S .

If on the other hand it is determined in step S that one or more of the states of the GI flags in the group of files with file names B are ON the CPU configures a pointer for which an existing GI file is the reference destination data storage destination in the metadata of a file with the file name A on condition that the GI file already exists on the disk S subsequently deletes the data of the file with the file name A S and registers information of the file with the file name A information such as the hash value and file size in the file management table S .

If it is determined for the group of files with the file name B that a file whose GI flag is OFF does not exist the CPU then moves from step S to the processing of step S see .

If on the other hand it is determined for the group of files with the file name B that a file whose GI flag is ON exists the CPU executes the processing between steps S and S.

In step S the CPU determines whether the types of the files with the file names B are stub files or replicated files. If a file with the file name B is determined to be a stub file the CPU configures a pointer for which the GI file is a reference destination data storage destination in the metadata of the file with the file name B S and then updates the information in the file management table S . Thereupon the CPU references entries corresponding to the files with the file name B in the file management table and changes the recall flag from ON to OFF and changes the GI flag from OFF to ON.

If on the other hand it is determined in step S that the type of file with the file name B is a replicated file the CPU configures a pointer for which the GI file is the reference destination data storage destination is in the metadata of the file with the file name B S deletes the data of the file with the file name B S and updates the information of the file management table S . Thereupon the CPU references an entry corresponding to the file with the file name B in the file management table and modifies the GI flag from OFF to the ON.

Thereafter the CPU updates information in the GI management table S and ends the processing of this routine. Note that in step S if the file is a new storage file the CPU registers information of the new storage file in all the fields in the GI management table and if the file is an existing file and a de duplication target file the CPU increments the value of the reference counter in the GI management table by one.

First the CPU determines whether the target file which is the migration target for example any file among a normal file a replicated file or a stub file whose GI flag is ON has been registered in the file management table S . For example if the file with the file name A is selected as the target file the CPU references the file management table on the basis of the file with the file name A and determines whether the target file exists in the file management table .

If a negative determination result is obtained in step S that is if a file with the file name A has not been registered in the file management table the CPU calculates the hash value of the target file file with the file name A S .

Thereafter the CPU compares the hash value of the target file with the hash value of the file registered in the file management table and determines whether the two hash values match S . Upon determining in step S that none of the hash values match the CPU replicates the target file stored in the first file storage apparatus to the second file storage apparatus S registers the target file the file with the file name A in the file management table as a new file updates the information of all the fields corresponding to the new file in the file management table S and ends the processing of this routine.

If an affirmative determination result is obtained in step S for example if the target file is a stub file stubbed file for which the GI flag is ON and exists in the file management table the CPU references the file management table on the basis of the target file compares the previous migration program execution date and time with the target file update date and time and determines which of the dates and times is new S .

If the previous migration program execution date and time is determined to be newer than the target file update date and time in step S that is if the processing of the previous migration was executed after the update date was stored in the target file and there is no need to execute the migration processing once again the CPU ends the processing of this routine.

If it is determined in step S that the update date and time of the target file is newer than the previous migration program execution time that is if the update data was stored in the target file after the previous migration processing was executed the CPU determines for the target file whether the GI flag is ON and the stub file is ON S .

If a negative determination result is obtained in step S the CPU calculates a target file hash value S .

If on the other hand an affirmative determination result is obtained in step S that is if the target file is a stub file whose GI flag is ON and update data exists in the target file if the data of the target file which exists in the first file storage apparatus and the data of the replication file which exists in the second file storage apparatus are different the CPU recalls the replication file from the replication destination of the second file storage apparatus and calculates the hash value of the target file on the basis of data which includes data of the recalled replication file and the update data which exists in the target file S .

The CPU then compares the hash value of the target file with the hash value of each file registered in the file management table and determines whether both hash values match S . If it is determined in step S that the two hash values do not match at all the CPU replicates the target file copy of the data including the update data which is stored in the first file storage apparatus to the second file storage apparatus S registers the target file in the file management table manages the target file as a normal file updates the stub flag to OFF in the information of the file management table S and ends the processing of this routine.

If on the other hand it is determined in step S that the two hash values match the CPU determines for the target file whether the replication destination in the second file storage apparatus is registered in the file management table S .

If a negative determination result is obtained in step S the CPU replicates the target file including the update data to the second file storage apparatus S registers information including the hash value of the target file containing the update data and the replication destination in the file management table updates the information of the file management table S and ends the processing of this routine.

If on the other hand an affirmative determination result is obtained in step S that is if for the target file containing the update data the replication destination in the second file storage apparatus has been registered in the file management table the CPU registers hash value information for the target file containing the update data in the file management table updates information of the file management table S and ends the processing in this routine.

First if a replicated file or a stub file whose GI flag is ON for example is selected as the stub target file the CPU refers to the file management table for the selected stub target file compares the previous migration program execution time with the target file update date and time and determines whether either date and time is new S .

If it is determined in step S that the previous migration program execution date and time is newer than the stub target file update date and time that is if the previous migration processing is executed after the update data was stored in the stub target file the CPU moves to the processing of step S.

If it is determined in step S that the update date and time of the stub target file is newer than the previous migration program execution date and time that is if the update data was stored in the stub target file after the previous migration processing was executed the CPU starts the migration program in order to copy the update data to the replication file replicates the update data to the second file storage apparatus and stores the update data in the replication file which exists in the second file storage apparatus S .

The CPU then configures a pointer to the replication file in the second file storage apparatus the replication file whose update data was copied in the stub target file S and deletes the data of the stub target file S .

Subsequently the CPU determines whether the GI flag is ON or OFF for the stub target file S . If the CPU determines in step S that the GI flag of the stub target file is OFF the CPU moves to the processing of step S and if it is determined in step S that the GI flag of the stub target file is ON deletes link information which associates the stub target file with the GI file S changes the stub flag to ON the recall flag to ON and the GI flag to OFF in the file management table updates the information of the file management table and ends the processing of this routine.

Upon receipt of read access by the PC the CPU manages the file which is the read target as a reference target file references the file management table on the basis of the reference target file and determines whether the reference target file exists in the file management table .

If a negative determination result is obtained in step S that is if a reference target file is a new storage file and does not exist in the first file storage apparatus the CPU references the information of the reference target file access request from the PC S and ends the processing of this routine.

If an affirmative determination result is obtained in step S that is if the reference target file exists in the first file storage apparatus the CPU determines whether the GI flag of the reference target file is ON or OFF S .

If it is determined in step S that the GI flag of the reference target file is ON the CPU references the information of the GI file registered in the GI management table together with the differential data update data S and ends the processing of this routine.

Meanwhile if it is determined in step S that the GI flag of the reference object file is OFF the CPU determines whether the stub flag of the reference target file is ON or OFF S .

If an affirmative determination result is obtained in step S the CPU recalls the replication file the replication file corresponding to the reference target file from the replication destination of the second file storage apparatus S references the information of the recalled replication file S changes the stub flag of the reference target file to OFF and the recall flag of the reference target file to OFF on the basis of the referenced information and updates the information of the file management table and ends the processing of this routine.

Meanwhile if it is determined in step S that the stub flag is OFF that is if the reference target file is a replicated file the CPU references the information of the replicated file as a reference target file S and ends the processing of this routine.

The CPU references the file management table on the basis of the inode of the update target file and determines whether the update target file exists in the file management table S .

If an affirmative determination result is obtained in step S the CPU determines whether the GI flag of the update target file is ON S .

If an affirmative determination result is obtained in step S the CPU updates the information of the update target file and holds the update data as a differential S subsequently changes the file update date and time of the update target file updates the information of the file management table S and ends the processing of this routine.

If it is determined in step S that the GI flag of the update target file is OFF the CPU determines whether the stub flag of the update target file is ON or OFF S .

If it is determined in step S that the stub flag of the update target file is ON that is if the update target file is a stub file the CPU recalls the replication file corresponding to the update target file from the replication destination of the second file storage apparatus S updates the update target file using the data of the recalled replication file S and manages the update target file by changing the update target file from a stub file to a normal file.

Thereafter the CPU changes the stub flag of the update target file from ON to OFF changes the recall flag of the update target file from ON to OFF updates the information of the file management table S and ends the processing of this routine.

Further if it is determined in step S that the stub flag of the update target file is OFF the CPU updates the update target file as a replicated file S subsequently updates the information of the file management table S and ends the processing of this routine.

If on the other hand a negative determination result is obtained in step S that is if the update target file is a new storage file the CPU updates the update target file as a new storage file S and ends the processing of this routine.

First the CPU searches for the first file system on the basis of the inode of the deletion target file deletes a deletion target file in the first file system S references the file management table on the basis of the inode of the deletion target file and determines whether the deletion target file exists in the file management table S .

If a negative determination result is obtained in step S that is if the deletion target file is a new storage file the CPU determines that the deletion target file does not exist in the first file system and ends the processing of this routine.

If an affirmative determination result is obtained in step S the CPU determines whether the GI flag of the deletion target file is ON or OFF S .

If it is determined in step S that the GI flag of the deletion target file is OFF that is if the deletion target file is a replicated file the CPU deletes the record of the deletion target file from the file management table S and ends the processing of this routine.

If it is determined in step S that the GI flag of the deletion target file is ON the deletion target file is the de duplication target file that is if the deletion target file is a de duplication target file the CPU references the inode management table and the GI management table on the basis of the inode of the deletion target file and decrements the reference counter of the GI file of the GI management table reference counter value 1 S .

The CPU then references the GI management table on the basis of the inode of the deletion target file and determines whether the value of the reference counter of the GI file is 0 or 1 or one or more S .

If it is determined that the counter of the GI file of the deletion target file is 0 that is the value of the reference counter is changed from 1 to 0 as a result of deleting the deletion target file the CPU deletes the GI file which is a data storage destination of the deletion target file from the disk S deletes the record of the deleted GI file in the GI management table S deletes the record of the deleted deletion target file in the file management table S and ends the processing of this routine.

If on the other hand it is determined in S that the value of the reference counter of the GI file of the deletion target file is one or more for example if the value of the reference counter is changed from 2 to 1 the CPU deletes the record of the deleted deletion target file in the file management table S and ends the processing of this routine.

In this embodiment if the first file among the plurality of files is stored on the disk the CPU is able to transfer the copy of the first file to the second file storage apparatus via the network manage the copy of the transferred first file as the first replication file and configure the first pointer indicating the replication destination of the first replication file in the metadata of the first file and if a second file comprising identical data to the first file is subsequently stored on the disk the CPU is able to manage the first file and second file as de duplication target files configure a first reference destination to the effect that the storage destination of the first data comprising the first file is the GI file or the second file for example in the metadata of the first file or configure a second reference destination to the effect that the storage destination of the second data comprising the second file for example the GI file or the first file in the metadata of the second file .

Here the CPU manages the first replication file as a copy of the first file and a copy of the second file configures a first pointer indicating the replication destination of the first replication file in the metadata of the second file deletes the first data on condition that the storage destination of the first data has been configured in the metadata of the first file or deletes the second data on condition that the storage destination of the second data has been configured in the metadata of the second file .

In this case because the CPU manages the first replication file as a copy of the first file and a copy of the second file the CPU need not transfer the data of the replication file which is a copy of the second file from the first file storage apparatus to the second file storage apparatus via the network whereby the data transfer amount can be reduced and an increase in the line load of the network can be suppressed.

Furthermore when processing the second file or the third file as a de duplication target file in the process of managing the first file by changing the first file from a first normal file to a first stub file the CPU is able to store second data which comprises the second file or third data which comprises the third file in the first stub file and manage the first file by restoring the first file from a first stub file to a first normal file.

In this case even when the first file which is the first normal file is accessed because the second data or third data corresponding to the first data exists in the first file the CPU need not recall the data of the replication file from the second file storage apparatus whereby the data transfer amount from the second file storage apparatus to the first storage apparatus can be reduced and an increase in the line load of the network can be suppressed.

Further when processing the second file as a de duplication target file in the process of managing the first replication file as a copy of the first file and managing the first file by changing the first file from a first normal file to a first stub file the CPU is able to create a GI file store the second data comprising the second file in the GI file thus created manage the replication file as a copy of the second file configure a second reference destination to the effect that the storage destination of the second data is the GI file in the metadata of the second file configure a first reference destination to the effect that the storage destination of the first data is the GI file in the metadata of the first stub file which is the first file and subsequently manage the second file as a de duplicated file on condition that the second data is deleted.

In this case even when the first file or the second file is subject to read access by retrieving the metadata of the first file or second file the CPU is able to reference the data stored in the GI file . In addition by managing the replication file as a copy of the second file when processing the second file as a de duplication target file the CPU need not recall the data of the replication file from the second file storage apparatus whereby the data transfer amount from the second file storage apparatus to the first storage apparatus can be reduced and an increase in the line load of the network can be suppressed.

Further when processing a plurality of other files as de duplication target files in the process of managing the first file by managing the first file by changing the first file from a first normal file to a first stub file the CPU is able to manage the replication file as a copy of each of the other files configure a reference destination to the effect that the storage destination of the data of each of the other files is the GI file in the metadata of each of the other files and subsequently manage each of the other files as de duplicated files on condition that the data of each of the other files is deleted. In this case the CPU need not store the data of each of the other files on the disk and therefore an increase in the capacity of the data to be stored on the disk can be suppressed.

With this Example the data transfer amount can be reduced when processing the de duplication target files.

Note that the present invention is not limited to the above Example rather the present invention encompasses various modifications. The present invention is not necessarily limited to comprising all the configurations described. Further other configurations may be added to or replace a portion of the configurations of this Example or a portion of the configurations may be removed.

Furthermore the foregoing configurations and functions and so on may each be realized by hardware by designing a portion or all of the foregoing configurations and functions by means of an integrated circuit or circuits for example. Further the foregoing configurations and functions and so on may each be realized by software as a result of a processor parsing and executing programs which realize the respective functions. Information of programs tables and files which realize each of the functions can be recorded on recording devices such as memory hard disks SSDs Solid State Drive or on recording media such as IC Integrated Circuit cards SD Secure Digital memory cards or DVDs Digital Versatile Disc .

