---

title: Apparatus and printer
abstract: An apparatus includes a framework for installing an application based on manifest information, and uses a prescription manifest prescribed to be used when using the framework. The apparatus determines whether the apparatus is a model for changing a declaration value of a manifest file. When the apparatus determines that the apparatus is the model for changing the declaration value of the manifest file, a manifest file added for the model for changing the declaration value of the manifest file is overwritten to the manifest file as a default.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832678&OS=08832678&RS=08832678
owner: Canon Kabushiki Kaisha
number: 08832678
owner_city: Tokyo
owner_country: JP
publication_date: 20120123
---
The Open Services Gateway initiative OSGi Alliance advocates an OSGi framework as a framework for managing a life cycle of an application such as execution start stop of the application. In the OSGi framework an application format is prescribed as ajar file in a Java compression format. The jar file is created by collecting a plurality of class files into one file as an archive. Further the jar file includes a MANIFEST.MF file having a description of the jar file. With a description of an attribute of an OSGi specification to the manifest file the OSGi framework manages the life cycle of the application according to the described attribute.

In an image forming apparatus it is attempted to install the application externally and load the application. Further another image forming apparatus loaded with a system in conformity with the above described OSGi framework is widespread. Moreover another image forming apparatus appears in which not only the attribute of the OSGi specification but also a unique attribute is defined and extended to the manifest file.

The presence or absence of an available function and a hard disk drive HDD capacity or a memory capacity varying depending on an apparatus model. It is in demand to construct a system to be capable of installing a created application to the plurality of different models. Japanese Patent Application Laid Open No. 2000 305756 discusses a method for changing install contents of one application depending on the remaining amount of a hard disk drive HDD at the install destination. As discussed in Japanese Patent Application Laid Open No. 2000 305756 if a free capacity of the HDD is small the install is controlled to compress and temporarily install the application and when the free capacity is assured to decompress the application.

According to an aspect of the present invention an apparatus has a framework for installing an application based on manifest information and using a prescription manifest determined to be used when using the framework. The apparatus includes a determination unit configured to determine when installing the application to the apparatus whether another manifest information is required in addition to the prescription manifest based on model information of the apparatus and a transmission unit configured when the determination unit determines that the other manifest information is not required to transmit information on the prescription manifest to the framework without transmitting the other manifest information and configured when the determination unit determines that the other manifest information is required to transmit the other manifest information in addition to the information on the prescription manifest to the framework. The framework installs when the transmission unit transmits the information on the prescription manifest and the information on the other manifest the application based on both the information.

Further features and aspects of the present invention will become apparent from the following detailed description of exemplary embodiments with reference to the attached drawings.

Various exemplary embodiments features and aspects of the invention will be described in detail below with reference to the drawings.

A conventional art does not consider to install an application by changing a declaration value or an application name according to attributes varying depending on each apparatus such as the presence or absence of an available function a hard disk drive HDD capacity or a memory capacity.

For example there is a difference in loaded units between a single function printer SFP and a multi function printer MFP . With respect to an amount of resources of an image forming apparatus the MFP can be larger than the SFP.

The present invention is directed to installing an application to apparatuses having different available functions HDD capacities or memory capacities without departing from an OSGi standard specification based on declaration values suitable to the individual apparatuses.

The present invention is described below according to an exemplary embodiment. An OSGi framework has a specification to read a manifest file named MANIFEST.MF included in a jar file. If there is a difference in presence or absence of an available function an HDD capacity or a memory capacity depending on printer models there is a case where it is required to set an attribute value of the OSGi specification of the manifest file to each printer model. In this case in the OSGi specification even if an application having a plurality of the manifest files is formed the OSGi framework cannot individually read the manifest files.

Therefore the application having a modified description of the manifest file needs to be created for each printer model. A single application also has to be divided into two packages. Thus it is disadvantageous that the application management becomes complicated. Further an application provider needs to provide a different application obtained by modifying the single application depending on the model of the image forming apparatus owned by a user.

The present invention is directed to installing an application by modifying a declaration value of a manifest or an application name according to attributes varying depending on the presence or absence of an available function an HDD capacity or a memory capacity.

Hereinafter a specific description is given according to an exemplary embodiment of the present invention with reference to the drawings. Components described according to the exemplary embodiment are examples and the scope of the present invention is not limited to those.

The RAM is also used as a unit for temporal operation work storage area of the CPU . An input output interface transmits data to each apparatuses and a display not illustrated connected to each servers. In addition the input output interface receives data from a pointing device not illustrated . A network interface card NIC allows the information processing apparatus to communicate with the image forming apparatus via the network . The units can transmit and receive data via a bus .

The image forming apparatus has the configuration in and further has a print unit not illustrated and or a scanner unit not illustrated . If the image forming apparatus is the MFP the image forming apparatus further includes another unit in addition to the print unit and or the scanner unit. On the other hand if the image forming apparatus is the SFP the image forming apparatus does not include the scanner unit and is configured only the print unit. The print unit can transmit and receive data to from each of the units via the bus . Further the print unit can print various image data including raster image data to a recording medium or can transmit the image data to an external device. The scanner unit reads a document placed on a document positioning plate and generates image data.

The OSGi framework installs the designated application in response to the install request from the installer and further starts or stops the application. The OSGi framework according to the present exemplary embodiment conforms to the specification of a standard framework prescribed under the OSGi Alliance. According to the present exemplary embodiment the object is accomplished by realizing the configuration of the OSGi framework without departing from the standard specification prescribed by the OSGi Alliance.

A virtual machine is an execution environment for executing the application and is realized for example by a Java registered trademark virtual machine. The virtual machine is an execution environment realized on an operation system OS as a first execution environment. Further the virtual machine is a second execution environment for executing the application described based on the Java. The environments are provided for the image forming apparatus . As a consequence even after producing the image forming apparatus an application for controlling the print unit and or the scanner unit in the image forming apparatus can be installed and executed. The OS is an execution environment controlling the entire image forming apparatus . The OS includes each of modules of real time OS that can control various functions of the copy machine in real time or library groups that can critically control option devices of the copy machine and each function including an expansion card. Further the OS is realized by module groups that provide an interface command to the application operated at high order thereof.

A description is given of the installer with reference to . illustrates a configuration of the installer . A model determination unit determines whether the image forming apparatus is a MFP or an SFP. Model information is provided for the image forming apparatus . Different model information is provided depending on as to whether the image forming apparatus is the MFP or the SFP. The model determination unit performs the determination processing based on the model information. An install instruction unit issues an install request of the application to the OSGi framework .

An overwriting unit performs processing for overwriting to a part of a prescription manifest described later a declaration value of another manifest. A decompression unit decompresses the application that is instructed to be installed by the application management application or the PC application . A restriction determination unit determines a restriction item when overwriting the manifest file. A recompression unit recompresses file formats of an execution file and a file including a prescription manifest to which a declaration value of another manifest is overwritten by the overwriting unit .

Creation of the application is described. illustrates a directory configuration of the manifest file of the application according to the present exemplary embodiment. The application is obtained by compressing the file formats including the manifest file and the execution file. The manifest is synonymous with the manifest file.

When creating a jar file by a jar command a MANIFEST.MF file is automatically generated to a META INF folder . According to the present exemplary embodiment a manifest item is described for a model for changing the declaration value of the manifest file in addition to the automatically generated MANIFEST.MF file . Therefore a MANIFEST EX.MF file is provided. In the META INF folder the application in the jar file format including above file is formed.

The automatically generated MANIFEST.MF file is referred to as a prescription manifest and the MANIFEST EX.MF file provided independently of the prescription manifest is referred to as another manifest. In conformity with the OSGi standard the OSGi framework reads only the declaration value described in the MANIFEST.MF file as the prescription manifest. Therefore the image forming apparatus according to the present exemplary embodiment includes the decompression unit the overwriting unit and the recompression unit . The application is decompressed once and the declaration value of the prescription manifest is rewritten and compressed. Thus the best manifest to each model of the image forming apparatus is used without departing from the OSGi standard.

A description is given of the install processing of the application. The user designates the application from the PC application or the user interface UI screen provided by the application management application and installs the application. The installer requests the install processing of the input application to the OSGi framework .

In step S the model determination unit determines whether the image forming apparatus is a model for changing the declaration value of the manifest file based on the model information. When the model information does not indicate the model for changing the declaration value of the manifest file NO in step S in step S the install instruction unit requests the install processing to the OSGi framework . Then in step S the processing ends. In this case the image forming apparatus is the MFP and the MANIFEST.MF file is also a manifest prepared for the MFP. Therefore the overwriting processing is not executed.

When the model information indicates the model for changing the declaration value of the manifest file YES in step S in step S the overwriting unit overwrites the declaration value of the MANIFEST EX.MF file in the application to a part of the MANIFEST.MF file . An overwriting logic is described with reference to . In step S the overwriting unit deletes the MANIFEST EX.MF file that is unnecessary.

In step S the recompression unit recompresses the formats of the execution file and the file constituted by the prescription manifest in the jar file format and stores the application. In step S the install instruction unit requests the install operation of the application recompressed by the recompression unit to the OSGi framework . In step S the processing ends.

With the processing the OSGi framework installs the application based on the model information by any one of the processing for installing the application only by the prescription manifest and the processing for installing the application based on both the prescription manifest and another. The application is installed by using the manifest relating to the application for install.

The installer has the configuration in and executes the processing in . Thus a common application is formed to a plurality of different image forming apparatuses. Then the application is installed conforming with the OSGi specification without correcting the OSGi framework .

Referring to of a MANIFEST.MF file as a prescription manifest is created in step S when the install destination of the application is a model for changing the declaration value of the manifest file. The same attribute as an attribute is overwritten. Further the same attribute as an attribute is overwritten. Items and have the same value as the value . Obviously items and have the value of the MANIFEST EX.MF of .

A complementary description is added to . Although not illustrated according to the present exemplary embodiment the following processing may be performed between steps S and S. In other words processing is performed when reading the conventional application. The conventional application includes only the prescription manifest. In this case the overwriting processing cannot be executed. After step S it is determined whether the decompressed application includes a manifest different from the prescription manifest. When the decompressed application does not include the manifest different from the prescription manifest the processing advances to step S whereupon the OSGi framework installs the application. With the processing it is possible to provide the image forming apparatus corresponding to the conventional application already released in the market in addition to the new application according to the present exemplary embodiment.

The description is given of the installer to switch whether to install the application only by using the first manifest that is prescribed by the OSGi framework or to install the application by using together the second manifest that is not prescribed based on the model information of the image forming apparatus . The installer forms the specification of the OSGi framework without departing from the OSGi standard. Further the application is not necessarily required for each model of the image forming apparatus . As a consequence a provider of the application may provide only a predetermined application independently of the model of the image forming apparatus owned by the user.

The restriction item is described. The restriction item used for the determination in step S is finally described. The PC application and the application management application refer to a part of the attribute of the MANIFEST.MF file when issuing an instruction to install the application thereby displaying the attribute value on the screen of the information processing apparatus . The display attribute and attribute value are different between the PC application and the application management application . If the attribute value of the display attribute is described to the MANIFEST EX.MF file and the change thereof is permitted the application side has to correct the MANIFEST EX.MF file by referring to the MANIFEST EX.MF file to display the manifest file. To prevent the influence the attribute capable of being described to the MANIFEST EX.MF file is restricted. When describing the attribute other than the attribute which is capable of being described the attribute is to be ignored without being overwritten.

An overwritable manifest attribute includes MaximumMemoryUsage and MaximumFileSpaceUsage. Further a non overwritable manifest attribute includes Bundle Vender and Bundle Name.

A description is given according to a modification of the exemplary embodiment. According to the exemplary embodiment it is discussed of the method for overwriting contents of a MANIFEST EX.MF file to a MANIFEST.MF file. Alternatively the present invention can be accomplished by deleting the MANIFEST.MF file and rewriting a file name of the MANIFEST EX.MF to the MANIFEST.MF. In this case all information required for the install processing needs to be described to the MANIFEST EX.MF file from the start time as illustrated in . According to the exemplary embodiment when a developer forms the MANIFEST EX.MF file only a change may be described. Therefore the amount of development hours of the developer is smaller than that according to the modification.

According to the exemplary embodiment the distinction is performed based on the type of the image forming apparatus such as the MFP or the SFP and the model information is set. In other words a flag indicating the MFP or a flag indicating the SPF is stored to the image forming apparatus . However the present invention is not limited to this. For example the distinction may be performed based on information such as a memory capacity a capacity of a central processing unit CPU or provided option. Based on the distinction result the model information may be set. In this case a flag 0 may be assigned to an image forming apparatus having the memory capacity of a certain threshold or more and a flag 1 may be assigned to an image forming apparatus having the memory capacity of less than the certain threshold.

Furthermore the use of manifest may be distinguished based on a device type e.g. device identification ID or a specific ID of the image forming apparatus and the model information may be set based on the distinction result. Moreover in response to expansion of resources or option the model information may be switched halfway. Thus it is possible to properly install the application according to the situation of the currently used image forming apparatus.

According to the exemplary embodiment the model determination unit is provided. Alternatively without providing the model determination unit previously setting whether another manifest is required to the image forming apparatus a determination unit may be provided to determine whether another manifest is required.

Aspects of the present invention can also be realized by a computer of a system or apparatus or devices such as a CPU or MPU that reads out and executes a program recorded on a memory device to perform the functions of the above described embodiments and by a method the steps of which are performed by a computer of a system or apparatus by for example reading out and executing a program recorded on a memory device to perform the functions of the above described embodiments. For this purpose the program is provided to the computer for example via a network or from a recording medium of various types serving as the memory device e.g. computer readable medium . In such a case the system or apparatus and the recording medium where the program is stored are included as being within the scope of the present invention.

While the present invention has been described with reference to exemplary embodiments it is to be understood that the invention is not limited to the disclosed exemplary embodiments. The scope of the following claims is to be accorded the broadest interpretation so as to encompass all modifications equivalent structures and functions.

This application claims priority from Japanese Patent Application No. 2011 013254 filed Jan. 25 2011 which is hereby incorporated by reference herein in its entirety.

