---

title: Vehicle comprising multi-operating system
abstract: A mobile computing device with a mobile operating system and personal computer or vehicle processing module operating system running concurrently and independently on a shared kernel without virtualization. The mobile operating system provides a user experience for the mobile computing device that suits the mobile environment. The personal computer operating system provides a full personal computer user experience when the mobile computing device is docked to a secondary terminal environment. The vehicle processing module operating system provides a full vehicle processing module user experience when the mobile computing device is docked to a secondary terminal environment. The mobile computing device may be a smartphone running the Android mobile OS and a full desktop Linux distribution on a modified Android kernel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09324234&OS=09324234&RS=09324234
owner: AutoConnect Holdings LLC
number: 09324234
owner_city: Wellesley
owner_country: US
publication_date: 20121116
---
The present application is a continuation in part of U.S. patent application Ser. No. 13 217 108 filed Aug. 24 2011 entitled MULTI OPERATING SYSTEM which claims the benefits of U.S. Provisional Application Nos. 61 389 117 filed Oct. 1 2010 entitled Multi Operating System Portable Docking Device 61 507 201 filed Jul. 13 2011 entitled Cross Environment Communication Framework 61 507 203 filed Jul. 13 2011 entitled Multi Operating System 61 507 206 filed Jul. 13 2011 entitled Auto Configuration of a Docked System in a Multi OS Environment and 61 507 209 filed Jul. 13 2011 entitled Auto Waking of a Suspended Secondary OS in a Dockable System each of which is incorporated herein by this reference in its entirety.

The present application claims the benefits of U.S. Provisional Application Serial Nos. 61 560 509 filed Nov. 16 2011 61 637 164 filed Apr. 23 2012 and 61 663 335 filed Jun. 22 2012 all entitled COMPLETE VEHICLE ECOSYSTEM 61 646 747 filed on May 14 2012 entitled Branding of Electrically Propelled Vehicles Via the Generation of Specific Operating Sounds 61 653 275 filed on May 30 2012 entitled Vehicle Application Store for Console 61 653 264 filed on May 30 2012 entitled Control of Device Features Based on Vehicle State 61 653 563 filed on May 31 2012 entitled Complete Vehicle Ecosystem 61 672 483 filed on Jul. 17 2012 entitled Vehicle Climate Control 61 714 016 filed on Oct. 15 2012 entitled Vehicle Middleware and 61 715 699 filed Oct. 18 2012 entitled Vehicle Middleware each of which is incorporated herein by this reference in its entirety.

Cross reference is made to U.S. patent application Ser. Nos. 13 420 236 filed on Mar. 14 2012 entitled Configurable Vehicle Console 13 420 240 filed on Mar. 14 2012 entitled Removable Configurable Vehicle Console 13 462 593 filed on May 2 2012 entitled Configurable Dash Display 13 462 596 filed on May 2 2012 entitled Configurable Heads Up Dash Display 13 679 234 filed on Nov. 16 2012 entitled Gesture Recognition for On Board Display 13 679 412 filed on Nov. 16 2012 entitled Vehicle Application Store for Console 13 679 857 filed on Nov. 16 2012 entitled Sharing Applications Media Between Car and Phone Hydroid 13 679 878 filed on Nov. 16 2012 entitled In Cloud Connection for Car Multimedia 13 679 875 filed on Nov. 16 2012 entitled Music Streaming 13 679 676 filed on Nov. 16 2012 entitled Control of Device Features Based on Vehicle State 13 678 673 filed on Nov. 16 2012 entitled Insurance Tracking 13 678 691 filed on Nov. 16 2012 entitled Law Breaking Behavior Sensor 13 678 699 filed on Nov. 16 2012 entitled Etiquette Suggestion 13 678 710 filed on Nov. 16 2012 entitled Parking Space Finder Based on Parking Meter Data 13 678 722 filed on Nov. 16 2012 entitled Parking Meter Expired Alert 13 678 726 filed on Nov. 16 2012 entitled Object Sensing Pedestrian Avoidance Accident Avoidance 13 678 735 filed on Nov. 16 2012 entitled Proximity Warning Relative to Other Cars 13 678 745 filed on Nov. 16 2012 entitled Street Side Sensors 13 678 753 filed on Nov. 16 2012 entitled Car Location 13 679 441 filed on Nov. 16 2012 entitled Universal Bus in the Car 13 679 864 filed on Nov. 16 2012 entitled Mobile Hot Spot Router Application Share Site or Network 13 679 815 filed on Nov. 16 2012 entitled Universal Console Chassis for the Car 13 679 476 filed on Nov. 16 2012 entitled Vehicle Middleware 13 679 306 filed on Nov. 16 2012 entitled Method and System for Vehicle Data Collection Regarding Traffic 13 679 369 filed on Nov. 16 2012 entitled Method and System for Vehicle Data Collection 13 679 680 filed on Nov. 16 2012 entitled Communications Based on Vehicle Diagnostics and Indications 13 679 443 filed on Nov. 16 2012 entitled Method and System for Maintaining and Reporting Vehicle Occupant Information 13 678 762 filed on Nov. 16 2012 entitled Behavioral Tracking and Vehicle Applications 13 679 292 filed Nov. 16 2012 entitled Branding of Electrically Propelled Vehicles Via the Generation of Specific Operating Output 13 679 400 filed Nov. 16 2012 entitled Vehicle Climate Control 13 840 240 filed on Mar. 15 2013 entitled Improvements to Controller Area Network Bus 13 678 773 filed on Nov. 16 2012 entitled Location Information Exchange Between Vehicle and Device 13 679 887 filed on Nov. 16 2012 entitled In Car Communication Between Devices 13 679 842 filed on Nov. 16 2012 entitled Configurable Hardware Unit for Car Systems 13 679 204 filed on Nov. 16 2012 entitled Feature Recognition for Configuring a Vehicle Console and Associated Devices 13 679 350 filed on Nov. 16 2012 entitled Configurable Vehicle Console 13 679 358 filed on Nov. 16 2012 entitled Configurable Dash Display 13 679 363 filed on Nov. 16 2012 entitled Configurable Heads Up Dash Display and 13 679 368 filed on Nov. 16 2012 entitled Removable Configurable Vehicle Console . The entire disclosures of the applications listed above are hereby incorporated by reference in their entirety for all that they teach and for all purposes.

Vehicles are moving progressively towards higher levels of computerization. Most vehicle tasks functions and operations are now under computer control or monitored by computational devices. With the coming of the digital age consumers are demanding more similarity between cellular phones and tablet computers on the one hand vehicle console interactions on the other.

General Motors and Ford among others have announced vehicle infotainment systems having more dynamic user interfaces. The CUE infotainment system of Cadillac for example integrates the vehicle infotainment system with an intelligent user interface having touch and haptic feedback natural language voice interaction proximity sensing and buttons and controls to provide a more in car information communication navigation and entertainment while simultaneously simplifying the interaction and tailoring it to the driving experience. Ford has introduced a SYNC and MYFORD systems offering features similar to CUE and also an in car application store for games and other types of applications. MYFORD offers an open architecture allowing developers to build software that will run in customizable displays in web enabled cars.

Automotive manufacturers however have failed to integrate personal electronic devices of occupants such as smart phones tablet computers and laptop computers with the in vehicle computational system.

These and other needs are addressed by the various aspects embodiments and or configurations of the present disclosure. The present disclosure is directed to a vehicle processing module that can more effectively integrate personal computational devices of occupants by using an application framework supporting different software execution environments.

a first operating system running in a first execution environment on a shared kernel the first operating system having a first application framework supporting a first application and

a second operating system running concurrently with the first operating system in a second execution environment on the shared kernel the second operating system having a second application framework supporting a second application wherein the second application is incompatible with the first application framework.

The first operating system can include a first set of user libraries in the first execution environment. Typically the second application is incompatible with the first set of user libraries.

The computing device can be one of a mobile computing device a tablet computer a laptop computer a personal computer and a processing module of a vehicle.

The system can further include a secondary terminal environment with the second operating system being associated with the secondary terminal environment.

The computing device and the secondary terminal environment can be connected with a single dock connector that includes a display interface and serial communications interface.

The first operating system can be associated with a first frame buffer in the physical memory device and the second operating system with a second frame buffer in the physical memory device.

The computing device can further include a first display device and the first frame buffer can be associated with the first display device.

The computing device can further include a secondary terminal environment. The secondary terminal environment can include a second display device and the second frame buffer can be associated with the second display device.

The second application can be displayed on the second display device through the second frame buffer.

The computing device can further include a physical storage device and the second execution environment can be logically isolated from the first execution environment on the physical storage device.

The computing device can further include an input device connected to the computing device. Input commands from the input device can be available to the first operating system in the first execution environment and to the second operating system in the second execution environment.

The first operating system can be one of a mobile operating system and a desktop operating system and the second operating system the other of a mobile operating system and desktop operating system.

The second operating system can access input commands from the input device through the shared kernel.

establishing by the first monitor service a second execution environment within the first execution environment and

A multi operating system manager can select a processing resource from among a plurality of processing resources to execute first and second operating systems the first operating system being a native operating system of the selected processing resource and the second operating system being a native operating system of a second processing resource and execute by the second operating system an application on the selected processing resource and providing the results to the second processing resource for presentation to a user. By way of example a tablet computer can execute a tablet computer operating system and a mobile operating system. A mobile application can be executed on the mobile operating system in the tablet computer and the results provided over a network link to a mobile computing device having the mobile operating system as its native operating system.

The present disclosure can provide a number of advantages depending on the particular aspect embodiment and or configuration. The first operating system when on the vehicle processing module can provide a more dynamic user interface. It can integrate personal electronic devices of occupants such as smart phones tablet computers and laptop computers with the in vehicle computational system. For example occupants can execute a first application on a mobile computing device or personal computing device and after entering the vehicle cause the user interface to appear on the vehicle console. Occupants can alternatively execute a first application on the vehicle processing module and cause the vehicle console user interface to appear on a mobile computing device or personal computing device of the occupant. The occupant can execute applications from one computational device on another computational device. For instance a mobile application can execute on the personal computing device or vehicle processing module operating system a personal computing device application can execute on the mobile computing device or vehicle processing module operating system and a vehicle infotainment application can execute on the mobile computing device or personal computing device operating system.

The phrases at least one one or more and and or are open ended expressions that are both conjunctive and disjunctive in operation. For example each of the expressions at least one of A B and C at least one of A B or C one or more of A B and C one or more of A B or C and A B and or C means A alone B alone C alone A and B together A and C together B and C together or A B and C together.

The term a or an entity refers to one or more of that entity. As such the terms a or an one or more and at least one can be used interchangeably herein. It is also to be noted that the terms comprising including and having can be used interchangeably.

The term automatic and variations thereof as used herein refers to any process or operation done without material human input when the process or operation is performed. However a process or operation can be automatic even though performance of the process or operation uses material or immaterial human input if the input is received before performance of the process or operation. Human input is deemed to be material if such input influences how the process or operation will be performed. Human input that consents to the performance of the process or operation is not deemed to be material .

The term application refers to application software also known as an application or an app is computer software designed to help the user to perform specific tasks. Examples include satellite location and navigation software social networking software gaming software word processing software graphics software and media players. Application software is contrasted with system software and middleware which manage and integrate a computer s capabilities but typically do not directly apply in the performance of tasks that benefit the user. The system software serves the application which in turn serves the user.

The term application store refers to a digital application distribution platform that allows users to browse and download applications from an online store. Applications are available either for free or at a cost. Applications can be downloaded directly to a target device.

The term automatic and variations thereof as used herein refers to any process or operation done without material human input when the process or operation is performed. However a process or operation can be automatic even though performance of the process or operation uses material or immaterial human input if the input is received before performance of the process or operation. Human input is deemed to be material if such input influences how the process or operation will be performed. Human input that consents to the performance of the process or operation is not deemed to be material .

The term automotive navigation system or navigation system is a satellite navigation system designed for use in automobiles. It typically uses a GPS navigation device to acquire position data to locate the user on a road in the unit s map database. Using the road database the unit can give directions to other locations along roads also in its database. Dead reckoning using distance data from sensors attached to the drivetrain a gyroscope and an accelerometer can be used for greater reliability as GPS signal loss and or multipath can occur due to urban canyons or tunnels.

The terms communication device smartphone computing device and mobile device and variations thereof as used herein are used interchangeably and include any type of device capable of communicating with one or more of another device and or across a communications network via a communications protocol and the like. Exemplary communication devices may include but are not limited to smartphones handheld computers laptops netbooks notebook computers subnotebooks tablet computers scanners portable gaming devices phones pagers GPS modules portable music players and other Internet enabled and or network connected devices.

The term computer readable medium as used herein refers to any storage and or transmission medium that participate in providing instructions to a processor for execution. Such a computer readable medium is commonly tangible and non transient and can take many forms including but not limited to non volatile media volatile media and transmission media and includes without limitation random access memory RAM read only memory ROM and the like. Non volatile media includes for example NVRAM or magnetic or optical disks. Volatile media includes dynamic memory such as main memory. Common forms of computer readable media include for example a floppy disk including without limitation a Bernoulli cartridge ZIP drive and JAZ drive a flexible disk hard disk magnetic tape or cassettes or any other magnetic medium magneto optical medium a digital video disk such as CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM a solid state medium like a memory card any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read. A digital file attachment to e mail or other self contained information archive or set of archives is considered a distribution medium equivalent to a tangible storage medium. When the computer readable media is configured as a database it is to be understood that the database may be any type of database such as relational hierarchical object oriented and or the like. Accordingly the disclosure is considered to include a tangible storage medium or distribution medium and prior art recognized equivalents and successor media in which the software implementations of the present disclosure are stored. Computer readable storage medium commonly excludes transient storage media particularly electrical magnetic electromagnetic optical magneto optical signals.

The terms dash and dashboard and variations thereof as used herein are used interchangeably and include any panel and or area of a vehicle disposed adjacent to an operator user and or passenger. Typical dashboards may include but are not limited to one or more control panel instrument housing head unit indicator gauge meter light audio equipment computer screen display HUD unit and graphical user interface.

The term desktop environment is used to refer to a style of GUI through which the user interfaces with the OS using icons windows toolbars folders and or desktop widgets and is not limited to a personal computer OS. For example a mobile OS could have a desktop device environment referring to the look and feel of the mobile OS GUI.

The terms determine calculate and compute and variations thereof as used herein are used interchangeably and include any type of methodology process mathematical operation or technique.

The term digital distribution also called content delivery online distribution electronic software distribution ESD among others refers to the delivery of media content such as audio video software and video games without the use of physical media usually over online delivery mediums such as the Internet. The term online distribution is typically applied to freestanding products downloadable add ons for other products are more commonly known as downloadable content. An online service for distribution of application software is usually called an application store or app store . Content distributed online may be streamed or downloaded. Streaming involves downloading and using content on demand as it is needed. Meanwhile downloading content to a hard drive or other form of storage media allows for quick access in the future. Specialist networks known as content delivery networks help distribute digital content over the Internet by ensuring both high availability and high performance. Alternative technologies for content delivery include peer to peer file sharing technologies. Content delivery platforms create and syndicate content remotely acting like hosted content management systems.

The term displayed image refers to an image produced on the display. A typical displayed image is a window or desktop. The displayed image may occupy all or a portion of the display.

The term means as used herein shall be given its broadest possible interpretation in accordance with 35 U.S.C. Section 112 Paragraph 6. Accordingly a claim incorporating the term means shall cover all structures materials or acts set forth herein and all of the equivalents thereof. Further the structures materials or acts and the equivalents thereof shall include all those described in the summary of the disclosure brief description of the drawings detailed description abstract and claims themselves.

The term module as used herein refers to any known or later developed hardware software firmware artificial intelligence fuzzy logic or combination of hardware and software that is capable of performing the functionality associated with that element. Also while the disclosure is presented in terms of exemplary embodiments it should be appreciated that individual aspects of the disclosure can be separately claimed.

The term satellite positioning system receiver refers to a wireless receiver or transceiver to receive and or send location signals from and or to a satellite positioning system such as the Global Positioning System GPS US GLONASS Russia Galileo positioning system EU Compass navigation system China and Regional Navigational Satellite System India .

The term screen touch screen or touchscreen refers to a physical structure that enables the user to interact with the computer by touching areas on the screen and provides information to a user through a display. The touch screen may sense user contact in a number of different ways such as by a change in an electrical parameter e.g. resistance or capacitance acoustic wave variations infrared radiation proximity detection light variation detection and the like. In a resistive touch screen for example normally separated conductive and resistive metallic layers in the screen pass an electrical current. When a user touches the screen the two layers make contact in the contacted location whereby a change in electrical field is noted and the coordinates of the contacted location calculated. In a capacitive touch screen a capacitive layer stores electrical charge which is discharged to the user upon contact with the touch screen causing a decrease in the charge of the capacitive layer. The decrease is measured and the contacted location coordinates determined. In a surface acoustic wave touch screen an acoustic wave is transmitted through the screen and the acoustic wave is disturbed by user contact. A receiving transducer detects the user contact instance and determines the contacted location coordinates.

 Utility software is system software designed to help analyze configure optimize and or maintain a computer. Utility software usually focuses on how the computer infrastructure including the computer hardware operating system application software and data storage operates.

The term vehicle refers to a device or structure for transporting animate and or inanimate or tangible objects e.g. persons and or things such as a self propelled conveyance. The term vehicle as used herein includes any conveyance or model of a conveyance where the conveyance was originally designed for the purpose of moving one or more tangible objects such as people animals cargo and the like. The term vehicle does not require that a conveyance moves or is capable of movement. Typical vehicles may include but are in no way limited to cars trucks motorcycles busses automobiles trains railed conveyances boats ships marine conveyances submarine conveyances aircraft space craft flying machines human powered conveyances and the like.

The term window refers to a typically rectangular displayed image on at least part of a display that contains or provides content different from the rest of the screen. The window may obscure the desktop.

The preceding is a simplified summary of the disclosure to provide an understanding of some aspects of the disclosure. This summary is neither an extensive nor exhaustive overview of the disclosure and its various aspects embodiments and or configurations. It is intended neither to identify key or critical elements of the disclosure nor to delineate the scope of the disclosure but to present selected concepts of the disclosure in a simplified form as an introduction to the more detailed description presented below. As will be appreciated other aspects embodiments and or configurations of the disclosure are possible utilizing alone or in combination one or more of the features set forth above or described in detail below.

A communication system can provide the mobile computing experience of a smartphone and the appropriate user experience of a secondary terminal environment in a single mobile computing device. A secondary terminal environment may be some combination of visual rendering devices e.g. monitor or display input devices e.g. mouse touch pad touch screen keyboard etc. and other computing peripherals e.g. HDD optical disc drive memory stick camera printer etc. connected to the computing device by a wired e.g. USB Firewire Thunderbolt etc. or wireless e.g. Bluetooth WiFi etc. connection. In embodiments a mobile operating system associated with the user experience of the mobile environment and a personal computing device e.g. laptop e reader personal computer or PC desktop or tablet computer operating system associated with the user experience of the secondary terminal environment are run concurrently and independently on a shared kernel. In other embodiments a vehicle console operating system associated with the user experience of a vehicle infotainment environment a mobile operating system associated with the user experience of the mobile environment and or a personal computing device operating system associated with the user experience of the secondary terminal environment are run concurrently and independently on a shared kernel.

According to one aspect consistent with various embodiments a computing device of a computing system such as in a vehicle processing module includes a mobile operating system with a first application framework supporting a first application running in a first execution environment on a shared kernel. A personal computing device operating system runs concurrently with the mobile operating system in a second execution environment on the shared kernel the personal computing device operating system includes a second application framework supporting a second application that is incompatible with the first application framework. A vehicle processing module operating system runs concurrently with the mobile operating system in a third execution environment on the shared kernel the vehicle infotainment operating system includes a third application framework supporting a second application that is incompatible with the first and second application frameworks.

According to other aspects consistent with various embodiments the second and or third applications are incompatible with a first set of user libraries of the mobile operating system the first and or third applications are incompatible with a second set of user libraries of the personal computing device operating system and the first and or second applications are incompatible with a third set of user libraries of the vehicle processing module operating system. In the computing system the shared kernel may be running on a processor of the mobile computing device the personal computing device or the vehicle processing module. The computing system may include primary secondary and tertiary terminal environments. The mobile computing device operating system may be associated with the primary terminal environment the personal computing device operating system may be associated with the secondary terminal environment and the vehicle processing module with the third terminal environment. The personal computing device operating system may be associated with the primary terminal environment the mobile computing device operating system may be associated with the secondary terminal environment and the vehicle processing module with the third terminal environment. The vehicle processing module operating system may be associated with the primary terminal environment the mobile computing device operating system may be associated with the secondary terminal environment and the personal computing device operating system with the third terminal environment.

The computing device and the secondary and or third terminal environment s may be connected with a single or multiple dock connector s each of which includes a display interface and serial communications interface.

The mobile operating system may be associated with a first frame buffer in a physical memory device of the computing device the personal computing device operating system may be associated with a second frame buffer in the physical memory device and the vehicle processing module operating system may be associated with a third frame buffer in the physical memory device. The first frame buffer may be associated with a first display device of the computing device.

The personal computing device operating system may be associated with a first frame buffer in a physical memory device of personal computing device the mobile computing device operating system may be associated with a second frame buffer in the physical memory device and the vehicle processing module operating system may be associated with a third frame buffer in the physical memory device. The first frame buffer may be associated with a first display device of the personal computing device.

The vehicle processing module operating system may be associated with a first frame buffer in a physical memory device of vehicle processing module the mobile computing device operating system may be associated with a second frame buffer in the physical memory device and the personal computing device operating system may be associated with a third frame buffer in the physical memory device. The first frame buffer may be associated with a first display device of the vehicle processing module.

According to other aspects consistent with various embodiments the computing system may include a second display device of a secondary terminal environment and the second frame buffer may be associated with the second display device. The second application may be displayed on the second display device through the second frame buffer. The second execution environment may be logically isolated from the first execution environment on a physical storage device. An input device may be connected to the computing device and input commands from the input device may be available to the mobile operating system in the first execution environment and to the personal computing device or vehicle processing module operating system in the second execution environment. The personal computing device or vehicle processing module operating system may access input commands from the input device through the shared kernel.

According to other aspects consistent with various embodiments the computing device is configured using a boot process that includes the steps of starting in response to a power on event a boot loader establishing by the boot loader the first execution environment starting by the boot loader the shared kernel initializing by the shared kernel the mobile personal computing device or vehicle processing module operating system starting by the shared kernel the first application framework starting in the mobile personal computing device or vehicle processing module operating system a monitor service for the others of the mobile computing device personal computing device and vehicle processing module establishing by the r monitor service a second and or third execution environment within the first execution environment and starting by the monitor service the second and or third application framework.

According to other aspects consistent with various embodiments multiple operating systems may be provided on a single physical processor of a computer by running a first application on a first operating system the first operating system running on a shared kernel and having a first application framework and running a second application on a second operating system the second operating system running concurrently with the first operating system on the shared kernel and having a second application framework wherein the second application is incompatible with the first application framework.

According to other aspects consistent with various embodiments a first frame buffer memory associated with the first operating system may be allocated by the shared kernel and a second frame buffer memory associated with the second operating system may be allocated by the shared kernel. The first operating system may render the first application in the first frame buffer memory through the shared kernel and the second operating system may render the second application in the second frame buffer memory through the shared kernel.

According to other aspects consistent with various embodiments a computing device includes a computer readable medium storing instructions for a physical processor. The instructions when executed cause the processor to perform steps comprising running a first operating system in a first execution environment on a shared kernel the first operating system having a first application framework supporting a first application and running a second operating system concurrently with the first operating system in a second execution environment on the shared kernel the second operating system having a second application framework supporting a second application wherein the second application is incompatible with the first application framework. The second execution environment may comprise a chrooted environment. The computing device may include telephony capabilities. The computing device may be for example a smartphone.

Traditionally handheld mobile telephony devices i.e. handsets were developed independently and served a separate and distinct purpose from that of personal computing devices PCs such as desktops tablet computers and laptops. Handheld mobile telephony devices were focused primarily on communication while PCs were focused on computing tasks such as creating and editing documents text based communication e.g. email etc. multimedia and web browsing. However mobile telephony devices are including ever increasing computing ability and users increasingly desire convergence of communication and computing capabilities into multi use mobile devices.

For example mobile telephony devices called smartphones that include computing capabilities are increasing in popularity. Many of these smartphones include a mobile operating system OS running on a mobile processor. While mobile processors and mobile OS s have increased the capabilities of these devices smartphones have not tended to replace PC environments such as desktop or notebook computers at least because of the limited user experience provided. In particular for some tasks such as typing or editing documents a full size keyboard and large display are easier to use than the user interface components typically found on a smartphone. For example smartphones typically use a small thumb style QWERTY keyboard touch screen display click wheel and or scroll wheel as user interface components. Selecting menu options or items typically involves either using a touch screen display or using the click wheel or scroll wheel to navigate menus and select items. This interface is suited to the small display screens and limited menu options typically found in smartphones but not suited to controlling more traditional programs with a larger number of menu options larger screen area and user interface built around a pointing device such as a traditional mouse.

Embodiments of the present disclosure are directed to a single mobile computing device that provides the mobile computing experience of a smartphone and when docked to a secondary terminal environment provides a full user experience appropriate to the secondary terminal environment. A secondary terminal environment may be some combination of visual rendering devices e.g. monitor or display input devices e.g. mouse touch pad touch screen keyboard etc. and other computing peripherals e.g. HDD optical disc drive memory stick camera printer etc. connected to the computing device by wired e.g. USB Firewire Thunderbolt etc. or wireless e.g. Bluetooth WiFi etc. interfaces. For example secondary terminal environments may include a docking cradle that connects the mobile computing device to an external display and input devices Smartdock or integrated device that includes a display keyboard and pointing device in a laptop like enclosure Smartbook . Other secondary terminal environments may include a TV monitor projector in dash car console home entertainment system and or home automation control system. While secondary terminal environments may have some processing or logic elements such as a microcontroller or other application specific integrated circuits ASICs they typically do not have a processor that runs a separate instance of an operating system.

Other embodiments of the present disclosure are directed to a personal computing device that provides the computing experience of a personal computing device and when docked to a secondary terminal environment provides a full user experience appropriate to the secondary terminal environment. A secondary terminal environment may be for example a mobile computing device or vehicle processing module. Secondary terminal environments may include a docking cradle that connects the personal computing device to an external display and input devices or integrated device that includes a display keyboard and pointing device in a laptop like enclosure. Other secondary terminal environments may include a mobile computing device TV monitor projector in dash car console home entertainment system and or home automation control system. While secondary terminal environments may have some processing or logic elements such as a microcontroller or other application specific integrated circuits ASICs they typically do not have a processor that runs a separate instance of an operating system.

Other embodiments of the present disclosure are directed to a vehicle processing module that provides the computing experience of a vehicle processing module and when docked to a secondary terminal environment provides a full user experience appropriate to the secondary terminal environment. A secondary terminal environment may be for example a mobile computing device or personal computing device. Secondary terminal environments may include a docking cradle that connects the vehicle processing module to an external display and input devices or integrated device that includes a display keyboard and pointing device in a laptop like enclosure. Other secondary terminal environments may include a mobile computing device TV monitor projector personal computing device home entertainment system and or home automation control system. While secondary terminal environments may have some processing or logic elements such as a microcontroller or other application specific integrated circuits ASICs they typically do not have a processor that runs a separate instance of an operating system.

While the multi operating system is discussed below in connection with the operating system of the mobile computing device being the primary operating system it is to be understood that the discussion applies equally to either the personal computing device or vehicle processing module being the primary operating system.

Mobile computing device may be connected to I O devices and or through port . I O devices and or may make up a secondary terminal environment . In some instances secondary terminal environment may be more suited to personal computing device or vehicle processing module OS than mobile OS . For example secondary terminal environment may include a keyboard pointing device and a display device . In these instances personal computing device or vehicle processing module OS can be associated with secondary terminal environment to provide the full capabilities of a personal computer or vehicle infotainment environment through secondary terminal environment . In other instances secondary terminal environment may be more suited for mobile OS than personal computing device or vehicle processing module OS . For example secondary terminal environment may include a touch screen display. In these instances mobile OS may be associated with secondary terminal environment .

In port is shown as connected to port of secondary terminal environment through interface . However port may include separate connections to each I O device and through interface . Interface may be any suitable wired or wireless interface or combination of wired and wireless interfaces for connecting devices such as keyboards monitors pointing devices etc. For example interface may be a combination of a display interface e.g. VGA DVI HDMI etc. and a device communications interface e.g. USB Bluetooth Firewire other serial communications interface etc. . Alternatively interface may be a single communications interface that supports both video and device communications signals e.g. Thunderbolt etc. .

Traditionally the hardware and software development paths for the handset environment and the PC environment have been completely independent because of different use models and competing constraints on product design. PCs including personal computing devices are designed to be flexible and powerful. Specifically PC hardware architecture is typically based around a general purpose PC processor connected to memory graphics and external components through various general purpose interfaces on a motherboard. For example a personal computing device motherboard may include a processor connected through a logic chipset to a graphics processor system memory e.g. RAM and various other components through communication interfaces PCI USB ISA IDE etc. . Some more highly integrated PC processors include an interface to a graphics processor e.g. AGP etc. and or interface to system memory e.g. SDR DDR DDR2 DDR3 DRDRAM etc. on the processor.

PC processors are optimized for high processor clock speed and computationally intensive tasks. The personal computing device market is presently dominated by processors based on the x86 CPU architecture. Current x86 based PC processors for personal computing devices have multiple 64 bit central processing units CPUs or cores with clock speeds exceeding 2.5 GHz and power consumption approaching 100 Watts. Current x86 based PC processors for laptop computers typically run at clock speeds up to 2.0 GHz and have power consumption in the range of 15 45 Watts. Because of the large power consumption of these processors personal computing devices may require cooling devices such as fans or heat sinks to remove waste heat from the processor. In addition the battery life of laptop computers using x86 based PC processors is typically less than four hours.

In contrast mobile processors for handsets are optimized for low power consumption and a high level of integration to reduce the overall size of the handset. For example mobile processors for handsets such as smartphones typically run at clock speeds lower than 2.0 GHz have power consumption of less than 1 Watt and integrate functions common to the mobile environment such as graphics controllers communications interfaces and camera controllers. The most common mobile processor architectures are reduced instruction set computing RISC processor architectures. Specifically the ARM mobile processor architecture is currently the predominant architecture for mobile processors designed for smartphones and other ultra portable and low power computing devices. Some PC processor manufacturers also refer to PC processors designed for use in laptop computers as mobile processors. However as used herein the term mobile processor refers to a processor suited for use in a handset or smartphone typically consuming less than 1 Watt and integrating mobile functionality.

Personal computing devices and handsets also typically have different system resources input output I O devices and peripherals. For example portable computers and vehicle processing modules typically have much larger amounts of system memory and storage capacity than handsets. While a typical laptop computer may have more than 2 GB of RAM and a hard drive with a capacity of more than 250 GB handsets typically have less than 512 MB of RAM and a solid state drive with a capacity of less than 32 GB. User interface components of personal computing devices typically include a display screen larger than 9 inches diagonally a full keyboard and pointing device s for user input. In contrast handsets typically include a display screen smaller than 7 inches diagonally and user interface components such as a thumb style QWERTY keyboard touch screen display click wheel and or scroll wheel. Peripherals found on personal computing devices typically include an optical disk drive e.g. CD DVD DVD RW etc. expansion ports e.g. PCMCIA SCSI Express Card etc. video output port e.g. VGA DVI HDMI etc. and generic device ports e.g. USB etc. . In contrast handsets typically do not have optical disk drives or expansion ports. However other devices are typically integrated into handsets including wireless communications interface s e.g. GSM CDMA LTE EDGE WiFi WiMax etc. GPS chipset accelerometer camera s and or solid state memory port SD Memory Stick etc. .

Software for personal computing devices and handsets has also traditionally been developed independently. For example portable computers and vehicle processing modules typically run different operating systems than mobile devices. An operating system is software that manages computer hardware and resources and provides common services for execution of applications software on the computer hardware. Operating systems are generally described as having various abstraction layers where each layer interfaces with the layer below through an interface.

Generally the kernel of an operating system refers to the core as layer that manages the computing devices resources such as the CPU s CPU scheduling memory and I O including peripheral and file system access . A kernel will usually provide features for low level scheduling of processes dispatching inter process communication process synchronization context switching manipulation of process control blocks interrupt handling process creation and destruction and process suspension and resumption. The OS kernel may or may not include device drivers. Other layers of the OS interface with the kernel through system calls or an application programming interface API layer.

Generally other OS layers include the libraries layer application framework layer and application layer. The libraries layer typically includes system libraries and other user libraries. The application framework layer includes services managers and runtime environments. The application layer includes user applications which may run within a runtime environment of the application framework layer. A user interacts with the OS through the OS GUI. The GUI presents menus buttons and controls that the user selects to control and use applications running on the OS. Commonly the term personal computing device environment is used to refer to a style of GUI through which the user interfaces with the OS using icons windows toolbars folders and or desktop widgets and is not limited to a portable computer OS. For example a mobile OS could have a personal computing device environment referring to the look and feel of the mobile OS GUI.

Operating systems for personal and portable computers personal computing device OSs were designed for multitasking larger screen areas and to provide a flexible environment for application developers. As used herein the term personal computing device operating system refers to an operating system designed for use with a personal computing device environment for example a personal computing device or laptop use environment. Examples of personal computing device OS s include various distributions of Linux Mac OS X and Windows 7 among many others.

Operating systems for mobile devices mobile OSs were developed for the smaller screen area lower processing power smaller memory and smaller disk space typically found on handsets and smartphones. Example mobile OSs include Android Apple s iOS for the iPhone and iPad Microsoft s Windows Mobile superseded by Windows Phone 7 Nokia s Symbian and Palm s Palm OS superseded by HP webOS . As used herein the term mobile OS refers to an operating system designed for use with a mobile environment including running on a low power processor with reduced system resources compared to the PC environment i.e. personal computing device system .

Mobile operating systems generally have a particular application development environment that is used to create application programs i.e. apps that run on the mobile OS. The application development environment both facilitates application development by providing common tools and APIs for accessing system resources and services and limits what applications are allowed to do such that the mobile device is able to continue to provide other required functions. For example incoming phone calls and texts may interrupt a running application to notify the user of the incoming call or text.

The most widely adopted mobile OS is Google s Android. While Android is based on Linux it includes modifications to the kernel and other OS layers for the mobile environment and mobile processors. In particular while the Linux kernel is designed for the x86 CPU architecture the Android kernel is modified for ARM based mobile processors. Android device drivers are also particularly tailored for devices typically present in a mobile hardware architecture including touch screens mobile connectivity GSM EDGE CDMA Wi Fi etc. battery management GPS accelerometers and camera modules among other devices.

In Android applications run within the Dalvik virtual machine on an object oriented application framework designed specifically for the memory and processor speed constraints of mobile hardware architectures. Applications are developed for the Dalvik virtual machine through the Android SDK. In addition Android does not have a native X Window System nor does it support the full set of standard GNU libraries and this makes it difficult to port existing GNU Linux applications or libraries to Android.

Apple s iOS operating system run on the iPhone and Microsoft s Windows Phone 7 are similarly modified for the mobile environment and mobile hardware architecture. For example while iOS is derived from the Mac OS X personal computing device OS common Mac OS X applications do not run natively on iOS. Specifically applications are developed for iOS through an SDK to run within the Cocoa Touch runtime environment of iOS which provides basic application infrastructure and support for key iOS features such as touch based input push notifications and system services. Therefore applications written for Mac OS X do not run on iOS without porting them through the iOS SDK. In addition it may be difficult to port Mac OS X applications to iOS because of differences between user libraries and application framework layers of the two OSs and differences in system resources of the mobile and personal computing device or processing module hardware.

Because of the differences in processing requirements system resources and application development applications developed for personal computing device and vehicle processing module OSs typically do not run on mobile OSs. Additionally personal computing device and vehicle processing module applications may not be easily ported to mobile OSs because they are commonly optimized for a larger screen area more processing speed more system memory different libraries and commonly a different GUI. As a result users typically use separate computing devices for each user environment including a smartphone tablet computer laptop computer and or desktop computer. In this instance each device has its own CPU memory file storage and OS.

Connectivity and file sharing between smartphones and other devices involves linking one device e.g. smartphone running a mobile OS to a second wholly disparate device e.g. notebook desktop or tablet running a personal computing device or vehicle processing module OS through a wireless or wired connection. Information is shared across devices by synchronizing data between applications running separately on each device. This process typically called synching is cumbersome and generally requires active management by the user.

Recently some attempts have been made to provide a more complete user experience with a single mobile computing device. For example a smartphone may be connected to an external monitor and input devices such as a full keyboard to provide a more personal computing device like user experience with the mobile OS graphical user interface extended to the larger screen and accepting input from the input devices. However because the external monitor and input devices are only an extension of the smartphone s operating system and user interface the capabilities of the docked environment are limited by the smartphone s mobile OS. For example many software applications available on portable computer or vehicle processing module OSs are not available or have limited functionality on mobile computing device OSs. Accordingly these devices do not present a full personal computing device or processing module user experience when connected to an external environment.

Referring still to computing environment provides multiple user computing experiences without the above limitations. Specifically because mobile computing device includes multiple OSs where each OS is suited to a particular computing environment mobile computing device may be adapted with external devices to provide a broad range of user experiences with a single mobile computing device. For example a user may have a mobile computing device and a secondary terminal environment that provides the user experience of a personal computing device or vehicle processing module when connected to mobile computing device . In this instance personal computing device or processing module OS of the mobile computing device is associated with the secondary terminal environment when the secondary terminal environment is connected to mobile computing device . To the user the full capabilities of personal computing device or vehicle processing module as are available through secondary terminal environment .

Processor may be an ARM based mobile processor. In embodiments mobile processor is a mobile ARM based processor such as Texas Instruments OMAP3430 Marvell PXA320 Freescale iMX51 or Qualcomm QSD8650 8250. However mobile processor may be another suitable ARM based mobile processor or processor based on other processor architectures such as for example x86 based processor architectures or other RISC based processor architectures.

While illustrates one exemplary hardware implementation for mobile computing device other architectures are contemplated as within the scope of the disclosure. For example various components illustrated in as external to mobile processor may be integrated into mobile processor . Optionally external display interface shown in as integrated into mobile processor may be external to mobile processor . Additionally other computer architectures employing a system bus discrete graphics processor and or other architectural variations are suitable for employing aspects of the present disclosure.

As illustrated in mobile OS has libraries layer application framework layer and application layer . In mobile OS applications and run in application layer supported by application framework layer of mobile OS . Application framework layer includes manager s and service s that are used by applications running on mobile OS . For example application framework layer may include a window manager activity manager package manager resource manager telephony manager gesture controller and or other managers and services for the mobile environment.

Application framework layer may include a mobile application runtime environment that executes applications developed for mobile OS . The mobile application runtime environment may be optimized for mobile computing resources such as lower processing power or limited memory space. The mobile application runtime environment may rely on the kernel for process isolation memory management and threading support. Libraries layer includes user libraries that implement common functions such as I O and string manipulation standard C libraries graphics libraries database libraries communication libraries and or other libraries.

As illustrated in personal computing device or vehicle processing module OS has libraries layer framework layer and application layer . In personal computing device or vehicle processing module OS applications and run in application layer supported by application framework layer of personal computing device or vehicle processing module OS . Application framework layer includes manager s and service s that are used by applications running on personal computing device or processing module OS . For example application framework layer may include a window manager activity manager package manager resource manager and or other managers and services common to a personal computing device or vehicle processing module environment. Libraries layer may include user libraries that implement common functions such as I O and string manipulation standard C libraries graphics libraries database libraries communication libraries and or other libraries.

In various embodiments of the present disclosure personal computing device or vehicle processing module OS runs in a separate execution environment from mobile OS . For example mobile OS may run in a root execution environment and personal computing device or vehicle processing module OS may run in a secondary execution environment established under the root execution environment. Processes and applications running on mobile OS access user libraries manager s and service s in the root execution environment. Processes and applications running on personal computing device or vehicle processing module OS access user libraries manager s and service s in the secondary execution environment.

Generally applications developed for mobile OS do not run directly on personal computing device or vehicle processing module OS and applications developed for personal computing device or vehicle processing module OS do not run directly on mobile OS . For example application running in application layer of personal computing device or vehicle processing module OS may be incompatible with mobile OS meaning that application could not run on mobile OS . Specifically application may use manager s and service s of application framework layer of personal computing device or vehicle processing module OS that are either not available or not compatible with manager s and service s in application framework layer in mobile OS . In addition application may attempt to access user libraries that exist in libraries layer of personal computing device or vehicle processing module OS but are either not available or not compatible with user libraries available in libraries layer of mobile OS .

In OS architecture mobile OS and personal computing device or vehicle processing module OS run concurrently on shared kernel . This means that mobile OS and personal computing device or vehicle processing module OS are running on shared kernel at the same time. Specifically mobile OS and personal computing device or vehicle processing module OS both interface to shared kernel through the same kernel interface for example by making system calls to shared kernel . Shared kernel manages task scheduling for processes of both mobile OS and personal computing device or vehicle processing module OS . In this regard mobile OS and personal computing device or vehicle processing module OS are running independently and concurrently on shared kernel . In addition shared kernel runs directly on mobile processor of mobile computing device hardware as illustrated by hardware interface . Specifically shared kernel directly manages the computing resources of mobile computing device hardware such as CPU scheduling memory access and I O. In this regard hardware resources are not virtualized meaning that mobile OS and personal computing device or vehicle processing module OS make system calls through kernel interface without virtualized memory or I O access.

There are several techniques for providing multiple OS s on the same computing device. However none of these techniques provide multiple different OS s running concurrently and independently on a shared kernel. More particularly none of these techniques provide a solution for a mobile OS and a personal computing device or vehicle processing module OS running on a shared kernel.

In one technique known as dual boot multiple OS s are loaded on the computing device one at a time. For example at boot time a user may select one OS from multiple available Oss to be run on the device where each OS has its own kernel libraries framework and applications. The system then boots up into that operating system and the other OS s are not running i.e. no processes of the other OS s are loaded concurrently with the running OS . Therefore this technique does not run multiple OS s on a shared kernel nor does this technique run multiple OSs concurrently.

Another technique for running multiple OS s on the same device is to use a Virtual Machine Manager VMM or Hypervisor. A VMM or Hypervisor runs directly on the hardware and separates the individual kernels of each OS from the hardware controlling which computer hardware resources are available to each OS at any given time. A Hypervisor effectively creates multiple virtual machines from one device such that each OS sees a separate virtual machine. Therefore multiple OS running on the same device through Hypervisor and VMM are not running on a shared kernel. The Hypervisor adds system overhead due to each OS having to access system resources through virtualization in the Hypervisor. Additionally because the Hypervisor must allocate CPU and other computing resources each OS may not be able to effectively schedule processes and tasks.

Yet another technique for running multiple operating systems on the same device is to use a hosted virtual machine. In this technique each OS has its own kernel with the kernel of the guest as running on a virtual machine in the host OS. The virtual machine may be a virtualized hardware platform different than the physical hardware platform. The virtual machine in the host as may be implemented in the kernel of the host OS. In this instance the kernel of the host OS acts as a hypervisor through which the kernel of the guest OS accesses the processor and hardware resources. Regardless of where the virtual machine is implemented in this technique the host OS and the guest OS have separate kernels. Therefore hosted virtual machines do not have multiple OSs running on a shared kernel. System performance using this technique may be reduced due to virtualization of hardware resources for the guest OS.

Another form of virtualization is operating system level virtualization. In this technique multiple isolated user space instances may be created on the kernel of an operating system which look like separate OS instances from the point of view of users of each user space instance. In this technique the host OS and guest OS s must be the same OS. Accordingly this technique does not provide a solution for a mobile OS and personal computing device or processing module OS running independently and concurrently on a shared kernel. Further similarly to a hosted virtual machine this technique uses disk space and memory virtualization for the guest OS s . Accordingly this technique does not provide direct access to memory and system resources for each concurrent OS.

These techniques of running multiple OS s have limitations with regard to running both operating systems concurrently and independently. For example virtualization involves setting up a distinct address space for the guest OS and simulating I O to the guest OS. Therefore access to hardware including system memory has higher overhead for the guest OS using virtualization. Additionally techniques using Hypervisors result in lack of certainty in process control of each OS. Specifically the Hypervisor manages the amount of CPU time allocated to each OS and each OS then allocates CPU time for processes within the OS without knowledge of what is occurring in the other OS. In this regard high priority processes within one OS may not be given the required CPU time to complete their tasks because the OS is sharing CPU time through the Hypervisor which cannot account for the relative priorities of processes running within each OS. Because processing power may be limited in mobile processor architectures relative to personal computing device or processing module processor architectures techniques that depend on virtualization including hypervisors and operating system level virtualization may not offer optimal performance for a personal computing device or processing module as running concurrently with a mobile as on a mobile processor.

In one embodiment consistent with OS architecture an Android mobile OS and a full Linux OS run independently and concurrently on a modified Android kernel. In this embodiment the Android OS may be a modified Android distribution while the Linux OS Hydroid is a modified Debian Linux personal computing device or processing module OS. illustrate Android mobile OS Android kernel and Hydroid OS that may be employed in OS architecture in more detail.

As illustrated in Android OS includes a set of C C libraries in libraries layer that are accessed through application framework layer . Libraries layer includes the bionic system C library that was developed specifically for Android to be smaller and faster than the glibc Linux C library. Libraries layer also includes inter process communication IPC library which includes the base classes for the Binder IPC mechanism of the Android OS. Binder was developed specifically for Android to allow communication between processes and services. Other libraries shown in libraries layer in include media libraries that support recording and playback of media formats surface manager that managers access to the display subsystem and composites graphic layers from multiple applications 2D and 3D graphics engines and lightweight relational database engine . Other libraries that may be included in libraries layer but are not pictured in include bitmap and vector font rendering libraries utilities libraries browser tools i.e. WebKit etc. and or secure communication libraries i.e. SSL etc. .

Application framework layer of Android OS provides a development platform that allows developers to use components of the device hardware access location information run background services set alarms add notifications to the status bar etc. Framework layer also allows applications to publish their capabilities and make use of the published capabilities of other applications. Components of application framework layer of Android mobile OS include activity manager resource manager window manager dock manager hardware and system services personal computing device or processing module monitor service multi display manager and remote communication service . Other components that may be included in framework layer of Android mobile OS include a view system telephony manager package manager location manager and or notification manager among other managers and services.

Applications running on Android OS run within the Dalvik virtual machine in the Android runtime environment on top of the Android object oriented application framework. Dalvik virtual machine is a register based virtual machine and runs a compact executable format that is designed to reduce memory usage and processing requirements. Applications running on Android OS include home screen email application phone application browser application and or other application s App s .

For these reasons applications written for Android do not generally run on desktop Linux distributions such as Hydroid OS and applications written for standard Linux distributions do not generally run on Android OS . In this regard applications for Android OS and Hydroid OS are not bytecode compatible meaning compiled and executable programs for one do not run on the other.

In one embodiment Hydroid OS includes components of a cross environment communication framework that facilitates communication with Android OS through shared kernel . These components include IPC library that includes the base classes for the Binder IPC mechanism of the Android OS and remote communications service .

In one embodiment Hydroid OS is run within a chrooted created with the chroot command secondary execution environment created within the Android root environment. Processes and applications within Hydroid OS are run within the secondary execution environment such that the apparent root directory seen by these processes and applications is the root directory of the secondary execution environment. In this way Hydroid OS can run programs written for standard Linux distributions without modification because Linux user libraries are available to processes running on Hydroid OS in the chrooted secondary execution environment.

At step the boot loader is loaded in memory e.g. RAM with boot arguments passed from hardware or firmware. At step the boot loader sets up the root file system. At step the boot loader configures the memory and network support. In this step the boot loader may also configure modem support low memory protection and security options. At step the boot loader locates shared kernel and loads it to memory passing kernel arguments as needed. The boot loader starts shared kernel at which point shared kernel takes over control of the boot procedure. In one embodiment shared kernel is modified Android kernel .

At step shared kernel initializes drivers for hardware devices. In this step shared kernel may also initialize memory protection virtual memory modules and schedule caching. At step shared kernel initializes the mobile OS. In one embodiment the shared kernel runs a user space initialization process to initialize Android OS . The initialization process reads a configuration file which describes system services and additional system parameters for Android OS . At step the mobile OS framework is started this generally includes starting runtime environments. In one embodiment the root process of Android OS Zygote is run by the initialization process and initializes the Dalvik Virtual Java Machine runtime environment. At step service s for the mobile OS are started. Service s for the mobile OS generally include telephony services camera services GPS services and or communications services. In one embodiment Zygote starts the main Android SystemServer of Android OS which starts Android services such as telephony camera Bluetooth etc.

At step the personal computing device or processing module OS is initialized. In one embodiment an initialization process of Android OS parses a second configuration file and executes the commands and runs the services configured in the second configuration file. At step a personal computing device or processing module monitor service is started in the mobile OS that starts and monitors the personal computing device or processing module OS. In one embodiment personal computing device or processing module monitor service is started in Android OS . At step the personal computing device or processing module monitor service establishes a separate execution environment for the personal computing device or processing module OS. In one embodiment personal computing device or processing module monitor service of Android OS uses the Linux chroot command to setup the separate execution environment within the root file system for Hydroid OS . A separate execution environment for the personal computing device or processing module OS allows for example the personal computing device or processing module OS to have different user libraries than the mobile OS. In one embodiment user libraries of Hydroid OS are in a separate execution environment of user libraries of Android OS . Specifically applications and programs in each OS can statically or dynamically link to libraries separately within each OS without linking conflicts or library compatibility problems. At step the personal computing device or processing module monitor service starts the personal computing device or processing module OS service s . In one embodiment this includes the X Window system and Xfce personal computing device or processing module environment of Hydroid OS .

After step mobile OS and personal computing device or processing module OS are running concurrently and independently on shared kernel on mobile computing device .

At the same time personal computing device or processing module OS provides a complete personal computing device or processing module computing experience through secondary terminal environment . As illustrated in secondary terminal environment includes dock cradle . Dock cradle includes port not illustrated that is connected to mobile computing device through interface . Dock cradle is connected through interface to display monitor keyboard and or pointing device s .

To the user keyboard pointing device s and display monitor operate as an independent personal computing device or vehicle processing module running its own personal computing device or vehicle processing module OS while mobile computing device runs mobile OS which the user interfaces through the mobile OS GUI on touch screen . However as illustrated in mobile OS and personal computing device or vehicle processing module OS are running on shared kernel on a processor in mobile computing device for example mobile processor as illustrated in . Running mobile OS and personal computing device or vehicle processing module OS on shared kernel provides for the user experience of a mobile computing device through the GUI of mobile OS while providing a full personal computing device or processing module experience through the GUI of personal computing device or vehicle processing module OS associated with a secondary terminal environment.

For example applications and running on personal computing device or vehicle processing module OS may be rendered by personal computing device or processing module OS through the frame buffer device associated with frame buffer in shared kernel . In OS architecture frame buffer is displayed on external monitor . Applications and may correspond to application windows and or displayed on external monitor as illustrated in .

Referring again to input devices attached to mobile computing device are also directly accessible for mobile OS and personal computing device or vehicle processing module OS through shared kernel without virtualization. For example personal computing device or vehicle processing module OS can accept input from keyboard and pointing device s directly without the need for a virtual device or virtual device file. Specifically mobile OS and personal computing device or vehicle processing module OS can directly access input devices and or device files of shared kernel without these input devices or device files being translated mapped or virtualized.

To improve the user experience in various environments some embodiments may include various features to facilitate cross environmental cooperation of multiple operating systems running on a shared kernel. Embodiments of the present disclosure may include various features for OS management cross environment communication cross environment application rendering translation of application data between environments cross environment application mirroring.

According to various embodiments a mobile computing device running a mobile OS and a personal computing device or vehicle processing module OS on a shared kernel may be used in a computing system that includes various computing environments. In these embodiments the mobile computing device may be docked to various devices that extend the functionality of the mobile computing device. For example the mobile computing device may be docked to a tablet. In this example the mobile OS GUI may be extended to the screen of the tablet. For example the mobile OS may be interfaced through a touch screen of the tablet. Further the tablet may be docked to a personal computing device or vehicle processing module like terminal environment. When docked to the personal computing device or vehicle processing module like terminal environment the personal computing device or processing module OS may be resumed and configured for the terminal environment.

In some embodiments an innovative cross environment communications framework CECF allows for fast communications between applications in two operating systems running independently and concurrently e.g. on the same kernel . Embodiments include an extended IPC mechanism that allows for application to application communications. For example applications can register with a remote communication service to be able to communicate e.g. synchronize data settings etc. in a synchronous and or asynchronous way.

In other embodiments seamless translation of application data between two similar applications running in separate operating systems running concurrently and independently on a shared kernel is provided. In embodiments this may be implemented using a framework like CECF. For example a mobile spreadsheet application and a desktop spreadsheet application are both installed on a mobile computing device. When the device is un docked the mobile application is used with all the spreadsheet data formatted as needed for the mobile based spreadsheet. When the device is docked in personal computing device or vehicle processing module terminal environment e.g. smartbook the personal computing device or vehicle processing module spreadsheet program automatically opens with the latest spreadsheet data seamlessly available in the desktop spreadsheet application.

In other embodiments an application running in one operating system may be displayed within an environment provided by a second operating system where the two operating systems are running independently and concurrently on a shared kernel. For example within a personal computing device or vehicle processing module environment of a personal computing device or vehicle processing module OS a user can launch a mobile application which will run from the mobile OS e.g. through an X11 type terminal not by porting the application or running a virtualized mobile OS . Notably the mobile application can be any mobile application stored on the mobile device regardless of whether the application is currently being displayed in the mobile OS GUI.

In other embodiments applications running in a first OS may be displayed within an environment provided by a second OS where the two operating systems are running independently and concurrently on a shared kernel. Graphics data for the first OS is directly accessed by the second OS. Specifically all surfaces for applications in the first OS are kept in a shared memory space. The graphics server of the first OS communicates to a client application in the second OS by passing file descriptors to the memory allocated for the surfaces. In one implementation a chrooted Linux operating system i.e. Hydroid and an Android operating system concurrently run on a single Android kernel on a mobile device. An X11 client in Hydroid connects to the graphics server SurfaceFlinger in Android to request information for a certain surface and a service within Android Hydroid Bond registers the X11 client to receive draw notifications for the surface.

In other embodiments a mobile computing device detects a docked environment and configures a second OS to take advantage of the docked environment where the second OS runs independently and concurrently with a first OS on a shared kernel. In one implementation a chrooted Linux operating system i.e. Hydroid and an Android operating system concurrently run on a single Linux kernel on a mobile device. When the mobile device is not docked the Android operating system is tailored to the context e.g. input output capabilities power management communications etc. of the mobile device. When the mobile device is docked with a laptop the mobile device automatically detects the laptop environment and configures the Linux environment to fully utilize that laptop environment.

In other embodiments a mobile computing device automatically detects a docked environment and wakes up a suspended full featured secondary operating system for use in the docked environment. In one implementation a chrooted Linux operating system i.e. Hydroid and an Android operating system always concurrently run on a single Linux kernel on a mobile device. When the mobile device is not docked the Android operating system drives the mobile device display etc. and the Linux operating system is in a suspended mode e.g. it can still exploit the CECF . When the mobile device is docked with a laptop the mobile device automatically detects the laptop environment and wakes up the Linux operating system to support the laptop environment.

In other embodiments an application running in a first OS is mirrored to a display window of a second OS e.g. on a separate display where the two operating systems are running independently and concurrently on a shared kernel. For example a display associated with the second OS i.e. the second OS GUI displays a window in which the first OS GUI is mirrored. Embodiments effectively implement this functionality by copying the frame buffer from the mobile environment to the personal computing device or processing module environment. Notably the window may substantially mimic use of the mobile device rather than generally being able to run mobile applications .

In other embodiments full interaction support of a docked environment to redirected and or mirrored applications is provided. For example a mobile computing device may be configured with limited touchscreen capability and no keyboard mouse or other input device. The mobile device is docked in a tablet having advanced touchscreen and stylus support and a connected external keyboard. When a mobile application is displayed in the personal computing device or processing module environment on the tablet display a user can interact with the mobile application using the full input output capabilities of the tablet environment even if the same application being displayed on the mobile device would have more limited interactivity.

As described above in one embodiment an Android mobile as and a Linux personal computing device or processing module OS i.e. Hydroid run concurrently on the same shared kernel of a single mobile computing device. The Android mobile OS provides a mobile computing experience through mobile computing hardware and the Linux personal computing device or processing module OS provides a personal computing device or processing module computing experience through a secondary terminal environment having a user experience profile associated with the Linux OS.

However other OS combinations are contemplated as within various embodiments of the disclosure. For example various aspects of the disclosure may be used to run Windows Mobile and Windows 7 on a shared kernel or sharing common kernel mode processes. As another example iOS and Mac OS X running on a shared kernel is also within the scope of various embodiments. Furthermore aspects of the disclosure may be used advantageously by combinations of embedded OS s and personal computing device or vehicle processing module or mobile OS s running on a shared kernel.

The foregoing description has been presented for purposes of illustration and description. Furthermore the description is not intended to limit embodiments of the disclosure to the form disclosed herein. While a number of exemplary aspects and embodiments have been discussed above those of skill in the art will recognize certain variations modifications permutations additions and sub combinations thereof.

The various operations of methods described above may be performed by any suitable means capable of performing the corresponding functions. The means may include various hardware and or software component s and or module s including but not limited to a circuit an application specific integrated circuit ASIC or processor.

The various illustrative logical blocks modules and circuits described may be implemented or performed with a general purpose processor a digital signal processor DSP an ASIC a field programmable gate array signal FPGA or other programmable logic device PLD discrete gate or transistor logic discrete hardware components or any combination thereof designed to perform the functions described herein. A general purpose processor may be a microprocessor but in the alternative the processor may be any commercially available processor controller microcontroller or state machine. A processor may also be implemented as a combination of computing devices e.g. a combination of a DSP and a microprocessor a plurality of microprocessors one or more microprocessors in conjunction with a DSP core or any other such configuration.

The steps of a method or algorithm described in connection with the present disclosure may be embodied directly in hardware in a software module executed by a processor or in a combination of the two. A software module may reside in any form of tangible storage medium.

Some examples of storage media that may be used include random access memory RAM read only memory ROM flash memory EPROM memory EEPROM memory registers a hard disk a removable disk a CD ROM and so forth. A storage medium may be coupled to a processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. A software module may be a single instruction or many instructions and may be distributed over several different code segments among different programs and across multiple storage media.

The methods disclosed herein comprise one or more actions for achieving the described method. The method and or actions may be interchanged with one another without departing from the scope of the claims. In other words unless a specific order of actions is specified the order and or use of specific actions may be modified without departing from the scope of the claims.

The vehicle includes among many components common to vehicles wheels a power source such as an engine motor or energy storage system e.g. battery or capacitive energy storage system a manual or automatic transmission a manual or automatic transmission gear controller a power controller such as a throttle a braking system a steering wheel a display panel e.g. a dashboard displaying information regarding components in vehicle and an occupant seating system .

Other components in vehicle include communication components such as a wireless signal receiver to receive wireless signals from signal sources such as roadside beacons and other electronic roadside devices and a satellite positioning system receiver e.g. a Global Positioning System GPS US GLONASS Russia Galileo positioning system EU Compass navigation system China and Regional Navigational Satellite System India receiver .

The vehicle also includes a number of control units and sensors for the various components of vehicle . Exemplary control units and sensors therefor include wheel state sensor to sense one or more of vehicle speed acceleration deceleration wheel rotation wheel speed e.g. wheel revolutions per minute wheel slip and the like. Power source controller and energy output sensor controls the power source and to senses a power output of the power source . Example aspects of power source controller and energy output sensor include balancing the mixture of fuel e.g. gasoline natural gas or other sources of fuel and other elements e.g. air for combustion and measuring one or more of current engine speed e.g. revolutions per minute energy input and or output e.g. voltage current fuel consumption and torque and the like. Switch state control unit activates or deactivates the power source e.g. the ignition . Transmission control unit TCU sets the current state the transmission e.g. gear selection or setting based on the state of gear controller . Power control unit sets the throttle for power source given the state of power controller . Brake control unit operates the current state braking or non braking of braking system based on the state of the brake controller which could be linked to power controller .

Vehicle also includes other control units and sensors for safety purposes. An airbag deployment system includes an airbag deployment control unit and a collision sensor . When a collision is detected by collision sensor data is sent to airbag release control unit which determines whether to deploy the airbag based on the data received e.g. the speed of the collision and the area of impact to determine whether an airbag deployment can promote safety . Other safety components include seat belt control unit and sensors for setting the seat belt e.g. engaging or disengaging the seat belt during hard breaking head light control unit and sensors for headlight and other lights e.g. emergency light brake light parking light fog light interior or passenger compartment light and or tail light state on or off door settings locking and unlocking window settings opening or closing one or cameras or other imaging sensors which commonly convert an optical image into an electronic signal but may include other devices for detection objects such as an electromagnetic radiation emitter receiver that emits electromagnetic radiation and receives electromagnetic waves reflected by the object to sense objects such as other vehicles and pedestrians and optionally determine the distance trajectory and speed of such objects in the vicinity or path of the vehicle and other components and sensors as known in the art.

Vehicle further includes components for the convenience and enjoyment of the occupants or operators. Seating system controller and sensor sets the position and other settings of a seat and measure various attributes of an occupant of the seat e.g. the current weight of seated occupant in a selected seat of the seating system . Entertainment system preferably located in the head unit of the passenger compartment provides entertainment options such as music or video for occupants of vehicle .

Examples of other vehicle components include one or more cameras or other imaging sensors which commonly convert an optical image into an electronic signal but may include other devices for detection objects such as an electromagnetic radiation emitter receiver that emits electromagnetic radiation and receives electromagnetic waves reflected by the object to sense objects such as other vehicles and pedestrians and optionally determine the distance trajectory and speed of such objects in the vicinity or path of the vehicle odometer reading sensor trip mileage reading sensor wind speed sensor radar transmitter receiver output brake wear sensor steering torque sensor oxygen sensor ambient lighting sensor vision system sensor ranging sensor parking sensor heating venting and air conditioning HVAC sensor water sensor air fuel ratio meter blind spot monitor hall effect sensor microphone radio frequency RF sensor infrared IR sensor vehicle control system sensors wireless network sensor e.g. Wi Fi and or Bluetooth sensor cellular data sensor and other sensors known to those of skill in the vehicle art.

Vehicle includes one or more vehicle buses for connecting the various components and systems of vehicle as described above. In modern vehicles subsystems such as an anti lock braking system ABS which may be used by brake control unit and braking system engine control unit ECU which may be used by power source control transmission control unit TCU which may be used by transmission control unit and gear controller and supplemental restraint system SRS such as airbag deployment control unit and collision sensor and seating system controller and sensor are frequently interconnected using a standardized bus. Standardized buses for use in vehicles include Controller Area Network CAN and Local Interconnect Network LIN and others as are known in the art. In particular these components and subsystems may use the high speed CAN bus for real time information. Other components with lower priorities may use the low speed CAN bus to transmit information. Vehicle bus which is optional is illustrated as one bus in . However vehicle may include one or more of these standardized buses such as a combination of the high speed and low speed CAN LIN and or other buses. Also vehicle bus may further include and support extensions to standardized buses such as the FlexCAN extension to the CAN bus. Further vehicle bus may include standardized communication networks that can be implemented vehicle . Well known networks include Ethernet Wi Fi USB IC RS232 RS485 and FireWire.

Vehicle also includes processing module . Preferably processing module is placed in the trunk hood not shown behind the head unit not shown and or other accessible but unseen locations. Processing module is coupled to vehicle bus and provides processing for data related to vehicle bus and other vehicle components.

Processing modules for example can perform monitor and or control critical and non critical tasks functions and operations such as interaction with and or monitoring and or control of critical and non critical on board sensors and vehicle operations e.g. engine transmission throttle brake power assist brake lock up electronic suspension traction and stability control parallel parking assistance occupant protection systems power steering assistance self diagnostics event data recorders steer by wire and or brake by wire operations vehicle to vehicle interactions vehicle to infrastructure interactions partial and or full automation telematics navigation SPS multimedia systems audio systems rear seat entertainment systems game consoles tuners SDR heads up display night vision lane departure warning adaptive cruise control adaptive headlights collision warning blind spot sensors park reverse assistance tire pressure monitoring traffic signal recognition vehicle tracking e.g. LoJack dashboard instrument cluster lights seats climate control voice recognition remote keyless entry security alarm systems and wiper window control . Processing modules can be enclosed in an advanced EMI shielded enclosure containing multiple expansion modules. Processing modules can have a black box or flight data recorder technology containing an event or driving history recorder containing operational information collected from vehicle on board sensors and provided by nearby or roadside signal transmitters a crash survivable memory unit an integrated controller and circuitry board and network interfaces. Processing module is further disclosed with reference to .

As set forth below and as shown in multiple processing modules may be located at various locations in a common vehicle. The disparate spaced apart locations of the processing modules provide redundancy in the event of a collision or other catastrophic event. For example a collision with the rear of the vehicle may damage the processing module but not the processing modules

As will be appreciated the multiple processing modules may be configured to operate in an active active and or active standby mode. These operating modes describe the manner in which first and second redundant devices operate under normal conditions. In active standby implementations only the primary device in a pair processes information and issues commands. The standby device sits idle ready to assume the active role should the primary device fail. The standby device may receive from the primary device processing command and primary device state information to facilitate stateful failover but it does not itself commonly perform meaningful work until the primary device fails. In active active implementations both devices are online and collaboratively process information and issue commands under normal conditions. When one device fails all processing is handled by the remaining device.

A user can be an occupant of a vehicle that implements the system of . A user can further be an assembler technician or mechanic working on the vehicle to configure the system of for use by an end user of the vehicle.

Processing module may include processor memory storage and interfaces for one or more buses . Among the interfaces include high speed CAN bus low speed CAN bus LIN bus network interface and or wireless interface . One skilled in the art will recognize that processing module may take other configurations and with other buses as known in the art and interfaces may be implemented with more or fewer buses than those shown.

The operations of processing module will now be described with respect to the high speed CAN bus interface and low speed CAN bus interface as an exemplary configuration in one embodiment of the invention. In one implementation processing module receives data transmitted over vehicle bus through high speed CAN bus interface and or low speed CAN bus interface . Data transmitted over the high speed CAN bus includes priority data from subsystems such as anti lock braking system ABS which may be used by brake control unit and braking system engine control unit ECU which may be used by power source control transmission control unit TCU which may be used by transmission control unit and gear controller and supplemental restraint system SRS such as airbag deployment control unit and collision sensor and seating system controller and sensor as described above. Data transmitted over the low speed CAN bus includes other noncritical data such as engine temperature and oil pressure sensor readings.

Wireless interface by contrast can be a transceiver for one or more long intermediate or short range wireless networks such as a radio e.g. cellular such as CDMA GSM or IS 95 network 802.X a WiFi network a Bluetooth network and the like sending and receiving a wide variety of information including lower priority information such as data for the convenience and enjoyment of the occupants in entertainment system or seating system . The wireless interface can access information over one or more wireless networks using an appropriate protocol such as the Wireless Application Protocol Wireless Internet Protocol Wireless Session Protocol Bluetooth Wireless Protocol Wireless Datagram Protocol Wireless HART Protocol Wired Equivalent Privacy WEP MiWi and MiWi P2P RuBee IEEE standard 1902.1 Wireless USB Wireless Transport Layer Security WTLS and the like. In one vehicle configuration the wireless interface connects via a short distance protocol such as Bluetooth or WiFi to an external computational device such as a cell phone personal digital assistant laptop personal computer or tablet computer for access to remote nodes over the Internet.

Local network interface is a transceiver for signals exchanged with other on board components of the vehicle including the components discussed above with respect to . The signals may be sent over a wired or wireless or combination thereof network. In one configuration the local network interface is a wireless access point. Any suitable local area network protocol may be used with the Ethernet protocol and the short range protocols mentioned above being examples.

The processor may comprise a general purpose programmable micro processor or controller for executing application programming or instructions. In accordance with at least some embodiments the processor may include multiple processor cores and or implement multiple virtual processors. In accordance with still other embodiments the processor may include multiple physical processors. As a particular example the processor may comprise a specially configured application specific integrated circuit ASIC or other integrated circuit a digital signal processor a controller a hardwired electronic or logic circuit a programmable logic device or gate array a special purpose computer or the like. The processor generally functions to run programming code or instructions implementing various functions of the device .

Memory for use in connection with the execution of application programming or instructions by the processor and for the temporary or long term storage of program instructions and or data. As examples the memory may comprise RAM DRAM SDRAM or other solid state memory. Alternatively or in addition data storage may be provided. Like the memory the data storage may comprise a solid state memory device or devices. Alternatively or in addition the data storage may comprise a hard disk drive or other random access memory.

Vehicle component is an exemplary vehicle component for illustration purposes that is connected to bus . Vehicle component may represent any of the vehicle components discussed in connection with vehicle .

Each of the processing modules A C is each coupled to bus . Processing module A is located in the engine compartment of vehicle processing module B is located in the passenger compartment of vehicle and processing module C is located in the truck of vehicle.

In one configuration some of the processing modules A C may have limited processing functions as compared to the others. For example processing module A may act as the default processing module for vehicle normally because of its location being close to most critical vehicle components in the engine compartment i.e. ECU TCU . If the other processing modules B C are only needed for redundancy they may be implemented to only have limited capabilities i.e. these processing modules would not be require to have processing all critical and non critical functions . This implementation has the advantage of reduced costs and or space as compared to fitting processing module will full capabilities. The processing modules A C may also have cascading levels of capabilities. For example processing module B is fitted in the passenger compartment and is deemed to most likely survive a collision it may be required to have capabilities critical to vehicle operation but no other capabilities to save space in the passenger compartment. Processing module C may have additional capabilities such as a cellular module so that emergency calls may be automatically placed if the default processing module A fails.

In another configuration each of the processing modules A C may have different capabilities. For example processing module A may have capabilities only for critical vehicle functions processing module C may have capabilities only for non critical vehicle functions and processing module B may be reserved for back up processing of both critical and non critical vehicle functions. In one implementation processing may be off loaded to another processing module if one module becomes overloaded. This configuration has the advantage further reduction in costs and space because processing power is not wasted due to redundancy. In the case where one processing module malfunctions the other processing modules may pick up processing duties via a processor off load procedure. If there is not enough processing power all wanted functionalities the processing modules may work together to prioritize critical vehicle functions ahead of non critical functions.

The first second . . . networks . . . can be any wireless network such as a radio or cellular network e.g. CDMA CDMA2000 AMPS D AMPS TACS ETACS CSK CDMAOne GSM EDGE GPRS HSCSD UMTS WCDMA HSPA WIMAX WIMAX ADVANCED LTE ADVANCED or FDMA in accordance with the 1G 2G 2G transitional 3G 3G transitional 4G or 5G cellular network standards a Wi Fi network a Bluetooth network and the like.

The vehicle includes a transceiver to send and receive signals over a selected one of the first second . . . networks . . . a gateway firewall to provide secure connectivity between the various components of the vehicle and the first second . . . networks . . . primary and secondary processing modules and memory storage or on board sensors discussed above with reference to input output system s and associated media controller discussed below to manage and control the output presented by the input output system s to the user external computational device s of occupants such as wireless capable mobile phones personal digital assistants tablet computers laptop computers and the like and a multi operating system manager to supervise and control instantiation of multi operating systems executing on a processing module . The various components are connected by a bus wireless network or combination thereof denoted by reference .

The external computational device s can dock or wirelessly communicate with a processing module and or a wireless access point or wired or wireless docking station at each input output system . When an external computational device is docked or otherwise in direct or indirect wireless communication with a processing module the multi operating system manager can apply rules and determine whether to instantiate multi operating systems executing in a selected one of the processing module or cause multi operating systems to execute on the external computational device . When the user desires to use an input output system or external computational device interface and the multi operating systems and selected application s are instantiated on the other of the input output system or external computational device the output of the application can be streamed or otherwise transmitted to the interface selected by the user.

Examples of applications accessible via a processing module include programs such as vehicle control applications e.g. sensed information display icons such as in the form of dials gauges and the like e.g. odometer speedometer oil pressure tacometer battery voltage tire pressure gas tank level engine temperature indoor outdoor temperature trip computers vehicle component status reporting maintenance tire pressure vehicle component performance monitoring and other vehicle related sensed information applications associated with at least one vehicle function applications related to handicap and accessibility graphical user interfaces e.g. larger fonts controls text to speech and or speech to text interfaces speech command interfaces etc. email clients web browsers communications applications e.g. email applications texting applications telephony applications etc. games solo or multi party games including games played against other drivers entertainment applications such as media players e.g. to enable access to viewing of or listening to multimedia files particularly audio and or video files satellite positioning system receiver applications e.g. for location tracking fleet tracking geocoding geofencing geotagging traffic patterns navigating to a selected destination or other location and other location based services map applications medical information applications emergency service applications noise suppression applications news related applications to provide local national and or international news from a news source weather information related applications to provide local national and or international weather information such as forecasts radar images social networking applications road conditions and current weather conditions biometric applications e.g. to determine an identity of or authenticate a user to determine a current medical condition of a user to determine a current sobriety state of a user and the like travel applications e.g. applications providing the operator with booking or reservation information traffic information fuel pricing information point of interest information and the like utility applications e.g. office suites electronic calendars electronic clocks and the like etc.

The applications can be stored in an application store which may represent any memory or data storage and the management software associated therewith for storing the applications.

In step the multi operating system manager detects a stimulus. Stimuli include user request to initiate execution of an application notification of a processing resource having unused bandwidth below a selected threshold notification of a processing resource having used bandwidth above a selected threshold a power level of a processing resource falling below a selected threshold notification of a processing resource having an operational error malfunction or outage and the like.

In step the multi operating system manager determines available processing resources both those on board the vehicle such as processing module s and external computational devices in wireless communication with a local area network of the vehicle.

In step the multi operating system manager selects one of the available processing resources for multi operating system operation. Factors considered in determining where to instantiate multi operating systems include where the software application desired by the user is located whether the user desires access to the application through an input output system or through the external computational device the processing resources available at each of the processing module s and external computational device the application and operating system requirements as compared to the capabilities of each of the processing modules and external computational device power levels in each processing resource and the like.

For example if an external computational device such as a laptop tablet computer or cell phone is running low on power the multi operating system manager can cause a processing module to initiate multi operating system operation with one of the operating systems being that of the processing module and the other that of the external computational device . The application previously or to be executed by the external computational device can then be executed by the processing module . The output of the processing module can be provided such as by a network link to the external computational device . The seamless transition will not cause the user to suspect that the application initiated on the external computational device is being executed on a different device.

In step the multi operating system manager then constructs or causes the construction of a typically wireless network link between the selected processing resource and the user accessed device.

The exemplary systems and methods of this disclosure have been described in relation to various computational systems. However to avoid unnecessarily obscuring the present disclosure the preceding description omits a number of known structures and devices. This omission is not to be construed as a limitation of the scopes of the claims. Specific details are set forth to provide an understanding of the present disclosure. It should however be appreciated that the present disclosure may be practiced in a variety of ways beyond the specific detail set forth herein.

Furthermore while the exemplary aspects embodiments and or configurations illustrated herein show the various components of the system collocated certain components of the system can be located remotely at distant portions of a distributed network such as a LAN and or the Internet or within a dedicated system. Thus it should be appreciated that the components of the system can be combined in to one or more devices or collocated on a particular node of a distributed network such as an analog and or digital telecommunications network a packet switch network or a circuit switched network. It will be appreciated from the preceding description and for reasons of computational efficiency that the components of the system can be arranged at any location within a distributed network of components without affecting the operation of the system. For example the various components can be located in a switch such as a PBX and media server gateway in one or more communications devices at one or more users premises or some combination thereof. Similarly one or more functional portions of the system could be distributed between a telecommunications device s and an associated computing device.

Furthermore it should be appreciated that the various links connecting the elements can be wired or wireless links or any combination thereof or any other known or later developed element s that is capable of supplying and or communicating data to and from the connected elements. These wired or wireless links can also be secure links and may be capable of communicating encrypted information. Transmission media used as links for example can be any suitable carrier for electrical signals including coaxial cables copper wire and fiber optics and may take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Also while the flowcharts have been discussed and illustrated in relation to a particular sequence of events it should be appreciated that changes additions and omissions to this sequence can occur without materially affecting the operation of the disclosed embodiments configuration and aspects.

A number of variations and modifications of the disclosure can be used. It would be possible to provide for some features of the disclosure without providing others.

In yet another embodiment the systems and methods of this disclosure can be implemented in conjunction with a special purpose computer a programmed microprocessor or microcontroller and peripheral integrated circuit element s an ASIC or other integrated circuit a digital signal processor a hard wired electronic or logic circuit such as discrete element circuit a programmable logic device or gate array such as PLD PLA FPGA PAL special purpose computer any comparable means or the like. In general any device s or means capable of implementing the methodology illustrated herein can be used to implement the various aspects of this disclosure. Exemplary hardware that can be used for the disclosed embodiments configurations and aspects includes computers handheld devices telephones e.g. cellular Internet enabled digital analog hybrids and others and other hardware known in the art. Some of these devices include processors e.g. a single or multiple microprocessors memory nonvolatile storage input devices and output devices. Furthermore alternative software implementations including but not limited to distributed processing or component object distributed processing parallel processing or virtual machine processing can also be constructed to implement the methods described herein.

In yet another embodiment the disclosed methods may be readily implemented in conjunction with software using object or object oriented software development environments that provide portable source code that can be used on a variety of computer or workstation platforms. Alternatively the disclosed system may be implemented partially or fully in hardware using standard logic circuits or VLSI design. Whether software or hardware is used to implement the systems in accordance with this disclosure is dependent on the speed and or efficiency requirements of the system the particular function and the particular software or hardware systems or microprocessor or microcomputer systems being utilized.

In yet another embodiment the disclosed methods may be partially implemented in software that can be stored on a storage medium executed on programmed general purpose computer with the cooperation of a controller and memory a special purpose computer a microprocessor or the like. In these instances the systems and methods of this disclosure can be implemented as program embedded on personal computer such as an applet JAVA or CGI script as a resource residing on a server or computer workstation as a routine embedded in a dedicated measurement system system component or the like. The system can also be implemented by physically incorporating the system and or method into a software and or hardware system.

Although the present disclosure describes components and functions implemented in the aspects embodiments and or configurations with reference to particular standards and protocols the aspects embodiments and or configurations are not limited to such standards and protocols. Other similar standards and protocols not mentioned herein are in existence and are considered to be included in the present disclosure. Moreover the standards and protocols mentioned herein and other similar standards and protocols not mentioned herein are periodically superseded by faster or more effective equivalents having essentially the same functions. Such replacement standards and protocols having the same functions are considered equivalents included in the present disclosure.

The present disclosure in various aspects embodiments and or configurations includes components methods processes systems and or apparatus substantially as depicted and described herein including various aspects embodiments configurations embodiments subcombinations and or subsets thereof. Those of skill in the art will understand how to make and use the disclosed aspects embodiments and or configurations after understanding the present disclosure. The present disclosure in various aspects embodiments and or configurations includes providing devices and processes in the absence of items not depicted and or described herein or in various aspects embodiments and or configurations hereof including in the absence of such items as may have been used in previous devices or processes e.g. for improving performance achieving ease and or reducing cost of implementation.

The foregoing discussion has been presented for purposes of illustration and description. The foregoing is not intended to limit the disclosure to the form or forms disclosed herein. In the foregoing Detailed Description for example various features of the disclosure are grouped together in one or more aspects embodiments and or configurations for the purpose of streamlining the disclosure. The features of the aspects embodiments and or configurations of the disclosure may be combined in alternate aspects embodiments and or configurations other than those discussed above. This method of disclosure is not to be interpreted as reflecting an intention that the claims require more features than are expressly recited in each claim. Rather as the following claims reflect inventive aspects lie in less than all features of a single foregoing disclosed aspect embodiment and or configuration. Thus the following claims are hereby incorporated into this Detailed Description with each claim standing on its own as a separate preferred embodiment of the disclosure.

Moreover though the description has included description of one or more aspects embodiments and or configurations and certain variations and modifications other variations combinations and modifications are within the scope of the disclosure e.g. as may be within the skill and knowledge of those in the art after understanding the present disclosure. It is intended to obtain rights which include alternative aspects embodiments and or configurations to the extent permitted including alternate interchangeable and or equivalent structures functions ranges or steps to those claimed whether or not such alternate interchangeable and or equivalent structures functions ranges or steps are disclosed herein and without intending to publicly dedicate any patentable subject matter.

