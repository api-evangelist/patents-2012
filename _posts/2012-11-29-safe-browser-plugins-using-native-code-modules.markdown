---

title: Safe browser plugins using native code modules
abstract: Some embodiments provide a system that executes plugin for a web browser. During operation, the system obtains the plugin as a native code module and executes the native code module in a secure runtime environment. Next, the system enables communication between the native code module and the web browser by providing an interface bridge between the native code module and the web browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009739&OS=09009739&RS=09009739
owner: Google Inc.
number: 09009739
owner_city: Mountain View
owner_country: US
publication_date: 20121129
---
The present embodiments relate to techniques for executing plugins for web browsers. More specifically the present embodiments relate to a method and system for safely executing plugins for web browsers using native code modules.

Browser plugins are often used to extend the functionality of web browsers. For example a browser plugin may allow web applications executing within a web browser to open documents such as Portable Document Format PDF files and or play media such as video or audio files. To provide added functionality to web applications the browser plugin is typically installed as a native code library. In addition the browser plugin is executed by the web browser when features provided by the browser plugin are requested by the web applications.

However browser plugins may pose a security risk to the computer systems on which the browser plugins are installed. In particular browser plugins may have the same access privileges as the host processes e.g. web browsers executing the browser plugins. As a result a malicious browser plugin may make system calls that crash the computer system on which the malicious browser plugin is installed and can possibly obtain sensitive information e.g. email addresses passwords etc. from the computer system. Along the same lines browser plugins may contain bugs and or security vulnerabilities that may be exploited by other applications.

Hence what is needed is a mechanism for executing browser plugins without the security vulnerabilities described above.

The described embodiments provide a system that executes a plugin for a web browser. During operation the system obtains the plugin as a native code module and executes the native code module in a secure runtime environment. Next the system enables communication between the native code module and the web browser by providing a first plugin interface bridge between the native code module and the web browser.

In some embodiments the system also enables communication between the native code module and an incompatible web browser by providing a second plugin interface bridge between the first plugin interface bridge and the incompatible web browser.

In some embodiments the web browser and the incompatible web browser are associated with at least one of a Netscape Plugin Application Programming Interface NPAPI plugin architecture and an ActiveX plugin architecture.

In some embodiments the system also validates the native code module prior to executing the native code module in the secure runtime environment.

In some embodiments the system executes the native code module in a secure runtime environment that isolates the native code module from sensitive data and resources on the computing system.

In some embodiments the system also enables communication between the native code module and other plugins for the web browser using a shared memory interface between the native code module and the other plugins.

In some embodiments the first plugin interface bridge is implemented using a remote procedure call RPC mechanism.

In some embodiments providing the first plugin interface bridge between the native code module and the web browser involves using an inter module communication IMC runtime.

In some embodiments communication between the native code module and the web browser over the IMC runtime is implemented using a proxy and a stub.

In some embodiments the proxy and the stub are used to reach objects associated with the native code module or the web browser.

The following description is presented to enable any person skilled in the art to make and use the embodiments and is provided in the context of a particular application and its requirements. Various modifications to the disclosed embodiments will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other embodiments and applications without departing from the spirit and scope of the present embodiments. Thus the system is not limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features disclosed herein.

The data structures and code described in this detailed description are typically stored on a computer readable storage medium which may be any device or medium that can store code and or data for use by a computer system. The computer readable storage medium includes but is not limited to volatile memory non volatile memory magnetic and optical storage devices such as disk drives magnetic tape CDs compact discs DVDs digital versatile discs or digital video discs or other media capable of storing computer readable media now known or later developed.

The methods and processes described in the detailed description section can be embodied as code and or data which can be stored in a computer readable storage medium as described above. When a computer system reads and executes the code and or data stored on the computer readable storage medium the computer system performs the methods and processes embodied as data structures and code and stored within the computer readable storage medium.

Furthermore the methods and processes described below can be included in hardware modules. For example the hardware modules can include but are not limited to application specific integrated circuit ASIC chips field programmable gate arrays FPGAs and other programmable logic devices now known or later developed. When the hardware modules are activated the hardware modules perform the methods and processes included within the hardware modules.

Embodiments provide a method and system for executing a plugin for a web browser. The plugin may be used by web applications executing within the web browser to extend the functionality of the web browser. In addition the plugin may be executed on a computing system such as a personal computer PC a mobile phone a personal digital assistant PDA a graphing calculator a portable media player a global positioning system GPS receiver and or another electronic computing device.

More specifically embodiments provide a method and system for safely executing the plugin as a native code module. The native code module may contain native code that is executed within a secure runtime environment that isolates the native code module from sensitive data and resources on the computing system. The native code module may additionally be validated prior to execution within the secure runtime environment to ensure that the native code module complies with a set of security constraints. In addition communication between the native code module and the web browser may be facilitated by a plugin interface bridge between the native code module and the web browser. A second plugin interface bridge between the first plugin interface bridge and an incompatible web browser may further enable communication between the native code module and the incompatible web browser. Finally a shared memory interface or alternatively an interface which is based on a socket may allow the native code module to communicate with other plugins for the web browser.

Computing system can be any type of electronic device that provides one or more services or functions to a user. For example computing system may operate as a mobile phone personal computer PC global positioning system GPS receiver portable media player personal digital assistant PDA and or graphing calculator. In addition computing system may include an operating system not shown that coordinates the use of hardware and software resources on computing system as well as one or more applications e.g. web browser web application that perform specialized tasks for the user. For example computing system may include applications such as an email client address book document editor web browser and or media player. To perform tasks for the user applications may obtain the use of hardware resources e.g. processor memory I O components wireless transmitter etc. on computing system from the operating system as well as interact with the user through a hardware and or software framework provided by the operating system as described below.

In one or more embodiments computing system includes functionality to obtain and or execute applications using a network connection. In particular computing system may obtain web application from one or more servers e.g. server server x using a network connection with the server s and load web application in web browser . For example web application may be downloaded from an application server over the Internet by web browser .

Once loaded web application may provide features and user interactivity comparable to that of native applications on computing system . For example web application may function as an email client document editor media player computer aided design CAD system and or computer game. Web application may also include dynamic user interface elements such as menus buttons windows sub windows icons animations and or other graphical objects that emulate analogous user interface elements in native applications. In other words web application may correspond to a rich Internet application RIA .

Those skilled in the art will appreciate that the features provided by web application may be limited by the functionality of web browser . For example web browser may lack the ability to display documents and or play media files requested by web application . As a result certain features associated with web application may require the use of plugins for web browser to extend the functionality of web browser . For example web application may use one or more plugins to play audio or video files display documents and or provide other features to the user beyond the capabilities of web browser .

Like web application the plugin s may be obtained from one or more servers e.g. server server x using a network connection with the server s . For example web application may provide a hyperlink to the plugin on the Internet. Web browser may then download the plugin from the Uniform Resource Locator URL specified in the hyperlink.

Furthermore each plugin may correspond to a native code library that is installed locally on computing system and executed by web browser . For example the plugin may correspond to a Netscape Plugin Application Programming Interface NPAPI plugin or an ActiveX ActiveX is a registered trademark of Microsoft Corp. plugin. In other words plugins for web browser may execute within the same process as web browser and include the same access privileges as web browser .

As a result the local installation and native execution of plugins for web browser may pose a security risk to computing system . In particular the plugins may include bugs and or security vulnerabilities that may be exploited by other applications on computing system . The plugins may also correspond to malicious plugins that are capable of making unrestricted system calls on computing system obtaining sensitive data stored on computing system and or crashing computing system .

To reduce the security risks posed by browser plugins computing system may obtain and execute each plugin as a native code module . As described above the plugin may be obtained from one or more servers e.g. server server x by web browser . Furthermore the plugin may be obtained as native code module from the server s or source code corresponding to the plugin may be obtained from the server s by web browser and compiled into native code module by computing system .

In one or more embodiments native code module is executed by a plugin associated with web browser . In other words native code module may provide additional functionality to web browser as a plugin for web browser by executing within plugin . Furthermore the execution of native code module by plugin may allow the additional functionality to be safely used by web application as described below.

In particular native code module may be validated by a validator provided by plugin prior to execution. Native code module validation is described in a co pending non provisional application by inventors J. Bradley Chen Matthew T. Harren Matthew Papakipos David C. Sehr and Bennet S. Yee entitled Method for Validating an Untrusted Native Code Module having Ser. No. 12 117 634 and filing date 8 May 2008 which is incorporated herein by reference.

Once native code module is validated native code module may be loaded and executed in a secure runtime environment provided by plugin . Native code module execution in a secure runtime environment is described in a co pending non provisional application by inventors J. Bradley Chen Matthew T. Harren Matthew Papakipos David C. Sehr Bennet S. Yee and Gregory Dardyk entitled Method for Safely Executing an Untrusted Native Code Module on a Computing Device having Ser. No. 12 117 650 and filing date 8 May 2008 which is incorporated herein by reference. Secure runtime environment may also be provided by a web browser extension to web browser and or secure runtime environment may be built into web browser .

Furthermore because native code module may include binary code that runs directly on hardware native code module may be platform independent with respect to the operating system of computing system web browser and or other software components on computing system . As described in the above referenced applications plugin and or native code module may also include mechanisms for executing on a variety of instruction set architectures including the use of fat binaries and binary translators. Consequently the validation and execution of native code module may enable web application to safely utilize natively executing code in performing tasks for the user.

To enable communication between native code module within secure runtime environment and web browser a plugin interface bridge may be provided between native code module and web browser . In particular plugin interface bridge may implement an inter process communication IPC mechanism such as a remote procedure call RPC mechanism a socket mechanism and or a communication mechanism based on a shared memory between native code module and web browser . Furthermore the IPC mechanism provided by plugin interface bridge may allow native code module to operate as a plugin for web browser e.g. an NPAPI or ActiveX plugin without changes to the plugin architecture used by web browser .

More specifically plugin interface bridge may provide a browser interface to web browser and or web application that corresponds to a list of function calls supported by the plugin architecture of web browser . For example browser interface may allow web application and or web browser to call NPAPI plugin methods such as NPP New NPP Destroy NPP GetValue and or NPP GetScriptableInstance . Along the same lines plugin interface bridge may implement a plugin interface that includes function calls from native code module to web browser . For example plugin interface may allow native code module to call NPAPI browser methods such as NPN GetValue and or NPN Status . In other words plugin interface bridge may allow communication between native code module and web browser to proceed using interfaces supported by the plugin architecture of web browser despite the execution of native code module within secure runtime environment .

In one or more embodiments plugin interface bridge includes an inter module communication IMC runtime between web browser and native code module . The IMC runtime may further facilitate communication between proxies and stubs in plugin interface bridge that allow objects exposed by web browser and or native code module to be reached by other components in the plugin architecture. IMC runtimes are described in further detail in the above referenced applications. Communication between proxies and stubs using IMC runtimes is described in further detail below with respect to .

To enable communication between native code module and incompatible web browser a second plugin interface bridge between plugin interface bridge and incompatible web browser may be used. Plugin interface bridge may allow function calls between native code module and incompatible web browser to be translated into analogous function calls in the plugin architecture of the other component. For example plugin interface bridge may allow an NPObject interface in NPAPI to be translated into an IDispatch interface in ActiveX and vice versa.

Moreover plugin interface bridge may provide a browser interface to incompatible web browser that allows incompatible web browser to make function calls in the plugin architecture used by incompatible web browser e.g. ActiveX . Plugin interface bridge may then translate the function calls to analogous function calls in the plugin architecture of native code module e.g. NPAPI and send the analogous function calls to plugin interface bridge using browser interface . Plugin interface bridge may then transmit the analogous function calls to native code module using an IMC runtime that implements an IPC mechanism such as RPC and or sockets.

For example native code module and native code module may correspond to modules that respectively calculate physics and graphics for a computer game. The output of the physics processing module may be passed to the graphics processing module to animate characters in the computer game.

However the respective execution of native code module and native code module in secure runtime environment and secure runtime environment may prevent the native code modules from communicating directly with one another. Instead the native code modules may use plugin interface bridge and or a shared memory interface to share file descriptors and or data with both web browser and one another. Alternatively a socket based interface may be used instead of a shared memory based interface. 

In particular file descriptors may be shared between native code module native code module and or web browser through plugin interface bridge . For example web browser may download a file using a network connection with one or more servers and save the file locally on computing system . Web browser may then open the file and send a file descriptor for the file to native code module and or native code module through the IPC mechanism provided by plugin interface bridge . Native code module and or native code module may then use the file descriptor to read directly from the file.

In addition a shared memory interface may be provided between native code module and native code module to facilitate data transfer between native code module and native code module . As with plugin interface bridge shared memory interface may be implemented using an IPC mechanism. Furthermore shared memory interface may allow native code module and native code module to share data using a segment of shared memory .

To set up a segment of shared memory native code module or native code module may create the segment and pass a handle for the segment through plugin interface bridge and or shared memory interface to the other native code module. For example native code module may transmit the handle for shared memory to native code module through a socket provided by plugin interface bridge . Moreover the segment of shared memory may be implemented as an IMC buffer that is accessed through shared memory interface by native code module and native code module through an IMC runtime.

As a result native code module and native code module may transmit data to one another by writing the data to shared memory and reading the data from shared memory using shared memory interface . For example native code module and native code module may animate characters in a computer game by using shared memory interface and shared memory to transmit data such as vertex buffers index buffers and or texture buffers between one another.

Native code module and web browser may provide additional functionality to web applications e.g. web application of executing on web browser by making function calls to the objects exposed by the other component. For example native code module may request that web browser retrieve data from a URL by making a function call to object . Similarly a web application executing on web browser may utilize the added functionality provided by native code module by making function calls to object .

To reach objects through plugin interface bridge web browser and native code module may utilize a set of proxies a set of stubs and or a set of IMC runtimes provided by plugin interface bridge . More specifically web browser may reach object by calling a proxy provided by plugin interface bridge that represents object . Similarly native code module may reach object by calling a proxy provided by plugin interface bridge that represents object . Proxies may thus represent remote objects e.g. objects that may be accessed by web browser and native code module through plugin interface bridge .

Function calls to proxies may then be forwarded over IMC runtimes to corresponding stubs which translate messages received over IMC runtimes into function calls to objects . In one or more embodiments the function calls correspond to NPAPI calls to NPObjects such as NPN Invoke NPN GetProperty and or NPN SetProperty . Analogous function calls to COM objects in ActiveX may also be enabled by plugin interface bridge or by a separate plugin interface bridge e.g. plugin interface bridge of . The execution results of the function calls may be sent from stubs to proxies and relayed to web browser and native code module by proxies for use by web browser and native code module .

For example web browser may make a GetProperty function call to proxy . Proxy may then send a message corresponding to the GetProperty to stub through IMC runtime . Stub may translate the message into an actual GetProperty function call to object and return the execution result e.g. the property value requested of the GetProperty function call to web browser through a message to proxy using IMC runtime . Similarly an Invoke function call to object from native code module may be received by proxy which sends a message corresponding to the Invoke function call to stub through IMC runtime . Stub may then translate the message into an actual Invoke function call to object and return the execution result of the invoked method to native code module through IMC runtime and proxy .

However unlike accessing objects between native code modules and web browsers communications may pass from native code module to object through two proxies two stubs and two IMC runtimes . In particular a function call to object from native code module may be sent to proxy which translates the function call into a message to stub through IMC runtime . Instead of calling object directly stub translates the message back into the function call and calls proxy using the function call. As an interface to remote object proxy may then translate the function call from stub into a message to stub that is sent through IMC runtime . Finally stub may make the function call to object and return the execution result of the function call to native code module through IMC runtime proxy stub IMC runtime and proxy .

Those skilled in the art will appreciate that communication between native code modules and web browsers and or separately executing native code modules may be implemented in a variety of ways. For example plugin interface bridge may enable communication between various components e.g. native code modules web browsers etc. of a plugin architecture through a chain of proxies stubs and or IMC runtimes. Alternatively plugin interface bridge may pass function calls from one component to another using only one proxy and one stub. Additionally multiple plugin interface bridges may be used to enable communication between native code modules and incompatible web browsers as discussed above with respect to . Each plugin interface bridge may provide interaction between stubs and proxies in a different way. As a result interaction between native code modules and incompatible web browsers may be facilitated using a variety of plugin interface bridges proxies stubs and or IMC runtimes.

Initially the plugin is obtained as a native code module operation . For example the plugin may be downloaded as a native code module from one or more servers or the plugin may be compiled into a native code module from source code. The system then attempts to validate the native code module operation prior to executing the native code module. If the native code module fails validation the native code module is discarded without having been executed. If the native code module is successfully validated the native code module is executed in a secure runtime environment operation . The secure runtime environment may be provided by a plugin associated with the web browser a browser extension to the web browser and or a component within the web browser.

To enable communication between the native code module and the web browser a first plugin interface bridge is provided between the native code module and the web browser operation . The first plugin interface bridge may include an IMC runtime that allows the native code module and the web browser to communicate using an IPC mechanism such as RPC or a socket. The first plugin interface bridge may further provide interfaces to the native code module and web browser that allow the native code module and web browser to continue executing using the plugin architecture supported by the native code module and or web browser. In other words the first plugin interface bridge may enable a native code module executing within a secure runtime environment to communicate with the web browser using standard function calls supported by the plugin architecture of the web browser. As a result the native code module and web browser may execute and interact with one another without awareness of the first plugin interface bridge and secure runtime environment.

The native code module may also interact with an incompatible web browser operation . For example the native code module may correspond to an NPAPI plugin while the web browser may support ActiveX plugins and vice versa. If the native code module is to communicate with an incompatible web browser a second plugin interface bridge between the first plugin interface bridge and the incompatible web browser is provided operation . The second plugin interface bridge may allow function calls between the native code module and the incompatible web browser to be translated into analogous function calls in the plugin architecture of the other component. For example the second plugin interface bridge may translate function calls in ActiveX to function calls in NPAPI and vice versa. If the native code module is not used by an incompatible web browser the second plugin interface bridge is not used.

The native code module may also communicate with other plugins operation for the web browser. For example the native code module may correspond to a physics processing module that communicates with a graphics processing native code module to render and animate 3D graphics for a web application executing within the web browser. If communication with other plugins is required a shared memory interface between the native code module and other plugins is provided operation . As with the plugin interface bridges the shared memory interface may be implemented using an IPC mechanism. In addition the shared memory interface or alternatively a socket based interface may allow the native code module and other plugins to share data by reading from and writing to a shared memory segment that may be accessed through the shared memory interface. If data sharing with other plugins is not required the shared memory interface is not used.

The native code module may thus provide added functionality to a compatible or incompatible web browser and or communicate with other browser plugins using the first plugin interface bridge the second plugin interface bridge and or the shared memory interface. Furthermore the execution of the native code module within the secure runtime environment may facilitate the safe and platform independent implementation of a browser plugin for a web browser.

The foregoing descriptions of embodiments have been presented only for purposes of illustration and description. They are not intended to be exhaustive or to limit the embodiments to the forms disclosed. Accordingly many modifications and variations will be apparent to practitioners skilled in the art. Additionally the above disclosure is not intended to limit the present embodiments. The scope of the embodiments is defined by the appended claims.

