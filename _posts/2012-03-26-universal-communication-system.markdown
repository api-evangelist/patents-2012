---

title: Universal communication system
abstract: A universal communication system including a processor configured to execute a client application is described and includes first logic configured to provide a client interface for accessing a plurality of communication and media types from the command window, and second logic configured to integrate a plurality of contact information from the plurality of media and communication types into a single contact list, where the single contact list being accessible from the client interface. The system further includes third logic configured to receive executable instructions from a multi-protocol application program interface to alter the plurality of communication and media types and the plurality of contact information received therefrom.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489658&OS=09489658&RS=09489658
owner: Telcentris, Inc.
number: 09489658
owner_city: San Diego
owner_country: US
publication_date: 20120326
---
This application claims the benefit and priority to U.S. Provisional Application No. 61 467 901 filed on Mar. 25 2011 and is hereby incorporated by reference in its entirety.

This invention relates to communication systems and methods and more particular a universal communicator UC configured to unify one or more forms of communication media and information types.

The proliferation of telecommunication and computing technology has spawned a variety of communication technologies and channels. Currently key communication channels include data voice video instant messaging text messaging social media email file sharing faxing and other similar communication channels. Voice communications have expanded beyond traditional public telephone networks and landlines to voice communications occurring over mobile networks and the Internet such as Voice over IP VoIP . Additionally new options for instant messaging and social media communications are regularly made available to users.

To keep up with the ever increasing availability of communication options many users may be accessible to more than one communications option. For example users may have multiple phone numbers at which they may be reached e.g. home office mobile and fax. A user may also belong to multiple instant messaging and social media networks.

Further each user may prefer to communicate using different communication channels types or media. Further these preferences may differ among users family friends and colleagues and or a user may only communicate using a certain type of communication mechanism such as through electronic mail or calling over a network using VoIP. Accordingly it may be difficult for a user to keep track of contact information for family friends and colleagues. Moreover a user may require access to multiple forms of communication to stay connected to other users.

Therefore there is a need for a communication system that unifies information media and different forms of communication.

Broadly in one aspect a computer program product stored on a non transitory computer readable medium that includes instructions that when executed on one or more computers cause the one or more computers to provide a client application is described and includes a plurality of communication types provide access to a plurality of contact information initiate a first communication with a first party using a first one of the communication types and automatically switch to a second communication with the first party using a second one of the communication types concurrently with a termination of the first communication.

In another aspect a universal communication system including a processor configured to execute a client application is described and includes first logic configured to provide a client interface for accessing a plurality of communication and media types from the command window and second logic configured to integrate a plurality of contact information from the plurality of media and communication types into a single contact list where the single contact list being accessible from the client interface. The system further includes third logic configured to receive executable instructions from a multi protocol application program interface to alter the plurality of communication and media types and the plurality of contact information received therefrom.

In another aspect there is described an apparatus that includes a processor configured to execute a client application including a plurality of communication types and a memory configured to store and provide access to a plurality of contact information from a plurality of media types where the processor is further configured to enable a first communication with a first party using a first one of the communication types and automatically terminate the first communication as a second communication with the first party using a second one of the communication types is initiated.

A computer implemented system and method for a universal communicator UC is provided for unifying or aggregating one or more forms of communication media and information. A client having various modules may be installed on a computing device. The modules of the client may be adapted to receive and transmit communications by way of various communication methods. The client may be in direct or indirect communication with a server which includes one or more databases and a host application having various modules and engines that facilitate communications between a user and one or more contacts associated with the user.

The UC may access various instant messaging services and social networking services to which a user belongs. Examples of instant messaging services include without limitation AIM Facebook Chat Google Talk ICQ Jabber Windows Live Messenger MySpace Skype and Yahoo Messenger. Examples of social networking services include without limitation Facebook MySpace and Twitter.

Many services software programs and other media allow a user to have a list of contacts associated with a user referred to as to as a contact list or buddy list which may consist of friends family co workers and or any other person or entity associated with a user. The UC may require secure procedures to access the contact list. For example a user may provide the UC with the credentials used to access the contact lists from the services. In one example a username and a password may be required.

The UC may access one or more services such as instant message and social networking services or electronic mail to collect contact lists using software or a combination of software and hardware. The UC may display contacts at one or more locations in a client. Displaying the contacts from each software program or service in an aggregate or unified location enables the user to more easily communicate with the contacts by eliminating the need to access the individual services separately.

The client may have contact management features including the storage of contact information for individual contacts. Contact information includes for example street addresses phone numbers email addresses and instant messaging screen names. Accordingly the client may use the contact information to provide or perform various digital communications including without limitation telephony instant message text message email file transfer or fax. Thus the UC may provide a location from which users may communicate using a variety of communication options.

Examples of communication may include an inbound or outbound message respectively received by a user at a client or sent to a contact via the UC. Examples of communications may include voice messages instant messages text messages multimedia messages email messages file transfers and or faxes. Examples of voice messages may be voice or digital based messages received by a recipient via a traditional landline telephone a mobile cellular telephone or a voice over IP VoIP system voice messages may also be referred to as phone calls and voicemails. Examples of instant messages may be text image video or sound based messages transmitted in real time or substantially real time to a computing device over any type of network. Examples of text messages may be text based messages received and or transmitted over cellular or mobile networks using for example the Short Message Service SMS . Examples of multimedia messages may include image video or sound based messages transmitted over cellular networks using for example the Multimedia Message Service MMS . Examples of electronic mail messages email refer to those supported by Microsoft s Outlook and Google s Gmail. Examples of facsimile transmissions may include transmitting content on a page from one point to another. Examples of file transfers are those communications in which a file such as a computer file may be transferred between a user and a contact.

The UC may provide additional features relating to voice text and other methods of communication. The additional features may include management transfer direction and forwarding of calls text messages and instant messages voicemail and automatic translation of text messages instant messages and email messages.

In an example the UC may include a VoIP phone system an application server that may host an application A for carrying out the functions of the system a database server that may host one or more databases A and a web server that may host a web based portal A for accessing various functions. In another embodiment the UC may include the application server and application A and transmit and receive data from the database server the VoIP phone system and or the web portal . In another embodiment the UC may include the client application .

The host application A may communicate with the VoIP phone system to provide call related services between the client and one or more contacts or users. The databases A may store information relating to for example users and contacts A D of the users . The web portal A provides for example registration functionality so that a user may gain access to the system. The client application may send requests to the application server to carry the various functions such as sending a communication to a contact. The host application A may receive requests from the client application and executes the requested feature. The host application A may also communicate via one or more networks such as network with various instant messaging services social networking services web based services and or payment processing services . Any one of the services and or may be accessed over network . Similarly the host application A may transmit calls messages faxes and files to contacts via one or more networks.

The networks may be for example public switched telephone networks mobile networks or IP based networks such as the Internet. It should also be understood that the UC may be implemented on a network of any scale e.g. a local area network LAN wide area network WAN metropolitan area network MAN personal area network PAN virtual private network VPN campus area network CAN regional area network RAN or global area network GAN using wired and or wireless technologies or a combination thereof e.g. coaxial cable power lines phone lines optical fiber Ethernet radio waves microwaves or infrared signal s .

Those skilled in the art will recognize that the term computing device as used herein may refer to any device configured to process commands or operate on data such as a stationary computer e.g. a desktop computer a portable computer e.g. a laptop or notebook computer or a handheld computer e.g. a tablet computer personal digital assistant mobile phone etc. . A computing device may include software hardware or combinations thereof. By way of example computing device computing device cellular phone landline phone and fax machine may all be considered types of computing devices and may communicate with the UC over a network . In one example the UC may communicate with contacts A D over network through one or more of the computing devices. Network may be similar or different from network . In addition any number of contacts may have access to the network.

Referring now to the client application and the host application A of the system include various modules and engines. Module as used herein refers to hardware and or software configured at the client application and or host application A that are adapted to carry out particular tasks such as making a phone call or sending a text message. Engine as used herein refers to hardware and or software configured at the host application server that is adapted to access various services e.g. instant messaging services social networking services and web services and or exchange communications between a user and a contact A D.

The modules of the client application may include an authentication module A initialization module B a configuration module C a contact management module D a voice message management module E a text based message management module F a fax management module G a file transfer module H a translation module J and a service plan management module I.

The engines of the host application A may include a registration module B an authentication module C an information engine D a voice message engine N a voice message management engine D a text message engine M an instant messaging engine G a social networking engine L an email engine P a fax engine I a file transfer engine K a translation engine H and a service plan management engine F.

With reference now to an example VoIP phone system for is shown. The VoIP phone system may include a VoIP gateway B for managing inbound and outbound calls an analog telephone adapter C to provide analog telephone service with traditional landline or mobile cellular phones and a router hub or switch A to provide IP based telephone service with other computing devices.

An example UC will now be discussed in further detail in the context of an example database client application and host application implementation. It should be understood that the description of the respective configuration and implementations are by way of example only and alternative implementations are possible. For example the engines of the host application may be embodied in multiple host applications distributed across multiple application servers in communication with multiple databases.

One or more databases may be configured to store user and contact information. The databases may include tables that store information relating to users and their contacts uploaded computer files faxes sent and received configuration settings and other information that may be transmitted and received over the network. The host application may query the database.

The databases may be provided as a database management system DBMS and in particular as a relation database management system RDBMS or an object database management system ODBMS . Further the database may be accessed using a database query language. Examples include such as SQL MySQL or Oracle.III.

The client application may be implemented as a software application and installed on a computing device. The client application may be implemented on any suitable development platform using any suitable programming language known to those skilled in the art. For example the client application may be developed using C using the QT framework by Nokia Trolltech and or Objective C. The server side may be developed using PHP in the Zend framework and or PERL. The host application may similarly be implemented as a software application on any suitable development platform using any suitable programming language known to those skilled in the art. The host application may be one application installed on a single server or multiple applications installed across multiple servers in communication with each other. The host application may be installed on an application server and communicate with one or more clients operated by users of the system.

The client and the host application may communicate via HTTP service URLs. The service URL may include an address for the appropriate engine of the host application as well as any relevant information necessary to carry out a requested feature. Protocols that may be used to access the host application may include SOAP XML RPC JsonRPC and REST. The protocols may be supported through an Application Programming Interface an example of which is shown in .

The client and host applications may be configured to perform the following tasks register users authenticate users configure the client and operation of the system retrieve contact lists from networking services manage contacts provide voice based communication e.g. phone calls conference calls video phone calls voicemail and the like provide text based communication e.g. text messages instant messages and emails fax documents transfer files and or manage service plans.

Referring again to the client application and host application A may include various modules and engines to carry out the example tasks listed above. Some modules of the client may communicate with engines at the host application to carry out the tasks. For example a client and host application may include the modules and engines listed below.

A client application may include an authentication module A that communicates with an authentication engine C of the host application A to authenticate users and provide access to the UC .

The host application A may also include an initialization engine O to initialize a new session with the client after a successful login. The initialization engine O may retrieve contact lists from the instant messaging and social networking services to which the user belongs and may transmit those contacts to the client . The contents of the contact list may be displayed for the user.

A client application may include an initialization module B for accessing the instant messaging services and social networking services to which a user belongs in order to retrieve contact lists from those services. The initialization module B may communicate with an instant messaging engine G and a social networking engine L of the host application A to retrieve contact lists and other information.

The client application may also include a configuration module C for inputting client and system configuration settings. The client configuration module C may communicate with an information engine J of the host application A to store the configuration settings in a database.

A contact management module D of the client application may also communicate with an information engine J of the host application A to store profile and contact information relating to one or more users or their contacts.

The client application may include a voice message management module D to provide voice based communications e.g. phone calls conference calls video phone calls voicemails and the like . To send and receive phone calls the client application may communicate with a voice message engine N of the host application A which may also communicate with a calling system such as VoIP phone system . The host application A may also include a voice message management engine D that communicates with the voice message management module E of for the management of voice based messages e.g. the recording display playback and deletion of voicemail or recorded phone calls .

The client application may also include a text based message management module F to facilitate text based communications. For example the text based message management module may communicate with a text message engine M of the host application A for sending and receiving text messages an instant messaging engine G or social networking engine L to send and receive instant messages or an email engine P for sending and receiving emails.

A fax module G of the client application may communicate with a faxing engine I to send and receive faxes. The fax engine I may communicate with a calling system such as the VoIP system to facilitate the transmission of faxes. A fax module of the host application A may facilitate the storage of faxes and or retrieval of faxes. The faxes may be displayed by the client application .

The client application may also include a file transfer module H in communication with a file transfer engine K at the host application for uploading files downloading files and or transmitting files to contacts.

The client application may additionally include a translation module J that communicates with a host translation engine H that may be used to automatically translate text based messages sent to and received at the client application . The host translation engine may include or communicate with a translator such as a translation web service.

Further the client application may include a service plan management module I for purchasing credits and service plans which may be necessary to use certain features of the UC . The host application A may include a service plan management module engine F for collecting purchase and payment information for processing payments. Moreover the service plan management module I which may also have a corresponding module at the host application may communicate with the other modules and engines of the client and host application respectively to monitor or track usage or adjust credits of a user accordingly.

The modules and engines of an example client and host application will now be described in more detail in the context of the tasks they are designed to perform.

The UC may require a user to register before using the system. The registration process is similar to conventional registration processes known to those skilled in the art. The universal communication system may provide a portal such as a web page to collect registration information from a user. Registration information may include for example the name email address mobile cellular phone number and other profile and contact information of the user.

Referring now to an example registration process is shown. A user may access a registration portal as shown in step and select and submit login credentials such as a username and password as shown in step . The registration portal may be one or more web pages in communication with a web server . The web server may be in communication with the registration engine B of the host application A which processes validates and stores the supplied registration information. The registration engine B may communicate with the database server for the storage of the registration information during the registration process.

The registration engine B may receive the registration information from the registration portal and validates the registration information at step . For example the registration module B may ensure that the user has provided all required information and that the information is valid e.g. that the desired username is unique the password contains a specific subset of characters and that the email address is formatted properly. . In one example an email may be sent to the user to verify ownership of the email address provided at login. In another example SMS verification may be performed. A text message may be sent to a users phone to verify ownership of the calling device. A code may be required to complete the verification. If the registration information is incomplete or invalid the registration engine sends an error message to the user at step A. If the registration information is complete and valid the registration engine sends a confirmation to the user at step . Once a user confirms the registration in step the registration engine creates a new user record in the system database and stores the collected registration information in the database at step . In another embodiment step may be optional.

In addition to the creation of a new user record at step the registration module may select and assign a unique phone number and email address for the registered user and stores these attributes in the database. The email address created may be based on the username supplied during registration e.g. username xxxx.com . Because the phone number and the email address created during registration may be associated with a new user account each may be referred to as the account phone number and the account email address.

The account phone number and account email address may be used during the operation of the UC to send and receive communications. For example a registered user may receive an account phone number of 123 555 0000 and an account email address of user xxxx.com. Phone calls and text messages originating at the client application may be associated with the account phone number. Similarly phone calls and text messages to the account phone number will be received at the client application . Likewise emails sent from the client application may be associated with the account email address and emails sent to the account email address may be received at the client application .

The authentication module A of the client application may receive and submit to the host application A login credentials e.g. username and password of a user to begin a new login session. The authentication engine C of the host application A may validate and or authenticate the received login credentials with the login credentials stored in the system database. If the received login credentials match the stored login credentials a new login session is created. In one example the validation may include the return of an encrypted XML file containing SIP VoIP and IM login data . The contact list may be populated.

Now referring to and an example login window and authentication process are shown. To login the client application presents a login window as seen in . The login window may include data input elements such as text boxes to receive the user login credentials e.g. username and password . A user may submit the login credentials via a submit button.

An example login and authentication process is shown in . At step a user inputs and submits login credentials at the login window as described above. Upon submission of the login credentials the authentication module submits a login request containing the login credentials to the authentication engine of the host application as shown in step . At step the authentication engine receives the login credentials submitted at the client. The host application then at step queries the database for the stored login credentials of the user and compares queried login credentials with the supplied login credentials at step to determine if a match exists at step . If the login credentials do not match the authentication engine may transmit a failure message to the client as seen in step which may then be displayed to the user in step . If the login credentials match the authentication engine may transmit a login success message to the client at step . Finally in step the host application opens a new session with the client during the initialization process. shows a window if the login in not successful.

After a successful login authentication the initialization module B executes an initialization process. An example initialization process is shown in . The initialization engine creates a new session with the client at step following a successful authentication in step . The initialization engine then in step queries the database for the instant messaging and social networking services the user has configured the system to access. The configuration process will be described in further detail below.

The database supplies the initialization engine with a result set containing the services to access and the login credentials for those services. At step the initialization engine checks the result set for remaining services to access. If there are remaining services to access the initialization engine requests the contact list from the instant messaging service or social networking service using the login credentials stored for that service at step . The service then validates the login credentials at step . If the login credentials are invalid at step the service sends the initialization engine an error message at step A. If the login credentials are valid the service sends the contact list for the user to the initialization engine at step which then sends the contact list to the client application at step . Finally the initialization engine returns to step to determine if there are any remaining services to access.

The client interface may include various windows navigational elements command input elements and data input and output elements for receiving commands and data from a user and displaying information and messages to a user. The navigation command input and data input and output elements may include for example buttons menus panels tabs check boxes lists text boxes icons labels scrollbars and other user interface elements.

An example client interface is described below and shown in the accompanying Figures. Following a successful authentication and initialization the client may display a main window to a user as seen in . The main window may include a main panel that includes a menu bar and a series of tabs for navigating the client.

The menu bar may include a set of menu options which may further include one or more sets of sub menu options. An example hierarchy of menu options and sub options is listed in . The tabs of the main panel may include for example a contacts tab a keypad tab an applications tab and a history tab. The menu options and tabs may be used to navigate the client and or carry out the features of the system.

The contacts tab displays the contact lists of a user which were retrieved by the system during the initialization process. As seen in the contacts of a user may be organized in groups according to the instant messaging or social networking service to which the contact belongs. Each group may be collapsed or expanded to respectively hide or display the contacts belonging to that group as shown in . A user may select a contact or hover a cursor over the contact in the list to display a set of communication options. The communications options may include initiating a phone call sending a text message sending an instant message sending an email sending a fax or sending a file to the contact. Selecting a contact in the list may display an option panel directly in the list of contacts as shown in . The option panel may include buttons for initiating a communication with the selected contact. Alternatively a user may simply hover a cursor over a contact in the list to display next to the main window an option panel having buttons to select a communication method as seen in .

Selecting a communication method may display a message window. An example message window is shown in . The message window may include a panel that lists the contacts with which a user is currently communicating a message panel for inputting and displaying messages and a button panel having buttons to initiate a new type of communication with the current contact.

Selecting a contact entry from the current contact list of the message window may display the conversation with the selected contact in the message panel. For phone calls the message panel may display a phone call status panel as seen in . The phone call status panel includes buttons to end the phone call place the contact on hold mute the call transfer the call or display a keypad.

For text based messages the message panel may display a sequence of messages sent from and received at the client application as seen in . The text based message panel also includes an interface element e.g. a button to translate inbound and outbound text based messages. Selecting the translation button may display a translation settings panel as seen in which may include interface elements to set the translations options. If translation is enabled the text based message window may display the translated text based message to the user as seen in . The displayed message may also include an interface element to display the un translated message as it was originally sent as seen in .

For faxes the message panel may display input elements to select and submit a fax and information for a cover page as seen in . For file transfers the message panel may display input elements to select and upload a file as seen in . When transmitting a fax or a file transfer the client may display to the user a file selection interface as seen in .

Referring again to the button panel of the message window may include buttons to initiate the following types of communications phone calls text messages instant messages emails faxes and file transfers. Selecting a button from the button panel initiates a new communication with the current contact according to the selected method. For example a user currently communicating with a contact via instant message may select the text message button to send a text message to the contact.

The keypad tab in the example shown in displays a panel that includes a dialing pad having buttons for dialing a phone number. Once a number has been dialed a user may select a button to place a phone call send a text message or send a fax to the dialed number. The keypad panel also includes buttons to navigate to voicemail redial the last phone number view calling rates or initiate a conference call.

Selecting the redial button may automatically dial the last number entered by the user with the keypad. Selecting the callings rates button may display in a web page for example the rates for calling various countries with the system. Selecting the conference call button displays a panel in which a user may enter two phone numbers to initiate a 3 way conference call. Like a 2 way phone call a message window displays a phone call status panel for each contact participating in the call.

The applications tab includes an application panel having a series of buttons to navigate and initiate features of the system. An example application panel of the applications tab is seen in includes buttons to navigate to a setup manager a settings manager a contact manager a message manager a call back manager a caller identification manager and a service plan manager.

The setup manager button of the applications tab may display a configuration window that steps through a series of setup panels to gather configuration information from a user. The configuration panels may exhibit navigation elements to move back and forth between the configuration panels of the configuration window. As seen in through the configuration panels may include a service selection panel various service configuration panels a phone setup panel an assistant setup panel panels for audio and video setup and a profile panel.

Referring to the service selection panel may include selection options to indicate which instant messaging and social networking services the system will access. Accordingly the service configuration panel as seen in includes data input elements for collecting the login credentials for each instant messaging or social networking service the user has selected. The technical details relating to the access of various instant messaging and social networking services will be described in further detail below.

The phone setup panel as seen in may include text boxes for inputting the various phone numbers e.g. mobile home work fax etc. that belong to a user. The supplied phone numbers are stored in the system and may be used when initiating phone calls to the user.

The assistant setup panel shown in may include data input elements for selecting options relating to the communication assistant.

The audio setup panel may include data input elements for selecting the audio devices used by the system as seen in . For example a user may select the device used to input and output audio.

The video setup panel seen in may include data input elements for enabling video for video phone calls and selecting a video input device. Additionally the video setup panel may include a preview panel for testing video input to the client.

The profile panel of may include data input elements for inputting profile information relating to the user e.g. name location gender birthday and the like . The profile information is stored in the system.

The settings button in the Apps tab may display a settings window that includes various panels having data input elements for configuring the client. The settings panels may be similar to the setup manager panels and may include a general settings panel a service settings panel an appearance settings panel a phone settings panel a text message settings panel an audio settings panel a video settings panel an events settings panel and a notification settings panel.

The general settings panel displays data input elements for configuring the client. Example general settings are shown in .

The service settings panel displays the instant messaging and social networking services a user has configured the system to access. The service settings panel may also include control elements and data input elements for adding or modifying the services a user has configured the system to access. Example service settings are shown in .

The appearance settings panel displays data input elements for configuring the visual appearance of the client interface. Example appearance settings may be seen in .

Referring now to through the phone settings panel may include data input elements for configuring the handling of inbound phone calls. Phone settings selected in the settings window will be applied to all inbound phone calls from all contacts. Phone settings may also be specified on a group basis or a contact by contact basis in the contact manager as described below. The phone settings panel as seen in may also include a series of tabs relating to various phone settings. The phone settings tabs may include a general phone settings tab a call direction tab a caller identification tab a voicemail tab and an audio tab.

As seen in the general phone settings tab may display options for managing the handling of inbound calls to the client. For example the general phone settings tab may include an assistant setting a call screening setting a call prevention setting and a personalization setting. The assistant setting may be enabled to instruct the voice message engine of the host application how to handle inbound phone calls. For example the voice message engine may answer inbound phone calls for a user screen inbound phone calls direct inbound phone calls to other phone numbers record voicemails or receive faxes. Enabling the call screening setting instructs the voice message engine of the host application to request the name of the inbound caller and play the name for a user before the user accepts the call at the client. Additionally the voice message engine may record the phone call or direct the phone call to voice mail. The call prevention setting may be enabled to prevent a user from receiving phone calls at the client. If the call prevention setting is enabled the system may play an audio clip selected by a user. The audio clip may be a generic sound such as a busy signal the computer generated name produce by a text to speech module or an audio clip recorded by the user.

The call direction settings tab as shown in may display a panel for configuring the direction of inbound calls when a user is unavailable at a particular phone number. The call direction panel includes a hierarchical list of phone numbers at which the user may be reached. If the user is unavailable at one particular number the system will initiate a call to the next number in the list until the user answers. The call direction panel includes data input elements for inputting phone numbers at which the user may be reached. In addition the call direction panel includes data input elements for selecting the amount of time the inbound call will ring before the system initiates a call to the next phone number in the list. Moreover the call direction panel also includes a data input element to enable or disable the call direction feature enable or disable particular phone numbers in the list and instruct the system to call all numbers simultaneously rather than sequentially. The technical features of the call direction feature will be described in further detail below.

Referring to the caller identification settings tab includes a panel for configuring a caller identification option. The caller identification panel includes data input elements for selecting what number is displayed when the client directs an inbound phone call to a landline or mobile cellular phone of the user. A user has the option of displaying the phone number of the inbound caller or the account phone number. For example if the system receives a call at the account phone number and directs the call to the cellular phone of a user the caller identification of the cellular phone may display either the phone number of the inbound caller or the account phone number of the user. The caller identification panel may also include a text box for inputting the number displayed to contacts when placing a call from the client. By default the number displayed for outbound calls may be the account phone number.

The voicemail settings tab as shown in includes a panel for configuring the voicemail options of the system. The voicemail settings panel may include options for specifying a voicemail greeting an option to specify how long an inbound phone call will ring before being directed to voicemail and an option to specify a voicemail personal identification number. The voicemail greeting options may include a standard voicemail greeting a standard voicemail greeting using the name of the user an audio clip of a text based greeting converted by a text to speech module or an audio clip recorded by the user upload to the system.

Finally the audio tab includes a panel for setting audio options for callers when an inbound call is ringing and when a contact is placed on hold as seen in . A user may select a standard audio option or a custom audio option.

The text settings panel may include input elements for configuring the handling of text messages received at the client. For example a user may instruct the system to forward text messages received at the client based on the status of the user. The forwarded text messages may be sent to the email address or mobile cellular phone number of the user. Example text message settings may be seen in .

The audio settings panel includes input elements for configuring the audio devices of the computing device and input elements to specify call protection methods. Example audio and security settings may be seen in .

The video settings panel includes input elements for enabling video phone calls and input elements for configuring and testing the video device of the computing device. Example video settings may be seen in .

The event settings panel includes input elements for configuring the handling of particular events that occur during use of the system. For example a user may select audio clips to play when an incoming call is received when a phone call ends and when an instant message is received. Example event settings may be seen in .

The notification settings panel includes input elements for configuring notifications initiated by the system to inform a user of certain events. For example the system may send to the user an email or text message when a new voicemail fax or text message is received at the client. Example event settings may be seen in .

The contact manager button may display a contact window that may be used to edit information relating to the contacts of a user. As shown in the example window of the contact manager window may include a group listing panel a contact listing panel an information panel and a search panel.

The group panel may list the current contact groups of a user. Selecting a group from the group list may display all contacts for that group in the contact listing panel. Selecting a contact from the contact list may display the profile and contact information for the contact in the information panel. A user may select a contact edit button or phone settings edit button to modify the stored information and phone settings for a contact.

Selecting the contact edit button displays an edit panel as shown in . The edit panel of the contact window may include data input elements with which a user may enter profile and contact information such as name phone number instant message screennames email addresses street addresses and the like. Selecting the phone settings edit button displays an edit panel having data input elements for selecting the phone settings for a particular contact. In the example shown the phone settings displayed are the same as those mentioned above for the general settings manager. As discussed above phone settings may be set globally for all contacts or on a contact by contact basis in the contact manager.

The message manager provides the user with a list of stored voicemails faxes and recorded phone calls. The message manager may display a message management panel having a series of message tabs for displaying the stored messages as shown in . The message manager tabs may include a voicemail tab a fax tab and a recorded phone call tab. A user may select each tab to display the list of stored messages for each type of message.

An example voicemail tab is shown in . Selecting the voicemail tab may display a list of voicemails the system has stored for a user. A user may select a voicemail to display a playback panel. The playback panel includes buttons a user may select to play or delete the voicemail.

An example fax tab is shown in . Selecting the fax tab displays a list of faxes the system has stored for a user. The fax entries in the list may include a button to display the fax or the delete the fax. A fax may be stored in database server and streamed to the client application . Alternatively the fax may be downloaded by the computing device .

An example of a recorded phone tab is shown in . Selecting the recorded phone call tab similarly displays a list of phone calls that have been recorded and stored in the system. Selecting a recorded phone call may also display a playback panel having buttons to play or delete the recorded phone call.

The call back button of the applications tab displays a call back panel that includes tabs for accessing the web call back feature and the text call back feature as seen in . The web call back tab displays a panel as shown in having text boxes to input a phone number of the user and a phone number of a contact. The user may select a button to initiate the call back call.

The text message call back feature may require prior setup before a user may use a text message enabled device to initiate a call back via text message. Accordingly the text message call back tab may display a panel as shown in having a text box to input the phone number of the text message enabled device that will be used to initiate a text message call back. The user may then select a button to store the phone number in the system for use when initiating the outbound call to the user.

The caller identification display button of the applications tab displays a panel as shown in that includes a text box to input a phone number to be presented to caller identification systems when placing an outbound call at the client. The technical details of the caller identification display will be described in further detail below.

The service plan manager button displays a service plan manager panel having buttons to purchase credits calling plans or text messaging plans that may be required to use the system as seen in . The service plan manager may also include the ability to purchase a virtual number. In a number in other embodiments selecting the credit button displays a credit purchase panel having buttons to purchase variable amounts of credits such as for example 5 10 and 20 worth of credits as seen in . Similarly the calling plan purchase button and the text plan purchase button displays respective panels that include buttons to select a calling plan or a texting plan as seen in and .

Selecting a credit amount calling plan or texting plan will then display a purchase panel having input elements to collect payment and billing information from the user. An example purchase panel is shown in . The purchase information panel includes buttons to cancel the order or submit the order. Selecting the cancel button may return the user to the service plan manager panel. Selecting the submit button transmits the payment and billing information to the host application for processing. The technical details of the service plan management feature will be described in more detail below.

The history tab includes a list of all communications initiated or received at the client e.g. inbound and outbound phone calls text messages text messages email messages faxes and file transfers . An example history tab is shown in . A user may select an entry from the list to initiate a new phone call to the contact or display a transcript of the messages sent during the communication as seen in . The system logs each text based message sent and received by a user at the client. Selecting an entry for a text based communication may display the transcript in a transcript window.

The configuration module of the client receives information to configure the client according to the preferences of a user. The configuration module of the client also receives and stores personal and contact information of a user. Data associated with a contact may be stored in a database. If information about a contact is changed any new information or the entire set of information may be passed through the API to store in the database. The contact information may be retrieved any time the UC is available. In other embodiments the information may be made inaccessible.

The configuration module of the client may communicate with an information engine of the host application to store user selected options and settings profile information and contact information in the system database.

The contact management module of the client receives information relating to user contacts and contact options and submits this information to the host application for storage in the system database. User contact information includes profile and contact information such as the street addresses email addresses phone numbers and instant message screennames. 

The contact management module of the client may also communicate with an information engine of the host application to store user contact profile information contact information and contact options in the system database.

The voice message management module of the client provides a variety of features relating to phone calls. The voice message management module may send to and receive calls from contacts having landline mobile cellular or VoIP phone numbers. The voice message management module of the client may also acquire display retrieve and playback voicemail messages for a user.

In addition the voice message management module of the client provides advanced features that include handling of incoming calls at the client transferring calls at the client to landline or mobile phone numbers providing options for notifications of voicemail eavesdropping on the recording of voicemails directing inbound calls at the client according to a hierarchy of phone numbers customizing the path of incoming calls for particular contacts and initiating calls between landline or mobile phones from the client.

The voice message engine of the host application facilitates the communication of voice based messages using VoIP. Those skilled in the art recognize that VoIP refers to the delivery of voice or facsimile communications over packet switched networks such as the Internet. The voice message engine provides voice based communication between a user at a client and contacts who may be using traditional landline mobile cellular or VoIP telephony systems.

The voice message management module of the host application facilitates the storage query retrieval and transmission to the client of voicemails and recorded phone calls. The technical details regarding various voice based communications will now be described.

An example process illustrating the steps of an outbound phone call is now described. First an advanced Network Address Translation NAT and firewall detection is performed. This enables the client application to place a call and includes leveraging ICE STUN TURN and HTTP tunneling.

An example process of an outbound 3 way conference call is now described. A 3 way conference call is created by building two unique calls and then initiating a refer to connect them together following a standard SIP call flow.

Video calls may be made using the same process as the 2 way outbound call described above. In addition known video codecs such as H.264 are used to handle the video content.

An example overall process for receiving a phone call at the client is shown in . At step the voice message engine of the host application receives an inbound phone call from the phone system. Upon receiving a phone call the voice message engine first retrieves the phone settings for the user in order to determine how to handle the call. An example process for retrieving the phone settings is shown in . Once the phone settings have been retrieved the voice message engine may determine how to handle the inbound call.

In step the voice message engine determines if the block call setting is enabled. If so the voice message engine plays the blocked call audio for the caller at step A. The blocked call audio may be a standard busy signal computer generated speech or an audio file uploaded by the user. If the blocked call setting is not enabled the voice message engine determines if the assistant setting is enabled in step .

If the assistant setting is enabled in step A the voice message engine informs the user of options for answering the call either directing the call to voicemail as shown in step C or executing the standard inbound call process as shown in step which may include screening the call or locating the user.

Referring now to an example process for retrieving the phone settings of a user is shown. As mentioned above the voice message engine retrieves the phone settings when an inbound call is received at step . In step the voice message engine determines if the inbound caller is a known contact according the caller identification information. If the inbound call is not a known contact the voice message engine will query the database for the general phone settings of the user in step A.

However if the inbound call is a known contact the voice message engine in step determines if the user has stored contact specific phone settings in the system. If contact specific phone settings exist the voice message engine queries the database for the phone settings of the known contact in step A. If no contact specific phone settings exist the voice message engine in step determines if group specific phone settings exist for the group to which the contact belongs. If group specific phone settings exist at step the voice message engine queries the database for the phone settings of the group in step A. However if no contact specific phone settings and no group specific phone settings are stored for the known contact the voice message engine queries the database for the general phone settings stored for the contact in step B.

With reference to an example process for the standard inbound phone call process is shown. In step the voice message phone system receives an inbound phone call with the assistant setting disabled. The voice message engine then determines in step whether the call screening setting is enabled. If the call screening setting is enabled the voice message engine determines in step A if the inbound call is the first time the contact has called the user. If so the voice message engine acquires identifying information from the contact such as a name and stores this identifying information in the database at step B before proceeding to step .

The voice message engine also proceeds to step if call screening is not enabled or the contact is not a first time caller. In step the voice message engine determines if the user location setting is enabled. If so the voice message engine executes the user location process in step A and as shown in . If not the voice message engine determines establishes a connection with the client application in step and the proceeds to determine whether the user has answered the inbound call in step .

If the user has not answered the inbound call the voice message engine directs the call to voicemail in step B. If the user does answer the inbound call the voice message engine again determines in step A if the call screening setting is enabled. If the call screening setting is not enabled the voice message engine connects the inbound caller to the user in step . If the call screening setting is enabled the voice message engine plays the identifying information stored for the contact in step and provides the user the option to accept or reject the call in step . If the user accepts the call the voice message engine connects the inbound caller with the user in step . If the user rejects the call the voice message engine directs the inbound caller to voicemail in step B.

The UC includes a feature that will initiate and direct phone calls to a hierarchy of phone numbers at which the user may be reached. An example process for directing phone calls is shown in . In step the voice message engine receives an inbound phone call to the user at the client where the user locate setting is enabled. In step the voice message engine queries the database for the ordered list of phone numbers at which the user may be reached and the database supplies the voice message engine with a resulting set of phone numbers at step .

In step the voice message engine initiates an outbound phone call to the user at the current number in the list. The voice message engine monitors how long the phone call rings at the current number and determines in step if the time exceeds the maximum ring time for that phone number. If the ring time exceeds the limit the voice message engine moves on to the next phone number in the list in step and initiates an outbound call to the next phone number in the set in step . If the ring time does not exceed the limit and the user answers the phone call the voice message engine connects the user with the inbound call at step .

In step the voice message engine will direct the inbound call to voicemail if there are no remaining phone numbers in the list.

Phone calls may be transferred using the refer message as discussed above concerning conference calls.

Call back is a feature of the UC whereby the system will initiate two outbound phone calls one to a user and one to a contact and bridge the two outbound calls to provide a connection between the user and the contact. The UC provides two options for a call back a web call back and a text message call back.

The web call back feature accepts two phone numbers at the client the phone number of the user and the phone number of the contact. The system then initiates a phone call to the user at the supplied user phone number and a phone call to the contact at the supplied contact phone number. The outbound calls are then bridged so that the user may communicate with the contact.

The text message call back feature allows a user to send a text message containing the contact number to call and the system will initiate two outbound calls to bridge the calls and establish a connection with the contact. Like the web call back feature one outbound call is initiated to the supplied contact phone number. The other outbound call of the text message call back feature is initiated to the phone number at which the text message originated.

An example web call back process is shown in . In step a user enters a user phone number at the client as discussed above in reference to . The user phone number is the phone number at which the system may call the user. Next in step the user enters a contact phone number or selects a contact to call at the client also as mentioned above in reference to . The user then in step submits these numbers to the voice message engine of the host application. The voice message engine then initiates two outbound phone calls one to the user at the user number and one to the contact at the contact phone number as seen in step and step . The voice message engine then bridges the two outbound phone calls to establish a connection between the user and the contact at step . Once the phone calls are bridged and the user and the contact answer the respective outbound phone calls each may begin communicating.

The text message call back feature of the UC may require a user to register the phone number with which the user will be requesting text message call backs. Shown in steps through step is an example of the text message call back process of .

In step the user enters a call back phone number at the client as mentioned above with reference to . In step the user submits the call back number to the host application and the host application stores the call back number in the appropriate user table of the database as seen in step . Once the call back number is stored in the database the user may initiate a call back via text message.

As seen in step a user submits a text message to a call back phone number associated with the universal communication system. The text message includes the number of the contact the user desires to call. In step the voice message engine of the host application receives the text message and queries the database for the call back number of the user. As above the voice message engine then initiates an outbound call to the user at the call back number in step and an outbound call to the contact at the number contained in the text message in step . The voice message engine then bridges each outbound phone call to establish a connection between the user and the contact at step .

The client and the host application are adapted to facilitate text based communications including text messages instant messages and email messages. Accordingly the client includes a text based message management module that communicates with a text message engine an instant message engine and an email message engine of the host application.

The text based message management module of the client sends from the client and receives at the client text messages instant messages and email messages between a user and a contact.

The text messaging engine of the host application facilitates the transmission of text messages via a network between a user at a client and a contact using a computing device capable of receiving text messages such as a mobile cellular phone. Those skilled in the art will recognize that the text message engine may transmit text messages via a cellular network and or an IP based network such as the Internet.

If a user enables text forwarding the server may perform additional steps when an inbound message is received. First the server may determine if the user is online away or offline. The server may look at a user s preferences to determine how deliver a message. The server may redirect messages when a user is offline.

The instant messaging engine of the host application communicates via a network with one or more instant messaging services to facilitate communication between a user at a client and a contact using an instant messaging service. Similarly the social networking engine of the host application communicates with one or more social networks to facilitate communication between a user at a client and a contact using a social network service.

The fax management module of the client receives faxes at the client transmits faxes from the client displays a list of received faxes at the client and requests received faxes stored in the system database from the host application.

The fax module of the host application retrieves fax documents stored in the system and transmits the fax documents to the client for display. The fax engine of the host application facilitates the transmission of facsimile documents between a user at a client and a contact. The fax engine may transmit a fax to a traditional fax machine via a public switch telephone network PSTN or electronically via an IP based network such as the Internet.

The fax management module of the host application facilitates the storage query retrieval and transmission to the client of faxes received.

The file transfer module of the client receives a file selection from a user uploads the file to the server and provides the user with a link to the file which may then be sent to contacts and used to download the file.

The file transfer engine of the host application facilitates the transmission of files between a user at a client and a contact. The file transfer engine receives a file from a client and stores the file on the server. The file transfer engine also creates a uniform resource identifier URI e.g. a uniform resource locator URL that represents a path to the file residing on the server. The file transfer engine provides the user at the client with the identifier and the user may then transmit the identifier to a contact by text message instant message or email. A contact may use the identifier to download the file.

An example file upload process is shown in . At step a user at a client selects a contact to receive a file transfer. At step the user submits to the client a file transfer request to the selected user. The user may initiate a file transfer to a contact using any of the methods described above.

At step the file transfer module of the client sends a file upload request to the file transfer engine of the host application. The upload request may be for example an HTTP request having the following format https filetransfer.voxox.im upload step1 UNIQUE ID VOXOX ID RECIPIENT . In this example UNIQUE ID is a unique identifier generated by the file transfer module VOXOX ID is the username of the user uploading the file at the client and RECIPIENT is a URI for the recipient of the file.

The file upload request is used to display a file upload interface as shown in step for selecting a file to upload. The file upload interface may be for example an HTML based form having file selection controls. An example file selection interface is shown in . The file transfer engine of the host application may receive the file transfer request and serve the file selection form to the client. At step the user selects a file to transfer at the file selection interface.

At step the file transfer module of the client submits the file to the file transfer engine of the host application. The file transfer module may submit the file via for example an HTTP POST request having the following format https filetransfer.voxox.im upload step2 and having the following variables file uid voxox id and recipient. In this example file is the file to be transferred uid is the same unique identifier generated by the file transfer module voxox id is the username of the user uploading the file and recipient is the same URI for the recipient of the file as mentioned above.

At step the file transfer engine of the host application receives the file and saves the file on the system server. The file transfer engine may save the file with the following internal naming format FILE MD5 CHECKSUM UPLOAD TIMESTAMP . In this example the FILE MD5 CHECKSUM is the result of the MD5 hashing algorithm with the upload file as input and the UPLOAD TIMESTAMP is the time at which the file was uploaded.

In addition to saving the file on the system the file transfer engine creates a new entry in the file transfer history table of the database at step . The file transfer engine may also include the following information in the new entry a unique identifier for the new entry the username of the sender a URI for the recipient an upload timestamp the internal filename generated by the file transfer engine the actual filename of the file as uploaded and the number of times the file has been downloaded.

At step the file transfer engine generates a download link which may be used to retrieve the file. The download link may be in the following format https filetransfer.voxox.im download FILENAME USERNAME MD5 CHECKSUM . In this example the FILENAME is the internal or real filename of the uploaded file and the USERNAME MD5 CHECKSUM is the result of the MD5 hashing algorithm with the username of the user that uploaded the file as input. Following the generation of the download link the file transfer engine sends the download link to the user at the client in step and the client displays the download link to the user in step .

An example file download process is shown in . At step a user at a computing device sends a download request to the file transfer engine of the host application. The download request may be in the form of the download link as described above. At step the file transfer engine receives the download request and the file transfer engine checks that the file exists on the system server in step . If the file does not exist the file transfer engine sends an error message to the user at the computing device in step .

At step the file transfer engine determines if the number of times the file has been downloaded exceeds the maximum number of downloads allowed. The file transfer engine queries the file transfer database for the entry associated with the file indicated in the download link. The file transfer engine then extracts from the resulting entry the number of times the file has been downloaded. If the number of times the file has been actually downloaded exceeds the maximum number of allowable downloads the file transfer engine will send an error message to the user in step as mentioned above. If the number of times the file has been downloaded is less than the number of maximum allowable downloads the file transfer engine sends download information to the user at the computing device as seen in step . If the user confirms the download of the file in step the file transfer engine of the host application serves the file to the user in step and the file transfer engine will update the file transfer entry in the database at step .

A client may use a translation module at the client to translate inbound and outbound text based messages. The translation module of the client provides an interface with which the user may configure the translation module. An example translation configuration interface is shown in . A user may enable or disable the translation of both inbound and outbound messages. When translation is enabled a user may select the source text language and the target language for the inbound and outbound messages. The source text language is the language of the text to be translated and the target language is that of the resulting translated text.

The translation engine of the host application receives the translation settings from the translation module of the client and automatically translates text based messages e.g. text messages instant messages and email messages exchanged between the client and a contact. The translation engine utilizes a translator such as an Internet web service to perform the translation of the messages.

An example translation process for inbound and outbound text based messages is shown in . The translation process begins after a user has enabled the translation of inbound and outbound messages at step . In step a text based message is sent from the client which is then sent to the host application at step . In step a text based message from a contact is received at the host application. At step if translation is enabled the translation module sends a message to the translator at step . At step the translator sends the translated message to the translation module. At step the translation module sends the text based message to one of several engines. At step one of several engines sends message to contact. One of several engines may also send the message to the text based message management module of the client at step and then the message may be displayed to the user at step .

Referring again to step if translation is not enabled steps may be performed as shown and described above.

The service plan management module of the client and the host application monitor usage of the system and collect and process payment information for subscribing to usage plans or for purchasing credits which may be required to use certain features of the system. Accordingly the service plan management module may communicate with other modules of the client and with the host application to track and record credits used during operation of the system.

The service plan management module of the host includes a payment processing engine and a usage monitoring module. The payment processing engine communicates with a payment processor to facilitate the purchase of additional credits or to charge for monthly service plans. The payment processor may be a conventional online payment processing service. The usage monitoring module monitors the amount of credits consumed and purchased by a user and updates the database accordingly. The usage monitoring module may receive instructions from other modules and engines of the host application to modify the amount of available credits for a user.

The universal communication system may also be adapted as a marketing system to provide marketing opportunities for users interconnected by one or more instant messaging services. As described above the marketing system collects the login credentials for the instant messaging and social networking services to which a user belongs. The marketing system also stores the user information and characteristics which is used to match users with marketing campaigns. A marketing campaign is created and stored in the system and each marketing campaign includes marketing data that defines the scope of the campaign and the characteristics of target users. A marketing message is also created and associated with each marketing campaign. When the campaign is launched the marketing system matches users with campaigns according to the selected user criteria for the campaign. The marketing system then sends an invitation to each user to view the marketing message via the instant messaging and social networking services. Finally the social marketing system tracks the instances in which an invitee opts to view the marketing message.

An example social marketing system is shown in . A social marketing system includes an application server a database server and a delivery agent . A user at a client communicates with the application server via a network . The client may be for example a traditional computing device having the universal communication client discussed above a web based application a mobile application for a cellular phone and the like. The network may be for example an IP based network such as the Internet or mobile cellular networks.

The application server includes a social marketing engine for processing campaigns identifying matching contacts and generating campaign invitations for the contacts. The application server also maintains an invitation queue for pending invitations.

The database server includes a database for storing the user information campaign information and tracking information used by the social marketing system.

The delivery agent polls the queue for pending invitations and delivers invitations to contacts invitees over network to view marketing messages for marketing campaigns. The delivery agent may be for example a mail transfer agent MTA an instant message gateway a text message gateway or a phone system. Accordingly an invitee might receive an invitation to view a marketing message in an email an instant message a text message or a phone message.

The database of the social marketing system includes multiple tables defined by a database schema to store information relating to users social marketing campaigns and tracking information for campaigns. An example database schema is shown in .

An example database schema may include a user table for storing user account information a user characteristics table for storing the characteristics of each user a network services table for storing the instant messaging and social networking services accessible by the social marketing system a user networks table for storing the instant messaging services and social networking services to which a user belongs a networks contacts table for storing the contact information for the instant messaging contacts and social networking contacts of a user a campaign table for storing campaign information a campaign conditions table for storing the characteristics of the target users for the campaign a campaign message table for storing the marketing message for each campaign a campaign invitation method table for identifying the invitation method e.g. instant message text message email etc. for each campaign an invitation table for storing the invitations to contacts during active campaigns an invitation status table for storing the status of each invitation a tracking status table that stores information relating to viewership of the marketing message and a tracking information table for storing information relating each invitee that views the marketing message.

Creating a campaign is the first step in using the social marketing system. An example campaign creation process is shown in . At step a user inputs the campaign information into the system. Campaign information includes for example the desired delivery method e.g. email instant message text message or phone message the desired characteristics of target contacts the scope and timing of the campaign and the like. During the creation of a campaign a user also creates a marketing message associated with the campaign. As mentioned above the marketing message may be text based or audio based and presented to a contact at a landline or mobile cellular phone or at a computing device in an email instant message web page and the like.

Once a user has entered the campaign information at step the database of the social marketing system creates new entries in the campaign tables to store the campaign information and the marketing message as seen in step .

Following the creation and storage of a campaign the system may then execute the campaign to send marketing invitations to contacts. An example campaign execution process is shown in .

In step the social marketing engine queries the database for campaigns to execute. For each campaign to execute in step the social networking engine queries the database for contacts matching the conditions set up stored for the campaign as shown in step . Matching criteria may include for example personal information e.g. name address age sex interests and the like relevance of the subject matter of the marketing message to contact profile information permission of contacts to receive marketing invitations and other metrics. As seen in step user may also selectively remove contacts from the list of matching contacts to prevent those contacts from receiving an invitation. At step the process determines if there are more users at step . If there are no more users the process proceeds back to step . If there are more users at step step is executed until frequency conditions are not met.

For each contact in the result set of matching contacts the social marketing engine will determine as seen in step if the campaign frequency conditions are met. Frequency conditions refer to the numbers of times a campaign invitation will be delivered to a contact. Frequency conditions may also refer to the number of times the social networking engine will reattempt the invitation in the case of a failed delivery.

If the frequency conditions have not been met the social marketing engine will create a new invitation for the contact and store the invitation in the invitation queue at step .

Following the creation of a campaign and the addition of invitations to the invitation queue the invitations may be delivered to the contacts. An example invitation delivery process is shown in . At step the delivery agent queries the application server for pending invitations in the invitation queue. At step the application server queries the database for invitations that have not been delivered. For example the application server may query the database for invitations having a status of NOT SENT. 

If no pending invitations remain step is executed. If pending invitations remain at step the delivery agent then retrieves a pending invitation from the result set as shown in step and determines in step whether the invitation has exceeded the maximum number of delivery attempts. If the delivery attempts for the invitation exceed the maximum allowable delivery attempts the delivery agent submits an update request to the application server in step . Then in step the application server updates the invitation entry in the database setting the status of the invitation to for example FAILED. 

However if the number of delivery attempts is below the maximum the delivery agent in step sends an update request to the application server to update the status of the invitation. The application server may then in step update the invitation entry in the database and set the status of the invitation as for example IN PROGRESS. Next in step the delivery agent sends the invitation to the contact according to the defined delivery method. For example if the delivery agent is an email server the agent sends an email to the contact at the email address associated with the contact in the database. Alternatively if the delivery agent is an instant message gateway the agent sends an instant message to the contact using for example XMPP as mentioned above at the screenname associated with the contact in the database.

Following a successful delivery of an invitation the delivery agent may send an update request to the application server as seen in step to update the invitation entry in the database. Upon receipt of the update request in step the application server may update the invitation entry in the database and set the status of the invitation to for example DELIVERED. 

The social marketing system may also be designed to track how many contacts accept the marketing invitation and view the marketing message. An example tracking process is shown in . At step an invitee accepts the invitation delivered by the delivery agent. As mentioned above invitations may be in the form of an HTTP URL that the invitee may click to view the marketing message in a web page. Accordingly clicking the invitation link may send a request to the application server to view the marketing message for the campaign as shown in step . In this example the URL may also include encrypted information for tracking when an invitee clicks on the invitation link such as the name of the campaign and the name of the invitee.

Upon receipt of a request to view a marketing message the social networking engine validates the encrypted information as seen in step . If the encrypted information is invalid the social networking engine will ignore the request to view the marketing message at step . However if the encrypted information is valid the social networking engine in step updates the database and creates new entries in the click tracker table and the click tracker information table to store tracking information relating to the request.

If the database update is successful in step the social networking engine forwards the invitee to the marketing message as in step . For example the social networking engine may forward the invitee to a web page containing the marketing message as in step . However if the database update was unsuccessful the social networking engine will send an error message to the user as shown in step .

The invention illustratively disclosed herein suitably may be practiced in the absence of any element part step component or ingredient which is not specifically disclosed herein.

While in the foregoing detailed description this invention has been described in relation to certain preferred embodiments thereof and many details have been set forth for purposes of illustration it will be apparent to those skilled in the art that the invention is susceptible to additional embodiments and that a certain of the details described herein can be varied considerably without departing from the basic principles of the invention.

