---

title: Data validation
abstract: Systems, methods, apparatuses, and computer readable media are disclosed for receiving a validation request from a requestor, executing one or more validation routines for at least a portion of data included in the validation request, generating a validation response based on the execution of the one or more validation routines, and communicating the validation response to the requestor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09460077&OS=09460077&RS=09460077
owner: McKesson Corporation
number: 09460077
owner_city: San Francisco
owner_country: US
publication_date: 20120629
---
This disclosure relates generally to data validation and data sanitization and more particularly to network based data validation and data sanitization.

Data validation generally refers to a process for ensuring that a computer program operates on sanitized accurate and meaningful data. Data validation techniques generally employ routines also known as validation rules or check routines that perform checks on input data to ensure its accuracy and meaningfulness.

Data validation is a critical component of information security generally and is particularly relevant to the field of network security. Various applications such as web applications for example provide functionality for accepting and processing user input data. Web forms may be provided as part of a web application and have become a common mechanism for submitting and receiving input data via public or private networks. Various forms of malicious attack such as cross site scripting XSS and Structured Query Language SQL injection attacks for example take advantage of a web application s laxity in checking the input values that are passed to the web application.

XSS refers to a vulnerability typically found in web applications that allows attackers to bypass client side security mechanisms normally imposed on web content by web browsers and inject malicious scripts into web pages that allow the attacker to gain elevated access privileges to sensitive page content session cookies and a variety of other information. SQL injection is a form of malicious attack often used to attack a database through a website and involves including portions of SQL statements in a web form entry field to cause the website to pass a rogue SQL command to the database to produce malicious effects e.g. modifying or erasing database contents dumping database contents to the attacker etc. .

If mechanisms for validating and sanitizing input data are not in place these types of malicious data attacks may have a devastating impact on the security of data and the systems that store and operate on that data. However although data validation is critical to ensuring the accuracy of data and for protecting against malicious data attacks it is often inconsistently built into web applications. Moreover even if data validation logic is directly coded into applications new patterns of attack require individual updates to each application s code a cumbersome and time consuming process prone to error.

Scripting languages that operate on a web user s device allow for the dynamic creation and modification of a web page within a web browser running on the user s device and may on occasion perform limited pre validation of web form data. However data validation performed by client side scripting languages suffers from the same drawbacks associated with built in web application validation logic that is inconsistent use and the need to individually update code on each user s device to protect against new patterns of attack.

Application Firewalls AFs are firewalls that control input output and or access from to or by an application or service. Network based application layer firewalls are computer networking firewalls that operate at the application layer. While some network based firewalls may be capable of performing input data validation such firewalls are not integrated into client applications and must be individually configured for each application for which they provide data validation and sanitization services. As such network based application layer firewalls do not address the disadvantages noted above with respect to other data validation mechanisms.

One or more embodiments of the disclosure relate to systems methods apparatuses and computer readable media for receiving a validation request from a requestor executing one or more validation routines on at least a portion of data included in the validation request generating a validation response based on the execution of the one or more validation routines and communicating the validation response to the requestor.

In an embodiment of the disclosure a method comprises receiving by a data validation system comprising one or more computers a validation request from a requestor wherein the validation request comprises a data set and wherein the data set comprises one or more asserted data types and one or more data strings executing by the data validation system one or more validation routines to determine a validity of each data string based at least in part on at least one corresponding asserted data type of the one or more asserted data types generating by the data validation system a validation response based on the execution of the one or more validation routines and communicating by the data validation system the validation response to the requestor.

In another embodiment of the disclosure a data validation system comprises one or more computers each computer comprising one or more processors and at least one memory operatively coupled to the one or more processors and a validation module stored in the at least one memory of at least one of the one or more computers. The validation module comprises one or more computer executable instructions that upon execution by at least one processor of the one or more processors configures the at least one processor to receive a validation request from a requestor wherein the validation request comprises a data set and wherein the data set comprises one or more asserted data types and one or more data strings execute one or more validation routines to determine a validity of each data string based at least in part on at least one corresponding asserted data type of the one or more asserted data types generate a validation response based on the execution of the one or more validation routines and communicate the validation response to the requestor.

In another embodiment of the disclosure a computer readable medium comprises computer executable instructions that upon execution by one or more computer processors causes a method to be performed. The method comprises receiving a validation request from a requestor wherein the validation request comprises a data set and wherein the data set comprises one or more asserted data types and one or more data strings executing one or more validation routines to determine a validity of each data string based at least in part on at least one corresponding asserted data type of the one or more data types generating a validation response based on the execution of the one or more validation routines and communicating the validation response to the requestor.

These and other embodiments of the disclosure are described in more detail in the detailed description that follows.

Embodiments of the disclosure relate to systems methods apparatuses and computer readable media for performing data validation. One or more specific embodiments of the disclosure relate to systems methods apparatuses and computer readable media for receiving a validation request from a requestor executing one or more validation routines on at least a portion of data included in the validation request generating a validation response based on the execution of the one or more validation routines and communicating the validation response to the requestor.

Embodiments of the disclosure are described more fully hereinafter through reference to the accompanying drawings in which certain embodiments of the disclosure are shown. This disclosure may however be embodied in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that the scope of the disclosure is conveyed to those skilled in the art. Like numbers refer to like elements throughout.

Example embodiments of the disclosure will now be described with reference to the accompanying figures.

Referring to one or more server devices one or more client devices and one or more user devices N may be provided. The server device s the client device s and the user device s N may be configured to communicate via one or more networks . The network s may be any combination of one or more public or private wired and or wireless networks including but not limited to the World Wide Web WWW the Internet an intranet an internet a wide area network WAN a metropolitan area network MAN a local area network LAN a personal area network PAN a mesh network a cellular wireless network including wireless 3G networks or wireless 4G networks and so forth.

Each server device may include one or more processors and at least one memory operatively coupled to the one or more processors . Each server device may be any device capable of providing services to a requesting device e.g. client device s through the network s . As a non limiting example at least one server device may be a web server capable of providing at least in part one or more services over the network s to the client device s for example. An operating system OS a database management system DBMS data which may be any data capable of being accessed and or manipulated by the one or more processors and a validation module may be loaded among other components into the at least one memory . Each server device may further comprise one or more input output I O interfaces and one or more network interface s . It should be noted that the foregoing is not an exhaustive list of components of each server device and that one or more of the server device s may comprise any number of additional hardware and or software components. Further in one or more embodiments certain components depicted in as being part of the server device s may not be present.

The server device s may form at least part of a data validation system in accordance with one or more embodiments of the disclosure. As will be described in more detail hereinafter the server device s may receive one or more validation requests via the network s from the client device s for example. The server device s may be configured to execute one or more validation routines on at least a portion of data included in each of the validation request s in order to generate validation response s which may in turn be communicated to the requesting client device s via the network s . The server device s may access and retrieve data from one or more datastores as part of the execution of the validation routine s . The datastore s may also form at least part of a data validation system according to one or more embodiments of the disclosure and may include without limitation any data repository such as database s organized according to any database model operational datastore s schema less datastore s paper files data files e.g. spread sheets flat files etc. and so forth.

Each client device may comprise one or more processors and at least one memory operatively coupled to the one or more processors . An operating system OS a database management system DBMS data which may be any data capable of being manipulated by the one or more processors and one or more applications may be loaded or stored among other components in the at least one memory . Each client device may further comprise one or more I O interfaces and one or more network interfaces . It should be noted that the foregoing is not an exhaustive list of components of each client device and that one or more of the client devices may comprise any number of additional hardware and or software components. Further in certain embodiments one or more of the components depicted in as being part of the client device s may not be present. For example the client device s may not include a DBMS in certain embodiments.

The terms client device and server device may be used in the context of this disclosure to convey that the server device s provide services requested by the client device s . However in accordance with one or more embodiments of the disclosure the client device s may request and perform services for other client device s and thus any particular client device may at times take on server related functionality with respect to other client device s . Similarly the server device s may request and perform services for other server device s and thus any particular server device may at times take on client related functionality.

The one or more processors and or the one or more processors may include without limitation a central processing unit CPU an integrated circuit an Application Specific Integrated Circuit ASIC a reduced instruction set computer RISC a complex instruction set computer CISC a microprocessor a microcontroller a field programmable gate array FPGA or any combination thereof.

The at least one memory and or the at least one memory may comprise one or more volatile and or non volatile memory devices including but not limited to magnetic storage devices random access memory RAM dynamic RAM DRAM static RAM SRAM synchronous dynamic RAM SDRAM double data rate DDR SDRAM DDR SDRAM RAM BUS DRAM RDRAM flash memory devices electrically erasable programmable read only memory EEPROM non volatile RAM NVRAM magnetoresistive random access memory MRAM universal serial bus USB removable memory or combinations thereof. The at least one memory and or the at least one memory may further include any form of memory technology for storing information that may be developed in the future.

The OS and or the OS may be any operating system presently known in the art or which may be developed in the future including but not limited to a Microsoft Windows operating system an Apple OSX operating system Linux Unix a mainframe operating system such as Z OS or a mobile operating system including but not limited to any version of Apple iOS any Android based operating system any version of the Palm webOS operating system any version of the Windows Mobile operating system any version of the Windows Phone operating system any version of Blackberry OS any version of Windows operating system any version of Nokia s Symbian operating system any version of Nokia s Maemo operating system any version of MeeGo a Linux based operating system or any version of Samsung s bada operating system.

The DBMS and or the DBMS may be any database or datastore management system known in the art or which may be developed in the future for creating maintaining and using databases and or datastores. The DBMS and or the DBMS may use any database model including but not limited to a hierarchical model a network model a relational model a multidimensional model or an object oriented model and may support any query languages now known in the art or which may be developed in the future.

The one or more user devices N may include any general purpose computing device including but not limited to a personal desktop computer a workstation a laptop a netbook an ultrabook a tablet personal computer PC a tablet device a smartphone device or any other desktop or mobile wireless device now known in the art or which may be developed in the future. The one or more user devices N may comprise any number of hardware and or software components including any of the components described above with respect to the server device s and or the client device s .

The one or more applications loaded or stored at least in part in the at least one memory of a client device may include for example one or more web based applications. As used herein a web based application may refer generally to an application that is accessed over a network or more specifically to an application that may be coded in a browser supported language and or a browser rendered language and which may require a web browser or other program to render the application executable.

The web based application s may include web page s that include web form s that comprise one or more data fields for inputting data. The user device s N may be configured to run one or more web browser applications for loading viewing and manipulating web page s which form at least part of the web based application s . More specifically a client device may transmit one or more web pages of a web based application via network s to at least one of the user devices N . A web browser running on the at least one user device may be configured to process and render the web page s of the web based application . In one or more embodiments of the disclosure at least one of the user devices N may be a mobile device such as a smartphone or tablet device. The mobile device may include applications that are capable of accepting input data from a user of the device. As used herein the term web form may encompass mobile device applications capable of accepting input data.

While embodiments of the disclosure may be described herein in the context of validation of data that is inputted to web form s provided on one or more web pages of a web based application the disclosure is not limited to these scenarios. Embodiments of the disclosure encompass network based validation of any input data regardless of the mechanism by which the data is received. As such while the application s may in certain embodiments represent web application s and the client device s and or server device s may in certain embodiments represent web server s embodiments of the disclosure include any type of server device and client device and any type of application that provides functionality for accepting input data.

In accordance with one or more embodiments of the disclosure each of the data field s provided in a web form may have one or more data types associated therewith that specify type s of input accepted for that field. Exemplary data types include but are not limited to a floating point data type an integer data type a Boolean data type an alphanumeric character an American Standard Code for Information Interchange ASCII character a character string e.g. a sequence of alphanumeric characters a sequence of ASCII characters etc. enumerated types derived data types such as for example lists arrays trees and so forth or any combinations thereof. Exemplary data types further include but are not limited to data types supported in Hypertext Markup Language HTML forms other defined data types such as a telephone number street address a Vehicle Identification Number VIN an automobile make and model a quantity of currency e.g. a price of a purchase item or any other datum description with clearly defined bounds that permits a determination as to whether a particular datum belongs to a set defined by that datum description.

The data type s associated with a particular data field in a web form may dictate type s of input accepted for that field. As a non limiting example acceptable inputs for an address field may include an alphanumeric character string or a string of ASCII characters with the exception of certain prohibited characters e.g. and so forth . As another non limiting example an acceptable input for a telephone number data field may include a string of characters of a predetermined length. More specifically character strings of a predetermined length that include only integers may be accepted while in other embodiments certain additional ASCII character s e.g. the ASCII character 5F representing a may be accepted as well. In still other embodiments a particular data type may define a permissible sequence of characters in addition to a permissible character set. For example a data type definition for a telephone number may in addition to defining a set of permissible character inputs also specify a permissible sequence of characters e.g. only specific sequences of characters may be accepted for the area code portion of the number .

The server device s may each further comprise the validation module which in turn may comprise a validation response generation module . Other components of the server device s are not shown in for the sake of simplicity. If multiple server devices are provided the validation module of each server device may independently execute one or more validation routines on data included in separate validation requests. In alternative embodiments of the disclosure the validation modules of multiple server devices may each execute one or more validation routines on portions of data included in a same validation request.

Client devices N may each correspond to the client device depicted in . The client devices N may comprise memories N respectively. Client applications N may be loaded or stored at least in part in the memories N respectively. The client applications N and the memories N may each correspond to the client application and the at least one memory respectively. The client applications N may comprise validation request generation modules N respectively. Each of the validation request generation modules N may be capable of generating one or more respective corresponding validation requests N . Although the client applications N are depicted in as being associated with a respective corresponding client devices N it should be noted that in various embodiments of the disclosure one or more of the client applications N may be distributed applications such that more than one of the client devices N are configured to execute portions of the distributed client applications. In those embodiments of the disclosure in which one or more of the client applications N are distributed applications the respective corresponding validation request generation modules N may similarly be distributed across more than one of the client devices N .

According to one or more embodiments of the disclosure the validation module s and or the validation response generation module s of the server device s may comprise computer executable instructions capable of being executed by the one or more processors to perform one or more validation routines and to generate one or more validation responses based on the execution of the validation routine s respectively. More specifically the server device s may be configured to access and retrieve validation routine s stored in the validation routine s datastore using the DBMS . The one or more processors may be configured to execute the validation routine s using the validation module .

While the validation response generation module is depicted as a sub module of the validation module in one or more alternative embodiments the validation response generation module may be provided independently of the validation module . Similarly while the validation request generation modules N are depicted as sub modules of the respective corresponding client applications N in one or more alternative embodiments of the disclosure the validation request generation modules N may be provided as part of the respective corresponding client devices N independently of the client applications N e.g. within respective corresponding memories N but independently of client applications N . Further in one or more embodiments of the disclosure the validation response generation module may not be present as a separate module or sub module of the validation module and functionality described as being provided by the validation response generation module may be provided by the validation module generally. Similarly in one or more embodiments of the disclosure the validation request generation modules N may not be present as separate modules of the client applications N and functionality described as being provided by the validation request generation modules N may be provided by the client applications N generally.

Any of the validation request s N may be an Extensible Markup Language XML formatted transaction. In other embodiments of the disclosure the validation request s N may be formatted using any appropriate markup language now known in the art or which may be developed in the future including but not limited to eXtensible HyperText Markup Language XHTML Hypertext Markup Language HTML Scribe Standard Generalized Markup Language SGML or the like. In still further embodiments the validation request s N may be generated and formatted using various forms of data encoding.

In one or more embodiments of the disclosure the server device s and or the datastores may form at least part of a web service for executing validation routine s on data included in the validation request s N received from the client device s N and for generating validation response s N thereto which may be communicated to the requesting client device s N . The server device s may be exposed to the client device s N or more particularly the client application s N running on the client device s N via standard interfaces including but not limited to Simple Object Access Protocol SOAP Representational state transfer REST architectures and so forth. The validation request s N may be encrypted to prevent unauthorized capture and manipulation of data included therein and capabilities of the client device s N and or the server device s may be leveraged to provide the encryption functionality. As a non limiting example the validation request s N may be transmitted from the client device s N to the server device s using Hypertext Transfer Protocol Secure HTTPS which is a combination of HTTP and Secure Sockets Layer SSL or Transport Layer Security TLS protocols and which provides for encrypted communication between networked components.

The validation services provided by the server device s in connection with the datastore s e.g. datastores may be implemented for example using any network based technology and may be based on any delivery model employing such technologies including but not limited to a shared service for a variety of application s a site based or subscription based service to support deployment of such application s a private or public cloud based service a back end Software as a service SaaS delivery model or the like.

Referring to at block a connection may be established between the client device and the server device s via the network s . The client device may initiate the connection with the server device s if the client device requires data validation services provided by the server device s . Upon establishment of the connection between the client device and the server device s the client device may be configured to transmit and the server device s configured to receive via the network s one or more validation requests .

The connection established between the client device and the server device s may take on any of a variety of operational modes including but not limited to a transaction based mode according to which the client device or a particular client application running on the client device establishes a new connection with the server device s prior to transmitting each validation request or a continuously connected mode according to which the client device submits multiple validation requests to the server device s over an established and continuously maintained connection.

A representative validation request according to one or more embodiments of the disclosure is depicted in . Any of the validation requests N may correspond to the validation request . The validation request may comprise one or more data sets N . The following description is presented through reference to the data set however the description is equally applicable to any of the data sets N .

The data set may comprise one or more data types one or more input strings one or more data type parameters and or one or more validation directives . The one or more data types may be any data type s including but not limited to a floating point data type an integer data type a Boolean data type an alphanumeric character an American Standard Code for Information Interchange ASCII character a character string e.g. a sequence of alphanumeric characters a sequence of ASCII characters etc. enumerated types derived data types such as for example lists arrays trees and so forth or any combinations thereof. The one or more data type s may further include but are not limited to data types supported in Hypertext Markup Language HTML forms other defined data types such as a telephone number street address a Vehicle Identification Number VIN an automobile make and model a quantity of currency e.g. a price of a purchase item or any other datum description with clearly defined bounds that permits a determination as to whether a particular datum belongs to a set defined by that datum description.

The one or more input strings may comprise any sequence of one or more characters. The one or more input strings may be provided as input by a user of a user device e.g. any of the user devices N to one or more fields in a web form that forms part of the client application which may be a web application. However embodiments of the disclosure are not limited to data input to web forms of web applications and the input string s may be provided as input via any mechanism for receiving the input.

Each data type may be a data type designated by the client application as corresponding to a data field for which at least one of the one or more input strings is received as input. The server device s may be configured to utilize the validation module to determine whether each input string conforms to the data type s corresponding thereto or in other words whether each input string is valid based on each data type asserted by the client application as corresponding thereto. In accordance with embodiments of the disclosure any number of the input string s may correspond to any number of the data type s . For example each input string may be validated against multiple data types . Similarly multiple input strings may correspond to a single data type and may be validated against that data type. The data types N may also be referred to herein as asserted data types. 

The data set may further comprise one or more data type parameters that may specify various criteria that the one or more input strings should satisfy based on the one or more asserted data types . Exemplary criteria include but are not limited to a size limitation that each input string is required to conform to one or more encoding parameters or one or more encryption parameters. The encoding parameter s may specify any of a variety of encoding schemes and or character sets known to one of ordinary skill in the art or which may be developed in the future. For example an encoding parameter may specify Universal Character Set UCS Transformation Format 8 bit UTF 8 as a character set for Hypertext Markup Language Uniform Resource Location HTTP URL encoding in which certain characters are represented by substitute characters e.g. gt to represent . The encoding parameter s may optionally specify any other common or arbitrary encoding scheme that may be represented as a data type parameter. The encryption parameter s may be specified in association with the encoding parameter s or independently thereof. The data type parameter s field may optionally specify any number of parameters relating to the data type s that may be utilized by the validation routine s during validation of the input string s against corresponding data type s .

The data set may further comprise one or more validation directives that specify content requirements for the validation response e.g. validation response that is generated by the server device s upon execution of the one or more validation routines for the one or more input strings . The validation directive s may specify particular content to be included in the validation response and may include but are not limited to one or more Boolean values indicating result s of the execution of the validation routine s for the input string s e.g. binary value s indicating whether the input string s are valid or invalid based on corresponding asserted data type s at least one sanitized data string generated based on the result s of the execution of the validation routine s e.g. at least one data string representing a modified version of at least one of the input string s that conforms to the corresponding asserted data type s a data structure comprising one or more characters of one or more of the input string s determined to be invalid by execution of the validation routine s one or more codes that identify one or more reasons that one or more of the input string s were determined to be invalid by execution of the validation routine s or one or more recommendations for altering at least one data string to form at least one new data string that conforms to corresponding asserted data type s of the one or more data types . Any number of validation directive s may be provided in the data set for specifying requirements to which the validation response must adhere.

At block of the process flow depicted in the one or more processors of the server device s may be configured to determine the one or more asserted data types in the data set . In one or more embodiments the processor s may execute one or more computer program instructions forming at least part of the validation module s to determine the asserted data type s . The processor s may be configured to determine a respective key associated with each of the asserted data type s .

Upon determining the asserted data type s e.g. identifying a respective key associated with each asserted data type the processor s may be configured to execute computer executable instructions which may form part of the validation module s to control the DBMS s to access the data type s datastore to determine whether the asserted data type s are stored in the datastore . The data type s datastore may comprise one or more stored data types. The stored data type s may include data type s supported by standard web forms. The validation routine s datastore may comprise one or more stored validation routines. Each validation routine stored in the datastore may be associated with one or more of the data types stored in the datastore or vice versa. In one or more embodiments the data type s and the validation routine s may be stored in separate logical or physical datastores and may be linked or otherwise associated. In other embodiments the data type s and validation routine s may be stored together in a same set of one or more datastores.

For each asserted data type that corresponds to a data type stored in the datastore corresponding validation routine s may be retrieved at block . At block the processor s may execute computer executable instructions which may form at least part of the validation module s to perform the retrieved validation routine s on each of the input string s that correspond to the asserted data type. Each validation routine may according to one or more embodiments of the disclosure comprise computer executable instructions that may be executed by the processor s using the validation module s . For example in one or more specific embodiments of the disclosure the validation module s may comprise logic that makes a functional call for executing the validation routine s .

Although the process flow of has been described with respect to the data set it should be understood that any of the validation requests N may comprise one or more additional data sets N which may in turn comprise one or more respective data types N one or more input strings N one or more data type parameters N and one or more validation directives N respectively. The validation module s of the server device s may comprise computer executable instructions that upon execution by the processor s causes corresponding validation routine s to be performed on each of the input string s N with respect to corresponding asserted data types N either serially or in parallel or in any combination thereof.

According to one or more alternative embodiments of the disclosure the client application s may pre register one or more web forms with the server device s . The pre registered web form s may be stored for example in the datastore . A pre registered web form may identify a respective one or more data types corresponding to each of one or more data fields in a web form. If a particular client application has pre registered a particular web form with the server device s any validation request that includes input data from the pre registered web form may not include the asserted data type s e.g. N as the data type s may already be identified in the pre registered web form. Further any validation request that includes input data from a pre registered web form may not include the data type parameter s and or the validation directive s e.g. N and N respectively as these may be specified in the pre registered web form as well. The one or more input strings e.g. N included in any such validation request may be formatted or otherwise organized in such a manner so as to allow the server device s to identify from the corresponding pre registered web form the data type s to which each of the one or more input strings N is required to conform as well as the respective corresponding data type parameter s N and the respective corresponding directive s N .

One or more validation routines may be stored in association with the pre registered web form. For example the pre registered web form may comprise a means for associating the validation routine s with the respective corresponding data type s of the pre registered form. In one or more alternative embodiments a pre registered form stored for example in the datastore may utilize or leverage stored data type s and corresponding validation routine s that are known to the server device s such as for example data type s and or validation routine s respectively stored in the datastores and .

According to one or more alternative embodiments of the disclosure none of the data type s N included in the validation request may correspond to a data type stored in the datastore . In certain embodiments in which pre registration of client application s and or associated web forms are required an error or warning message indicating that the requested data type is not supported may be returned. In other embodiments functionality for performing dynamic registration or dynamic ad hoc validation may be provided such that the client application may specify in association with the validation request s N the appropriate validation routine s to be applied by the validation module s . For example the validation directive s N included in the data set s N may specify the validation routines to be applied. Validation routine information may be specified in any number of ways for new data types that do not correspond to any stored data types. For example one or more pointers or lookup keys may be provided within the validation request that point to or otherwise direct the validation module to one or more existing validation routines stored for example in the datastore to be executed with respect to the new data types. Alternatively the validation request may include as part of the validation directives for example a script program function or code fragment for performing the validation routine s . Still further any other mechanisms for dynamically registering the new data type or for processing the request on an ad hoc basis without registering the new data type may be employed.

Referring again to in the context of the representative data set and the representative interaction between the client device and the server device s upon completion of the execution of the validation routine s the processor s may be configured to utilize the validation response generation module s to generate the validation response at block . The validation response may be generated only upon completion of the execution of the validation routine s or in other embodiments portions of the validation response may be generated concurrently with execution of the validation routine s . Content included in the validation response may be based for example on the validation directive s included in the data set . For example the validation response may include Boolean true values for those input string s determined to conform to corresponding data types thereby indicating validity of those input strings. Similarly the validation response may include Boolean false values for those input string s determined not to conform to corresponding data types thereby indicating invalidity of those non conforming input string s . Further as previously noted for one or more non conforming input string s the validation response may include sanitized data string s representing modified version s of the non conforming input string s that conform to the corresponding data type s . The validation response may further include a data structure comprising one or more non conforming characters of at least one non conforming input string one or more codes that identify one or more reasons that one or more input strings are determined to be invalid or non conforming or one or more recommendations for altering one or more non conforming input strings to form one or more conforming data strings that conform to corresponding data type s .

The validation request received from the client device may comprise an identifier . The validation response may comprise a same identifier that associates the validation response with the corresponding validation request . In this manner a validation request may be tracked and the appropriate validation response may be associated therewith. At block the validation response may be communicated or otherwise transmitted to the client device or more specifically the requesting client application via a same connection over which the validation request is received or via any other available transport including a new connection or a previously established response channel.

According to one or more embodiments of the disclosure the data type s datastore and or the validation routine s datastore may be dynamically updated to include additional data type s and or corresponding validation routine s . The datastores may be updated without requiring re installation or re deployment of the validation services provided by the server device s such as for example through the use of a software patch a software download a software update or the like.

In other embodiments registration of new data types and or new validation routines and or updating of existing data types and or existing validation routines may occur by registration of new client applications that define new data types via a suitable automated or manual registration routine by dynamic data type and validation routine registration as described earlier or by any other reasonable method of populating the necessary registration data including derivation or subsetting supersetting of existing information within the datastores and or any combination of the foregoing. However as previously noted in alternative embodiments data validation may be performed on an ad hoc basis based at least in part for example on validation directive s N specified in the validation request .

Embodiments may be provided as a computer program product including a non transitory machine readable or computer readable storage medium having stored thereon machine executable or computer executable instructions in compressed or uncompressed form that may be used to program a computer or other electronic device to perform processes or methods described herein. The machine may include any suitable processing or computing platform device or system and may be implemented using any suitable combination of hardware and or software. The instructions may include any suitable type of code and may be implemented using any suitable programming language. In certain embodiments machine executable instructions for performing the methods and or operations described herein may be embodied in software embodied in any of one or more higher level programming languages capable of being compiled or interpreted microcode or firmware.

The machine readable or computer readable storage medium may include but is not limited to hard drives floppy diskettes optical disks CD ROMs DVDs read only memories ROMs random access memories RAMs EPROMs EEPROMs flash memory magnetic or optical cards solid state memory devices or other types of media machine readable medium suitable for storing electronic instructions.

Further embodiments may also be provided as a computer program product including a transitory machine readable signal in compressed or uncompressed form . Examples of machine readable signals whether modulated using a carrier or not include but are not limited to signals that a computer system or machine hosting or running a computer program can be configured to access including signals downloaded through the Internet or other networks. For example the distribution of software may be an Internet download.

Various features aspects and embodiments have been described herein. The features aspects and embodiments are susceptible to combination with one another as well as to variation and modification as will be understood by those having skill in the art. The present disclosure should therefore be considered to encompass such combinations variations and modifications.

The terms and expressions which have been employed herein are used as terms of description and not of limitation. In the use of such terms and expressions there is no intention of excluding any equivalents of the features shown and described or portions thereof and it is recognized that various modifications are possible within the scope of the claims. Other modifications variations and alternatives are also possible. Accordingly the claims are intended to cover all such equivalents.

While certain embodiments of the disclosure have been described in connection with what is presently considered to be the most practical and various embodiments it is to be understood that the disclosure is not to be limited to the disclosed embodiments but on the contrary is intended to cover various modifications and equivalent arrangements included within the scope of the claims. Although specific terms are employed herein they are used in a generic and descriptive sense only and not for purposes of limitation.

This written description uses examples to disclose certain embodiments of the disclosure including the best mode and also to enable any person skilled in the art to practice certain embodiments of the disclosure including making and using any devices or systems and performing any incorporated methods. The patentable scope of certain embodiments of the disclosure is defined in the claims and may include other examples that occur to those skilled in the art. Such other examples are intended to be within the scope of the claims if they have structural elements that do not differ from the literal language of the claims or if they include equivalent structural elements with insubstantial differences from the literal language of the claims.

