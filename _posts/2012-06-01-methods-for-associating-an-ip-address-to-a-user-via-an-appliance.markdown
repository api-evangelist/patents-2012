---

title: Methods for associating an IP address to a user via an appliance
abstract: The present disclosure describes methods and systems for efficiently assigning, managing and querying virtual private network (VPN) addresses intranet IP (IIP) addresses of users, such as SSL VPN users on an enterprise network. The disclosure describes techniques and policies for assigning previously-assigned VPN addresses of a user to subsequent sessions of the user as the user logs in multiple times or roams between access points. The disclosure also describes a configurable user domain naming policy so that one can query the VPN address of a user by an easily referable host name identifying the user. The appliance and/or client agent provides techniques for applications to seamlessly and transparently communicate on the VPN using the VPN address of the user or client on the private network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09154328&OS=09154328&RS=09154328
owner: CITRIX SYSTEMS, INC.
number: 09154328
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20120601
---
The present application is a continuation of and claims priority to U.S. patent application Ser. No. 11 465 958 entitled METHODS FOR ASSOCIATING AN IP ADDRESS TO A USER VIA AN APPLIANCE filed Aug. 21 2006 which is incorporated herein by reference in its entirety for all purposes.

The present invention generally relates to data communication networks and in particular to systems and methods for assigning managing and providing Intranet Internet Protocol addresses for SSL VPN users.

A typical computer system uses a single internet protocol IP address assigned to the computer system. Any user session or program on the computer will use the IP address of the computer for network communications on a TCP IP network. Communications over the network to and from the computer for example between a client and a server use the computer s IP address as part of the network communications of the computer. In a virtual private network environment a remote user may establish a virtual private network connection from a client to a second network such as via an SSL VPN connection from a client on a public network to a server on a private network. On the second network a second IP address is used for communications between the client and the server.

A user of the virtual private network may log in via the same computing device or roam between computing devices. For each login session a different second IP address may be used for virtual private network communications. Also for each computing device of the user a different second IP address may be used for virtual private network communications. As such the user and or computing device of the user may be associated with different IP addresses on the virtual private network at various times. In some cases the user may have multiple virtual private network sessions concurrently and thus multiple IP addresses on the private network. Identifying tracking or managing the virtual private network addresses of remote users is challenging and may be compounded in an environment with a multitude of remote virtual private network users. Thus it is desirable to provide systems and methods to more efficiently manage and assign IP addresses for users of a virtual private network. It is also desirable to provide systems and methods to identify the virtual private network address assigned to a user of a virtual private network.

In one case an application is designed and constructed to operate using the local internet protocol address of the client. When the user is connected via a virtual private network connection to a second network the application may have issues communicating over the connection to the private network. For instance the application may only be aware of the IP address assigned to the computer. Since it is not aware of any of the second IP addresses associated with the user or computer on the virtual private network the application may not be able to communicate over the virtual private network connection. Thus it is desirable to provide systems and methods to allow an application to communicate over the virtual private network connection using virtual private network IP addresses.

The intranet IP address management solution of the appliance and or client agent of the present invention described herein provides an environment for efficiently assigning managing and querying virtual private network addresses referred to as intranet IP IIP addresses of virtual private network users such as a multitude of SSL VPN users on an enterprise network. The appliance provides techniques and policies for assigning previously assigned virtual private network addresses of a user to subsequent sessions of the user as the user logs in multiple times or roams between access points. This technique is referred to IIP stickiness as the appliance attempts to provide the same IIP address to a roaming VPN user. The appliance also provides a configurable user domain naming policy so that one can ping or query the virtual private network address of a user by an easily referenceable host name identifying the user. The appliance and or client agent also provide techniques to allow applications to seamlessly and transparently communicate on the virtual private network using the virtual private network address of the user or client on the private network.

In one aspect the present invention relates to a method for assigning by an appliance one of a plurality of multiple intranet internet protocol addresses of a network to a user when the user accesses the network via a secure socket layer virtual private network connection SSL VPN . The method includes the steps of designating via an appliance a plurality of intranet internet protocol addresses of a first network to a user accessing the first network via a SSL VPN connection the appliance providing SSL VPN connectivity between the first network and a client on a second network and receiving by the appliance a request from the client operated by the user to establish a SSL VPN connection with the first network. In one embodiment the appliance identifies the user via a login request to the appliance. In response to the request the appliance assigns to the client as an internet protocol address on the first network a first intranet internet protocol address of the first user from the plurality of intranet internet protocol addresses the first intranet internet protocol address previously assigned to the first user.

In one embodiment the method includes determining by the appliance the first intranet internet protocol address to assign to the user based on a policy. In some embodiments the policy indicates to assign to the user a most recently used intranet internet protocol address of the user. In another embodiment the method includes determining by the appliance a most recently used intranet internet protocol address of the user for the first intranet internet protocol address. In some embodiments the method includes assigning to a second client of the user establishing a SSL VPN connection with the first network a next most recently used intranet internet protocol address of the user. In one embodiment the appliance determines an inactive intranet internet protocol address from the plurality of multiple intranet internet protocol addresses as the first intranet internet protocol address.

In yet another embodiment the method includes determining by the appliance the plurality of intranet internet protocol address of the user is active. In response to the determination the appliance requests the user to transfer to a virtual private network connection of the user assigned an active intranet internet protocol address. In some embodiments the appliance determines the plurality of intranet internet protocol address of the user is active and in response to the determination provides a mapped internet protocol address to the client.

In one embodiment the method includes hosting by the appliance the first intranet protocol address of the client on the first network. In another embodiment an agent on the client establishes the virtual private network connection via the appliance. In some embodiments the method includes assigning via the appliance the plurality of intranet internet protocol addresses as a range of internet protocol addresses identified via a subnet mask. In one embodiment the appliance allocates a pool of intranet internet protocol addresses to assign to a plurality of users accessing the first network via a SSL VPN connection. In some embodiments the appliance obtains the plurality of intranet internet protocol addresses from a Domain Name Server of the first network.

In one aspect the present invention is related to a method for responding to a request of an application for a client s network identifier with an intranet network identifier of the client on a secure socket layer virtual private network SSL VPN connection to a network. The method includes the step of requesting by an application on a client a network identifier of the client. The client is connected from a first network to a second network by a SSL VPN connection established via an appliance. The appliance assigns to the client an intranet network identifier on the second network. The method also includes intercepting by a hooking mechanism of an agent on the client the request and providing by the hooking mechanism to the application the intranet network identifier of the client on the second network in response to the request.

In one embodiment the method includes transmitting by the agent a request to the appliance for the intranet network identifier of the client on the second network and in response to the request transmitting by the appliance to the agent the intranet network identifier of the client on the second network. In another embodiment the method includes querying by the appliance the intranet network identifier of the client in a routing table.

In some embodiments the method includes establishing by the agent the SSL VPN connection to the second network. In other embodiments the network identifier is an internet protocol address or a host name. In another embodiment the method includes requesting by the application an internet protocol address of the client corresponding to a host name of the client.

In yet another embodiment the method includes requesting by the application a socket address data structure corresponding to a host name of the client. In some embodiments the method includes requesting by the application the network identifier of the client via any one of the following application programming interface calls gethostbyname getaddrinfo WSAIoctl getsockname WSALookupServiceBegin WSALookupServiceNext and WSALookupServiceEnd.

In yet another embodiment the application comprises an online collaboration tool. In some of these embodiments the method includes establishing by the online collaboration tool a connection to an online collaboration environment on the second network using the intranet network identifier of the client on the second network. In one embodiment the appliance designates a plurality of intranet internet protocol addresses for a user of the client. In some of these embodiments the method includes assigning by the appliance to the client a first intranet internet protocol address from the plurality of intranet internet protocol addresses based on identification of the user of the client and or a policy. In yet another embodiment the method includes hosting by the appliance on the second network the intranet network identifier of the client.

In another aspect the present invention is related to a system for responding to a request of an application for a client s network identifier with an intranet network identifier of the client on a secure socket layer virtual private network SSL VPN connection to a network. The system includes means for requesting by an application on a client a network identifier of the client. The client is connected from a first network to a second network by a SSL VPN connection established via an appliance. The appliance assigns to the client an intranet network identifier on the second network. The system also includes mean for intercepting by a hooking mechanism of an agent on the client the request and means for providing by the hooking mechanism to the application the intranet network identifier of the client on the second network in response to the request.

In one aspect the present invention relates to a method for assigning by an appliance one of a plurality of multiple intranet internet protocol addresses of a network to a user when the user accesses the network via a secure socket layer virtual private network connection SSL VPN . The method includes the steps of designating via an appliance a plurality of intranet internet protocol addresses of a first network to a user accessing the first network via a SSL VPN connection the appliance providing SSL VPN connectivity between the first network and a client on a second network and receiving by the appliance a request from the client operated by the user to establish a SSL VPN connection with the first network. In one embodiment the appliance identifies the user via a login request to the appliance. In response to the request the appliance assigns to the client as an internet protocol address on the first network a first intranet internet protocol address of the first user from the plurality of intranet internet protocol addresses the first intranet internet protocol address previously assigned to the first user.

In one embodiment the method includes determining by the appliance the first intranet internet protocol address to assign to the user based on a policy. In some embodiments the policy indicates to assign to the user a most recently used intranet internet protocol address of the user. In another embodiment the method includes determining by the appliance a most recently used intranet internet protocol address of the user for the first intranet internet protocol address. In some embodiments the method includes assigning to a second client of the user establishing a SSL VPN connection with the first network a next most recently used intranet internet protocol address of the user. In one embodiment the appliance determines an inactive intranet internet protocol address from the plurality of multiple intranet internet protocol addresses as the first intranet internet protocol address.

In yet another embodiment the method includes determining by the appliance the plurality of intranet internet protocol address of the user is active. In response to the determination the appliance requests the user to transfer to a virtual private network connection of the user assigned an active intranet internet protocol address. In some embodiments the appliance determines the plurality of intranet internet protocol address of the user is active and in response to the determination provides a mapped internet protocol address to the client.

In one embodiment the method includes hosting by the appliance the first intranet protocol address of the client on the first network. In another embodiment an agent on the client establishes the virtual private network connection via the appliance. In some embodiments the method includes assigning via the appliance the plurality of intranet internet protocol addresses as a range of internet protocol addresses identified via a subnet mask. In one embodiment the appliance allocates a pool of intranet internet protocol addresses to assign to a plurality of users accessing the first network via a SSL VPN connection. In some embodiments the appliance obtains the plurality of intranet internet protocol addresses from a Domain Name Server of the first network.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Ill. those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein. A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino California OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may be have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of Unix operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the application . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager . sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and a second network . In some embodiments the device terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the device may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer 2 7 integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the device . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element nat comprise a data object in memory of device . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the device such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identifying specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the Encryption processor . In other embodiments the encryption engine comprises executable instructions running on the Encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer 2 7 integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer 2 7 integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packer. Additionally the high speed layer 2 7 integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer 2 7 integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer 2 7 integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer 2 7 integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2 7 integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer 2 7 integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer 2 7 integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms.

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance and either is user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to another embodiment of the appliance is depicted. In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . In one embodiment the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a VServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is a network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching. In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer 4 or application layer request data. In one embodiment although the network layer or layer 2 of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers 5 7. In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers 1 4. Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a mini filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client and or a collection agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager. Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as a payload of a network packet of the transport layer protocol.

The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

Referring now to an embodiment of an environment for providing Intranet Internet Protocol IIP addresses to users and or clients is depicted. The IIP addressing environment provided by the appliance and or client may be used for 1 assigning based on policy temporal and or status information an IIP address to a user from a plurality of IIP addresses designated to the user for accessing a network via the appliance 2 providing an IIP address assigned to the user to an application on a client requesting resolution of the internet protocol address of the client and 3 providing a mechanism to determine the IIP address assigned to the user via a configurable user domain name associated with the user s IIP address .

In brief overview the appliance provides an IIP pool of IIP addresses A N to be assigned and or used by one or more users. The IIP pool may include a pool of free or unassigned IIP addresses i.e. a free pool a pool of IIP addresses that may be reclaimed i.e. a reclaim pool and or a pool of IIP addresses that may be assigned via transfer i.e. a transfer pool such as via the transfer of a session e.g. a SSL VPN session provided by the appliance . In some embodiments if an IIP address is not available from the IIP pool then a mapped IP MIP may be used to provide a client or a user an IIP address . For mapped IP the appliance intercepts an incoming client s IP and replaces it with a MIP address. Any servers sitting behind the appliance see a MIP instead of a the client s actual IP address in the IP header field of traffic directed to them.

A set of one or more IIP addresses A N may be designated for or associated with a user. In one embodiment the appliance via an IIP policy provides a user with an IIP address from a plurality of IIP addresses A N designated for the user. For example the IIP policy may indicate to provide the user with the most recently used IIP address of the user. The appliance includes a database or table for maintaining an association of IIP addresses to entities such as users.

In additional overview the appliance provides a mechanism for querying the IIP address assigned to and or used by the user. The appliance may be configured with a user domain name policy specifying a domain suffix to associate with an identifier of the user. For example the domain name policy may indicate to append the domain suffix mycompany.com to a user identifier such as the user id of the user when logged into the appliance or network . As a result in some embodiments the appliance associates the user domain name of . e.g. userA.mycompany.com with the IIP address assigned to the user. The appliance may store in the domain name service DNS or DNS cache the user domain name in association with the IIP address The appliance can resolve any DNS queries or ping commands based on the user domain name by providing the associated IIP address .

In further overview the client agent provides a mechanism by which the IIP address is provided to an application. The client agent includes an interception or hooking mechanism for intercepting any application programming interface API calls of the application related to determining or resolving the internet protocol address of the client such as for example gethostbyname. Instead of providing the internet protocol address of the client identified in the network stack e.g. the IP address of the client on network the client agent provides the IIP address assigned to the user via the appliance such as the IIP address of the client or user of the client on the second network connected from the client on a first network via a SSL VPN connection of the appliance.

In more detail the appliance provides an IIP address to a user or the client of the user. In one embodiment the IIP address is the internet protocol address of the user or the client used by the user for communications on the network accessed via the appliance . For example the user may communicate on a first network via a network stack of a client that provides an internet protocol IP address for the first network such as for example 200.100.10.1. From client on the first network the user may establish a connection such as an SSL VPN connection with a second network via the appliance . The appliance provides an IIP address for the second network to the client and or user such as 192.10.1.1. Although the client has an IP address on the first network e.g. 200.100.10.1 the user and or client has an IIP address or second network IP address e.g. 192.10.1.1 for communications on the second network . In one embodiment the IIP address is the internet protocol address assigned to the client on the VPN or SSL VPN connected network . In another embodiment the appliance provides or acts as a DNS for clients communicating via the appliance . In some embodiments the appliance assigns or leases internet protocol addresses referred to as IIP addresses to client s requesting an internet protocol address such as dynamically via Dynamic Host Configuration Protocol DHCP .

The appliance may provide the IIP address from an IIP pool of one or more IIP addresses A N. In some embodiments the appliance obtains a pool of internet protocol addresses on network from a server to use for the IIP pool . In one embodiment the appliance obtains an IIP address pool or portion thereof from a DNS server such as one provided via server . In another embodiment the appliance obtains an IIP address pool or portion thereof from a Remote Authentication Dial In User Service RADIUS server such as one provided via server . In yet another embodiment the appliance acts as a DNS server or provides DNS functionally for network . For example a vServer may be configured as a DNS . In these embodiments the appliance obtains or provides an IIP pool from the appliance provided DNS .

The appliance may designate assign or allocate IIP addresses for any of the following entities 1 user 2 group 3 vServer and d global. In some embodiments the IIP pool may be designated or used for assigning IIP addresses to users. In other embodiments IIP pool may include IIP addresses to be assigned to or used by services of the appliance such as vServers . In other embodiments IIP pool may include IIP addresses to be assigned to or used by global or group entities of the appliance . In one embodiment the IIP pool may comprise a single pool of IIP addresses. In another embodiment the IIP pool may comprise multiple pools or sub pools of IIP addresses. In some embodiments the IIP pool comprises a free IIP pool . In other embodiments the IIP pool comprises a reclaimed IIP pool . In yet another embodiment the IIP pool comprises a transfer IIP pool . In some embodiments the IIP pool comprises any combination of a free IIP pool a reclaimed IIP pool and or a transfer IIP pool . In one embodiment the free IIP pool comprises IP addresses which are available for usage. In some embodiments the reclaimed IIP pool comprises IP addresses which are associated with an entity such as a user group or vServer but are inactive and available for usage. In other embodiments the transfer IIP pool comprises IP addresses that are active but can be made available through a transfer login or transfer session process.

In some embodiments the appliance may list or enumerate internet protocol addresses used for IIP addresses in the IIP pool or in some embodiments any of the sub pools in an order or priority. In some embodiments the appliance enumerates or lists the IIP addresses of a pool according to the following scheme 1 user 2 group 3 vServer and d global. In one embodiment the appliance provides an IIP address from an IIP pool for assignment based on the order or priority. For example the appliance may try to obtain a free IIP address from the user associated IP free pool first. If an IIP address is not available from the user portion of the pool the appliance may then try to obtain a free IIP address from the group portion of the pool and so on via the vServer and global portions of the pool until an IIP address can be assigned. Likewise the appliance may prioritize the sub pools and in any order or combination to search for IIP addresses to assign. For example the appliance may first search the free IIP pool then the reclaimed IIP pool and then the transfer IIP pool for IIP addresses.

The appliance may comprise any type and form of database or table for associating tracking managing or maintaining the designation allocation and or assignment of IIP addresses to a 1 user 2 group 3 vServer and or d global entities from the IIP pool . In one embodiment the appliance implements an Internet Protocol Light Weight Database Table IPLWDB . In some embodiments the IPLWDB maintains entries which provide a one to one mapping of an IP address with or to an entity. In another embodiment once an entity uses or is assigned an IIP address the IPLWDB maintains the association between the entity and IIP address which may be referred to as IIP stickiness or having the IIP address stuck to an entity. In one embodiment IIP stickiness refers to the ability or effectiveness of the appliance to maintain or hold the association between the entity and the IIP address. In some embodiments IIP stickiness refers to the ability or effectiveness of the appliance to maintain the entity IIP address relationship or assignment via any changes in the system such as a user logging in and out of the appliance or changing access points. In some embodiments the IPLWDB comprises a hash table which is hashed based on any one or more of the 1 user 2 group 3 vServer and or d global entities. The IPLWDB may comprise a hash of the user and any other information associated with the user such as client or network of client .

The IPLWDB may track manage or maintain any status and temporal information related to the IIP address entity relationship. In one embodiment the IPLWDB maintains if the IIP address for the entity is currently active or inactive. For example in some embodiments the IPLWDB identifies an IIP address as active if it is currently used in an SSL VPN session via the appliance . In another embodiment the IPLWDB maintains temporal data for the IIP address use by the entity such as when first used when last used how long has been used and when most recently used. In other embodiments the IPLWDB maintains information on the type or source of usage such as in the case of user what client or network used from or for what transactions or activities were performed using the assigned IIP address.

In some embodiments the IPLWDB tracks manages and maintains multiple IIP addresses used by an entity. The IPLWDB may use one or more IIP policies for determining which IIP address of a plurality of IIP addresses to assign or provide to an entity such as a user. In one embodiment the IIP policy may specify to provide for assignment the most recently or last used IIP address of the user. In some embodiments the IIP policy may specify to provide for assignment the most used IIP address of the user. In other embodiments the IIP policy may specify to provide the least used IIP address of the user. In another embodiment the IIP policy may specify the order or priority for which to provide IP addresses of the user for example from the most recent to least recent. In yet another embodiment the IIP policy may specify which IIP pool or sub pool to use and or in which order. In some embodiments the IIP policy may specify whether or not to use a mapped IP address and under what conditions such as when an inactive IIP address of the user is not available. In other embodiments the IIP policy may specify whether or not to transfer a session or login of the user and under what conditions.

In some embodiments the appliance can be configured to bind or make the association of one or more IIP addresses to an entity such as a user. For example in some embodiments the associations in IPLWDB are updated or maintained via bind and unbind commands via the appliance . In one embodiment the following command can be issued to the appliance via a command line interface CLI or GUI 

For example if an administrator of the appliance intends to associate the IIP addresses of 10.102 4 189 10.102.4.1 and 10.102.4.2 with a user nsroot then the administrator may issue the following commands 

In one embodiment the netmask value provides a mechanism for assigning a range of IIP addresses to a user. In some embodiments the netmask value is optional and the default is 255.255.255.255. For example the following commands are equivalent 

Likewise the administrator or other user may disassociate an IIP address with an entity such as a user via an unbind command. In some embodiments the unbind command may have similar format as the bind command. In one embodiment if the IIP address is active the bind or unbind command will not be processed. In other embodiments if the IIP address is active the appliance transmits a reset RST command to all the client and server connections associated with the active session and then proceeds to make any changes associated with the issued bind or unbind command. In another embodiment the appliance updates the associated client and server connections with any updated IIP address information. In one embodiment the appliance re establishes the associated client and server connections with the changed IIP address.

In some embodiments the appliance provides a mechanism and or technique for determining the IIP address of a user. In one embodiment the appliance is configured via a user domain name policy which provides information on specifying a user domain . In one embodiment the user domain policy specifies a domain suffix to be used in forming the user domain . For example the user domain policy in some embodiments may be specified by the following command 

In one embodiment the iipdnssuffix specifies a string such as a domain name that will be appended to the user id name to form a user domain name . The user id may be the login name of the user an alias or nickname of the user or any user identification associated with the user s profile. In one embodiment the domain suffix identifies the domain name of the network or network . In other embodiments the domain suffix may comprise a domain name or host name of the appliance . In yet other embodiments the domain suffix may be any desired predetermined or custom string for identifying the user domain name .

In the case of a user having multiple IIP addresses active concurrently the user domain name policy may specify an instance identifier or any other character or symbol to differentiate between a first instance and a second instance of a VPN session of the user. For example the policy may specify to include a number after the user id such as or  . In other embodiments the policy specifies to only associate or provide a single user domain name for a user. For example in one embodiment the user domain name is associated with the first session. In other embodiments the user domain name is associated with the most recent session.

Although the user domain policy is described as providing a domain suffix to a user identifier to form the user domain name the user domain policy may specify any portion of the user domain name . For the example the user domain policy may specify the format for the user identifier or which type of user id to use such as an identified portion of the user s profile. In some embodiments by default the domain suffix may be the same domain name as the network . In another embodiment the user domain policy may specify a format for or additions or modifications to the domain name of the network in providing the user domain name .

When a user logs in and gets assigned an IIP address the appliance stores a record associating the user id name or user domain name and IIP address . In some embodiments the appliance stores the record in DNS or a DNS cache on the appliance . In another embodiment the appliance stores the record in a DNS on server . In other embodiments the appliance stores the record in the IPLWDB . The appliance can query a DNS with the user domain name and obtain the assigned IIP address . A user logged into the appliance via SSL VPN get the IIP address of another user by using DNS instead of having to remember the IP address. For example a user on client can ping the IIP address of another user. The client agent can intercept such requests and query the DNS of the appliance to determine the IIP address assigned the user domain name. In some embodiments without logging into the appliance via SSLVPN a client can query the IIP address of a user by sending a DNS query request to the DNS of the appliance .

In some embodiments the client agent provide an interception or hooking mechanism for intercepting any requests for the local IP address of the client and returning or replying with an IIP address such as the IIP address assigned to the user. In some embodiments the hooking mechanism may include any of the mechanisms of the interceptor described above in conjunction with . In other embodiments the hooking mechanism may include any type and form of hooking mechanism such as application level hook procedure or function. In one embodiment and by way of example the hooking mechanism comprises any of the Windows API calls for setting a application hooking procedure such as via the SetWindowsHookEx API call. In some embodiments the SetWindowsHookEx function installs an application defined hook procedure into a hook chain.

Depending on the operating system of the client the client agent may use the corresponding APIs of the OS to install add modify or use a hook procedure to hook or intercept messages of an application. A hook procedure may be installed to monitor the system for certain types of events which are associated either with a specific thread or with all threads in the same space as the calling thread. In one embodiment a hook such as hooking mechanism is a point in the system message handling mechanism where an application such as the client agent can install a subroutine to monitor the message traffic in the system and process certain types of messages before the messages reach the target processing function. In some embodiments the hooking mechanism may intercept or hook any of the following function calls or messages of an application gethostbyname getaddrinfo and getsockname. In other embodiments the hooking mechanism may hook any of the Windows Socket API extensions such as WSAIoctl WSALookupServiceBegin WSALookupServiceNext and WSALookupServiceEnd.

In one embodiment the client agent transmits a request to the appliance to determine the IIP address of the host name intercepted by the hooking mechanism . In some embodiments the appliance looks up the corresponding IIP address of the host name of the client in a DNS such as DNS on appliance or DNS on a server. In other embodiments the client agent uses the user domain name of the user associated with the application to ping or DNS query the IIP address . In some embodiments the client agent transmits the local IP address of the client and the appliance queries the corresponding IIP address . In one embodiment the appliance stores the name of the client in association with the user and or IIP address in the IPLWDB . In other embodiments the client agent has cached the IIP address of the user or client and thus does not need to query the appliance . For example upon establishment of a SSL VPN connection the appliance may transmit the IIP address to the client . With the hooking mechanism instead of providing the client s local IP address the client s address on the first network the client agent provides the IIP address of the client the client s or user s address on the second network .

In some embodiments the hooking mechanism of the client agent is used to return the IIP address for supporting the transparent and seamless use of online collaboration tools via SSL VPN connections. In one embodiment the application is a NetMeeting application manufactured by the Microsoft Corporation of Redmond Wash. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office LiveMeeting provided by Microsoft Corporation of Redmond Wash. With the hooking mechanism providing the IIP address assigned to the client via the SSL VPN connection the application does not need to be modified to work as designed via the SSL VPN session. The hooking mechanism provides the IIP address of the client or user if the client instead of the local IP address when making a request to get the IP address of the client .

Referring now to an embodiment of steps of a method for assigning an IIP address to a user is depicted. In one embodiment the method is practiced to provide IIP address stickiness for a user. In some embodiments an SSL VPN user may login and logout of the appliance multiple times from different computers. For example the user may roam from computing device to computing device or switch from one location to another. In some example an SSL VPN user may be on a mobile device and have the network connectivity disrupted causing the device to re establish the SSL VPN connection. With the techniques depicted by method the SSL VPN user may get assigned the same IIP address for each of those sessions. In some embodiments the appliance may be configured with policies specifying what IIP address should be assigned to a user.

In brief overview of method at step the appliance designates a plurality of IIP address A N to a user such as an SSL VPN user from a pool of IIP addresses. At step the appliance receives a request from a client operated by the user to establish a connection via the appliance to a network such as an SSL VPN connection. At step the appliance assigns to the client or the user an IIP address on network from the IIP address pool . The appliance may make the assignment based on policy temporal information or the status of any of the designated IIP addresses A N for the user. For example in one embodiment the appliance assigns the most recently used IIP address of the user to the client . At step in some embodiments the appliance determines whether to provide a mapped IP or to transfer a session. For example if an inactive IIP address is not available for assigning to the user the appliance may opt to use a MIP address at step or to request the user to transfer an active session to the current request at step .

In further detail at step the appliance may designate or allocate any set of one or more IIP addresses A N for a user. In some embodiments the appliance designates one IIP address . In other embodiments the appliance designates up to a predetermined number of multiple IIP addresses A N for the user such as 2 3 4 5 6 7 9 10 15 20 or 26 IIP addresses. In one embodiment the multiple IIP addresses A N comprise a continuous range of IP addresses on network for example IP addresses 200.10.1.1 to 200.20.1.10. In another embodiment the multiple IIP addresses A N comprises any set of IP addresses on network that are not subsequent to each other. In yet another embodiment the multiple IIP addresses A N are any combination of subsequent IP address ranges and single or separate IP addresses.

In one embodiment the appliance obtains a set of internet protocol addresses from a DNS for the network accessed via the appliance . For example the appliance may obtain a set of IP addresses for the intranet from a DNS server or a RADIUS server . In another example the appliance may provide or act as a DNS and allocate the IP addresses for the intranet. In some embodiments one or more IIP addresses A N may be associated or designated with a user via a bind or similar command issued at the CLI or GUI of the appliance . In other embodiments the appliance may obtain from a DNS IP addresses A N on network s that are associated with a user. In some embodiments the appliance designates a portion of the free IIP pool to the user. In other embodiments the appliance may designate or reclaim a portion of the reclaim IIP pool to the user.

At step the user via client transmits a request to the appliance to establish a connection to the network . In some embodiments the appliance identifies the user from the request. In other embodiments the appliance identifies the user from receipt of login or authentication credentials. For example in some embodiments the user submits a user id and password via a URL or web page of the appliance . In one embodiment the client agent requests to establish a tunnel connection with the appliance using any type and form of tunneling protocol. In another embodiment the client agent requests to establish a virtual private network connection via the appliance to a network . For example the client agent may establish a virtual private network connection with the appliance to connect the client on the first network to a second network . In some embodiments the client agent establishes a SSL VPN connection with the appliance . In yet another embodiment the client agent establishes a tunnel or virtual private network connection using Transport Layer Secure TLS protocol. In one embodiment the client agent requests to establish a tunnel connection using the Common Gateway Protocol CGP manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla.

At step the appliance in response to receiving the request from the user or the client assigns an IIP address on the second network from the designated set of IIP addresses A N of the user. In one embodiment the appliance determines the IIP address to assign based on an IIP policy . For example in some embodiments to maintain IIP stickiness the appliance via IIP policy determines the most recently used IIP address of the user. In other embodiments to maintain IIP stickiness the appliance via information tracked by the IPLWDB determines the most used IIP address of the user from the set of IIP addresses A N. In some embodiments in the case of one or more active SSL VPN sessions the appliance determines the next most recently used or most used IIP address of the user. In yet other embodiments the appliance determines an appropriate desired or policy driven IIP address to assign the user from the designated set of user IIP addresses A N by any combination of policy status of sessions associated with the user s IIP addresses A N and temporal information of sessions associated with the user s IIP addresses A N.

In one embodiment the appliance may use any sub pool or of the IP pool to assign an IIP address to the user. In some embodiment the free IIP pool may not have an available IIP address of the user. For example all the IIP addresses of the user are marked as active or already assigned to a session. As such in these embodiments the appliance may search the reclaim IIP pool for any IIP addresses of the user assigned but available to reclaim. In still another embodiment the appliance may search the transfer IIP pool for any IIP addresses of the user. In yet other embodiments the appliance may search any designated allocations or pools for group global or vServer IIP addresses for an IP address that may be designated and assigned for the user or otherwise provided as a mapped IP address. In some embodiments the appliance searches portions of the IP pool for IIP addresses of the user in an ordered or prioritized manner such as the free IIP pool first the reclaim IIP pool second and the transfer IIP pool third. In one embodiment the search order or priority may be specified by a policy .

In many embodiments the appliance provides a previously assigned IIP address of the user from the free IIP pool or the reclaim IIP pool . In some embodiments the appliance provides the user with the most recently or last assigned IIP address to provide IIP stickiness. However at step in some embodiments the appliance determines whether to provide a mapped IP or a transfer session . In some embodiments an IIP policy specifies whether to use a mapped IP or a transfer session in cases of the appliance not finding an available IIP address of the user from the free IIP pool and or the reclaimed IIP pool . In other embodiments an IIP policy may specify to use a Mapped IP in cases of the appliance not finding an inactive IIP address in any pool or an available IIP address in the free IIP pool . In one embodiment if the IIP policy specifies to use a Mapped IP at step then at step provides a Mapped IP instead of using an assigned IIP address .

In the cases of using a Mapped IP the appliance modifies any packets to and from the client with an IIP address of the network . For example instead of assigning the user a user designated IIP address the appliance may use any available IIP address of the IIP pool such as a globally available IIP address. The appliance may modify the packets transmitted from the client to have this mapped IP when transmitted from the appliance to a server . Also in some embodiments the appliance may modify packets transmitted from the server to the client to change the Mapped IP to the IP address of the client such as the IP address of the client on the first network . In some embodiments the appliance stores in the IPLWDB the association of the mapped IP to the user and or client .

In another embodiment if the IIP policy specifies to use a transfer session at step then at step the appliance initiates a transfer of an active session of the user. In one embodiment upon receiving by the appliance a request from a first client operated by a user to establish a VPN session the appliance may create a temporary VPN session with the client. In some embodiments the appliance may refuse to accept any data received via the temporary session until a new VPN session is created from temporary session. In other embodiments the temporary VPN session may be allocated less resources by the appliance than would be allocated to a standard VPN session. In another embodiment a temporary VPN session may not be assigned an IIP address or may otherwise be prevented from receiving data. In some embodiments the appliance may identify a number of properties associated with the existing session. In one embodiment after identifying an existing session the appliance may transmit a message to the user via the previously existing session indicating the current session attempt.

In some embodiments the appliance may transmit to the client of the user a request for information corresponding to whether to terminate the previous session. In some embodiments this request may comprise a web page which accepts user input. For example the web page may comprise an enumerated list of existing sessions with input means for the user to a select one or more sessions to be terminated. In other embodiments this request may comprise a communication to a client agent which then may respond on behalf of the user. In some embodiments this request may comprise a request for information corresponding to whether to terminate one or more of a plurality of previous sessions.

In one embodiment the request may comprise information relating to any of the properties of the existing session. In some embodiments this information may be displayed to the user along with the choice of whether to terminate the existing session. For example a web page may be displayed to the user stating you have a previously existing session which was opened July 2nd at 10 30 am do you wish to close In other embodiments this information may be transmitted to a client agent which may then make a determination whether to close a previously existing session based on the properties of the previously existing session. For example a client agent executing on the client making the new session request may determine to automatically terminate a previous session in the event that no applications are currently associated with the previous session.

In some embodiments the request may also comprise a request for information relating to whether the user would like to transfer data from a previous session to a current session. For example if a user was remotely executing an application the user may wish to resume the remote execution and the previous session or sessions associated with the remote execution using the current session. After transmitting from the appliance to the client a request for information corresponding to whether to terminate the previous session the appliance may receive from the client or the user a response comprising an indication to terminate the previous session. In still other embodiments the appliance may receive a response comprising a request to transfer data associated with a previous session to the current session. In these embodiments the appliance assigns the IIP address A of the previous session to the new session.

In the event the appliance receives a response comprising an indication not to terminate the previous session the appliance may refuse to allow the user access and terminate the temporary VPN session. In these embodiments the appliance maintains the association of the IIP addresses with the previous session and does not assign the IIP address to the new session. In other embodiments the appliance may create a new VPN session unrelated to any of the identified previous sessions. In these embodiments the appliance may assign an available IIP address from another entity such as group vServer or global or another user to the new VPN session.

Referring now to an embodiment of steps of a method for providing an IIP address to a request of an application for the local IP address of a client is depicted. In one embodiment the method is practiced is referred to as IIP spoofing of the client s IP address. In some embodiments spoofing is a situation in which a program successfully masquerades as another by changing data to make it look feel and or act as another program but with the changed data. As described herein the client agent spoofs the local IP address of the client on a first network to be the IIP address of the client or user on the second network or the network accessed by the client via a VPN connection to the appliance . With the techniques depicted by method the application receives in response to a request the IIP address of the client on the second network instead of the local IP address on the network stack . In some embodiments the method enables applications to transparently and seamlessly communicate to other applications via the SSL VPN connected network without changes or modification In one embodiment this technique is useful for online collaboration tools such as NetMeeting when the client or user establishes an SSL VPN connection and needs to collaborate with other computers on the network or other SSL VPN connected clients .

In brief overview of method at step the client on a first network establishes a connection via the appliance to a second network such as an SSL VPN connection. At step the appliance provides or assigns an IIP address on the second network for the client . At step an application on the client requests a network identifier of the client . At step the client agent determines the IIP address of the client on the second network . At step in response to the request the client agent provides the application the IIP address of the second network instead of the local IP address of the client on the first network .

In further details at step the client agent establishes a transport layer connection with the appliance such as via the transport control protocol or user datagram protocol. In one embodiment the client agent establishes a tunnel connection with the appliance using any type and form of tunneling protocol. In another embodiment the client agent establishes a virtual private network connection via the appliance to a network . For example the client agent may establish a virtual private network connection with the appliance to connect the client on the first network to a second network . In some embodiments the client agent establishes a SSL VPN connection with the appliance . In yet another embodiment the client agent establishes a tunnel or virtual private network connection using Transport Layer Secure TLS protocol. In one embodiment the client agent establishes a tunnel connection with the appliance using the Common Gateway Protocol CGP manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla.

At step the appliance provides the client an IP address on the second network . In one embodiment the appliance assigns the client an IIP address . In some embodiments the appliance assigns the user of the client an IIP address using any of the techniques and methods discussed above in connection with method and . In another embodiment the appliance uses a Mapped IP address for the client . In yet another embodiment the appliance and client use a transferred session with its corresponding IIP address for establishing the connection at step and providing the IIP address at step . In some embodiments the appliance on behalf of the client hosts the IIP address of the client on network .

At step an application on the client makes a request to determine the IP address of the client . In some embodiments the application makes any socket based application programming interface API calls to request the IP address of the client based on the host name of the client . In one embodiment the hooking mechanism intercepts the API call. In some embodiments the hooking mechanism may intercept or hook any of the following function calls or messages of an application gethostbyname getaddrinfo and getsockname. In other embodiments the hooking mechanism may hook any of the Windows Socket API extensions such as WSAIoctl WSALookupServiceBegin WSALookupServiceNext and WSALookupServiceEnd. In one embodiment without hooking these API calls via the hooking mechanism the application would receive from the network stack the local IP address of the client on the first network .

At step the client agent and or hooking mechanism determines the IIP address to return to the hooked API call. In one embodiment the hooking mechanism responds with the IIP address assigned to the user. In another embodiment the hooking mechanism responds with the IIP address assigned to the client . In other embodiments the hooking mechanism responds with the Mapped IP address of the client on the second network . In yet another embodiment the hooking mechanism responds with the IP address on the second network hosted by the appliance on behalf of the client .

In some embodiments the client agent and or hooking mechanism transmits a request to the appliance to determine the IIP address of the client . For example the appliance may query a table or database such as a the IPLWDB to determine the IIP address associated with either the local client IP address the user or the client agent . In another embodiment the client agent performs a ping command to determine the IIP address associated with the user as will be described in further detail below in conjunction with . In some embodiments the client agent transmits a DNS query to the DNS of the appliance or another DNS server to resolve the user domain name into an IIP address . In yet another embodiment the client agent stores or caches the IIP address assigned to the client or user from the appliance . In these embodiments the client agent and or hooking mechanism can retrieve the IIP address from local storage without making a request to the appliance .

At step the hooking mechanism provides the IIP address determined at step to the application in response to the application s request at step . In one embodiment the hooking mechanism provides a reply to the hooked function or API call. In other embodiments the hooking mechanism provides a message to the API call. In some embodiments the application continues operations with the provided IIP address . For example the application may transmit the IIP address to another client or application such as via the payload of a transport layer packet communicated via the VPN connection. In yet other embodiments the applications uses the IIP address in other socket based API calls as if were the local IP address of the client . In this manner the application operates for the SSL VPN connected network s without modification as if were communicating on the first network . With the techniques illustrated by the embodiment of method the user client and application such as an online collaboration tool obtain the security and access control benefits and other functionality provided by the appliance in a seamless and transparent manner.

Referring now to an embodiment of steps of a method for querying the IIP address of a user using a user domain name is depicted. In one embodiment the method is practiced in order for user client or application to determine the IIP address assigned to a SSL VPN user. In some embodiments a naming scheme for the user domain names can be configured of the appliance . For example a user domain name policy can specify the domain suffix to be appended to a user identifier. In this manner a user understanding the user domain naming scheme can easily and efficiently ping or DNS query the IIP address of an SSL VPN user on a network . For example the user may ping the user domain name of . to determine the IIP address assigned by the appliance to the user or client of the user. In this manner SSL VPN users can quickly determine the IIP addresses of other users when using collaboration tools such as establishing a NetMeeting session between SSL VPN users.

In brief overview of method at step the client on a first network establishes a connection via the appliance to a second network such as an SSL VPN connection. At step the appliance provides or assigns an IIP address on the second network for the client and generates a user domain name according to the user domain name policy . At step the appliance stores the user domain name and IIP address association of the user in a DNS or DNS cache. At step the appliance receives a request for the IIP address of the user based on the user domain name such as via a ping command or a DNS query. At step the appliance determines from the domain name service the IIP address associated with the user domain name . At step the appliance provides the determined IIP address of the user in response to the request.

In further details at step the client agent establishes a transport layer connection with the appliance such as via the transport control protocol or user datagram protocol. In one embodiment the client agent establishes a tunnel connection with the appliance using any type and form of tunneling protocol. In another embodiment the client agent establishes a virtual private network connection via the appliance to a network . For example the client agent may establish a virtual private network connection with the appliance to connect the client on the first network to a second network . In some embodiments the client agent establishes a SSL VPN connection with the appliance . In yet another embodiment the client agent establishes a tunnel or virtual private network connection using Transport Layer Secure TLS protocol. In one embodiment the client agent establishes a tunnel connection with the appliance using the Common Gateway Protocol CGP manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla.

At step the appliance provides the client an IP address on the second network . In one embodiment the appliance assigns the client an IIP address . In some embodiments the appliance assigns the user of the client an IIP address using any of the techniques and methods discussed above in connection with method and or method and . In another embodiment the appliance uses a Mapped IP address for the client . In yet another embodiment the appliance and client use a transferred session with its corresponding IIP address for establishing the connection at step and providing the IIP address at step . In some embodiments the appliance on behalf of the client hosts the IIP address of the client on network .

At step the appliance in some embodiments generates a user domain name based on the user domain name policy . For example in one embodiment the appliance generates a user domain name comprising a specified domain suffix associated with the user identifier. In one embodiment the domain suffix comprises a domain name of the network or the host name of the appliance . In some embodiments any arbitrary domain suffix may be specified for the user domain name . In other embodiments the appliance has or maintains an established user domain name for the user. For example the appliance may re associate a newly assigned IIP address with the user domain name .

At step the appliance stores in a domain name service or other database the association of the IIP address of the user with the user domain name . In some embodiments the appliance stores a record in the DNS that maps the IIP address to the user domain name . In one embodiment the appliance stores this record or association in the DNS or DNS cache of the appliance. In other embodiments the appliance stores a record mapping the IIP address to the user domain name in another DNS such as DNS . In yet another embodiment the appliance stores the IIP address user domain name as a record or entry in the IPLWDB . In still other embodiments the appliance maintains the IIP address user domain name association in memory such as in a data structure or object or in storage such as in a file or cache.

At step the appliance receives or intercepts a request to determine the IIP address of a user domain name . In some embodiments the appliance receives a DNS query to resolve the user domain name via an SSL VPN connection client. In other embodiments receives the DNS query from any client on the same or different network that can access the DNS services of the appliance . In some embodiments the appliance receives the DNS query forwarded from a server another DNS or another appliance . In another embodiment the appliance intercepts any type and form of Internet Control Message Protocol ICMP request such as a ping command that refers to or includes the user domain name . In yet another embodiment the client agent intercepts the ICMP request and transmits the request to the appliance such as via the SSL VPN connection of the client or a control connection between the client agent and the appliance .

At step the appliance determines the IIP address associated with the user domain name specified via the request. In one embodiment the appliance performs a lookup in the DNS cache . In other embodiments the appliance transmits a DNS query request or lookup to another DNS such as DNS . In some embodiments the application does a lookup in a database using the user domain name as the key or index. In yet another embodiment the application performs a lookup operation in the IPLWDB for the IIP address associated with the user domain name . In some embodiments the application looks up the IIP address in memory such as via a data structure or object. In other embodiments the application determines the IIP address from a cache. In still another embodiment the appliance determines the IIP address from a client agent for example the client agent providing the SSL VPN connection of the user identified by the user domain name .

At step the appliance provides the determined IIP address of the user in response to the request of step . In some embodiments the appliance transmits a response to the sender of the DNS query. For example the appliance may transmit the DNS query response to a client server another appliance or another DNS. In other embodiments the appliance transmits a message to a client agent identifying the IIP address . For example in the case of the client agent intercepting a ping of an SSL VPN user the client agent responds to the ping with the IIP address of the user domain name. In some embodiments the client agent also provides ping statistics along with the IIP address which may have been determined and provided by the appliance . With the IIP address of the SSL VPN user a user client or application can communicate collaborate or connect to the identified SSL VPN user.

In view of the structure functions and operations of the system and methods described above the appliance and client agent provide techniques for more efficiently using assigned Intranet Internet Protocol IIP addresses by SSL VPN users. The appliance manages and supports IIP stickiness to a user by assigning an IIP address based on policy temporal and status information. With the configurable user domain naming scheme the appliances provides a mechanism for users clients and other applications to determine the IIP address assigned to a SSL VPN user. Additionally the client agent provides a mechanism for seamlessly providing the IIP address to applications communicating via an SSL VPN connection to the private network.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

