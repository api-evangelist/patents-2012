---

title: Dynamic addition and removal of operating system components
abstract: Systems, computer program products and computer program products for facilitating the dynamic addition and removal of operating system components on computing devices based on application or user interaction over time are disclosed. Such systems, computer program products and computer program products provide one or more API intercept layers, a rules engine and a hydrate engine that facilitates the ability to dynamically rehydrate or hydrate operating system components. In an embodiment, a minimal (or core) operating system image on a computing device is deployed. Then, required components may be dynamically added (i.e., “streamed” or “rehydrated”) from storage, a server or cloud service as required by an executing application program on the computing device. In another embodiment, a totally complete operating system image is deployed on a computing device. Then, unused components may be dynamically removed (i.e., “dehydrated”) from the computing device over time based on application or user interaction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09405556&OS=09405556&RS=09405556
owner: Microsoft Technology Licensing, LLC
number: 09405556
owner_city: Redmond
owner_country: US
publication_date: 20120628
---
This Application is related to co owned co pending U.S. patent application Ser. No. 13 531 116 titled API Redirection for Limited Capability Operating Systems filed on Jun. 22 2012 which is hereby incorporated by reference as to its entire contents.

The present disclosure generally relates to computer operating systems and more particularly to systems methods and computer program products for facilitating the installation and removal of operating systems components on computing devices.

In today s technological environment it is common for an operating system the low level software that manages the interface to a computing device s hardware schedules tasks allocates storage and generally provides common services for application software executing on the computer to be built and deployed with fixed and well defined features such as an application program interface API to support a range of customer requirements. That is the operating system s API provides an interface i.e. a set of calling conventions by which application programs access the operating system and other services on a particular computing device e.g. server desktop laptop notebook tablet computer personal digital assistant PDA mobile telephone smart telephone and the like . The fixed API surface of an operating system deployed in a computing device offers application developers a fixed set of binary features e.g. executables shared libraries such as dynamically loaded libraries and the like . For example the Windows 7 operating system available from Microsoft Corporation of Redmond Wash. provides the Windows Software Development Kit SDK API which gives application developers a fixed and well known API surface with which to develop application programs.

Operating systems are typically burned into the memory e.g. ROM Flash HDD SSD etc. of a mobile desktop or embedded computing device in a configuration that meets the general purpose needs of the device. Despite being conventionally shipped as pre built images the operating system may include features or API components that are never used by client applications executing on the particular computing device platform. For fixed function devices or devices that run in a regulated environment e.g. gaming medical financial military and like environments these features should not exist in the device hardware as shipped. In these instances the unused or not required features or API components waste memory on the computing device and potentially exposes the device to malicious attack because such features are still installed and potentially operational on the device. Conversely a user may need to run an application that relies on a set of operating system features frameworks that were not included in a specific version i.e. SKU of the operating system shipped with the computing device. Thus if an operating system component which normally handles a particular API call does not exist within the particular operating system implementation the execution of an application will produce a run time error and fail.

This summary is provided to introduce a selection of concepts. These concepts are further described below in the Detailed Description section. This summary is not intended to identify key features or essential features of the claimed subject matter nor is this summary intended as an aid in determining the scope of the claimed subject matter.

Embodiments of the present disclosure meet the above identified needs by providing systems methods and computer program products that facilitate the dynamic addition and removal of operating system components on computing devices based on application or user interaction over time. Such systems methods and computer program products include one or more API intercept layers a rules engine and a dehydrate hydrate engine that facilitates the ability to dynamically dehydrate rehydrate or hydrate operating system components.

Embodiments of the present disclosure include technologies that facilitate the deployment of a minimal or core operating system image on a computing device. Then required components may be dynamically added i.e. streamed or rehydrated from local storage a network server or a cloud service i.e. the delivery of a computing resource as a service rather than a product whereby shared resources software and information are provided to computers and other devices as a metered service over a network typically the global public Internet as required by an application program executing on the computing device.

Embodiments of the present disclosure include technologies that facilitate the deployment of a totally complete operating system image on a computing device. Then unused operating system components may be dynamically removed i.e. dehydrated from the computing device over time based on application or user interaction with the computing device.

Further features and advantages of the present disclosure as well as the structure and operation of various aspects of the present disclosure are described in detail below with reference to the accompanying drawings.

The present disclosure is directed to systems methods and computer program products for facilitating the dynamic addition and removal of operating system O S components on computing devices based on application or user interaction over time.

Operating systems expose an API surface through a series of applications and dynamically loaded libraries. A single library might expose a series of API calls which may be used by one or more applications executing on a computing device. Operating systems such as Mac OS and iPhone available from Apple Inc. of Cupertino Calif. Windows and Windows Phone available from available from Microsoft Corporation of Redmond Wash. and Android available from Google Inc. of Mountain View Calif. all ship with a well defined set of operating system components and a consistent API surface to ensure application compatibility across platforms. Application developers create software applications that use a subset of the complete operating system API surface and therefore a subset of the operating system functionality. This utilized subset maps to a set of O S features technologies components within the operating system.

In an embodiment of the present disclosure a totally complete operating system image is deployed on a computing device such that unused and thus unnecessary components may be dynamically removed i.e. dehydrated from the computing device over time based on application or user interaction. In such an embodiment a developer would write an application to run on an operating system and the operating system and application are deployed. As the application executes the API call feature usage is monitored. Any features not used by the application are then removed over time. As a result a reduced operating system image becomes simpler to service and exposes less of an attack surface than a full operating system image.

In an alternate embodiment of the present disclosure a minimal or core operating system image is deployed on a computing device such that required components may be dynamically added i.e. streamed or rehydrated from a local storage a network server or a cloud service as required by an application program executing on the computing device. That is in such an embodiment an operating system ships with the minimal set of services e.g. kernel file system memory manager driver host and systems for starting stopping applications . Yet an application developer writes an application based on a full operating system SDK and the application is then deployed to the minimal operating system image. As the application executes an API Feature intercept layer catches the API call determines that the appropriate operating system component does not exist within the computing system and then causes the component feature to be rehydrated. In alternate embodiments this rehydration may come from a number of sources e.g. local staged media network service or a cloud service . Over time the operating system components match the requirements of the running application. As a result the operating system servicing model is simplified i.e. less components to service exposes less of an attack surface than a full operating system image and is potentially easier to deploy over a network to multiple computing devices.

In one embodiment the present disclosure is directed toward one or more computer systems or computing devices capable of carrying out the functionality of the embodiments described herein. An example of a computer system is shown in .

Computer system includes one or more processors such as processor . The processor is connected to a communication infrastructure e.g. a communications bus or network . Various software aspects are described in terms of this exemplary computer system. After reading this description it will become apparent to a person skilled in the relevant art s how to implement the disclosure using other computer systems and or architectures.

Computer system may include a display interface that forwards graphics text and other data from the communication infrastructure or from a frame buffer not shown for display on the display unit .

Computer system also includes a main memory preferably random access memory RAM and may also include a secondary memory . The secondary memory may include for example a hard disk drive and or a removable storage drive representing a floppy disk drive a magnetic tape drive an optical disk drive etc. The removable storage drive reads from and or writes to a removable storage unit in a well known manner. Removable storage unit represents a floppy disk magnetic tape optical disk etc. which is read by and written to by removable storage drive . As will be appreciated the removable storage unit includes a computer usable storage medium having stored therein computer software and or data.

In alternative aspects secondary memory may include other similar devices for allowing computer programs or other code or instructions to be loaded into computer system . Such devices may include for example a removable storage unit and an interface . Examples of such may include a program cartridge and cartridge interface such as that found in video game devices a removable memory chip such as an erasable programmable read only memory EPROM or programmable read only memory PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer system .

Computer system may also include a communications interface . Communications interface allows software and data to be transferred between computer system and external devices. Examples of communications interface may include a modem a network interface such as an Ethernet card a communications port a Personal Computer Memory Card International Association PCMCIA slot and card etc. Software and data transferred via communications interface are in the form of signals which may be electronic electromagnetic optical or other signals capable of being received by communications interface . These signals are provided to communications interface via a communications path e.g. channel . This channel carries signals and may be implemented using wire or cable fiber optics a telephone line a cellular link an radio frequency RF link and other communications channels.

In this document the terms computer program medium and computer usable medium are used to generally refer to media such as removable storage drive a hard disk installed in hard disk drive and signals . These computer program products provide software to computer system . The disclosure is directed to such computer program products.

Computer programs also referred to as computer control logic are stored in main memory and or secondary memory . Computer programs may also be received via communications interface . Such computer programs when executed enable the computer system to perform the features of the present disclosure as discussed herein. In particular the computer programs when executed enable the processor to perform the features of the present disclosure. Accordingly such computer programs represent controllers of the computer system .

In an embodiment where the disclosure is implemented using software the software may be stored in a computer program product and loaded into computer system using removable storage drive hard drive or communications interface . The control logic software when executed by the processor causes the processor to perform the functions of the disclosure as described herein.

In another embodiment the disclosure is implemented primarily in hardware using for example hardware components such as application specific integrated circuits ASICs . Implementation of the hardware state machine so as to perform the functions described herein will be apparent to persons skilled in the relevant art s .

As will be apparent to one skilled in the relevant art s after reading the description herein the computer architecture shown in may be configured as any number of computing devices such as a game console a portable media player a desktop a laptop a server a notebook computer a tablet computer a PDA a mobile computer a smart telephone a mobile telephone an intelligent communications device or the like.

In yet another embodiment the disclosure is implemented using a combination of both hardware and software.

Referring to a block diagram is shown that illustrates an operating system implementation environment utilized by many conventional computing systems. As will be appreciated by those skilled in the relevant art s after reading the description herein environment would exist on computing device where a computer program software application is executing.

As is well known to those skilled in the relevant art s as application executes within environment it may utilize one or more of the operating system s shared library files. In an example where computing device uses the Windows operating system available from Microsoft Corporation of Redmond Wash. such shared library files are dynamic link library files DLLs shown as DLLs in . In turn DLLs may utilize one or more operating system components shown as O S Service A F in as application executes. In this configuration certain API calls that use certain features from operating system components are not being made i.e. O S Service C and O S Service D . In an embodiment these O S components features are candidates for dehydration as described herein below.

Referring now to a block diagram illustrating an operating system implementation environment according to an embodiment of the present disclosure is shown. In such an embodiment the situation where certain unutilized features of the operating system remain installed on computing device is overcome by environment which includes an API intercept layer that facilitates the ability to make dynamic operating system component dehydration rehydration decisions on computing device . That is API intercept layer intercepts API module feature calls and logs and stores touches i.e. usage of API calls services drivers or resources of O S components . In an embodiment of the present disclosure the information captured and stored by API intercept layer facilitates a rules engine not shown in that determines when components features are to be removed from the operating system on computing device . Such a rules engine may include a management function to disable hardware components shutdown services and remove binary and other files of the O S accordingly. In the example illustrated by environment O S Service C and O S Service E may be removed from computing device . As will be appreciated by those skilled in the relevant art s after reading the description herein the operating system within environment may be a multi layer operating system where API intercept layer may function at one or more of the layers to intercept certain API calls as application executes on computing device .

Referring now to a block diagram illustrating an operating system implementation environment according to an embodiment of the present disclosure is shown. In such an embodiment environment includes API intercept layer executing applications which may utilize DLLs which in turn may need to utilize operating system component . As indicated by the dotted lines in O S Service E and O S Service C however may have been previously dehydrated or never hydrated as part of the O S that shipped with device which would normally result in application producing a run time error and failing. In such an embodiment feature component that supports the API call made by application will need to be retrieved from local network or cloud storage and be rehydrated. As will be appreciated by those skilled in the relevant art s after reading the description herein as a specific component is rehydrated other related components of the O S may also need to be modified to support such installation. 

In an embodiment as will also be appreciated by those skilled in the relevant art s after reading the description herein O S Service E may have been dehydrated by the rules engine based on its non usage by application if it was the sole application executing on device . Thus when application is later installed and executed on device O S Service E would need to be rehydrated in a manner described herein.

Referring now to a block diagram illustrating an operating system implementation environment according to an embodiment of the present disclosure is shown. In such an embodiment environment includes API intercept layer executing applications a rules engine a rehydration dehydration collectively hydrate engine and a cloud service . To illustrate this point assume executing applications utilize DLLs which in turn may need to utilize operating system components . As indicated by the dotted lines in O S Service E and O S Service C however may have been previously dehydrated or never hydrated as part of the O S that shipped with device which would normally result in application producing a run time error and failing. In such an embodiment rules engine comprises control logic to determine API service resource driver feature component that supports the API call made by application will need to be rehydrated. In turn control logic within hydrate engine under the direction of rules engine retrieves component from cloud storage so that application does not produce a run time error and fail.

As will be appreciated by those skilled in the relevant art s after reading the description herein rules engine may include a table or other data structure of rehydration dehydration collectively hydrate rules within operating system environment which uses information logged stored by API intercept layer to direct hydrate engine to dynamically dehydrate rehydrate one or more components . In an embodiment rules engine would use one or more classes of dehydration rules either pre determined defined by the manufacturer of device or extended overridden through policies later configured by a system administrator. For example a simple rule might be to remove all features that are not touched by an application after a certain time period e.g. one hour one day one year etc. of application execution. Another example may be based on the mark and sweep garbage collector model supported by the .NET Compact Framework available from Microsoft Corporation of Redmond Wash. over time components are marked as dirty i.e. not used and a periodic sweep of the O S will periodically remove any unused components . The reverse of this is also possible start by marking all components as dirty unused and as components features API calls are used then mark them as clean. Then periodically sweep remove components that are dirty. In alternate embodiment the sweep may be a one time execution model may be scheduled to run periodically or may be dynamic based on direct usage of features.

As will be appreciated by those skilled in the relevant art s after reading the description herein rehydration rules are simpler. That is an application touching a specific API service driver or other technology component would initiate the rehydration of that technology. In an embodiment however it is possible to subject rehydration to rules policies e.g. do not rehydrate under certain conditions . For example rules engine may direct hydrate engine not to rehydrate a component until the ntime an application actually needs such component i.e. the application s need for such component may be redirected to a cloud service rather than actually installing it on device if the ninstance has not yet occurred . In any event such rehydration rules like dehydration may either be pre determined defined by the manufacturer of device or extended overridden through policies later configured by a system administrator.

As will be apparent to one skilled in the relevant art s after reading the description herein in an embodiment API intercept layer rules engine and hydrate engine may collectively operate to both dehydrate and rehydrate different O S components at the same time on computing device . Further one skilled in the relevant art s after reading the description herein will appreciate that the operating system s shared library files e.g. DLLs may be the O S components that API intercept layer rules engine and hydrate engine collectively operate to dehydrate and rehydrate.

As will also be apparent to one skilled in the relevant art s after reading the description herein API intercept layer rules engine and hydrate engine that facilitate the ability to dynamically install and remove operating systems components may be part of the standard operating system that ships with a computing device or may be later added to an existing operating system as part of an update or patch .

Referring to a flowchart illustrating a dynamic operating system component hydration process according to an embodiment of the present disclosure is shown. Process which would execute within computing device begins at step with control passing immediately to step .

In step the API call utilizes a DLL which in step makes a call that is intended for an operating system component . In step however API intercept layer intercepts the call. Then in step rules engine determines if the call made by DLL is intended for an operating system component that may have been previously dehydrated or never hydrated as part of the O S that shipped with device which would normally result in application producing a run time error and failing.

If the determination of step is negative process proceeds to step . In step the intended O S component handles the call as normal.

If the determination of step is positive however process proceeds to step . In step hydrate engine under the direction of rules engine applying at least one hydrate rule retrieves the O S component from one of a number of sources e.g. local staged media network service or a cloud service so that application does not produce a run time error and fail.

Process which facilitates the dynamic installation and removal of operating systems components on computing devices then terminates as indicated by step .

In various embodiments of the present disclosure as will be appreciated by those skilled in the relevant art s after reading the description herein the determination by rules engine of what components to dehydrate rehydrate via instructions to hydrate engine may be accomplished at least at three different levels 

First at the simplest level the determination of what components to dehydrate rehydrate may be done simply by mapping API call usage to the appropriate library via API intercept layer e.g. the GetOpenFileName API call maps to Commdlg32.dll DLL in the Windows O S .

Second a level down from the first i.e. API library model mentioned above is to think about the operating system as a series of interrelated services components technologies . Thus the operating system dependencies may be mapped so that the aging dehydrating determinations about other parts of the operating system component tree made by rules engine based on API usage can be made more intelligently. For example the Windows O S supports a number of optional components e.g. the Internet Information Server IIS component that supports sub features such as FTP . Each layer of these optional components exposes internally or externally an API surface that can be used to determine whether this feature should be removed added by hydrate engine .

Third rules engine may determine what components to dehydrate rehydrate based on subdividing certain operating system technologies. That is an operating system may expose tens of thousands of API calls where there is a many to one relationship between API calls and host services e.g. the API surface of ADVAPI32.dll on Windows 7 O S . Mapping API usage to host services and removing at the bulk level may be effective at some level. Further dynamically removing API call components from within services may also be effective. Noting that some dynamic libraries contain a mixture of code data and resources each of these could also be removed added from the O S based on usage patterns.

While various aspects of the present disclosure have been described above it should be understood that they have been presented by way of example and not limitation. It will be apparent to persons skilled in the relevant art s that various changes in form and detail can be made therein without departing from the spirit and scope of the present disclosure. Thus the present disclosure should not be limited by any of the above described exemplary aspects but should be defined only in accordance with the following claims and their equivalents.

In addition it should be understood that the figures in the attachments which highlight the structure methodology functionality and advantages of the present disclosure are presented for example purposes only. The present disclosure is sufficiently flexible and configurable such that it may be implemented in ways other than that shown in the accompanying figures e.g. implementation within operating systems and computing devices other than those mentioned herein for illustration purposes .

Further the purpose of the foregoing Abstract is to enable the U.S. Patent and Trademark Office and the public generally and especially the scientists engineers and practitioners in the relevant art s who are not familiar with patent or legal terms or phraseology to determine quickly from a cursory inspection the nature and essence of this technical disclosure. The Abstract is not intended to be limiting as to the scope of the present disclosure in any way.

