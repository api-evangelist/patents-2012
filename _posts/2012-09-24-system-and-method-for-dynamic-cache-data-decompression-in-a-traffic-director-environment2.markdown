---

title: System and method for dynamic cache data decompression in a traffic director environment
abstract: Described herein are systems and methods for use with a load balancer or traffic director, and administration thereof, wherein the traffic director is provided as a software-based load balancer that can be used to deliver a fast, reliable, scalable, and secure platform for load-balancing Internet and other traffic to back-end origin servers, such as web servers, application servers, or other resource servers. In accordance with an embodiment, the traffic director can be configured to compress data stored in its cache, and to respond to requests from clients by serving content from origin servers either as compressed data, or by dynamically decompressing the data before serving it, should a particular client prefer to receive a non-compressed variant of the data. In accordance with an embodiment, the traffic director can be configured to make use of hardware-assisted compression primitives, to further improve the performance of its data compression and decompression.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09652293&OS=09652293&RS=09652293
owner: ORACLE INTERNATIONAL CORPORATION
number: 09652293
owner_city: Redwood Shores
owner_country: US
publication_date: 20120924
---
This application claims the benefit of priority to U.S. Provisional Patent Application No. 61 539 886 titled SYSTEMS AND METHODS FOR USE WITH AN APPLICATION SERVER TRAFFIC DIRECTOR CORE FEATURES filed Sep. 27 2011 and U.S. Provisional Patent Application No. 61 539 900 titled SYSTEMS AND METHODS FOR USE WITH AN APPLICATION SERVER TRAFFIC DIRECTOR ADMIN FEATURES filed Sep. 27 2011 each of which applications are herein incorporated by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The invention is generally related to a load balancer or traffic director for use in an application server middleware machine or other computing environment and is particularly related to a system and method for providing dynamic cache data decompression in such an environment.

A typical enterprise level computing environment can include many different types of computing resources e.g. web servers application servers database servers or other types of resource servers which are intended to be accessed over a network e.g. a company s internal Ethernet network or the Internet by other computers or by users operating various different types of computing devices. A familiar example is the use of a client computer such as a laptop equipped with a web browser application by which a user can access a web server via the Internet.

Today s organizations rely increasingly on their computing resources being readily available from almost any location at all times with a high level of performance. The task of ensuring that such resources are allocated efficiently often requires the use of a load balancing device to distribute requests from clients to target resources in a fair manner according to its distribution policies. These are the types of environments that embodiments of the invention can be used with.

Described herein are systems and methods for use with a load balancer or traffic director and administration thereof. In accordance with an embodiment the traffic director referred to herein in some embodiments as Oracle Traffic Director OTD is provided as a software based load balancer that can be used to deliver a fast reliable scalable and secure platform for load balancing Internet and other traffic to back end origin servers such as web servers application servers or other resource servers.

Embodiments of the traffic director are particularly useful in application server middleware machine and similar high performance enterprise level computing environments such as Oracle WebLogic and Exalogic environments.

In accordance with an embodiment the traffic director can be configured to compress data stored in its cache and to respond to requests from clients by serving content from origin servers either as compressed data or by dynamically decompressing the data before serving it should a particular client prefer to receive a non compressed variant of the data. In accordance with an embodiment the traffic director can be configured to make use of hardware assisted compression primitives to further improve the performance of its data compression and decompression.

As described above today s organizations rely increasingly on their computing resources being readily available from almost any location at all times with a high level of performance. The task of ensuring that such resources are allocated efficiently often requires the use of a load balancing device to distribute requests from clients to target resources in a fair manner according to its distribution policies.

Described herein are systems and methods for use with a load balancer or traffic director and administration thereof. In accordance with an embodiment the traffic director referred to herein in some embodiments as Oracle Traffic Director OTD is provided as a software based load balancer that can be used to deliver a fast reliable scalable and secure platform for load balancing Internet and other traffic to back end origin servers such as web servers application servers or other resource servers.

Embodiments of the traffic director are particularly useful in application server middleware machine and similar high performance enterprise level computing environments such as Oracle WebLogic and Exalogic environments.

In accordance with an embodiment the traffic director serves as an entry point for traffic such as hypertext transfer protocol HTTP and hypertext transfer protocol secure HTTPS requests which are received from clients or client devices for communication to a back end of resources or resource servers acting as origin servers. Each traffic director includes one or more traffic director instances defined by a configuration wherein the configuration provides information about various elements of that instance such as listeners origin servers failover groups and logs.

Examples of the types of clients that can be used with the system include computer servers laptop computers portable devices such as smartphones and other types of computing devices some of which may include e.g. a web browser application for accessing a web server.

Examples of the types of resources that can be used as origin servers include lightweight directory access protocol LDAP servers web servers multimedia servers application servers database servers and other types of resources.

In accordance with an embodiment the traffic director can perform tasks such as distributing requests to origin servers based on one or more load balancing methods routing requests based on specified rules caching frequently accessed data prioritize traffic and controlling the quality of service.

From a performance perspective in accordance with an embodiment the traffic director can include an architecture that enables it to handle large volumes of traffic with low latency. For example embodiments can be optimized for use within a high performance computing environment such as e.g. Oracle Exalogic Elastic Cloud or to communicate with origin servers at the back end using a high performance communication fabric such as e.g. InfiniBand. In accordance with an embodiment to support high availability the traffic director can recognize failover groups of traffic director instances that provide active passive or active active failover. As the volume of traffic to a network increases the traffic director environment can be scaled by reconfiguring the traffic director with additional back end servers to which it can route requests or by modifying the rate at which traffic is communicated.

From an administration perspective in accordance with an embodiment the traffic director is designed to be easy to install configure and use and can include a simple wizard driven graphical interface as well as a robust command line interface for use by an administrator in managing traffic director instances. For any particular organization depending on their business requirements such as the number of back end applications for which they want to use the traffic director to balance requests their internal requirements such as security and the traffic director features they wish to use the traffic director topology can be varied to address their needs. For example a simple traffic director topology might initially utilize a single traffic director instance running on a dedicated compute node and distributing client requests to a pool of servers at the back end. To avoid a single point of failure an administrator can configure two homogenous traffic director instances running on different nodes and forming an active passive failover pair. To improve resource utilization an administrator can configure the two traffic director instances in active active mode with two virtual IP addresses.

In accordance with an embodiment the following terms are used herein. It will be evident that in accordance with other embodiments additional and or different terms can be used.

Configuration A collection of configurable elements e.g. metadata that determines the run time behavior of a traffic director instance. In accordance with an embodiment a typical configuration contains definitions for listeners e.g. IP address and port combinations on which the traffic director should listen for requests together with information about servers at the back end to which the requests should be sent. The traffic director can read the configuration when a traffic director instance starts and while processing client requests. Instance Traffic Director Instance A traffic director server that is instantiated from a configuration and deployed on an administration node or the administration server. Cluster A collection of two or more traffic director instances that are created from the same configuration. Failover Group Two or more traffic director instances grouped by a virtual IP address VIP . In accordance with an embodiment a failover group provides high availability in active passive mode wherein requests are received at the VIP and routed to the instance that is designated as the primary instance if the primary instance is not reachable requests are routed to the backup instance. In accordance with an embodiment for active active failover two failover groups are required each with a unique VIP but both comprising the same nodes with the primary and backup roles reversed each instance in the failover group is designated as the primary instance for one VIP and the backup for the other VIP. Administration Server A specially configured traffic director instance that hosts the interfaces including administration console and command line interface through which an administrator can create traffic director configurations deploy them as instances on administration nodes and manage the instances. Administration Node A physical server that is designated as a host on which the administrator can deploy traffic director instances. In accordance with an embodiment on a given node the administrator can deploy only one instance of a configuration. INSTANCE HOME A directory of the administrator s choice on the administration server or an administration node in which the configuration data and binary files pertaining to traffic director instances are stored. ORACLE HOME A directory of the administrator s choice in which the administrator installs the traffic director binaries. Administration Console A web based graphical interface on the administration server that the administrator can use to create deploy and manage traffic director instances. Client In accordance with an embodiment an agent e.g. a web browser or an application that sends requests e.g. HTTP and HTTPS requests to traffic director instances. Examples of the types of clients that can be used with the system include computer servers laptop computers portable devices such as smartphones and other types of computing devices some of which may include e.g. a web browser application for accessing a web server. Origin Server In accordance with an embodiment a resource or server at the back end to which the traffic director forwards the requests that it receives from clients and from which it receives responses to client requests. Examples of the types of resources that can be used as origin servers include lightweight directory access protocol LDAP servers web servers multimedia servers application servers database servers and other types of resources. Origin server Pool A collection of origin servers that host the same application or service and that the administrator can load balance by using the traffic director. In accordance with an embodiment the traffic director distributes client requests to servers in the origin server pool based on the load distribution method s that are specified for that pool. Virtual Server A virtual entity within a traffic director server instance that provides a unique IP address or host name and port combination through which the traffic director can serve requests for one or more domains. In accordance with an embodiment a traffic director instance on a node can contain multiple virtual servers. The administrator can configure settings such as the maximum number of incoming connections specifically for each virtual server and can also customize how each virtual server handles requests.

For any particular organization depending on their business requirements such as the number of back end applications for which they want to use the traffic director to balance requests their internal requirements such as security and the traffic director features they wish to use the traffic director topology can be varied to address their needs. The back end can include one or more origin servers examples of which can include LDAP servers web servers multimedia servers application servers and database servers . In accordance with an embodiment the application server can be a WebLogic server WLS . Other types of origin servers and application servers can be used depending on the particular needs of the organization. Each of the origin servers can communicate with one another and with the traffic director via an internal network such as an Ethernet network.

In accordance with an embodiment the traffic director can receive requests from clients via an external network the Internet and in the case of many organizations a firewall . Examples of the types of clients that can be used with the system include computer servers laptop computers portable devices such as smartphones and other types of computing devices some of which may include e.g. a web browser application for accessing a web server.

In the example illustrated in the topology comprises two traffic director instances and forming an active passive failover group and including a single virtual IP address for receipt of client requests. When the active instance in this example instance receives a request it determines the server pool to which the request should be sent and forwards the request to one of the servers in that pool based on the load distribution method s that are specified for that pool.

Although the example shown in illustrates the use of two server pools at the back end an administrator can configure the traffic director to route requests to servers in multiple pools. In the active passive setup illustrated in one node in the failover group is redundant at any point in time. In accordance with an embodiment to improve resource utilization the administrator can configure the two traffic director instances in active active mode with two virtual IP addresses in this scenario each instance caters to requests received on one virtual IP address and backs up the other instance.

As shown in in accordance with an embodiment the traffic director can include one or more Netscape portable runtime NSPR and Network Security Services NSS layers. In accordance with an embodiment the traffic director can also include an HTTP engine having one or more access control logging HTTP compression I O filter error handling rate shaping intrusion detection or other components and a reverse proxy component having one or more http client response client health check routing policies load controls load balancer WLS support sticky routing or other components. In accordance with an embodiment the traffic director can also include an HTTP connection handler having one or more acceptor threads worker threads keep alive threads or other components. In accordance with an embodiment the traffic director can also include a TCP connection handler having one or more TCP threads load balancer or other components. In accordance with an embodiment the traffic director can also include one or more events schedule dynamic configuration monitoring or other components.

It will be evident that in accordance with other embodiments additional and or different components can be used.

In accordance with an embodiment an administration environment includes an administration interface which in turn includes one or more of an administration console GUI and or a command line interface that enables an administrator to configure or otherwise administer the traffic director or its instances .

In accordance with an embodiment the traffic director can be configured to respond to requests from clients by serving content from origin servers either as compressed data or by dynamically decompressing the data before serving it should a particular client prefer to receive a non compressed variant of the data.

In accordance with an embodiment the determination as to whether to serve data in either its compressed or decompressed format can be provided in the initial client request e.g. through the use of HTTP headers which provides flexibility and interoperability. The compression and decompression of such data can be configured to work together with the traffic director s built in HTTP caching functionality.

In accordance with an embodiment the traffic director includes a cache which can be enabled for use with one or more of the origin servers. Although shown in as a single cache which is shared by several traffic director instances in accordance with an embodiment several such caches can be used and or each traffic director instance can have its own cache.

In accordance with an embodiment when caching is enabled as client requests are communicated to the origin servers and content is returned from those origin servers in response to the requests the traffic director can cache one or more sets of data corresponding to origin server content within its cache according to its configuration. As an illustrative example a particular origin server may be configured to serve image files e.g. GIF files and other content to clients and the traffic director may be configured to cache the image files received from that particular origin server within its cache for a particular period of time.

In accordance with an embodiment the traffic director operates as an in memory database which means that caching data requires use of computer memory and which in turn affects both system cost and performance. To address this in accordance with an embodiment the traffic director can compress the data to be stored in its cache prior to caching the compressed data . This reduces the overall cache size required and hence memory requirements and or allows a greater number of data entries to be stored within a particular cache size.

In accordance with an embodiment the cached data can then be provided to a client in response to a request from the client either in its compressed format or in a decompressed format depending on the needs of the client.

For example while some e.g. browser clients can accept compressed data within a response other clients e.g. mobile phones may require response data to be provided in a non compressed format.

As shown in in accordance with an embodiment a client A can indicate to the traffic director that a response can include compressed data . In accordance with an embodiment this indication can be communicated by the client to the traffic director as part of a request component e.g. in the case of HTTP traffic a HTTP request header . In response the traffic director can either communicate the request to the origin server to obtain a response or if the traffic director determines that a copy of the data is currently stored within its cache in a compressed format e.g. compressed data A it can return that data in the compressed format to the client.

As further shown in In accordance with an embodiment a client B can indicate to the traffic director that a response cannot include compressed data i.e. that only non compressed data is acceptable . In accordance with an embodiment this indication can be similarly communicated by the client to the traffic director as part of a request component e.g. a HTTP request header. In response the traffic director can again either communicate the request to the origin server to obtain a response or if the traffic director determines that a copy of the data is currently stored within its cache in a compressed format e.g. compressed data B decompress that data and return the decompressed variant of the data to the client.

Although illustrated in as affirmative indications from a client e.g. through the use of HTTP request headers in accordance with an embodiment the system can also recognize defaults e.g. that by default only non compressed data should be considered acceptable to a client unless a client indicates otherwise and operate accordingly.

Using the above functionality the cache need not store the data in two different e.g. compressed versus non compressed formats to suit the needs of different clients but instead only a single compressed data instance format need be stored within the cache and the data decompressed as needed depending on the needs of the particular client making the request.

In accordance with an embodiment the traffic director can be configured to make use of hardware assisted compression primitives for example Intel s Integrated Performance Primitives IPP to further improve the performance of its data compression and decompression including the HTTP caching and dynamic decompression features described above.

In accordance with an embodiment a computer hardware such as a processor can be associated with a compression decompression library which in turn can be used to improve the performance of compression and decompression operations on certain processors. For example some computer hardware manufactures provide a zlib library for use with their product e.g. Intel provide its IPP library which can be preloaded into the system during startup. In accordance with an embodiment if a compression decompression library is made available the traffic director can make use of the library to improve performance of its compression and decompression operations.

The present invention may be conveniently implemented using one or more conventional general purpose or specialized digital computer computing device machine or microprocessor including one or more processors memory and or computer readable storage media programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software art.

In some embodiments the present invention includes a computer program product which is a non transitory storage medium or computer readable medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include but is not limited to any type of disk including floppy disks optical discs DVD CD ROMs microdrive and magneto optical disks ROMs RAMs EPROMs EEPROMs DRAMs VRAMs flash memory devices magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data.

The foregoing description of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Although some of the described embodiments describe features in the context of an Oracle Traffic Director environment the described features can also be used in the context of other computing environments. Many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence.

