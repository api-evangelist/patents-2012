---

title: On-the-fly determining of alert relationships in a distributed system
abstract: A system provides a controller user interface control and/or display of aspects of a storage area network (SAN) and components thereof, including performance characteristics and alert relationship analyses. The controller enables determinations of alert relationships “on-the-fly” for alerts affecting and affected by multiple causes, symptoms and impacts in the SAN, including on-the-fly determinations of root causes. The on-the-fly determinations of the controller provide that the alert relationships may be determined in response to a query or request by the user without requiring the maintaining of a large stored hierarchical relationship structure of alerts.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08812542&OS=08812542&RS=08812542
owner: EMC Corporation
number: 08812542
owner_city: Hopkinton
owner_country: US
publication_date: 20120330
---
This application relates to storage area networks and more particularly to the field of on the fly determining of alert relationships in a distributed system such as a storage area network.

Host processor systems may store and retrieve data using storage devices also referred to as storage arrays containing a plurality of host interface units host adapters disk drives and disk interface units disk adapters . Such storage devices are provided for example by EMC Corporation of Hopkinton Mass. and disclosed in U.S. Pat. No. 5 206 939 to Yanai et al. U.S. Pat. No. 5 778 394 to Galtzur et al. U.S. Pat. No. 5 845 147 to Vishlitzky et al. and U.S. Pat. No. 5 857 208 to Ofek which are incorporated herein by reference. The host systems access the storage device through a plurality of channels provided therewith. Host systems provide data and access control information through the channels of the storage device and the storage device provides data to the host systems also through the channels. The host systems do not address the disk drives of the storage device directly but rather access what appears to the host systems as a plurality of logical volumes. Different sections of the logical volumes may or may not correspond to the actual disk drives. The hosts storage devices and or other elements such as switches and or array components may be provided as part of a storage area network SAN .

Performance characteristics of the storage devices and or other elements of the SAN may be monitored according to different performance statistics and measures. Performance characteristics may include for example performance data capacity data and or discovery data including configuration data and or topology data among other characteristics. As an example performance characteristics of input output I O data paths among storage devices and components may be measured and may include I O operations e.g. measured in I Os per second and Mbs per second initiated by a host that will result in corresponding activity in SAN fabric links storage array ports and adapters and storage volumes. Other characteristics may similarly be measured. Such characteristics may be significant factors in managing storage system performance for example in analyzing use of lowering access performance versus more expensive higher performance disk drives in a SAN or by expanding number of SAN channels or channel capacity. Users may balance performance capacity and costs when considering how and whether to replace and or modify one or more storage devices or components.

Known techniques and systems for performing root cause and impact analysis of events occurring in a system may provide automated processes for correlating the events with their root causes. Such automation techniques address issues of an outage causing a flood of alarms in a complex distributed system comprised of many e.g. thousands of interconnected devices. Reference is made for example to U.S. Pat. No. 7 529 181 to Yardeni et al. entitled Method and Apparatus for Adaptive Monitoring and Management of Distributed Systems that discloses a system for providing adaptive monitoring of detected events in a distributed system U.S. Pat. No. 7 003 433 to Yemini et al. entitled Apparatus and Method for Event Correlation and Problem Reporting that discloses a system for determining the source of a problem in a complex system of managed components based upon symptoms and U.S. Pat. No. 6 965 845 to Ohsie et al. entitled Method and Apparatus for System Management Using Codebook Correlation with Symptom Exclusion that discloses a system for correlating events in a system and provides a mapping between each of a plurality of groups of possible symptoms and one of a plurality of likely problems in the system all of which are assigned to EMC Corporation and are incorporated herein by reference. However it is noted that such known techniques and systems may involve the maintaining of a large hierarchical relationship structure of alerts that may cause undesirable performance bottlenecks in some circumstances such as in connection with the processing of updates in the distributed system.

Accordingly it would be desirable to provide a system that may be advantageously and efficiently used to determine alert relationships in a SAN including relationships among root causes symptoms and impacts of events on various components of the SAN.

According to the system described herein a method for determining alert relationships in a distributed system includes receiving an alert for the distributed system. It is determined whether alert relationship information is requested in a query concerning the received alert. An alert relationship path is determined for traversal based on the received alert and responsive to the query. The alert relationship path is traversed to obtain alert relationship information responsive to the query wherein the traversing of the alert relationship path is performed on the fly. The alert relationship information responsive to the query is displayed. The distributed system may include a storage area network. The method may be performed using a controller having a console providing a user interface. The console may include a RESTful interface. The alert relationship information may include at least one root cause of the received alert and or at least one impact caused by the received alert. The alert relationship path may include at least alert beyond immediate preceding or subsequent relationship alerts of the received alert.

According further to the system described herein a non transitory computer readable medium stores software for determining alert relationships in a distributed system. The software includes executable code that receives an alert for the distributed system. Executable code may be provided that determines whether alert relationship information is requested in a query concerning the received alert. Executable code may be provided that determines an alert relationship path for traversal based on the received alert and responsive to the query. Executable code may be provided that traverses the alert relationship path to obtain alert relationship information responsive to the query wherein the traversing of the alert relationship path is performed on the fly. Executable code may be provided that displays the alert relationship information responsive to the query. The distributed system may include a storage area network. The software may be executed using a controller having a console providing a user interface. The console may include a RESTful interface. The alert relationship information may include at least one root cause of the received alert and or at least one impact caused by the received alert. The alert relationship path may include at least alert beyond immediate preceding or subsequent relationship alerts of the received alert.

According further to the system described herein a system for determining alert relationships in a distributed system includes a controller providing a console with a user interface wherein the controller includes at least one processor that executes software stored on a computer readable medium The software includes executable code that receives an alert for the distributed system. Executable code may be provided that determines whether alert relationship information is requested in a query concerning the received alert. Executable code may be provided that determines an alert relationship path for traversal based on the received alert and responsive to the query. Executable code may be provided that traverses the alert relationship path to obtain alert relationship information responsive to the query wherein the traversing of the alert relationship path is performed on the fly. Executable code may be provided that displays the alert relationship information responsive to the query. The distributed system may include a storage area network. The console may include a RESTful interface. The alert relationship information may include at least one root cause of the received alert and or at least one impact caused by the received alert. The alert relationship path may include at least alert beyond immediate preceding or subsequent relationship alerts of the received alert.

In an embodiment the storage device may include one or more Remote Data Facility RDF adapter units RA s . An RDF product produced by EMC Corporation may be used to copy data from one storage device to another. For example if a host writes data to a first storage device e.g. a local storage device it may be desirable to copy that data to a second storage device provided in a different location e.g. a remote storage device . The RA s are coupled to an RDF link and are similar to the HA s but are used to transfer data between the storage device and other storage devices that are also coupled to the RDF link . The storage device may be coupled to additional RDF links not shown in addition to the RDF link . For further discussion of RDF and the use thereof in data recovery and storage techniques see for example U.S. Pat. No. 5 742 792 to Yanai et al. entitled Remote Data Mirroring and U.S. Pat. No. 7 779 291 to Yoder et al. entitled Four Site Triangular Asynchronous Replication which are incorporated herein by reference.

The storage device may also include one or more disks each containing a different portion of data stored on the storage device . Each of the disks may be coupled to a corresponding one of a plurality of disk adapter units DA that provides data to a corresponding one of the disks and receives data from a corresponding one of the disks . The disks may include any appropriate storage medium or mechanism including hard disks solid state storage flash memory etc. Note that in some embodiments it is possible for more than one disk to be serviced by a DA and that it is possible for more than one DA to service a disk. It is noted that the term data as used herein may be appropriately understood in various embodiments to refer to data files extents blocks chunks and or other designations that indicate a unit segment or collection of data.

The logical storage space in the storage device that corresponds to the disks may be subdivided into a plurality of volumes or logical devices. The logical devices may or may not correspond to the physical storage space of the disks . Thus for example the disk may contain a plurality of logical devices or alternatively a single logical device could span both of the disks . The hosts may be configured to access any combination of logical devices independent of the location of the logical devices on the disks . A device such as a logical device described above has a size or capacity that may be expressed in terms of device geometry. The device geometry may include device geometry parameters regarding the number of cylinders in the device the number of heads or tracks per cylinder and the number of blocks per track and these parameters may be used to identify locations on a disk. Other embodiments may use different structures.

One or more internal logical data path s exist between the DA s the HA s the RA s and the memory . In some embodiments one or more internal buses and or communication modules may be used. In some embodiments the memory may be used to facilitate data transferred between the DA s the HA s and the RA s . The memory may contain tasks that are to be performed by one or more of the DA s the HA s and the RA s and a cache for data fetched from one or more of the disks . Use of the memory is further described elsewhere herein in more detail. The storage device may be provided as a stand alone device coupled to the hosts as shown in or alternatively the storage device may be part of and or otherwise coupled to a storage area network SAN that may include a plurality of other storage devices as well as switches routers network connections etc. as further discussed elsewhere herein.

The diagram also shows an optional communication module CM that provides an alternative communication path between the directors . Each of the directors may be coupled to the CM so that any one of the directors may send a message and or data to any other one of the directors without needing to go through the memory . The CM may be implemented using conventional MUX router technology where a sending one of the directors provides an appropriate address to cause a message and or data to be received by an intended receiving one of the directors . Some or all of the functionality of the CM may be implemented using one or more of the directors so that for example the directors may be interconnected directly with the interconnection functionality being provided on each of the directors . In addition a sending one of the directors may be able to broadcast a message to all of the other directors at the same time.

In some embodiments one or more of the directors may have multiple processor systems thereon and thus may be able to perform functions for multiple directors. In some instances at least one of the directors having multiple processor systems thereon may simultaneously perform the functions of at least two different types of directors e.g. an HA and a DA . Furthermore in some embodiments at least one of the directors having multiple processor systems thereon may simultaneously perform the functions of at least one type of director and perform other processing with the other processing system. In addition the memory may be a global memory in which all or at least part of the global memory may be provided on one or more of the directors and shared with other ones of the directors . The memory may be part of a global memory distributed across the processor systems of more than one storage device and accessible by each of the storage devices.

Note that although specific storage device configurations are disclosed in connection with it should be understood that the system described herein may be implemented on any appropriate platform. Thus the system described herein may be implemented using a platform like that described in connection with or may be implemented using a platform that is somewhat or even completely different from any particular platform described herein.

A storage area network SAN may be used to couple one or more host devices with one or more storage devices in a manner that allows reconfiguring connections without having to physically disconnect and reconnect cables from and to ports of the devices. A storage area network may be implemented using one or more switches to which the storage devices and the host devices are coupled. The switches may be programmed to allow connections between specific ports of devices coupled to the switches. A port that can initiate a data path connection may be called an initiator port while the other port may be deemed a target port.

In various embodiments the system described herein may be used in connection with performance data collection for data migration and or data mirroring techniques using a SAN. Data transfer among storage devices including transfers for data migration and or mirroring functions may involve various data synchronization processing and techniques to provide reliable protection copies of data among a source site and a destination site. In synchronous transfers data may be transmitted to a remote site and an acknowledgement of a successful write is transmitted synchronously with the completion thereof. In asynchronous transfers a data transfer process may be initiated and a data write may be acknowledged before the data is actually transferred to directors at the remote site. Asynchronous transfers may occur in connection with sites located geographically distant from each other. Asynchronous distances may be distances in which asynchronous transfers are used because synchronous transfers would take more time than is preferable or desired. Examples of data migration and mirroring products includes Symmetrix Remote Data Facility SRDF products from EMC Corporation.

For further discussion of techniques involving the configuration and use of storage area networks including virtual storage area networks reference is made for example to U.S. Pat. No. 8 028 062 to Wigmore et al. entitled Non Disruptive Data Mobility Using Virtual Storage Area Networks With Split Path Virtualization which is assigned to EMC Corporation and is incorporated herein by reference that discloses techniques for the creation of a SAN centric storage virtualization layer that allows data mobility and migration without disruption to one or more hosts servers attached to the SAN. Reference is also made to U.S. Pat. No. 7 441 023 to Benjamin et al. entitled Method and Apparatus for Modeling and Analyzing MPLS and Virtual Private Networks U.S. Pat. No. 7 720 003 to Benjamin et at entitled Model Based Method and Apparatus for Determining MPLS Network Properties and U.S. Pat. No. 7 783 778 to Benjamin entitled Model Based Method and Apparatus for Determining Virtual Private Network Topologies which are assigned to EMC Corporation and are all incorporated herein by reference that disclose various techniques for discovering and identifying network properties and topologies in a network represented by a model.

The selection and or identification of the I O path may be performed according to multiple selection factors and using known path selection techniques. Reference is made for example to U.S. Pat. No. 7 688 753 to Zimran et al. entitled Selection of a Data Path Based on One or More Performance Characteristics of a Computer System which is assigned to EMC Corporation and is incorporated herein by reference and which discloses techniques for data path selection based on performance characteristics of a computer system using a path selection module. Reference is also made to U.S. Pat. No. 6 434 637 to D Errico entitled Method and Apparatus for Balancing Workloads Among Paths in a Multi Path Computer System Based on the State of Previous I O Operations which is assigned to EMC corporation and is incorporated herein by reference and which discloses techniques for selecting one of at least two I O data paths for transmission of the next I O operation based upon a state of previously assigned I O operations queued for transmission over the I O paths.

It is further noted that the system described herein may be used in connection with simulation of data storage systems for evaluation purposes. For example I O data paths of simulated storage system configurations may be evaluated to determine preferred configurations and or identify potential problems of a possible I O data path and elements thereof. Suitable data storage system simulation tools that may be used in connection with the system described herein may include systems and methods like that disclosed in U.S. Pat. No. 7 392 360 to Aharoni et al. entitled Method and System for Capacity Planning and Configuring One or More Data Storage Systems U.S. Pat. No. 7 292 969 to Aharoni et al. entitled Method and System for Simulating Performance on One or More Storage Systems and U.S. patent application Ser. No. 13 065 806 to Smirnov et al. filed Mar. 30 2011 entitled Write Pacing Simulation Tool which are all assigned to EMC Corporation and which are all incorporated herein by reference.

In the illustrated example of the console of the controller is shown displaying SAN topology corresponding to one or more I O data paths for a HOST N of the SAN. The console may be a RESTful representational state transfer interface accessible via the Internet. The console may include a graphical section that shows a visual topology representation of the SAN and components thereof. For example the section graphical displays the host HOST N coupled via SAN switches to one or more storage devices arrays . Section may display map details of the SAN elements for example performance measures for particular elements of I O data paths in graph form as well as in text or tabulated form . The performance measures displayed may include those discussed elsewhere herein including workload and performance characteristics such as CPU utilization memory utilization for the host and IOps I O in Mb per sec response time in ms throughput in KBps and queue length for host devices switches arrays etc. among other appropriate measures.

Section indicates that multiple types of detail and performance measures may be displayed in various forms for the application host including features corresponding to the I O data path attributes performance capacity alerts connectivity path details virtual machine VM information data stores configuration changes discovery details and group details. A link button may be provided to view edit performance collection settings. Additionally according to an embodiment portion indicates that historical or past performance data collection may be maintained by the system. For example a user may view past performance data collection from the prior day prior week prior month and or any other customizable date range.

The controller according to the system described herein may provide for analysis and display of alerts for root causes symptoms and impacts via a single application control. In an embodiment the controller may be part of a data collection tool that may provide for collection various types of data concerning performance characteristics of the storage devices and or other elements of a storage area network SAN including I O data paths that may be monitored according to various statistics and measures. Performance characteristics may include for example performance data capacity data discovery data including configuration data and or topology data among other characteristics. Examples of various performance characteristics may include CPU utilization memory utilization for the host and IOps I O in Mb per sec response time in ms throughput in KBps discovered hosts of an I O data path queue length for host devices whether the hosts are virtual e.g. running as guest operating system or a virtual machine VM or not the hosts IP addresses operating systems and versions thereof whether the host is in a group or cluster and or other appropriate performance characteristics.

In various embodiments the component may be an application installed on an application host or other computer providing SAN administration and or management functionality and or may be installed on one or more of the hosts coupled to the SAN. In an embodiment the component may be used in connection with EMC Ionix products including the EMC Ionix Unified Infrastructure Manager UIM and or EMC Ionix Storage Insight for Availability produced by EMC Corporation of Hopkinton Mass. Other storage management products that may be used in connection with the system described herein may include for example EMC s ProSphere product and a Vblock platform product produced by VCE Company LLC.

In an embodiment the statistics used by the component according to the system described herein may be gathered by the component according to the data collection techniques discussed elsewhere herein. Reference is made for example to U.S. patent application Ser. No. 13 335 316 to Lim et al. filed Dec. 22 2011 and entitled Path Performance Data Collection which is assigned to EMC Corporation and is incorporated herein by reference that discloses controlled tuning performance data collection provided through a single application controller of a path performance data collection tool and may be used in connection with the system described herein. The performance data collection may be turned on or off from the application host running the tool via a user interface. Lim s tool may automatically e.g. without user intervention update performance data collection characteristics as the application host I O data path changes according to user controlled settings but without requiring further user intervention during the updating. Turning on path performance data collection on the application host via the user interface may automatically set up synchronized performance data collection for all managed objects within an I O data path.

In various embodiments data used in connection with the system described herein may obtained using other data collection devices and mechanisms including products produced by EMC Corporation such as the EMC Workload Analyzer WLA the Symmetrix Performance Analyzer SPA the Symmetrix CLI statistics collection daemon STP the Storage Configuration Advisor SCA and or the ProSphere Discovery Engine among other possible collection devices applications and or appliances. Reference is made for example to U.S. Pat. No. 6 622 221 to Zahavi entitled Workload Analyzer and Optimizer Integration which is assigned to EMC Corporation and is incorporated herein by reference and which discloses techniques used in connection with evaluating the performance of proposed device swap plans in accordance with past performance data collected.

According to the system described herein if the user wants to obtain further information concerning the alert C the user may request further information for example using one or more query buttons and or other appropriate query mechanism submitted via the controller . In an embodiment the user may query the controller to determine the RootCausedBy information for the alert C and determine by traversal of an alert relationship path as further discussed elsewhere herein that alert A is the root cause of alert C and obtain alert A s properties. It is noted that there is a possibility that alert C is caused by multiple alerts in which case the controller may traverse all possible alert relationship paths as further discussed elsewhere herein and determine all root cause alerts of C. A similar algorithm may be applied in a different direction for example to determine impact alerts caused by alert C.

TABLE 1 below shows alert relationship information that may be obtained by the controller based on processing according to the system described herein for a use case example in which A causes B. B causes C. C impacts I and A impacts I.

In the above noted example the controller determines that R is a root cause alert of alert S and may store this information e.g. in a RootCauseList. The controller may then pop alert S from the stack and traverse a path through tree beginning with node S. In this example the controller will traverse S back through S to R to determine that R is the root cause via the S path. The controller may determine from the RootCauseList that R has already been determined as a root cause for the alert S. If the controller determines that there are no further alerts from the stack to be traversed the controller may then return to the requesting user the RootCauseList alerts for S specifically return that R is the root cause alert for alert S. It is noted that a similar algorithm as that noted above may be applied in reverse to determine impact alerts caused by a particular alert. For example for a received alert S for which the user desires to know impact alerts caused thereby the controller may traverse the tree in a manner similar to that noted discussed above but in a different direction e.g. paths beginning with alerts S and S respectively to determine that impact alerts and e.g. which may be stored in a ImpactCausedList are caused by the alert S.

After the step processing proceeds to a step where an alert relationship path is determined for traversal. For example to determine a root cause of a received alert the beginning of the traversal path will be an immediately preceding cause of the received alert. In the case where there are more than one preceding causes all but one of the causes will be temporarily suspended e.g. pushed onto a stack and or other software structure for later retrieval and the remaining cause will indicate the beginning of the path for traversal. A similar but reverse process may be used for obtaining a desired impact of a received alert. After the step processing proceeds to a step where the selected alert relationship path is traversed. After the step processing proceeds to a step where desired alert relationship information e.g. root cause or impact is obtained and stored.

After the step processing proceeds to a test step where it is determined if another path exists for received alert. For example if the received alert was caused by two different alerts and a first one of the causality alerts was initially used to establish the path for traversal then the second of the causality alerts may be used to establish another path. Accordingly if at the test step it is determined that another path exists then processing proceeds back to the step to determine the next alert relationship path for traversal. For example the next causality alert may be popped from the software stack where it has been temporarily stored. If at the test step it is determined that another path does not exist for the received alert then processing proceeds to a step where the obtained and stored alert relationship information is displayed using a console of a controller for example responsive to a user s query. After the step processing is complete.

Various embodiments discussed herein may be combined with each other in appropriate combinations in connection with the system described herein. Additionally in some instances the order of steps in the flowcharts flow diagrams and or described flow processing may be modified where appropriate. Further various aspects of the system described herein may be implemented using software hardware a combination of software and hardware and or other computer implemented modules or devices having the described features and performing the described functions. Software implementations of the system described herein may include executable code that is stored in a computer readable medium and executed by one or more processors. The computer readable medium may include a computer hard drive ROM RAM flash memory portable computer storage media such as a CD ROM a DVD ROM a flash drive and or other drive with for example a universal serial bus USB interface and or any other appropriate tangible or non transitory computer readable medium or computer memory on which executable code may be stored and executed by a processor. The system described herein may be used in connection with any appropriate operating system.

Other embodiments of the invention will be apparent to those skilled in the art from a consideration of the specification or practice of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with the true scope and spirit of the invention being indicated by the following claims.

