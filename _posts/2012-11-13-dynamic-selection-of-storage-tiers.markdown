---

title: Dynamic selection of storage tiers
abstract: An operating system is configured to receive a request to store an object that does not specify the location at which the object should be stored. The request might also include an optimization factor and one or more object location factors. The operating system might also generate object location factors or retrieve object location factors from one or more external locations. Object location factors might also be utilized that are based upon properties of the object to be stored. Utilizing the object location factors, and the optimization factor if provided, the operating system dynamically selects an appropriate storage tier for storing the object. The tiers might include a local storage tier, a local network storage tier, a remote network storage tier, and other types of storage tiers. The object is then stored on the selected storage tier. The object may be retrieved from the storage tier at a later time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09460099&OS=09460099&RS=09460099
owner: Amazon Technologies, Inc.
number: 09460099
owner_city: Seattle
owner_country: US
publication_date: 20121113
---
A software developer may need to make many decisions about where to store data utilized by a program. Once the developer has made these decisions the developer explicitly specifies where the data used by a program is to be stored. For example a developer might utilize a particular programming function to store program data in random access memory RAM . A developer might similarly utilize a different programming function in order to store data in a different location such as on a network server. As a result it is often necessary for developers to be aware of all of the potential locations for storing data and additionally to understand the frequently complex mechanisms for storing data in the various types of available locations. Moreover a programmer might not always select the most appropriate location for storing data and as a result application performance might be negatively impacted.

The following detailed description is directed to technologies for dynamic selection of storage tiers. Utilizing the technologies described herein an operating system can dynamically select an appropriate storage tier for storing an object based upon one or more object location factors. The object location factors may include factors such as the cost of storing data at each tier the bandwidth or latency associated with each storage tier the type of data being stored and or other considerations. By utilizing object location factors to dynamically select an appropriate storage tier for storing objects a developer can be freed from making the decisions regarding where objects are to be stored and from the complex mechanisms utilized to actually store data. Additional details regarding these and other aspects of the concepts and technologies disclosed herein for dynamic selection of storage tiers are provided below.

According to one aspect presented herein an operating system is configured with a storage manager that provides functionality for dynamically selecting a storage tier for storing objects both big and small. Other components within an operating system might also provide the functionality described herein as being performed by the storage manager. The objects might be data objects utilized in the execution of the operating system application programs or other types of processes. It is intended that the term object as utilized herein encompass the storage of any type of digital data utilized by any type of executable process.

In order to store an object an application program may be configured to make an unqualified request to the storage manager to store an object. The term unqualified as utilized herein means that the request does not specify the location at which an object should be stored. The request may however include data defining an optimization factor and potentially one or more object location factors. As will be described in greater detail below the storage manager may utilize the optimization factor and one or more of the object location factors provided with the request to dynamically select a storage tier for storing the object.

The storage manager may also be configured in embodiments to generate one or more object location factors that might also be utilized when selecting a storage tier for an object. For example the storage manager might be configured to monitor the bandwidth and or latency of a network or other type of connection to the storage tiers. The bandwidth and latency might be utilized as object location factors. As another example the storage manager might also monitor the historical usage patterns of objects. The historical usage patterns for objects might also be utilized as object location factors. The storage manager or another component operating in conjunction with the storage manager might also perform other types of processing to generate other object location factors in other embodiments.

In some embodiments the storage manager also retrieves object location factors from one or more external sources. For example the storage manager might retrieve data indicating the cost of storing data at one or more of the storage tiers such as from a storage service accessible via a wide area network WAN such as the Internet. The storage manager might also retrieve other data from other sources that is utilized as object location factors. Object location factors might also be based upon properties of the object to be stored. For example the object type size file attributes security requirements sharing requirements and the compressibility of the object may be utilized as object location factors. Other properties of an object might also be utilized.

As discussed briefly above the storage manager utilizes the object location factors to dynamically select a storage tier for an object. For instance if an optimization factor is provided with a request to store an object that specifies that storage of the object is to be optimized based upon cost the storage manager might select a storage tier having the lowest cost. If an optimization factor is provided that specifies that the storage of the object is to be optimized based upon speed of access the storage manager might select a storage tier accessible by way of a connection having the highest available bandwidth and or lowest latency. The storage manager might also utilize a combination of object location factors to select an appropriate location for storing an object. In other embodiments a request to store an object made to the storage manager might not include an optimization factor. In these embodiments the storage manager might select a suitable storage tier for the object based only upon the available object location factors. Other information might be also be utilized to dynamically select a storage tier in other embodiments.

In some embodiments the available storage tiers include a local storage tier. The local storage tier includes the system caches memory and mass storage devices of the computer upon which the storage manager is executing. The storage tiers might also include a local network storage tier that includes one or more storage systems accessible by way of a local area network LAN . The storage tiers might also include a remote network storage tier that includes one or more storage services accessible by way of a WAN such as the Internet. In some embodiments the storage manager also includes functionality for discovering available storage tiers. Additional details regarding the various components and processes described above for dynamic selection of a storage tier for storing an object will be presented below with regard to .

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that aspects of the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers cellular telephone devices special purposed hardware devices network appliances and the like. The embodiments described herein may be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures which may be referred to herein as a FIG. or FIGS. .

As will be described in greater detail below the storage manager is configured to receive requests from the operating system or from an application executing on a computing device to store an object . As discussed above an object may be a data object utilized in the execution of the operating system the application or other types of processes executing on the computing device . The term object as utilized herein encompasses the storage of any type of digital data utilized by any type of executable process.

As also discussed briefly above the request to store the object is unqualified in one embodiment. An unqualified request is a request that does not specify the location at which an object should be stored. In previous systems a developer of software typically had to specify whether an object e.g. process specific data a file etc. is to be stored in a RAM memory on a network device or in another location. Utilizing the embodiments presented herein however a single atomic mechanism can be exposed through which a developer can request storage of virtually any type of object regardless of its size. Through this mechanism the object is stored in an appropriate storage tier based upon the type of object and potentially multiple other object location factors. The storage manager might interact with the memory management block storage and network layers of the operating system to provide this functionality. Additional details regarding the various object location factors that might be utilized to select the storage tier for an object will be described below with regard to .

In the example operating environment shown in three storage tiers A C which might be referred to singularly as a storage tier or collectively as the storage tiers are available for storing the object . The local storage tier A includes the system cache the system memory and one or more mass storage devices present in the computing device executing the operating system . The mass storage devices might be spinning disk media and or solid state drives SSD in various embodiments. The local storage tier A might also include other types of storage devices in other embodiments.

As also shown in a local network storage tier B might also be utilized to store an object . The local network storage tier B includes one or more storage systems accessible to the computing device by way of a LAN . For instance in the illustrative operating environment shown in a network attached storage device and a storage area network device are available. Other types of storage systems might also be made available via a LAN .

In the embodiment illustrated in a remote network storage tier C is also available. The remote network storage tier C includes one or more storage services that are available via a WAN such as the Internet. In the example shown in for instance an object storage service a block storage service and a long term storage service are available for storing an object . Other types of services might also be made available by way of a remote network storage tier C in other embodiments.

In the example shown in three storage tiers A C are illustrated. It should be appreciated however that a different number of storage tiers might be utilized in other embodiments. Additionally it should be appreciated that each of the storage tiers A C may be defined by unique operational characteristics. For example the local storage tier A may be characterized by fast but limited capacity storage. Similarly the local network storage tier B might be characterized by slightly slower access times than the local storage tier A but greater storage capacity. Similarly the remote network storage tier C might be characterized by even greater access times but significantly larger storage and greater reliability and potentially lower cost than the local network storage tier B. As will be described in greater detail below some or all of the characteristics of the storage tiers A C might be utilized to select an appropriate storage tier for storing an object .

In the example shown in an application has transmitted a request to the storage manager to store an object . As discussed above the request to the storage manager may be unqualified. In some embodiments the request might also specify an optimization factor and one or more object location factors. The optimization factor is data identifying an attribute upon which selection of an appropriate storage tier for the object should be optimized. For instance the optimization factor might specify that the selection of an appropriate storage tier be optimized to minimize cost. Similarly the optimization factor might specify that selection of an appropriate storage tier be optimized to maximize the available access speed to the object . Other types of factors might also be specified. Additional details regarding the optimization factor specified with a request to store an object will be provided below with respect to .

As mentioned briefly above a request to store an object might also include one or more object location factors. The object location factors are factors utilized by the storage manager when selecting an appropriate storage tier for an object . As will be described in greater detail below with regard to the object location factors might be based upon properties of the object computed by the storage manager retrieved from a location external to the computing device provided with a request to store an object or generated and or obtained in other ways.

In response to receiving a request to store an object the storage manager selects an appropriate storage tier for the object . As described herein the storage manager utilizes the object location factors to select an appropriate storage tier . Additionally if an optimization factor is provided with the request to store the object the storage manager might also use the supplied optimization factor. Other data might also be utilized.

Several examples describing the manner in which the storage manager might select an appropriate storage tier for an object will now be described. In one example for instance the storage manager might determine that the object is relatively small and that quick and frequent access to the object is desirable. In this example the storage manager might store the object in the system cache . In another example the storage manager might determine that the object is larger than the maximum capacity of the system cache but that immediate and frequent access to the object is desirable. In this example the storage manager might store the object in the system memory . If the storage manager determines that the object is too large to store in the system memory the storage manager might store all or a portion of the object on the mass storage device .

If the storage manager determines that near immediate access to an object is not required the storage manager might select the local network storage tier B for storing the object . Similarly if the object is to be accessed very infrequently the storage manager might select the network storage tier due to its low cost and high reliability. Additional details regarding these and other processes and factors utilized by the storage manager in selecting an appropriate storage tier for storing an object will be provided below with regard to .

Once the storage manager identifies an appropriate storage tier for an object the storage manager will cause the object to be stored at the selected storage tier . Subsequently the storage manager may process requests to read the object by retrieving the object from the storage tier at which it was previously stored. Once the object has been retrieved from the storage tier upon which it was previously stored the object may be provided to the process requesting to read the object . These and other aspects of the operation of the storage manager will be described in greater detail below with regard to .

It should be appreciated that the illustrative operating environment shown in is merely illustrative and that many other types of operating environments might be utilized. For instance the networks and illustrated in have been simplified for discussion purposes. In this regard it should be appreciated that many more networks networking devices computer systems and software components might be utilized to implement the embodiments disclosed herein than illustrated in . Additionally although the storage manager has been described as providing the functionality disclosed herein for dynamically selecting a storage tier it should be appreciated that this functionality might be provided by the operating system or another component. This functionality might also be provided by a combination of components executing locally or on distributed computing devices.

It should also be appreciated that in one implementation the computing device might be collocated with computer systems that provide the various services of the remote network storage tier C. Thus in an embodiment local storage tier A the local network storage tier B and or the remote network storage tier C may be physically located in the same data center. For example in one implementation the computing device is a server computer such as server computer A configured as a part of a distributed execution environment that provides the remote network storage tier C. In this example the operating system can be executed in a virtual machine as an instance such as instance A. A user might access and control the operating system and the application utilizing a client application configured with the remote desktop protocol RDP or another similar protocol. Objects generated by the customer in this way might then be stored dynamically in an appropriate storage tier utilizing the various technologies disclosed herein. Additional details regarding this particular embodiment will be provided below with respect to and .

In some embodiments the operating system exposes an application programming interface API through which an application can submit a request . In other embodiments however the operating system might expose other mechanisms through which a process can request to store an object . For instance a programming function might be exposed through a programming library that can be utilized by various programming languages for accessing the functionality disclosed herein. Other types of mechanisms might also be utilized to allow applications operating systems and other types of processes to utilize the functionality disclosed herein for dynamically selecting a storage tier for storing an object .

As discussed briefly above with regard to a request might also include an optimization factor and one or more object location factors . In the example shown in for instance the application has provided an optimization factor and an object location factor M to an API exposed by the operating system for requesting storage of an object . In this regard it should be appreciated that a request need not include an optimization factor to or an object location factor . In the event that a request is received that does not include an optimization factor or an object location factor the storage manager will select an appropriate storage tier for the object based upon object location factors computed by the storage manager or obtained from other locations. Additional details regarding this process will be described below.

As also discussed briefly above some of the object location factors might be based upon properties of the object to be stored. For instance and as illustrated in object file attributes G of the object to be stored might be utilized as object location factors. The object file attributes G might include for instance information defining ownership of the object information regarding processes authorized to read and write the object and other information. Similarly the object size E might also be utilized as an object location factor.

The object type D might also be utilized as an object location factor. The object type D might describe the type of data in the object . In this regard the compressibility of the object K might also be utilized as an object location factor when determining an appropriate storage tier for the object . Other properties of an object might also be utilized when determining an appropriate storage tier for the object .

As discussed above the storage manager or another component might also compute one or more of the object location factors . For example in one implementation the storage manager or another component might compute the storage tier latency and or the storage tier bandwidth H to each of the available storage tiers . The latency and bandwidth might be computed on an ongoing basis so that the storage manager has updated information regarding the availability of each storage tier at the time a request to store an object is received.

The storage manager might also be configured to retrieve object location factors from an external service. For example in one implementation the storage manager is configured to retrieve a storage cost C from a storage service available by way of the remote network storage tier C. The storage manager might also retrieve other types of information from other types of external services that may be utilized as an object location factor . As another example a storage service might maintain historical data regarding the usage patterns for a particular object . The storage manager may retrieve the object usage patterns A when determining an appropriate storage tier for the object .

It should be appreciated that in other embodiments other types of object location factors might be received with a request computed by the storage manager retrieved from an external service or obtained in other ways. In the example shown in the object location factors also include security requirements B associated with the object sharing requirements J associated with the object a required access speed L to the object and the availability of each storage tier. These object location factors might be supplied with a request or obtained by the storage manager in another manner. It should be appreciated that the object location factors shown in are merely illustrative and that the storage manager might utilize many other types of factors when selecting an appropriate storage tier for storing an object .

It should also be appreciated that the format of the request shown in is illustrative and that the request might include other data not shown in . For example in another implementation the request might include a hint or suggestion as to where the object should be stored. The storage manager might utilize the hint to select an appropriate tier for storing the object or might ignore the hint provided by the application . Other types of data might also be included in the request for use by the storage manager in selecting a storage tier .

Once the storage manager has selected an appropriate storage tier for an object the storage manager causes the object to be stored at the selected storage tier . Additionally the storage manager might create an entry in a lookup table that provides an indication that the object was stored at a particular storage tier . As will be described in greater detail below the contents of the lookup table might be utilized to identify a storage tier at which an object was stored in response to receiving a request to read the object . Additional details regarding these and other aspects of the operation of the storage manager will be provided below with respect to .

The implementation of the various components described herein is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. Some operations might also be performed in parallel or in a different order than those described herein.

The routine begins at operation where the storage manager identifies the available storage tiers and obtains the properties of each tier . For example in some embodiments the storage manager includes functionality for identifying services available via a remote network storage tier C such as the object storage service the block storage service and the long term storage service . Other mechanisms might also be utilized to discover and identify storage systems available on the local network storage tier B and storage devices available on the local storage tier A.

In this regard the amount of available storage storage limits and other attributes of the available on the various storage tiers might also be discovered by the storage manager or another related component. Tuning and optimization settings might also be discovered for the storage services on each tier . Additionally in some implementations a user of the computing device might be permitted to specify the available storage tiers to provide credentials for each of the storage tiers and or to specify various properties of each of the tiers such as those described above. Once the available storage tiers A C have been identified the routine proceeds from operation to operation .

At operation the storage manager or another component computes one or more of the object location factors . For example and as discussed briefly above the storage manager might continually compute the storage tier latency F and the storage tier bandwidth H for each of the storage tiers identified at operation . These computations may be performed on a regular and ongoing basis so that the storage manager has fresh information regarding the latency and throughput to each tier . Other types of computations might also be performed to generate other types of object locations factors in other embodiments.

From operation the routine proceeds to operation where the storage manager retrieves one or more object location factors from one or more external sources. As discussed above for example the storage manager might retrieve the storage costs C from services available by way of the remote network storage tier C. Other types of external sources might also be queried for other types of object location factors in other embodiments.

From operation the operation proceeds back to operation where the processes described above may be repeated. By repeating these operations the storage manager maintains an updated list of the available storage tiers updated properties for each tier and updated object location factors . As will be described in greater detail below with respect to this information might be used to dynamically select an appropriate storage tier at the time a request to store an object is received by the storage manager .

In response to receiving the request at operation the routine proceeds to operation where the storage manager utilizes one or more of the available object location factors and the optimization factor if provided to select one of the available storage tiers for storage of the object . For instance if an optimization factor is provided with a request to store an object that specifies that storage of the object is to be optimized based upon cost the storage manager might select the storage tier having the lowest cost. In another example if an optimization factor is provided that specifies that storage of the object is to be optimized based upon speed of access the storage manager might select a storage tier accessible by way of a connection having the highest available bandwidth and or the lowest latency. The storage manager might also utilize a combination of object location factors to select an appropriate tier for storing an object . If an optimization factor is not provided with a request to store an object the storage manager might select a storage tier based upon the available object location factors .

Once the storage manager has selected an appropriate tier for storage of the object the routine proceeds from operation to operation . At operation the storage manager stores the object in the selected storage tier . The routine then proceeds to operation where the storage manager updates the lookup table to identify the tier at which the object was stored. As will be described in greater detail below the data stored in the lookup table might be later utilized to retrieve the object from the appropriate storage tier . From operation the routine proceeds to operation where it ends.

In response to receiving the request for an object at operation the routine proceeds to operation where the storage manager consults the lookup table to determine the tier at which the requested object was previously stored. Once the tier containing the requested object has been identified the routine proceeds from operation to operation .

At operation the storage manager retrieves the requested object from the identified storage tier . The routine then proceeds from operation to operation where the storage manager provides the retrieved object to the process that requested the object . The routine then proceeds from operation to operation where it ends.

As discussed briefly above the computing device might be collocated with the computing systems that provide the remote network storage tier C in some embodiments. In these embodiments the functionality disclosed herein for dynamically selecting a storage tier might be implemented in a distributed execution environment that can provide computing resources for executing an application and an operating system on a permanent or an as needed basis. illustrate aspects of such a distributed computing environment .

The computing resources provided by the distributed execution environment may include various types of resources such as data processing resources data storage resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example and as will be described in greater detail below data processing resources may be available as virtual machine instances in a number of different configurations. The instances may be configured to execute applications including Web servers application servers media servers database servers and other types of applications . Data storage resources may include file storage devices block storage devices and the like. These resources might be provided by the object storage service the block storage service and or the long term storage service described above with regard to .

Each type or configuration of computing resource may be available in different sizes such as large resources consisting of many processors large amounts of memory and or large storage capacity and small resources consisting of fewer processors smaller amounts of memory and or smaller storage capacity. Virtual machine instances might also be made available in a continuous ratio of processor to memory capabilities.

The computing resources provided by the distributed execution environment are enabled in one implementation by one or more data centers A N which may be referred herein singularly as a data center or in the plural as the data centers . The data centers are facilities utilized to house and operate computer systems and associated components. The data centers typically include redundant and backup power communications cooling and security systems. The data centers might also be located in geographically disparate locations. One illustrative configuration for a data center that implements the concepts and technologies disclosed herein for dynamic selection of a storage tier will be described below with regard to .

The customers and other consumers of the distributed execution environment may access the computing resources provided by the data centers over the WAN . Although a WAN is illustrated in it should be appreciated that a LAN the Internet or any other networking topology known in the art that connects the data centers to remote customers and other users may be utilized. It should also be appreciated that combinations of such networks might also be utilized.

The customer computing system is a computing device utilized by a customer or other consumer of the distributed execution environment . For instance the customer computing system may be a server computer a desktop or laptop personal computer a tablet computer a wireless telephone a PDA an e reader a game console a set top box or any other computing device capable of accessing the distributed execution environment . As will be described in greater detail below the customer computing system may be utilized to access a computing device such as a server computer located in one of the data centers and executing an operating system that provides the functionality disclosed herein for dynamically selecting a storage tier . The customer computing system might utilize an application configured with RDP or another suitable protocol to view and interact with a desktop provided by the operating system and an application . Additional details regarding this process are provided below.

In one embodiment the instances A Q which may be referred herein singularly as an instance or in the plural as the instances are virtual machine instances. As known in the art a virtual machine instance is an instance of a software implementation of a machine i.e. a computer that executes programs like a physical machine. In the example of virtual machine instances each of the servers may be configured to execute an instance manager capable of executing the instances. The instance manager might be a hypervisor or another type of program configured to enable the execution of multiple instances on a single server for example.

As discussed above each of the instances may be configured to execute an operating system configured with the functionality disclosed herein for dynamically selecting a storage tier and one or more applications . For example the server computer F shown in is configured to execute the operating system in an instance Q. The application may also be executed in the instance Q.

As also discussed briefly above a customer of the distributed execution environment might connect to the operating system utilizing a customer computing system with an appropriately configured client application. For instance the customer computing system might utilize a RDP client application to connect to the instance Q and utilize the operating system and the application .

When a customer computing system is utilized to connect to and utilize the operating system and the application in the manner described above the operating system might utilize the functionality described above to dynamically select a storage tier for storing customer data. For example the storage manager might select a device in the local storage tier A i.e. the server computer F for storing the customer data or might select a service in the remote network storage tier C for storing the customer data. It should be appreciated that in this example one or more of the instances A Q might be utilized to provide the various storage services of the remote network storage tier C.

In the example data center shown in an appropriate LAN is utilized to interconnect the server computers A F. The LAN is also connected to the WAN illustrated in . It should be appreciated that the network topology illustrated in has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. Appropriate load balancing devices or software modules might also be utilized for balancing a load between each of the data centers A N between each of the server computers A F in each data center and between instances purchased by each customer of the distributed execution environment . It should also be appreciated that the data center described in is merely illustrative and that other implementations might be utilized. Additionally it should be appreciated that the functionality provided by the components described above might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art.

In the implementation shown in the computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs may be standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard. The chipset may provide an interface to a RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as the local area network described above. The chipset may include functionality for providing network connectivity through a NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a Fibre Channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media can be any available media that provides for the storage of non transitory data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information. As utilized herein the term computer readable storage media does not encompass transitory signals per se.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further embodiments the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized. As illustrated in and described above the operating system might also include a storage manager configured to perform the functionality described above. As mentioned above the functionality described herein as performed by the storage manager might be performed by another component within the operating system by a component other than the operating system or by a combination of components.

The mass storage device may store other system or application programs and data utilized by the computer such as an application and or any of the other software components and data described above. The mass storage device might also store other programs and data not specifically identified herein.

In one embodiment the mass storage device or other computer readable storage media is encoded with computer executable instructions which when loaded into the computer transforms the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform the routines and described above with regard to respectively.

The computer may also include an input output controller for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly the input output controller may provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for dynamic selection of storage tiers have been presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

