---

title: Gate configuration determination and selection from standard cell library
abstract: A method comprises determining gate configuration from a standard cell library for optimizing behavior of a logic gate in an electronic circuit to be resized. The determining includes defining variables for the logic gate to be resized and defining nets influenced by the logic gate to be resized. The determining includes determining constraints relative to other logic gates in the electronic circuit affected by the logic gate to be resized and formulating objective function. The determining includes solving the objective function using a linear programming solver based on the defined variables and the determined constraints. The determining includes outputting solving of the objective function obtained by linear programming solver for further processing. The gate configuration is selected from the standard cell library for optimizing behavior of the logic gate to be resized based on solving of the objective function.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08627263&OS=08627263&RS=08627263
owner: International Business Machines Corporation
number: 08627263
owner_city: Armonk
owner_country: US
publication_date: 20120203
---
This application claims priority under 35 U.S.C. 119 from European Patent Application No. EP11155645 filed Feb. 23 2011 the entire contents of which are incorporated herein by reference.

Embodiments relate in general to the field of developing integrated electrical circuits and in particular to a method for determining and selecting gate configuration from standard cell library method for reducing power consumption of an electronic circuit and a system for determining and selecting gate configuration from standard cell library. Still more particularly embodiments relate to a data processing program and a computer program product for determining and selecting gate configuration from standard cell library and for reducing power consumption of an electronic circuit.

In CMOS technology glitch power dissipated in combinational circuits owns an important portion of the total dynamic power consumption. A State of the Art method for power estimation is called Monte Carlo Simulation MCS . For this technique a digital simulator and information about gate and interconnect delays are necessary. The runtime of MCS is high.

Statistical Methods SM e.g. IMS PE CREST TPS are also extensively investigated techniques. SMs are like one period simulation using a special gate model which requires signal probabilities instead of multi valued logic. It s faster than Monte Carlo simulation. The nature of SM is like a one period digital simulation. Therefore its runtime is still not low enough. In the lack of consideration of correlations the accuracy is also limited. Test cases have shown that especially the estimated power on the nets near the POs may show up to 400 error.

In VLSI design great attention is paid to the power consumption of circuits. Research covers power estimation and power optimization from system to electrical level. The challenge of lower level power estimation is to find a reasonable trade off between computational effort and accuracy of power estimation. For instance the tools based on SMs can estimate the dynamic power of combinational circuits very efficiently. However they all suffer more or less from a poor accuracy. Especially if the dynamic power per net is considered a satisfying accuracy cannot be reached.

In CMOS circuits power is dissipated due to the static leakage current and the dynamic current caused by signal transition. During the signal transition a dynamic current flows through the transistor and charges or discharges the parasitic capacitances. The appropriate power is called dynamic power. It can be modeled according to equation 1 

Wherein V f Cand are supply voltage clock frequency net capacitance and signal transition rate respectively. It is obvious that besides scaling down supply voltage and clock frequency one can also reduce the product of transition rate and net capacitance or either of them to reduce dynamic power.

In combinational circuits signals are expected to change at most once in one clock period. However there are almost always unnecessary signal transitions which are called glitches. If the timing conditions such as setup time and hold time of the registers are satisfied the circuit can still work. However the signal transition rate is increased due to the glitches and therefore more power is consumed by the unnecessary signal transitions. If glitches can be eliminated dynamic power is reduced. Glitches are caused by different arrival times of signals at the inputs of the gate.

Algorithms were proposed to optimize dynamic power consumption. For full custom design power optimization algorithms can result in a glitch free design. A conventional technique is called path balancing. Besides hazard filtering is another technique proposed which can be considered as an extension of path balancing. It shows that it is not necessary to balance the signal path exactly to eliminate the glitches. This technique indicates that the gate inertia can stop not only the generation but also the propagation of glitches. According to hazard filtering a glitch free design needs to satisfy the requirement that the differences of signal arrival times at the inputs of all gates in the circuit must be less than their inertial delays.

Conventional techniques apply a zero delay model in the simulation to reduce the number of events per period since if normal delay model non zero delay model is applied in the simulation lots of events could probably be generated in every clock period to model the circuit behavior. In applying the zero delay model the whole simulation must be shorter obviously because the number of events per period is no more than the number of the gates in the circuit. However the accuracy would be destroyed if no further method would be employed to take care of the glitches. The papers by Alexander et al. each propose such a method that the whole Monte Carlo simulation employed zero delay model and the neglected signal transitions in ambiguous interval is estimated.

Some example embodiments include a method that comprises determining gate configuration from a standard cell library for optimizing behavior of a logic gate in an electronic circuit to be resized. The determining includes defining variables for a logic gate to be resized that is within an electronic circuit and defining nets influenced by the logic gate to be resized. The determining includes determining constraints relative to other logic gates in the electronic circuit affected by the logic gate to be resized and formulating objective function to be solved by the electronic circuit. The determining includes solving the objective function using a linear programming solver based on the defined variables and the determined constraints. The determining includes outputting solving of the objective function obtained by linear programming solver for further processing. The method also includes selecting gate configuration from the standard cell library for optimizing behavior of the logic gate to be resized based on solving of the objective function.

The description that follows includes exemplary systems methods techniques instruction sequences and computer program products that embody techniques of the present inventive subject matter. However it is understood that the described embodiments may be practiced without these specific details. In other instances well known instruction instances protocols structures and techniques have not been shown in detail in order not to obfuscate the description.

Referring to the shown embodiment employs a system for determining and selecting gate configuration from standard cell library. An Embodiment of such an electronic circuit to evaluate is shown exemplary in and comprises at least one cone with at least one gate X X having a single output net N N only wherein representations of the at least one gate X X are instances of elements from a standard cell library.

The shown system for determining and selecting gate configuration from standard cell library is represented by a computing environment and comprises a user interface for managing I O functions of the system a data storage for storing computer usable program code the standard cell library data etc. and a data processing engine in electronic communication with the user interface and the data storage . According to some example embodiments the data processing engine defines variables for the logic gate X to be resized and every net N N influenced by the logic gate X to be resized determines constraints relative to logic gates X influenced by the logic gate X to be resized formulates objective function to be solved solves the objective function using a linear programming solver based on the defined variables and the determined constraints and outputs solution obtained by the linear programming solver for further processing.

Referring to the shown embodiment employs a method for reducing power consumption of an electronic circuit using a gate level design description wherein an embodiment of such an electronic circuit to evaluate is shown exemplary in and comprise at least one cone with at least one gate X X having a single output net N N only wherein representations of the at least one gate X X are instances of elements from a standard cell library.

According to some example embodiments in step S the electronic circuit to evaluate is levelized by sorting the gates X X in the electronic circuit in different levels according to their logic depth and in step S a freezing list is initialized shown in . In step S an upper bound for dynamic power consumption is determined by calculating transition metrics and power metrics for each gate X X in the electronic circuit. In step S gates here gate X with an upper bound for power consumption greater than a predetermined threshold value are selected and assigned to a gates to resize list shown in . Query S checks if the gates to resize list is empty. If the gates to resize list is empty the method is finished. If the gates to resize list is not empty the first gate X of the gates to resize list is popped in step S. In step S best fitting gate configurations from the standard cell library for the gate X under consideration is determined and selected by using linear programming. According to some example embodiments this is done by performing the method for determining and selecting gate configuration from standard cell library for optimizing behavior of the logic gate X to be resized explained in the following referring to . In step S the gate level design representation is modified according to the selected gate configuration. In step S the gate X under consideration is added to the freezing list after testing. Query S checks if the gates to resize list is empty. If the gates to resize list is not empty the optimizing process returns to step S. If the gates to resize list is empty a perturbance function is performed in step S. The perturbance function is implemented to prevent the solution from a local optimum and to release randomly some gates frozen in the freezing list after all selected gates are resized. The gates newly pushed into the freezing list are much more likely to be released than the gates that stay in the freezing list for a long time. With the increase of optimization steps the number of gates that are allowed to be released from the freezing list decreases as well. After such a stochastic decision the method returns to step S and a new gates to resize list is determined. The optimization procedure runs until the gates to resize list is empty. If no gates are written to the new gates to resize list because the upper bound for power consumption of all gates X X of the electronic circuit is smaller than the predetermined threshold value an empty gates to resize list is generated and the optimization procedure is finished.

The transition metric of an output net N of the gate X to be resized is defined as minimum value between a sum of signal transitions at input nets N N of the gate X to be resized and a component dependent on a glitch window defined as difference between latest and earliest signal arrival times AT MaxN AT MinN at the output net N of the gate X to be resized and an inertial delay of the gate X to be resized.

Further extracting gate model for each gate X X of the electronic circuit to evaluate is performed according to the method shown in . Referring to in step S coefficients of delays and slews defined by equation 2 and 3 are determined by linear regression for all cells according to Look up table LUT . Delay 2 Slew 3 

Wherein CL is the net capacitance in the circuit and are parameters of this gate model. The parameters can be determined from look up table LUT stored in the standard technology library.

Delays and slews in LUT are related with paths from input to output. The coefficients of the whole gate need to be calculated by averaging the coefficients obtained for every path. E.g. Gate AND2 X A12TR has four LUTs for one drive strength. The coefficients of rising and falling transitions are determined by linear regression and averaged. In step S all coefficients are averaged. E.g. Gate AND2 X A12TR has 10 various drive strengths from  X0P5M  0 5 to  X11M  11 so ten groups of coefficients are averaged. For the gates with different drive strengths correlation 4 and 5 are used. 1 4 

Wherein 1 s represents drive strength or speed factor S 1 s e.g. 0.7 for INV X0P7M A12TR in CU45. const. 5 

By defining the speed factor S or drive strength 1 s the gate model can be generalized with equations 6 and 7 .

In step S slew parameters are set constant and target coefficients are calculated by linearization of the generalized gate model. Equations 16 to 21 show the result of the gate model extraction written to block shown in .

Referring to the shown embodiment employs a method for determining and selecting gate configuration from standard cell library for optimizing behavior of a logic gate X in an electronic circuit to be resized.

In step S variables for the logic gate X to be resized and every net N N influenced by the logic gate X to be resized are defined. For example for every net N N influenced by the logic gate X to be resized a latest arrival time AT Max AT Max and an earliest arrival time AT Min AT Minare defined as variables. For logic gate X to be resized drive strength 1 s or speed factor S is defined as variable.

In step S constraints relative to logic gates X influenced by the logic gate X to be resized are determined. The constraints restrict timing behavior at the output N N of the involved gates. For example latest arrival time AT Max AT Maxat the output N N must not be less than the latest arrival time AT MaxN AT Max AT Maxat any input N N N plus a gate delay d. Earliest arrival time AT Min AT Minat the output N N must not be greater than the earliest arrival time AT Min AT Min AT Min AT Minat any input N N N plus gate delay d. Latest arrival time AT Max must not be less than earliest arrival time AT Min.

In step S objective function to be solved by linear programming is formulated. The objective function is a sum of power metrics at all involved nets N N according to correlation 22 nets 22 

Wherein i represent output net of a gate and d represents gate delay. Linearization of the simplified power metric is represented by equation 24 and 25 . The linearization and equations 24 and 25 are only used for the logic gate X to be resized. For gates X not to be resized Equation 23 is used.

Wherein S represents speed factor of the gate in concurrent design and GW represents glitch window of the gate in concurrent design. The glitch window GW is defined as difference between latest arrival time AT Max and earliest arrival time AT Min at a net N N N N.

In step S the objective function is solved by using a linear programming solver based on the defined variables and determined constrains. In step S the solution obtained by the linear programming solver is discretized and the best fitting gate configuration is taken. The outputted solution obtained by the linear programming solver is continuous. The optimal speed factor for X is 0.0937 and the corresponding drive strength is 1 0.0937 10.6724 for example. Since only gates with discrete drive strength exist in the standard cell library the optimal drive strength is rounded to the available drive strength in standard cell library by using Euclidian distance for example.

In step S the timing requirements of the selected gate configuration are checked. Query branches to step S if the time requirements are fulfilled and branches to query S if the time requirements are not fulfilled. Query S checks if further gate configurations are available and branches to step S if no further gate configurations are available and branches to step S if further gate configurations are available. In Step S next best fitting gate configuration is taken and then the method is continued with step S. In step S the gate configuration is reset. In step S the selected gate configuration is outputted.

In view of the exemplary electronic circuit shown in the optimal drive strength of logic gate X is to be determined. In the shown embodiment of the electronic circuit N and N denote primary inputs and N denotes a primary output. According to the method for determining and selecting gate configuration from standard cell library the latest arrival time AT Max and the earliest arrival time AT Min are defined for every net N N influenced by the resizing gate X. For the primary inputs N N no variables are determined since nets N N are not influenced by the resizing gate X. The speed factor S 1 s is defined as variable for the logic gate X under investigation. The constraints are determined relative to the logic gate X influenced by the logic gate X. The constraints restrict the timing behavior at the output N N of the involved gates X X.

The constraints for the logic gate X are defined for late mode timing according to correlations 26 and 27 AT Max AT Max 26 AT Max AT Max 27 

The constraints for the logic gate X are defined for early mode timing according to correlations 28 and 29 AT Min AT Min 28 AT Min AT Min 29 

The constraints for the logic gate X are defined for late mode timing according to correlation 30 AT Max AT Max 30 

The constraints for the logic gate X are defined for early mode timing according to correlation 31 AT Min AT Min 31 

The objective function in example is the sum of simplified power metric according to equation 32 at the nets N and N involved due to resizing. 32 

Example embodiments for determining and selecting gate configuration from standard cell library and the inventive method for reducing power consumption of an electronic circuit can be implemented as an entirely software embodiment or an embodiment containing both hardware and software elements. Some example embodiments are implemented in software which includes but is not limited to firmware resident software microcode etc.

As will be appreciated by one skilled in the art aspects of the present inventive subject matter may be embodied as a system method or computer program product. Accordingly aspects of the present inventive subject matter may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present inventive subject matter may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present inventive subject matter may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present inventive subject matter are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the inventive subject matter. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

While the embodiments are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of the inventive subject matter is not limited to them. In general techniques for movement reduction as described herein may be implemented with facilities consistent with any hardware system or hardware systems. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the inventive subject matter. In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the inventive subject matter.

