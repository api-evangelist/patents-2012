---

title: Tracking specific Java native interface invocations of system and library calls
abstract: Methods and systems may track the invocation path of a system or a library call from Java native interface (JNI) in Java applications. A native call of interest having an associated failure condition, an invocation path associated with the native call of interest, and a Java boundary crossover method (Java method invoking a JNI method) within the invocation path may all identified based on failure diagnostic information. The identified information may also be fed to a Java virtual machine (JVM). When the application is re-run, a check can be made prior to execution of the JNI method, as to whether the Java boundary crossover method is being executed. If so, then the execution stack may be compared to the invocation path of interest.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09092369&OS=09092369&RS=09092369
owner: International Business Machines Corporation
number: 09092369
owner_city: Armonk
owner_country: US
publication_date: 20121031
---
Embodiments of the present invention may generally relate to application debugging. More particularly embodiments relate to tracking specific Java native interface JNI invocations of system and library calls.

Software applications such as Java applications may execute in the context of a Java virtual machine JVM which can offer the ability to execute both Java methods and invoke native methods e.g. C C methods using JNI. There may be numerous issues experienced at the JNI layer that necessitate contextual tracing for optimal results. For instance if a JNI method invokes a native method that in turn invokes a system or library call when the system library call fails a relatively large amount of debugging instrumentation may be required to understand which parameters were passed to the system library call and why it failed. Indeed existing tracing techniques may trace all invocation sequences of the native method in such a case which can lead to the generation of unnecessary trace data adverse performance impacts at runtime and timing difficulties that may even prevent the problem from being recreated. These challenges may be particularly pronounced in the context of complex enterprise applications and production environments.

Embodiments may include a computer program product having a computer readable storage medium and computer usable code stored on the computer readable storage medium. If executed by a processor the computer usable code may cause a computer to identify a call of interest having an associated failure condition and identify an invocation path associated with the call of interest wherein the invocation path includes a Java boundary crossover method. The computer usable code can also cause a computer to determine trace information that is dedicated to the invocation path.

Embodiments may also include a computer implemented method that provides for identifying a call of interest having an associated failure condition wherein the call of interest includes one or more of a system call and a library call. Additionally an invocation path associated with the call of interest may be identified wherein the invocation path includes a Java boundary crossover method having a Java application programming interface API call to a Java native interface JNI call and a native method call to the call of interest. The method can also involve detecting an execution of the crossover method and comparing an execution stack to the invocation path in response to the execution of the crossover method. In addition a trace flag may be set if the execution stack satisfies a condition with respect to the invocation path wherein the trace flag enables trace information associated with the call of interest which may need to be printed reported. The trace flag corresponds to a thread associated with the execution of the crossover method.

Embodiments may include a computer program product having a computer readable storage medium and computer usable code stored on the computer readable storage medium. If executed by a processor the computer usable code may cause a computer to identify a call of interest having an associated failure condition wherein the call of interest is to include one or more of a system call and a library call. Additionally the computer usable code can cause a computer to identify an invocation path associated with the call of interest wherein the invocation path is to include a Java boundary crossover method having a Java API call to a JNI call and a native method call to the call of interest. The computer usable code may also cause a computer to detect an execution of the crossover method and compare an execution stack to the invocation path in response to the execution of the crossover method. In addition the computer usable code may cause a computer to set a trace flag if the execution stack satisfies a condition with respect to the invocation path to print output trace information of the call of interest wherein the trace flag corresponds to a thread associated with the execution of the crossover method.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Referring now to a software application architecture is shown wherein the architecture includes an application layer a Java application programming interface API layer and a native layer . In the illustrated example the application layer includes application methods AM1 to AM3 respectively as well as application interface methods AI1 and AI2 respectively wherein the application methods may invoke call the application interface methods during execution of the software application. For example the application methods and may each invoke the application interface method whereas the application method may invoke the application interface method

The Java API layer may include Java application methods JA1 and JA2 respectively and Java application interface methods and JAI1 and JAI2 respectively wherein the application interface methods of the application layer may invoke the Java application methods across an application boundary . Thus in the illustrated example the application interface method invokes the Java application method and the application interface method invokes the Java application method . Additionally the Java application methods can invoke the Java application interface methods wherein the Java application method invokes both of the Java application interfaces and the Java application method invokes only the Java application interface

The native layer may include Java native interface JNI methods JNI1 to JNI3 respectively as well as native methods NM1 to NM3 respectively wherein the Java application interface methods can invoke the JNI methods across a Java boundary . For example the Java application interface method might invoke the JNI method and the Java application interface could invoke both of the JNI methods and . Moreover the JNI methods may invoke the native methods either directly or indirectly through other native methods in the example shown. Thus the illustrated JNI method invokes the native method indirectly through the native method and the illustrated JNI method invokes the native method indirectly through the native method . The JNI method on the other hand may invoke the native method directly. The native methods may include system calls and or library calls wherein such calls may implemented in a non Java native language such as C and or C .

In the illustrated example a failure condition is encountered upon the execution of the native method but only when the native method is invoked along the path having dashed lines namely the path including the application method the application interface method the Java application method the Java application interface method the JNI method and the native method . Of particular note is that to trace all invocation paths leading to the native method may result in the generation of massive amounts of trace data particularly in the context of complex enterprise applications and production environments. Indeed the failure condition could be due to dependent modules methods global fields and or variables objects that are in any of the invocation paths shown. Moreover while isolation of specific invocation paths may be traditionally achievable purely within the Java API layer the invocation of methods across the Java boundary and into the native layer can present challenges with regard to diagnosing failure conditions. As will be discussed in greater detail techniques described herein can provide for determining the invocation path associated with the failure condition and generating trace information only for that invocation path even though the invocation path includes native method calls in addition to JNI methods Java application interface methods Java application methods application interface methods and application methods .

In the example of Table I a set of Java methods invoke a set of native methods culminating in an invocation to the system call wcstoui641 . Thus processing block may identify wcstoui641 as a call of interest. Illustrated block provides for identifying an invocation path associated with the call of interest wherein the invocation path includes a Java boundary crossover method. A Java boundary crossover method may be defined as a Java API call to invocation of a JNI call method. Thus in the example of Table I the Java boundary crossover method would constitute the bolded combination of item 4 and item 5 i.e. java io FileInputStream.open Java java io FileInputStream open . Block may provide for determining trace information that is dedicated to the invocation path. Thus if the system call wcstoui641 fails only under this invocation path sequence other invocations of that system call can be eliminated from the trace information.

Illustrated block determines whether an execution of the call of interest has occurred. If the execution of the call of interest is detected block may determine whether the trace engine e.g. running as part of the JVM may determine whether the tpid is enabled for this method and whether the trace flag is set. If so trace information may be output from the thread at block wherein the trace information may include parameters passed and variables of interest in the invocation path. Otherwise the output of the trace information may be bypassed. Accordingly the trace information will be dedicated to the targeted invocation path in the example shown. Additionally block may determine whether a program control exit from the JNI layer has occurred. If so the trace flag may be cleared at block to ensure that if the call of interest is invoked from some other path it will not be traced.

Turning now to a computing system is shown in which specific JNI invocations of system and library calls can be tracked. In the illustrated example the system includes a processor system memory e.g. volatile memory random access memory RAM mass storage e.g. non volatile memory hard disk drive HDD optical drive and a user interface UI device . A module may determine if the tpid is enabled for the native method that invokes the call of interest.

Techniques described herein may therefore trace specific invocations of system or library calls from JNI methods resulting in a lightweight performance sensitive mechanism for paths of interest to be recognized by JVM and JNI layers. Additionally a path of interest may be defined and tracked from Java to native levels culminating in the system call of interest. Once the path of interest is recognized then specific traces may be triggered the system library call to output the parameters passed to it as well as variables of interest in the native method invoking the system library call. Isolating specific invocation paths as described herein can enable JNI based potential root causes to be eliminated from consideration while facilitating the focus of valuable resources on other potential root causes such as dependencies of the call of interest.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions. In addition the terms first second etc. may be used herein only to facilitate discussion and carry no particular temporal or chronological significance unless otherwise indicated.

Those skilled in the art will appreciate from the foregoing description that the broad techniques of the embodiments of the present invention can be implemented in a variety of forms. Therefore while the embodiments of this invention have been described in connection with particular examples thereof the true scope of the embodiments of the invention should not be so limited since other modifications will become apparent to the skilled practitioner upon a study of the drawings specification and following claims.

