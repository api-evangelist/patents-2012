---

title: Error handling for widgets
abstract: A system and method for error handling associated with a widget are disclosed. The system comprises a registration module, a communication interface, a command module, a manager monitoring module and an error detection engine. These entities are communicatively coupled to each other. The registration module registers a widget to be hosted on the host page. The host page is presented on a user device. The communication interface receives a notification indicating that the widget is ready to be displayed on the host page and sends the notification to the manager monitoring module. The manager monitoring module instructs the command module to generate a command to display the widget. The command is sent to the user device for displaying the widget. The manager monitoring module monitors the displayed widget. The error detection engine detects an error associated with the widget and performs an error correction procedure to the widget.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09037914&OS=09037914&RS=09037914
owner: Google Inc.
number: 09037914
owner_city: Mountain View
owner_country: US
publication_date: 20120628
---
The specification relates to a system and method for error handling associated with a widget hosted on a host page. In particular the specification relates to monitoring a widget hosted on a host page and performing an error correction procedure if an error is detected.

The usage of widgets on web pages provides publishers with a convenient and efficient way to incorporate additional features into the web pages. For example a publisher can easily include a weather notification on a web page by embedding a weather widget on the web page. Because a widget may be included in numerous different web pages and each web page may includes hundreds of different widgets it is very difficult to monitor each widget hosted on a tremendous number of web pages and to prevent any widget misbehavior and unintended interactions between the web pages and the widget.

The widget misbehavior may cause many severe problems. For example the widget misbehavior may cause a catastrophic self denial of servicing self DoSing behavior leading to a complete service outage. The widget misbehavior may also cause other problems such as stealing keyboard focus from the web page hosting the widget leaking code errors to interrupt application in the web page frame busting causing infinite redirections of the web page or the widget excessive error reports inappropriately displaying the widget even when the widget is inactive triggering excessive client side connections that slow down the web page triggering new pop up windows and leaking global symbols to the web page etc.

It is expensive and time consuming to monitor and detect every widget misbehavior because of the large quantity of widgets used in numerous web pages. Therefore it is desirable to establish a framework that automatically prevents widget misbehavior detects errors associated with widgets and minimizes problems incurred by misbehaving widgets.

In some examples the specification describes a system and method for error handling associated with a widget hosted on a host page. In one embodiment the system comprises a communication interface a registration module a command module a manager monitoring module and an error detection engine. These entities are communicatively coupled to each other. The communication interface receives a registration signal from a user device and sends the registration signal to the registration module. The registration module registers the widget hosted on the host page. The host page is presented on the user device. The communication interface receives a notification indicating that the widget is ready to be displayed on the host page from the user device and sends the notification to the manager monitoring module. The manager monitoring module instructs the command module to generate a command to display the widget. The command module sends the command to the communication interface and the communication interface sends the command to the user device for displaying the widget.

The manager monitoring module monitors the widget displayed on the host page. In one embodiment the communication interface receives a heartbeat signal indicating that the widget is active from the user device and sends the heartbeat signal to the manager monitoring module. In another embodiment the manager monitoring module instructs the command module to generate a status update request for inquiring about a status of the widget. The command module sends the status update request to the communication interface and the communication interface sends the status update request to the user device. The communication interface receives a status update including status data describing the status of the widget from the user device and sends the status update to the manager monitoring module.

The error detection engine detects an error associated with the widget. In one embodiment the error detection engine detects the error based at least in part on the status data describing the status of the widget. The error detection engine performs an error correction procedure to the widget responsive to detecting the error. The error correction procedure includes one of closing the widget disabling the widget deactivating the widget and notifying a user of the error.

In one embodiment the manager monitoring module monitors loading of the widget on the host page. The error detection engine detects a loading error if the widget fails to load on the host page.

In one embodiment the system further comprises a code analysis module. The code analysis module analyzes program code associated with the widget and detects a harmful code pattern in the program code.

The specification describes systems and methods for handling errors associated with a widget using a widget manager. In one embodiment the widget manager includes a registration module an error detection engine and a command engine. The registration module registers the widget. The error detection engine detects errors associated with the widget. For example the widget could frame busting infinite redirects self DoS uncaught JavaScript errors and stealing focus from the host page. If an error is detected the error detection engine performs an error correction procedure. For example the error detection engine instructs the command engine to generate a disable command to disable the error.

In some embodiments the widget manager also includes a code analysis module a testing engine and a manager switch. The code analysis module analyzes the program code offline and identifies harmful code. The testing engine integrates a widget into a host page and tests the functionality of the widget. The manager switch identifies long lived web applications and prevents new sessions from creating a widget hosted on a host page for long lived web applications. This is referred to as a kill switch and it helps to avoid a system wide crash of the host page.

The user devices . . . in are used by way of example. While illustrates two devices the embodiment applies to any system architecture having one or more user devices. Furthermore while only one network is coupled to the user devices . . . the control server and the web server in practice any number of networks can be connected to the entities.

The control server is a hardware server device. In one embodiment the control server sends and receives data to and from one or more of the user devices . . . via the network . For example the control server is a hardware server that communicates with the user devices . . . to monitor a widget that is hosted on a host page presented by a browser of the user devices . . . . In one embodiment the control server receives real time streaming context from the user devices . . . and monitors the widget hosted on the host page in real time. A person having ordinary skill in the art will recognize that the control server can be configured to provide different services and or functionality to the user devices . . .

The control server is communicatively coupled to the network via signal line . In one embodiment the control server comprises among other things a widget manager and a storage device . In another embodiment the control server additionally comprises other components conventional to a hardware server device such as a processor a memory an input device a display device etc. Persons of ordinary skill in the art will recognize that there could be multiple control servers that are used for distributed computing or because different levels of responsibility performed by the widget manager are performed by different control servers .

The widget manager is code and routines for managing a widget hosted on a host page. For example the widget manager manages loading and displaying of a widget on a host page. In one embodiment the widget manager provides automatic protection for a widget hosted on a host page to prevent any misbehavior of the widget and any unintended interaction between the host page and the widget. For example the widget manager includes instructions that when executed by a processor prevent occurrence of one or more errors associated with the widget as described below. In some embodiments portions of the widget manager are executed by JavaScript that is transmitted to the browser on the user device .

A host page is a web page hosting one or more widgets. For example a host page is a web page from a website provided by the web server . In one embodiment the host page is a web page from a website provided by the same entity that manages the control server . In another embodiment a host page is a web page from a website provided by a third party entity. The widget can be transmitted from a server that is different from the server that generates the rest of the web page content.

In one embodiment a widget is hosted on the host page using an inline frame referred to as an iframed widget . Examples of an iframed widget include but are not limited to a toolbar widget a notification widget and a sharebox widget. An inline frame referred to as an iframe is a frame for referencing content not stored on the web server . For example an inline frame is a frame embedding a HyperText Markup Language HTML document into a webpage displayed by the web server . In another embodiment a widget is hosted on the host page without using an inline frame referred to as a non iframed widget . For example the widget is directly embedded into the context of the host page without using an iframe. In one embodiment a widget e.g. an iframed widget or a non iframed widget is implemented using JavaScript.

Examples of an error associated with a widget include but are not limited to any self DoSing behavior that might lead to a service outage infinite redirections of the host page infinite redirections of an iframe for the widget frame busting any uncaught code error that affects functionality of the host page and any focus stealing behavior e.g. an iframe of a widget stealing keyboard focus from the host page etc. One skilled in the art will recognize that other examples of errors are possible.

In one embodiment the widget manager prevents the error of self DoSing by adding jitter to preloaded iframes and or applying a widget library . The widget library is described below with reference to . In another embodiment the widget manager prevents and or detects the host page from activating infinite redirections and frame busting by analyzing program code associated with the widget e.g. detecting any harmful code pattern in the program code catching loading failures of the host page and or applying the widget library . The analysis of the program code is described below in more detail with reference to a code analysis module shown in . In yet another embodiment the widget manager prevents and or detects uncaught code errors that affect functionality of the host page by analyzing program code associated with the widget.

In one embodiment the widget manager prevents and or detects the error of focusing stealing from the host page by performing one or more tests associated with the widget in a frontend. The one or more tests are described below in more detail with reference to a test engine shown in . In another embodiment the widget manager implements a backup bar as a backup for the widget manager to perform the functionality described herein. In yet another embodiment the widget manager provides other functionality that improves the debugging ability of the widget. For example the widget manager includes test code for exposing sensitive debugging parameters and triggering errors to appear instead of being suppressed when performing a test.

In one embodiment the widget manager monitors a widget displayed on a host page and performs an error correction procedure responsive to detecting an error associated with the widget. An error correction procedure is an action performed by the widget manager in response to detecting an error associated with a widget. For example an error correction procedure is one of closing a widget disabling a widget deactivating a widget and notifying a user that a widget is in error etc. On skilled in the art will recognize that other error correction procedures are possible. The widget manager is described in more detail below with reference to .

The storage may be a non volatile memory device or similar persistent storage media for storing instructions and or data for managing a widget hosted on a host page. For example the storage stores error data describing one or more errors associated with a widget. In one embodiment the storage stores a widget library for providing the functionality described herein. The storage is communicatively coupled to the widget manager . The storage is described in more detail below with reference to .

The web server may be a hardware server device. For example the web server is a hardware server operated by a third party entity. The web server is communicatively coupled to the network via signal line . The web server includes instructions and or data for generating a website and providing one or more web pages from the website to a user. For example the web server communicates content of a web page to a browser launched on a user device via the network causing the browser to present the web page to a user operating on the user device . While only one web server is shown the system could include one or more web servers .

In one embodiment the web server comprises among other things a website module and a widget module . In another embodiment the web server additionally comprises other components conventional to a hardware server device such as a processor a memory an input device a display device etc.

The website module is code and routines that when executed by a processor not pictured generates a website not pictured that is hosted by the web server . For example the web server hosts a website generated based on the website module and the website is accessed by the browser operating on the user device via the network . In one embodiment the browser accesses the website using hypertext transfer protocol HTTP requests and retrieves content for one or more web pages from the website. The website module is stored on a non transitory memory associated with the web server . In one embodiment the website is registered with the control server and the control server provides the website with access to different widget services. For example the website is registered with the control server so that a web page from the website is authorized to host a notification widget provided by the control server on the web page.

The widget module is code and routines for incorporating a widget on a host page. For example the widget module includes one or more lines of HyperText Markup Language code HTML code . In one embodiment the widget module is implemented using JavaScript code. The widget module is configured to communicate with the widget manager to exchange data information and or commands. In one embodiment the widget module is embed code embedded in the website module for hosting a widget on a web page from a website generated by the website module . In one embodiment the widget module is retrieved by a browser launched on a user device and executed by a processor not pictured of the user device causing the browser to present a widget hosted on a web page to a user. The widget module when executed by the processor cooperates with the widget manager for managing the widget hosted on the web page presented by the browser . For example the widget module loads the widget on the web page and executes commands received from the widget manager . The widget module is described in more detail below with reference to .

The network can be a conventional type wired or wireless and may have any number of configurations such as a star configuration token ring configuration or other configurations known to those skilled in the art. Furthermore the network may comprise a local area network LAN a wide area network WAN e.g. the Internet and or any other interconnected data path across which multiple devices may communicate. In yet another embodiment the network may be a peer to peer network. The network may also be coupled to or includes portions of a telecommunications network for sending data in a variety of different communication protocols. In yet another embodiment the network includes Bluetooth communication networks or a cellular communications network for sending and receiving data such as via short messaging service SMS multimedia messaging service MMS hypertext transfer protocol HTTP direct data connection WAP email etc.

Each user device . . . can be a computing device for example a laptop computer a desktop computer a tablet computer a mobile telephone a personal digital assistant PDA a mobile email device a portable game player a portable music player a television with one or more processors embedded therein or coupled thereto or any other electronic device capable of accessing the network . One having ordinary skill in the art will recognize that other types of user devices . . . are possible. In one embodiment the system comprises a combination of different types of user devices . . .

The user device is communicatively coupled to the network via signal line . The users . . . interact with the user devices . . . . The user device includes among other things a browser . The user device is communicatively coupled to the network via signal line . The user device comprises among other things a browser

The browser . . . is code and routines stored in a memory of the user device . . . and executed by a processor of the user device . . . . In one embodiment the browser presents a graphical user interface GUI to a user and allows the user to input information via the GUI.

In one embodiment the browser retrieves content of one or more web pages from a website hosted by the web server and widget content from the control server and presents the one or more web pages to a user. Additionally the browser receives the widget module as part of the web page from the web server . The browser presents a widget hosted on the one or more web pages to the user when the widget module is executed by a processor of the user device .

Referring now to example hardware implementing the functionality for managing widgets is described. is a block diagram of a control server that includes a processor memory storage and a communication unit .

The processor comprises some or all of an arithmetic logic unit a microprocessor a general purpose controller or some other processor array to perform computations and provide electronic display signals to a display device. The processor is coupled to the bus for communication with the other components via signal line . Processor processes data signals and may comprise various computing architectures including a complex instruction set computer CISC architecture a reduced instruction set computer RISC architecture or an architecture implementing a combination of instruction sets. Although only a single processor is shown in multiple processors may be included. The processing capability may be limited to supporting the display of images and the capture and transmission of images. The processing capability might be enough to perform more complex tasks including various types of feature extraction and sampling. It will be obvious to one skilled in the art that other processors operating systems sensors displays and physical configurations are possible.

The memory stores instructions and or data that may be executed by the processor . The memory is coupled to the bus for communication with the other components via signal line . The instructions and or data may comprise code for performing any and or all of the techniques described herein. The memory may be a dynamic random access memory DRAM device a static random access memory SRAM device flash memory or some other memory device known in the art. In one embodiment the memory also includes a non volatile memory or similar permanent storage device and media such as a hard disk drive a floppy disk drive a CD ROM device a DVD ROM device a DVD RAM device a DVD RW device a flash memory device or some other mass storage device known in the art for storing information on a more permanent basis.

The communication unit receives data from the user devices and the web server . The communication unit sends the data to the widget manager . The communication unit is coupled to the bus via signal line . In one embodiment the communication unit includes a port for direct physical connection to the network or to another communication channel. For example the communication unit includes a USB SD CAT 5 or similar port for wired communication with the network . In another embodiment the communication unit includes a wireless transceiver for exchanging data with the network or with another communication channel using one or more wireless communication methods such as IEEE 802.11 IEEE 802.16 BLUETOOTH near field communication NFC or another suitable wireless communication method. In one embodiment the communication unit includes a NFC chip that generates a radio frequency RF for short range communication.

Referring now to an example widget manager is shown in more detail. In one embodiment the widget manager comprises a communication interface a registration module a command module a manager monitoring module an error detection engine a code analysis module a test engine a user interface module a manager switch and a data analysis module that are communicatively coupled to a software communication mechanism . Software communication mechanism may be an object bus such as CORBA direct socket communication such as TCP IP sockets among software modules remote procedure calls UDP broadcasts and receipts HTTP connections function or procedure calls etc. Further any or all of the communication could be secure SSH HTTPS etc . The software communication can be implemented on any underlying hardware such as a network the Internet a bus a combination thereof etc.

In some embodiments some of the components illustrated as being part of the widget manager are included as JavaScript that is that is executed by the browser on the user device . Thus in one embodiment there is a client side widget manager that is part of the JavaScript included on or loaded by the host page which performs many of these operations and signals to the control server as needed or when it has information to convey. This client side approach is practical and scalable. Other functions such as the tracking of the widget status are more commonly performed by the widget manager on the control server .

The communication interface includes hardware and or software logic routines for handling communication between the communication unit and other components of the widget manager . In one embodiment the communication interface is stored in the memory of the control server and is accessible and executable by the processor . In either embodiment the communication interface is adapted for cooperation and communication with the processor and other components of the control server via software communication mechanism .

In one embodiment the communication interface receives information and or data from a widget module when the widget module is retrieved by a browser of a user device from the web server and executed by a processor of the user device . The communication interface sends the received information and or data to other components of the widget manager . For example the communication interface receives a registration signal from an initialization module of the widget module and sends the registration signal to the registration module . In one embodiment the communication interface receives notifications from a notification module of the widget module and sends the notifications to the manager monitoring module . In another embodiment the communication interface receives a heartbeat signal and or status updates from the widget monitoring module of the widget module and sends the heartbeat signal and or status updates to the manager monitoring module . The initialization module the notification module and the widget monitoring module are described in more detail below with reference to .

In another embodiment the communication interface receives information and or data from other components of the widget manager and sends the information and or data to the widget module retrieved by the browser and executed by a processor of the user device . For example the communication interface receives commands from the command module and sends the commands to a command execution module of the widget module . The command execution module is described in more detail below with reference to . In one embodiment the communication interface receives a status update request from the command module and sends the status update request to the command execution module of the widget module .

The registration module includes hardware and or software logic for registering a widget to be hosted on a host page. In one embodiment the registration module is a set of instructions executable by the processor to provide the functionality described below for registering a widget. In another embodiment the registration module is stored in the memory of the control server and is accessible and executable by the processor . In either embodiment the registration module is adapted for cooperation and communication with the processor and other components of the control server via software communication mechanism .

The registration module receives a registration signal from the initialization module of the widget module via the communication interface . The registration module parses the registration signal and extracts one or more of an identifier of the widget an identifier of a host page hosting the widget e.g. a uniform resource locator URL of the host page a language used in the host page a language used in the widget a domain for the host page an identifier for a browser presenting the host page and a version identifier of the browser . The registration module stores the extracted information in the storage .

In one embodiment the registration module registers the widget in a registration file. For example the registration module stores the identifiers of the widget and the host page in a table of the registration file so that the table includes identifiers of all the registered widgets and their host pages. In another embodiment the registration module determines whether the browser for presenting the host page is compatible with the widget. For example if a widget is configured to be presented by a Google Chrome browser only the registration module determines that the browser that is an Opera browser is not compatible with the widget and the widget cannot be hosted on a web page presented using the Opera browser.

The command module includes hardware and or software logic for generating commands to manage a widget. In one embodiment the command module is a set of instructions executable by the processor to provide the functionality described below for generating commands. In another embodiment the command module is stored in the memory of the server and is accessible and executable by the processor . In either embodiment the command module is adapted for cooperation and communication with the processor and other components of the control server via software communication mechanism .

In one embodiment the command module generates a show command for notifying the command execution module of the widget module to display the widget on the host page. In another embodiment the command module generates a hide command for notifying the command execution module to hide the widget displayed on the host page. The show command and the hide command are generated alternatively so that there would not be any successive show commands or any successive hide commands for a widget. The command module sends the show command and or the hide command to the command execution module via the communication interface .

In one embodiment the command module generates a command for requesting a status update of a widget hosted on a host page. For example the command module generates a requestHealth command for inquiring whether the widget is in a healthy or unhealthy state. A healthy state refers to a state that a widget hosted on a host page functions correctly. For example a healthy state indicates that no error occurs when hosting the widget on the host page. An unhealthy state refers to a state that a widget hosted on a host page does not function correctly. For example an unhealthy state indicates that an error associated with a widget occurs and causes malfunctioning of the widget. In one embodiment the command module generates a requestDiagnosticString command for requesting the widget module to return a set of status variables. The set of status variables refers to status data summarizing the state of the widget. For example the set of status variables includes an XMLHttpRequest XHR count e.g. the number of HTTP or HTTPS requests sent to the server an error count e.g. the number of errors detected and a click count e.g. the number of times that a widget is clicked by a user . The command module generates a status update request including one or more of the requestHealth command and the requestDiagnosticString command and sends the status update request to the command execution module .

In other embodiments the command module generates one or more other commands e.g. a containerActivated command a containerIdle command an enable command a disable command a close command etc. and sends the one or more other commands to the command execution module . A containerActivated command allows the host page to convey its activated status to the widget module . A containerIdle command allows the host page to convey its idle status to the widget module . An enable command activates the widget on the host page. A disable command deactivates the widget on the host page. In one embodiment the disable command acts like an off switch that prevents the widget from being displayed. A close command removes the widget from the host page in the current session of the host page. In one embodiment the close command acts like an emergency off switch.

The manager monitoring module includes hardware and or software logic for monitoring a widget hosted on a host page. The manager monitoring module cooperates with the widget monitoring module to monitor activities of the widget. In one embodiment the manager monitoring module is a set of instructions executable by the processor to provide the functionality described below for monitoring the widget. In another embodiment the manager monitoring module is stored in the memory of the control server and is accessible and executable by the processor . In either embodiment the manager monitoring module is adapted for cooperation and communication with the processor and other components of the control server via software communication mechanism .

In one embodiment the manager monitoring module monitors a widget hosted on a host page by receiving a heartbeat signal from the widget monitoring module of the widget module . A heartbeat signal is a signal indicating that a widget hosted on a host page is active and responsive to management of the widget manager . In one embodiment the manager monitoring module receives a heartbeat signal periodically. For example the manager monitoring module receives a heartbeat signal every 30 seconds. The manager monitoring module stores the heartbeat signal as a portion of status data in the storage . The status data is described below with reference to . In one embodiment the manager monitoring module instructs the user interface module to generate graphical data for providing a user interface depicting a graph of the heartbeat signal to an administrator of the server . In one embodiment the graph is a real time graph of the heartbeat signal.

In another embodiment the manager monitoring module monitors the widget hosted on the host page by receiving status updates for the widget from the widget monitoring module of the widget module . For example the manager monitoring module instructs the command module to generate one or more commands e.g. a requestHealth command a requestDiagnosticString command and send a status update request including the one or more commands to the command execution module for requesting an update of the status of the widget. The command execution module executes the one or more commands and instructs the widget monitoring module to generate a status update including status data describing a status of the widget. The manager monitoring module receives the status update including the status data from the widget monitoring module . In one embodiment the manager monitoring module instructs the command module to generate and send the one or more commands periodically. Correspondingly the manager monitoring module receives a status update including status data periodically. The manager monitoring module sends the status data to the error detection engine . In one embodiment the manager monitoring module instructs the user interface module to generate graphical data for providing a user interface to present the status of the widget to a user e.g. an administrator at the control server .

The status data includes data describing one or more of a healthy or unhealthy state of the widget and a set of status variables e.g. an XHR count an error count and a click count for the widget. In one embodiment the status data additionally includes a heartbeat signal associated with the widget. One skilled in the art will recognize that other data may be included in the status data. In one embodiment the manager monitoring module buckets the status data by an identifier of the widget and an identifier of a ping sending the status data. This is particularly advantageous because among other things it allows the status data to be filtered by different dimensions. In another embodiment the manager monitoring module stores the status data in an N dimensional space. For example the manager monitoring module stores the status data in a database.

In yet another embodiment the manager monitoring module monitors the widget by receiving one or more notifications from the notification module of the widget module . For example the manager monitoring module receives a load notification from the notification module indicating that the widget is starting to be loaded on the host page. The manager monitoring module monitors the loading of the widget responsive to receiving the load notification. When the widget is loaded the manager monitoring module receives a display ready notification from the notification module indicating that the widget is successfully loaded and ready to be displayed on the host page. The manager monitoring module calculates a loading time for the widget. A loading time is the time that a host page takes to load a widget. In one embodiment the loading time is the time interval between receiving the load notification and the display ready notification.

The manager monitoring module determines whether the loading time for the widget has exceeded a predetermined amount of time. If the loading time exceeds the predetermined amount of time the manager monitoring module sends a time exceeding signal to the error detection engine and the error detection engine determines that an error occurs in the loading process. If the loading time does not exceed the predetermined amount of time the manager monitoring module completes monitoring the loading of the widget. Other examples of notifications received by the manager monitoring module are described below with reference to .

In yet another embodiment the manager monitoring module cooperates with the widget monitoring module of the widget module to monitor user interaction with the widget. For example the widget monitoring module monitors the widget displayed on the host page and detects any user interaction e.g. user clicks user inputs etc. associated with the widget. The widget monitoring module sends interaction data describing the user interaction to the manager monitoring module . The manager monitoring module stores the interaction data in the storage .

The error detection engine includes hardware and or software logic for detecting warnings and errors associated with a widget hosted on a host page. In one embodiment the error detection engine is a set of instructions executable by the processor to provide the functionality described below for detecting a warning and or error associated with a widget hosted on a host page. In another embodiment the error detection engine is stored in the memory of the control server and is accessible and executable by the processor . In either embodiment the error detection engine is adapted for cooperation and communication with the processor and other components of the control server via software communication mechanism .

The error detection engine receives status data describing a status of the widget from the manager monitoring module . In one embodiment the error detection module retrieves the status data from the storage . The error detection engine parses the status data and extracts one or more of a heartbeat signal a healthy or unhealthy state of a widget and a set of status variables e.g. an XHR count an error count and a click count from the status data. In one embodiment the error detection engine detects a warning based on a timeout period that occurs prior to an official error. The warning timeout causes a softer action to be taken than when an error is received and can signal something that can be fixed before an error causes the widget to be shutdown.

In one embodiment the error detection engine determines that an error occurs if a heartbeat signal is missing in the status data. In another embodiment the error detection engine determines that an error occurs if the status data includes data describing an unhealthy state of the widget. In yet another embodiment the error detection engine determines that at least one error occurs if the error count included in the status data is non zero.

In one embodiment the error detection engine detects a loading error occurring in the loading process of the widget responsive to receiving a time exceeding signal from the manager monitoring module . In another embodiment the error detection engine detects a loading error if the widget fails to load on the host page. For example the manager monitoring module receives a notification from the notification module describing that the widget is unable to be loaded in the current environment and sends an error signal to the error detection engine . The error detection engine determines a loading error occurred responsive to receiving the error signal. If the widget is unable to be loaded on the host page because of the incompatibility of the browser the error detection engine provides an application programming interface API that allows a widget to be self disabled.

In another embodiment the error detection engine detects an error if an error notification e.g. an onError message notification is received from the notification module . The onError message notification is described below with reference to the notification module shown in .

In yet another embodiment the error detection engine additionally includes a handler for detecting the error of infinite reloads of the host page. A handler is code and routines for preventing program bugs from causing infinite redirections of the host page. For example a handler is an onBeforeUnload handler. The handler is installed on the host page before creating an iframe for a widget and removed from the host page when the iframe is successfully loaded on the host page e.g. when the display ready notification is generated by the notification module . In one embodiment the error detection engine determines whether the browser presenting the host page is compatible with the handler. For example the error detection engine determines that an Opera browser is incompatible with the handler because the Opera browser does not support the functionality of the handler.

Error data is data associated with one or more errors. In one embodiment the error data includes data identifying the type of errors a brief description for each error an identifier of the widget and status data for the widget when the errors occur etc. In one embodiment the error data is bucketed by an identifier of the widget and an identifier of a ping sending the data. In another embodiment the error data is stored in an N dimensional space. For example the error data is stored in a database. The error detection engine stores the error data in the storage .

The error detection engine performs an error correction procedure responsive to detecting one or more errors. In one embodiment the error detection engine instructs the command module to generate a disable command to disable the widget if at least one error is detected e.g. a non zero error count . In another embodiment the error detection engine instructs the command module to generate a disable command to disable the widget if a predetermined number of errors associated with the widget have been detected. For example the error detection engine disables the widget hosted on the host page after detecting a predetermined amount of errors e.g. errors . In yet another embodiment the error detection engine instructs the command module to generate a close command to remove the widget from the host page in the current session if an error is detected.

The code analysis module includes hardware and or software logic for analyzing program code associated with a widget. In one embodiment the code analysis module is a set of instructions executable by the processor to provide the functionality described below for analyzing program code associated with a widget. In another embodiment the code analysis module is stored in the memory of the control server and is accessible and executable by the processor . In either embodiment the code analysis module is adapted for cooperation and communication with the processor and other components of the control server via software communication mechanism .

The program code associated with a widget is code for implementing a widget hosted on a web page. For example the program code is JavaScript code for embedding a widget on a host page. In one embodiment the program code is stored as a portion of widget code in the storage . The widget code is described below with reference to .

In one embodiment the code analysis module is an offline analysis tool that analyzes the program code. The code analysis module retrieves the program code from the storage . The code analysis module analyzes the program code and determines whether there is any harmful code pattern in the program code. A harmful code pattern is a piece of code that is likely to cause errors in a program. For example a harmful code pattern includes one or more bugs in the program. In one embodiment the code analysis module maintains a list of harmful code patterns and detects any harmful code pattern in the program code based at least on the list of harmful code patterns. For example the code analysis module parses the program code and detects every code pattern in the program code that is included in the list of harmful code patterns.

In one embodiment the code analysis module instructs a code compiler e.g. a JavaScript compiler to output a list of unrenamed exported global variables. The list of unrenamed exported global variables is saved in the storage and is used to prevent new global variables from polluting the global namespace. In another embodiment the code analysis module guards the program code using entry points. For example the code analysis module guards the program code using a code block e.g. a try catch code block so that any call functions to the program code is guarded by the code block.

The test engine includes hardware and or software logic for testing a widget in a frontend. In one embodiment the test engine is a set of instructions executable by the processor to provide the functionality described below for testing a widget in a frontend. In another embodiment the test engine is stored in the memory of the control server and is accessible and executable by the processor . In either embodiment the test engine is adapted for cooperation and communication with the processor and other components of the control server via software communication mechanism .

A frontend is the interface presented to a user. For example a frontend is a host page hosting a widget in a test system. The test engine performs one or more tests to integrate a widget into a frontend. The test engine tests one or more of basic functionality of the widget whether the heartbeat signal of the widget works correctly and whether a manager switch and a widget switch for the widget work correctly. The manager switch and the widget switch are described below. In one embodiment the test engine conducts the one or more tests to implement one or more test plans. The one or more test plans include one or more goals of no focus stealing from the host page to the preloaded iframe for the widget no program code errors leaked to the host page no frame busting no excessive network requests made from the widget widget not visible when preloaded on the host page and running the widget in different environments etc.

The user interface module includes hardware and or software logic for generating graphical data for providing a user interface. In one embodiment the user interface module is a set of instructions executable by the processor to provide the functionality described below for generating graphical data for providing a user interface. In another embodiment the user interface module is stored in the memory of the control server and is accessible and executable by the processor . In either embodiment the user interface module is adapted for cooperation and communication with the processor and other components of the control server via software communication mechanism .

In one embodiment the user interface module generates graphical data for depicting an image of a widget. The user interface module sends the graphical data to a browser on a user device causing the browser to generate a user interface for presenting the image of the widget to a user. A user interacts with the widget via the user interface. For example a user clicks the widget via the user interface. In another embodiment the user interface module generates graphical data for providing a user interface to deliver a message to a user e.g. a message notifying the user that the widget hosted on the host page is producing an error . The browser receives the graphical data and generates the user interface for presenting the message to the user.

In one embodiment the user interface module generates graphical data for providing a user interface that depicts a graph of a heartbeat signal associated with a widget. An application e.g. a browser launched on the control server receives the graphical data from the user interface module and generates the user interface for depicting the graph of the heartbeat signal to an administrator of the control server . In another embodiment the user interface module generates graphical data for providing a user interface that depicts the status of the widget using the status data. The application launched on the control server receives the graphical data from the user interface module and generates the user interface for depicting the status of the widget to the administrator of the control server .

The manager switch includes hardware and or software logic for preventing new sessions from creating a widget hosted on a host page. In one embodiment the manager switch is a set of instructions executable by the processor to provide the functionality described below for preventing new sessions from creating a widget hosted on a host page. In another embodiment the manager switch is stored in the memory of the control server and is accessible and executable by the processor . In either embodiment the manager switch is adapted for cooperation and communication with the processor and other components of the control server via software communication mechanism .

Under the threat of long lived web applications the manager switch prevents new sessions from creating a widget hosted on a host page. A long lived web application is a web application that has run over a predetermined amount of time e.g. 3 days . In one embodiment a long lived web application is defined by an administrator of the control server . In one embodiment the manager switch includes code for setting a parameter to enable or disable the creation of the widget. If the parameter is set to be 1 the manager switch enables the widget. For example the widget is set in an on state. If the parameter is set to be 0 or empty the manager switch disables the widget. For example the widget is set in an off state. In one embodiment the value for the parameter is stored in a configuration file. The manager switch is configured based at least in part on the value for the parameter in the configuration file. In one embodiment the configuration file includes values for parameters associated with a plurality of manager switches . The plurality of manager switches are configured based at least in part on the values stored in the configuration file. In another embodiment the configuration file includes values for emergency parameters that are used to configure the manager switches in an event of a meltdown of the widget.

The data analysis module includes hardware and or software logic for analyzing error data associated with a widget. In one embodiment the data analysis module is a set of instructions executable by the processor to provide the functionality described below for analyzing error data associated with a widget. In another embodiment the data analysis module is stored in the memory of the control server and is accessible and executable by the processor . In either embodiment the data analysis module is adapted for cooperation and communication with the processor and other components of the control server via software communication mechanism .

The data analysis module retrieves error data associated with a widget from the storage . The data analysis module analyzes the error data to generate an analysis result. For example the data analysis module employs machine learning techniques to analyze the error data and generates an analysis result that includes analytics data describing error patterns and factors incurring the errors. One skilled in the art will recognize that the analytics data may include other data. In one embodiment the data analysis module stores the analysis result in the storage as a portion of analytics data . The analytics data is described below with reference to . In another embodiment the data analysis module instructs the user interface engine to generate graphical data for displaying the analysis result.

Referring now to the storage is shown in more detail. illustrates one embodiment of a block diagram of storage that includes a widget library status data error data analytics data widget code and interaction data .

The widget library includes code and or data for preventing and detecting errors. For example the widget library provides code for generating a heartbeat signal and a status update e.g. a healthy or unhealthy state of the widget a set of status variables etc. of the widget. In one embodiment the widget library includes code for throttling networking calls to prevent self DoSing behaviors. In another embodiment the widget library includes code for detecting keyboard or input focus stealing behaviors. In yet another embodiment the widget library includes code for preventing infinite reloads of the host page and frame busting. In yet another embodiment the widget library includes code for overriding one or more functions e.g. a window.top function used to implement a widget hosted on a host page.

The status data includes data describing states of one or more widgets. For example the status data includes data describing one or more of a heartbeat signal a healthy or unhealthy state of a widget and a set of status variables e.g. an XHR count an error count and a click count for the widget. In one embodiment the status data includes an identifier of the widget and an identifier of the host page hosting the widget.

The error data includes data describing errors associated with one or more widgets. For example the error data includes one or more of data identifying the type of error a brief description of the error an identifier of the widget and status data for the widget when the error occurs etc.

The analytics data includes data describing one or more analysis results for the error data . For example the analytics data includes data describing one or more error patterns associated with the errors and one or more factors incurring the errors.

The widget code includes program code for implementing a widget hosted on a host page. For example the widget code includes JavaScript code for generating an iframe for a widget and integrating the iframe into the host page. In one embodiment the widget code includes code for configuring the iframe such as setting the height width and skin color for the iframe. One skilled in the art will recognize that the widget code may include other program code associated with a widget.

The interaction data is data describing user interactions with one or more widgets. For example the interaction data includes data describing a user input to a widget hosted on a host page. In one embodiment the interaction data includes data describing that a user has clicked an image for a widget shown on the host page. For example the interaction data includes data describing that a user has clicked a Hide button shown in the image to hide the widget.

Referring to the widget module is shown in more detail. is a block diagram of the widget module according to some examples. In one embodiment the widget module is retrieved by a browser launched on a user device in conjunction with content of a web page from the web server . The browser presents the web page to a user. The widget module is executed by a processor not pictured of the user device so that a widget is generated and hosted on the web page. The widget module communicates with components of the widget manager to provide the functionality described herein. In one embodiment the widget module is retrieved from the web server and stored in a memory not pictured of the user device .

As illustrated in the widget module comprises among other things a communication interface an initialization module a load module a notification module a widget monitoring module a command execution module and a widget switch . These components of the widget module are communicatively coupled to each other via a software communication mechanism .

The communication interface is code and routines for handling communication between other components of the widget module and components of the widget manager . For example the communication interface receives a registration signal from the initialization module and sends the registration signal to the registration module via the network . The communication interface communicates with the other components via software communication mechanism . In one embodiment the communication interface receives a notification from the notification module and sends the notification to the manager monitoring module via the network . In another embodiment the communication interface receives a status update from the widget monitoring module and sends the status update to the manager monitoring via the network . In yet another embodiment the communication interface receives a command from the command module via the network and sends the command to the command execution module .

The initialization module is code and routines for initializing a widget to be hosted on a host page. For example the initialization module includes a piece of bootloader code that is used to initialize the widget. The initialization module communicates with the other components via the software communication mechanism . In one embodiment the initialization module establishes a connection with the widget manager in the initialization process. The initialization module generates a registration signal and sends the registration signal to the registration module via the communication interface and the network . The initialization module sends an initialization complete signal to the load module when the initialization process is complete.

The load module is code and routines for loading a widget on a host page. For example the load module loads a widget on a host page after receiving an initialization complete signal from the initialization module . The load module communicates with the other components via the software communication mechanism . In one embodiment the load module instructs the notification module to generate a load notification and send the load notification to the manager monitoring module at the beginning of loading the widget. The load module loads the widget. For example the load module uses an iframe.open function to open an iframe for the widget and loads content for the widget e.g. an image for the widget to the iframe. In one embodiment the load module configures the iframe according to a configuration setting for the iframe. For example the load module sets the height width and skin color for the iframe based at least in part on the configuration setting.

When the widget is successfully loaded on the host page the load module instructs the notification module to generate a display ready notification and send the notification to the manager monitoring module . In one embodiment the manager monitoring module instructs the command module to generate a show command and send the show command to the command execution module . The command execution module instructs the load module to display the widget on the host page based on the show command.

The notification module is code and routines for generating notifications. For example the notification module generates a load notification and sends the load notification to the manager monitoring module . The load notification indicates that the widget is starting to be loaded on the host page. In one embodiment the load notification is implemented using an onStarting call. The notification module is communicatively coupled to the software communication mechanism .

In one embodiment the notification module generates a display ready notification and sends the display ready notification to the manager monitoring module . The display ready notification indicates that the widget is successfully loaded and ready to be displayed on the host page. In one embodiment the display ready notification is sent to the manager monitoring module in conjunction with a heartbeat signal. In another embodiment the display ready notification is implemented using an onReady version ID call. The version ID is a version identifier of a frontend presenting the host page hosting the widget. For example the version ID is a version identifier of a browser that presents the host page. In one embodiment the manager monitoring module instructs the command module to generate a command to disable the widget responsive to receiving a version ID that represents a browser that is incompatible with the widget.

In another embodiment the notification module generates an error notification that includes an error message responsive to receiving an error signal from the widget monitoring module and sends the error notification to the manager monitoring module . The error notification indicates that an error associated with the widget is detected by the widget monitoring module and a description of the error is included in the error message. In one embodiment the error notification is implemented using an onError message call.

In yet another embodiment the notification module generates an informational notification and sends the informational notification to the manager monitoring module . The informational notification is a notification including information associated with the widget such as an identifier of the widget an identifier of the host page etc. In one embodiment the informational notification is implemented using an onInfo call.

In other embodiments the notification module generates one or more of a hide notification a close notification and a show notification and sends the one or more notifications to the manager monitoring module . The hide notification indicates that the widget is hidden on the host page responsive to a request from the widget module instead of a command from the widget manager . In one embodiment the hide notification is implemented using an onHide call. The close notification indicates that the widget is closed on the host page responsive to a request from the widget module instead of a command from the widget manager . In one embodiment the close notification is implemented using an onClose call. The show notification indicates that the widget is shown on the host page in an urgent situation responsive to a request from the widget module instead of a command from the widget manager . In one embodiment the show notification is implemented using an onShow call.

The widget monitoring module is code and routines for monitoring activities of a widget on a user device . The widget monitoring module cooperates with the manager monitoring module to monitor the widget. For example the widget monitoring module monitors the loading of the widget on the host page and sends an error signal to the notification module if the widget monitoring module detects an error. The notification module then sends an error notification to the manager monitoring module responsive to receiving the error signal. In one embodiment both of the manager monitoring module and the widget monitoring module are involved in monitoring the loading of the widget. In another embodiment only the widget monitoring module monitors the loading of the widget. In yet another embodiment only the manager monitoring module monitors the loading of the widget. The widget monitoring module communicates with the other components via the software communication mechanism .

In one embodiment the widget monitoring module detects user interaction with the widget and generates interaction data describing the user interaction. For example the widget monitoring module monitors the widget displayed on the host page and detects user activities on the widget e.g. user clicks on the widget user input to the widget etc. . The widget monitoring module sends the interaction data to the manager monitoring module to identify any problems that are detected in the interaction.

In another embodiment the widget monitoring module monitors status of the widget displayed on the host page. For example the widget monitoring module maintains a state parameter that indicates whether the widget is in a healthy or unhealthy state. If the widget monitoring module detects that the widget is in an unhealthy state the widget monitoring module sets the value for the state parameter to be 0 or empty. The widget monitoring module instructs the notification module to send an error notification to the manager monitoring module . If the widget is in a healthy state the widget monitoring module sets the value for the state parameter to be 1. 

In one embodiment the widget monitoring module maintains a set of counters for storing values for a set of status variables. For example the widget monitoring module uses a first counter to store a value for the XHR count a second counter to store a value for the error count and a third counter to store a value for the user click count. The widget monitoring module modifies values storing in the counters if an activity associated with the widget is detected. For example the widget monitoring module increases the value for the user click count by one if a user has clicked the widget. As another example the widget monitoring module increases the value for the error count by two if the widget monitoring module detects two errors associated with the widget.

In one embodiment the command execution module receives a status update request from the command module and instructs the widget monitoring module to generate a status update for the widget. The widget monitoring module generates the status update by including one or more of the values for the state parameter e.g. a healthy state and values for the counters e.g. XHR count error count user click count etc. in the status update. In one embodiment the status update is sent to the manager monitoring module as a portion of a ping. The ping includes one or more of an identifier of the widget an identifier of the version of the widget a length of monitoring time the ping covers e.g. miliseconds a value for the XHR count a value for the error count a value for the user click count and any instance of a widget that is not unhealthy. In one embodiment the ping includes both the values for the state parameter e.g. a healthy state and the values for the counters e.g. XHR count error count user click count etc. . In another embodiment the ping only includes the values for the counters. In yet another embodiment the ping also includes a sample rate for the status of the widget. One skilled in the art will recognize that the ping may include other data. In one embodiment the ping is sent to the widget manager in the form of a HTTP or HTTPS request.

In one embodiment the widget monitoring module generates a heartbeat signal indicating that the widget is active and sends the heartbeat signal to the manager monitoring module . For example the widget monitoring module generates a heartbeat signal for the widget periodically if the widget is active.

The command execution module is code and routines for parsing and executing commands received from the command module . For example the command execution module displays a widget on a host page responsive to receiving a show command. Similarly the command execution module hides the widget on the host page responsive to receiving a hide command activates the widget responsive to receiving an enable command deactivates the widget responsive to receiving a disable command and removing the widget from the host page responsive to receiving a close command. The command execution module communicates with the other components via the software communication mechanism .

In one embodiment the command execution module receives a status update request from the command module and extracts one or more commands from the status update request. If a requestHealth command is included the status update request the command execution module instructs the widget monitoring module to generate a status update including a healthy or unhealthy state of the widget. If a requestDiagnosticString command is included in the status update request the command execution module instructs the widget monitoring module to generate a status update including values for a set of status variables. If both the requestHealth command and the requestDiagnosticString command are included in the status update request the command execution module instructs the widget monitoring module to generate a status update including a healthy or unhealthy state of the widget and values for a set of status variables. The widget monitoring module sends the status update to the manager monitoring module .

The widget switch is code and routines for disabling new network requests from long lived sessions. A long lived session is a session that exists over a predetermined amount of time. For example a long lived session is a session that exists more than 48 hours. In one embodiment a long lived session is defined by an administrator of the server . The widget switch communicates with the other components via the software communication mechanism . In one embodiment the widget switch is configured to ignore new incoming network requests under the threat of long lived web applications. For example the widget switch includes code for setting a parameter to enable or disable new network requests. If the parameter is set to be 1 the widget switch enables new network requests. If the parameter is set to be 0 or empty the widget switch disables new network requests.

The creation and maintenance of a widget can be divided into initialization and running During initialization the modules in the widget are configured and defined and the widget is registered with the registration module . Next the widget runs on the host page. Turning now to the user interface module is a graphic representation of a host page www.hostpage.com hosting a plurality of widgets. For example the host page includes a non iframed widget A an iframed widget B and a sharebox widget . In one embodiment a widget hosted on a host page is represented by an image embedded in the host page and a user interacts with the widget by clicking on the image. In other embodiments a user interacts with the widget by providing an input via a field or a drop box depicted in the image.

Responsive to receiving the initialization complete signal the load module starts to load the widget on the host page. The load module instructs the notification module to generate a load notification indicating that the widget is being loaded on the host page. The manager monitoring module receives the load notification from the notification module and begins to monitor the loading of the widget. When the load module has successfully loaded the widget on the host page the load module instructs the notification module to generate a display ready notification indicating that the widget is loaded and ready to display. Although the widget is loaded on the host page the widget is not displayed to a user yet.

The manager monitoring module receives the display ready notification from the notification module . In one embodiment the manager monitoring module instructs the command module to generate a command e.g. a show command for notifying the command execution module to display the widget on the host page. Optionally the command module sends the command to the command execution module . Hereinafter a step e.g. step is depicted using a dashed line to indicate that it is an optional feature of the method. Responsive to receiving the command the command execution module displays the widget on the host page.

The manager monitoring module monitors any activity of the widget after the widget is displayed. In one embodiment the manager monitoring module cooperates with the widget monitoring module to monitor activities associated with the widget. If the user has interacted with the widget e.g. clicking the widget providing an input to the widget etc. the widget monitoring module detects the user interaction with the widget. The widget monitoring module generates interaction data describing the user interaction and sends the interaction data to the manager monitoring module .

The manager monitoring module receives the interaction data and stores the interaction data in the storage . Optionally the manger monitoring module receives a heartbeat signal from the widget monitoring module and stores the heartbeat signal as a portion of status data in the storage . In one embodiment the manager monitoring module receives a heartbeat signal from the widget monitoring module periodically.

The manager monitoring module sends a status update request to the command execution module . The command execution module extracts one or more commands from the status update request and instructs the widget monitoring module to generate a status update including status data for the widget. The manager monitoring module receives the status update from the widget monitoring module . The manager monitoring module extracts the status data from the status update and stores the status data in the storage . In one embodiment the manager monitoring module sends the status data to the error detection engine .

The error detection engine receives the status data from the manager monitoring module . In one embodiment the error detection engine retrieves the status data from the storage . The error detection engine parses the status data and determines whether an error associated with the widget occurs. For example the error detection engine determines that an error occurs when the status data describes that the widget is in an unhealthy state. As another example the error detection engine determines that one or more errors occur if the value for the error count included in the status data is nonzero. If the error detection engine detects an error associated with the widget the error detection engine stores error data describing the detected error in the storage . In one embodiment the error data includes data identifying the type of error a brief description of the error an identifier of the widget and status data for the widget when the error occurs etc.

The error detection engine performs an error correction procedure responsive to detecting the error. In one embodiment the error detection engine performs the error correction procedure when a predetermined number of errors have been detected. For example the error detection engine performs the error correction procedure when the value for the error count exceeds a predetermined number. An error correction procedure includes one of disabling widget closing the widget and deactivating the widget etc. For example the error detection engine performs the error correction procedure of closing the widget by instructing the command module to generate a close command to remove the widget from the host page. The command module sends the close command to the command execution module . The command execution module receives the close command and closes the widget by removing the widget from the host page.

Referring now to various embodiments of the method of the specification will be described. is a flow diagram illustrating one embodiment of a method for error handling associated with a widget hosted on a host page. The initialization module initializes the widget and generates a registration signal to register the widget. The initialization module sends the registration signal to the registration module and the registration module registers the widget in a registration file. The load module begins to load the widget on the host page. The manager monitoring module receives a display ready notification from the notification module when the widget is loaded on the host page and ready to be displayed. Responsive to receiving the display ready notification the manager monitoring module instructs the command module to generate a command for displaying the widget. The command module sends the command to notify the command execution module to display the widget on the host page. The command execution module displays the widget on the host page responsive to receiving the command.

The manager monitoring module monitors the widget to identify any activity associated with the displayed widget. In one embodiment the manager monitoring module cooperates with the widget monitoring module to monitor activities associated with the widget. For example the manager monitoring module receives one or more of a heartbeat signal interaction data and a status update including status data from the widget monitoring module . The manager monitoring module sends the status data to the error detection engine .

The error detection engine parses the status data and determines whether an error associated with the widget occurs. If the error detection engine detects an error the error detection engine performs an error correction procedure responsive to the detection of the error. In one embodiment the error detection engine performs an error correction procedure when a predetermined number of errors e.g. 10 errors have been detected.

In one embodiment the manager monitoring module calculates a loading time for loading the widget on the host page. For example the manager monitoring module determines the loading time as a time interval between receiving the load notification and the display ready notification. The manager monitoring module determines whether the loading time exceeds a predetermined amount of time. If the loading time exceeds the predetermined amount of time the manager monitoring module generates and sends a time exceeding signal to the error detection engine and the method moves to block . Otherwise the method moves to block .

At block the error detection engine determines that a warning is detected responsive to receiving a time exceeding signal. The warning timeout when exceeded allows the widget to possible load by the error timeout. In one embodiment when the warning timeout is exceeded the error detection engine receives a signal of the occurrence or the warning is recorded for later conveyance to the error detection engine.

If the widget does not load the error detection engine determines that an error is detected responsive to receiving a time exceeding signal. The error detection engine performs an error correction procedure in response to detecting an error. In one embodiment the error detection engine instructs the command module to generate a command e.g. a disable command to disable the widget. The command module sends the command to the command execution module . The command execution module disables the widget responsive to receiving the command.

Turning to block the manager monitoring module instructs the command module to generate a command e.g. a show command to display the widget on the host page. The command module sends the command to the command execution module . The command execution module displays the widget on the host page responsive to receiving the command.

Referring now to the manager monitoring module monitors any activity associated with the widget. In one embodiment the manager monitoring module cooperates with the widget monitoring module to monitor activities associated with the widget. In some embodiments the monitoring occurs periodically on a timer. In another embodiment the manager monitoring module monitors the activity in response to a trigger such as watching user activity via user interface events.

In some embodiments the manager monitoring module queries about the widget health. For example the manager monitoring module pings or sends a beacon to a remote server to receive widget statistics that could indicate a problem with the widget. This is particularly useful for detecting problems before they become crippling to the system.

If a user interacts with the widget e.g. clicking the widget providing an input to the widget etc. the widget monitoring module detects the user interaction and generates interaction data describing the user interaction. The widget monitoring module receives the interaction data from the manager monitoring module and stores the interaction data in the storage . Optionally the manager monitoring module receives a heartbeat signal indicating that the widget is active from the widget monitoring module . The manager monitoring module stores the heartbeat signal as a portion of the status data in the storage .

In one embodiment the manager monitoring module instructs the command module to generate a status update request to inquire about a status of the widget. The status update request includes one or more commands such as a requestHealth command and or a requestDiagnosticString command. The command module sends the status update request to the command execution module . The command execution module extracts the one or more commands from the status update request and instructs the widget monitoring module to generate a status update including status data describing the status of the widget. The manager monitoring module receives the status update from the widget monitoring module . The manager monitoring module extracts the status data from the status update and stores the status data in the storage . In one embodiment the manager monitoring module sends the status data to the error detection module .

The error detection module receives the status data from the manager monitoring module . In one embodiment the error detection module retrieves the status data from the storage . The error detection module parses the status data and determines whether an error is detected based at least in part on the status data. For example the error detection engine determines that an error occurs when the status data describes that the widget is in an unhealthy state. As another example the error detection engine determines that one or more errors occur if the value for the error count included in the status data is nonzero. In some embodiments a user such as an administrator is notified of the error.

If an error is detected the method moves to block . Otherwise the method moves back to block . In one embodiment the method moves to block only when a predetermined number of errors e.g. 10 errors have been detected by the error detection engine . Otherwise the method moves back to block if the detected errors are less than the predetermined number of errors.

Referring to the error detection engine performs an error correction procedure responsive to detecting one or more errors. In one embodiment the error detection engine performs the error correction procedure when the detected errors exceed a predetermined number of errors e.g. 10 errors . The error detection engine performs the error correction procedure by instructing the command module to generate a command to close the widget. The command module sends the command to the command execution module . The command execution module removes the widget from the host page responsive to receiving the command. In one embodiment the error detection engine instructs the command module to generate a command to disable the widget and the command is sent to the command execution module . The command execution module disables the widget.

The error detection engine stores error data associated with the one or more detected errors. In one embodiment the error data includes data identifying the type of errors a brief description of the errors an identifier of the widget and status data for the widget when the errors occur etc.

In the above description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the specification. It will be apparent however to one skilled in the art that the invention can be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to avoid obscuring the description. For example the present embodiment is described in one embodiment below primarily with reference to user interfaces and particular hardware. However the present embodiment applies to any type of computing device that can receive data and commands and any peripheral devices providing services.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the description. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some portions of the detailed descriptions are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present embodiment of the specification also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards flash memories including USB keys with non volatile memory or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The specification can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the specification is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the description can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

Finally the algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the specification is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the specification as described herein.

The foregoing description of the embodiments of the specification has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the specification to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the disclosure be limited not by this detailed description but rather by the claims of this application. As will be understood by those familiar with the art the specification may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the modules routines features attributes methodologies and other aspects are not mandatory or significant and the mechanisms that implement the specification or its features may have different names divisions and or formats. Furthermore as will be apparent to one of ordinary skill in the relevant art the modules routines features attributes methodologies and other aspects of the disclosure can be implemented as software hardware firmware or any combination of the three. Also wherever a component an example of which is a module of the specification is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of ordinary skill in the art of computer programming. Additionally the disclosure is in no way limited to implementation in any specific programming language or for any specific operating system or environment. Accordingly the disclosure is intended to be illustrative but not limiting of the scope of the specification which is set forth in the following claims.

