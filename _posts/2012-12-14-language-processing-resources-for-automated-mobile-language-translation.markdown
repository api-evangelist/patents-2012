---

title: Language processing resources for automated mobile language translation
abstract: Automated language translation often involves language translation resources of significant size (e.g., 50-gigabyte phrase tables) and significant computational power exceeding the capabilities of many mobile devices. Remotely accessible servers capable of near-realtime, automated translation may be inaccessible or prohibitively costly while traveling abroad. Presented herein are adaptations of language translation techniques for offline mobile devices involving reducing the size and raising the efficiency of the language modeling resources. A word index may be provided that stores respective string representations of the words of a language, and maps respective words to a location (e.g., address or offset) of respective word representations within the word index. Language translation resources (e.g., phrase tables) may then specify logical relationships using the word index addresses of the involved words, rather than the string equivalents. This technique significantly condenses the language resources and provides faster, bidirectional access to the word representations of the language.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183197&OS=09183197&RS=09183197
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09183197
owner_city: Redmond
owner_country: US
publication_date: 20121214
---
Within the field of computing many scenarios involve automated language translation between input provided in a source language and output provided in a target language. Such techniques may not only include automated translation from a source natural language to a target natural language but also between a first modality and a second modality of the same language e.g. spoken and written words and between two domains within the same language e.g. describing a topic in technical language and in non technical language .

Many types of language translation techniques may be applied to such scenarios. For example for a request to translate a word sequence in a source language into a target language a device may utilize a phrase table to map various phrases in the source language to equivalent phrases in the target language e.g. using an English to French word reference identifying corresponding pairs or sets of words in each language . Additionally the device may apply a language model that is capable of identifying among two or more candidate selections and orderings of words in the target language the candidate that is likely to be the most accurate and or fluent translation of the word sequence in the source language. Such architectures may utilize a wide variety of techniques to perform the phrase selection and or language modeling in order to provide automated translation techniques presenting an acceptable accuracy and or fluency.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

While many types of translation techniques may be utilized in order to provide automated language translation it may be appreciated that many such techniques are computationally intensive. In particular the amount of data that is indexed for and accessed by such language translation techniques may be voluminous e.g. phrase tables may approach fifty gigabytes and applying complex analysis to the phrase table and or language model may involve considerable memory consumption and processing power for cross referencing and random access. Such models are typically feasible for computing devices with plentiful resources such as computationally robust servers but implementing such techniques on portable devices may be difficult due to resource constraints. Accordingly many portable devices provide language translation by utilizing a remote server e.g. sending the language portion for translation to the remote server over a wireless network and receiving back the translation. However scenarios where language translation is often utilized also frequently involve high fees for mobile communication services such as high roaming charges while using a mobile phone in a foreign country. Thus while remote devices may provide plentiful connectivity to remote services while used in a home region the accessibility of such services on an on demand basis while traveling abroad may be limited or not feasible.

Provided herein are architectures for enabling the implementation of language translation techniques on mobile devices that do not involve on demand just in time communication with a translation server. In accordance with these considerations mobile translation on a device may involve techniques for reducing the amount of data involved in translation resources e.g. by reconfiguring the phrase table and or language model to refer to the words of the source language and or target language in a condensed manner. In particular if respective words of a phrase in the source and or target language are replaced with identifiers such as 32 bit integers the phrase table and language model may be considerably reduced in size. Additionally the logic specified thereby may be more efficiently executed if the data is presented as a comparison among integer arrays rather than more lengthy character strings particularly where such character strings may involve typographical errors and homonyms . This result may be achieved by providing a word index for one or both languages where the word maps respective character based words of the source language as a number such as an integer. While this technique marginally increases the computational burden by adding this mapping technique to the translation process the application of the logic specified by the word index as numbers rather than a character string may alleviate or outweigh this computational burden. Additionally it may be possible to use one word index both to translate words to index based integers and vice versa e.g. by specifying in the word index for selective integers the location of the string representation of the word in the word index e.g. an offset from the start of the file or from a particular location in the file . Thus the same file may be used to identify the integer representation of the word from the string representation of the word and may also even more efficiently identify the string representation of the word from the integer representation of the word simply by seeking to the file position within the file and reading the string . This access technique be may particularly advantageous on devices having a limited amount of system memory and a larger but slower storage because the language translation resources may be efficiently read directly from storage rather than being loaded into system memory. These and other features may provide various advantages in the configuration of a mobile device to perform offline translation in accordance with the techniques presented herein.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Within the field of computing many scenarios involve automated translation of input from a first language into a second language for presentation to a user. Such translation techniques may include e.g. translation from a first native language of the user into a second natural language translation from a first modality of a language to a second modality of the same or a different language e.g. translating spoken text to written text and translation from a first domain of a language into a second domain e.g. a conversion of a text from a technical presentation of information to a colloquial presentation of information . Many techniques have been devised for partially or wholly automating such translation where various techniques may present comparative advantages with respect to translating to or from particular types of languages various translation features such as accuracy fluency and speed and various scenarios wherein such techniques may be implemented.

Many such techniques utilize a translation model that provides logic for translating input from a first language into a second language. For example a device may store a phrase table that specifies phrases in a target language that are equivalent to an input phrase in a source language. The phrase table may also provide many possible variations in a phrase and the phrases of a passage in the source language may be arranged in many ways to suit the features of the target language such as reordering the words to suit the characteristics and customs of the language. Accordingly a language model may be provided that assists in selecting among and ordering the phrases identified by the phrase table in order to provide a translation resembling a native expression of the input in the second language. However the language translation resources often provide an extensive set of translations e.g. in order to cover a wide range of the translations of a phrase that may suit different scenarios and cover variations in meaning. For example a phrase table that provides translations of single words between a source language and a target language may be comparatively small e.g. providing one or more translations source language words but a bigram language model providing one or more translations of each valid two word sequence in the source language and possible translations may cover 100 million two word sequences and trigram or longer n gram language models may involve even larger amounts of data. Accordingly the phrase table and or language model may grow to sizes of 50 gigabytes or more in order to provide accurate translations and may involve significant amounts of computational power to consider concurrently a large number of possible variations among candidate translations of a word sequence. Accordingly the resources are often provided on high capacity computational units such as powerful servers with plentiful storage and computational capacity in order to provide automated near realtime translation with acceptable accuracy.

While the exemplary scenario of provides an exemplary technique for configuring a language translation server having plentiful computing resources to generate and provide the translation to the user of the device which may be accessed over a wired or wireless network while the user is traveling. However in many such scenarios the connectivity of the device while traveling may be unavailable or may be prohibitively expensive due to roaming charges. Such connectivity limitations may restrict the reliance of the device on a remote server for translation services which is exacerbated by the high likelihood of demand for such services while traveling.

In view of these circumstances it may be advantageous to provide language translation services that may be performed by the device while not connected to a server. That is while the device may communicate with a server to receive language translation resources for later use it may be desirable to enable the device to use such resources in a disconnected manner. It may be appreciated that the limiting characteristics of such resources particularly the typical size and usage patterns that complicate implementation on the device may be resolvable.

Presented herein are techniques for generating and providing language translation resources that may be suitable for devices having limited connectivity and or limited computational resources such as processor capacity and memory capacity and in particular devices operating in a disconnected manner . Such techniques may also provide other general features such as efficiency and flexibility that may be advantageous for many types of devices and scenarios. In particular a phrase table and or language model sometimes specify the words and candidate translations as comparisons between strings but due to the large amount of data provided in these resources and comparisons involved encoding string representations for direct comparison may be inefficient. Alternatively respective words may be associated with arbitrarily selected identifiers that are more compact and easier to compare such as an integer representing a hashcode of a string representation of a word . However using hashcodes may be disadvantageous due to the one way nature of the computation e.g. it may be difficult to identify the particular word from a hashcode value and the lack of uniqueness among such hashcodes e.g. hashing collisions may cause two or more words to map to the same hashcode . Thus it may be advantageous to choose an identifier for the respective words of a language that is not only compact and subject to efficient comparisons but also reversible and or unique.

A device may utilize the resources illustrated in the exemplary scenario of in the following manner. A user may provide a word sequence in a source language including at least one word and may request a translation in a target language . The device may apply a word mapping function such as a hash function to compute a word mapping value such as a hash value which may be compared with the word mappings of the word mappings table to identify the index location of a string representation of the word . The device may access the logic of the translation mapping using the index locations of the words of the source language resulting in a set of translated words in the target language . The translated words are also specified in the translation mapping as target language indices which the device may use to index into the target word index to retrieve the string representations of the words in the target language . In this manner the device may use the translation resources represented in the exemplary scenario of to generate an automated translation of the word sequence in the source language to the target language . Additionally if translation from the target language to the source language is desired the word mappings table included in the target word index may be used to perform this translation in the other direction.

Some embodiments utilizing the generation and use of the resources presented in this exemplary scenario may provide one or more advantages as compared with other techniques. As a first example the resources may present a smaller size than other techniques due to the use of the index locations to identify the words of the languages in the translation mappings rather than string representations or other representations with a large size. For example in scenarios featuring a comparatively small set of words with comparatively short string representations respective words may be identifiable with only a two byte integer optionally identifying a boundary on which the words are aligned within the language translation resource e.g. aligning the words at four byte address boundaries and dividing the address of a string representation by four to generate the index location representing the word . Thus the inclusion of the word index may marginally increase the total data size of the language resource set but generating the translation mappings using the word index may very significantly reduce the size of the language resource set. Although advantageous in many contexts such significant reduction in data size may enable the inclusion of the language mapping resources on portable devices for offline language translation.

As a second exemplary advantage the resources may be reusable. For example a word mappings table may be usable both to convert words of a language to index locations of string representations within the word index usable for converting the words from the language to a second language and to convert index locations into the string representations of the words of the language usable for converting the words from a second language to the language . If two word indices are provided for two languages each comprising a word mappings table along with a bidirectional translation mapping then translation may be provided from either language to the other language. Moreover providing a word index for each of several language may enable the reuse of the word index both for converting from the language to any other language and also for converting from any other language to the language.

As a third exemplary advantage the use of the language translation resources may be efficiently accessed which may be advantageous for devices with limited computational resources. As a first example representing the words in the translation mapping by the index locations of the string representations in the word index enables a rapid lookup i.e. simply seek to the specified address and read the string representation at that address . Moreover direct access into the binary representation of the word index may be performed in storage rather than having to load the word index into active memory which may be more limited to access the word . As a second example specifying the logic of the translation mapping may include comparisons among representations of words and using index locations specified as integers may provide efficient logical evaluation as compared with comparisons of string representations of the same words . As a third example using the index locations avoids the complexities involved in collisions involving two or more words having the same identifier. That is while the hash function may result in collisions between respective words these collisions may be resolved in the word mappings table e.g. as a bucket based hashtable to identify unique index locations for respective words which may be more efficient than specifying the logic of the translation resources with representations of respective words according to the hash value of the word which may be susceptible to collisions. These and other advantages may be achievable through the generation and use of the mapping resources according to the techniques presented herein.

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to apply the techniques presented herein. Such computer readable media may include e.g. computer readable storage media involving a tangible device such as a memory semiconductor e.g. a semiconductor utilizing static random access memory SRAM dynamic random access memory DRAM and or synchronous dynamic random access memory SDRAM technologies a platter of a hard disk drive a flash memory device or a magnetic or optical disc such as a CD R DVD R or floppy disc encoding a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein. Such computer readable media may also include as a class of technologies that are distinct from computer readable storage media various types of communications media such as a signal that may be propagated through various physical phenomena e.g. an electromagnetic signal a sound wave signal or an optical signal and in various wired scenarios e.g. via an Ethernet or fiber optic cable and or wireless scenarios e.g. a wireless local area network WLAN such as WiFi a personal area network PAN such as Bluetooth or a cellular or radio network and which encodes a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein.

An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable storage device e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to the principles set forth herein. Some embodiments of this computer readable medium may comprise a nonvolatile computer readable storage medium e.g. a hard disk drive an optical disc or a flash memory device that is configured to store processor executable instructions configured in this manner. Many such computer readable storage devices may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

The techniques discussed herein may be devised with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Moreover some variations may be implemented in combination and some combinations may feature additional advantages and or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments e.g. the exemplary methods of the exemplary system of and the exemplary computer readable storage device of and the exemplary computing unit enclosure of to confer individual and or synergistic advantages upon such embodiments.

A first aspect that may vary among embodiments of these techniques relates to the scenarios wherein such techniques may be utilized.

As a first variation of this first aspect these techniques may be implemented on many types of devices including workstations servers laptop and palmtop computers phones tablets cameras personal digital assistants PDAs and game consoles.

As a second variation of this first aspect these techniques may be applied to translate among many types of languages such as a first natural language and a second natural language a first dialect of a language and a second dialect of the language a colloquial version of a natural language and a standardized version of the natural language and a translation between a technical language and a natural language. Some such translations may involve a transition among the domains of a language e.g. a transition among a language specified for a first user who is familiar with the specialized language of a particular technical area to the same language specified for a second user who is not familiar with the technical area. Other translations may involve a translation from a first language modality of a natural language and a second language modality of the natural language e.g. spoken language and written language or a translation from a handwritten text to a printed text such as optical character recognition OCR translation .

As a third variation of this first aspect these techniques may involve many types of translation mappings . As illustrated in the translation mappings may include a phrase table and a language model . However many other types of translation mappings are available in the field of automated language translation and may provide translation logic referring to the words of the respective languages according to the index locations within the word indices and therefore may be compatible with the architectures and techniques presented herein. Many such variations may be devised by those of ordinary skill in the art and utilized in embodiments of the techniques presented herein.

A second aspect that may vary among embodiments of these techniques relates to the layout of the word index . It may be appreciated that many layouts may be selected to store the string representations of the words at particular index locations and the word mappings table associating such words and the index locations of the string representations . Moreover it may be appreciated that a particular layout may present various advantages with respect to other layouts such as space efficiency access efficiency and or flexibility e.g. providing a partially loaded word mappings table to allow the addition of entries for new words .

As a first variation of this second aspect the string representations of the words may be encoded according to various formats such as American Standard Code for Information Interchange ASCII UCS Transformation Format 8 bit UTF 8 or Unicode. Alternatively the string representations may be stored as graphic depictions of the words such as pixel map representations of glyphs for pictogram languages. The string representations may also be compressed such as using the Standard Compression Scheme for Unicode SCSU technique for Unicode string encoding.

As a second variation of this second aspect the index locations of respective string representations may be specified in various ways. As a first example the index location may be specified as a direct access address within the binary representation of the word index such that seeking directly to the index location yields the starting position of the string representation of the word . As a second example the index location may be specified as an offset e.g. from the end of the end of the word mappings table such that the first stored string representation may be stored at offset 0x0000 or a reverse offset from the end of the binary representation of the word index . As a third example the index location may represent a multiple of an address or offset e.g. the string representations may be padded to start at four byte boundaries within the word index and the index location may be multiplied by four for use as an address or offset. This example may marginally increase the size of the word index due to the padding but may enable a larger number of words string representations and therefore words to be encoded using index locations of a particular size such as two byte index locations and may therefore provide significant space savings in the translation mapping . As a fourth example the word index may be compressed in various ways and the index locations may be selected to identify the locations of the string representations in either the compressed or the uncompressed version of the word index .

As a third variation of this second aspect the word mappings comprising the word mappings table may be specified in various ways such as a sorted or unsorted array a binary tree or a table. Various representations may provide advantages in terms of speed of generation space efficiency and access efficiency. In some scenarios it may be advantageous to provide a bucket list hashtable representation wherein respective words may be indexed according to the hash value of the string representation of the word computed using a hash function and where a collision among two or more words may be resolved by storing all of the words in an array that may be examined linearly to identify the entry for the selected word or in a second hashtable generated by indexing the words according to a second hash function . Additionally the word mappings table may include additional information about respective words such as the probability that a particular word or word phrase in the source language maps to a particular translation in the target language . Such mapping probabilities may be stored e.g. in the word mappings of the word mappings table and or in the translation mappings e.g. in the target language model .

As a fourth variation of this second aspect the target word index may include or omit a word mappings table . It may be appreciated that if translation is only desired from the source language to the target language then the target word index may only be accessed in order to extract the string representations of the target index locations specified by the translation mapping and the word mappings table of the word index may be unused. Accordingly the word mappings table of the target word index may be omitted in furtherance of space efficiency and or the translation mapping may provide unidirectional associations between the word index sequences and the translated words . Conversely if bidirectional translation is desirable the target word index may also include a word mappings table in order to provide translation from the target language back into the source language .

As a fifth variation of this second aspect the string representations of respective words of the source word index and or the target word index may include a word header that provides information about the string representation of the word . For example respective word headers may specify the word size e.g. string length of the string representation of the word which may facilitate access through a fixed length read and or reduce the size of the word index by enabling a removal of string terminating null characters.

As a sixth variation of this second aspect the word mappings table may also include a word index header that provides various information about the word mappings table and or the word index such as a version indicator of the word index the number of words represented in the word index the size of the word mappings table the identification of a hash function used to index the words in the word mappings and or the identification of a compression algorithm used to compress the word index .

A third aspect that may vary among embodiments of these techniques relates to computing and storing with the translation resources a set of mapping probabilities each indicating the likelihood that a particular translation in the target language accurately and fluently represents the word sequence in the source language . This information may be stored e.g. in the translation mappings and may be used by the language model to choose translations of word sequences provided by the user . Accordingly the device may for respective translation mappings identify a mapping probability of the word sequence to the translation and store the mapping probability of the word sequence in the target language model and or the phrase table . Also when generating a translation of a word sequence the device may select one or more translations having the highest mapping probability among the candidate translations for the word sequence .

As a further variation of this third aspect it may be advantageous to store and use integers to identify the mapping probabilities as integers may be compared faster and more efficiently than floating point values. In particular the mapping probability integers may be selected to evenly distribute the range of mapping probability floating point values thus enhancing the significance of the range of values in the floating point integer. For example a one byte unsigned integer may represent 256 possible floating point probabilities and it may be desirable to associate respective integer values with a floating point probability represented by a significant range of the candidate translations .

Accordingly while generating the translation resources the device may translate a mapping probability floating point for a translation into a mapping probability integer and include the mapping probability integer of the translation in the language model . In addition the device may include a mapping probability table that identifies the mapping probability floating point value for the respective mapping probability integers e.g. an integer of 20 may be mapped to a floating point value of 0.2496 . In particular this selection may cluster the mapping probability floating points into mapping probability clusters and for respective clusters select the mapping probability integer for the word sequences mapped into the target language model . Conversely while using the target language model the device may use the mapping probability table to translating the mapping probability integer for the translation into a mapping probability floating point which may be used by the target language model to choose the translation from the candidate translations . Those of ordinary skill in the art may devise many techniques for storing accessing and applying mapping probabilities while implementing the techniques presented herein.

A fourth aspect that may vary among embodiments of these techniques relates to the provision of one or more caches to facilitate access to the language translation resources.

As a first variation of this fourth aspect a word index cache may be provided in order to enable faster access to portions of the word index . For example the word index may be conceptually divided into chunks each comprising a section of the word index that may be stored in the word index cache. The device may generate the word index cache by reserving a memory region to store recently accessed chunks of the word index . Upon accessing a word at an index location in the word index the device may determine whether the index location is within a chunk stored in the word index cache. If so the device may access the index location within the chunk in the word index cache and if not the device may read the requested chunk of the word index including the index location and store the chunk in the word index cache optionally replacing a previously stored chunk that has been least recently used .

As a second variation of this fourth aspect the other language translation resources e.g. the phrase table and or the target language model may also include a cache. Additionally such caches may be configured e.g. according to the access patterns of each language translation resource. As a first example if one resource is frequently accessed in a linear manner a predictive cache may be provided that is configured to retrieve and store chunks that follow a recently accessed chunk thus buffering the next data in the linear access pattern. Alternatively if the access pattern of the language translation resource is typically random the cache may utilize a recently used cache that stores the most recently accessed chunks . Additionally various properties of the cache may be selected in view of the properties of the device e.g. the size of the cache and the allocation of chunks may be selected based on the available memory capacity of the device . Conversely the layout of the language translation resources may be selected in view of the presence and types of caching e.g. a word index cache may be generated such that words that are often used together are stored within the same chunk . These and other caching techniques may be utilized in embodiments of the techniques presented herein.

A fifth aspect that may vary among embodiments of these techniques relates to the use of language stores to provide language translation resources to the device in order to support translations among various languages. The language store may be accessible to the device remotely e.g. over a network or locally e.g. stored upon another computer or device of the user and may store a set of language packs that provide language translation resources e.g. word indices phrase tables and or target language models for various languages. The device may connect to the language store and request a particular language pack and upon receiving such a language pack may store it in the memory optionally replacing another language pack that is no longer in use . As one such variation this technique may be used to provide a modular approach to language translation wherein a language may be partitioned into language domains for different subsets of the language e.g. vocabulary and phrases for particular topics . Upon identifying an occasion to translate words in a particular language domain that is not yet supported e.g. for a present translation or for imminent future translations the device may request the corresponding language pack from the language store may store the language pack in the storage upon receipt and may access the language pack to translate the words associated with the language domain represented thereby.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB Firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

