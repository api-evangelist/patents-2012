---

title: System and method for improving smart card reader reconnections
abstract: Upon recognizing a loss of a first connection to a computing apparatus, such as a personal computer, a smart card reader may maintain an open session with a smart card and may associate an identity of the computing apparatus of the first connection with the open session. Some time later, the smart card reader may establish a second connection with a computing apparatus. The smart card reader may compare an identity of the computing apparatus of the second connection with the identity of the computing apparatus of the first connection. Responsive to determining that the identities do not match, the smart card reader may close the open session with the smart card. Responsive to determining that the identities do match, the smart card reader may maintain the open session with the smart card.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08496175&OS=08496175&RS=08496175
owner: Research In Motion Limited
number: 08496175
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20120914
---
This application is a continuation of U.S. patent application Ser. No. 13 293 669 filed Nov. 10 2011 which in turn is a divisional of U.S. patent application Ser. No. 12 163 214 filed Jun. 27 2008 which issued on Jan. 10 2012 as U.S. Pat. No. 8 091 785 which in turn claims priority from U.S. Provisional Patent Application No. 60 946 590 filed Jun. 27 2007 the contents of which are herein incorporated by reference in their entirety.

The present application relates generally to smart card readers and in particular to a system and method of improving smart card reader reconnections.

Smart card readers are used in a variety of applications for example in combination with handheld devices and personal computers for security related purposes.

Some operating systems such as Microsoft Windows installed in personal computers include a generic or multipurpose smart card resource manager. Third party vendors may also provide their own smart card readers which may thus require their own smart card reader drivers to be installed for use with the operating system. In such instances the smart card resource manager may communicate with the vendor specific smart card reader driver ahead of accessing or communicating with the smart card reader.

Improved efficiencies in communications among smart card resource managers smart card reader drivers and smart card readers are desirable.

Communications between a computing device and a smart card reader having an associated smart card are facilitated through the use by the computing device of a smart card resource manager and a smart card reader service and through the appropriate configuration of the smart card reader. The smart card reader service acts as a relay for commands between the smart card resource manager and the smart card reader. The smart card reader service may be of particular use when a connection between the computing device and the smart card reader is wireless. Appropriate configuration of the smart card reader service obviates a redundant downloading of certificates from smart card to computing device subsequent to loss and reestablishment of a connection between the computing device and the smart card reader.

According to one aspect described herein there is provided at a computing device a method of facilitating communications between the computing device and a smart card reader the smart card reader configured for communication with a smart card the computing device including a smart card resource manager. The method includes re establishing a connection between the smart card reader and the computing device subsequent to a loss of connection determining from the smart card reader a status of the smart card if the status of the smart card is determined to be present with the smart card reader determining from the smart card reader that a communication link between said smart card and said smart card reader has been ended and reestablished during the loss of the connection indicating to the smart card resource manager a smart card absent status and indicating to the smart card resource manager a smart card present status. In other aspects of the present application an apparatus is provided for carrying out this method and a computer readable medium is provided for adapting a processor to carry out this method.

According to another aspect described herein there is provided at a smart card reader a method of responding to a loss of connection with a first computing apparatus. The method includes maintaining an open session with an associated smart card associating an identity of the first computing apparatus with the open session establishing a connection with a second computing apparatus and closing the open session in response to determining that an identity of the second computing apparatus does not match the identity of the first computing apparatus associated with the open session. In other aspects of the present application a smart card reader is provided for carrying out this method and a computer readable medium is provided for adapting a processor in a smart card reader to carry out this method.

As suggested above some operating systems such as Microsoft Windows installed in personal computers include a generic or multipurpose smart card resource manager. Third party vendors may also provide their own smart card readers which may thus require their own smart card reader drivers to be installed for use with the operating system. In such instances the smart card resource manager may communicate with the vendor specific smart card reader driver first in order to access or communicate with the smart card reader. In other words the vendor supplied smart card reader driver would merely act as a flow through or relay of any instructions from the smart card resource manager to the smart card reader. A difficulty with such systems is that many commands from the smart card resource manager may be redundant or unnecessary and relaying such commands to the smart card reader may be an inefficient use of time and computational resources. Thus more efficient management of communications between a generic smart card resource manager and a smart card reader is desired.

Reference is first made to which shows an illustrative communication system to which embodiments described herein can be applied. The system includes one or more mobile devices only one of which is shown in that are enabled to communicate with one or more wireless networks only one of which is shown in . The wireless network may be implemented as a packet based cellular wide area wireless network that includes a number of base stations each providing wireless Radio Frequency RF coverage to a corresponding area or cell. In some embodiments instead of or in addition to a wide area wireless network the wireless network may include a local wireless area network such as for example a wireless local area network that conforms to Institute of Electrical and Electronics Engineers IEEE 802.11 standards such as 802.11b and or 802.11g. In at least some example embodiments the wireless network is connected to one or more enterprise networks only one of which is shown in . The connection between the wireless network and the enterprise network may involve an intermediate communications link which may pass through additional networks including for example the Internet. The enterprise network may be associated with a mobile device such that the mobile device is enabled to exchange electronic messages and other information with the enterprise network . The mobile device may have an associated secondary mobile device in the form of a smart card reader . Additionally a user of the mobile device and the smart card reader may have access to a personal computer that is connected to the enterprise network over a communications link . In one embodiment the communications link is a local area network or wide area network providing organizational connectivity with the enterprise network . The smart card reader may also be used with the personal computer through either a wired or wireless connection.

Reference is next made to which shows in greater detail an embodiment of the personal computer . The personal computer includes a display sub system and a network communication subsystem for two way communications with the enterprise network . According to one embodiment the communications subsystem may include a wireless communications subsystem including antennas not shown RF transceivers not shown and some signal processing capabilities implemented for example by a digital signal processor not shown . According to another embodiment the communications subsystem may include a wired communications subsystem conforming to the well known Ethernet standard including a 10 Mbps 100 Mbps or 1 Gbps Ethernet connection. The personal computer also includes a controller in the form of at least one microprocessor which is suitably programmed to control the overall operation and functions of the personal computer which overall operation and functions are described in more detail below. The personal computer includes peripheral devices or subsystems such as a random access memory RAM a storage device such as a hard disk drive an auxiliary input output I O subsystem e.g. a mouse a serial port e.g. a USB port an input device e.g. a keyboard a speaker a microphone a short range communications subsystem e.g. an infrared transceiver wireless bus protocol such as a Bluetooth system or any other means of local wireless communications and any other device subsystems generally designated by reference .

The microprocessor operates under stored program control with code being stored in the storage device . As depicted in while operational the RAM includes programs including an operating system program or code module such as the Microsoft Windows operating system. Operating systems such as Windows typically divide the RAM space into two portions namely a restricted access space such as a kernel space and a user space or functional equivalents thereof. The RAM further includes software applications indicated generally by reference which typically reside in the user space and drivers which typically reside in the kernel space . The user space can further include various application programming interfaces APIs and various user interface UI components . The UI components are the existing functions or routines provided by the operating system that may be called by programs such as the software applications in order to display elements of the graphical user interface to the user of the personal computer .

The operating system code code for specific software applications code for the drivers code for the various application programming interfaces APIs or code for the various user interface UI components is permanently or semi permanently stored on the storage device and may be temporarily loaded into a volatile storage medium such as the RAM during operation of the personal computer . Received communication signals and other data with information may also be stored in the RAM . Code for the specific device applications or other elements of the user space may be swapped back out to the storage device as needed during operation of the personal computer while code related to the kernel space such as many aspects of the operating system code and or the drivers is typically loaded into the RAM upon boot up of the personal computer and is retained in the RAM as long as the personal computer remains powered up.

The stored program control e.g. operating system software applications for the microprocessor also includes a predetermined set of applications or code components or software modules that control basic device operations for example data and text communication applications which are normally installed on the personal computer as the software applications when the personal computer is first configured. Further applications may also be loaded i.e. downloaded onto the personal computer through the operation of the networks described above for the auxiliary I O subsystem the serial port or the short range communications subsystem . The downloaded code module or components are then installed by the user or automatically in the RAM or the storage device .

The serial port may comprise a USB type interface port for interfacing or synchronizing with another device such as the mobile device or the smart card reader . In one embodiment the serial port may be used to communicate with the smart card reader . The short range communications subsystem provides an interface for communication between the personal computer and other devices including the smart card reader to be described in greater detail in connection with below. For example the short range communications subsystem may comprise an infrared communication link or channel a wireless bus protocol such as a Bluetooth communications subsystem or any other localized wireless means of communication.

Reference is next made to which shows in greater detail an example embodiment of a secondary mobile device namely the smart card reader . The smart card reader includes a controller including at least one microprocessor which is suitably programmed to control the overall operation and functions of the smart card reader and an output device e.g. a display module . The smart card reader further includes peripheral devices or subsystems such as a flash memory a random access memory RAM a serial port e.g. a USB port a short range communications subsystem e.g. an infrared transceiver wireless bus protocol such as a Bluetooth system or any other means of local communications a storage component interface e.g. for a memory card or any other data storage device a user input device e.g. a push button and a biometric input device e.g. a fingerprint reader .

The microprocessor operates under stored program control with code or firmware being stored in the flash memory or other type of non volatile memory device or devices . As depicted in the stored programs include an operating system program or code module and other programs or software applications indicated generally by reference . The operating system of the smart card reader further includes a memory card driver component . The memory card driver is responsible for coordinating communications between the smart card reader and a memory card and or between the smart card reader and related drivers of a device to be used in conjunction with the smart card reader such as the drivers of the personal computer . The operating system code code for specific software applications code for the memory card driver or code components thereof may be temporarily loaded into a volatile storage medium such as the RAM . Received communication signals and other data with information may also be stored in the RAM . Additionally the storage component interface receives the removable memory card providing additional storage space for the smart card reader . In one embodiment the memory card may be a smart card similar to the smart cards known to those skilled in the art. The memory card may include fingerprint authentication data password or pin code related data or other security related data. While operation of the smart card reader is described using a smart card it will be understood by those skilled in the art that the smart card reader may be designed using any suitable form of removable media without departing from the intended scope of the smart card reader .

The stored program control e.g. operating system software applications for the microprocessor also includes a predetermined set of applications or code components or software modules that control basic device operations for example management and security related control of the data of the smart card reader and may be installed on the smart card reader as a component of the software applications during the manufacturing process. Further applications may also be loaded i.e. downloaded onto the smart card reader through the operation of the serial port the operation of the short range communications subsystem or from the smart card . The downloaded code module or components are then installed by the user or automatically in the non volatile program memory e.g. the flash memory or the RAM .

The serial port may comprise a USB type interface port for interfacing or synchronizing with another device such as the personal computer or the mobile device . The serial port is used to exchange data with a device such as the personal computer to be stored on the smart card that is plugged into the storage component interface of the smart card reader . The serial port is also used to extend the capabilities of the smart card reader by providing for information or software downloads including any user interface information to the smart card reader .

In various example embodiments the short range communications subsystem provides an interface for communication between the smart card reader and the personal computer or the mobile device . In one embodiment the short range communications subsystem includes an infrared communication link or channel. In another embodiment the subsystem comprises a wireless RF bus protocol such as a Bluetooth communications subsystem. However the short range communications subsystem may comprise any suitable local wireless means of communication so long as the short range communications subsystem of the personal computer is chosen to operate using the same protocol which may for example facilitate wireless communication between the personal computer and the smart card reader . Any suitable communications mechanism and or protocol may be implemented for the short range communications subsystems and .

In order for the personal computer to be able to properly communicate with the smart card reader a suitable driver hereinafter referred to as a smart card reader driver can be loaded onto the personal computer e.g. as one of the drivers . For example an operating system such as Microsoft Windows may be applied to or loaded onto the personal computer and may include its own system supplied smart card reader driver.

Referring to a diagram is shown illustrating a Microsoft Windows smart card environment for example as described by the Windows Driver Development Kit DDK . For purposes of facilitating an understanding of example embodiments of the invention that are described further below a brief description will now be provided of the different components of the Microsoft Windows smart card environment for communications with a smart card reader through a wired connection such as a Universal Serial Bus USB interface. The kernel space and the user space are indicated as shown in with the interface between the kernel space and the user space referred to as an I O control interface . Applications communicate with a smart card reader driver by means of a smart card resource manager . In one example embodiment the smart card reader driver is a vendor supplied smart card reader driver supplied by the vendor of smart card reader and resides in the kernel space . In some embodiments the smart card reader driver may be provided by the source of the operating system e.g. Microsoft rather than the vendor of the smart card reader . The smart card resource manager resides in the user space . As shown the smart card reader driver communicates with the smart card reader . The resource manager communicates with the smart card reader driver by means of an I O control function i.e. the IOCTL function across the I O control interface . The I O control functions are dispatched using a DeviceIoControl system call. A smart card aware application may send instructions to the smart card reader driver by means of the system call DeviceIoControl and the operating system forwards the indicated I O control function to the smart card reader driver . I O control functions initiated by the smart card aware applications are passed to a smart card service provider . The smart card service provider passes the function to the smart card resource manager . The smart card resource manager manages the resources related to the smart card reader and may communicate with the smart card reader driver . The operating system forwards the request by means of an I O request packet IRP .

In some example embodiments the smart card reader driver is designed to work with the resource manager and a smart card driver library supplied with operating system . Thus the smart card reader driver may use the smart card driver library to perform many of its key operations.

If the parameters are determined to be correct the SmartCardDeviceControl driver library routine processes the IOCTL request if it can step . The SmartCardDeviceControl driver library routine then determines step whether the smart card reader driver has a callback routine defined for the IOCTL request that it is processing. If a callback routine exists the SmartCardDeviceControl driver library routine step calls the callback routine as indicated by reference . The callback routine then calls all the driver library routines that are required to complete the processing of the IOCTL as indicated by reference . After processing the IOCTL function the callback routine returns control to the SmartCardDeviceControl driver library routine as indicated by reference . In the WDM version of the library SmartCardDeviceControl completes step the IRP that carried the IOCTL . The SmartCardDeviceControl driver library routine then returns control to the reader driver dispatch device control routine as indicated by reference . The smart card reader driver then returns the IOCTL call to the smart card resource manager as indicated by reference .

The smart card library driver synchronizes access to the smart card reader driver so that no two callback functions are called at the same time. However card insertion and removal event handling e.g. when the smart card reader indicates that the smart card is either inserted into or removed from the storage interface shown in may be processed asynchronously.

Referring now to another smart card reader environment is illustrated in accordance with example embodiments of the invention. The smart card reader environment is similar to the Microsoft Windows smart card environment of described above except that in the smart card reader environment of a wireless air interface exists between the smart card reader and the personal computer rather than a wired USB interface as shown in . As indicated above user applications e.g. Microsoft Outlook or Microsoft Word typically reside in the user space and drivers including the smart card reader driver reside in the kernel space . In at least some example embodiments placing a driver such as the smart card reader driver in the kernel space as required by Microsoft Windows can raise two possible issues a the user interface components cannot be directly accessed and or displayed by code residing in the kernel space and b a Bluetooth API which is installed as one of the APIs and is used to access a Bluetooth communications port i.e. as a component of the short range communications subsystem cannot be directly accessed from the kernel space . Since Bluetooth communications between the personal computer and the smart card reader would have to occur via the Bluetooth API the Bluetooth API must be accessible to a smart card reader driver to be installed on the personal computer . The smart card reader driver to be used on the personal computer also needs access to the UI components so that a user of the personal computer can input Bluetooth secure pairing keys using the UI components as well as other information.

To address the above issues the example embodiment shown in the smart card reader environment of includes a user space application referred to as a smart card reader service SCRS . The SCRS is placed in the user space and therefore has access to a Bluetooth API as the APIs also reside in the user space . Therefore using the Bluetooth API the SCRS is capable of opening a Bluetooth communication port. The SCRS takes messages from the Smart Card Reader Driver and sends the messages to the smart card reader through the Bluetooth communication port e.g. using the short range communications subsystems and . Since the SCRS resides in the user space the SCRS can make display calls to the user interface at any time using the user interface components .

In the Microsoft Windows smart card environment of in which a wired interface e.g. a USB connection exists between the personal computer and the smart card reader messages or data destined for the smart card reader are passed from the smart card reader driver through the driver stack to the USB or serial driver since all the drivers are located in the kernel space . The USB or serial driver then sends these messages to the smart card reader over the serial connection. Turning back again to the smart card reader environment of in such an environment communication between the personal computer and the smart card reader is achieved via an air interface e.g. a Bluetooth connection between short range communications subsystems and . As the smart card reader driver is located in the kernel space and does not have access to Bluetooth drivers messages are passed back into the user space to the SCRS and the available Bluetooth API is used. Communication between the smart card reader driver and the SCRS is facilitated by a smart card reader service library . The smart card reader service library includes a set of function calls that the SCRS uses to communicate with the smart card reader driver .

The smart card reader environment of will now be further explained in the context of an example. A user who is currently using the desktop computer may wish to login to the smart card which has been connected to the storage component interface of the smart card reader . The login attempt may involve use of the PC short range communications subsystem and the smart card reader short range communications subsystem as the means of connectivity between the personal computer and the smart card reader . In one example a request may come from Microsoft Outlook i.e. one of the smart card aware applications as a result of the user wishing to insert a digital signature into an email. In the current example Microsoft Outlook first sends a message to the Windows smart card service provider where the message requests the login to the smart card .

Responsive to receiving the message the smart card service provider may create a command Application Protocol Data Unit APDU to be sent to the smart card . An APDU is a data structure for smart card systems. A standardized example is provided by the International Organization for Standardization ISO and is referred to as ISO 7816. The smart card service provider then passes the newly created APDU to the Windows smart card resource manager which passes the APDU across the I O control interface to the smart card reader driver .

Responsive to receiving the APDU the smart card reader driver passes the APDU to the smart card driver library . The smart card driver library uses a callback function to pass the APDU back to the smart card reader driver . This callback function notifies the smart card reader driver that the smart card reader driver is to send the APDU to the smart card reader and wait for a response from the smart card reader .

The smart card reader driver then passes the APDU up to the SCRS using commands and or functions that are part of the smart card reader service library . The SCRS sends the APDU to the smart card reader over the Bluetooth connection using the Bluetooth API i.e. using the PC short range communications subsystem shown in and the smart card reader short range communications subsystem shown in . The smart card reader then processes the APDU and returns the appropriate response. This response from the smart card reader follows the same path in reverse fashion back to Microsoft Outlook or to another applicable smart card aware application .

As indicated above the smart card reader service library includes a set of function calls that the SCRS uses to communicate with the smart card reader driver . The SCRS also uses the smart card reader service library to communicate with the smart card reader in order to perform certain functions or routines provided in the smart card reader service library .

Referring briefly to there are a number of commands that may be sent from a smart card aware application to a smart card reader e.g. via the path as described above in the context of . A cold reset command may for example be used to reset the smart card . The cold reset command may also be used at any time the smart card aware application is to start a new or clean session with the smart card . For example the cold reset command may be used when the computer receives a message from the smart card reader that the smart card has just been inserted into the smart card reader such that the smart card is in a known reset state. In at least some example embodiments the smart card and its associated reader is in a known state when the smart card reader is known to have recently come out of reset and no APDUs have been sent or received by the smart card reader since it came out of reset. As indicated above an APDU is a data structure for smart card systems for example as defined by ISO 7816. A send Application Protocol Data Unit Send APDU command sends an APDU. A power off command disengages or turns off the smart card . In at least some example embodiments the smart card reader is used to provide user authentication information digital certificate information and or encryption key information to the personal computer .

Generally example embodiments described herein are directed to reducing redundant or unnecessary commands being sent to the smart card reader . It is often the case that the manufacturer of a vendor supplied smart card reader driver is different than at least one of the other applications such as the operating system and or the smart card resource manager . Certain operational characteristics of a vendor supplied smart card reader driver and an associated smart card reader service are thus described herein to facilitate such example embodiments.

Reference is now made to which show examples of methods for sending commands to the smart card reader . shows an example algorithm as carried out by the SCRS while illustrates an example conversation among the smart card resource manager the vendor supplied smart card reader driver the SCRS and the smart card reader . Generally in the examples of the SCRS acts as a flow through or relay for any instructions from the smart card resource manager . Thus referring to the SCRS may perform the example algorithm as shown. At first the SCRS receives step through the smart card reader driver a command from the smart card resource manager . In response the SCRS sends step the command through the Bluetooth API in an appropriate command format that may be understood by the smart card reader for processing by the smart card reader and subsequently by the smart card .

Referring now to an example of a message exchange among the smart card resource manager the smart card reader driver the SCRS and the smart card reader is illustrated. Passage of time is generally traversed from top to bottom of the conversation shown in . The illustrated conversation may for example start when the personal computer receives a message from smart card reader indicating that a smart card has been inserted into the smart card reader . Note that the smart card reader may in some embodiments be configured to send a smart card insertion notification message to the personal computer even if the smart card was not just inserted into the smart card reader . For example in one embodiment card insert card removal messages are used not only in the conventional sense i.e. when a smart card has been physically inserted into or removed from the smart card reader but also to share access to the smart card reader . For example in an embodiment where the smart card reader can pair with or communicate with two different applications or devices for example a personal computer and a mobile communications device the smart card reader will send a card removal message to one application device which card removal message forces that application or device to stop sending messages to the smartcard reader . At the same time the smart card reader will send a card insert message to another application or device thereby allowing the other application or device to send messages to the smart card reader .

When the personal computer receives a smart card insertion notification message the smart card resource manager may send a number of commands intended to be processed by the smart card reader . As shown the smart card resource manager may send the commands of cold reset power off cold reset send APDU etc. In response the smart card reader driver will relay or send the command in the appropriate command format to the SCRS as shown in corresponding commands of cold reset power off cold reset send APDU etc. The SCRS will relay or send the command in the appropriate command format through the Bluetooth API to the smart card reader as shown in corresponding commands of cold reset power off cold reset send APDU etc. Each step notably the power off and cold reset takes time of up to at least a few seconds for the system to implement.

Inefficiencies may arise from the above method. For example the first instance of cold reset has caused the smart card to be in a reset state. This reset state is known to the smart card resource manager . The subsequent steps of power off and cold reset may thus be redundant in view of the fact that the reset state is a known state and as such may not be necessary to be sent to the smart card reader . It is also recognized herein that since no APDU is sent to the smart card reader before the steps of power off and cold reset these steps are unnecessary as the smart card would still be in the same known reset state.

Accordingly an example embodiment of an alternative method performed by the SCRS will now be explained with reference to . The method shown in is similar to the method shown in subject to differences that will be apparent from the figures and the present description. shows a flow diagram of the alternative method carried out by the SCRS while shows an example conversation using such alternative method as among the smart card resource manager the smart card reader driver the SCRS and the smart card reader .

Referring now to the SCRS processes received commands from the smart card reader driver and determines whether certain commands should be sent to the smart card reader and which commands should not be sent. Prior to the start of the algorithm illustrated in it is assumed that the system is in a known state for example a reset state where no command APDUs have been received. Thus initially at step a data indicator APDU may be set to FALSE. The data indicator APDU will be explained in further detail below. The SCRS receives step a command i.e. COMMAND from the smart card resource manager . Note that although the present method re uses COMMAND as a single variable throughout the algorithm illustrated in it can be appreciated that any number of commands may be stored queued and or processed as appropriate. The SCRS then determines step whether the received COMMAND is an APDU. If so the SCRS sets the data indicator APDU to TRUE and sends the COMMAND to the smart card reader step . If in step the SCRS has determined that the received COMMAND is not an APDU the SCRS then determines step whether the received COMMAND is power off . If not then the SCRS then determines step whether the received COMMAND is a cold reset. If the COMMAND is a cold reset then the SCRS sets the data indicator APDU to FALSE and sends step the received COMMAND to the smart card reader .

Considering again step if the SCRS determines that the COMMAND is power off then the SCRS determines step whether the data indicator APDU is TRUE. If so the SCRS sends step the received COMMAND through the Bluetooth API to the smart card reader .

If the SCRS determines step that the data indicator APDU is FALSE the SCRS proceeds to set step a TIMER to zero seconds. Generally the TIMER may be used to determine whether a predetermined time has elapsed between a power off and a cold reset. In the example shown the predetermined time is two seconds. The determination or selection of the predetermined time may for example be slightly greater than the time that it would normally take for the service to receive a cold reset command immediately after receiving a power off command. This would facilitate the situations where these two commands arrive sequentially in relatively quick succession so that the SCRS may optimize the discarding of both commands. Note that there is no strict upper bound on what is selected as the predetermined time. However in the case where the smart card resource manager is only sending a power off and has no intention of sending a cold reset and if the predetermined time is too high the smart card resource manager will be unnecessarily preventing other devices from accessing the smart card for the duration of the predetermined time.

If an excessive or greater time than the predetermined time has elapsed then the SCRS sends step the power off command to the smart card reader and the method proceeds to the initial step . A reason for this is that it is unlikely after the predetermined time has elapsed that the SCRS will receive a Cold Reset command from the smart card resource manager . In this case the smart card should be powered down by way of the power off command. Subsequent to initializing the TIMER step the SCRS polls within the predetermined time to determine step whether the cold reset command has been received. Responsive to determining that the cold reset command has not been received the SCRS determines step whether two seconds have elapsed. If so then the SCRS sends step the power off command to the smart card reader and the method proceeds to the initial step . Responsive to determining that the cold reset command has been received within two seconds the SCRS returns to the initial step i.e. the power off command and cold reset command are not sent to the smart card reader .

Referring now to an example conversation using the above described method may take place among the smart card resource manager the smart card reader driver the SCRS and the smart card reader . Passage of time is generally traversed from top to bottom of the conversation shown in . Communications among the smart card resource manager the vender supplied smart card driver and the SCRS occur within the personal computer and communications between the SCRS and the smart card reader occur in at least some example embodiments over a wireless link such as a Bluetooth connection. Generally the smart card resource manager and the smart card reader driver are sending the same commands to the SCRS as in the example conversation of .

The illustrated conversation may for example start when the personal computer receives a smart card insertion notification message from smart card reader indicating that a smart card has been inserted into the smart card reader . In an embodiment the smart card reader may be unaware of which commands the smart card resource manager is sending to the smart card driver and which commands received by the SCRS from the smart card driver are being filtered so as to not be sent to the smart card reader . As illustrated the commands being sent are cold reset power off cold reset and send APDU . As shown the commands that are sent from the smart card driver to the SCRS are cold reset power off cold reset and send APDU . Also shown are the commands that are sent from the SCRS to the smart card reader which commands are cold reset and send APDU . The handling of each command by the SCRS will now be explained with reference to the example method steps of which are illustrated in .

Using the example method shown in the cold reset command would be received as a COMMAND at step . At step at the decision of whether COMMAND APDU the answer would be NO since cold reset is not an APDU and the algorithm proceeds to step . At step at the decision of whether COMMAND power off the answer would be NO and the algorithm proceeds to step . At step at the decision of whether COMMAND cold reset the answer would be YES and the data indicator APDU would be set to FALSE. At step the cold reset command would then be sent to the smart card reader i.e. by sending cold reset .

The power off command and cold reset command will now be explained with reference to . Using the algorithm shown in the power off command would be received as COMMAND at step . At step at the decision of whether COMMAND APDU the answer would be NO since power off is not an APDU and the algorithm proceeds to step . At step at the decision of whether COMMAND power off the answer would be YES and the algorithm proceeds to step . At step at the decision of whether APDU TRUE the answer would be NO i.e. since no APDUs have been sent and the algorithm proceeds to step . At step a timer is reset to TIME 0s. At step and the algorithm waits for the predetermined time e.g. two seconds until a cold reset command is received. In the example conversation of a cold reset has been received within the two seconds and the algorithm proceeds to the initial step i.e. neither the power off command nor the cold reset command are sent to the smart card reader as shown in the gap in the conversation in . By filtering out the power off command and the cold reset command a time savings can be achieved in some configurations for the method of relative to the method of .

Referring again to step of if no command is received within two seconds as determined by the timer that was reset at step then referring to step a power off command would be sent to the smart card reader . In other words it is as if the power off command was merely relayed through to the smart card reader as in the typical or conventional case.

Continuing with the example at step a send APDU command may be received by the SCRS . At step at the decision of whether COMMAND APDU the answer would be YES and the data indicator APDU is set to TRUE. The algorithm then proceeds to step . At step the APDU command is then sent to the smart card reader i.e. by send APDU .

Accordingly in some example embodiments referring again to in the described algorithm if an APDU command was sent by the smart card resource manager before the power off command then data indicator APDU would be set to TRUE. In consequence subsequent commands would be merely relayed through to the smart card reader . A reason for this feature is that most smart card resource managers assume that after a cold reset the smart card will be in a fresh session state in which no APDUs have been received. The described algorithm assists in maintaining this assumption by permitting the power off and cold reset commands to go to the smart card reader when an APDU has been previously sent.

It is understood that there may be additional steps in the above described conversation shown in . For example there are certain responses that are made by the smart card reader back to the SCRS and to the smart card resource manager for example an answer to reset ATR which are not illustrated in order to simplify the workings of embodiments of the system.

In the example embodiment described above in respect of the power off command is sent to the smart card reader if any APDU is send to the smart card reader after the cold reset and no distinction is made between APDUs that change the state of the of smart card and APDUs that do not change the state of the smart card. Thus in the embodiments of an assumption is made that all APDUs are potentially state altering even though this may not reflect reality. One reason for making such an assumption is that some APDUs may be card dependent proprietary APDUs such that the SCRS is unable to differentiate between state altering and non state altering APDUs. In an alternative embodiment of the method shown in the response of the SCRS can vary depending on the type of APDU command sent. For example if APDU commands are received that would not alter the state of the smart card from a known state such as the reset state then the SCRS would refrain from sending the power off and reset commands to the smart card reader . In such an alternative embodiment step is modified to set APDU TRUE only when i the received command is known to be a state altering command other than power off or cold rest or ii the SCRS does not know if the received command is a state altering command or not. Information about the state altering nature of various smart card commands can be stored for example in a look up table on the personal computer . Accordingly in some example embodiments the smart card is in a known state when subsequent to a reset command being sent to the smart card reader no state changing APDUs have been sent or received by the smart card .

When a Bluetooth connection between the personal computer and the smart card reader is initially established a plurality of steps are carried out. Many of the plurality of steps relate to the establishment of the Bluetooth connection and accordingly are standard and will not be discussed here. However some steps worth mentioning are presented in .

In particular upon establishment of a connection the smart card resource manager may receive step an indication that the smart card is present in the smart card reader . Responsively the smart card resource manager may arrange the transmission step of a request message to the smart card where the request message specifically requests security certificates stored on the smart card . Where the smart card responds with the certificates the smart card resource manager may receive step the certificates and store step the certificates.

Often it is the receipt by the smart card resource manager of the certificates from the smart card that allows a user to unlock and use the personal computer .

Step the transfer of the certificates on the smart card to the personal computer is often of a particularly long duration.

When a user places the personal computer in a sleep state or a hibernate state a Bluetooth radio component of the short range communication subsystem is powered down. Accordingly a previously established Bluetooth connection between the personal computer and the smart card reader is dropped. More particularly a pairing between the smart card driver and the smart card is removed. The SCRS reports to the smart card resource manager that the status of the smart card has changed from present to absent . The removal of the pairing occurs since without a Bluetooth connection between the personal computer and the smart card reader the SCRS is unable to determine whether or not the smart card is present in the smart card reader .

When operation of the personal computer is restored from the sleep state or the hibernate state a reconnect operation may be automatically initiated to reestablish a Bluetooth connection between the personal computer and the smart card reader . Alternatively the user of the personal computer may manually initiate a reconnect operation to reestablish a Bluetooth connection between the personal computer and the smart card reader . In either case upon reestablishment of the Bluetooth connection the smart card reader indicates to the SCRS the presence of the smart card in the smart card reader . Upon receipt step of the indication the smart card resource manager arranges transmission step of a request to the smart card reader and responsive to the requests receives step and stores step a copy of all of the certificates that are stored on the smart card .

The transfer of certificates that occurs responsive to the reestablishment of a wireless connection may be seen by some as unnecessary since when a wireless connection was originally established the same information was transferred to the smart card resource manager .

It may be desirable to reduce the wait time before the personal computer is unlocked and user accessible after being restored from a sleep state or a hibernate state.

In accordance with various embodiments of the present disclosure when the personal computer is placed into sleep state hibernate state or other similar standby state the SCRS does not report to the smart card resource manager that there has been a change of state for the smart card that is the SCRS does not report to the smart card resource manager that the smart card has been removed. When the personal computer returns to an operational state the SCRS automatically reestablishes a connection to the smart card reader . From the perspective of the smart card resource manager the smart card was not removed. Accordingly when the personal computer is restored the certificates are considered valid and the user may quickly access the personal computer .

After the connection has been lost and upon restoration of the operation of the personal computer from a standby state while the smart card resource manager is unaware that the status of the smart card has changed from present to absent the SCRS is aware of the status change. Steps in an example method of determining the status of the smart card from the perspective of the SCRS are illustrated in . The SCRS periodically attempts to re establish the lost connection step . If the SCRS determines step that the attempt has been unsuccessful another reattempt step is performed a short time later. If the SCRS determines step that the attempt has been successful the smart card driver determines step whether the smart card is present in the smart card reader .

If the SCRS determines that the smart card is no longer in the smart card reader then the SCRS transmits step to the smart card resource manager a status update so that the smart card resource manager updates a status for the smart card from present to absent .

If the SCRS determines that the smart card is still or back in the smart card reader the SCRS determines step whether the smart card was removed from the smart card reader during the time for which the connection was lost. If the SCRS determines that the smart card was maintained in the smart card reader for the time during which there was no connection then no further steps are taken since the smart card resource manager maintains a present status for the smart card . If the SCRS determines that the smart card was removed and re inserted into the smart card reader during the time during which there was no connection then the security context card state will not match the security context card state maintained by the smart card resource manager .

Accordingly the SCRS transmits step to the smart card resource manager a status update so that the smart card resource manager updates a status for the smart card from present to absent . The SCRS then transmits step to the smart card resource manager a status update so that the smart card resource manager updates a status for the smart card from absent to present .

There may be defined a maximum number of unsuccessful attempts to reestablish the Bluetooth connection. After each attempt step if the attempt has been determined step to have been unsuccessful the SCRS may determine step whether the maximum number of unsuccessful attempts has been reached. If the maximum number has not been reached another reestablishment is attempted step . However if the maximum number has been reached the SCRS may transmit step to the smart card resource manager a status update so that the smart card resource manager updates a status for the smart card from present to absent .

Beneficially in the case where the attempted reconnection step is successful and the smart card is still present in the smart card reader the user gains a large time savings since any need to re import the certificates to the smart card resource manager is obviated.

The smart card reader may need to keep an active session open with the smart card even after the smart card reader loses its connection to the personal computer . This keeping an active session open is suggested to ensure that any security context the personal computer has maintained with the smart card is preserved when the personal computer automatically reconnects since the personal computer will initially assume that the smart card has not been powered down. The smart card reader may keep track of the identity of the personal computer for which the smart card reader is holding the session open and if the same personal computer reconnects then the smart card reader may allow the personal computer to continue holding that session.

The smart card reader may have a configurable timeout value the magnitude of which is indicative of a duration the smart card reader is to maintain an open session with the smart card after recognizing a loss of connection to the personal computer . Keeping the smart card reader powered on for long periods of time affects the battery life of the smart card reader . A user or administrator may be allowed to disable this feature of maintaining an open smart card session or control the duration of the timeout.

Accordingly the smart card reader determines step whether the value to which the timer has counted exceeds the configurable timeout value. Once the smart card reader has determined step that the value to which the timer has counted exceeds the configurable timeout value the smart card reader closes step the session with the smart card .

Some time later while determining step that the value to which the timer has counted has not exceeded the configurable timeout value the smart card reader establishes step a connection with a computing apparatus. As it may not be immediately clear whether the connected computing apparatus is the personal computer the smart card reader compares step the PC identity that is associated with the open session to the identity of the connected computing apparatus. Where the smart card reader determines step that the PC identity that is associated with the open session does not match the identity of the connected computing apparatus the smart card reader closes step the session with the smart card . Where the smart card reader determines step that the PC identity that is associated with the open session matches the identity of the connected computing apparatus the smart card reader maintains step the open session with the smart card .

Assuming that the smart card reader keeps an active session open with the smart card after the personal computer disconnects and once the smart card reader has allowed the personal computer to continue using that session after the personal computer reconnects if a different user starts using the personal computer the smart card reader may automatically close the session with the smart card so that the new user does not take advantage of the previous user s security context on the smart card .

Beneficially in the case where the attempted reconnection step is successful and the smart card is still present in the smart card reader the user gains a large time savings since any need to re import the certificates to the smart card resource manager is obviated.

A known Microsoft Windows Hardware Quality Laboratories WHQL driver test passing of which is required to obtain a signed driver requires that the smart card be present in the smart card reader before the personal computer is placed in a stand by mode and that the smart card be present in the smart card reader as soon as the personal computer resumes operation. Obtaining a signed driver can be seen as providing a competitive advantage by many hardware manufacturers. Since typically the Bluetooth connection is dropped and the status of the smart card is set to absent when the personal computer goes into a stand by mode upon restoration of operation of the personal computer the status of the smart card remains set to absent . Accordingly the WHQL driver test is failed and a signature for the driver may not be attained.

The above described method wherein the SCRS purposefully neglects to inform the smart card resource manager of the change of status of the smart card allows the SCRS to pass the WHQL driver test.

In another scenario if the user walks away from the personal computer carrying or attached to the smart card reader and a problem similar to the above problem presents itself. Once enough distance is placed between the Bluetooth radio in the smart card reader and the Bluetooth radio in the short range communications subsystem of the personal computer a previously established Bluetooth connection is dropped. Consequently the SCRS transmits a status update to the smart card resource manager indicating that the status of the smart card has changed to absent . Some time later when the user returns to a proximity to the personal computer that allows for an automatic or manual reestablishment of the Bluetooth connection between the personal computer and the smart card reader the user is required to wait until the certificates can be copied from the smart card to the smart card resource manager before the user is permitted to access the personal computer .

It may be desirable to reduce the wait time before the personal computer is unlocked and user accessible after restoration of a dropped Bluetooth connection to the smart card reader .

In accordance with various embodiments of the present disclosure when a Bluetooth connection between the smart card reader and the personal computer is dropped because the smart card reader has been moved out of Bluetooth range from the personal computer the SCRS does not report to the smart card resource manager that there has been a change of state for the smart card that is the SCRS does not report to the smart card resource manager that the smart card has been removed. When the smart card reader returns to within Bluetooth range of the personal computer the SCRS automatically reestablishes a connection to the smart card reader . From the perspective of the smart card resource manager the smart card was not removed. Accordingly the certificates are considered valid and the user may continue to access the personal computer .

As will be apparent to a person of ordinary skill in the art while the smart card reader with the smart card installed therein is out of range of the personal computer the smart card resource manager which is unaware that the smart card is out of range may attempt to communicate with the smart card . In such a case the SCRS may transmit a report to the smart card resource manager indicating a failure to communicate with the smart card . Such failure report messages are generally standardized and may include an error code indicating for instance a no media exception or a timeout .

Some smart card aware personal computers have a feature wherein a user interface on the personal computer may be locked when smart card removal is sensed. For such a feature to continue to operate normally the present method may be disabled. That is if the user expects the personal computer to lock when the smart card reader is out of Bluetooth range it is important that the SCRS properly indicate the status of the smart card .

Although the memory card is described as being received by the smart card reader in the preceding examples it will be understood by a person of ordinary skill in the art that there exist contactless smart cards whose communication with the smart card reader does not depend on physical contact. Instead such smart cards communicate wirelessly with the smart card reader .

The above described embodiments of the present application are intended to be examples only. Alterations modifications and variations may be effected to the particular embodiments by those skilled in the art without departing from the scope of the application.

