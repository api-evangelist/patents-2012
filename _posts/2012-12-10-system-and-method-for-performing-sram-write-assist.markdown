---

title: System and method for performing SRAM write assist
abstract: A method and a system are provided for performing write assist. Write assist circuitry is initialized and voltage collapse is initiated to reduce a column supply voltage provided to a storage cell. A bitline of the storage cell is boosted to a boosted voltage level that is below a low supply voltage provided to the storage cell and data encoded by the bitline is written to the storage cell.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08861290&OS=08861290&RS=08861290
owner: NVIDIA Corporation
number: 08861290
owner_city: Santa Clara
owner_country: US
publication_date: 20121210
---
This invention was made with Government support under LLNS subcontract B599861 awarded by DOE. The Government has certain rights in this invention.

Reducing operation supply voltage Vmin is an effective strategy to improve energy efficiency for integrated circuits. However write operations for static random access memory SRAM storage cells may become unreliable at lower operation supply voltages due to variations in circuit characteristics such as threshold voltages resulting from fabrication technology and or the age of the integrated circuit device.

To write a conventional 6 transitor storage cell the data to be written is encoded as differential values on bitlines BL and BLB . For example data 0 is encoded as BL 0 and BLB 1 and data 1 is encoded as BL 1 and BLB 0 where 1 TRUE is a high voltage level and 0 FALSE is a low voltage level. When a word line is enabled NMOS N type metal oxide semiconductor transistor pass gates that couple a pair of bitlines to the memory element within the storage cell are activated. The pass gates must overcome the strength of the cross coupled inverters that form the memory element to change the contents of the storage cell to match the data encoded on the bitlines thus completing the write operation. In particular variation in the circuit characteristics can strengthen a PMOS p type metal oxide semiconductor pull up transistor of the memory element and weaken an NMOS pass gate preventing transfer of a encoded on one of the bitlines to the memory element. As a result the SRAM storage cell cannot be reliably written.

Thus there is a need for addressing the issue of write reliability and or other issues associated with the prior art.

A system and method are provided for performing write assist. Write assist circuitry is initialized and voltage collapse is initiated to reduce a column supply voltage provided to a storage cell. A bitline of the storage cell is boosted to a boosted voltage level that is below a low supply voltage provided to the storage cell and data encoded by the bitline is written to the storage cell.

As previously explained variation in the circuit characteristics can strengthen a PMOS pull up transistor of the memory element and weaken an NMOS pass gate so that the storage cell may not be written reliably. Unfortunately changing the size of the PMOS pull up transistor to weaken the PMOS pull up and changing the size of the NMOS pass gate transistor to strengthen the NMOS pass gate is not an effective technique to improve write reliability. For example when the storage cell is implemented using fin FETs the size of the storage cell is quantized based on the number of fins. What this means is that for various design reasons transistor sizing is not an effective technique to improve write reliability even when variations in the circuit characteristics are minimal. Write assist weakens the PMOS pull up transistor and strengthens the NMOS pass gate to improve write reliability without relying on changing sizes of the transistors. The write assist is enabled during write operations and is disabled during read operations to avoid unwanted side effects during read operations.

More illustrative information will now be set forth regarding various optional architectures and features with which the foregoing technique may or may not be implemented per the desires of the user. It should be strongly noted that the following information is set forth for illustrative purposes and should not be construed as limiting in any manner. Any of the following features may be optionally incorporated with or without the exclusion of other features described.

For example assuming boosted bitline BLL is equal to 0 and boosted bitline BLR is equal to 1 and the storage cell circuit holds the opposite value where BLLI 1 and BLRI 0. As a first consideration the pass gate that is coupled to BLL 0 should be strong enough to overpower the pullup holding the internal node BLLI high. Circuit characteristic variation can strengthen the pullup and weaken the pass gate preventing BLLI from transitioning from 1 to 0. Additionally the pullup on the opposite side of the storage cell circuit should be strong enough to pull BLRI high when the pullup turns on. Note that the pass gate is an NMOS transistor and therefore does not assist pulling BLRI high from a low voltage. The write assist technique described further herein weakens the pullup while also strengthening the pass gate and the pullup to improve write reliability for BLL 0 and BLR 1. Conversely to improve write reliability for BLL 1 and BLR 0 the pullup is weakened while the pass gate and the pullup are strengthened. The write assist technique may be applied only during a write operation to avoid unwanted side effects during read operations.

Write assist is achieved by a combination of boosting the negative bitline and collapsing the column supply voltage for the storage cell that is written. The negative bitline boost operation lowers the voltage level of the bitline that encodes the low differential value for the data i.e. the negative bitline below a low supply voltage provided to the storage cell. As shown in the programmable write assist circuit is configured to provide a boosted value to the negative bitline of the storage cell circuit during a write operation via the boosted bitline BLL and the boosted bitline BLR . The programmable write assist circuit is configured to collapse the column supply voltage provided to the storage cell circuit during a write operation by reducing the column supply voltage from the high supply voltage VDD to a collapsed voltage level that is lower than the high supply voltage. Collapsing the column supply voltage reduces the voltage level provided to the pullup and pullup of the storage cell circuit .

Boosting the negative bitline i.e. BLL increases the gate source voltage Vgs of the pass gate and BLLI is pulled lower compared with providing the non boosted low supply voltage at BLL . The source gate voltage Vsg on the pullup is increased thereby strengthening the pullup and the pass gate . The voltage collapse reduces the column supply voltage and decreases the Vsg on the pullup thereby weakening the pullup . Note that using high supply voltage collapse alone will also decrease the strength of the pullup which is not desired and pulling BLRI high will be more difficult. However combining the negative bitline boost with the high supply voltage collapse counteracts the decrease in strength of the pullup .

In another example the boosted bitline BLR 0 the boosted bitline BLL 1 and the storage cell circuit holds the opposite value where BLLI 0 and BLRI 1. The programmable write assist circuit is configured to boost the negative bitline BLR and collapse the column supply voltage during a write operation. Boosting BLR increases the Vgs of the pass gate which will pull BLRI lower compared with providing the non boosted low supply voltage e.g. VSS at the negative bitline BLR . The Vsg on the pullup is increased thereby strengthening the pullup and the pass gate . The voltage collapse reduces the column supply voltage and decreases the Vsg on the pullup thereby weakening the pullup . Note that using high supply voltage collapse alone will also decrease the strength of the pullup which is not desired and pulling BLLI high will be more difficult. However combining the negative bitline boost with the high supply voltage collapse counteracts the decrease in strength of the pullup .

Although only a single storage cell circuit is shown in multiple storage cell circuits may be configured in an array having two or more rows. Each row is separately enabled according to an address and the word line is asserted to perform read and write operations. Storage cell circuits in an array may be organized in one or more columns where a portion of the address is used to select between the different columns for read and write operations.

Assuming that BLB1 is the negative bitline for a particular write operation the write assist operation will boost BLB1 below the low supply voltage and collapse the column supply voltage provided to the storage cell circuit i.e. column supply . The bitline BL1 is the positive bitline and is set to a value of 1 i.e. the high supply voltage .

The write mux sub circuit enables the gate of the NMOS transistor corresponding to the negative bitline BLB1 . The gates of the NMOS transistors and are disabled. The inputs to the NOR gate are the data to choose between BL1 and BLB1 and a combination of the column select and write enable to select between column 1 or 2 when a write operation is enabled . The bitline discharge is asserted by default pulling BLB1 and the boost node low i.e. to ground through the NMOS transistor . At this point the node needs to be pulled up to establish a voltage across the boost capacitor and initialize the programmable write assist circuit to perform the write assist operation.

In one embodiment the voltage collapse portion of the write assist operation may be disabled. The n P1 and n P2 signals are used to enable disable the voltage collapse for column 1 and 2 respectively. Specifically n P1 is negated to disable the voltage collapse for column 1 and pull up the column supply through the PMOS transistor . Similarly n P2 is negated to disable the voltage collapse for column 2 and pull up the column supply through the PMOS transistor . The write assist can be programmed to disable the voltage collapse when less write assist is needed. When the voltage collapse is enabled for column 1 n P1 is asserted to write data to the storage cell circuit in column 1 disabling the PMOS transistor so the column supply floats. Note that because the column supply was previously pulled up to the high supply voltage the floating column supply is at a high voltage level.

To complete initialization of the programmable write assist circuit for the negative bitline boost operation a voltage is established across the boost capacitor . The n X1 signal is negated to enable the PMOS transistor within the column supply collapse sub circuit to pull up the node establishing a voltage across the boost capacitor . When a write operation is performed for column 2 the n X2 signal is negated to enable the PMOS transistor to pull up the node . The voltage level that node is pulled up to when the voltage collapse is enabled depends on the ratio between the capacitance on the column supply or column supply and the boost capacitor . When the voltage collapse is not enabled the node is pulled up to the high supply voltage by the PMOS transistors and or PMOS transistors and .

In addition to establishing the voltage across the boost capacitor enabling either PMOS transistor or lowers the column supply or respectively when the voltage collapse is enabled because the column supply or is floating and is pulled to a partially collapsed level that is lower than the high supply voltage. Therefore a partial voltage collapse is accomplished when the node is pulled up to charge the boost capacitor and initialize the negative bitline boost operation.

When the high supply voltage collapse is not enabled the column supply and column supply remain at the high supply voltage when the PMOS transistor or respectively is enabled to establish the voltage across the boost capacitor . The node settles at the same voltage level as the column supply or .

After the programmable write assist circuit is initialized to perform the negative bitline boost operation the word line e.g. word line may be enabled to begin the write operation. Then the negative bitline boost is initiated by negating the bitline discharge to disable the NMOS transistor and float the boost node . The bitline control and are configured to enable either NMOS transistor or NMOS transistor which in turn activates the NMOS transistor to pull down the node . Bitline control and provide different amounts of boost for the negative bitline boost. Asserting the bitline control to enable the NMOS transistor pulls the node to ground. Asserting the bitline control to enable the NMOS transistor pulls the node to Vth of the NMOS transistor . In other embodiments a single amount of boost may be provided or additional amounts of boost may be provided by omitting one or more of the NMOS transistors and or including additional transistors coupled to the node .

When the high supply voltage collapse is enabled asserting one of the bitline control and also completes the voltage collapse by pulling the column supply or down. Because the column supply or is pulled down through the PMOS transistor or the voltage at the column supply or is limited to the threshold voltage Vth of the PMOS transistor or . Limiting the minimum voltage at the column supply or ensures that the column supply or is above the retention voltage i.e. the voltage level needed for the storage cell circuit to retain data when neither a read nor a write operation is being performed .

When the voltage collapse is disabled the n X1 or n X2 signal is asserted to turn off the PMOS transistor or preventing a short circuit current between VDD and ground. As the node is pulled to ground via NMOS transistor or NMOS transistors and the boost node is pulled down to a negative voltage i.e. a voltage level below the low supply voltage . The level of the negative voltage is based on the voltage divider formed by the boost capacitor and capacitance of the BLB1 . When the boost node is boosted to a negative voltage the negative bitline BLB1 is boosted to a low voltage. The NMOS transistor should be chosen with a high Vth to prevent charge from leaking onto the boost node and diminishing the negative boost.

To complete the write operation the pullup within the storage cell circuit must pull the low internal node BLRI high assuming that boosted bitline is high and boosted bitline is low. So that the pullup can pull the BLRI node high the column supply voltage should be restored to the high supply voltage level before the word line is negated i.e. turned off . To keep the pullup strong the negative bitline boosted bitline coupled to the BLB1 should still be boosted as the high supply voltage e.g. VDD is restored. Therefore asserting the n X1 or n X2 to turn off the PMOS transistor or . If the voltage collapse was enabled the n P1 or is negated and the PMOS transistor or turns on to restore the column supply or to the high supply voltage level VDD .

To end the negative bitline boost operation the NMOS transistor is turned off to allow for precharge of the BLB1 and the bitline discharge is asserted to turn on the NMOS transistor so that the boost node is restored to the low supply voltage ground . The node remains at some unknown voltage based on the tuning of the bitline control and . In one embodiment an NMOS transistor is coupled to the node and configured to pre discharge the node to the low supply voltage in order to maximize the effect of the high supply voltage collapse operation. The bitline control may be configured to perform the pre discharge of the node .

Generation of the bitline discharge bitline controls and n P1 n P2 n X1 n X2 the word line and the inputs to the NOR gates within the write mux sub circuit signals may be implemented with standard logic gates and delay chains. At least some of the signals can be shared between multiple columns.

At step the word line is enabled to begin the write operation. At step if high supply voltage collapse is not enabled then at step the column supply is decoupled from the boost capacitor to prevent a short circuit between VDD and ground before proceeding to step . At step the negative bitline boost operation is enabled and the boost node is pulled to a negative voltage to boost the negative bitline below the low supply voltage that is provided to the storage cell circuit .

At step the storage cell is written with the data. At step if voltage collapse is enabled then at step the column supply is restored to the high supply voltage before proceeding to step . At step the word line is disabled and at step the negative bitline boost is disabled by pulling the boost node up to the low voltage supply.

At the start of the write assist operation the bitline discharge is asserted so that the boost node is pulled to a low voltage level 10 mV and the negative bitline BLB1 is pulled low to 10 mV . At time n X1 is negated to pull up the node and provide a voltage across the boost capacitor . The boost node increases in response to the increase in the voltage at the node . Also at time n P1 is unchanged because the voltage collapse is not enabled for the waveforms shown in when the write assist operation is performed. The voltage level reached by the boost node does not quite reach the partially collapsed voltage level of the column supply at time .

After time and before time the bitline discharge is negated. At time n X1 is asserted to decouple the column supply from the boost capacitor and prevent a short circuit between the high supply voltage and the low supply voltage. At time the bitline control is asserted to enable the negative bitline boost. The column supply does not collapse further because the voltage collapse is not enabled. At time the boost node is pulled to a lower voltage and the negative bitline BLB1 is boosted to a negative voltage e.g. 70 mV between the time and . At time the bitline control is negated and the bitline discharge is asserted to disable the negative bitline boost and complete the write assist operation.

At the start of the write assist operation the bitline discharge is asserted so that the boost node is pulled to a low voltage level and the negative bitline BLB1 is at the low supply voltage 0 mV . At time n P1 is asserted to disable the PMOS transistor and float the column supply and n X1 is negated to pull up the node and provide a voltage across the boost capacitor . The boost node increases in response to the increase in the voltage at the node . The voltage level reached by the boost node substantially equals the partially collapsed voltage level of the column supply at time . Efficiency is achieved by charging the boost capacitor as a result of the partial voltage collapse.

Before time the bitline discharge is negated. At time the bitline control is asserted to enable the negative bitline boost. The column supply collapses further from time to time to settle at a collapsed voltage level. At time the boost node is pulled to a lower voltage and the negative bitline BLB1 is boosted to a negative voltage 80 mV . In order to complete the write operation at time the n P1 is negated and the n X1 is asserted to restore the column supply to the high supply voltage 600 mV . At time the bitline control is negated and the bitline discharge is asserted to disable the negative bitline boost and complete the write assist operation.

The write assist operation combining the negative bitline boost and the voltage supply collapse provides several advantages in addition to improving write reliability. Typically the high supply voltage lines for VDD and the bitlines are routed in a metal layer in parallel wires. Therefore the capacitive coupling between the negative bitline and VDD allows for a smaller boost capacitor . A disadvantage of using the voltage supply collapse without the negative bitline boost is that the negative bitline boost decreases the gate voltage on the PMOS pullup transistor that pulls up an internal node during the write operation thereby strengthening the PMOS pullup to help switch the value stored by the storage element within the storage cell circuit . The energy used to partially collapse the high supply voltage is used to help charge the boost capacitor . Finally the node is not fully discharged so less energy is needed to recharge the node and provide the voltage across the boost capacitor for the next write assist operation.

While a parallel processor is provided herein as an example of the PPU it should be strongly noted that such processor is set forth for illustrative purposes only and any processor may be employed to supplement and or substitute for the same. In one embodiment the PPU is configured to execute a plurality of threads concurrently in two or more streaming multi processors SMs . A thread i.e. a thread of execution is an instantiation of a set of instructions executing within a particular SM . Each SM described below in more detail in conjunction with may include but is not limited to one or more processing cores one or more load store units LSUs a level one L1 cache shared memory and the like.

In one embodiment the PPU includes an input output I O unit configured to transmit and receive communications i.e. commands data etc. from a central processing unit CPU not shown over the system bus . The I O unit may implement a Peripheral Component Interconnect Express PCIe interface for communications over a PCIe bus. In alternative embodiments the I O unit may implement other types of well known bus interfaces.

The PPU also includes a host interface unit that decodes the commands and transmits the commands to the grid management unit or other units of the PPU e.g. memory interface as the commands may specify. The host interface unit is configured to route communications between and among the various logical units of the PPU .

In one embodiment a program encoded as a command stream is written to a buffer by the CPU. The buffer is a region in memory e.g. memory or system memory that is accessible i.e. read write by both the CPU and the PPU . The CPU writes the command stream to the buffer and then transmits a pointer to the start of the command stream to the PPU . The host interface unit provides the grid management unit GMU with pointers to one or more streams. The GMU selects one or more streams and is configured to organize the selected streams as a pool of pending grids. The pool of pending grids may include new grids that have not yet been selected for execution and grids that have been partially executed and have been suspended.

A work distribution unit that is coupled between the GMU and the SMs manages a pool of active grids selecting and dispatching active grids for execution by the SMs . Pending grids are transferred to the active grid pool by the GMU when a pending grid is eligible to execute i.e. has no unresolved data dependencies. An active grid is transferred to the pending pool when execution of the active grid is blocked by a dependency. When execution of a grid is completed the grid is removed from the active grid pool by the work distribution unit . In addition to receiving grids from the host interface unit and the work distribution unit the GMU also receives grids that are dynamically generated by the SMs during execution of a grid. These dynamically generated grids join the other pending grids in the pending grid pool.

In one embodiment the CPU executes a driver kernel that implements an application programming interface API that enables one or more applications executing on the CPU to schedule operations for execution on the PPU . An application may include instructions i.e. API calls that cause the driver kernel to generate one or more grids for execution. In one embodiment the PPU implements a SIMD Single Instruction Multiple Data architecture where each thread block i.e. warp in a grid is concurrently executed on a different data set by different threads in the thread block. The driver kernel defines thread blocks that are comprised of k related threads such that threads in the same thread block may exchange data through shared memory. In one embodiment a thread block comprises 32 related threads and a grid is an array of one or more thread blocks that execute the same stream and the different thread blocks may exchange data through global memory.

In one embodiment the PPU comprises X SMs X . For example the PPU may include 15 distinct SMs . Each SM is multi threaded and configured to execute a plurality of threads e.g. 32 threads from a particular thread block concurrently. Each of the SMs is connected to a level two L2 cache via a crossbar or other type of interconnect network . The L2 cache is connected to one or more memory interfaces . Memory interfaces implement 16 32 64 128 bit data buses or the like for high speed data transfer. In one embodiment the PPU comprises U memory interfaces U where each memory interface U is connected to a corresponding memory device U . For example PPU may be connected to up to 6 memory devices such as graphics double data rate version 5 synchronous dynamic random access memory GDDR5 SDRAM .

In one embodiment the PPU implements a multi level memory hierarchy. The memory is located off chip in SDRAM coupled to the PPU . Data from the memory may be fetched and stored in the L2 cache which is located on chip and is shared between the various SMs . In one embodiment each of the SMs also implements an L1 cache. The L1 cache is private memory that is dedicated to a particular SM . Each of the L1 caches is coupled to the shared L2 cache . Data from the L2 cache may be fetched and stored in each of the L1 caches for processing in the functional units of the SMs .

In one embodiment the PPU comprises a graphics processing unit GPU . The PPU is configured to receive commands that specify shader programs for processing graphics data. Graphics data may be defined as a set of primitives such as points lines triangles quads triangle strips and the like. Typically a primitive includes data that specifies a number of vertices for the primitive e.g. in a model space coordinate system as well as attributes associated with each vertex of the primitive. The PPU can be configured to process the graphics primitives to generate a frame buffer i.e. pixel data for each of the pixels of the display . The driver kernel implements a graphics processing pipeline such as the graphics processing pipeline defined by the OpenGL API.

An application writes model data for a scene i.e. a collection of vertices and attributes to memory. The model data defines each of the objects that may be visible on a display. The application then makes an API call to the driver kernel that requests the model data to be rendered and displayed. The driver kernel reads the model data and writes commands to the buffer to perform one or more operations to process the model data. The commands may encode different shader programs including one or more of a vertex shader hull shader geometry shader pixel shader etc. For example the GMU may configure one or more SMs to execute a vertex shader program that processes a number of vertices defined by the model data. In one embodiment the GMU may configure different SMs to execute different shader programs concurrently. For example a first subset of SMs may be configured to execute a vertex shader program while a second subset of SMs may be configured to execute a pixel shader program. The first subset of SMs processes vertex data to produce processed vertex data and writes the processed vertex data to the L2 cache and or the memory . After the processed vertex data is rasterized i.e. transformed from three dimensional data into two dimensional data in screen space to produce fragment data the second subset of SMs executes a pixel shader to produce processed fragment data which is then blended with other processed fragment data and written to the frame buffer in memory . The vertex shader program and pixel shader program may execute concurrently processing different data from the same scene in a pipelined fashion until all of the model data for the scene has been rendered to the frame buffer. Then the contents of the frame buffer are transmitted to a display controller for display on a display device.

The PPU may be included in a desktop computer a laptop computer a tablet computer a smart phone e.g. a wireless hand held device personal digital assistant PDA a digital camera a hand held electronic device and the like. In one embodiment the PPU is embodied on a single semiconductor substrate. In another embodiment the PPU is included in a system on a chip SoC along with one or more other logic units such as a reduced instruction set computer RISC CPU a memory management unit MMU a digital to analog converter DAC and the like.

In one embodiment the PPU may be included on a graphics card that includes one or more memory devices such as GDDR5 SDRAM. The graphics card may be configured to interface with a PCIe slot on a motherboard of a desktop computer that includes e.g. a northbridge chipset and a southbridge chipset. In yet another embodiment the PPU may be an integrated graphics processing unit iGPU included in the chipset i.e. Northbridge of the motherboard.

As described above the work distribution unit dispatches active grids for execution on one or more SMs of the PPU . The scheduler unit receives the grids from the work distribution unit and manages instruction scheduling for one or more thread blocks of each active grid. The scheduler unit schedules threads for execution in groups of parallel threads where each group is called a warp. In one embodiment each warp includes 32 threads. The scheduler unit may manage a plurality of different thread blocks allocating the thread blocks to warps for execution and then scheduling instructions from the plurality of different warps on the various functional units i.e. cores DPUs SFUs and LSUs during each clock cycle.

In one embodiment each scheduler unit includes one or more instruction dispatch units . Each dispatch unit is configured to transmit instructions to one or more of the functional units. In the embodiment shown in the scheduler unit includes two dispatch units that enable two different instructions from the same warp to be dispatched during each clock cycle. In alternative embodiments each scheduler unit may include a single dispatch unit or additional dispatch units .

Each SM includes a register file that provides a set of registers for the functional units of the SM . In one embodiment the register file is divided between each of the functional units such that each functional unit is allocated a dedicated portion of the register file . In another embodiment the register file is divided between the different warps being executed by the SM . The register file provides temporary storage for operands connected to the data paths of the functional units.

Each SM comprises L processing cores . In one embodiment the SM includes a large number e.g. 192 etc. of distinct processing cores . Each core is a fully pipelined single precision processing unit that includes a floating point arithmetic logic unit and an integer arithmetic logic unit. In one embodiment the floating point arithmetic logic units implement the IEEE 754 2008 standard for floating point arithmetic. Each SM also comprises M DPUs that implement double precision floating point arithmetic N SFUs that perform special functions e.g. copy rectangle pixel blending operations and the like and P LSUs that implement load and store operations between the shared memory L1 cache and the register file . In one embodiment the SM includes 64 DPUs 32 SFUs and 32 LSUs .

Each SM includes an interconnect network that connects each of the functional units to the register file and the shared memory L1 cache . In one embodiment the interconnect network is a crossbar that can be configured to connect any of the functional units to any of the registers in the register file or the memory locations in shared memory L1 cache .

In one embodiment the SM is implemented within a GPU. In such an embodiment the SM comprises J texture units . The texture units are configured to load texture maps i.e. a 2D array of texels from the memory and sample the texture maps to produce sampled texture values for use in shader programs. The texture units implement texture operations such as anti aliasing operations using mip maps i.e. texture maps of varying levels of detail . In one embodiment the SM includes 16 texture units .

The PPU described above may be configured to perform highly parallel computations much faster than conventional CPUs. Parallel computing has advantages in graphics processing data compression biometrics stream processing algorithms and the like.

The system also includes input devices a graphics processor and a display i.e. a conventional CRT cathode ray tube LCD liquid crystal display LED light emitting diode plasma display or the like. User input may be received from the input devices e.g. keyboard mouse touchpad microphone and the like. In one embodiment the graphics processor may include a plurality of shader modules a rasterization module etc. Each of the foregoing modules may even be situated on a single semiconductor platform to form a graphics processing unit GPU .

In the present description a single semiconductor platform may refer to a sole unitary semiconductor based integrated circuit or chip. It should be noted that the term single semiconductor platform may also refer to multi chip modules with increased connectivity which simulate on chip operation and make substantial improvements over utilizing a conventional central processing unit CPU and bus implementation. Of course the various modules may also be situated separately or in various combinations of semiconductor platforms per the desires of the user.

The system may also include a secondary storage . The secondary storage includes for example a hard disk drive and or a removable storage drive representing a floppy disk drive a magnetic tape drive a compact disk drive digital versatile disk DVD drive recording device universal serial bus USB flash memory. The removable storage drive reads from and or writes to a removable storage unit in a well known manner.

Computer programs or computer control logic algorithms may be stored in the main memory and or the secondary storage . Such computer programs when executed enable the system to perform various functions. The memory the secondary storage and or any other storage are possible examples of computer readable media.

In one embodiment the architecture and or functionality of the various previous figures may be implemented in the context of the central processor the graphics processor an integrated circuit not shown that is capable of at least a portion of the capabilities of both the central processor and the graphics processor a chipset i.e. a group of integrated circuits designed to work and sold as a unit for performing related functions etc. and or any other integrated circuit for that matter.

Still yet the architecture and or functionality of the various previous figures may be implemented in the context of a general computer system a circuit board system a game console system dedicated for entertainment purposes an application specific system and or any other desired system. For example the system may take the form of a desktop computer laptop computer server workstation game consoles embedded system and or any other type of logic. Still yet the system may take the form of various other devices including but not limited to a personal digital assistant PDA device a mobile phone device a television etc.

Further while not shown the system may be coupled to a network e.g. a telecommunications network local area network LAN wireless network wide area network WAN such as the Internet peer to peer network cable network or the like for communication purposes.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

