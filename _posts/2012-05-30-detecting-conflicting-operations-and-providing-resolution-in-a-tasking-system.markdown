---

title: Detecting conflicting operations and providing resolution in a tasking system
abstract: A mechanism for detecting conflicting operations and providing resolutions in a tasking system is disclosed. A method includes receiving, by a processing device in a tasking system, a request for a call including at least one operation to be executed on at least one resource of a plurality of resources that are managed by the tasking system. The method also includes detecting an occurrence of a conflict between the at least one operation on the call request and queued operations associated with the plurality of resources. The method also includes generating at least one of a task or an error report for the at least one operation in the call request based on the conflict. The method further includes identifying task dependencies associated with the at least one task and executing the at least one task only after execution of the task dependencies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09519530&OS=09519530&RS=09519530
owner: Red Hat, Inc.
number: 09519530
owner_city: Raleigh
owner_country: US
publication_date: 20120530
---
The embodiments of the invention relate generally to a computer system and more specifically relate to mechanism for detecting conflicting operations and providing resolution in a tasking system environment.

Tasking systems are well known technology used in software engineering and software quality assurance. Tasking systems implement a software development practice of frequently managing a number of resources such as repositories consumers content and so on. The managing of the resources includes performing tasks on the resources. Such tasks include but are not limited to creating operations deleting operations reading operations and updating operations on the resources.

There are various tasking systems that exist today. One such system is Celery which is an open source task queue system based on distributed message passing on real time operations. The Celery includes execution units called tasks which are executed concurrently on one or more worker nodes using multiprocessing. Tasks can execute asynchronously in the background or synchronously wait until ready .

Another known tasking system is Cue is a multi threaded task system that functions to perform expensive and time consuming operations by decoupling the creation of a request of an action from its execution. In Cue by utilizing a simple message format a command is queued placed on the task queue and forgotten by a client and then is later dequeued removed from the task queue and executed.

However the above tasking system as well as many other tasking systems faces the problem of managing multiple resources under concurrent operations.

Embodiments of the invention provide a mechanism for detecting conflicting operations and providing resolution in a tasking system.

According to one embodiment of the invention the method includes receiving by a processing device in a tasking system a request for a call. The request for the call includes at least one operation to be executed on at least one resource of a plurality of resources that are managed by the tasking system. The method also includes detecting by the processing device an occurrence of a conflict between the at least one operation on the call request and queued operations associated with the plurality of resources. The queued operations are maintained in a task queue of the tasking system. The method also includes generating by the processing device at least one of a task or an error report for the at least one operation in the call request based on the conflict. The method further includes identifying by the processing device task dependencies associated with the at least one task and executing by the processing device the at least one task only after execution of the task dependencies.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not typically these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times typically for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as receiving storing detecting generating executing placing identifying rejecting matching adding reporting determining passing or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be constructed for the specific purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct an apparatus to perform the method steps. The structure for a variety of these systems will appear as set forth in the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The present invention may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present invention. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

Embodiments of the invention disclose systems and methods for detecting conflicting operations and providing resolution in a tasking system. Tasking systems implement a software development practice of frequently managing a number of resources. These resources may include software repositories and their associated content such as packages errata and distributions consumers content and so on. The managing may of these resources may include performing tasks on the resources. A task is a data structure that executes operations on the resources. Tasks may include but are not limited to creating operations deleting operations reading operations updating operations performing operations on the resources. In one embodiment a coordinator execution module is initialized on an operating system OS to detect conflicting operations and provide resolution for the conflicting operations in a tasking system associated with the coordinator execution module.

In one embodiment the server device provides tracking of the systems e.g. client devices that are using which repositories along with a full system history of installation actions. In some embodiment the server device uses a fine grained roles based permission model RBAC that provides authentication and authorization for the repositories including integration with external LDAP. The server device may also define groups for repositories packages and systems e.g. clients and use those groups for bulk operations. In some embodiments server device defines and enforces system maintenance windows and also maintains an inventory of system package profiles including both current and historical information on any changes.

The hardware platform may include one or more central processing units CPUs and data storage . In one embodiment the data storage comprises one or more hardware and software devices which may be located internally and externally to the computer system . Examples of data storage may include but are not limited to random access memory RAM non volatile storage memory e.g. Flash EEPROM solid state drives SSD etc. magnetic storage memory e.g. one or more hard drives and optical memory e.g. CDs DVD BlueRay drives etc. . In addition hardware platform may include additional hardware devices such as network interface cards NICs sound or video adaptors photo video cameras printer devices keyboards displays or any other suitable device intended to be coupled to a computer system.

In one embodiment OS also includes a resource library that functions as a database for storing resource IDs that identify resource types of resources managed by computer system and corresponding operations performed on these resources. In one embodiment the systems library includes a table to provide the list of resource IDs.

In some embodiments the OS includes a tasking system that executes tasks on the resources managed by computer system . As defined above a task is a data structure that executes operations on the resources. Tasks include but are not limited to performing operations such as creating reading updating and deleting the resources. In one embodiment the operations are executed in parallel on the same resource. In some embodiments the task system is interfaced by task application programming interfaces APIs to access and retrieve the application to execute the operations.

In some embodiments a task queue is integrated in the task system of the OS . In one embodiment the task queue executes tasks generated in the computer system . In one embodiment the task includes task dependencies. The task dependencies may be blocking tasks that should be executed before executing a task currently under operation. In one embodiment the task queue functions as a priority queue that tracks the order in which the tasks are en queued placed on the task queue and the dependencies of each task in the task queue .

In some embodiments a coordinator execution module is integrated in the task system . In one embodiment the coordinator execution module detects conflicting operations on the resource s and provides resolution for these conflicting operations in the tasking system . In one embodiment when a request for a call to execute one or more operations on resource s is received by the OS the coordinator execution module matches an ID of the resource associated with the call request with the resource IDs in the resource library . Upon any match detections the coordinator execution module determines if there is a conflict between the one or more operations of the call request with any of queued operations maintained in the task queue of the tasking system . In one embodiment the queued operations are operations that are currently being executed on the matched resource s . A conflict may occur when the operations on the call request cannot be executed upon receipt. If the coordinator execution module does not detect a conflict then it generates a task for the operation associated with the call request and places the generated task in the task queue of the tasking system along with the any other dependencies on the task.

On the other hand if the coordinator execution module detects a conflict then it performs operations to determine the cause for the conflict. In one embodiment the coordinator execution module may determine that the conflict is due to the operation of the call request requiring updating or deleting of the resource when an operation is currently being executed on the resource. In this situation the coordinator execution module may create a task for the operation associated with the call request and place the created task in the task queue along with other task dependencies to be postponed until current operation on the resource is completely executed.

In another embodiment the coordinator execution module may determine that the conflict is due to the operation of the call request requiring updating of the resource when the resource has already been previously deleted from the on site repository. In this case the coordinator execution module may reject the operation associated with the call request and generates an error report.

In some embodiments the coordination execution module may further execute one or more operations associated with the resources associated with the call request. The OS may also include a graphical user interface to provide a user with an interface to send the call request that includes the one or more operations to be executed on the resources. In some embodiments the graphical user interface is configured to provide results of the task and an error report to a user.

In one embodiment the Resource ID identifies the type of resource. Some examples of the Resource IDs may include but are not limited to cds RESOURCE CDS TYPE consumer RESOURCE CONSUMER TYPE content unit RESOURCE CONTENT UNIT TYPE repository RESOURCE REPOSITORY TYPE repository distributor RESOURCE REPOSITORY DISTRIBUTOR TYPE repository importer RESOURCE REPOSITORY IMPORTER TYPE role RESOURCE ROLE TYPE and user RESOURCE USER TYPE . In one embodiment the type of resource identified with the Resource ID refers to a model representing individual resources. Such models include but are not limited to consumers content units repositories roles users etc.

In some embodiments the Operation s column represents a task performed on the resource associated with the corresponding Resource ID . Some examples of such Operations include but are not limited to create RESOURCE CREATE OPERATION read RESOURCE READ OPERATION update RESOURCE UPDATE OPERATION delete RESOURCE DELETE OPERATION .

Method begins at block where a request for a call is received. In one embodiment the request for a call includes one or more operation s to be executed on one or more resource s . In one embodiment the operation s to be executed include adding the resource s . In another embodiment the operation includes reading the resource s . In a further embodiment the operation s include updating the resource s . In even further embodiment the operation s include deleting the resources.

At block the resource s associated with the call request are searched to identify a match with any resources stored in the resource library . In one embodiment the ID of the resource associated with the call request is matched with the Resource ID s of the resource library . Upon an occurrence of a match it is determined at decision block whether a conflict exists between the one or more operations associated with the call request and the queued operations maintained in the task queue of the tasking system . The queued operations include operations currently being executed on the matched resource s from the resource library . In one embodiment the operations currently being executed on the matched resource s include any operations associated with the resource ID of the matched resource s . A conflict occurs when the operations on the call request cannot be executed upon receipt.

If no conflicts are identified at decision block then method proceeds to block where a task is generated for the operation in the call request if it is determined that no conflict exists at block . At block the task is placed in the task queue of the tasking system along with the any other dependencies on the task. In one embodiment the task dependencies include additional tasks that need to be executed before executing the task that is generated. At block the task is executed. At block the results of the task after the execution are generated. In one embodiment the results of the task are provided to the user at block .

If at decision block it is determined that a conflict exists then method proceeds to block to determine a reason for the conflict. In one embodiment at block it is determined that the conflict is due to Reason A. In one embodiment the Reason A includes that the operation in the call request relates to updating or deleting of the resource when another operation is currently being executed on the resource. In one embodiment such an operation may include synchronization of the resource. In that situation method proceeds to block where a task is created for the operation in the call request. At block the task is placed in the task queue along with any other task dependencies to be postponed until the current operation on the resource is completely executed. At block the task is executed. At block the results of the task after execution are generated. In one embodiment the results of the task are provided to the user at block .

In another embodiment at block it is determined that the conflict is due to Reason B. In one embodiment Reason B includes that the operation in the call request relates to updating of the resource when the resource has been previously deleted from the database. In this case method continues to block where the operation on the call request is rejected. At block an error report is generated for the rejection of the operation on the call request. In one embodiment the error report includes the reasons for rejecting the operation on the call request. In one embodiment the error report is provided to the user at block .

The computer system includes a processing device a memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute coordinator execution logic for performing the operations and steps discussed herein. In one embodiment coordinator execution module described with respect to performs the coordinator execution logic .

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions e.g. coordinator execution logic embodying any one or more of the methodologies of functions described herein such as methods for providing coordinator execution in a tasking system described with respect to . The coordinator execution module logic may also reside completely or at least partially within the memory and or within the processing device during execution thereof by the computer system the memory and the processing device also constituting machine accessible storage media.

The machine readable storage medium may also be used to store the coordinator execution module logic persistently containing methods that call the above applications. While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

