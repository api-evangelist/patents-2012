---

title: Mapping stored client data to requested data using metadata
abstract: Disclosed are various embodiments that employ metadata to map stored client data to form fields and other data consumers. Data items are requested by a data consumer, such as a form. Metadata is obtained that includes a mapping of stored data items to the requested data items, and the mapping is associated with an identification of the data consumer. The requested data items are provided to the data consumer based at least in part on the mapping and the stored data items.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09330198&OS=09330198&RS=09330198
owner: Amazon Technologies, Inc.
number: 09330198
owner_city: Seattle
owner_country: US
publication_date: 20121116
---
Forms may be present in many user interfaces including network pages mobile applications locally executed applications and so on. Forms are designed for manual input of data by users. Form field types may include text fields text area fields checkboxes radio buttons drop down boxes sliders and other types. Forms may be employed for users to perform actions relative to network sites e.g. logging in registering for an account placing an order adding items to shopping lists and so on.

The present disclosure relates to the use of metadata to map stored client data to form input fields on network pages mobile application screens and other user interfaces. Repeatedly filling in form fields with commonly requested information such as name address phone number email address etc. can be aggravating to users. Browsers may provide an ability to save data supplied to a particular form but such information may not be provided to different forms associated with different applications or network sites. Form field names and data formats are often arbitrarily chosen by developers and differ from form to form. In some cases browsers or other applications may attempt to automatically fill in different forms using stored data. However such form filling would be non deterministic and cannot guarantee that the stored data will be provided to the correct form fields and in the correct format.

As a non limiting example a user may enter an example birth date as Jan. 1 2000 in a particular form field of a first form on a network page. The browser may store this information. Suppose that a second form is encountered on a different network page and the second form includes a field named birthdate. The browser may correctly guess that birthdate corresponds to birth date but the browser may not be able to determine the date format the second form is expecting. The browser may attempt to fill in Jan. 1 2000 in the birthdate field but the second form may be expecting the date in the format 1 Jan. 2000. Various logic may be built into the browser to handle a variety of form filling situations but the browser remains unable to handle every situation that may arise in a deterministic manner.

Various embodiments of the present disclosure employ metadata that maps form fields to stored data to facilitate deterministic form filling. The metadata may go beyond the simple mapping of data items and include transformations combinations of multiple data items regular expressions and other features. The metadata may be obtained from a central authority a network site hosting the form the user and or other sources. Such metadata may be manually created by form owners agents of a central authority or others. In some embodiments the metadata may be crowdsourced.

With reference to shown is a drawing that depicts an example scenario in a networked environment according to various embodiments. The networked environment includes a client a server and a metadata central authority . To begin a client renders a user interface that includes a form having data fields for username and password. Such a user interface may be a network page mobile application screen etc. and may be rendered based at least in part on data obtained from the server over a network. The client may then obtain metadata from the metadata central authority . The metadata includes a mapping that corresponds to the form.

The mapping defines a correspondence between requested data of the user interface and stored client data in the client . For example the username field in the user interface may have a name of SocialNetUserName1 and the password field in the user interface may have a name of SocialNetPassWord1. The mapping indicates that SocialNetUserName1 corresponds to the stored data named EmailAddress and that SocialNetPassWord1 corresponds to the stored data named LocalPassword103. As shown in the stored client data named EmailAddress corresponds to the value ted myaddress.email and the stored client data named LocalPassword103 corresponds to the value p4ssw0rd. 

Based at least in part on the mapping obtained from the metadata central authority and the stored client data the client is configured to automatically fill in the fields of the user interface which is reflected in the user interface . If stored data is not available to supply requested data the client may render another user interface to elicit the non stored requested data from the user. Although the client may automatically fill in a form as shown in it is understood that the client may instead supply such stored client data via application programming interfaces APIs remote service requests and other backend approaches. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a detail view of the networked environment according to various embodiments. The networked environment includes the client a computing environment and a computing environment in data communication via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may correspond to the server and the computing environment may correspond to the metadata central authority . The computing environments may each comprise for example a server computer or any other system providing computing capability. Alternatively the computing environments may each employ a plurality of computing devices that may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environments may each include a plurality of computing devices that together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environments may each correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include a network data server a data consumer service and other applications services processes systems engines or functionality not discussed in detail herein. The network data server is executed to serve up network content to clients via the network . The network data server may employ protocols such as for example hypertext transfer protocol HTTP simple object access protocol SOAP real time transport protocol RTP representational state transfer REST and other protocols. For example the network data server may host one or more network sites which may correspond to web sites gopher sites mobile application data providers and others. The network data server may correspond to a commercially available HTTP server such as for example Apache HTTP Server Apache Tomcat Microsoft Internet Information Services IIS and so on. The network data server may be configured to serve up forms and to receive form data via HTTP GET HTTP POST HTTP PUT and or other approaches.

The data consumer service is executed to receive requested data from clients . The requested data may correspond to hypertext markup language HTML form data and or other formats of requested data. In some embodiments the submission of requested data to the data consumer service may not involve forms or active user browsing on a network site . The data consumer service may employ protocols such as for example hypertext transfer protocol HTTP simple object access protocol SOAP real time transport protocol RTP representational state transfer REST remote method invocation RMI remote procedure call RPC and other protocols.

The data stored in the data store includes for example network site data metadata and potentially other data. The network site data includes various data pertaining to the network sites including for example code templates text images HTML data extensible markup language XML data video audio and so on. The metadata includes a mapping of requested data to stored client data for one or more data consumers hosted by the computing environment . Such data consumers may correspond to the network data server various form processing engines hosted by the network data server the data consumer service and other data consumers in the computing environment . The metadata may include transformations to be applied to stored client data combinations of stored client data regular expressions to validate stored client data and other content used to map stored client data to data requested by the computing environment . The metadata may indicate that some requested data items are required while others are optional.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include a metadata service a metadata management application and other applications services processes systems engines or functionality not discussed in detail herein. The metadata service is executed to serve up metadata in response to requests by clients . The computing environment and the metadata service may correspond to a metadata central authority . As a central authority the metadata service may serve up metadata for a variety of network sites and data consumer services potentially with no relationship defined between the entity operating the network sites or data consumer services and the entity operating the metadata service . The metadata service may employ protocols such as for example hypertext transfer protocol HTTP simple object access protocol SOAP real time transport protocol RTP representational state transfer REST remote method invocation RMI remote procedure call RPC and other protocols.

The metadata management application may be executed to manage updates to the metadata . Such updates may originate from users via a crowdsourcing approach from owners of the network sites or data consumer services from independent contractors compensated on a per task basis from agents of the metadata central authority or from other sources. The metadata management application may generate various user interfaces that are sent to clients to facilitate creating or updating metadata . The metadata management application may also facilitate verification and auditing of updates to metadata submitted by untrusted sources.

The data stored in the data store includes for example metadata user specified mappings audit data and potentially other data. The metadata corresponds to metadata stored by the data store of the computing environment . The metadata includes a mapping of requested data to stored client data for a variety of data consumers. The metadata may include transformations to be applied to stored client data combinations of stored client data regular expressions to validate stored client data and other content used to map stored client data to data requested by data consumers.

The user specified mappings correspond to mappings specified by users. Such user specified mappings may be crowdsourced from a multitude of users at clients . For example a user may indicate that a requested form field of a network site corresponds to a standardized field in the stored client data such as FirstName. The user specified mappings may be pending verification by the metadata management application before they are incorporated in publically available metadata

The audit data corresponds to data associated with manual audits or verifications of the user specified mappings or other mappings obtained from untrusted sources such as automated generation tools untrusted agents and so on. The audit data may determine whether multiple mappings agree and therefore may be acceptable or whether multiple mappings disagree and therefore may be unacceptable. The audit data may control audits that may occur on a periodic basis. For example a mapping may be automatically audited from time to time to determine that the particular form on a network site is still requesting the same data items that are included in the mapping . If the form requests additional or different data items the existing mapping may be invalidated and a new or modified mapping may be created through the metadata management application .

The client is representative of a plurality of client devices that may be coupled to the network . The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client may include a display . The display may comprise for example one or more devices such as liquid crystal display LCD displays gas plasma based flat panel displays organic light emitting diode OLED displays LCD projectors or other types of display devices etc.

The client may be configured to execute various applications such as a client application a data provider application and or other applications. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The client application may be executed in a client for example to access network content served up by the computing environment and or other servers thereby rendering a user interface on the display . The client application may for example correspond to a browser a mobile application etc. and the user interface may correspond to a network page a mobile application screen etc. The data provider application is used to store various data items obtained from the users of the client including standardized data items and potentially non standard data items to obtain metadata and to provide stored data items to data consumers based at least in part on the mappings obtained in the metadata .

In one embodiment the data provider application is a plug in or extension of the client application . The data provider application may be configured to fill in forms in various user interfaces rendered by the client application . Alternatively the data provider application may provide data to the data consumers via a backend process. If requested data is unavailable from the stored data items the data provider application may be configured to obtain the unavailable data from the user via one or more user interfaces . The client may be configured to execute applications beyond the client application and the data provider application such as for example other browsers other mobile applications email applications social networking applications and or other applications.

The data stored in the data store includes for example stored client data a metadata cache and potentially other data. The stored client data may be generated through the operation of the data provider application . In some cases the data provider application may automatically obtain and store data in the stored client data as the users fill in forms. In other cases the user at the client may be prompted to provide missing stored client data in advance or on demand as needed. The metadata cache may be employed to store metadata obtained from the computing environment and or metadata obtained from the computing environment as the case may be.

Next a general description of the operation of the various components of the networked environment is provided. To begin a user at a client may create various stored client data through the data provider application . For example the user may launch the data provider application and provide various types of standardized data items such as first name last name email address street address city zip code gender age birthdate and so on. Data item types may be considered to be standardized when they correspond to a preconfigured collection of data item types in the data provider application . It is noted that such data item types correspond to specific data rather than generic types such as text input or button input. As an alternative to providing standardized data in advance the user may provide such data items to the data provider application in conjunction with filling out forms in user interfaces rendered by the client application . The data may be learned automatically as the user manually fills in the form or the data may be elicited from the user by the data provider application in order for the data provider application to provide the data to the data consumer.

The user at the client may employ the client application to interact with various network sites . In so doing the network data server may send data encoding user interfaces to the client by way of the network . Such user interfaces may request various data items from the client e.g. by way of a form or other approach. The data provider application then obtains metadata that corresponds to the form or other data consumer.

Such metadata may be obtained through several different approaches in various embodiments. In some cases the metadata may be embedded or otherwise linked to the network data sent by the network data server . In other words the metadata may correspond to the metadata hosted by the computing environment . Such metadata may be embedded within a network page document or may be obtained separately from the network data server .

In other cases the metadata may be obtained from a metadata central authority through a request by the data provider application to the metadata service via the network . The data provider application may request the metadata from the metadata service by identifying the data consumer that has requested data from the user. For example the data provider application may request the metadata by providing the domain name of the network site that is requesting data by providing a uniform resource locator URL or other identifier of the data consumer service or by other approaches. In some cases the metadata service may be configured to push metadata to the client before the metadata is used.

In some cases the metadata may be obtained from a metadata cache in the client . If the metadata is obtained from a metadata cache the data provider application may be configured to verify that the metadata is current and valid. For example the data provider application may issue a request to an originator of the metadata to determine whether a timestamp version or other signature associated with the metadata is current. If the metadata is not current the data provider application may obtain updated metadata from the computing environment or the computing environment as described previously. In other cases the metadata may be included with the data provider application .

Once the appropriate metadata is available the data provider application employs the included mapping to determine stored client data that corresponds to the data items requested by the form or other data consumer. To this end the data provider application correlates an identifier of a requested data item with an identifier in the mapping to determine a corresponding identifier of data in the stored client data . The mapping may define the requested data item as corresponding to a combination of multiple stored data items. As a non limiting example the mapping may defined a requested mailing address as being a combination of a stored street address a stored city a stored state and a stored zip code.

Also the mapping may define the requested data item as correspond to a transformation of one or more stored data items. Various operations may be employed in a transformation e.g. an uppercasing operation a lowercasing operation a substring operation and so on. As a non limiting example the mapping may define a requested credit card number as being four digit groupings of digits from a stored credit card number where the four digit groupings are separated by spaces. As another non limiting example the mapping may define a requested name as being a stored first name and a stored last name concatenated with a space with an uppercasing operation being applied to the result.

Further the mapping may define a regular expression or other requirements for requested data. For example the mapping may define a data format as being all numeric all lowercase containing four digits all alphanumeric alphanumeric containing at least one number containing at least one special character and so on. The stored data may be evaluated against the regular expression or other requirements. If the corresponding stored data is determined to be non conforming the data provider application may render a user interface to prompt the user to provide conforming data.

It may be the case that the requested data is not available in the stored client data or that explicit user permission is needed for providing the stored client data to a data consumer. In such cases the data provider application may render a user interface to prompt the user to provide the requested data and or to provide permission to share the requested data. The data provider application may allow the user to save the data that is provided under a user provided or standardized name identifier. Such data may then be automatically provided upon future requests by the data consumer.

In some scenarios data cannot be saved or filled in automatically. For example with a completely automated public Turing test to tell computers and humans apart CAPTCHA or other challenge response test input from the actual user may be required. With a CAPTCHA the user may be prompted to fill in the requested data in the form rendered by the client application . Alternatively the data provider application may render a different user experience to present the CAPTCHA to the user and to obtain the response of the user to the CAPTCHA. For example the user experience may show an image or play audio from the CAPTCHA. The user may be requested to transcribe the audio or image in a form field. Upon the user providing the transcription the data provider application may then send the result to the data consumer.

In response to the requested data being gathered either from user input or from stored client data the data provider application then prepares the data to be provided to the data consumer. In so doing the data provider application may generate the requested data by applying transformations combinations etc. to the gathered data. The data provider application then provides the data to the data consumer. This may be done by form filling or through a backend process. With a backend process the data provider application may communicate with the network data server and or the data consumer service over the network to submit the requested data via an API without the user at the client perceiving a form being filled in and submitted.

As has been described requested data may be provided to data consumers based at least in part on metadata . The metadata management application may provide functionality to facilitate creation of the metadata and the mappings . To this end the metadata management application may generate data encoding various user interfaces e.g. in network pages or in mobile application data and send the data to clients for rendering in the client application . In some cases the data provider application may generate portions of user interfaces to assist in creation of mappings as will be discussed in connection with .

Turning now to shown is one example of a user interface rendered in a client in the networked environment . At least a portion of the user interface may be rendered by a data provider application to facilitate specification of mappings . In the user interface shows a network page rendered by the client application .

The network page includes an account registration form for a network site . The account registration form includes multiple form fields relating to name email address street address city state zip code phone and so on. Internally in the code for the network page each of these form fields may be associated with a name or identifier such as RegForm.Name RegForm.Email RegForm.StreetAddress RegForm.City RegForm.State RegForm.Zip RegForm.Phone and so on.

The data provider application may query the metadata service and determine that metadata is unavailable for the account registration form . In response the data provider application may render the auxiliary user interface which facilitates creation of a mapping . In the non limiting example of the auxiliary user interface includes a plurality of components corresponding to standardized data fields . Such standardized data fields may include First Name Middle Initial Last Name Birthdate Gender Age and so on.

To create a mapping a user may for example drag and drop First Name and Last Name from the standardized data fields over to the name form field . The auxiliary user interface may update based upon the dragging and dropping of multiple data items to allow the user to specify how the multiple data items are to be combined transformed etc. As a result metadata including a mapping is created. The metadata may be stored locally in the client in the metadata cache . In one embodiment the metadata may be sent via the network to the metadata management application . The metadata management application may store the metadata as metadata or in the user specified mappings . Depending on a configuration in the audit data the user specified mapping may be verified or audited by one or more additional users before it is incorporated in the metadata and generally distributed.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the data provider application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the data provider application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client according to one or more embodiments.

Beginning with box the data provider application obtains various standardized data items. The standardized data items may be obtained from a user via a user interface . For example standardized data may be collected as part of an initial configuration procedure for the data provider application . Alternatively the standardized data may be collected as the user fills out forms to provide data to various data consumers. In some cases the standardized data items may be obtained from a network service that has access to at least some of the standardized data items for the user. The standardized data may correspond to standardized data types promulgated by the metadata central authority . In box the data provider application stores the standardized data items as the stored client data .

In box the data provider application determines that data items have been requested by a data consumer. As an example a user may use the client application to request a network page that includes a form. As another example the client application may be a mobile application that renders a form based at least in part upon network data. As yet another example the client application may locally generate a form to collect data from the user. In still other examples a request for data items may be received by the data provider application without a form being rendered on the display .

In box the data provider application determines whether metadata for the data consumer has been locally cached and is valid. Cached metadata may be invalid if it is outdated corrupt or otherwise unusable. If the metadata has been locally cached and is valid in box the data provider application obtains the metadata for the data consumer from the metadata cache . The data provider application then continues to box . If the metadata has not been locally cached or is cached but is invalid the data provider application instead proceeds from box to box .

In box the data provider application obtains the metadata through an external source via the network . Such an external source may be a network data server corresponding to a network site and or a metadata service corresponding to a metadata central authority . The data provider application may request the metadata according to a domain name of a network site a URL of a data consumer e.g. a form on a network page an endpoint of a data consumer service etc. a name or identifier of a form or other data consumer and other identifiers. In some cases the data provider application may request the metadata from multiple external sources. If metadata is obtained from multiple sources the data provider application may be configured to resolve inconsistencies between multiple copies of metadata . For example the data provider application may be configured to prefer metadata obtained from the network data server over metadata obtained from the metadata service or vice versa. The data provider application then proceeds to box .

In box the data provider application generates at least some of the requested data items based at least in part on the stored data items in the stored client data and a mapping in the metadata . The generation process may involve data transformations and combinations and the data may be verified for compliance with regular expressions that define requested data formats in the mapping . In box the data provider application determines whether additional data is to be obtained from the user. For example the data consumer may include data that has not yet been stored in the stored client data . Such data may simply be previously unrequested data or may be dynamic data such as CAPTCHA input data a one time password a security question etc. In various embodiments the additional data may be characterized according to the metadata or the source form data as being required or optional. In one embodiment the data provider application may be configured not to request optional data from the user. If additional data is not to be obtained from the user the data provider application proceeds to box .

If additional data is to be obtained e.g. required data is to be obtained the data provider application instead proceeds from box to box . In box the data provider application obtains the additional requested data items from the user. For example the data provider application may render a user interface with a form that instructs the user to provide the additional requested data. Where the data is CAPTCHA data such a user interface may also render CAPTCHA images or audio for the user to interpret. The user interface may be a pop up window a pop over window or other forms of user interfaces . The data provider application continues to box .

In box the data provider application provides the requested data items to the data consumer. For example the data provider application may fill out a form and submit the form via HTTP GET or POST with the network data server . Alternatively the data provider application may make a service call to the data consumer service . As yet another alternative the data provider application may make an API call to a data consumer on the client . Thereafter the portion of the data provider application ends.

Moving on to shown is a flowchart that provides one example of the operation of a portion of the metadata service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the metadata service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments. Although described as relating to the metadata service it is understood that one or more tasks described below may be performed by the metadata management application in some embodiments.

Beginning with box the metadata service obtains a request from a client for metadata associated with a data consumer. In box the metadata service provides the metadata in response to the request based at least in part on an identification of the data consumer. In box the metadata service sends the metadata to the client . Various tasks may occur between boxes and and boxes subsequent to box may be optional or may be performed in the metadata management application .

In box the metadata service obtains a user specified mapping from the client . In box the metadata service verifies the user specified mapping . For example the metadata service may compare the user specified mapping with others submitted by other users to determine agreement or disagreement. Alternatively an audit may be performed to determine whether the user specified mapping is correct.

In box the metadata service determines whether the user specified mapping has been verified. If the user specified mapping has not been verified the portion of the metadata service ends. If the user specified mapping has been verified the metadata service continues from box to box and incorporates the user specified mapping into the metadata . Thereafter the portion of the metadata service ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. It is understood that the computing environment may be similar to the computing environment and include computing devices .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the metadata service the metadata management application and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

Turning now to shown is a schematic block diagram of the client according to an embodiment of the present disclosure. The client includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . The display may also be coupled to the local interface . The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the client application the data provider application and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

Referring now to both it is understood that there may be other applications that are stored in the memories and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memories and are executable by the processors . In this respect the term executable means a program file that is in a form that can ultimately be run by the processors . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memories and run by the processors source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memories and executed by the processors or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memories to be executed by the processors etc. An executable program may be stored in any portion or component of the memories including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memories are defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memories may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processors may represent multiple processors and or multiple processor cores and the memories may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interfaces may be an appropriate network that facilitates communication between any two of the multiple processors between any of processors and any of the memories or between any two of the memories etc. The local interfaces may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processors may be of electrical or of some other available construction.

Although the metadata service the metadata management application the client application the data provider application the network data server the data consumer service and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the data provider application and the metadata service . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the metadata service the metadata management application the client application the data provider application the network data server or the data consumer service that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

