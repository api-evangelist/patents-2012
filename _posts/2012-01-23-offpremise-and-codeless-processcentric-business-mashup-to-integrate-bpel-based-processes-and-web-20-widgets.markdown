---

title: Off-premise and codeless process-centric business mashup to integrate BPEL based processes and web 2.0 widgets
abstract: Business application logic corresponding to a business is generated according to requirements of the business. The business application logic includes Web services and Widgets. The Widgets in the business application logic are mashed up to create a Widget mashup application. An adaptation relationship is established between the Web services and the Widgets in the Widget mashup application. An executable business process is generated for the business based on the business application logic and the adaptation relationship. An executable mashup Widget application is generated based on the Widget mashup application and the adaptation relationship.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003433&OS=09003433&RS=09003433
owner: International Business Machines Corporation
number: 09003433
owner_city: Armonk
owner_country: US
publication_date: 20120123
---
This application claims priority to and claims the benefit of Chinese Patent Application Serial No. 201110032142.2 titled METHOD AND APPARATUS FOR OFF PREMISE AND CODELESS PROCESS CENTRIC BUSINESS MASHUP TO INTEGRATE BPEL BASED PROCESSES AND WEB 2.0 WIDGETS which was filed in the State Intellectual Property Office of the People s Republic of China on Jan. 30 2011 and which is incorporated herein by reference in its entirety.

The present invention relates to Web service composition technology and particularly to a business mashup for integrating a Business Process Execution Language hereinafter referred to as BPEL based business process with Widgets.

In general Web service composition technology is used to compose a new Web service with multiple Web services to describe a business process. For example Web service oriented Business Process Execution Language BPEL is a Web service composition technology. Such Web service composition technology focuses on an assembly of existing Web services at an interface level.

Web service composition technology is usually on premise and not web based. That is the Web service composition design development and testing are conducted in local on premise tools. Then the composed Web service is deployed into a runtime environment. As described above the traditional Web service composition technologies provide an on premise software development platform to assemble different services and deploy the service composition into a runtime server. These service composition technologies rely on the Web services and the Service oriented Architecture SOA technology and are server centric.

A business mashup method includes generating business application logic corresponding to a business according to requirements of the business where the business application logic includes Web services and Widgets mashing up the Widgets in the business application logic to create a Widget mashup application establishing an adaptation relationship between the Web services and the Widgets in the Widget mashup application generating an executable business process for the business based on the business application logic and the adaptation relationship and generating an executable mashup Widget application based on the Widget mashup application and the adaptation relationship.

A business mashup system includes an application logic generation apparatus that generates business application logic corresponding to a business according to requirements of the business where the business application logic includes Web services and Widgets a Widget mashup apparatus that mashes up the Widgets in the business application logic to create a Widget mashup application an adaptation apparatus that establishes an adaptation relationship between the Web services and the Widgets in the Widget mashup application a business process generation apparatus that generates an executable business process for the business based on the business application logic and the adaptation relationship and a mashup Widget application generation apparatus that generates an executable mashup Widget application based on the Widget mashup application and the adaptation relationship.

A computer program product includes a computer readable storage medium including computer readable program code where the computer readable program code when executed on a computer causes the computer to generate business application logic corresponding to a business according to requirements of the business where the business application logic comprises Web services and Widgets mash up the Widgets in the business application logic to create a Widget mashup application establish an adaptation relationship between the Web services and the Widgets in the Widget mashup application generate an executable business process for the business based on the business application logic and the adaptation relationship and generate an executable mashup Widget application based on the Widget mashup application and the adaptation relationship.

It is believed that the above and other objects features and advantages of the present invention will become more apparent from the following detailed description of the preferred embodiments of the invention in conjunction with the drawings.

It should be noted that conception of the present subject matter resulted from recognition of certain limitations associated with Web service deployment. For example it was observed that after deployment the Web service composition logic cannot be customized easily according to new service composition requirements. It was further recognized that typically if there is a new requirement for Web service composition the Web service composition design development and testing needs to be re conducted and this is costly and takes a very long time. Thus it was observed that the existing Web service composition technologies cannot flexibly support dynamic change of human interaction user interfaces. In addition it was recognized that the traditional Web service composition technologies require users with necessary professional skills suitable to professional programmers and are too hard for those without professional technical skills. It was recognized in the context of these limitations that mashup one of the core technologies of Web 2.0 compared to BPEL technology provides an effective and self served approach for Web service composition. In addition it was determined that compared to the BPEL technology mashup technology is more coarse grained at the application level and focuses on the user interface presentation and information level integration which was determined to be lacking within process activities level integration.

It was further determined that certain mashup tools provide graphical user interfaces and extensible sets of components and thus may be used by non professional users without relevant knowledge. However several limitations to existing tools were discovered. For example one tool focuses on data integration via Really Simple Syndication RSS or Atom feeds but does not support user interface integration. Another tool provides a graphical user interface for composition of both data access applications and user interface components but does not support services orchestration. Another tool adopts a Pipes like approach for data mashup and allows a portal like aggregation of user interface Widgets visualizing the output of such mashup but does not support services orchestration. Another tool provides a browser plug in which interprets annotations inside web pages allowing the personalization of web pages with Widgets but the only information sources of the Mash Maker tool that can be used are the information represented by web pages that are visited through a browser that has been extended using a special plug in which greatly limits the sources that can be integrated for example RSS feeds and Atom feeds etc. cannot be used . Yet another tool provides an on premise tool to help users to develop the automated business process by drawing workflows that combine existing contents applications and services instead of writing code but the users still need to download install and use the on premise tool to develop the business process and mashups. In addition the user interface composition and services orchestration are complex and do not depend on the Widget standard technologies so this tool cannot be easily recombined or integrated with other mashup tools.

The present subject matter improves business mashup construction upgrade and maintenance by providing for integration of a Business Process Execution Language BPEL based business process with Widgets as described above and in more detail below. As such improved business mashup construction upgrade and maintenance may be obtained through the subject matter described herein.

The present subject matter provides a new business mashup technology capable of providing an off premise business process development platform to integrate BPEL based business processes and Widgets and to enable the business processes to support mashup Widget applications. In addition the present subject matter is suitable for non professional users.

As shown in in step S according to requirements of a desired business a business application logic corresponding to the business is generated. In the example firstly according to the business requirements Web service metadata and Widget metadata related to the business are acquired as components of the business application logic.

The Web service metadata may be in the form of Service oriented Architecture SOA metadata and stored in a service metadata registry. Centralized access to the service metadata registry may discover use and reuse the service metadata e.g. Web Services Description Language WSDL files XML Structure Definition XSD files etc. . The Widget is a plug in or application executable on web pages for implementing a certain function. In this example implementation the Widget complies with the iWidget specification. The available Widgets are stored in a corresponding Widget registry and these Widgets may be discovered used and reused by centralized access to the Widget registry.

When the Web service metadata are to be acquired the Web service metadata related to the desired business are populated from the service metadata registry. These Web service metadata may include an operation interface and data type such as WSDL XML structure etc. As these Web service metadata may come from different files the Web service metadata are further assembled. Then the Widget metadata related to the desired business are populated from the Widget registry. The Widget metadata may contain markup language content that is rendered and may be supported by JavaScript files for client side scripting and cascading style sheet CSS files for styling the markup language content.

Then the business application logic is composed with the acquired Web service metadata and Widget metadata where the Web Service metadata form the Web services in the business application logic and the Widget metadata form the Widgets in the business application logic. In the business application logic the Web services are used to implement the desired business and the Widgets may provide the human interaction interfaces to receive user input.

A pseudo code example in which the data format based on JavaScript Objection Notation JSON is used to express the business application logic on the reference implementation is shown below.

It can be seen that in this example business application logic the WEBSERVICE part describes the Web services while the REST and WIDGET parts describe the Widgets.

Next in step S the Widgets in the business application logic generated in step S are mashed up to create a Widget mashup application. In this example implementation the mashup may be performed using a web based mashup tool. When a mashup is performed the Widgets are discovered in the generated business application logic and are assembled based on events to generate the Widget mashup application that is a linkage is built between the Widgets in the Widget mashup application based on the events so that the Widgets may share information with each other. In this example implementation two types of events may be used a published event which means that the Widget publishes some data and a handled event which means that the Widget receives some data from other Widgets . The Widget mashup application generated in step S is also presented as a Widget.

In step S an adaptation relationship is established between the Web services and the related Widgets in the Widget mashup application. The linkage between the Web services and the Widgets has already been established at the application level from the generated business application logic. In order to enable the Web services to interact with the Widgets during the business process runtime the adaptation relationship is established between the Web services and the Widgets at the underlying layer. Specifically the respective transformation relationships on information format and transport protocol between the Web services and the related Widgets are established. The bi directional linkage between the Web services and the Widget may be established by means of adaptation thus during the business process runtime the operations and input output parameters from the Web services may be transformed and passed to the corresponding Widgets and the information from the Widgets may be transformed and passed to the corresponding Web services to initialize the Web services or resume some activities within the Web services.

In step S the business process for the desired business is generated based on the business application logic generated in step S and the adaptation relationship established in step S. In this example implementation firstly a BPEL based application is composed with the Web services in the business application logic based on the business application logic and the adaptation relationship. As described above BPEL technology may be used to perform composition of the Web services. The BPEL based application is an intermediate application format that is independent of a specific runtime environment. Then according to the actual runtime environment the BPEL based application is transformed into an executable BPEL based business process. The business process is in the form of a binary and can run in the BPEL runtime environment.

In step S an executable mashup Widget application is generated based on the Widget mashup application generated in step S and the adaptation relationship generated in step S. The executable mashup Widget application may be deployed directly into the Widget runtime environment.

The BPEL business process is showed on the left side of and each node within the BPEL business process represents a Web service. The Widgets related to the Web service in the BPEL business process are shown on the right side of . It can be seen that the bi directional linkage is built between the Web service in the BPEL business process and the related Widgets through adaptation. The operations and input output parameters by the Web service to the Widgets are transmitted to the Widget after transformations on the information format and transport protocol while the information obtained from the Widget runtime or received from the outside is also transmitted to the Web service after transformations on the information format and transport protocol.

It can be seen from the above description that the business mashup method of this example implementation provides the Off Premise business process development platform and that non professional users may develop the desired business processes without coding. The present subject matter generates the business application logic by combining the Web services and the Widgets and creates the Widget mashup application to provide the human interaction user interface which enables the BPEL business process to support the mashup user interface based human interaction so that the process centric business mashup may better reflect changes of the business requirements. In addition the business mashup method of the present subject matter establishes the bi directional linkage between the Web services and the Widgets by the adaptation of the Web services and the Widgets so that the process activities may be automated by integrating Widgets Web services and data.

After the above steps are performed in step S the runtime environments including a business process runtime environment and a Widget runtime environment are deployed. In this embodiment the business process runtime environment and the Widget runtime environment are provided automatically and deployed leveraging distributed e.g. cloud computing capabilities. For example the business process runtime environment is the specific BPEL runtime environment and the Widget runtime environment is the specific Widget runtime environment.

In step S the BPEL business process generated in step S is published into the business process runtime environment. In this example the publishing of the BPEL business process is performed to automatically provide the BPEL business process to the specific BPEL runtime environment using the distributed e.g. cloud computing capabilities.

In step S the mashup Widget application generated in step S is published into the Widget runtime environment. Also the publishing of the mashup Widget application is performed to automatically provide the mashup Widget application to the specific Widget runtime environment using the distributed e.g. cloud computing capabilities.

In step S the BPEL business process and the mashup Widget application are executed in the business process runtime environment and the Widget runtime environment respectively. During the runtime the BPEL business process and the mashup Widget application may exchange information as described above with each other via adaptation.

It can be seen from the above description that the business mashup method of this example implementation further provides the automatic deployment using the distributed e.g. cloud computing capabilities and it may automatically provide the business process runtime environment and the Widget runtime environment and deploy the BPEL business process and the mashup Widget application into the corresponding runtime environment.

Under the same inventive concept is a schematic block diagram of an example of an implementation of a business mashup system according to one embodiment of the present subject matter. The example implementation will be described below in detail in conjunction with .

As shown in the business mashup system of this example implementation includes an application logic generation apparatus that generates the business application logic corresponding to the desired business based on the requirements of the business where the business application logic includes the Web services and the Widgets. A Widget mashup apparatus mashes up the Widgets in the business application logic generated in the application logic generation apparatus to create the Widget mashup application. An adaptation apparatus establishes the adaptation relationship between the Web services in the business application logic and the Widgets in the Widget mashup application. A business process generation apparatus generates the business process for the desired business based on the business application logic and the adaptation relationship. A mashup Widget application generation apparatus generates the mashup Widget application based on the Widget mashup application and the adaptation relationship.

When the business application logic is to be generated in the application logic generation apparatus an acquisition module acquires the business related Web service metadata and Widget metadata. As described above the Web service metadata and the Widget metadata are stored in the respective registries and may be discovered used and reused by accessing the corresponding registry. In this example the acquisition module includes a service assembler that populates the related Web service metadata from the registry storing the Web service metadata and assembles the Web service metadata and includes a Widget populating unit that populates the Widget metadata from the registry storing the Widgets.

After the assembled Web service metadata and the Widget metadata are acquired by the acquisition module an application logic composer composes the business application logic with these Web service metadata and Widget metadata where the Web service metadata form the Web services and the Widget metadata form the Widgets.

For the generated business application logic in the Widget mashup apparatus a discovering module discovers the Widgets in the business application logic and an assembling module assembles these Widgets based on events to generate the Widget mashup application. When the Widgets are assembled the linkage between the Widgets is established via the events. As described above the events include the published event indicating that the Widget publishes the data and the handled event indicating that the Widget receives the data from other Widgets. Multiple Widgets in the business application logic may be mashed up into one Widget by the Widget mashup apparatus .

The linkage is established between the Web services and the Widgets at the application level from the business application logic and in order to provide the bi directional linkage between the Web services and the Widgets during the runtime the adaptation relationship is established between the Web services and the Widgets in the Widget mashup application. Thus in the adaptation apparatus an information format adaptation module establishes the transformation relationship on information format between the Web services and the related Widgets and a transport protocol adaptation module establishes the transformation relationship on transport protocol between the Web services and the related Widgets. Thus during runtime the operations and input output parameters from the Web services are transmitted to the Widget mashup application via the adaptation apparatus and the information from the Widgets are provided to the Web services via the adaptation apparatus .

In the business process generation apparatus an application generation module composes the BPEL based application with the Web services in the business application logic based on the generated business application logic and the adaptation relationship. The BPEL application is independent of a specific runtime environment so the transformation of the BPEL application may be performed according to the actual runtime environment. A transformation module transforms the BPEL application into an executable business process according to the runtime environment. In the mashup Widget application generation apparatus the mashup Widget application is generated based on the Widget mashup application and the adaptation relationship.

It should be noted that the business mashup system of this example implementation may operatively implement the business mashup method shown in .

Besides the application logic generation apparatus the Widget mashup apparatus the adaptation apparatus the business process generation apparatus and the mashup Widget application generation apparatus the system shown in further includes a runtime environment deploying apparatus that deploys the runtime environments including a business process runtime environment and a Widget runtime environment . A business process application publishing apparatus publishes the business process into the business process runtime environment and a mashup Widget application publishing apparatus publishes the mashup Widget application into the Widget runtime environment .

In the runtime environment deploying apparatus the business process runtime environment and the Widget runtime environment are provided automatically using the distributed e.g. cloud computing capabilities and the business process application publishing apparatus and the mashup Widget application publishing apparatus are invoked. In this example implementation the business process runtime environment is the specific BPEL runtime environment and the Widget runtime environment is the specific Widget runtime environment. The business process application publishing apparatus and the mashup Widget application publishing apparatus provide the business process and the mashup Widget application to the business process runtime environment and the Widget runtime environment using the distributed e.g. cloud computing capabilities respectively.

During the runtime the business process is executed in the business process runtime environment the mashup Widget application is executed in the Widget runtime environment and the business process and the mashup Widget application may exchange the information with each other via the adaptation apparatus .

It should be noted that the business mashup system of this embodiment may operatively implement the business mashup method shown in .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as JAVA Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention have been described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable storage medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable storage medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

