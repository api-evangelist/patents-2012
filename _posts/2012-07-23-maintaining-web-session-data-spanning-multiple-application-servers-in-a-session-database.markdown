---

title: Maintaining web session data spanning multiple application servers in a session database
abstract: A method, system, and computer program product for maintaining a web session data spanning multiple servers. A web session is initiated for a web-based application via a client browser. A unique session key is generated for the web session and the web-based application. The session key is stored in the client browser. A web session page-level object is initialized. Session data is then loaded into a memory-mapped cache. Requests for session data from the client browser are received and responded to via a plurality of servers. The modified session data generated during the session is stored into a session database. The web session object is then flushed at the end of the session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08738661&OS=08738661&RS=08738661
owner: Open Invention Network, LLC
number: 08738661
owner_city: Durham
owner_country: US
publication_date: 20120723
---
This application is a continuation of and claims priority from U.S. patent application Ser. No. 12 042 090 filed on Mar. 4 2008 now issued U.S. Pat. No. 8 229 969 issued on Jul. 24 2012 entitled MAINTAINING WEB SESSION DATA SPANNING MULTIPLE APPLICATION SERVERS IN A SESSION DATABASE which is incorporated by reference herein in its entirety.

Embodiments of the invention relate generally to computer servers and databases and more particularly to maintaining web session data that spans multiple servers in a session database.

Because web farms have no affinity and each page request can be routed to a different web server the user cannot keep state on a web server using session variables. Sessions do not span web servers. To do so would require sticky IP sessions or affinity to a particular web server for the user s session. With sticky IP sessions a user s Internet Protocol IP address is mapped internally to an application server instance when the initial request is served by the application server. All subsequent requests coming from the same IP address are redirected by the web server to the application server based upon the mapping stored. If users belonging to the same organization are behind a firewall to the external world they will appear to have the same IP address. This will result in all users of such an organization being directed to the same application server for all requests made rather than only one single user being redirected to the same application server. This will slow down response times and reduce the ability of the web farm to provide a load balanced and fault tolerant system. Session variables also incur about 10 KB of memory overhead in addition to the data that is stored in the session.

Methods of storing session state include but are not limited to cookies size limited to 4K query strings size limited to 2K and hidden form variables cause HTML bloat . Each of these methods and other alternatives will work with limited data but require the data to travel first to the client and then back to the server.

Embodiments of the invention are directed to methods and a system that allow web sites to store user information securely and retrieve it from various pages within a web site and a web farm. Since the information is stored in a separate server database a cluster of web servers i.e. web farm can be supported without any affinity to a particular server. This provides improved performance for enterprise web servers and stability for users and their information as they can add additional servers to meet demand. The information stored can include text pictures or documents. The information is considered temporary and is purged on a scheduled basis. The information can also be encrypted so that it can be transmitted and stored in a secure medium.

In one embodiment a method system and computer program product are provided for maintaining a web session data spanning multiple servers. In the method a web session is initiated for a web based application via a client browser. A unique session key is generated for the web session and the web based application. The session key is stored in the client browser. A web session page level object is initialized. Session data is then loaded into a memory mapped cache. Requests for session data from the client browser are received and responded to via a plurality of servers. The modified session data generated during the session is stored into a session database. The web session object is then flushed at the end of the session.

The system includes a plurality of components that perform the steps of the method when operated on a computer system. The computer program product includes a computer readable medium having computer instructions embedded therein the computer readable medium implementing the method when operated on the computer system.

The following description is provided as an enabling teaching of embodiments of the invention including the best currently known embodiment. Those skilled in the relevant art will recognize that many changes can be made to the embodiments described while still obtaining the beneficial results of the disclosed embodiments. It will also be apparent that some of the desired benefits of the embodiments described can be obtained by selecting some of the features of the disclosed embodiments without utilizing other features. Accordingly those who work in the art will recognize that many modifications and adaptations to the embodiments described are possible and may even be desirable in certain circumstances. Thus the following description is provided as illustrative of the principles of the invention and not in limitation thereof since the scope of the invention is defined by the claims.

Web Session a distinct unit of work tied to an application and a user. A unique web session is tied to the browser instance but can also span multiple browser instances if configured to do so.

Page An ASP page that renders HyperText Markup Language HTML to the client browser. Its existence is measured by the time it takes for the web server to interpret and respond with HTML typically short lived on an efficient server time measured in milliseconds .

Embodiments of the invention works for multiple platforms e.g. Java PHP ASP ASP.Net operating systems e.g. Windows UNIX and web application servers. This allows a large enterprise to share information across disparate systems without writing custom code and procuring a database for each system. It also keeps the user from having to pass information indiscreetly through a web request to another web application. Many large enterprises store highly available data on database servers such as Oracle and SQL. In addition there could be multiple web servers that support a single application. Some applications share data for a single user but exist on different servers. To solve this problem embodiments of the invention include several components that store web session data and that can retrieve the information. A centralized data repository such as the relational databases that are provided by Oracle Corporation can be used to store web session data. These components could include the following 

Each component reads and writes data into a database record for user session data. Embodiments of the invention segregate data by application name and session key. With reference to when the user initializes a session via client a unique session key is generated which is stored in a session cookie in the client s browser. This session data can be shared by multiple applications that share the same domain. The user can also override the session key by specifying a specific session key and share data across domains. When the user writes session data into the session database he has the option of encrypting secure information. Since these components exist on the web servers the user can transmit secure information from the web servers to the session database and back.

Embodiments of the invention are very generic in application. Embodiments of the invention could work for any enterprise information technology IT shop that needs session information to span multiple web servers in a farm and must work with relational database systems. Embodiments of the invention facilitate integration of application sites without requiring a specific database. Furthermore if the enterprise IT shop requires non Microsoft and Microsoft IIS integration embodiments of the invention described herein would suffice.

The Web Session object provides web applications with the ability to keep user session state in a web farm. It does so by replacing the common Active Server Pages ASP and ASP.Net session object with a page level object that persists data to a central data store accessible to the web farm servers.

The effect of this effort is to increase web server response rates reduce memory overhead remove bloated HTML and improve the overall efficiency and operation of the web farm.

The Web Session object will allow the user to put and get user information between page invocations for the currently running application. It retrieves session data on the first invocation and caches it in the page. If any variables are stored it will push that data to the central data store to be retrieved on a subsequent page. It keeps session data on the server without redundant trips to the client s browser.

This page level object lives only for the duration of the ASP page. When it is created i.e. initialized it retrieves any variables that have been stored for the current application and user. When it is destroyed i.e. flushed it stores variables and their data to the central data repository. If no items are assigned or modified on a single page there will be no need to store the data. Instead the object will only read the session data for the current page.

Each session can be tied uniquely to the browser or allow multiple instances of the browser within the same application to share their data. For example if one browser views a bill and second instance is launched to view a printed format then the information could be shared for that application. On the other hand if the user has a listing of accounts and each new instance of the browser displays different account details then the user would not want to share user data but instead create a unique subset of shared data tied to the browser instance. Therefore each successive page of account details in the new instances of the browser could open a distinct session to share.

Unique browser sessions can be achieved in all browsers by using the default implementation of the Web Session object. illustrates the attributes properties of the Web Session object. To share data across browser instances or mix content the user can use the SessionType and SessionVariable properties.

In an exemplary embodiment the Web Session object can be written as an agile component using Microsoft C and Active Template Library ATL 3.0. The Web Session object could be written to take advantage of a web application running under the Microsoft Transaction Server MTS . Although the Web Session object is not an MTS object it is both threaded aggregates the Free Threaded Marshaler FTM and supports the IObjectContext interface. FTM can be used when the object does not store state across methods. It can also be used in out of process server components. When aggregating the FTM FTM based objects must ensure that they can be called from any thread in the process. Since FTM based objects are context neutral they have no context of their own and must use the caller s context. The IObjectContext interface provides access to the current object s context. An object s context is used when working with transactions or dealing with object security. This allows each instance to join the apartment of the calling thread and removes cross apartment communications and marshalling. By doing this there is no degradation when communicating with the ASP session and application objects. It also supports synchronized access to shared attributes of the object.

The Web Session object uses Microsoft s Object Linking and Embedding Database OLE DB application programming interface API to access a database such as that provided by Oracle Corporation. It uses these methods to store session variables from which any web server can pull. For database operation the Web Session object invokes stored procedures and prepared commands to provide optimal database access and control. The Web Session object is also fully scalable e.g. up to five database servers in an exemplary embodiment by allowing multiple data stores to be configured and assigned to a session through a hash algorithm. There is no redundancy built into the object thus the data is not stored redundantly into each database. In one embodiment once a connection is established the Web Session object assumes the database is configured properly with Oracle clustered servers and or parallel processing.

The Web Session object provides secure data with the ability to encrypt it before storing the value. When storing variables the user can optionally store them as confidential. This will encrypt the data for that item and store the data encrypted using the Microsoft Cryptographic Application Programming Interface Crypto API as the default.

The Web Session object is to be used at the page level and should be created and destroyed within the ASP page. It should not be used at the session or application level. To achieve the full benefit of non stateful web applications the user should turn off Sessions in the control panel for the supported application and use this object for state data. The impact of this object on a rendering web page should be minimal. In fact the Web Session object can read and write 1000 variables in less than one second.

Using the default implementation a session ID is generated for a browser session and a HOST Named application. If the browser accepts cookies this is the easiest implementation and each instance of the browser will have a unique session assigned.

In one exemplary embodiment this object could be installed on a Windows NT Client Server or Windows 2000 platform with Microsoft Internet Information Service IIS installed. This object could be registered locally with execute privileges and run under an NT User ID that has access to the registry.

Furthermore in exemplary embodiments any web application that uses the Web Session object could be run under the Microsoft Transaction Server MTS . Optimally the web application could be run out of process with the object loaded into the MTS process. The Web Session object will only work when running under the same process as the web application as it uses the Object Context to communicate with IIS and its components. The Object Context object is used to control Active Server Pages that are managed by MTS.

In one exemplary embodiment the Web Session object would require few complimentary components to run. The Web Session object uses a database and finds the data source by referencing the connect string in the registry. The Web Session object also must have a default provider for Microsoft Crypto API. The Web Session object relies on Microsoft Data Access Components MDAC 2.1 and OLE DB. The user must also have configured the database e.g. Oracle client. Microsoft Data Access Components MDAC is a collection of components used to provide database connectivity on Windows platforms. MDAC is included by default as part of Windows XP Windows 2000 Windows 2003 and Vista operating systems.

To take advantage of quick connections and scalable database the user can specify a ConnectTimeout value in the connect string and create multiple database connection entries in the registry. There are a number of possible data sources that can be configured. Each data store is assigned through a hash algorithm of the SessionID. If a failure occurs sequential assignment will begin at the first connection enumerated in the registry. If no ConnectionTimeout or CommandTimeout is specified in the connect string then a value of five and ten seconds will be assigned respectively only for non ODBC providers .

The Initialize method creates a session. It is only necessary to invoke this method on the first page of an application. The method initializes a session by using the supplied SessionID 32 bit character or by generating a unique Session ID. illustrates the internal processing for the Initialize method. If the SessionType is stDesktopCookie or stBrowserCookie a cookie is stored or attempted . Otherwise successive commands can retrieve the generated Session ID by using the SessionID property. The Initialize method is called automatically on the first Get Put of a session item variable.

The Load method loads session data from the database into a memory mapped cache. Memory mapped data stores all of the session keys values and keeps up with updates so that is can write the updates back to the database. This data is read from the database initially and holds all values in memory for the lifetime of a single page. This is effectively a short lived cache. If the values are changed only the changed or new values are written back to the database. Initially all data is stored in the database. Subsequent pages only push changes to what is already in the database by looking at flags in the memory mapped area.

The Flush method stores session data to the database from the memory mapped cache. illustrates the internal processing for the Flush method. Flush is called automatically in the objects destructor. This method gives the programmer the control to set when the data is put back into the database. On invocation all cache is destroyed and the object is left empty.

This property encapsulates a session variable. Each item is identified by a string Key and can optionally be tagged as confidential. Items are encrypted and stored as a hexadecimal string thus doubling the storage size of the variable.

This is an enumerated property of type enumSessionType that dictates how the session will be identified to the browser. This can occur through a cookie query string or form variable.

This property assigns the SessionID when a generated Globally Unique Identifier GUID will not work. If can only be assigned before the Initialize method is called. It can be retrieved at any time. A session ID is a maximum of 32 characters and could uniquely identify a user on a web farm.

This is a property that names the cookie query string or form variable to retrieve when looking for an existing session ID. Once the session is initialized every instance created will look in a specific place i.e. the browser cookie desktop cookie query string or form variable for a session variable named using this property. Default values exist for all session types. In one embodiment the default value for Query String and Form Variable is ScSessionId.

This is a property that names the application. The application and SessionID uniquely identify a web application and user session. If not set the application will default to the web application s HOST NAME that is identified in the HTTP headers.

In high level computer programming languages an enumerated type is an abstract data type that is used to model an attribute with a limited number of options. For example in C the enum keyword is used to declare an enumeration a distinct type having a set of named constants. By default the first enumerator on the list has the value zero. The value of each successive enumerator is increased by one. The following table describes the enumerated session type and set of values used in embodiments of the invention.

The following example simply uses the session object and its default properties to pass information between two ASP pages. The session information will be stored in the database using a computed GUID and the HOST NAME for the virtual site. The SessionID will remain in a browser cookie until the browser is closed. Each browser will receive a unique SessionID. The user could use different Session Types.

The next example simply uses the session object to pass information between two ASP pages. The session information will be stored in the database using a computed Globally Unique Identifier GUID and the HOST NAME for the virtual site. The SessionID will remain in a browser cookie until the browser is closed. Both this example Scenario 2 and the next example Scenario 3 use an example of a customer service operator retrieving multiple accounts for a representative and looking at the details of each individual account and its line items.

When an application cannot dictate that all client browsers will accept cookies then the user can set the Session Type to use either the query string or a hidden form variable. The following example uses a query string. It creates two instances of the browser one for multiple account listings and the other for account details with line item charges. Thus each detailed ASP will require a unique session ID to be passed on the Uniform Resource Locator URL and the original session ID for logon information. This example represents a complex scenario that would not normally be required.

The system and method embodiments of the invention have been described as computer implemented processes. It is important to note however that those skilled in the art will appreciate that the mechanisms of the disclosed embodiments are capable of being distributed as program products in a variety of forms regardless of the particular type of physical signal bearing media utilized to carry out the distribution. Examples of signal bearing media include without limitation recordable type media such as diskettes or CD ROMs.

The corresponding structures materials acts and equivalents of all means plus function elements in any claims below are intended to include any structure material or acts for performing the function in combination with other claim elements as specifically claimed. Those skilled in the art will appreciate that many modifications to the exemplary embodiments are possible without departing from the scope of the present invention.

In addition it is possible to use some of the features of the embodiments disclosed without the corresponding use of the other features. Accordingly the foregoing description of the exemplary embodiments is provided for the purpose of illustrating the principles of the invention and not in limitation thereof since the scope of the present invention is defined solely by the appended claims.

