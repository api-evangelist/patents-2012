---

title: Cloud based system for and method of translating between disparate 3D graphics languages in client-server computing environments
abstract: A client-server computing system includes a server with a virtual display driver that marshals and transmits graphics application programming interface (API) functions to a client via a network. The virtual display driver includes a translation module that classifies graphics commands according to graphics library type and, if necessary, translates commands from one type to another such that the original command can be executed on the client. The translation module enables the server and the client to utilize different types of graphics libraries, such as the Direct3D API and the OpenGL API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08922569&OS=08922569&RS=08922569
owner: hopTo Inc.
number: 08922569
owner_city: Campbell
owner_country: US
publication_date: 20120217
---
This application is a continuation in part of U.S. patent application Ser. No. 13 341 179 filed Dec. 30 2011 the entirety of which is incorporated by reference herein.

The present disclosure relates generally to client server computing systems and more particularly to a system for and method of translating between disparate 3D graphics languages in client server computing environment.

In a client server computing system a computer application or program that is running on one computer i.e. the server may be accessible to another computer i.e. the client over a network such as over the Internet. The user interface running on the server is exposed and visible to the client. In this way the client has remote access to the server and the user of the client device can interact with the application that is running on the server.

The server application may be for example an application that processes two dimensional 2D and or three dimensional 3D graphics. In this example a 2D and or 3D graphics application may be used to render graphical objects on a computer display. Currently in a client server computing system the high level graphics representation e.g. Direct3D OpenGL is reduced to an image e.g. a bitmap image at the server. The image is then transmitted from the server to the client over the network. Once received at the client the image is rendered on the client display. Creating compressing and transmitting these image files may result in high CPU utilization i.e. computing load at the server especially when the application displays objects in motion and when there are a large number of remote users sharing the server. Further images are often large and therefore transmitting images to a large number of remote users consumes a large amount of network bandwidth.

While previous client server computing systems have addressed the aforementioned problems by directing graphics commands instead of images to clients requesting remote access to 3D graphics applications on a server such systems have generally assumed that server and client 3D graphics libraries may differ in only platform specific extensions or library version e.g. OpenGL 1.4 v. OpenGL 1.2 .

The disclosure provides a client server computing system that enables cross platform remote access to 3D graphics applications and methods of efficiently displaying graphic objects on a computer client located remotely from a computer server that is running the 3D graphics application. The client server computing system of the disclosure exhibits numerous advantages over existing systems. In various embodiments the client server computing system of the disclosure and associated methods enable a server that includes a first type of 3D graphics library such as Direct3D to provide 3D graphics application capabilities to clients that include a second type of 3D graphics library such as OpenGL . This allows clients and servers the freedom to implement an appropriate 3D graphics library for each device without sacrificing compatibility.

While client and display are illustrated as separate physical components e.g. illustrative of a common implementation of a desktop or a workstation computing system such as clients running natively on Windows Linux UNIX and Mac OS X operating system the capabilities of such separate components can also be integrated in a single device e.g. a mobile device or a tablet computer . For example the mobile device can be an iPad tablet computer on the iOS operating system Apple Inc. Cupertino Calif. or other mobile client on either the Android operating system Google Inc. Mountain View Calif. or the Windows CE operating system Microsoft Corp. Redmond Wash. . Thus as used herein the terms client or client computer should be understood to include any such implementations.

Server includes a server application a server 3D library and a virtual display driver that in accordance with the client server model of computing collectively function to enable server to provide various resources or services to client which may be located remotely from the server. In accordance with the present disclosure these resources or services pertain to computer graphics.

Client includes a client application a client 3D library and a client display driver . Collectively these elements function to enable the client and the client user to consume computer graphics resources or services provided by server .

Server application represents an application executing i.e. running on server . The functionality of server application shall be visible to and accessible by client via network . For example server application may be a computer aided design CAD application such as AutoCAD Autodesk Inc. San Rafael Calif. USA or Cadence Virtuoso Cadence Design Systems San Jose Calif. a medical clinical workflow application such as Symbia.net Siemens AG Munich Germany an interactive mapping application such as Google Earth Google Inc. or a 3D game. The functionality of server application shall be visible to and accessible by client via network . For example the functionality of server application may be accessed from client using a process herein known as application publishing which is currently supported by products such as GraphOn GO Global Microsoft Remote Desktop Services and Citrix XenApp. Such application publishing may be performed in accordance with teachings of commonly owned U.S. Pat. No. 5 831 609 filed Jun. 6 1995 entitled Method and system for dynamic translation between different graphical user interface systems which is incorporated by reference as though fully set forth herein.

Client application represents an application installed on and executing on client that emulates a user interface of server application . For example the client application may run in a browser and be implemented in a scripting language such as JavaScript a multimedia platform such as Adobe Flash or as a browser add on e.g. ActiveX control for Internet Explorer . Additionally client application may run as a standalone application. Client application may receive various input commands from the user via an input device not shown in then transmit these commands to server and update the user interface of client application in response to computer graphics commands transmitted from server back to client over network .

Server 3D library and client 3D library provide a set of common interfaces or graphics functions to server and client respectively. These components are also referred to herein as a high level graphics language or a graphics application programming interface API . Server and client utilize different types of libraries. For example server may include the Direct3D graphics API Microsoft Corp. Redmond Wash. while client may include the OpenGL graphics API Khronos Group Beaverton Oreg. . Various embodiments of this disclosure are directed towards enabling graphics commands from one library type to be realized using equivalent graphics commands from another library type. This is advantageous as it does not force server and client to adhere to a single common library rather it lets each entity implement the most appropriate library for the device.

Virtual display driver is a software code module that enables commands or functions that are called in server 3D library to be marshaled i.e. encoded and transmitted to client over network . Marshaling or marshalling is the process of transforming the memory representation of such commands to a data format suitable for transmission via network . Virtual display driver includes a translation module that prior to marshaling classifies graphics commands according to graphics library type and if necessary translates commands from one type to another such that the original command can be executed on client . For example translation module may convert a Direct3D graphics command into one or more OpenGL graphics command s the latter of which may be transferred to client for execution.

Client display driver includes a software code module that receives marshaled data from server via client application and executes the 3D library functions using client 3D library . This enables client to handle intensive graphics rendering operations such as blending or shading while enabling server to share server application with a large pool of clients. This also reduces the bandwidth requirements of network as pixel array image data e.g. in the form of Bitmap image files no longer needs to be transmitted from server to individual clients such as client as was the case in conventional client server computing systems.

At a step client connects to server via network by a suitable connection of either conventional or novel design. For example the connection may be established in accordance with a Transmission Control Protocol Internet Protocol TCP IP model as is known to one of skill.

At an optional step server and client may exchange capability information i.e. negotiate protocols which may be of use in later steps of method in which virtual display driver encodes commands from server 3D library . For example the capability information transmitted from client to server may include information about the particular APIs e.g. OpenGL windowing APIs supported by client display driver . The capability information may include the version or versions of client 3D library e.g. OpenGL 3.2 that are available on client . The capability information may also include any extensions available on client . This information may be transmitted in any format that is supported by the client server system.

At an optional step server may forward the capability information from the server component that is in direct network communication with client to virtual display driver . Virtual display driver then stores the information in a memory so that the information can be quickly accessed. This enables virtual display driver to maintain e.g. expand update a central repository of capability information of all client devices. It also enables virtual display driver to quickly lookup the capability of a particular client at resource or service request time.

At a step client initializes server application on server via network . In the example of server application being an AutoCAD application this step may include for example server carrying out various startup instructions of the AutoCAD application. These startup instructions generally include loading and initializing server 3D library . When it is initialized or at an earlier or later time server 3D library may query virtual display driver to determine its capabilities. Virtual display driver may report that it supports a graphics command that is not supported by client if virtual display driver or other software on server can convert the command that client does not support into one or more commands that client does support.

At a step server application calls or invokes the appropriate function or functions i.e. graphics commands in server 3D library in response to a request of client . For example if client issues a request to draw a 3D cube a call is made to server 3D library to satisfy the draw 3D cube request.

At a step server 3D library receives a call made by server application at step . Server 3D library then executes the function by making one or more calls to the virtual display driver . Unlike conventional client server computing systems server 3D library does not generally execute the graphics commands and produce a bitmap image.

At a step virtual display driver encodes each of the received graphics calls and transmits the information to client via network . As described in client server computing system because client utilizes a different type of library than the library from which the received graphics call originated encoding includes calling upon translation module to classify and if necessary translate the commands to an equivalent command or set of commands that can be realized by client . Ultimately the information transmitted to client may not be the received graphics calls but a translation providing equivalent functionality that can be achieved through execution by client . describes an example of a method of translating between different 3D graphics languages that may be performed by translation module as part of step .

At a step the client component that is in direct network communication with server receives the transmission from virtual display driver . The client component then forwards the transmission to client application .

At a step client application decodes the graphics commands. This step may include for example reading e.g. parsing function names and function parameters from the server transmission into a format compatible with client 3D library . One of skill will recognize that specific details of decoding by client may depend on the details of encoding employed by server at step .

At a step client application optionally performs additional preprocessing and formatting of the function and its parameters for example additional platform specific or version specific formatting and then calls or invokes client 3D library with the decoded function names and parameters that satisfy the request of client .

At a step client 3D library executes each of the graphic commands and calls client display driver with the resulting pixel image array data. The actual implementation of each graphic command that is executed on client e.g. define a surface with a given texture wrap surface around a sphere is specific to the client s computing platform. For example if client is operating on a Windows platform the execution of the graphics commands is for example a Windows OpenGL implementation. Calls to client 3D library differs from conventional client server computing systems wherein the client is making calls to a 2D library only because the bitmap image or other form of image array data has already been generated on the server and supplied to the client by the server.

At a step client display driver renders an image to display . For example this step may include setting pixel image array data in a memory of the client display driver which defines the image displayed on the computer s monitor or other form of display.

At a decision step virtual display driver determines whether a received graphics command is a Direct3D command. If the graphics command is received in a function of virtual display driver that supports only Direct3D commands the determination is implicit. Alternatively if the graphics command is received in a function of virtual display driver that supports both Direct3D commands and non Direct3D commands the determination may be made by accessing data structures that maintain attributes of specific graphics commands e.g. a lookup table or it may be made implicitly in code that is specific to the command. If the call is not a Direct3D command method proceeds to a step . However if the command is a Direct3D command method proceeds to a step .

At a decision step having determined that the received graphics call is not a Direct3D command at decision step translation module determines whether virtual display driver supports the received graphics command. This may be determined by accessing data structures that maintain attributes of specific graphics commands e.g. a lookup table or it may be determined implicitly in code that is specific to a given graphics command. If the command is supported by virtual display driver method proceeds to a step . However if the call is not supported by virtual display driver method proceeds to a step .

At a step having determined that the received graphics call is a Direct3D command at decision step translation module performs a translation of the command to an equivalent OpenGL command or set of OpenGL commands. This assumes that client 3D library is of the OpenGL type. If client 3D library is of another type the translation of the command will be to this type instead. The type of client 3D library may be available to translation module if included as part of client capability information sent to virtual display driver at step of method of .

In the case of a Direct3D to OpenGL translation translation module may first identify whether there is a single OpenGL equivalent command to the Direct3D command. In this case translation module may convert the Direct3D command to the OpenGL equivalent. For example D3dContextCreate may be converted to wglCreateContext. If there exists no single equivalent OpenGL command translation module may then identify whether the Direct3D command can be represented as a set of OpenGL equivalent commands. In this case translation module may convert the Direct3D command to a set of OpenGL equivalent commands. For example D3dContextDelete may be implemented using wglMakeCurrent to ensure the context to be deleted is not current and wglDeleteContext. If there exists no set of equivalent OpenGL commands translation module may default back to a screen scraping method in which the graphics command is converted to a bitmap image by either virtual display driver server 3D library or some other graphics library on the server.

If translation module can identify an equivalent OpenGL command or set of OpenGL commands translation module may then proceed to classify the commands according to library type specific criteria such as whether the commands are specific to a particular operating system or API version. Translation module may also perform translation based on the classification. Additional library type specific classification and translation that may be performed at this step can be found in Graphon Corporation ipDisclosure GOJO 1004 entitled SYSTEM FOR AND METHOD OF CLASSIFYING AND TRANSLATING GRAPHICS COMMANDS IN CLIENT SERVER COMPUTING SYSTEMS. 

At a step having determined that the received graphics call is supported by virtual display driver at decision step translation module may then proceed to classify the commands according to library type specific criteria as introduced and referenced herein above.

At a decision step having determined that virtual display driver does not support the received graphics command virtual display driver determines whether the operating system or some other graphics library on the server can convert the command to a command or set of commands that virtual display driver does support. This may be determined by accessing data structures that maintain attributes of specific graphics commands e.g. a lookup table or it may be determined implicitly in code that is specific to a given graphics command. If neither the operating system nor any other graphics library on the server supports the command method proceeds to a step . However if server supports the command method proceeds to a step .

At a step having determined that neither the server s operating system nor any other graphics library on the server can convert the command to commands that virtual display driver supports at decision step virtual display driver generates an error that gets returned to server 3D library . Generally virtual display driver prevents this case from occurring by properly reporting to server 3D library the capabilities that it supports. In the event however that server 3D library calls a function that virtual display driver does not support server 3D library may throw the error back to the server application and eventually to client application . The error signifies that the command is not supported by the API library or operating system. If method reaches this step both method of and method terminate that is execution of the function or functions called at step of method of cannot be achieved. The caller can be notified.

At a step having determined that a library exists on server that supports the command at decision step the command is then forwarded to said library of server .

At a step said graphics library of server reduces the command to a command or set of commands that is supported by virtual display driver . For example if server is a Windows computer and the graphics command is DrvBitBlt and a parameter is passed to DrvBitBlt that virtual display driver does not support virtual display driver s implementation of DrvBitBlt may call the server operating system s EngBitBlt function. EngBitBlt may then break the complex command down into one or more simpler DrvBitBlt commands that virtual display driver does support.

At a step the operating system of server then calls virtual display driver with the graphic command s that virtual display driver supports. In summary if method reaches this step virtual display driver has utilized the operating system or another graphics library on server to perform a graphics command translation prior to virtual display driver transmitting the command to client .

Various embodiments of the present disclosure allow for the functionality of this disclosure to be performed by an intermediary device such as a cloud server not shown which may be associated with the server and client or reside elsewhere in the network e.g. in the cloud . For example while client is interacting with server some of the methods described herein may be offloaded to the cloud server to be performed. Additionally the cloud server may be used to facilitate interaction between individual or multiple clients and server by performing protocol and or graphics conversions as described herein.

