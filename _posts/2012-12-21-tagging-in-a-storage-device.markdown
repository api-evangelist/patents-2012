---

title: Tagging in a storage device
abstract: In an embodiment, a command issued by an entity may be acquired by a controller contained in a storage device. The command may be issued by the entity to access a block in the storage device. The entity may be associated with a tag that may identify the entity. The tag may be associated with the block. Information about the association between the tag and the block may be stored in the storage device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09513803&OS=09513803&RS=09513803
owner: Intel Corporation
number: 09513803
owner_city: Santa Clara
owner_country: US
publication_date: 20121221
---
A computing device may use one or more storage systems to store information. The information may include for example data and or executable instructions. The storage systems may include a primary storage and a secondary storage. A primary storage may be a storage that is directly accessible to a processor that may be contained in the computing device. The processor may access the primary storage via a memory bus that may contain provisions for transferring information between the processor and the primary storage. A secondary storage may be a storage that may not be directly accessible to the processor. Here information may be transferred between the processor and the secondary storage via one or more input output I O channels that may be part of an I O bus.

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also the following detailed description does not limit the invention.

A computing device may include a non volatile storage device that the computing device may use to store information e.g. data that is to survive after power is lost to the computing device. For example a computing device such as a smart phone tablet or ultrabook may contain a processor and a solid state disk SSD . The SSD may provide a non volatile storage for storing information used by the computing device. The information may include for example data and or applications that may be used by the computing device. By storing the information in the SSD the information may be persisted such that the information may be retained after power is lost to the computing device. The processor may retrieve the persisted information from the SSD after power is restored to the computing device.

A non volatile storage device such as an SSD may store information in physical blocks that may be contained in the non volatile storage device. A processor associated with a computing device may access the information using a logical block address LBA . The LBA may be an address of a logical block. The LBA may map to a physical block address PBA contained in the non volatile storage device. The PBA may be an address that may be associated with a physical block that may be contained in the non volatile storage device. A physical block in a non volatile storage device may also be referred to as a physical page in the non volatile storage device.

The non volatile storage device may maintain a logical to physical L2P table which the non volatile storage device may use to translate LBAs to PBAs. The L2P table may be part of a context that may be maintained by the non volatile storage device.

For example suppose a computing device includes a processor and a non volatile storage device. The processor may issue a command to read information in the non volatile storage device. The processor may specify the location of the information in the command using an LBA. The non volatile storage device may acquire e.g. receive read the command and identify the physical location of the information by translating the LBA to a PBA using an L2P table that may be managed by the non volatile storage device. Suppose the PBA points to a particular physical block contained in a non volatile store in the non volatile storage device. The non volatile storage device may read information stored in the physical block and return the information to the processor.

It should be noted that illustrates an example embodiment of computing device . Other embodiments of computing device may include more components or fewer components than the components illustrated in . The components may be arranged differently than as illustrated in .

For example in an embodiment of computing device secondary storage may be contained at a remote site that provides cloud storage. The site may be accessible to computing device via a communications network such as for example the Internet. A communication interface may be used to interface the computing device with the communications network.

Also it should be noted that functions performed by various components contained in other embodiments of computing device may be distributed among the components differently than as described herein.

Computing device may include an input output I O bus that may be used to communicate information between components in computing device . The information may include for example control signals and or data. Examples of I O buses that may be used to implement I O bus may include serial AT attachment SATA peripheral component interconnect PCI PCI express PCI e universal serial bus USB small computer system interface SCSI serial attached SCSI SAS or some other I O bus.

Computing device may include a memory bus that may enable information which may be stored in primary storage to be transferred between processing logic and primary storage . The information may include computer executable instructions and or data that may be executed manipulated and or otherwise processed by processing logic .

Processing logic may include logic for interpreting executing and or otherwise processing information. The information may be stored in for example primary storage and or secondary storage . In addition the information may be acquired by one or more input devices and or communication interfaces .

Processing logic may include a variety of heterogeneous hardware. For example the hardware may include some combination of one or more processors microprocessors field programmable gate arrays FPGAs application specific instruction set processors ASIPs application specific integrated circuits ASICs complex programmable logic devices CPLDs graphics processing units GPUs and or other types of processing logic that may for example interpret execute manipulate and or otherwise process the information. Processing logic may comprise a single core or multiple cores. An example of a processor that may be used to implement processing logic is the Intel Xeon processor available from Intel Corporation Santa Clara Calif.

Input devices may include one or more input devices that may be used to input information into computing device . The input devices may include for example a keyboard computer mouse microphone camera trackball gyroscopic device e.g. gyroscope mini mouse touch pad stylus graphics tablet touch screen joystick isotonic or isometric pointing stick accelerometer palm mouse foot mouse puck eyeball controlled device finger mouse light pen light gun neural device eye tracking device steering wheel yoke jog dial space ball directional pad dance pad soap mouse haptic device tactile device neural device multipoint input device discrete pointing device and or some other input device. The information may include spatial e.g. continuous multi dimensional data that may be input into computing device using for example a pointing device such as a computer mouse. The information may also include other forms of data such as for example text that may be input using a keyboard.

Output devices may include one or more output devices that may output information from computing device . The output devices may include for example a cathode ray tube CRT plasma display device light emitting diode LED display device liquid crystal display LCD device vacuum florescent display VFD device surface conduction electron emitter display SED device field emission display FED device haptic device tactile device printer speaker video projector volumetric display device plotter touch screen and or some other output device. Output devices may be directed by for example processing logic to output the information from computing device . Outputting the information may include presenting e.g. displaying printing the information on an output device . The information may include for example text graphical user interface GUI elements e.g. windows widgets and or other GUI elements audio e.g. music sounds and or other information that may be outputted by output devices .

Communication interfaces may include logic for interfacing computing device with for example one or more communications networks and enable computing device to communicate with one or more entities e.g. nodes coupled to the communications networks. The communications networks may include for example the Internet wide area networks WANs local area networks LANs 3G and or 4G networks. Communication interfaces may include one or more transceiver like mechanisms that may enable computing device to communicate with entities coupled to the communications networks. Examples of communication interfaces may include a built in network adapter network interface card NIC Personal Computer Memory Card International Association PCMCIA network card card bus network adapter wireless network adapter Universal Serial Bus USB network adapter modem and or other device suitable for interfacing computing device to a communications network.

Primary storage and secondary storage may include one or memory devices. A memory device may support for example serial or random access to information contained in the memory device. A memory device that supports serial access to information stored in the memory device may be referred to as a serial memory device. A memory device that supports random access to information stored in the memory device may be referred to as a random access memory RAM device.

A memory device may be for example volatile or non volatile. A volatile memory device may be a memory device that may lose information stored in the device when power is removed from the device. A non volatile memory device may be a memory device that may retain information stored in the device when power is removed from the device. Examples of memory devices may include dynamic RAM DRAM devices flash memory devices static RAM SRAM devices zero capacitor RAM ZRAM devices twin transistor RAM TTRAM devices read only memory ROM devices ferroelectric transistor RAM FeTRAM devices magneto resistive RAM MRAM devices phase change memory PCM devices PCM and switch PCMS devices nanowire based devices resistive RAM devices RRAM serial electrically erasable programmable ROM SEEPROM devices serial flash devices and or other types of memory devices.

Primary storage may be accessible to processing logic via memory bus . Primary storage may include a non transitory tangible computer readable medium that may store information for processing logic . The information may include for example computer executable instructions and or data that may implement operating system OS and application APP . The computer executable instructions may be executed interpreted and or otherwise processed by processing logic . The computer executable instructions and or data may include computer executable instructions and or data that may implement one or more embodiments of the invention.

Primary storage may be implemented using one or more memory devices that may store information for processing logic . The memory devices may include volatile and or non volatile memory devices.

OS may be a conventional operating system that may implement various conventional operating system functions. The functions may include for example 1 scheduling one or more portions of APP to run on e.g. be executed by processing logic 2 managing primary storage and or 3 controlling access to various components in computing device e.g. input devices output devices communication interfaces secondary storage and information received and or transmitted by these components.

Examples of operating systems that may be used to implement OS may include the Linux operating system Microsoft Windows operating system the Symbian operating system Mac OS operating system and the Android operating system. A distribution of the Linux operating system that may be used is Red Hat Linux available from Red Hat Corporation Raleigh N.C. Versions of the Microsoft Windows operating system that may be used include Microsoft Windows Mobile Microsoft Windows 8 Microsoft Windows 7 Microsoft Windows Vista and Microsoft Windows XP operating systems available from Microsoft Inc. Redmond Wash. The Symbian operating system is available from Accenture PLC Dublin Ireland. The Mac OS operating system is available from Apple Inc. Cupertino Calif. The Android operating system is available from Google Inc. Menlo Park Calif.

OS may include one or more drivers . The drivers may provide an interface between OS and or APP and one or more devices that may be associated with components in computing device . These components may include for example input devices output devices communication interfaces and or secondary storage .

For example a driver may provide an interface between OS and or APP and storage device . The driver may contain provisions that enable the OS and or APP to communicate with the storage device . Communication here may include for example writing information to storage device reading information from storage device acquiring a status of storage device and so on.

APP may be a software application that may execute under control of OS on computing device . APP and or OS may contain provisions for processing transactions that may involve writing and or reading information in a storage device in secondary storage . These provisions may be implemented using data and or computer executable instructions contained in APP and or OS .

Secondary storage may include a storage device . The storage device may be accessible to processing logic via I O bus . The storage device may store information e.g. data computer executable instructions . The information may be executed interpreted manipulated and or otherwise processed by processing logic . The information may include computer executable instructions and or data that may implement one or more embodiments of the invention.

Storage device may include volatile or non volatile storage for storing the information. Examples of devices that may be used to implement storage device may include one or more magnetic disk drives optical disk drives RAM drives flash drives SSDs hybrid drives and or other storage devices. The information may be stored on one or more non transitory tangible computer readable media contained in the storage devices. Examples of non transitory tangible computer readable media that may be contained in the storage devices may include magnetic discs optical discs volatile memory devices and or non volatile memory devices.

The device processing logic may include processing logic that may process information contained in local storage . The processing logic may include some combination of one or more processors microprocessors FPGAs ASIPs ASICs CPLDs and or other types of processing logic that may for example interpret execute manipulate and or otherwise process the information. For example the local storage may store computer executable instructions that may be executed by device processing logic to write and or read information in non volatile storage and or perform other functions and or operations that may be associated with storage device .

Local storage may include a volatile and or non volatile storage that may be used to store the information that may be processed by device processing logic . The information may include data and or computer executable instructions that may be associated with an operation of storage device .

Storage device may support logical blocks which may be used to store information in storage device . A logical block may be associated with an LBA that may be used to identify the logical block. Information stored in a logical block may be accessed e.g. read written by processing logic using an LBA associated with the logical block.

A logical block may be associated with a physical block that may be contained in non volatile storage . The physical block may be associated with a PBA that may be used to identify the physical block. The physical block may physically store information associated with the logical block in the non volatile storage .

Local storage may include context which may contain context information that may be associated with storage device . The context information may include for example an L2P table that may contain information that may be used by device processing logic to translate an LBA to a PBA.

For example suppose processing logic issues a command to read information in a logical block in storage device that is associated with LBA . Further suppose that an L2P table in context contains an entry that indicates that LBA corresponds to physical block in non volatile storage . Storage device may acquire the command and process it. Processing may include accessing the entry in the L2P table to identify that LBA corresponds to physical block . Thus in response to the command issued by processing logic storage device may read the information stored at physical block in storage device and return the read information to processing logic .

A tag may be associated with one or more blocks e.g. logical blocks physical blocks that may be contained in a storage device such as storage device . The tag may include for example an identifier ID and other information e.g. access privileges . As will be described further below the ID may be used to determine whether an entity e.g. a user an application is associated with the one or more logical blocks. As will also be described further below other information in the tag may be used to for example 1 identify rights e.g. access rights that the entity may have with respect to the one or more logical blocks 2 specify an encryption technique scheme for information contained in the one or more logical blocks 3 associate keywords with information contained in the one or more logical blocks 4 specify a security level associated with information contained in the one or more logical blocks and or 5 describe a content of information contained in the one or more logical blocks.

Index may for example contain information that may associate one or more tags with one or more blocks in storage device . Index may be organized as a data structure e.g. a table that may contain one or more entries that may be used to establish associations between tags and blocks.

For example suppose storage device includes a first set of logical blocks and a second set of logical blocks. Further suppose a first tag is associated with the first set of logical blocks and a second tag is associated with the second set of logical blocks. Index may be organized as a data structure having a first entry that may associate the first tag with the first set of logical blocks and a second entry that may associate the second tag with the second set of logical blocks.

The non volatile storage may provide storage for information stored on storage device . The storage may be non volatile. The information may be provided for example by processing logic .

Non volatile storage may contain one or more non volatile memory devices that may be used to store the information. Examples of devices that may be used to implement a non volatile memory device may include flash memory devices PCM devices PCMS devices NAND memory devices or other non volatile storage devices.

A non volatile memory device may store the information in physical blocks contained in the non volatile memory device . A physical block may be a minimum sized unit that may be written in the non volatile memory device . A physical block may be fixed in size e.g. 2048 bytes . Physical blocks may be organized into erase blocks EBs where an EB may include one or more physical blocks.

An EB may be a type of block that is associated with a group of one or more physical blocks that may be erased as a group. For example suppose non volatile memory device includes sixty four physical blocks which are divided into eight EBs where each EB includes eight different physical blocks. Erasing an EB may cause all eight physical blocks associated with the EB to be erased.

It should be noted that the layout illustrated in is an example layout of an embodiment of non volatile memory device . Other embodiments of non volatile memory device may include other layouts. For example other embodiments of non volatile memory device may include more dies EBs and or physical blocks or fewer EBs and or physical blocks than what is illustrated in .

As noted above a tag may be associated with one or more blocks contained in a storage device. The tag may include for example an ID and other information. The ID may identify an entity e.g. an application a user associated with the one or more blocks. The other information may include information that may describe a relationship between the entity and the one or more blocks. For example the other information may include information about access rights that the entity has to the one or more blocks. The other information may include information that may be related to the contents of the one or more blocks. For example the other information may include key words that may be associated with a data that may be stored in the one or more blocks.

For example suppose that tag is associated with one or more blocks in storage device . Line contains a name field that is set to the value owner and a content field that is set to the value JDOE . Here the name field indicates that the content field contains an owner associated with the blocks in storage device . In this example the owner is identified as JDOE .

Line contains a name field that is set to description and a content field that is set to YEARLY SALES . The name field may indicate that the content field contains a description of information that may be stored in the blocks in storage device . In this example the content field contains the value YEARLY SALES . Thus the information stored in the blocks may be related to for example yearly sales of an organization.

Line contains a name field that is set to keywords and a content field that is set to FINANCE ACCOUNTING SPREADSHEET . Here the name field may indicate that the content field contains keywords related to the information stored in the blocks in storage device . The keywords may be used for example when searching for information contained in the blocks.

Line contains a name field that is set to SecLevel and a content field that is set to RESTRICTED . Here the name field may indicate that the content field contains a security level associated with the information stored in the blocks in storage device . The value of the content field i.e. RESTRICTED may indicate that the information may be accessed for example only by entities e.g. users applications that have privileges that enable them to access information at that security level.

Block illustrates another example embodiment of tag that includes Username and Rights information. In block line illustrates an example format that may be used in this example embodiment. The format includes Username and Rights information. The Username information may be contained in the ID field of the tag and the Rights information may be contained in the other field of the tag.

The Username information may include an ID that may be associated with a user. The Rights information may include privileges e.g. access privileges that may be for example afforded to the user. The privileges may include for example permission to read write modify and or delete information contained in one or more blocks associated with the tag .

Lines and illustrate examples of tags that utilize the format illustrated at line . Specifically at line a first tag may indicate that a user assigned the username SYSTEM may be granted privileges that may include read and write access indicated by R and W respectively to blocks associated with the first tag . At line a second tag may indicate that a user assigned the user name JDOE may be granted privileges that may include read write modify and delete indicated by R W M and D respectively to blocks associated with the second tag .

A tag may be stored in one or more blocks that may be associated with tag . The tag may be read when processing requests to access the one or more blocks. The tag may be used for example to determine whether the requests should be allowed or denied.

For example suppose a tag and information e.g. data is stored in a physical block associated with a logical block in storage device . Further suppose APP issues a request to read the information stored in the logical block. Controller may receive the request and process it. Processing may include determining whether APP has privileges to read the logical block.

Specifically controller may read the tag from the physical block associated with the logical block. Controller may compare an ID associated with APP to an ID contained in the tag e.g. in the ID field . Controller may determine whether the ID associated with the APP matches the ID contained in the tag .

Suppose the IDs match. Controller may determine whether the request should be allowed based on the nature of the request and or information contained in the tag . Suppose that the tag indicates in its other field that entities associated with the ID may read the information stored in the logical block. The controller may determine that the request is to be allowed based on this determination. Allowing the request may include the controller reading the information stored in the block. The read information may be returned to the APP .

It should be noted that the embodiments illustrated in blocks and are example embodiments of tag and that other embodiments of tag may include more information or less information than illustrated in blocks and . For example other embodiments of tag may include information about encryption methods that may be used to encrypt information that may be contained in blocks associated with the tag and or other information such as whether a user particular user may execute information contained in the blocks.

An entity such as an application may issue a command to access e.g. read write a block in a storage device. The command may be acquired for example by a controller contained in the storage device. The entity may be associated with a tag and information may be stored in the storage device that associates the tag with the block. The information may be used to associate the entity with the block.

At block the request may be acquired. For example the request may be issued by an application that may be executing in a computing device under control of an operating system. The operating system may acquire the command from the application and transfer the command to a driver associated with the storage device. The driver may acquire the command from the operating system. The driver may forward the command to the storage device which may acquire the command at a controller contained in the storage device.

At block a check may be performed to determine whether the entity is associated with a tag. The tag may include for example an ID and other information. The ID may identify the entity and the other information may include information related to the data to be stored in the block.

For example the application may be associated with the tag. The tag may be forwarded to the storage which may acquire the tag. The controller in the storage device may acquire the tag and determine that the application is associated with a tag.

If it is determined that the entity is not associated with a tag at block a default tag may be associated with the block. The default tag may be a predefined tag that may contain for example a default ID and information related to the default ID e.g. default access privileges . If at block it is determined that the entity is associated with a tag at block the tag associated with the entity may be associated with the block.

Information that associates the tag with the block may be maintained by e.g. stored in the storage device. For example continuing the above example the controller may associate the tag with the block using an index such as index . Associating the tag with the block may include for example creating an entry in the index that associates the tag and with the block. The index may be stored in the storage device. In another example information that associates the tag with the block may be stored in the block.

Information that associates the tag with the block may contain for example tag information and an address that may identify the block. The address may include for example a physical block address or a logical block address that may be associated with the block.

At block the data is stored in the block. The data may be stored in the block by writing the data to the block.

For example referring to suppose APP generates a request to write data to a logical block in storage device . Further suppose that the logical bock corresponds to physical block and that APP is associated with a tag . APP may issue the request to OS . OS may receive the request and transfer the request to driver . Driver may receive the request and process it. Processing may include for example transferring the tag and data to storage device and directing storage device to write the data in the storage device at a location specified by the logical block.

Storage device may receive the request tag and data from the driver . Device processing logic may identify a physical block in non volatile storage that corresponds to the logical block. Suppose that device processing logic identifies that physical block corresponds to the logical block. Device processing logic may write the data to physical block . Device processing logic may update index to associate the tag with physical block and or the logical block.

Note that various processing may be performed based on information contained in a tag. For example in the above example tag may include an indication that the data is to be written to the storage device in an encrypted form. Here the tag may specify an encryption technique that may be used to encrypt the data. Device controller may encrypt the data according to the technique and write the encrypted data to physical block .

In another example information contained in a tag may be used to establish access rights associated with a logical block that is written. For example suppose in the above example that the logical block is being written for the first time after being erased. The tag may contain access rights information that may identify one or more entities that may access the block after the block is written. Moreover the tag may include information that may indicate a type of access e.g. read write delete that may be permitted.

At block a check is performed to determine whether the tag associated with the entity matches a tag associated with the block in the storage device. If the tags do not match at block the mismatch is handled. The mismatch may be handled for example by indicating an error condition in a response to the request e.g. error status error code . If at block it is determined that the tags match at block the contents of the block in the storage device is read and returned.

For example referring to suppose that APP issues a command to read data from a logical block in storage device . Further suppose that the logical block corresponds to physical block . OS may receive the request and forward the request to driver . Driver may receive the request from OS and determine whether APP is associated with a tag .

Suppose that driver determines that APP is associated with a tag . Driver may transfer the tag to storage device . In addition driver may direct storage device to read the contents of the logical block. Device processing logic may receive the tag and access index to determine whether the tag matches tag information about the logical block.

Suppose that device processing logic determines that the tags match. Device processing logic may determine that physical block is associated with the logical block. Device processing logic may read the contents of physical block and return the contents over bus to driver . Driver may transfer the contents to APP via OS .

A tag may be used to identify one or more blocks that may be erased in a storage device. illustrates a flow chart of example acts that may be used to erase one or more blocks in a storage device where the one or more blocks may be identified based on a tag associated with an entity.

Referring to at block an entity may issue a request to erase one or more blocks in the storage device. For example the entity may be an application such as APP and the blocks may be contained in storage device . APP may issue a command to erase the blocks in the storage device .

At block the request is acquired. For example APP may issue the command to OS . The operating system may receive the command from APP and forward the command to driver . The driver may receive the command from OS .

At block a check is performed to determine whether the request indicates to erase blocks in the storage device that are associated with a tag that matches a tag associated with the entity. Continuing the above example after receiving the command from the OS the driver may for example process the request. Processing may include determining whether the command indicates that blocks to be erased are blocks that are associated with a tag that matches a tag associated with the entity.

If at block it is determined that the request indicates to erase blocks in the storage device that are associated with a tag that matches a tag associated with the entity at block blocks in storage that are associated with a tag that matches the tag associated with the entity are erased. Otherwise at block all blocks in the storage may be erased. Here all blocks in the storage may be erased may include for example erasing blocks in the storage device regardless of whether they are associated with tags that match the tag associated with the entity.

For example referring to suppose that APP is associated with a tag . Further assume APP issues a command to erase all logical blocks in storage device that are associated with the tag . OS may receive the command from APP and forward the command to driver . Driver may receive the command from OS and determine that the command indicates that all logical blocks in storage device that are associated with the tag are to be erased.

Driver may transfer the tag to storage device . In addition driver may direct storage device to erase all blocks associated with the tag . Device processing logic may receive the tag and process the request. Processing may include for example 1 searching index to identify blocks in non volatile storage that are associated with the tag and 2 erasing the identified blocks.

The foregoing description of embodiments is intended to provide illustration and description but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. For example while a series of acts has been described above with respect to the order of the acts may be modified in other implementations. Further non dependent acts may be performed in parallel.

Also the term user as used herein is intended to be broadly interpreted to include for example a computing device e.g. fixed computing device mobile computing device or a user of a computing device unless otherwise stated.

It will be apparent that one or more embodiments described herein may be implemented in many different forms of software and or hardware. Software code and or specialized hardware used to implement embodiments described herein is not limiting of the invention. Thus the operation and behavior of embodiments were described without reference to the specific software code and or specialized hardware it being understood that one would be able to design software and or hardware to implement the embodiments based on the description herein.

Further certain features of the invention may be implemented using computer executable instructions that may be executed by processing logic such as processing logic and or device processing logic . The computer executable instructions may be stored on one or more non transitory tangible computer readable storage media. The media may be volatile or non volatile and may include for example DRAM SRAM flash memories removable disks non removable disks and so on.

No element act or instruction used herein should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

It is intended that the invention not be limited to the particular embodiments disclosed above but that the invention will include any and all particular embodiments and equivalents falling within the scope of the following appended claims.

