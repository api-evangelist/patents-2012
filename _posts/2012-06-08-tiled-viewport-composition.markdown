---

title: Tiled viewport composition
abstract: A system that buffers an application image reduces bandwidth requirements for accessing memory. The application image may be logically separated into tiles. A viewport may identify a visible portion of the application image, where the visible portion is smaller than the application image. The tiles overlapped by the viewport may be buffered in a front buffer and a back buffer. The tiles not overlapped by the viewport may be buffered in the back buffer but not in the front buffer. A composition manager, with knowledge of the viewport and at least two noncontiguous tile buffers in the front buffer, may extract the visible portion of the application image directly from the noncontiguous tile buffers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09251555&OS=09251555&RS=09251555
owner: 2236008 Ontario, Inc.
number: 09251555
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20120608
---
Graphical user interfaces GUI Picture in Picture PiP and other types of graphical images may be composited from multiple independently rendered images. For example a GUI may contain a background image and one or more rendered graphic layers on top of the background image. The graphic layers may comprise applications task bars or other type of graphic elements. Each of the graphic layers may be rendered in an application buffer independently of the other graphic layers by individual software applications. The graphic layers may be composited together into a single composite image in a display buffer which may be presented on a display device transmitted over a network or otherwise processed. The application buffer may represent an image that is larger than the corresponding graphic layer composited into the single composite image.

A system for buffering an application image may include a composition manager and a memory comprising a front buffer and a back buffer. The application image may be logically divided or separated into tiles. Each of the tiles may identify a corresponding area of the application image. The composition manager may determine which of the tiles are overlapped by a viewport. The viewport may identify a visible portion of the application image. The visible portion may be smaller than the application image. For example the visible portion may be a portion of a map that is displayed on a display device in a navigation system.

In some systems the composition manager or an application that renders the application image may double buffer or more generally multiple buffer the tiles that the viewport overlaps. The composition manager or the application may not double buffer or multiple buffer the tiles that the viewport does not overlap. Reducing the amount of memory that is multiple buffered may reduce bandwidth requirements for accessing the memory.

Double buffering may prevent visual tearing artifacts caused when one process writes to a buffer while another process reads from the same buffer. To decrease or avoid the possibility of causing such visual defects the application may render the application image in the back buffer while another process such as the composition manager reads the application image from the front buffer. More generally a buffer that the system writes to in order to construct a frame of the application image may be the back buffer. A buffer that the system reads the completed frame from may be the front buffer. In examples in which multiple buffering is used the system may include and use multiple back buffers.

In response to a vertical synchronization pulse or some other event the front buffer and the back buffer may be switched such that the back buffer becomes the front buffer and the front buffer becomes the back buffer. The buffer switch may also be referred to as a buffer flip. After the buffer flip the back buffer may include the contents of frame n and the front buffer may include the contents of frame n 1. If the entire contents of the front buffer frame n 1 is copied to the back buffer frame n then the back buffer may have the most recent contents frame n 1 and the application may begin rendering a new frame n 2 in the back buffer. The process of rendering flipping and displaying may be repeated.

However in the system for buffering the application image copying the entire contents of the application image from the front buffer to the back buffer may be avoided when the buffer flip occurs. Instead the composition manager and or the application may skip double buffering or multiple buffering of the tiles that the viewport does not overlap. In particular the composition manager and or the application may buffer the tiles that are overlapped by the viewport in both the front and back buffers and buffer the tiles that are not overlapped by the viewport in the back buffer but not in the front buffer.

Each of the tiles may be buffered in a corresponding tile buffer. The tile buffers may be noncontiguously arranged in memory. Two buffers may be noncontiguous if the buffers are not adjacent to each other in the memory address space of the memory that the buffers are in.

In some systems the composition manager may copy a buffered visible portion of the application image directly from the noncontiguous tile buffers based on the composition manager having knowledge of the viewport and the tile buffers. The application does not need to create an intermediate buffer that contains the buffered visible portion of application image in contiguous memory so that the composition manager may copy the visible portion from the contiguous memory. Avoiding the creation of the intermediate buffer reduces the bandwidth requirements for accessing memory. The composition manager may generate a composite image from the visible portion of the application image and one or more additional application images.

The application may render the application image . The application image may include a window generated by a windows based operating system such an operating system for a mobile electronic device a desktop computer or a server. Examples of the windows based operating system may include MICROSOFT WINDOWS which is a registered trademark of Microsoft Corporation of Redmond Wash. LINUX which is a registered trademark of Linus Torvalds of Finland and ANDROID which is a trademark of Google Inc. of Mountain View Calif. Alternatively or in addition the application image may include a Graphical User Interface GUI a Picture in Picture PiP a task bar a background picture a frame in a sequence of frames that may be part of a video or any other type of digital image. Examples of the application may include a word processing program a mail program a web browser a mobile application or other types of software program or hardware component that may render the application image .

The application buffers may be one or more areas of memory that represent the application image and or portions thereof. The memory may include contiguous and or noncontiguous areas of memory.

The display buffer may comprise an area of memory that represents a composite image assembled from individual images generated by one or more applications such as the application illustrated in . The composite image may be presented on a display device transmitted over a network or locally or remotely processed.

The composition manager may composite or direct the composition of the individual images into the composite image . The individual images may include all or a portion of application images. Examples of the composition manager include a hardware compositor a window manager or any other component that composites individual images into the composite image .

During operation of the tiled viewport composition system the composition manager may render the composite image from a visible portion of the application image identified by a viewport . The visible portion identified by the viewport may be smaller than the entire application image . The composition manager may render the composite image from the visible portion of the application image and from one or more additional images.

The application may move the viewport around the application image as the visible portion of the application image changes over time. In one example the application image may be a map image and the viewport identifies the portion of the map image that is to be displayed in a navigation system. As the location of the navigation system changes the portion of the map image displayed in the navigation system may also change. In a second example the application image may be an image of a level in a video game and the viewport may identify the portion of an image of the level that is to be displayed on a screen. As a game character moves around the level the portion of the image of the level displayed on the screen changes. In a third example a webpage viewer may render more content than may be shown on the display. The composite image may update more quickly or produce a visibly smoother transition appearance when the application uses the viewport to update the visible portion of the application image .

The application may logically divide or partition the application image into tiles . Each of the tiles may identify a corresponding area of the application image . The tiles may be uniform in size and shape throughout the application image . Alternatively the size and the shape of the tiles may vary throughout the application image . The size and shape of the tiles may be different in different examples.

The tiles may be represented in corresponding tile buffers . For example the tiles that are individually designated T T in may be represented in the tile buffers that are individually designated A A. The tile buffers may be included in the application buffers .

The composition manager may determine which of the tiles are overlapped by the viewport . Each of the tiles that are overlapped or intersected by the viewport may contain at least part of the visible portion of the application image . In contrast the tiles that are not overlapped by the viewport may not contain any visible part of the application image .

The composition manager may double buffer the tiles that are overlapped by the viewport but not the remaining tiles . A front buffer may include the tile buffers A and A representing the tiles T and T overlapped by the viewport . Accordingly the tile buffers A and A in the front buffer include a buffered visible portion of the application image . Conversely a back buffer may include the tile buffers A and A representing the tiles T and T not overlapped by the viewport . In addition the back buffer may include the tile buffers B and B that correspond to the tile buffers A and A that are in the front buffer and that represent the tiles overlapped by the viewport .

When generating the composite image the composition manager may extract the buffered visible portion of the application image from the tile buffers A and A that are in the front buffer . The buffered visible portion may be of frame n of the application image . The application may render frame n 1 of the application image in the back buffer by modifying the tile buffers A A B and B that are in the back buffer .

When a buffer flip occurs the composition manager may copy the contents of a subset of the tile buffers that are in the back buffer to the front buffer . The subset of the tile buffers may be the tile buffers B and B that correspond to the tile buffers A and A that are in the front buffer . The composition manager may skip copying tile buffers A and A representing the tiles T and T not overlapped by the viewport to the front buffer .

Alternatively or in addition to copying the contents of the subset of the tile buffers from the back buffer to the front buffer when the buffer flip occurs the composition manager may change an association between the tile buffers and the front and back buffers and . The composition manager may track in a data structure which of the tile buffers are associated with the front buffer and which of the tile buffers are associated with the back buffer . The associations between the tile buffers and the front and back buffers and indicate which of the tile buffers are included in each of the front and back buffers and . When the buffer flip occurs the composition manager may disassociate the subset of the tile buffers B and B from the back buffer and associate the subset of the tile buffers B and B with the front buffer . Correspondingly the composition manager may change the tile buffers A and A that were originally associated with the front buffer to be associated with the back buffer . In other words the composition manager in response to the buffer flip may swap a first set of the tile buffers associated with the front buffer with a second set of the tile buffers associated with the back buffer where the tile buffers that are swapped represent the tiles that the viewport overlaps but not the tiles that the viewport does not overlap.

When the composition manager swaps the tile buffers that are associated with the front buffer with the corresponding tile buffers that are associated with the back buffer then the tile buffers swapped into the back buffer may represent an older frame such as frame n. The tile buffers swapped into the front buffer may represent frame n 1. After the buffer swap the application may render a third frame such as frame n 2 in the back buffer .

When the viewport moves and overlaps a new one of the tiles the composition manager may double buffer the newly overlapped tile . Conversely when the viewport moves and no longer overlaps one of the tiles then the composition manager may stop double buffering the previously overlapped tile .

Accordingly when the viewport moves the composition manager may adjust which of the tile buffers are in the front buffer so that the tile buffers in the front buffer correspond to the tiles overlapped by the viewport . Similarly when the viewport moves the composition manager may adjust which of the tile buffers are in the back buffer .

When the viewport moves and overlaps a newly overlapped tile then the tile buffer in the back buffer that corresponds to the newly overlapped tile may be included in the front buffer . The tile buffer added to the front buffer does not need to be completely re rendered because the application may have already rendered the tile buffer in the back buffer .

In some systems the tile buffers may be dynamically allocated and freed as the viewport moves. For example if the viewport moves and overlaps four of the tiles T T illustrated in instead of two of the tiles T and T then the composition manager may dynamically allocate two tile buffers B and B which are not shown in . The front buffer may then include four of the tile buffers A A and the back buffer may include the four corresponding tile buffers B B .

As an alternative to dynamically allocating the tile buffers the tile buffers may be allocated in advance. For example upon an initialization requested by the application the composition manager may allocate enough of the tile buffers to fully represent the application image in both the back buffer and the front buffer . The composition manager may dynamically associate the pre allocated tile buffers to the front and back buffers and .

The application and the composition manager may have different features than those described. In one system the composition manager instead of the application may divide or partition the application image into tiles . The application may invoke an API Application Programming Interface to indicate to the composition manager the size of the application image . In response the composition manager may divide the application image into the tiles and allocate the corresponding tile buffers . In another system the application instead of the composition manager may double buffer the tiles that are overlapped by the viewport but not the remaining tiles . In still another system one or more components other than the application and the composition manager may execute described functions of the application and the composition manager .

The composition manager may render the composite image from the visible portion of the application image identified by the viewport . The composition manager having knowledge of the tile buffers and the viewport may copy the buffered visible portion directly from the tile buffers in the front buffer to the display buffer even if the buffered visible portion is spread across multiple noncontiguous tile buffers . Copying the buffered visible portion from the tile buffers in the front buffer to an intermediate buffer and then copying from the intermediate buffer to the display buffer may be unnecessary. The application for example may provide the composition manager with information about the viewport and about the tile buffers in the front buffer . The composition manager may use the information provided by the application to copy the buffered visible portion from the tile buffers in the front buffer to the display buffer . Alternatively the composition manager may render the composite image from an intermediate buffer. The intermediate buffer may be populated by the application by copying from the buffered visible portion in the front buffer .

The frame of the application image represented in the front buffer may be frame n or any other frame. The frame of the application image represented in the back buffer may be frame n 1 or any other frame.

As described the composition manager the application and or some other component may double buffer the tiles that are overlapped or lie or extend and cover part of by the viewport . The composition manager and or the application may apply multiple buffering to the tiles that are overlapped by the viewport and not to the tiles that are not overlapped by the viewport . Multiple buffering may include double buffering triple buffering or other buffering processes and or hardware that includes storing one or more frames of the application image in one or more front buffers for extraction of the application image and storing one or more frames of the application image in one or more back buffers for rendering of the application image .

The processor may be hardware that executes computer executable instructions or computer code embodied in the memory or in other memory to perform one or more features of the tiled viewport composition system . The processor may include a general processor a central processing unit a graphics processing unit an application specific integrated circuit ASIC a digital signal processor a field programmable gate array FPGA a digital circuit an analog circuit a microcontroller any other type of processor or any combination thereof.

The memory interface may manage the transportation of data going to and from the memory such as between the processor and the memory . The memory interface may include any memory controller such as a Memory Chip Controller MCC a Double Data Rate2 DDR2 memory controller used to drive DDR2 SDRAM double data rate synchronous dynamic random access memory a Peripheral Component Interconnect PCI bus controller or any other type of memory controller. The memory interface may communicate with the memory over a bus such as a 64 bit DDR2 bus operating at 400 Megahertz or any other type of bus.

The memory may comprise a device for storing and retrieving data or any combination thereof. The memory may include non volatile and or volatile memory such as a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or a flash memory. Alternatively or in addition the memory may include an optical magnetic hard drive or any other form of data storage device.

The memory may store computer code such as the composition manager the application and or any other application. The computer code may include instructions executable with the processor . The computer code may be written in any computer language such as C C assembly language shader code channel program code and or any combination of computer languages.

The memory may include buffers such as the application buffers and the display buffer . The application buffers may include the tile buffers .

All of the disclosure regardless of the particular implementation described is exemplary in nature rather than limiting. The system may include more fewer or different components than illustrated in . For example the system may also include a display controller and a display device . The display controller may read the composite image from the display buffer through the memory interface and cause the composite image to be displayed in the display device .

The processor may be in communication with the memory via the memory interface . The processor may be in communication with other components such as the display controller and or a network controller not shown .

Furthermore each one of the components of system may include more fewer or different elements than is illustrated in . For example the memory may include more fewer or different modules graphics buffers and applications. Moreover the application and or the composition manager may include various modules. Flags data databases tables entities and other data structures may be separately stored and managed may be incorporated into a single memory or database may be distributed or may be logically and physically organized in many different ways. The components may operate independently or be part of a same program or hardware. The components may be resident on separate hardware such as separate removable circuit boards or share common hardware such as a same memory and processor for implementing instructions from the memory. Programs may be parts of a single program separate programs or distributed across several memories and processors.

In some examples one or more of the components of the system may be included in a System on a Chip SOC . For example the SOC may include the processor the memory interface and the display controller . In another example the SOC may include additional components such as memory.

The system may be implemented in many processes and or systems. For example although some features are shown stored in computer readable memories as logic implemented as computer executable instructions or as data structures in memory portions of the system and its logic and data structures may be stored on distributed across or read from any other machine readable storage media. Examples of the storage media may include memories a cache a buffer RAM a removable media a hard drive a hard disk a floppy disk a CD ROM or any other type of machine readable or computer readable storage medium. The media may include any non transitory computer readable storage media such as volatile or non volatile memory RAM ROM CD ROM any other suitable storage device or any combination thereof. Alternatively or in addition features and or modules described as logic implemented as computer executable instructions or as data structures in memory may be implemented in hardware or in a combination of hardware and software such as in a field programmable gate array FPGA .

The functions acts or tasks illustrated in the figures or described may be executed in response to one or more sets of logic or instructions stored in or on computer readable media. The functions acts or tasks are independent of the particular type of instructions set storage media processor or processing strategy and may be performed by software hardware integrated circuits firmware micro code and the like operating alone or in combination. Likewise processing strategies may include multiprocessing multitasking parallel processing distributed processing and or any other type of processing. In one embodiment the instructions are stored on a removable media device for reading by local or remote systems. In other embodiments the logic or instructions are stored in a remote location for transfer through a computer network or over telephone lines. In yet other embodiments the logic or instructions may be stored within a given computer central processing unit CPU graphics processing unit GPU or system.

The processing capability of the system may be distributed among multiple entities such as among multiple processors and memories optionally including multiple distributed processing systems. Parameters and other data structures may be separately stored and managed may be incorporated into a single memory or database may be logically and physically organized in many different ways and may be implemented with different types of data structures such as linked lists hash tables or implicit storage mechanisms. Logic such as programs or circuitry may be combined or split among multiple programs distributed across several memories and processors.

The logic may determine which of the tiles are overlapped by the viewport . The viewport may identify the visible portion of the application image and the visible portion may be smaller than the application image .

The tiles that are overlapped by the viewport may be buffered in the front buffer and the back buffer where the visible portion of the application image is extracted from the front buffer and the application image is modified in the back buffer . For example the front buffer may buffer frame n and the back buffer may buffer frame n 1.

The tiles not overlapped by the viewport may be buffered in the back buffer in which the application image is modified but not in the front buffer from which the visible portion of the application image is extracted. The logic may end for example by the composition manager extracting the buffered visible portion of the application image from the front buffer .

The logic may include additional different or fewer operations. In one such example the logic may include dividing the application image into the tiles by allocating the tile buffers . The operations may be executed in a different order than illustrated in .

To clarify the use of and to hereby provide notice to the public the phrases at least one of . . . and or at least one of . . . or combinations thereof or . . . and or are defined by the Applicant in the broadest sense superseding any other implied definitions herebefore or hereinafter unless expressly asserted by the Applicant to the contrary to mean one or more elements selected from the group comprising A B . . . and N that is to say any combination of one or more of the elements A B . . . or N including any one element alone or in combination with one or more of the other elements which may also include in combination additional elements not listed.

While various embodiments have been described it will be apparent to those of ordinary skill in the art that many more embodiments and implementations are possible within the scope of the disclosure. Accordingly the disclosure is not to be restricted except in light of the attached claims and their equivalents.

