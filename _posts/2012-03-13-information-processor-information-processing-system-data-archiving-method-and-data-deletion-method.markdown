---

title: Information processor, information processing system, data archiving method, and data deletion method
abstract: An information processor may include a command receiving unit that receives an immediate processing command in which a deletion target to be deleted from the database is conditioned, and a registration processing unit that registers information defining the deletion target into a management data unit. In addition, the information processor may include a deletion processing unit that deletes the deletion target from a database, and deregisters the deleted deletion target from the management data unit. The information processor can also include a data manipulation command processing unit, which, in the case where a data manipulation command having a manipulation target that coincides with a table of the deletion target registered in the management data unit is received, processes the data manipulation command in a state where a condition to exclude the deletion target from the manipulation target is added to the data manipulation command.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745009&OS=08745009&RS=08745009
owner: International Business Machines Corporation
number: 08745009
owner_city: Armonk
owner_country: US
publication_date: 20120313
---
The present application is a continuation of U.S. patent application Ser. No. 12 972 565 filed on Dec. 20 2010.

Embodiments of the present invention relate to a database technique and more particularly to an information processor an information processing system a data archiving method and a data deletion method which enable efficient deletion of data from a database.

Public offices and enterprises have large scale database systems built therein for managing vast amounts of data generated in various kinds of activities. In such a large scale database system a huge amount of data is generated and stored every day and therefore it is operationally common that less important data in a predetermined range is archived on a regular or irregular basis and further the data that is no longer necessary is deleted from the database. When data on the order of tens of thousands of hundreds of thousands of or even millions of records is to be processed in the data deletion or archiving process it takes some time to complete the processing with a heavy load placed on the system.

In a database various types of transaction isolation levels have been provided to improve a wait state occurring while a plurality of processes are performed concurrently. During the deletion or archiving process described above the following malfunctions may occur depending on the transaction isolation levels.

Specifically a low transaction isolation level may lead to a malfunction in which an application is able to refer to target data until the deletion process or the archiving process is completed. It is desirable that archived data is not referred to by any application except the application that is performing the archiving process from the start point of the archiving process and it is also desirable that deleted data is not referred to by any application from the time point of deletion thereof. Furthermore the fact that another application can refer to the archived target data will lead to degraded performance of that application when referring to data.

On the other hand a high transaction isolation level may lead to a malfunction in which when another application refers to data of the deletion target that is being deleted the application may wait for unlocking with no response until the deletion process is completed. Further in the archiving process a deletion process is performed following the retrieval of data causing the similar malfunction to occur during the deletion process. Furthermore the retrieval of data for archiving also requires much time and imposes a heavy load and thus there also is a demand for an archiving method which does not impose a load on a production database.

Still further in a database for the need of lock control the amount of memory usage increases in accordance with the number of target records. When the amount of memory used for the lock control reaches the greatest amount of memory usage that can be set lock escalation takes place which switches per record locks to a full table lock. With the full table lock data in the table other than the target data is locked as well. In this case another application process may have to wait until the lock is released in some transaction isolation levels even in the case of referring to data other than the target data.

As described above the conventional database technique is not sufficient because when deleting or archiving a huge amount of data it would cause the above described problems until the end of the process. Embodiments may therefore include an information processing system a data archiving method and a data deletion method which ensure that a deletion target the deletion of which has actually been requested or a deletion target which is to be deleted in an archiving process is excluded from a target of data manipulation immediately after a command instructing immediate processing is received irrespective of the transaction isolation level and that from an application that is not supposed to refer to the data being deleted the deletion target is seen as if it were already deleted from a database even before the completion of the deletion thereof.

Embodiments may also include an information processor for managing a database which upon receipt of an immediate processing command having a deletion target to be deleted from the database conditioned therein registers information defining the deletion target according to the immediate processing command for example a target table and a conditional expression defining a target area into a management data unit. This deletion target registered in the management data unit is deregistered therefrom when the deletion target according to the immediate processing command has been deleted from the database. On the other hand in the case where a data manipulation command for example an inquiry command or a normal deletion command issued to the database is to be processed while the deletion target is registered in the management data unit the management data unit is referred to and in the case where a data manipulation command having a data manipulation target that coincides with the target table registered in the management data unit is received the data manipulation command is processed after a condition to exclude the registered target area from the data manipulation target is added to the data manipulation command.

Further in embodiments of the present invention the process of deleting the deletion target may be executed in the state where the deletion target is not locked in units of records.

Further in embodiments of the present invention an environment variable may be provided which designates whether to lock the deletion target in units of area when performing the process of deleting the deletion target according to the immediate processing command. In the case where the deletion target is not locked in units of area when the update or insert command has an update or insert target that coincides with the range of the deletion target that has been registered in the management data unit an error may be returned in response to that command.

In the case where the deletion target is locked in units of area when the update or insert target of the update or insert command coincides with the range of the deletion target that has been registered in the management data unit the update or insert process may be executed after the deletion process according to the immediate processing command is finished and the per area lock of the deletion target is released.

Further in embodiments of the present invention the immediate processing command may be an archive preparation command which conditions the deletion target that is to be retrieved for archiving and then deleted from the database. In this case the process of deleting the deletion target according to the archive preparation command registered in the management data unit may be started in response to an archive deletion execution command instructing execution of the deletion of the intended deletion target.

Further in embodiments of the present invention the information may be registered in the management data unit by further associating thereto a requestor identifier a requestor session identifier of the client that issued the archive preparation command. In this case it may be configured so as not to add the condition of excluding the deletion target from the manipulation target in the case where the deletion target has the same requestor as that of the data manipulation command. This enables a condition in which only the client refers to the area of the deletion target and archives the data in the deletion target area.

Further in embodiments of the present invention the immediate processing command may be an immediate deletion command which conditions the deletion target to be immediately deleted and the process of deleting the deletion target according to the immediate deletion command may be started immediately after the deletion target is registered into the management data unit.

Further in embodiments of the present invention in the case where the management data unit has a deletion target already registered therein the deletion target according to the immediate processing command may be set to a range that is obtained by excluding from the deletion target conditioned by the immediate processing command the target area in the same target table that has been registered in the management data unit.

Further in embodiments of the present invention the database which is managed may be a production database and its replication database and a command issued to the production database may be relayed to the replication database. For relaying in the case where an archive preparation command issued to the production database is received a deletion target that is conditioned by the command and that is to be retrieved for archiving and then deleted from the database may be registered in an archive management data unit. Furthermore in the case where an archive deletion execution command issued to the production database is received an immediate deletion command for the deletion target that has been registered in the archive management data unit may be issued to the replication database and the deletion target may be deregistered from the archive management data unit.

Further in embodiments of the present invention in the case where a command related to the table that has been registered in the archive management data unit and in which the archiving process is in progress is received the command may be stored in a queue an archive time command receive queue . In this case after the archiving process is finished once the deletion target is deregistered from the archive management data unit any data manipulation command among the queued commands that is related to the table of the deregistered deletion target may be issued to the replication database.

At this time on the replication database side in the case where the immediate deletion command is received a deletion target conditioned by the immediate deletion command may be registered into a deletion target management data unit and the deletion target may be deleted from the replication database and the deletion target for which the deletion process has been completed may be deregistered from the deletion target management data unit. On the other hand in the case where a data manipulation command having a data manipulation target that coincides with the target table registered in the deletion target management data unit is received the process for the data manipulation command may be executed in the state where a condition to exclude the registered target area from the data manipulation target is added to the data manipulation command.

According to the above configuration a deletion target requested by an immediate processing command even if it is a huge amount of data may be excluded from a target of data manipulation in a database immediately after the deletion target is registered into a management data unit. As a result the deletion target is seen as if it were already deleted at least from an application that should not refer to the data being deleted even if the deletion process has not been completed yet. As for a data manipulation command such as an inquiry command the processing according to the command is executed in the state where a condition to exclude the deletion target from the manipulation target is added to that command. This prevents the data of the deletion target from being referred to and accordingly avoids the undesirable event that the data that is to be deleted and thus should not exist is included in the result of inquiry or that the process waits for unlocking of the deletion target area when referring to data.

Further at this time the condition designating the manipulation target of the data manipulation command is modified in such a manner that the deletion target is excluded from the manipulation target during the processing according to the data manipulation command. For such a data manipulation command lock control is unnecessary. It is thus possible to reduce the amount of memory usage and avoid occurrence of lock escalation.

Embodiments may include computer program product for managing a database wherein the computer program product has a computer readable storage medium with computer readable program code embodied therewith. The computer readable program code may include command receiving unit program code configured to receive an immediate processing command having a deletion target to be deleted from the database conditioned therein. The computer readable program code may also include registration processing unit program code configured to register information defining the deletion target according to the immediate processing command into a management data unit. In addition the computer readable program code may include deletion processing unit program code configured to delete the deletion target according to the immediate processing command from the database and deregister the deletion target the deletion of which has been completed from the management data unit. The computer readable program code can also include data manipulation command processing unit program code configured to in the case where a data manipulation command is received which has a manipulation target that coincides with a table of the deletion target that has been registered in the management data unit process the data manipulation command in a state where a condition to exclude the deletion target from the manipulation target is added to the data manipulation command.

Other embodiments may include a computer program product for managing a production database and a replication database replicated from the production database by a plurality of computers wherein the computer program product has a computer readable storage medium with computer readable program embodied therewith. The computer readable program code can include command relay unit program code configured to receive a command issued to the production database and transferring the command to the replication database wherein upon receipt of an archive preparation command which conditions a deletion target that is to be retrieved for archiving and then deleted from the production database and the replication database the command relay unit program code registers information defining the deletion target into an archive management data unit. In addition upon receipt of a data manipulation command which is related to a table of the deletion target that has been registered in the archive management data unit the command relay unit program code may queues the data manipulation command. Upon receipt of an archive deletion execution command instructing execution of the deletion of the intended deletion target the command relay unit program code may also issue to the replication database an immediate deletion command for the deletion target that has been registered in the archive management data unit and deregisters the deletion target from the archive management data unit and the command relay unit program code may further issue to the replication database any of the queued data manipulation commands that is related to the table of the deregistered deletion target. The computer program product can also include the replication database wherein the replication database includes registration processing unit program code upon receipt of the immediate deletion command configured to register information defining a deletion target conditioned by the immediate deletion command into a deletion target management data unit. The replication database may also include deletion processing unit program code configured to delete the deletion target according to the immediate deletion command from the replication database and deregister the deletion target the deletion of which has been completed from the deletion target management data unit. Additionally the replication database can include data manipulation command processing unit program code upon receipt of a data manipulation command that has a manipulation target that coincides with a table of the deletion target that has been registered in the deletion target management data unit configured to process the data manipulation command in a state where a condition to exclude the deletion target from the manipulation target is added to the data manipulation command.

Embodiments may also involve a method performed by a computer for archiving data stored in a database the method including receiving an archive preparation command which conditions a deletion target that is to be retrieved for archiving and then deleted from the database. The method may also provide for registering information defining the deletion target according to the archive preparation command into a management data unit. In the case where a data manipulation command having a manipulation target that coincides with a table of the deletion target that has been registered in the management data unit is received the method can involve processing the data manipulation command in a state where a condition to exclude the deletion target from the manipulation target is added to the data manipulation command. In response to an archive deletion execution command the method may include reading from the management data unit the intended deletion target registered therein and starting the process of deleting the intended deletion target from the database. In response to the completion of the deletion process the method can include deregistering from the management data unit the deletion target the deletion of which has been completed.

In addition embodiments may include a method performed by a computer for deleting data from a database. The method can involve receiving an immediate deletion command having a deletion target to be immediately deleted from the database conditioned therein and registering information defining the deletion target according to the immediate deletion command into a management data unit. The method may also include starting a process of deleting the deletion target according to the immediate deletion command from the database. In the case where a data manipulation command is received which has a manipulation target that coincides with a table of the deletion target that has been registered in the management data unit the method can include processing the data manipulation command in the state where a condition to exclude the deletion target from the manipulation target is added to the data manipulation command. In response to the completion of the deletion process the method may involve deregistering from the management data unit the deletion target the deletion of which has been completed.

Hereinafter the present invention will be described with reference to embodiments although the present invention is not restricted to the embodiments. In the following embodiments a database system hereinafter referred to as a DB system which includes a database server hereinafter referred to as a DB server as an information processor that manages a database will be described as an example of an information processing system.

Firstly hardware and software configurations of a DB server constituting a DB system according to a first embodiment will be described. shows an embodiment of a hardware configuration of the DB server . The DB server shown in is generally configured as a computer device such as a personal computer a workstation or a mainframe computer. The computer device shown in includes a central processing unit CPU a cache memory which enables the CPU to perform fast access to the data used thereby and a system memory which is made up of a solid state memory element such as a DRAM that enables the CPU to perform processing.

The CPU the cache memory and the system memory are connected via a system bus to other devices or drivers including a graphics driver and a network interface card NIC . The graphics driver is connected via a bus to an external display so as to display a result of processing by the CPU on a display screen. The NIC connects the DB server to a network which uses an appropriate communication protocol such as TCP IP the connection being made in the physical layer level and the data link layer level.

An I O bus bridge is also connected to the system bus . On the downstream side of the I O bus bridge a hard disk drive is connected via an I O bus with serial ATA USB or the like. The hard disk drive provides a storage area which stores data in a database according to the present embodiment. Furthermore an input device which may be a pointing device such as a keyboard and a mouse is connected to the I O bus via a bus such as a USB. This input device provides a user interface. An operator is able to instruct database maintenance and other processing operations to the computer device by using the input device or by remote access via the NIC .

For the CPU of the computer device any single core processor or multi core processor may be used. The DB server is controlled by an operating system hereinafter referred to as an OS such as Windows registered trademark 200X UNIX registered trademark LINUX registered trademark or the like. Further the DB server implements a database management system DBMS which manages a database such as a relational database an object relational database an extensible markup language XML database or the like. It is noted that a client can also be implemented with a hardware configuration similar to that shown in .

A database which operates on the DB server includes a command receiving unit which receives various commands from the client and the like via a database connection a command processing group which performs processing in accordance with various commands received and a database storage unit which stores data included in the database . The database uses a database language such as SQL. The database executes transaction processing with the client according to atomicity consistency isolation and durability ACID properties. Furthermore the database provides the client with access to the data stored in the database storage unit . While the case of using a relational database will be described in the embodiment for the sake of convenience embodiments of the present invention are not restricted thereto.

The command receiving unit is implemented on a computer as a command receiving unit according to the embodiment of the present invention together with the hardware resources including the NIC shown in . The database storage unit which is provided by the hard disk drive shown in stores the data in a computer accessible format.

The command processing group includes an immediate deletion command processing unit which processes an immediate deletion command which will be described later in detail according to the present embodiment. The command processing group further includes an inquiry command processing unit a normal deletion command processing unit an update command processing unit and an insert command processing unit which process an inquiry command SELECT statement a normal deletion command DELETE statement which is referred to as normal deletion so as to be distinguished from immediate deletion an update command UPDATE statement and an insert command INSERT statement respectively. In addition the command processing group in the database includes command processing units which process various commands for data definition data manipulation and data control typically provided for in a database language.

The database of the present embodiment further includes an immediate deletion lock variable which indicates whether a deletion target area is locked or unlocked in a target table during processing of an immediate deletion command and an immediate deletion table in which a deletion target that is conditioned by an immediate deletion command is registered for management. The immediate deletion lock variable and the immediate deletion table are stored in a management data unit provided by the storage area of the system memory or the hard disk drive . The immediate deletion lock variable and the immediate deletion table are referred to by the command processing units to . While the management data unit described herein stores data in a table structure of the immediate deletion table the data structure for registering and managing the deletion target is not particularly restricted.

In the client for remote access to the database in the DB server a database connection application programming interface hereinafter referred to as a DB connection API is implemented which is configured as a common application programming interface API such as Java database connectivity JDBC or open database connectivity ODBC or as another DBMS specific API allowing the client to access the database . An application which is executed on the client and which needs to use the data in the database accesses the database via this API .

The application uses the DB connection API to establish a database connection with the database in the DB server and issues various kinds of commands described in a database language such as SQL. The commands include an immediate deletion command DELETE IMMEDIATE statement according to the present embodiment and also include a data manipulation command such as an inquiry command SELECT statement . Returning to the description of the DB server the database uses the command processing units to in the command processing group to interpret each command issued by the application and execute required processing and returns the processing result to the client .

The immediate deletion command DELETE IMMEDIATE statement according to the present embodiment is an immediate processing command for conditioning a deletion target and for deleting the deletion target from the database while immediately excluding the deletion target from a target of data manipulation SELECT statement DELETE statement or the like . In the case where a deletion target consists of a huge number of records the deletion process may take some time to complete. Thus in the present embodiment this immediate deletion command is introduced so as to allow the deletion target according to the immediate deletion command to be excluded from a target of data manipulation according to another data manipulation command even in the state where the actual deletion process has not been completed yet.

When an immediate deletion command is issued to the database the immediate deletion command processing unit registers a deletion target conditioned by that command into the immediate deletion table and then starts deleting the deletion target in accordance with the value of the immediate deletion lock variable . The deletion target is specified by a table name which identifies a target table and a conditional expression which designates a target area within the target table. The target table name and the conditional expression defining the target area are written into the immediate deletion table for management.

The deletion process according to the immediate deletion command is performed in the state where deletion target records are not locked irrespective of the transaction isolation level. Once the deletion process has been completed the excluding process using the immediate deletion table becomes unnecessary and therefore the immediate deletion command processing unit deregisters the deletion target according to the immediate deletion command from the immediate deletion table .

The remaining command processing units in the command processing group each refer to the immediate deletion table when processing the corresponding command. The inquiry command and the normal deletion command each only refer to or erase a target record no information is newly added to the position where the processing has been completed. Thus in the present embodiment the inquiry command processing unit and the normal deletion command processing unit are each configured to process the inquiry or normal deletion command after modifying the command by adding thereto a condition to exclude the deletion target that has been registered in the immediate deletion table from the target of inquiry or normal deletion so as not to touch that deletion target during the processing of the inquiry or normal deletion command.

On the other hand the insert command is a command for inserting a new record new information is added to the position where the processing has been completed. Thus in the present embodiment in the case where the insert target of the command coincides with the deletion target that has been registered in the immediate deletion table the insert command processing unit determines whether it is possible to execute the command in accordance with the value of the immediate deletion lock variable and returns an error if it is not possible to execute the command.

The update command is a command for rewriting the record satisfying a certain condition with new information. Thus in the present embodiment the update command processing unit is configured to process the update command after modifying the command by adding thereto a condition to exclude the deletion target that has been registered in the immediate deletion table from the target of update so as not to touch that deletion target during the processing of the update command. Furthermore in the case where the value updated according to the command coincides with the deletion target that has been registered in the immediate deletion table the update command processing unit determines whether it is possible to execute the command in accordance with the value of the immediate deletion lock variable and returns an error if it is not possible to execute the command.

The functional units in the DB server shown in are implemented on the DB server as a program that is deployed on the system memory in the DB server and executed by the CPU to control the operations of the hardware resources. The immediate deletion command processing unit is implemented on the computer as a registration processing unit and a deletion processing unit according to the present embodiment. Further the inquiry command processing unit or the normal deletion command processing unit is implemented on the computer as a data manipulation command processing unit according to the present embodiment which processes an inquiry command or a normal deletion command as a data manipulation command. Still further the update command processing unit or the insert command processing unit is implemented on the computer as an update or insert command processing unit according to the present embodiment.

The functional units in the client are similarly implemented on the client as a program that is deployed on the system memory or the like in the client and executed by the CPU to control the operations of the hardware resources. Hereinafter the functions of the immediate deletion command according to the present embodiment will be described in more detail.

In step S the immediate deletion command processing unit interprets the received immediate deletion command to specify a target table and a target area to be deleted and determines whether there is a record in the immediate deletion table in which the matching target table name is specified. shows by way of example a data structure of the immediate deletion table according to the present embodiment. As shown in the immediate deletion table includes a TARGET TABLE NAME column in which the name of the target table is written a TARGET AREA column in which a conditional expression defining the deletion target area is written and a LOCK IDENTIFIER column in which when a lock is created for the deletion target area a lock identifier for that lock is written.

If it is determined in step S that there is no record with the matching target table name in the immediate deletion table NO the process proceeds to step S. In step S the immediate deletion command processing unit writes into the immediate deletion table the target table name and the conditional expression for the target area as shown in for example and the process proceeds to step S.

In step S the immediate deletion command processing unit refers to the immediate deletion lock variable which is an environment variable to determine whether the value is NOLOCK or LOCK . shows a data definition of the immediate deletion lock variable . If it is determined in step S that the value of the immediate deletion lock variable is LOCK the process proceeds to step S. In step S the immediate deletion command processing unit creates a lock for the immediate deletion command so as to lock the deletion target in units of area and writes a lock identifier for identifying the lock into the immediate deletion table . Then in step S the immediate deletion command processing unit starts the deletion process of the target area in the target table.

On the other hand if it is determined in step S that the value of the immediate deletion lock variable is NOLOCK the process proceeds to step S. In step S the immediate deletion command processing unit checks whether the deletion target record is being used by any command that had been issued prior to the immediate deletion command and that is now being processed and determines whether it is now in use or not in step S. If it is determined in step S that the deletion target record is now in use YES the process loops back to step S until it is confirmed that the record is not in use.

More specifically in step S described above the immediate deletion command processing unit searches the storage area where all the commands that are being processed are stored for any command that had been issued prior to the issuance of the immediate deletion command and that is now being processed. The immediate deletion command processing unit then checks whether the retrieved commands include any command that is using the deletion target area of the immediate deletion command and if there is any such command the immediate deletion command processing unit waits until the processing according to that command is finished. As for a data manipulation command that is issued after the deletion target of the immediate deletion command has been written into the immediate deletion table the deletion target is excluded and untouched by the processing according to the data manipulation command. In contrast as for a data manipulation command that had been issued prior to the issuance of the immediate deletion command it may be necessary to wait until the processing according to that data manipulation command is completed. This is why such a command that had been issued prior to the immediate deletion command and that is being processed is checked. If it is determined in step S that the deletion target record is not in use NO the process proceeds to step S where the deletion process of the target area in the target table is started.

When the deletion process is complete in step S the immediate deletion command processing unit releases and deletes any lock that had been created for the immediate deletion command and in step S the immediate deletion command processing unit erases the record of the deletion target registered in the immediate deletion table . In step S the immediate deletion command processing unit finishes the processing regarding the immediate deletion command.

Referring again to step S if it is determined in step S that there is a record with the same target table name as that of the command YES the process proceeds to step S. In step S the immediate deletion command processing unit adds to the condition indicating the deletion target of the received immediate deletion command a condition opposite to the condition indicating the target area specified in the record that has been registered in the immediate deletion table and that has the matching table name specified therein. In step S the immediate deletion command processing unit writes the target table name and the conditional expression for the target area into the immediate deletion table before the process proceeds to step S and on.

In this case if it is determined that the value of the immediate deletion lock variable is LOCK in step S the immediate deletion command processing unit creates a lock for the immediate deletion command so as to lock the deletion target and writes a lock identifier for identifying the lock into the immediate deletion table . Then the process of deleting the corresponding range is started in step S. On the other hand if it is determined that the value of the immediate deletion lock variable is NOLOCK the process of deleting the range excluding the deletion target area that has been registered is started in step S.

As shown in when a first immediate deletion command DELETE IMMEDIATE statement is issued in step S shown in the registration processing unit writes a target table name MSG and a conditional expression defining the target area DATE

In the case where a second immediate deletion command DELETE IMMEDIATE statement targeting the same table is issued before the deletion process according to the first immediate deletion command is completed in step S shown in the registration processing unit finds from within the immediate deletion table the record that has specified therein the same target table name MSG as that in the second immediate deletion command. In step S the registration processing unit adds to the condition LEVEL W indicating the deletion target according to the second immediate deletion command a condition for example DATE 200x 01 01 opposite to the condition indicating the target area specified in the record that has been registered in the immediate deletion table and that has the matching table name specified therein and in step S the registration processing unit writes the target table name MSG and the conditional expression for the target area for example LEVEL W AND DATE 200x 01 01 into the immediate deletion table .

Then in step S the deletion processing unit starts the deletion process of the target area for example LEVEL W AND DATE 200x 01 01 in the target table MSG specified in the second immediate deletion command. As described above the process flow according to the subsequent immediate deletion command is responsible for deleting the range excluding the target area of the preceding immediate deletion command in which the deletion process is being performed in accordance with that command.

In step S the inquiry command processing unit interprets the received inquiry command to specify a target table of the inquiry process and then refers to the immediate deletion table to determine whether there is a record in the immediate deletion table in which the matching target table name is specified.

If it is determined in step S that there is no record with the matching target table name in the immediate deletion table NO the process proceeds to step S. In step S the inquiry command processing unit executes the process according to the inquiry command without adding any modification to the condition and in step S the inquiry command processing unit finishes the processing regarding the inquiry command.

On the other hand if it is determined in step S that there is a record with the matching target table name in the immediate deletion table YES the process proceeds to step S. In step S the inquiry command processing unit adds to the received inquiry command a condition opposite to the condition indicating the target area specified in the record that has been registered in the immediate deletion table and that has the matching table name specified therein. In this case in step S the inquiry command processing unit executes the process of inquiring the range that is obtained by excluding from the target area conditioned by the inquiry command the deletion target area in the same target table that has been registered.

The process in step S is performed exclusively for the update command. In step S the update command processing unit adds to the update condition specified in the received update command a condition opposite to the condition indicating the target area specified in the record that has been registered in the immediate deletion table and that has the matching target table name specified therein as in the above described case of receiving the inquiry command or the normal deletion command. In the case of the insert command the process proceeds directly from step S to step S. In step S the update command processing unit interprets the received update command to specify a target table of the update process and refers to the immediate deletion table to determine whether there is a record in the immediate deletion table in which the matching target table name is specified. If it is determined in step S that there is no record with the matching target table name NO the process proceeds to step S. In step S the update command processing unit executes the process according to the update command and in step S the update command processing unit finishes the processing regarding the update command.

On the other hand if it is determined in step S that there is a record with the matching target table name YES the process proceeds to step S. In step S the update command processing unit determines whether the target of the update process i.e. the value updated according to the update process coincides with the target area specified in the record that has been registered in the immediate deletion table and that has the matching table name specified therein. In the case of the insert command it is determined whether the target of the insert process i.e. the data to be inserted coincides with the target area. If it is determined in step S that the target does not coincide with the deletion target area NO the process proceeds to step S where the update command processing unit executes the process according to the update command as usual and finishes the processing regarding the update command in step S.

On the other hand if it is determined in step S that the target coincides with the deletion target area YES in step S the update command processing unit refers to the immediate deletion lock variable to determine whether the value is NOLOCK or LOCK . If it is determined in step S that the value of the immediate deletion lock variable is LOCK in step S the update command processing unit waits for unlocking of the deletion target area in the immediate deletion table before the process proceeds to step S. In step S the update command processing unit executes the process according to the update command as usual and in step S the update command processing unit finishes the processing regarding the update command.

On the other hand if it is determined in step S that the value is NOLOCK the process proceeds to step S. As the deletion target area is not locked in step S the update command processing unit returns an error indicating that the immediate deletion process is in progress to the requestor that issued the update command as a response to that update command. In step S the update command processing unit terminates the processing regarding the update command.

According to the immediate deletion command described above a deletion target designated by the immediate deletion command even if it is a huge amount of data is excluded from a target of data manipulation immediately after the deletion target is registered in the immediate deletion table . This causes the deletion target to be seen from an application as if it were already deleted even if the deletion process has not been completed yet. The processing for an inquiry command or the like is carried out with the deletion target excluded from the processing target. This prevents the deletion target data from being referred to and hence avoids the undesirable event that the data that is to be deleted and thus should not exist is included in the result of inquiry or that the process waits for unlocking of the deletion target area when referring to data.

Further in order for the deletion target to be excluded from the processing target of an inquiry command or the like the condition designating the processing target of that command is modified. Moreover whether the value of the immediate deletion lock variable is NOLOCK or LOCK per record lock control in the target table is unnecessary. This reduces the amount of memory usage and can prevent occurrence of lock escalation.

Furthermore introduction of the immediate deletion lock variable allows the insert or update command to be processed in accordance with the operating guideline of the system. The immediate deletion lock variable has been provided to address the situation where data is inserted or updated in a deletion target area even while the deletion process is in progress. Generally however there may only be a small practical demand to insert new data to or update the data in the area to be deleted. Therefore the immediate deletion lock variable can be set to a default value of NOLOCK . Setting the immediate deletion lock variable as NOLOCK may further eliminate the need of per area lock control in the deletion target leading to a further reduction in amount of the memory usage.

The above described immediate deletion command according to the first embodiment is an immediate processing command for deleting a deletion target conditioned by the command from a database while immediately excluding the deletion target from a target of data manipulation. In the following a DB system according to a second embodiment will be described which is adapted to an archiving process of retrieving and then deleting data from a database at a predetermined point in time. It is noted that the DB system of the second embodiment is similar in hardware and software configurations to that of the first embodiment and thus differences therebetween will primarily be described below. The elements which exert functions similar to those of the first embodiment will be denoted by the same symbols with added.

An archive preparation command processing unit hereinafter simply referred to as the preparation command processing unit an archive deletion execution command processing unit hereinafter simply referred to as the deletion execution command processing unit and an archive deletion cancellation command processing unit hereinafter simply referred to as the deletion cancellation command processing unit are functional units which process an archive preparation command ARCHIVE PREPARE statement an archive deletion execution command ARCHIVE EXEC DELETE statement and an archive deletion cancellation command ARCHIVE CANCEL DELETE statement respectively of the present embodiment.

The database of the present embodiment includes a management database unit which stores an immediate deletion lock variable and an immediate deletion table as in the first embodiment. The management data unit is referred to by the command processing units to in the command processing group .

An archive preparation command hereinafter simply referred to as the preparation command according to the present embodiment is an immediate processing command for conditioning a deletion target that is to be deleted after data retrieval in the archiving process and for immediately excluding the deletion target from a target of data manipulation according to another application. With this command the deletion target intended to be deleted becomes unseen or unrecognizable from any application other than an application that issued or requested the preparation command while the application as the requestor of the preparation command is capable of manipulating the data of the deletion target if necessary.

On the other hand an archive deletion execution command hereinafter simply referred to as the deletion execution command according to the present embodiment is a command for instructing actual deletion of the intended deletion target when the data retrieval has been completed after the issuance of the preparation command. It is noted that two or more preparation commands may be issued prior to the issuance of a deletion execution command in which case a single deletion execution command causes all the deletion targets conditioned by the preparation commands issued from the same requestor till then to be deleted altogether.

An archive deletion cancellation command hereinafter simply referred to as the deletion cancellation command according to the present embodiment is a command for cancelling deletion of the intended deletion target after the issuance of the preparation command in the case where there arises a need to cancel the archiving process for example in the event that an error has occurred during the archiving process.

An application for the archiving process which operates on the client of the present embodiment is capable of efficiently archiving the data within the database by issuing these archive related commands to the database. When a preparation command is issued to the database the preparation command processing unit registers the deletion target conditioned by the command into the immediate deletion table to make the deletion target inaccessible by another application. Furthermore in the case where the value of the immediate deletion lock variable is LOCK the preparation command processing unit creates a lock for the immediate deletion command so as to lock the deletion target in units of area.

After the issuance of the preparation command when data is retrieved properly and a deletion execution command is issued from the application to the database then the deletion execution command processing unit starts the actual deletion process of the deletion target bound to the requestor application. The deletion process of the deletion target is performed in the state where the deletion target records are not locked irrespective of the value of the immediate deletion lock variable and irrespective of the transaction isolation level. When the deletion process has been completed the deletion execution command processing unit deregisters from the immediate deletion table the deletion target the deletion of which has been completed.

On the other hand after the issuance of the preparation command when a deletion cancellation command is issued from the application to the database the deletion cancellation command processing unit deregisters from the immediate deletion table the deletion target bound to the requestor application.

The remaining command processing units in the command processing group execute the processing according to the corresponding commands by referring to the immediate deletion table as in the first embodiment. The inquiry command processing unit and the normal deletion command processing unit are each configured to process the inquiry or normal deletion command after modifying the command by adding thereto a condition to exclude from the target of inquiry or normal deletion the deletion target that has been registered in the immediate deletion table and that is bound to a requestor other than that of the inquiry or normal deletion command so as not to touch that deletion target during the processing of the inquiry or normal deletion command.

On the other hand the update command processing unit and the insert command processing unit are each configured in the case where the update target or the insert target coincides with the deletion target that has been registered in the immediate deletion table and that is bound to a requestor other than that of the update or insert command to determine whether it is possible to execute the update or insert command in accordance with the value of the immediate deletion lock variable and return an error if it is not possible to execute the command.

The preparation command processing unit is implemented on a computer as a registration processing unit of the present embodiment and the deletion execution command processing unit is implemented on a computer as a deletion processing unit of the present embodiment. Hereinafter the functions of the archive related commands of the present embodiment will be described in more detail.

If it is determined in step S that there is no record with the matching target table name NO the process proceeds to step S. In step S the preparation command processing unit writes into the immediate deletion table the target table name the conditional expression defining the target area and a requestor session identifier and the process proceeds to step S. The requestor session identifier is a value for identifying the client that has issued or requested the command. schematically illustrates the operations performed in the archiving process. As shown in when a preparation command is issued as a first command a requestor session identifier ID is written into the immediate deletion table in association with the deletion target.

With continuing reference to if it is determined in step S that there is a record with the matching target table name YES on the other hand the process proceeds to step S. In step S the preparation command processing unit adds to the condition indicating the deletion target of the received preparation command a condition opposite to the condition indicating the target area specified in the record that has been registered in the immediate deletion table and that has the matching table name specified therein. Then in step S the preparation command processing unit performs registration into the immediate deletion table as described above before the process proceeds to step S.

In step S the preparation command processing unit determines whether the value of the immediate deletion lock variable is NOLOCK or LOCK . If it is determined in step S that the value of the immediate deletion lock variable is LOCK the process proceeds to step S. In step S the preparation command processing unit creates a lock for the immediate deletion command so as to lock the deletion target and writes a lock identifier for identifying the lock into the immediate deletion table . In step S the preparation command processing unit finishes the processing regarding the preparation command.

On the other hand if it is determined in step S that the value of the immediate deletion lock variable is NOLOCK the process proceeds to step S. In step S the preparation command processing unit checks whether the record of the deletion target is being used by any command that had been issued prior to the immediate deletion command and that is now being processed and determines whether it is now in use or not in step S. If it is determined in step S that the deletion target record is now in use YES the process loops back to step S. If it is determined in step S that the deletion target record is not in use NO the process proceeds to step S where the processing regarding the preparation command is finished.

If it is determined in step S that there is a record with the matching table name YES the process proceeds to step S where the inquiry command processing unit determines whether there is a record registered in the immediate deletion table that has a requestor session identifier different from that of the inquiry command. If it is determined in step S that there is a record having a session identifier different from that of the inquiry command YES the process proceeds to step S.

In step S the inquiry command processing unit adds to the received inquiry command a condition opposite to the condition indicating the target area specified in the record that has been registered in the immediate deletion table and that has the matching table name specified therein and that also has a session identifier different from that of the inquiry command. In this case in step S the inquiry command processing unit executes the process of inquiring the range that is obtained by excluding from the target area of the inquiry command the target area of an archive preparation command issued by another requestor or the deletion target area in which the immediate deletion process is in progress. In step S the inquiry command processing unit finishes the processing regarding the inquiry command.

On the other hand if it is determined in step S that there is no record with the matching table name NO or if it is determined in step S that there is no record with a session identifier different from that of the inquiry command NO the process proceeds to step S. In step S the inquiry command processing unit executes the process according to the inquiry command without adding any modification to its condition and in step S the inquiry command processing unit finishes the processing regarding the inquiry command.

As shown in when the first preparation command is issued from an archive application the deletion target is registered in the immediate deletion table in association with the session identifier of the command requestor and the deletion target range is set to a locked state or an unlocked state depending on the value of the immediate deletion lock variable .

Thereafter in the case where an inquiry command is issued as a second command from the archive application prior to issuance of a deletion execution command the processing of the inquiry command is executed under a normal condition because the inquiry command has the same requestor session identifier. On the other hand if an inquiry command is issued from another application having another session identifier assigned thereto the inquiry command is modified such that a condition to exclude the deletion target of the first preparation command is added thereto before execution of that inquiry command. As a result even if the entire range of the table is inquired by another application only the range except the target area of the archiving process is actually inquired. This avoids the undesirable event that the data in the target area of the archiving process is touched by another application and unlocking thereof is awaited.

In the case of the update command in step S the update command processing unit adds to the update condition specified in the received update command a condition opposite to the condition indicating the target area specified in the record that has been registered in the immediate deletion table and that has the matching table name specified therein and that also has a requestor session identifier different from that of the update command as in the case of receiving the inquiry command or the normal deletion command. In the case of the insert command the process proceeds directly from step S to step S. In step S the update command processing unit refers to the immediate deletion table to determine whether there is a record in the immediate deletion table that has the same target table name as that in the update command specified therein.

If it is determined in step S that there is a record with the matching table name YES the process proceeds to step S where the update command processing unit further determines whether there is a record registered in the immediate deletion table that has a requestor session identifier different from that of the update command. If it is determined in step S that there is a record with a different session identifier YES the process proceeds to step S. In step S the update command processing unit further determines whether the target of the update command i.e. the value updated according to the update command coincides with the range of the target area specified in the record that has been registered in the immediate deletion table and that has the same table name specified therein and that also has a session identifier different from that of the update command.

If it is determined in step S that the target of the update command coincides with any one of the target areas specified in the records having session identifiers different from that of the update command YES the process proceeds to step S. In step S the update command processing unit refers to the immediate deletion lock variable to determine whether the value is NOLOCK or LOCK . If it is determined in step S that the value is NOLOCK the process proceeds to step S. As the deletion target area is not locked in step S the update command processing unit returns an error indicating that the immediate deletion process is in progress to the requestor of the update command as a response to the update command. In step S the update command processing unit terminates the processing regarding the update command.

On the other hand if it is determined in step S that there is no record with the matching table name NO or if it is determined in step S that there is no record having a session identifier different from that of the update command NO or if it is determined in step S that the update target does not coincide with any one of the target areas specified in the records having the session identifiers other than that of the update command NO then the process proceeds to step S. If it is determined in step S that the value of the immediate deletion lock variable is LOCK in step S the update command processing unit waits for unlocking of the deletion area in the immediate deletion table before the process proceeds to step S. In step S the update command processing unit executes the process according to the update command and in step S the update command processing unit finishes the processing regarding the update command.

Referring again to in the case where an update command or an insert command the target of which coincides with the range of the deletion target according to the first preparation command is issued from another application after the issuance of the preparation command and before the issuance of the deletion execution command it is determined according to whether the value of the immediate deletion lock variable is LOCK or NOLOCK to continue the process of the command following the completion of the deletion process in the case of LOCK or to return an error in the case of NOLOCK .

In step S the deletion execution command processing unit specifies a requestor session identifier of the received command and acquires from the immediate deletion table the target table and the conditional expression of the deletion target bound to that requestor. In step S in accordance with the acquired information the deletion execution command processing unit executes the process of deleting the deletion target bound to the requestor session identifier. In the case where two or more preparation commands have been issued from the same requestor prior to the issuance of the deletion execution command the deletion execution command processing unit executes the process of deleting the deletion targets according to the plurality of preparation commands altogether.

In the case of deleting records in two or more tables specified by a plurality of preparation commands if the tables have a dependence on one another the order of deleting the records is determined in accordance with the dependence. For example assume that an order information table and an order details information table listing the detailed information of the orders are to be archived. In this case the order details information table depends on the order information table and thus the records in the order details information table are deleted first. Such dependence can be determined according to whether a condition specifying the area to be archived includes the information of another table. For example assume that the order information table ORDERS and the order details information table are associated with each other by the order ID ORDER ID and it is now tried to archive the records in the order details information table that correspond to the records in the order information table having the order date ORDER DATE of 200x 01 01 or earlier. This condition is expressed as follows ORDER ID IN SELECT ORDER ID FROM ORDERS . As such the condition specifying the area to be archived in the order details information table includes the information of the order information table ORDERS .

When the deletion process in step S has been completed in step S the deletion execution command processing unit releases and deletes the lock if any that had been created for the immediate deletion command and in step S the deletion execution command processing unit deregisters from the immediate deletion table the deletion target according to the deletion execution command. In step S the deletion execution command processing unit finishes the processing regarding the deletion execution command.

As shown in when a deletion execution command is issued as a third command after the issuance of the preparation command as the first command the actual deletion process is carried out under the locked state or the unlocked state that had been set during the process according to the first preparation command. When the deletion process is completed the corresponding record is erased from the immediate deletion table .

In step S the deletion cancellation command processing unit specifies a requestor session identifier of the received command and deregisters from the immediate deletion table the deletion target bound to that requestor. In step S the deletion cancellation command processing unit refers to the immediate deletion lock variable to determine whether the value is NOLOCK or LOCK . If it is determined in step S that the value is NOLOCK the process proceeds to step S where the processing regarding the deletion cancellation command is finished.

On the other hand if it is determined in step S that the value is LOCK the process proceeds to step S where the deletion cancellation command processing unit releases and deletes the lock of the deletion target bound to the requestor of the received command and in step S the deletion cancellation command processing unit finishes the processing regarding the deletion cancellation command. As a result deletion of the deletion target registered according to the preparation command is cancelled.

As shown in when a deletion cancellation command is issued as a third command after the issuance of the first preparation command in the case where the locked state has been set during the processing according to the first preparation command the lock is released and deleted and the corresponding record is erased from the immediate deletion table . This can cancel the deletion of the deletion target according to the archive preparation command.

The immediate deletion command according to the first embodiment may also be used concurrently in the second embodiment. The processing performed by the immediate deletion command processing unit is identical to that in the process flow described in conjunction with in the first embodiment and thus detailed description thereof will not be repeated here. During this processing the common immediate deletion table is used. The immediate deletion table of the present embodiment includes the column of requestor session identifier which has been provided such that even when a deletion target according to an archive preparation command is registered in the immediate deletion table only the session that has issued the archive preparation command is able to handle the deletion target data as if it were not deleted. In the process flow of the immediate deletion command no information is written into the requestor session identifier column.

According to the archive preparation command described above immediately after a deletion target conditioned by that command is registered in the immediate deletion table the deletion target is excluded from the target of data manipulation by another application. This causes the deletion target to be seen from the other applications as if it were already deleted even if the deletion process initiated after the issuance of a deletion execution command has not been completed yet. The application as the requestor of the archive preparation command however can refer to the deletion target ensuring proper data retrieval in the archiving process. Furthermore the actual deletion process according to the deletion execution command can enjoy the advantages similar to those in the deletion process according to the immediate deletion command described above. As a result the amount of memory usage is reduced and occurrence of lock escalation is favorably avoided.

In the DB system according to the second embodiment described above for retrieving data from a database after the issuance of an archive preparation command another command is issued to the same database. The data retrieval however imposes a heavy load as well and thus it may be desirable to reduce the load. Hereinafter a third embodiment will be described which provides a data retrieval method using a replication database. Each DB server in the DB system of the third embodiment is similar in hardware and software configurations to that of the second embodiment and thus differences therebetween will primarily be described below. The elements exerting similar functions to those in the first or second embodiment are denoted by the same symbols with added.

In the production database A various kinds of commands received by a command receiving unit A provided therein are each temporarily stored as a transaction log and transmitted to the replication database B on a timely basis. To this end the DB system of the present embodiment includes on the DB server of the production database A side a command detecting unit which acquires the transaction log and transfers each command received by the production database A to the replication database B side. The DB system further includes on the DB server of the replication database B side functional units indicated by a rectangle in .

The functional units provided on the replication database B side include a command relay unit which receives various commands transferred from the command detecting unit and transmits the commands to a command receiving unit B in the replication database B an archive management data unit which stores an archive management table for managing archiving by replication and a command receive queue for use in archiving hereinafter referred to as the archive time command receive queue which temporarily queues insert update normal deletion immediate deletion and other commands related to a table in which the archiving process is in progress. The archive management table having a data structure similar to that of the immediate deletion table described above in the second embodiment is used for storing a target table a deletion area and a requestor session identifier of the preparation command to be transferred.

The archiving process according to the present embodiment is characterized in that a preparation command is issued to the production database A so as to cause its deletion target to be immediately excluded from a data manipulation target of another application in the production database A while the data can be retrieved from the replication database B.

The command relay unit according to the present embodiment receives commands that were issued to and transferred from the production database A and transfers the commands to the replication database B. The command relay unit executes the following processes in accordance with the types and conditions of the respective commands. In the case where the command relay unit receives a preparation command issued to the production database A the command relay unit registers a deletion target conditioned by the preparation command into the archive management table without transmitting the command to the replication database B. In the case where the command relay unit receives an update command an insert command a normal deletion command or an immediate deletion command with respect to a table if the target table of the command has been registered in the archive management table the command relay unit temporarily stores the command in the archive time command receive queue rather than immediately transmitting the command to the replication database B.

Further in the case where the command relay unit receives a deletion execution command the command relay unit does not transmit the deletion execution command to the replication database B. Instead the command relay unit issues to the replication database B an immediate deletion command for the deletion target that has been registered in the archive management table and that has the same requestor and deregisters the deletion target from the archive management table. In the case where there are any commands in the archive time command receive queue that are related to the table in which the archiving process has been completed the command relay unit issues the commands to the replication database B in the order in which the commands were received.

Furthermore in the case where the command relay unit receives a deletion cancellation command the command relay unit does not transmit the deletion cancellation command to the replication database B. Rather the command relay unit deregisters from the archive management table the deletion target having the same requestor. In the case where there are any commands in the archive time command receive queue that are related to the table in which the archiving process has been completed the command relay unit issues the commands to the replication database B in the order in which the commands were received. On the other hand in the case where the command relay unit receives a command issued to the production database A that does not satisfy any of the above conditions the command relay unit transmits the command to the replication database B.

It is noted that the command relay unit according to the present embodiment is implemented on a computer as a command relay unit of the present embodiment although the command relay unit can also be regarded as a functional unit that corresponds to the registration processing unit and the deletion processing unit described above. Hereinafter the archiving process using the replication database of the present embodiment will be described in more detail.

If it is determined in step S that the command is the stop command YES the process proceeds to step S where the process is terminated. On the other hand if it is determined in step S that the command is not the stop command but the issued command that has been detected NO the process proceeds to step S. In step S the command detecting unit transmits the command issued to the production database A to the command relay unit on the replication database B side and the process loops back to step S. This loop is repeated until a program stop command is received.

In step S the command relay unit determines whether the received command is a preparation command. If it is determined in step S that the command is the preparation command YES the process proceeds to step S. In step S the command relay unit registers into the archive management table a target table and a target area of the deletion target conditioned by the preparation command and a session identifier of the command. The process then loops back to step S. The process is repeated until a program stop command is received. On the other hand if it is determined in step S that the command is not the preparation command NO the process proceeds to step S.

In step S the command relay unit determines whether the received command is a deletion execution command. If it is determined in step S that the command is the deletion execution command YES the process proceeds to step S. In step S the command relay unit issues to the replication database B an immediate deletion command for the deletion target having the same requestor session identifier as that of the deletion execution command. In step S the command relay unit erases from the archive management table the record of the deletion target for which the immediate deletion command has been issued.

In step S in the case where there are any commands in the archive time command receive queue that are related to the table in which the archiving process has been completed the command relay unit issues the commands to the replication database B in the order in which the commands were received and the process loops back to step S. On the other hand if it is determined in step S that the command is not the deletion execution command NO the process proceeds to step S.

In step S the command relay unit determines whether the received command is a deletion cancellation command. If it is determined in step S that the command is the deletion cancellation command YES the process proceeds to step S. In step S the command relay unit erases from the archive management table any record having the same requestor session identifier as that of the deletion cancellation command and the process proceeds to step S.

In step S in the case where there are any commands in the archive time command receive queue that are related to the table in which the archiving process has been completed the command relay unit issues the commands to the replication database B in the order in which the commands were received and the process loops back to step S. On the other hand if it is determined in step S that the command is not the deletion cancellation command NO the process proceeds to step S.

In step S the command relay unit determines whether the command that is other than the archive related commands is related to the table in which the archiving process is in progress. If it is determined in step S that the command is related to the table in which the archiving process is in progress YES in step S the command relay unit temporarily stores the command in the archive time command receive queue . If it is determined in step S that the command is not related to the table in which the archiving process is in progress NO in step S the command relay unit issues the command as it is to the replication database B and the process loops back to step S.

In step S the command relay unit reads from the archive management table the record that has the acquired session identifier and in step S the command relay unit returns the table name and the conditional expression specified in that record as a response to the inquiry. In step S the command relay unit finishes the process. It is noted that there is a time lag until the command included in the transaction log is transmitted to the replication database side. Thus the status inquiry is issued for confirmation as to whether the archive preparation command issued to the production database A has reached the replication database B .

In the DB system according to the present embodiment the archive application is able to execute archiving in the production database A in accordance with a process flow as will be described below. is a flowchart illustrating the processing performed by the archive application which operates on the client in the DB system of the third embodiment.

The process shown in starts at step S in response to an archive instruction issued from an operator for example. In step S the application issues a preparation command to the production database A and acquires a session ID. When the preparation command is issued the production database A registers a deletion target of the preparation command into the immediate deletion table A and transfers the preparation command to the command relay unit on the replication database B side on a timely basis.

As a result on the production database A side the deletion target conditioned by the preparation command is excluded at least from a manipulation target of another application. On the replication database B side the command relay unit receives the preparation command issued to the production database A and registers its deletion target into the archive management table. While the archive application will access the replication database B with a different session identifier no preparation command is issued to the replication database B and thus the archive application is also accessible to the deletion target prepared for archiving in the replication database B.

In step S the application makes an inquiry to the command relay unit so as to acquire the status of the archiving process related to the session identifier acquired. In step S the application determines whether it was able to acquire the status. If it is determined in step S that it failed to acquire the status NO the application waits for a while before the process loops back to step S. The process is repeated until the status is acquired or until a timeout occurs. On the other hand if it is determined in step S that the status has been acquired YES the process proceeds to step S. With this status confirmation it is possible to confirm that the deletion target according to the preparation command issued to the production database A has been registered in the archive management table.

In step S the application retrieves data from the replication database B with an existing SQL statement or the like. When the retrieval of necessary data has been completed in step S the application issues a deletion execution command to the production database A and finishes the process in step S.

The production database A upon receipt of this deletion execution command executes the process of deleting the deletion target according to the preparation command registered in the immediate deletion table A and upon completion of the deletion process deregisters the deletion target from the immediate deletion table A. The production database A also transfers the deletion execution command to the command relay unit on the replication database B side on a timely basis.

On the replication database B side upon receipt of the deletion execution command the command relay unit issues to the replication database B an immediate deletion command for the deletion target that has been registered in the archive management table and that has the same requestor. The command relay unit also deregisters the deletion target from the archive management table. In the state of the archive management table shown in when a deletion execution command is received from the same requestor having the session identifier 1234 a command DELETE IMMEDIATE FROM MSG WHERE DATE

According to the archiving process of the third embodiment described above in the production database A the deletion target conditioned by the archive preparation command is excluded from a target of data manipulation by another application immediately after the deletion target is registered in the immediate deletion table A. On the other hand in the replication database B the deletion target is not yet excluded from the target of data manipulation and thus the data can be retrieved from the replication database B even after the issuance of the archive preparation command. This enables the load imposed by the data retrieval to be isolated from the production database A.

As described above according to embodiments of the present invention it is possible to provide an information processor an information processing system a data archiving method and a data deletion method which ensure that a deletion target the deletion of which has actually been requested or a deletion target which is to be deleted in an archiving process is excluded from a target of data manipulation immediately after a command instructing immediate processing is received irrespective of the transaction isolation level and that from an application that is not supposed to refer to the data being deleted the deletion target is seen as if it were already deleted from a database. This prevents the data of the deletion target from being referred to and accordingly avoids the undesirable event that the data that is to be deleted and thus should not exist is included in the result of inquiry or that the process waits for unlocking of the deletion target area.

While the functional units and processing performed thereby have been described above for easy understanding of the present invention the present invention is not limited to the specific functional units performing specific processing as described above. The functions for implementing the above described processing may be assigned to any functional units in consideration of processing efficiency as well as programming efficiency upon implementation.

The above described functions of the present invention may be implemented using a device executable program which is written in an object oriented programming language such as C Java registered trademark Java registered trademark Beans Java registered trademark Applet Java registered trademark Script Perl Ruby or the like or in a database language such as SQL or the like. The program may be stored in a device readable storage medium for distribution or may be transmitted for distribution.

While embodiments of the present invention have been described with reference to the specific details the present invention is not restricted to the above described details. Rather various additions modifications deletions as well as other embodiments are possible within the range conceivable by those skilled in the art and they are included in the scope of the embodiments of the present invention as long as they exert the functions and effects of the present invention.

