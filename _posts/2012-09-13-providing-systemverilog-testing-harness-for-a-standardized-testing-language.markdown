---

title: Providing SystemVerilog testing harness for a standardized testing language
abstract: A method and apparatus to enable SystemVerilog based tools to compile, debug, and execute a standardized testing language based test bench. The testing harness comprises, in one embodiment, a translator to map TTCN-3 language to a SystemVerilog test bench, a Verilog syntax compiler and simulator database including the mapped TTCN-3 language data, and a run time system using the SystemVerilog test bench with the database including the mapped TTCN-3 language data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08799864&OS=08799864&RS=08799864
owner: Synopsys, Inc.
number: 08799864
owner_city: Mountain View
owner_country: US
publication_date: 20120913
---
The present application is related to U.S. Provisional Patent Application No. 61 534 353 filed Sep. 13 2011. That application is incorporated herein by reference in its entirety.

The present invention relates to system testing and more particularly to using SystemVerilog based testing harness with a standardized testing language.

Testing and Test Control Notation Version 3 TTCN 3 is an internationally standardized testing language that applies to a variety of application domains and types of testing such as telecommunications protocols real time testing software testing automotive load testing finance and other fields. For a complex system under test SUT the bottlenecks of current TTCN 3 compiler debugger is performance capacity and reliability.

One prior art method of overcoming the limitations of TTCN 3 tools is using a TTCN 3 test system that is designed to compile the TTCN 3 test suite to C . One existing prior art compiler uses third party tools like VC to obtain an executable test suite ETS dynamic configure system adapter codec and platform adapter. However even translated into C the prior art system has the same limitations as TTCN 3.

A method and apparatus to enable SystemVerilog based tools to compile debug and execute a standardized testing language based test bench is described.

The method and apparatus described uses a SystemVerilog harness to implement a standard testing language based testing suite. For example TTCN 3 is an internationally standardized testing language which applies to a variety of application domains and types of testing such as Telecom Protocols Real Time Testing Software Testing Automotive Load Testing and Finance. However for a complex system under test SUT TTCN 3 compiler debugger tools have performance capacity and reliability bottlenecks.

In contrast SystemVerilog based test benches are primarily used with EDA verification tools such as VCS NC Sim or ModelSim. Such tools have significantly better performance capacity and reliability. The present system in one embodiment combines the SystemVerilog test harness with the structure and language set provided by the TTCN 3 testing language or test bench to provide a more efficient complete and speedy testing implementation. This is possible because TTCN 3 and SystemVerilog have similar verification methodologies and similar data structure definitions. Based on the comparability between TTCN 3 and SystemVerilog a new method of a SystemVerilog based TTCN 3 compiler debugger is provided to enable users to compile and debug TTCN 3 test benches with SystemVerilog compiler and debugger. This solution addresses a long felt need for a testing suite that has excellent performance capacity and reliability and applies to broad application domains and types.

The following detailed description of embodiments of the invention make reference to the accompanying drawings in which like references indicate similar elements showing by way of illustration specific embodiments of practicing the invention. Description of these embodiments is in sufficient detail to enable those skilled in the art to practice the invention. One skilled in the art understands that other embodiments may be utilized and that logical mechanical electrical functional and other changes may be made without departing from the scope of the present invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

The test bench includes tests which create the test conditions and generators . The verification environment includes layers that create transactions execute transactions and supply data to the system under test.

Generators create random transactions for testing. Transactor executes the transactions generated by generators . In one embodiment embedded assertions capture the design intent in terms of functionality and constraints and are verified by simulation before application of any formal or dynamic verification methods. The self check checks the transaction for correctness while the checker identifies the transactions involved. The transactor also supplies the data to the system under test via driver . Monitor observes the data from the system under test in response to the data from transactor . Checker correlates the data from monitor and transactor. In this way the SystemVerilog testing environment can generate test cases provide functional coverage and test a system under test . The SystemVerilog environment is designed for large scale testing and scales well and is reliable even when simultaneously testing thousands of systems.

SystemVerilog may further include a set of extensions to address advanced design requirements. SystemVerilog also supports assertion based verification ABV enabling a design for verification methodology. Assertion information is built into SystemVerilog. Embedded assertions capture the design intent in terms of functionality and constraints and are verified by simulation before application of any formal or dynamic verification methods. This approach helps to avoid encoding errors increases test accuracy simplifies the test bench and enables test reuse. The full controllability and observability of internal circuit nodes afforded by ABV can reduce design debug time.

SystemVerilog also supports hardware models and test benches that utilize object oriented techniques and are thus reusable. For example the combination of SystemVerilog s Interface method with object oriented test bench creation techniques enables the implementation of a powerful constraint driven verification methodology. The constraints are supplied by embedded assertions that express design properties to be proved true or to be covered during verification. Such assertions may be re used in a System On Chip SOC development that leverages design re use and or Intellectual Property IP based design.

The TTCN 3 test bench is passed to the TTCN2SV translator . The translator maps keywords functions and test cases from the TTCN 3 test bench into a SystemVerilog test bench . and illustrate exemplary embodiments of mapping a function from the TTCN 3 into the SystemVerilog test bench.

The SystemVerilog test bench includes the SIMV the output of the compilation an executable binary file . The SIMV interacts with the system under test via system adapter . The system may include a DPI direct programming interface which provides an interface between SystemVerilog and C or any other language which allows inter language function calls. Verilog Procedural Interface VPI allows the system to control the task function library. In one embodiment the VPI enables interaction with and control through Codec using an http hypertext transport protocol . Timer control interacts with the SIMV system as well.

Thus in one embodiment the SystemVerilog test bench is used to interact with the device under test while using tools to enable the SystemVerilog test bench to take advantage of the keywords functions provided by the TTCN 3 test bench .

The SystemVerilog AST is generated using match logic to produce a SystemVerilog AST including the TTCN 3 AST features. The SystemVerilog AST is then used by the SystemVerilog compiler debugger . In this way instead of direct translation the ASTs are cross mapped. Based on the comparability between TTCN 3 and SystemVerilog the system uses the TTCN 3 AST generated by TTCN 3 parser to create SystemVerilog AST and meet the same verification functions.

In one embodiment the system can be a combination of the two mapping mechanisms show in . In one embodiment to select partial TTCN 3 test benches the system follows a Source to Source mapping mechanism and to handle the remaining partial TTCN 3 test benches the system follows AST to AST mapping mechanism. In one embodiment those aspects that cannot be mapped through source to source mapping are mapped using AST to AST mapping.

One of the key capabilities of TTCN 3 is its communication mechanism. TTCN 3 provides message based and signature based communication operations. These operations can be grouped into two categories sending operations and receiving operations. The system is designed to ensure that the SystemVerilog testing harness can properly execute the sending and receiving operations of the TTCN 3 language.

In one embodiment the method of executing TTCN 3 communication operations makes use of SystemVerilog mailbox which allows more efficient execution of message exchanging and results in an unified way to implement both message based and signature based communication operations.

At block the TTCN 3 messages procedure calls replies and exceptions are converted to messages in string format. In one embodiment this encompasses all communications associated with the TTCN 3 system.

At block the execution of TTCN 3 sending and receiving operations is implemented via exchanging messages between TTCN 3 port instances. In general TTCN 3 uses port based messaging system. By converting each port based TTCN 3 message to a SystemVerilog mailbox bound message the communications mechanisms of the TTCN 3 language remain but are operated within the mailbox system of SystemVerilog. The process ends at block . In one embodiment this mapping occurs once for each testing system that is integrated.

If no such mailbox exists as determined at block a runtime error is generated at block . The process in one embodiment continues to block where the process is blocked to await the next statement. This thread of the process ends.

The presence of a runtime error indicates that the mapping described above with respect to was not complete. The operator can update the mapping to ensure that the mailbox objects targeted by send operations exist. If the mailbox is identified at block the process calls a put method for the mailbox to place a message in the mailbox at block .

The current process is then blocked at block to await the next statement and ends block . In one embodiment this means that the process is suspended but continues to actively wait for further send operations. This process is initiated whenever a send operation is needed in one embodiment.

At block the process determines whether the mailbox is empty. If the mailbox is not empty in one embodiment the system calls a peek method to get the first message from the mailbox and check with the matching criteria specified by the operation at block . The process in one embodiment then calls a get method to remove the message from mailbox queue if it satisfies the criteria at block . The process then continues to block to block and wait for the scheduling from the next statement.

If the message does not match the criteria specified by the operation as determined at block the process at block the failure process is performed. In one embodiment the failure process returns the control back to the system and the system determines the action to perform in response to the failure. In one embodiment this depends on the TTCN 3 code that was implemented. The process then continues to block to wait for scheduling from a next statement.

If the mailbox was found to be empty at block at block the process determines whether the timer check is due. If not the process waits for the next time scheduling increment at block . If it is time to check the timer at block the timer is checked. If the timer has not yet run out the process continues to block to wait. If the timer has run out at block the process terminates to wait for the scheduling from the next statement which may cause a receiving operation.

In this way the mapping enables the communication of TTCN 3 style message based and signature based operations within the mailbox based structure of the SystemVerilog test harness.

In one embodiment the process includes using an EDA verification database based on TTCN 3 parser data to enable users to reuse the EDA verification database for TTCN 3 static debugging. EDA verification tools use some verification databases for static debug. One verification database is VCD IEEE standard which contains static debug information like HDL design hierarchy and value changes. Other verification databases include Synopsys VPD Sprintsoft s FSDB and others.

In order to enable the reuse of the EDA verification database the TTCN 3 parser uses the TTCN 3 files to create an abstract syntax tree AST .

The system then reuses the write APIs application programming interfaces of the EDA verification database to update the verification database with static information of TTCN 3 files. The static debug information may include hierarchy information like scope information such as module control function test case alt step and variable information. The static debug information may also include source file information connectivity information and scopes and variables.

The EDA verification debug tools can then use the APIs to read the static debug database of TTCN 3 test benches and enable the static debug features of TTCN 3 test benches.

In this way the EDA verification and debug tools can be used to handle testing of the TTCN 3 based test architecture. It enables the use of an existing infrastructure for testing with the present system. One of skill in the art would understand that the process described here with respect to the EDA verification database could be used with other verification databases similarly.

The data processing system illustrated in includes a bus or other internal communication means for communicating information and a processing unit coupled to the bus for processing information. The processing unit may be a central processing unit CPU a digital signal processor DSP or another type of processing unit .

The system further includes in one embodiment a random access memory RAM or other volatile storage device referred to as memory coupled to bus for storing information and instructions to be executed by processor . Main memory may also be used for storing temporary variables or other intermediate information during execution of instructions by processing unit .

The system also comprises in one embodiment a read only memory ROM and or static storage device coupled to bus for storing static information and instructions for processor . In one embodiment the system also includes data storage device such as a magnetic disk or optical disk and its corresponding disk drive or Flash memory or other storage that is capable of storing data when no power is supplied to the system. Data storage device in one embodiment is coupled to bus for storing information and instructions.

The system may further be coupled to an output device such as a cathode ray tube CRT or a liquid crystal display LCD coupled to bus through bus for outputting information. The output device may be a visual output device an audio output device and or tactile output device e.g. vibrations etc. 

An input device may be coupled to the bus . The input device may be an alphanumeric input device such as a keyboard including alphanumeric and other keys for enabling a user to communicate information and command selections to processing unit . An additional user input device may further be included. One such user input device is cursor control device such as a mouse a trackball stylus cursor direction keys or touch screen may be coupled to bus through bus for communicating direction information and command selections to processing unit and for controlling movement on display device .

Another device which may optionally be coupled to computer system is a network device for accessing other nodes of a distributed system via a network. The communication device may include any of a number of commercially available networking peripheral devices such as those used for coupling to an Ethernet token ring Internet or wide area network personal area network wireless network or other method of accessing other devices. The communication device may further be a null modem connection or any other mechanism that provides connectivity between the computer system and the outside world.

Note that any or all of the components of this system illustrated in and associated hardware may be used in various embodiments of the present invention.

It will be appreciated by those of ordinary skill in the art that the particular machine that embodies the present invention may be configured in various ways according to the particular implementation. The control logic or software implementing the present invention can be stored in main memory mass storage device or other storage medium locally or remotely accessible to processor .

It will be apparent to those of ordinary skill in the art that the system method and process described herein can be implemented as software stored in main memory or read only memory and executed by processor . This control logic or software may also be resident on an article of manufacture comprising a computer readable medium having computer readable program code embodied therein and being readable by the mass storage device and for causing the processor to operate in accordance with the methods and teachings herein.

The present invention may also be embodied in a handheld or portable device containing a subset of the computer hardware components described above. For example the handheld device may be configured to contain only the bus the processor and memory and or .

The handheld device may be configured to include a set of buttons or input signaling components with which a user may select from a set of available options. These could be considered input device or input device . The handheld device may also be configured to include an output device such as a liquid crystal display LCD or display element matrix for displaying information to a user of the handheld device. Conventional methods may be used to implement such a handheld device. The implementation of the present invention for such a device would be apparent to one of ordinary skill in the art given the disclosure of the present invention as provided herein.

The present invention may also be embodied in a special purpose appliance including a subset of the computer hardware components described above. For example the appliance may include a processing unit a data storage device a bus and memory and no input output mechanisms or only rudimentary communications mechanisms such as a small touch screen that permits the user to communicate in a basic manner with the device. In general the more special purpose the device is the fewer of the elements need be present for the device to function. In some devices communications with the user may be through a touch based screen or similar mechanism. In one embodiment the device may not provide any direct input output signals but may be configured and accessed through a website or other network based connection through network device .

It will be appreciated by those of ordinary skill in the art that any configuration of the particular machine implemented as the computer system may be used according to the particular implementation. The control logic or software implementing the present invention can be stored on any machine readable medium locally or remotely accessible to processor . A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable medium includes read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices or other storage media that may be used for temporary or permanent data storage. In one embodiment the control logic may be implemented as transmittable data such as electrical optical acoustical or other forms of propagated signals e.g. carrier waves infrared signals digital signals etc. .

This conversion was implemented in a prototype to enable VCS to verify TTCN 3 test bench by auto translating TTCN 3 to SystemVerilog. The prototype included TTCN2SV translator Codec based on VCS VPI System Adaptor based on VCS DPI. The benchmark results were positive. The SystemVerilog solution performed better than competitive products. In particular when there was only one PTC client the Performance Test shows that SystemVerilog Solution has the same performance results as prior art C conversion systems. As the number of PTC clients increase the SystemVerilog Solution shows much better performance than C conversion. There was an up to 10 increase in speed.

Furthermore as the number of PTC clients increase the SystemVerilog Solution showed much better stability than the C conversion based solution. In one prototype experiment 100 passed v. 65 passed using the prior method.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

