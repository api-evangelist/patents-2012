---

title: System and method for building components of a software product in a distributed system
abstract: A computer-implemented method of compiling source code of a software product including a plurality of components is disclosed. The method includes receiving at least one changelist identifying at least one component of the plurality of components, testing the at least one component using a defined set of tests for each of the plurality of components, approving the at least one changelist when testing of the at least one component identified in the changelist results in compliancy, calculating dependencies between the plurality of components using the compliant at least one changelist, and building the software product by concurrently building the plurality of components based on the calculated dependencies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08850391&OS=08850391&RS=08850391
owner: Google Inc.
number: 08850391
owner_city: Mountain View
owner_country: US
publication_date: 20120127
---
The present disclosure relates to building a software product of multiple components in a unified manner.

A software product may include many components which interact with each other. For example a product may include components such as a document editor a spreadsheet editor and a document list manager each of which interact with one another. Each component may also include sub components which interact with other components or sub components.

The components may be developed by different teams and may be built and released separately at different schedules. However significant collaboration efforts may be required to release new versions of the components in order to prevent compatibility issues arising between the components.

The present disclosure discusses systems and methods for providing a unified software build allowing multiple components of a software product to be built and released at the same time. The unified build can also enable testing of multiple components in a controlled environment before a public release of a software product.

In one aspect a computer implemented method of compiling source code of a software product including a plurality of components includes receiving at least one changelist identifying at least one component of the plurality of components testing the at least one component using a defined set of tests for each of the plurality of components approving the at least one changelist when testing of the at least one component identified in the changelist results in compliancy calculating dependencies between the plurality of components using the compliant at least one changelist and building the software product by concurrently building the plurality of components based on the calculated dependencies.

The received at least one changelist may be submitted by a user terminal which user terminal may be for example any client client device or client system . Building the software product may include building a first group of components concurrently which do not have a build dependency and building a second group of components concurrently which depend on the built first group of components. Same components in the first group of components and the second group of components may be built once.

The plurality of components may include at least one of a document editor a spreadsheet editor a presentation editor a drawing editor a document list manager a document format conversion application and an online clipboard application. The method may also include deploying the built software product to a testing environment. The at least one changelist may be received by a management system which automatically triggers the testing of the at least one component.

The tested at least one component may be compliant when the test returns a pass and may be non compliant when the test returns a fail and otherwise non deterministic. The method may also include performing a query to determine the approved changelists at a predetermined interval and calculating the build dependencies in response to the query. The built software product may be packaged and deployed into a production environment.

In another aspect a system for compiling source code of a software product including a plurality of components includes a testing system which tests at least one component of the plurality of components which is identified by at least one changelist and a build system which compiles the source code of the software product. The testing system tests the at least one component using a defined set of tests for each of the plurality of components and approves the at least one changelist when the testing of the at least one component identified by the changelist results in compliancy and the build system calculates dependencies between the plurality of components using the compliant at least one changelist and builds the software project by concurrently building the plurality of components based on the calculated dependencies.

The at least one changelist may be submitted by a user terminal. The build system may build the software product by building a first group of components concurrently which do not have a build dependency and building a second group of components concurrently which depend on the built first group of components. Same components in the first group of components and the second group of components may be built once.

The plurality of components may include at least one of a document editor a spreadsheet editor a presentation editor a drawing editor a document list manager a document format conversion application and an online clipboard application. The build system may deploy the built software product to a testing environment. The at least one changelist may be received by a management system which automatically triggers the testing of the at least one component.

The tested at least one component may be compliant when the test returns a pass and may be non compliant when the test returns a fail and otherwise non deterministic. The system may also include a control system which performs a query to determine the approved changelists at a predetermined interval and the build system may calculate the build dependencies in response to the query. The built software product may be packaged and deployed into a production environment.

In another aspect a non transitory computer readable medium may store instructions that when executed perform operations including receiving at least one changelist identifying at least one component of the plurality of components testing the at least one component using a defined set of tests for each of the plurality of components approving the at least one changelist when testing of the at least one component identified in the changelist results in compliancy calculating dependencies between the plurality of components using the compliant at least one changelist and building the software product by concurrently building the plurality of components based on the calculated dependencies.

The received at least one changelist may be submitted by a user terminal. Building the software product may include building a first group of components concurrently which do not have a build dependency and building a second group of components concurrently which depend on the built first group of components. Same components in the first group of components and the second group of components may be built once.

The plurality of components may include at least one of a document editor a spreadsheet editor a presentation editor a drawing editor a document list manager a document format conversion application and an online clipboard application. The operations may also include deploying the built software product to a testing environment. The at least one changelist may be received by a management system which automatically triggers the testing of the at least one component.

The tested at least one component may be compliant when the test returns a pass and may be non compliant when the test returns a fail and otherwise non deterministic. The operations may also include performing a query to determine the approved changelists at a predetermined interval and calculating the build dependencies in response to the query. The built software product may be packaged and deployed into a production environment.

The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings and from the claims.

The present disclosure through one or more of its various aspects embodiments and or specific features or sub components is thus intended to bring out one or more of the advantages as specifically noted below.

The systems and methods described below may be utilized in the production of a software product including a plurality of components which interact with one another. Examples of such components include but are not limited to a document editor a spreadsheet editor a presentation editor a drawing editor a document list manager a document format conversion application and an online clipboard application.

The source code configuration files documentation etc. of the software product is often created by one or more developers. To add a component to the software product or to modify an existing component such as to add or modify a feature or to add or modify a dependency between components developers create changelists. Each changelist identifies at least one software component which the developers desire to incorporate into the software product. Changelists identify the changes in components that have been deployed from different sites and different developers working simultaneously on updates within the same software product s .

The management system is a computer system which performs centralized revision control of new or revised components The management system may be for example a source code management SCM system a software configuration management system which manages changes to documents programs and other information a version control system VCS which is a stand alone application with revision control embedded in various types of software such as word processors spreadsheets etc. or a distributed revision control system DRCS in which a peer to peer approach allows a central repository on which clients may synchronize revisions. The management system is not limited to the described embodiments but may employ any system known in the art. Developers working on software components at user terminals such as local client workspaces may submit new or revised components to the management system along with a corresponding changelist. When a changelist is submitted to the management system an automated monitoring mechanism triggers testing of the component by the testing system . The automated monitoring mechanism may be for example a custom script or program that runs on the management system upon receiving the changelist. Although an automatic monitoring mechanism is used in the exemplary embodiment the disclosure is not limited to automatic detection. For example the management system may be set to receive and submit changelist s at various intervals or wait to be prompted by a command before execution of the aforementioned processes.

The testing system is for example a computer system dedicated to running tests. The testing system runs tests on each of the components identified by the changelist. A set of tests is defined for each of the components of the software product. The changelist may also define a test or set of tests to be run on the components. At the conclusion of each test the test system generates the result as one of passing failing or non deterministic such as when there is a time out or tool failure . A component is determined to be compatible with a product when it passes the tests of the defined set of tests for the component. When each component in the changelist has passed the set of tests the testing system approves the changelist. That is when testing results in a pass the component is compliant with a software product specification. When a test results in failed or non deterministic the component is non compliant and further revision is required to the component or other components . It is appreciated that the testing system is not limited to the described embodiment and need not be a dedicated system.

The control system is for example a computer system which controls a release workflow of the software product. At a predetermined interval such as once a day the control system may query the testing system to gather approved changelist s . This may be accomplished for example by the testing system running an application programming interface API which performs a query function that returns the approved changelist s . As described further below the approved changelists may provide a baseline for building the components of the software concurrently. It is also appreciated that the control system is not limited to queries at predetermined intervals but may perform any number of queries at any time.

The build system is for example a computer system which compiles source code of the software product. After the control system queries the testing system the control system instructs the build system to build the software product using the components of the approved changelist s . At this time the build system calculates a dependency tree representing dependencies of the components towards each other described below in more detail . That is for each of the components the build system generates a dependency tree that determines whether a component relies upon any other component in order for it to be built. Thus a build dependency is calculated for each of the components. It is appreciated that while a dependency tree is calculated in the exemplary embodiment the disclosure is not limited to such an embodiment. Any form of table chart algorithm or otherwise may be used to map dependencies as readily appreciated by the skilled artisan.

After the build system builds the software product with the components the control system packages the concurrently built components and deploys them for additional testing. At a predetermined interval such as once a week a release branch can automatically be cut and the software product can be pushed to a wider audience such as quality assurance testers and internal users. At this time integration testing and manual exploratory testing can be performed in addition to the testing already performed and the software product can be patched for example to fix bugs or change configurations. Changelists later than the branch cut can be down integrated by request and release candidates can be built off the release branch as readily understood by the skilled artisan. Sometime later such as a week later after the software product has been patched as necessary it can be released to the general public. It is also appreciated that the control system is not limited to queries at predetermined intervals but may perform any number of queries at any time and is compliant with the software product specification.

Once the changelist s have been tested a query is performed by the control system to determine the approved changelist s . This may be accomplished for example by the testing system running an application programming interface API which performs a query function that returns the approved changelist s to the control system or by any well known method for approving changelist s . After determining the approved changelist s the process continues at . At build dependencies of software product are calculated using the approved changelist s determined at . This may be accomplished for example by the build system calculating a dependency tree representing dependencies of the components towards one another. It is appreciated that while a dependency tree is calculated in the exemplary embodiment the disclosure is not limited to such an embodiment. Any form of table chart algorithm or otherwise may be used to map dependencies as readily appreciated by the skilled artisan.

After the build dependencies have been calculated at the software product is built using the approved changelist s and based on the calculated build dependencies. This may be accomplished for example by the build system concurrently building a first group of components of the software product which do not have a build dependency then building other components and sub components which depend on the first group of components. In so doing the build system concurrently builds as many components and sub components in a concurrent parallel manner based on the calculated dependencies as explained in more detail with reference to . After the software product is built it may be deployed to a testing environment at .

At the built software product may be deployed to a testing environment where the software product may be used by developers etc. and further testing may be performed and fixes can be made. A release branch can be cut appropriately and the software product can be pushed to a wider audience for testing where integration testing and manual exploratory testing can be performed.

As illustrated in the computer includes a processor and memory which is representative of one or more various memories that may be used by the computer . These memories may include one or more random access memories read only memories and programmable read only memories etc. Computer also includes at least one display which may be provided in any form including a cathode ray tube a LED display an LCD display and a plasma display etc. The display may include provisions for data entry such as by including a touch sensitive screen or by providing eye movement detection technology. Additional output devices may include an audio output device such as a speaker .

Computer further includes one or more input devices. Input devices may include an alpha numeric input device such as a keyboard a cursor controller such as a mouse touch pad or joy stick and a microphone . Computer also enables processor to communicate with one or more remote devices over a network external to computer . Communications internal to computer primarily uses bus .

In an alternative embodiment dedicated hardware implementations such as application specific integrated circuits programmable logic arrays and other hardware devices can be constructed to implement one or more of the methods described herein. Applications that may include the apparatus and systems of various embodiments can broadly include a variety of electronic and computer systems. One or more embodiments described herein may implement functions using two or more specific interconnected hardware modules or devices with related control and data signals that can be communicated between and through the modules or as portions of an application specific integrated circuit. Accordingly the present system encompasses software firmware and hardware implementations.

In accordance with various embodiments of the present disclosure the methods described herein may be implemented by software programs executable by a computer system. Further in an exemplary non limited embodiment implementations can include distributed processing component object distributed processing and parallel processing. Alternatively virtual computer system processing can be constructed to implement one or more of the methods or functionality as described herein.

Those skilled in the art of course appreciate that the various features and embodiments of the above described systems may be implemented as a program or code segment which are executable for causing a server computer or system to operate in accordance with the above described systems.

Although the disclosed subject matter has been described with reference to several exemplary embodiments it is understood that the words that have been used are words of description and illustration rather than words of limitation. Changes may be made within the purview of the appended claims as presently stated and as amended without departing from the scope and spirit of the disclosed subject matter. Although the subject matter has been described with reference to particular means materials and embodiments the subject matter is not intended to be limited to the particulars disclosed rather the disclosure extends to all functionally equivalent structures methods and uses such as are within the scope of the appended claims.

While a computer readable medium may be described as a single medium the term computer readable medium includes a single medium or multiple media such as a centralized or distributed database and or associated caches and servers that store one or more sets of instructions. The term computer readable medium shall also include any medium that is capable of storing encoding or carrying a set of instructions for execution by a processor or that cause a computer system to perform any one or more of the embodiments disclosed herein.

In a particular non limiting exemplary embodiment a computer readable medium can include a solid state memory such as a memory card or other package that houses one or more non volatile read only memories. Further the computer readable medium can be a random access memory or other volatile re writable memory. Additionally the computer readable medium can include a magneto optical or optical medium such as a disk or tapes or other storage device. Accordingly the disclosure is considered to include any computer readable medium or other equivalents and successor media in which data or instructions may be stored.

Although the present disclosure describes specific embodiments which may be implemented as code segments in computer readable media it is to be understood that dedicated hardware implementations such as application specific integrated circuits programmable logic arrays and other hardware devices can be constructed to implement one or more of the embodiments described herein. Applications that may include the various embodiments set forth herein may broadly include a variety of electronic and computer systems. Accordingly the present disclosure may encompass software firmware and hardware implementations or combinations thereof.

The illustrations of the embodiments described herein are intended to provide a general understanding of the various embodiments. The illustrations are not intended to serve as a complete description of all of the elements and features of apparatus and systems that utilize the structures or methods described herein. Many other embodiments may be apparent to those of skill in the art upon reviewing the disclosure. Other embodiments may be utilized and derived from the disclosure such that structural and logical substitutions and changes may be made without departing from the scope of the disclosure. Additionally the illustrations are merely representational and may not be drawn to scale. Certain proportions within the illustrations may be exaggerated while other proportions may be minimized. Accordingly the disclosure and the figures are to be regarded as illustrative rather than restrictive.

The Abstract is provided to comply with 37 C.F.R. 1.72 b and is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description various features may be grouped together or described in a single embodiment for the purpose of streamlining the disclosure. This disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter may be directed to less than all of the features of any of the disclosed embodiments. Thus the following claims are incorporated into the Detailed Description with each claim standing on its own as defining separately claimed subject matter.

The above disclosed subject matter is to be considered illustrative and not restrictive and the appended claims are intended to cover all such modifications enhancements and other embodiments which fall within the true spirit and scope of the present disclosure. Thus to the maximum extent allowed by law the scope of the present disclosure is to be determined by the broadest permissible interpretation of the following claims and their equivalents and shall not be restricted or limited by the foregoing detailed description.

