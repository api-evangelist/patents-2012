---

title: Continuous change data capture without disruption of DDL
abstract: A system, method and computer-readable medium for data capture for replication are provided. A data record from a transaction log of a source database indicative of a data element change is retrieved. A DDL command is generated from the retrieved data record. Once generated, the DDL command is distributed for replication to a target database such that the source database and the target database are synchronized.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09305070&OS=09305070&RS=09305070
owner: Sybase, Inc.
number: 09305070
owner_city: Dublin
owner_country: US
publication_date: 20121231
---
A replication agent allows users to maintain data in separate databases. For example a replication agent replicates data from a source database to a target database. After replication the target database contains accurate and current copies of data found in the source database. This ensures that the data in the source and target databases is synchronized and allows a user to retrieve data from either a source or a target database as well as rely on the target database in case of the source database failure.

Conventionally a source database includes transaction logs to which it writes data definition language DDL commands data manipulation language DML commands data control language DCL commands and or transaction control language TCL commands. The DDL commands define tables schemas indexes etc. in the source database. Example data definition statements include statements for making changes to data elements. Example changes to data elements include adding or deleting a table truncating a table adding a column to a table removing a column from a table and adding an index to a table to name a few examples. To replicate those DDL commands a conventional replication agent reads the transaction logs in the source database identifies the DDL commands and transmits those DDL commands to target databases.

Some source databases do not write log records for changes to data elements such as tables schemas indexes etc. As a result DDL and other commands are not stored in transaction logs of the source database. However in a heterogeneous system environment target databases may require DDL commands to change their tables schemas indexes etc. so that they are synchronized with the non schema based databases. Whether a database does or does not require DDL commands to change data elements is of little difference to the user provided the user s view of the data is consistent. The user however relies on data synchronization between the source and target databases in the heterogeneous database system. As a result there is a need for an improved replication technique to synchronize databases that do not write log records for changes to data elements such as DDL and other commands with the databases that require log records to maintain information associated with tables schemas and indexes.

Additionally some source databases do not allow direct access to their transaction logs. This occurs when a source database and a target database are developed by different parties who want to restrict access to data. Instead an application programming interface API may be provided to retrieve data from the transaction logs. Therefore there is also a need for a replication technique to synchronize a source and target databases using data records retrieved from transaction logs of the source database using an API.

Disclosed embodiments include systems methods and computer readable media for data capture for replication. A data record from a transaction log of source database indicative of a data element change is retrieved. A DDL command is generated from the retrieved data record. Once generated the DDL command is distributed for replication to a target database such that the source database and the target database are synchronized.

Further features and advantages of the invention as well as the structure and operation of various embodiments of the invention are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to a person skilled in the relevant art s based on the teachings contained herein.

The invention will now be described with reference to the accompanying drawings. In the drawings generally like reference numbers indicate identical or functionally similar elements. Additionally generally the left most digit s of a reference number identifies the drawing in which the reference number first appears.

The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments consistent with this invention. Other embodiments are possible and modifications can be made to the embodiments within the spirit and scope of the invention. Therefore the detailed description is not meant to limit the invention. Rather the scope of the invention is defined by the appended claims.

Source database may be any type of a database and may include but is not limited to a device having a processor and a memory for executing and storing instructions. Source database may include software firmware and hardware or any combination thereof. The software may include one or more applications that create delete and modify database tables schemas indexes data etc. stored in those tables. The hardware may include a processor and a memory.

Source database stores data in a set of tables as defined by a developer another system or a user. Source database receives transactions from a user or another computing device that may manipulate data included in the database as well as tables schemas indexes etc. Example transactions include retrieving adding modifying and deleting data tables and indexes in source database .

In another embodiment source database does not store log records that include explicit changes to its tables columns or indexes. A person skilled in the art will appreciate that those log records may include data records such as DDL or other commands that may describe changes to the organization and structure of data in the database. The log records may include changes that add modify or delete tables columns data types and indexes to name a few examples. An example database that does not store log records that include explicit changes such as DDL commands to tables columns or indexes may be a DB2 relational database developed by IBM of Armonk N.Y.

Target database is a database in database system that includes a copy of the state data tables data types indexes etc. of source database . Target database may also include but is not limited to a device having a processor and a memory for executing and storing instructions. Target database may include software firmware and hardware or any combination thereof. The software may include one or more applications that create delete and modify database tables schemas indexes data etc. stored in those tables. The hardware may include a processor and a memory.

Target database may be a database that uses DDL or other commands to manipulate tables indexes and schemas.

When changes to data tables indexes occur in source database as part of user or system initiated transactions database system replicates those changes to target database such that source database and target database are synchronized.

In an embodiment source database and target database are synchronized over a network not shown . A network may be any type of a network or combination of networks such as but not limited to a local area network wide area network or the Internet. A network may be any form of a wired network or a wireless network or a combination thereof. Also a network allows source database replication agent replication server and target database to communicate among each other.

Replication agent and replication server allow for synchronization between source database and target database . Replication agent retrieves transactions from source database and distributes them to target databases using replication server . When transactions are successfully processed by target database source database and target database become synchronized.

Source database includes transaction logs . Transaction logs store data records that include data that is replicated by replication agent to target databases . Example transaction logs may include text logs database tables etc. Transaction logs may be created and or maintained by source database . In some embodiments transaction logs may also be created and or maintained by replication agent .

Replication agent replicates transactions for tables and schemas stored in transaction logs of source database . To replicate each transaction replication agent scans transaction logs for data records having relevant transactions. When replication agent identifies relevant transactions in transaction logs it communicates those transactions to replication server . Replication agent may be a stand alone application that is independent of source database replication server or other components in database system . Replication agent may also execute on the same or different computing device as source database replication server and target database .

Replication server receives and processes transactions and data received from replication agent . Replication server disseminates those transactions to target databases or other replication servers where they are processed. In an embodiment replication server may guarantee the transaction delivery. When transaction delivery is guaranteed each transaction successfully received from replication agent is guaranteed for delivery to an appropriate target database .

A conventional replication agent scans data records in transaction logs of a source database and distributes them to target databases. However in a heterogeneous database environment that includes multiple source and target databases several issues arise. First a conventional source database may be a database that does not generate explicit log records for commands such as DDL commands that modify tables columns or indexes in the source database whereas a target database relies on the DDL commands to maintain its tables columns and indexes. In this case log records that pertain to changes made to tables indexes and schemas cannot be distributed from source database to target database because data in data records does not mean the same thing to the source database as it does to the target database. Second source database replication agent and target database may be designed by different vendors where each vendor may specify access restrictions to transaction logs. This means that a conventional replication agent may be restricted from accessing transaction logs from which it would otherwise be able to retrieve data for synchronization.

As described in detail in below replication agent synchronizes source database and a target database where source database does not generate log records for commands that modify tables columns or indexes by way of non limiting example. Moreover replication agent also uses an API to access transaction logs of sources database that may otherwise be unavailable to replication agent .

Replication agent includes a log access interface a DDL generator a DDL distributor and a replication agent system database RASD . Log access interface retrieves transactions from transaction logs of source database . As described herein log access interface may access transaction logs using an API associated with source database .

Transaction logs of source database may include a single transaction log or multiple transaction logs. Data records stored in transaction logs may represent changes to tables columns or indexes that are not stored as explicit DDL commands. Those changes may be stored as a single data record or a combination of data records that are included in a single or multiple transaction logs . In an embodiment a data record may include a function identifier that has a value indicative to the action performed by a transaction stored in a data record. In a non limiting example function identifier having a value A may indicate that a table was created function identifier having a value B may indicate that a column was added and a function identifier having a value C may indicate that a column was dropped to name a few examples.

In an embodiment transaction logs include data management system log also referred to as DMS log and data object manager log also referred to as DOM log . Log access interface uses an API to access DMS log DOM log or both to retrieve data records for transactions occurring in source database . In a Non limiting example DMS log includes data records for adding column s to a table undoing added column s from a table altering a column s undoing the altering to a column s renaming a schema or a table undoing the renaming of the schema or a table and altering a table attribute to name a few examples. In another non limiting example DOM log includes data for creating an index on a table dropping an index dropping a table truncating a table creating a table and undoing the creation of a table to name a few examples.

In an embodiment source database may be configured to generate transaction logs at a particular detail level. For example a transaction log level may be set to store data records for all transactions that are associated with data tables schemas and index changes that are performed on source database . In an embodiment replication agent may set transaction logs to a detail level that is required to retrieve information for replicating DDL commands in replication agent .

When log access interface retrieves data records from source database DDL generator included in replication agent generates DDL commands from the retrieved data records. A person skilled in the art will appreciate that the generated DDL commands may be distributed to target databases that accept and process the DDL commands such that the data in the source database and target databases is synchronized.

In an embodiment DDL generator generates a DDL command compatible with a target database that requires DDL and other commands to maintain schema changes to tables columns indexes etc. This ensures that the DML commands that manipulate data in target database are processed properly subsequent to a schema change in source database .

In an embodiment DDL generator generates a DDL command from a data record in a single transaction log such as DMS or DOM . In another embodiment DDL generator generates a DDL command from the data records in multiple transaction logs such as DMS and DOM . For example DDL generator generates a DDL command that creates a table using data records from DMS DOM or both. In one example DDL generator may receive a data record retrieved from DOM that includes an identifier that a new table T was created. DDL generator may then store this information in memory until it identifies data records from DMS that include an identifier that indicate that columns X Y and Z were added to the created table T . In another embodiment DDL generator may receive a data record from DMS that includes an identifier that indicates that a column from a table was deleted in source database . Once data records for a particular function are identified DDL generator uses the data records to reconstruct a DDL command that indicates that a column was deleted.

In an embodiment DDL generator may use a predetermined set of rules to generate a particular DDL command using identifiers included in the data records. The rules for example may describe how a DDL command is generated from a data record or multiple data records having particular function identifiers.

Once the DDL command is reconstructed replication agent may store the reconstructed DDL command in RASD . RASD is a database associated with replication agent and may include but is not limited to a device having a processor and a memory for executing and storing instructions. RASD may include software firmware and hardware or any combination thereof. The software may include one or more applications that create delete and modify database tables schemas indexes data etc. stored in those tables. The hardware may include a processor and a memory.

In another embodiment replication agent may store copies of tables columns indexes etc. included in source database in RASD . Those copies may be created from the reconstructed DDL commands or loaded into RASD using a daily weekly or nightly upload from source database . In this embodiment replication agent may also apply the reconstructed DDL command to tables schemas indexes etc. that are stored in RASD . In this way the schema of target database may be generated or reinstated by accessing RASD in replication agent .

In an embodiment RASD may also include rules that DDL generator uses to reconstruct DDL commands. Those rules may be reconfigured or updated by for example a system administrator in replication agent . For example source database may add an additional function identifier that indicates a new function in a data record. RASD may then be updated with the rules that process the data record having a new identifier.

Once reconstructed DDL generator passes the generated DDL commands to DDL distributor . DDL distributor distributes the reconstructed DDL commands to replication server . Replication server then distributes the reconstructed DDL commands to target databases . In an embodiment DDL distributor may distribute DDL commands over a network and according to method known to a person of ordinary skill in the art. Because the reconstructed DDL commands are distributed to target databases DML and other commands that manipulate data in source database are properly replicated to target databases before and after changes are made to tables columns and or indexes of source database .

At step a data record from a transaction log is retrieved. For example log access interface retrieves data records from transaction logs of source database that does not generate explicit DDL or other commands that indicate changes to a schema. In an embodiment an API is used to retrieve data records. As described herein an identifier in the data record indicates a change in a table index etc. in source database .

At step a DDL command is generated. For example a DDL command is generated from the retrieved data record s . As described herein DDL generator generates a DDL command using identifiers that indicate the function of the transaction in the data record. As also described herein a DDL command may be generated from one or more data records that maybe be stored in different transaction logs such as DOM and DMS . For example DDL generator may receive a data record that includes an identifier that a new table was created. DDL generator may store this data in RASD . DDL generator may then identify data records from DMS that include an identifier that indicates for example that three columns were added to the new table. Once DDL generator identifies the columns added to the new table DDL generator may retrieve the stored data from RASD and reconstruct a DDL command that indicates that a table having three columns was created in data source . In another embodiment DDL generator may receive a data record from DMS that includes an identifier that indicates that a column from a table was deleted in source database . Once data records for a particular function are identified DDL generator uses the data records to reconstruct a DDL command that indicates that a column was deleted.

At step a generated DDL command is distributed. For example DDL distributor distributes the generated DDL command to replication server . Replication server then distributes the DDL command to target databases .

Various aspects of the invention can be implemented by software firmware hardware or a combination thereof. illustrates an example computer system in which the invention or portions thereof can be implemented as computer readable code. For example the methods illustrated by flowcharts described herein can be implemented in system . Various embodiments of the invention are described in terms of this example computer system . After reading this description it will become apparent to a person skilled in the relevant art how to implement the invention using other computer systems and or computer architectures.

Computer system includes one or more processors such as processor . Processor can be a special purpose or a general purpose processor. Processor is connected to a communication infrastructure for example a bus or network .

Computer system also includes a main memory preferably random access memory RAM and may also include a secondary memory . Secondary memory may include for example a hard disk drive a removable storage drive and or a memory stick. Removable storage drive may comprise a floppy disk drive a magnetic tape drive an optical disk drive a flash memory or the like. The removable storage drive reads from and or writes to a removable storage unit in a well known manner. Removable storage unit may comprise a floppy disk magnetic tape optical disk etc. which is read by and written to by removable storage drive . As will be appreciated by persons skilled in the relevant art s removable storage unit includes a computer usable storage medium having stored therein computer software and or data.

In alternative implementations secondary memory may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include for example a removable storage unit and an interface not shown . Examples of such means may include a program cartridge and cartridge interface such as that found in video game devices a removable memory chip such as an EPROM or PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer system .

Computer system may also include a communications and network interface . Communication and network interface allows software and data to be transferred between computer system and external devices. Communications and network interface may include a modem a communications port a PCMCIA slot and card or the like. Software and data transferred via communications and network interface are in the form of signals which may be electronic electromagnetic optical or other signals capable of being received by communication and network interface . These signals are provided to communication and network interface via a communication path . Communication path carries signals and may be implemented using wire or cable fiber optics a phone line a cellular phone link an RF link or other communications channels.

The communication and network interface allows the computer system to communicate over communication networks or mediums such as LANs WANs the Internet etc. The communication and network interface may interface with remote sites or networks via wired or wireless connections.

In this document the terms computer program medium and computer usable medium and computer readable medium are used to generally refer to media such as removable storage unit removable storage drive and a hard disk installed in hard disk drive . Signals carried over communication path can also embody the logic described herein. Computer program medium and computer usable medium can also refer to memories such as main memory and secondary memory which can be memory semiconductors e.g. DRAMs etc. . These computer program products are means for providing software to computer system .

Computer programs also called computer control logic are stored in main memory and or secondary memory . Computer programs may also be received via communication and network interface . Such computer programs when executed enable computer system to implement embodiments of the invention as discussed herein. In particular the computer programs when executed enable processor to implement the processes of the invention such as the steps in the methods illustrated by flowcharts discussed above. Accordingly such computer programs represent controllers of the computer system . Where the invention is implemented using software the software may be stored in a computer program product and loaded into computer system using removable storage drive interfaces hard drive or communication and network interface for example.

The computer system may also include input output display devices such as keyboards monitors pointing devices etc.

The invention is also directed to computer program products comprising software stored on any computer useable medium. Such software when executed in one or more data processing device s causes a data processing device s to operate as described herein. Embodiments of the invention employ any computer useable or readable medium known now or in the future. Examples of computer useable mediums include but are not limited to primary storage devices e.g. any type of random access memory secondary storage devices e.g. hard drives floppy disks CD ROMS ZIP disks tapes magnetic storage devices optical storage devices MEMS nanotechnological storage device etc. and communication mediums e.g. wired and wireless communications networks local area networks wide area networks intranets etc. .

The invention can work with software hardware and or operating system implementations other than those described herein. Any software hardware and operating system implementations suitable for performing the functions described herein can be used.

It is to be appreciated that the Detailed Description section and not the Summary and Abstract sections is intended to be used to interpret the claims. The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the invention as contemplated by the inventor s and thus are not intended to limit the invention and the appended claims in any way.

The invention has been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.

The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can by applying knowledge within the skill of the art readily modify and or adapt for various applications such specific embodiments without undue experimentation without departing from the general concept of the invention. Therefore such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation such that the terminology or phraseology of the specification is to be interpreted by the skilled artisan in light of the teachings and guidance.

The breadth and scope of the invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

