---

title: Evaluating application compatibility
abstract: Disclosed are various embodiments for evaluating application compatibility with computing devices. A set of applications is determined and then filtered to exclude those applications which are incompatible with a particular client. The filtering is performed by determining a capability set for the client and performing an evaluation of a compatibility expression for each application using the capability set to determine whether each application is compatible with the client. The filtered set of applications is returned and may be used in user interfaces associated with an application marketplace system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189220&OS=09189220&RS=09189220
owner: Amazon Technologies, Inc.
number: 09189220
owner_city: Seattle
owner_country: US
publication_date: 20120702
---
Many different types of mobile devices are available from smartphones with small display screens and limited feature sets to tablet computers with large display screens and extensive feature sets. Applications written for one type of mobile device may not be compatible with another type of mobile device. As an example an application that takes photos may be incompatible with mobile devices which lack cameras. As another example an application may have a user interface designed for a certain minimum display resolution and may be incompatible with mobile devices having a display resolution below the minimum.

The present disclosure relates to evaluating application compatibility. An application marketplace typically includes numerous applications which may or may not be compatible with any given device. When a customer browses or executes a search in an application marketplace it is desirable to avoid presenting incompatible applications to the customer. For example excluding incompatible applications from a user interface for the application marketplace reduces clutter. In addition excluding incompatible applications prevents a poor customer experience resulting from accidental installation or execution of incompatible applications.

Various embodiments of the present disclosure provide approaches to evaluating the compatibility of one or more applications with a client which may be used to filter or exclude incompatible applications from a user interface for an application marketplace. To this end compatibility expressions may be automatically constructed for an application in response to the application being added to the application marketplace. Client capability data for clients may be obtained. When the customer browses or searches the application marketplace for applications to install on a client the results are filtered to exclude applications which are incompatible with the client. The filtering is performed based at least in part on an evaluation of the compatibility expressions for the applications with respect to the client capability data for the client. The incompatible applications may then be excluded from selection by the customer or may even excluded from being surfaced to the customer. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing environment in data communication with one or more developer clients and one or more clients by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed in the computing environment that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include a developer portal system an application ingestion service an application marketplace system a compatibility evaluation service and other applications services processes systems engines or functionality not discussed in detail herein. The developer portal system is executed to generate user interfaces and perform functionality related to maintaining the presence of a developer in an application marketplace. A developer as used herein may correspond to a user or business entity corresponding to a source or distributor of an application . The developer portal system may allow a developer at a developer client to submit or upload applications establish pricing for applications establish metadata for applications customize merchandising for the applications in the application marketplace and or perform other functions.

Once a developer provides an application to the developer portal system the application ingestion service may be executed to add the application to the application marketplace. The application ingestion service may perform various tasks relating to configuring the application marketplace to offer the application . For example the application ingestion service may determine various requirements of the application such as supported operating systems supported display resolutions or sizes supported wireless carriers processor requirements memory requirements and so on.

The application marketplace system is executed to provide user interfaces and perform various backend functionality relating to an application marketplace. An application marketplace facilitates user acquisition of applications to be installed on clients . The applications may be provided by many different developers. Such acquisition may include purchases and downloads free downloads trial downloads upgrades unlocking and or other types of acquisitions. The application marketplace system facilitates user searching of available applications and or browsing of applications according to genre category title release date and so on. The application marketplace system may perform user authentication and charging of various payment instruments such as credit cards electronic checks lines of credit gift cards etc. to facilitate electronic payment for applications .

The application marketplace system is configured to obtain registrations of client capabilities and search requests from clients . In response to search requests the application marketplace system is configured to return search results to the clients over the network . In some embodiments the search results may be pre filtered to exclude incompatible applications . In other embodiments the search results may be provided to the client for compatibility filtering to be performed in the client . Although the search results may be generated in response to search queries the search results may also be generated in response to search requests for category listings popular applications listings and or other predefined or dynamically generated listings of applications .

The application marketplace system the developer portal system or both may comprise commercially available hypertext transfer protocol HTTP server applications such as Apache HTTP Server Apache Tomcat Microsoft Internet Information Services IIS and or other servers. The application marketplace system the developer portal system or both may employ HTTP simple object access protocol SOAP representational state transfer REST and or other networking protocols.

The compatibility evaluation service is executed to evaluate whether a particular application is compatible or incompatible with a particular set of capabilities for a client . To this end the compatibility evaluation service may perform variable substitution into a compatibility expression generated for a particular application . In one embodiment the compatibility expression corresponds to a postfix expression which is evaluated by the compatibility evaluation service using a stack.

The data stored in the data store includes for example applications application requirements data business rules compatibility expressions client capabilities data with capability sets and identifiers application marketplace data customer data and potentially other data. The applications in the data store correspond to those applications which have been provided by developers for inclusion in the application marketplace. The applications may include for example mobile applications hypertext markup language 5 HTML5 applications desktop applications and or other applications.

The application requirements data includes the various application requirements for each of the applications . Such requirements may include security requirements feature requirements and or other requirements for the clients to meet before an application may be downloaded and or installed onto the clients . Such requirements may be determined from a manifest or other file included in the application . Additionally such requirements may be ascertained by way of analyzing the code of the application executing the code of the application and determining which features are accessed and or by other approaches. In some cases the requirements may be manually specified by a developer at the developer client through a user interface generated by the developer portal system .

The business rules may include arbitrary rules that may determine whether applications are compatible with specific capability sets . For business reasons either on behalf of the proprietor of the application marketplace or the developer it may be desirable not to offer certain applications for acquisition and installation on certain clients . As a non limiting example if the proprietor of the application marketplace offers mapping applications for certain tablet clients the business rules may specify that mapping applications from other sources are not compatible with the tablet clients . As another example a business rule may specify that certain applications are incompatible with mobile clients associated with wireless carriers other than a particular exclusive wireless carrier.

The compatibility expressions may be generated by the application ingestion service from the application requirements data and the business rules which pertain to an application . In one embodiment the compatibility expressions correspond to a listing of terms comprising operands and operators. The operands may include variables and constants. The operators may include for example logical operators comparison operators arithmetic operators set operators and so on. In some cases an operator may be associated with a predetermined number of operators e.g. two operands or another number. The compatibility expressions may be provided in prefix infix or postfix notation. In one embodiment the compatibility expressions may be in postfix notation for stack based evaluation.

The client capabilities data includes data that describes the capabilities or characteristics associated with various clients . Such capabilities or characteristics may determine whether an application is compatible with the corresponding clients . The client capabilities data includes multiple capability sets where each capability set may correspond to multiple clients having the same capabilities. Each capability set may specify for example an operating system version a wireless carrier installed applications and libraries whether the client has a global positioning system GPS device whether the client has a camera the processor of the client the memory of the client and so on. Each capability set is associated with an identifier which identifies the capability set .

The application marketplace data includes various data associated with the application marketplace provided by the application marketplace system . For example the application marketplace data may include pricing information order information metadata for applications information pages category and taxonomy structures reviews ratings screenshots and or other data that may be employed in merchandising applications . The customer data may include various data regarding users of the application marketplace system . Such data may include security credentials browsing history order history identifiers for registered devices and or other information.

The developer client is representative of a plurality of client devices operated by developers that may be coupled to the network . The developer client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability.

The developer client may be configured to execute various applications such as a browser and or other applications. The browser may be executed in a developer client for example to access and render network pages such as web pages or other network content served up by the developer portal system and or other servers thereby generating a rendered network page on a display. The developer client may be configured to execute applications beyond a browser such as for example mobile applications email applications instant message applications and or other applications.

The client is representative of a plurality of client devices operated by customers or prospective customers that may be coupled to the network . The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer a mobile computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client may include a display . The display may comprise for example one or more devices such as liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc.

The client may be configured to execute various applications such as a client application and or other applications. The client application is configured to render a user interface on the display to facilitate browsing and searching the application marketplace and purchasing downloading and installing applications from the application marketplace. In one embodiment the client application corresponds to a mobile application for the application marketplace. In another embodiment the client application corresponds to a browser employed for example to access and render network pages such as web pages or other network content served up by the application marketplace system and or other servers. The client may be configured to execute applications beyond client application such as for example mobile applications email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin a developer at a developer client interacts with the developer portal system to submit one or more applications to be included in the application marketplace. In some cases multiple versions of an application may be submitted. Also as new versions of the application are released the new versions may be submitted. The new versions may for example coexist with or replace previous versions. The applications may be uploaded to the developer portal system or the developer portal system may be configured to download the applications from another source. Other approaches to submission of applications may be employed in other embodiments.

The application ingestion service then processes each application that has been submitted for inclusion in the application marketplace. To this end the application ingestion service may determine the various requirements of the application . Such requirements may be manually specified by the developer and or automatically determined. For example the application ingestion service may launch the application and determine which resources that the application attempts to access. Alternatively or additionally the application ingestion service may inspect the code of the application to assess what features resources etc. are used by the application . Further the application ingestion service may determine requirements based at least in part on a manifest or other configuration file for the application if present. The application ingestion service then creates a compatibility expression for the application from the application requirements data and any applicable business rules .

Separately customers may establish accounts and or identities with the application marketplace system . As part of this process each of the customers may register one or more clients with the application marketplace system . A customer may download and install the client application to facilitate this registration process. Alternatively where the client application is a browser the customer may browse to a network site served up by the application marketplace system . The network site may then load various client executable code onto the browser that performs the registration process.

As part of registration the client application may interrogate the client to ascertain the various capabilities of the client . For example the client application may determine the current operating system version software libraries that are installed whether a GPS device is present whether a camera is present the current wireless carrier and or other characteristics features etc. of the client . Although the discussion herein primarily relates the capabilities to the client device the capabilities may additionally or alternatively relate to the client application . As a non limiting example where the client application is a browser it may be determined whether the client application supports HTML5 what HTML5 features are supported and so on.

The client application then reports the client capabilities to the application marketplace system . After initial registration the client application may be configured to interrogate the client and report the client capabilities periodically e.g. monthly bimonthly etc. in response to a capability change upon accessing the application marketplace system and or at other times. The application marketplace system then matches the client capabilities with a pre existing capability set if one exists. If one does not exist the application marketplace system may create a new capability set in the data store from the client capabilities and assign a new identifier to it. The identifier associated with the applicable capability set may then be associated with the client in the customer data stored on the client as a cookie transferred to the client for use by the client application or otherwise associated with the client .

A customer may then access various user interfaces of the application marketplace through the client application . Data may be sent over the network between the client application and the application marketplace system to facilitate generating and rendering of the user interfaces . In one embodiment the user interfaces may correspond to rendered web pages. In another embodiment the user interfaces may correspond to mobile application screens. Through the user interfaces the customer may browse and or search through the applications offered by the application marketplace. The customer may enter a search query and or access a user interface configured to present certain applications . In doing so the client application may send a search request to the application marketplace system .

In response the application marketplace system obtains a list of applications for example by executing a search using the search query or retrieving a predefined list. The applications in the list although perhaps meeting criteria for popularity freshness relevance to the search query price etc. may or may not be compatible with the client . According to various embodiments filtering is performed to exclude applications and or versions of applications which are incompatible with the client .

In one embodiment the filtering is performed server side by the application marketplace system . To this end the application marketplace system may query the compatibility evaluation service to determine whether each application in the list of applications is compatible with the client . Each query may provide an identifier for the capability set of the client along with a corresponding identifier for the respective application . Where the queries are transmitted as service calls over a network the application marketplace system may be configured to batch the queries or service calls to minimize the impact of network latency. The filtered list of applications or at least a portion thereof is then sent to the client by way of the network .

In another embodiment the filtering is performed client side by the client . In other words a list of applications that may include incompatible applications is sent to the client in the search results . The client application then may make one or more service calls to the compatibility evaluation service to determine whether each of the applications is compatible with the client . In such service calls the client application may pass the identifier or information that may be used to determine the identifier along with the corresponding identifier for each application . The client application may be configured to batch the queries or service calls to minimize the impact of network latency. The results of the evaluations may be cached in the client in one embodiment.

When the filtered list of applications or at least a portion thereof is available at the client the client application renders a user interface presenting one or more applications from the list of applications that are compatible. The user interface may include one or more links or other user interface components for navigating to detail pages or screens for the applications . Additionally the user interface may include one or more links or other user interface components for initiating an acquisition of one of the applications e.g. purchase and download free download upgrade of an existing installation etc. .

In some cases the search request and or the evaluation queries to the compatibility evaluation service may provide various mutable capability characteristics associated with the client . For example in one embodiment the stored capability sets may include immutable characteristics for the client while mutable characteristics may be supplied by the client to enable the filtering. Such mutable capability characteristics may include for example the current operating system version the current wireless carrier and so on.

Although functionality has been described regarding the capability of the client initiating the search request for applications to be installed on the client in other embodiments a search request may specify an identifier associated with a different client . For instance customers may wish to browse mobile applications which are compatible with their smartphones from their desktop computer. In such a case customers may manually identify or select from previously registered devices thereby selecting an identifier which differs from that of the client being used.

The compatibility evaluation service obtains queries specifying an identifier of an application an identifier of a capability set as well as potentially a version identifier of the application and mutable capability characteristics and performs an evaluation to determine whether the application is compatible with the capability set . To this end the compatibility evaluation service obtains a compatibility expression corresponding to the application and version if applicable and substitutes variables in the compatibility expression according to the values in the capability set and mutable capability characteristics if applicable . The compatibility evaluation service may also perform translation of the compatibility expression from infix to postfix notation and or other translations if applicable. In one embodiment the compatibility evaluation service evaluates the compatibility expression using a stack. The result of the evaluation indicates whether the application is compatible or incompatible with the given capability set and mutable capability characteristics if applicable . The result may be cached in the data store and utilized in lieu of a future request to the compatibility evaluation service if desired.

Turning now to shown is one example of a user interface rendered by a client application executed in the client in the networked environment according to various embodiments. The user interface presents a list of applications which are determined to be compatible with the client . An identification of the client describes the client as being a Galaxo 2000N Smartphone. A user interface component may be provided to switch the client that is being evaluated for compatibility. For example the customer may have registered a tablet computer previously and may wish to browse on the smartphone for applications which are compatible with the tablet computer.

The list includes descriptions and of three applications corresponding respectively to Instaphoto Mean Birds and Map App. In this non limiting example a graphic a component for requesting more information and a component for requesting a purchase may be provided for each description . Because the size of the user interface may be limited one or more navigation components may be provided to update the user interface to render descriptions for additional applications in the list .

Referring next to shown is a flowchart that provides one example of the operation of a portion of the application ingestion service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the application ingestion service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application ingestion service obtains an application from a developer. For example the developer may submit the application through the developer portal system . In box the application ingestion service determines the requirements of the application . For example the application ingestion service may examine data associated with the application e.g. a manifest etc. . Also the application ingestion service may inspect the code of the application or execute the code of the application to determine what features the application uses. Additionally the application ingestion service may obtain requirements that have been manually specified by the developer. The application ingestion service may store the requirements in the application requirements data .

In box the application ingestion service determines business rules which may apply to the application . In box the application ingestion service generates a compatibility expression for the application . The application ingestion service then stores the compatibility expression in the data store . In box the application ingestion service adds the application to the application marketplace which may involve storing the application in the data store updating the application marketplace data registering the application with the application marketplace system and or other actions. Thereafter the portion of the application ingestion service ends.

Moving on to shown is a flowchart that provides one example of the operation of a portion of the application marketplace system according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the application marketplace system as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application marketplace system obtains client capabilities from a client . In box the application marketplace system determines whether a corresponding capability set exists in the data store . If a corresponding capability set does not exist the application marketplace system moves to box and stores a new capability set corresponding to the client capabilities in the data store . In box the application marketplace system generates a new identifier for the capability set and associates the identifier with the client . To this end the application marketplace system may update the customer data send the identifier to the client store the identifier as a cookie on the client and or perform other actions. The application marketplace system then proceeds to box .

If instead the application marketplace system determines that capability set already exists in the data store the application marketplace system moves from box to box and associates an identifier of an existing capability set with the client . To this end the application marketplace system may update the customer data send the identifier to the client store the identifier as a cookie on the client and or perform other actions. The application marketplace system then proceeds to box .

In box the application marketplace system obtains a request for a list of applications from the client . For example the request may be a search request a request for a category listing etc. In box the application marketplace system generates the list of applications . For example the application marketplace system may execute a search on the applications to find applications matching search criteria. In box the application marketplace system queries the compatibility evaluation service to determine whether each of the applications is compatible with the client . In some cases the application marketplace system may batch queries together to avoid latency effects in the communication between the application marketplace system and the compatibility evaluation service .

In box the application marketplace system filters the list of applications to exclude applications which are determined to be incompatible. In box the application marketplace system generates data for a user interface to present the filtered list of applications . In box the application marketplace system sends the data for the user interface to the client over the network . Thereafter the portion of the application marketplace system ends.

Continuing on to shown is a flowchart that provides one example of the operation of a portion of the compatibility evaluation service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the compatibility evaluation service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the compatibility evaluation service obtains a capability set corresponding to a client and a compatibility expression corresponding to an application . In some cases the compatibility evaluation service may also obtain a version identifier for the application to identify the compatibility expression . Further the compatibility evaluation service may also obtain various mutable capability characteristics for the client in addition to what is stored in the capability set .

In box the compatibility evaluation service translates the compatibility expression to a postfix expression if applicable. In box the compatibility evaluation service substitutes variables in the compatibility expression with values from the capability set . For example the compatibility expression may have a variable screenSize and the capability set may have the attribute value pair of screenSize small. Thus the compatibility evaluation service may substitute screenSize with small for purposes of evaluating the compatibility expression .

In box the compatibility evaluation service evaluates the compatibility expression using a stack which is described further in connection with the flowchart of . In box the compatibility evaluation service returns the result of the evaluation. Thereafter the portion of the compatibility evaluation service ends.

Turning now to shown is a flowchart that provides one example of the operation of another portion of the compatibility evaluation service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the other portion of the compatibility evaluation service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the compatibility evaluation service obtains a term from a compatibility expression . In box the compatibility evaluation service determines whether the term is an operand. If the compatibility evaluation service determines that the term is an operand the compatibility evaluation service proceeds to box and pushes the operand onto the stack. The compatibility evaluation service then continues to box .

If instead the compatibility evaluation service determines that the term is not an operand i.e. is an operator the compatibility evaluation service moves from box to box and pops operands off of the stack according to the operator. For example the compatibility evaluation service may pop a number of operands off of the stack where the number may be determined based at least in part on the operator. In box the compatibility evaluation service applies the operator to the operands. For example where the operator is and the operands are 6 and 7 the compatibility evaluation service may evaluate whether 6 equals 7 thereby producing a result of false.

In box the compatibility evaluation service determines whether the compatibility expression includes more terms. If the compatibility expression includes more terms the compatibility evaluation service pushes the operator result onto the stack in box and thereafter returns to box . If the compatibility expression does not include more terms the compatibility evaluation service returns the result in box . Thereafter the portion of the compatibility evaluation service ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the developer portal system the application ingestion service the application marketplace system the compatibility evaluation service and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the developer portal system the application ingestion service the application marketplace system the compatibility evaluation service the client application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the application ingestion service the application marketplace system and the compatibility evaluation service . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the developer portal system the application ingestion service the application marketplace system the compatibility evaluation service and the client application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

