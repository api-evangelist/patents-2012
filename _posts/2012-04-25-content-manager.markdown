---

title: Content manager
abstract: An archive for digital content comprises archive storage, an archive service and a manifest. The archive storage is a unified storage structure for storing items, such a directory having a plurality of subdirectories. The manifest is stored within the archive storage when the archive storage is loaded onto a storage device, and may comprise an index of items stored in the unified structure of the archive and/or an organizational structure that supports defined categories that characterize items stored in the unified structure and/or at least one backup queue that temporarily queues a list of items that satisfy predetermined backup criteria by have not been backed up. The archive service serves as an intermediate between users, e.g., operators, software modules, programs, services, etc., and the archive storage to control requests for access to items stored in the unified storage structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08635191&OS=08635191&RS=08635191
owner: Panstoria, Inc.
number: 08635191
owner_city: Dayton
owner_country: US
publication_date: 20120425
---
This application is a continuation of U.S. patent application Ser. No. 12 701 226 entitled CONTENT MANAGER filed Feb. 5 2010 now allowed which is a continuation of U.S. patent application Ser. No. 11 502 097 entitled CONTENT MANAGER filed Aug. 10 2006 which has issued as U.S. Pat. No. 7 685 175 on Mar. 23 2010 the entire disclosures of which are incorporated by reference herein. This application also claims the benefit of U.S. Provisional Patent Application Ser. No. 60 707 733 filed Aug. 12 2005 entitled PHOTOGRAPHIC IMAGE EDITING AND ORGANIZATION SOFTWARE the disclosure of which is also hereby incorporated by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present invention relates to computer methods systems and computer program products that collect store organize archive catalog retrieve and or manage digital content.

It is often desirable to capture and organize digital photographs images audio video and other types of digital media files to preserve important memories to secure data and or to retain representations of events or objects of interest. In this regard digital cameras scanners camcorders and other devices allow users the ability to capture download and store such digital content on a general purpose personal computer PC . However there is typically no consistency or standard in how each device locates organizes and stores its digital content within the directory structure of the user s computer. Often times the organization of the corresponding media files is left to the discretion of the user.

Moreover if the user s computer has access to a network e.g. the Internet the user can search for media files and download such content onto their computer. Again however the organization and location of downloaded media files is often left to the discretion of the user. A computer can accumulate a substantial amount of digital media files in the above manners and as such there is the potential that such digital content is not well organized and thus cumbersome to secure locate and or retrieve.

Software products are currently available that attempt to assist users in organizing media by providing disk indexers. Disk indexers typically scan a hard disk to identify and index the location of images sound and video files etc. located on the hard disk during the scan. The media files themselves are not moved or reorganized. Accordingly the disk indexer also typically provides software that attempts to keep the created index and the actual contents of the corresponding hard disk in sync with each other. However in practice it is quite easy to confuse the indexer software e.g. by relocating the files on the hard disk so that the index loses track of the actual location of some of the media files. Moreover the index and corresponding data are typically stored in one or more database files. Database files are inherently proprietary formats. If the user loses access to the database program of the corresponding disk indexer the information in the database file likely becomes inaccessible. The database program of the disk indexer is also often effectively lost if copied or restored to a machine that is not licensed to use the database of the disk indexer.

According to various aspects of the present invention the archival of digital content is disclosed. To archive digital content an archive storage area is implemented. A manifest is stored within the archive storage area when the archive storage area is loaded onto a storage device. The manifest comprises an index of items stored in a unified structure of the archive. In at least one backup queue a list of items that satisfy predetermined backup criteria but have not been backed up are temporarily queued.

Further an archive service is implemented that intermediates between software modules and the archive storage area to control requests for access to items stored in the unified storage structure by interacting with and correspondingly updating the index of the manifest as items are retrieved and stored in the unified storage structure. The archive service further interacts with each backup queue to back up items stored in the archive storage area at predetermined times based upon predetermined backup criteria for each backup queue.

In the following detailed description of the illustrated embodiments reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration and not by way of limitation specific embodiments in which the invention may be practiced. It is to be understood that other embodiments may be utilized and that changes may be made without departing from the spirit and scope of various embodiments of the present invention.

Referring now to the drawings and particularly to an archive is utilized to collect store organize archive catalog retrieve and or manage digital content. Exemplary digital content may include but is not limited to downloaded or otherwise electronically transferred digital media e.g. music images photographs video etc. downloaded across a network such as the Internet digital video content e.g. RM MOV MPG etc. files from a video recorder camcorder or other device that renders video to digital form digital photographs and other digital images such as JPG TIFF GIF etc. files from digital still image technologies including digital cameras digital content from scanners facsimile machines all in one and similar devices digital audio such as WAV MP3 AIF AU WMA etc. files existing digital information and other sources . The other sources may comprise for example files that are created to describe collections of the digital content within the archive e.g. in the form of albums scrapbooks a manifest notes journals and other types of files examples of which will be described in greater detail herein.

Conceptually the archive may be considered as a unitary archive folder which may be maintained on a single storage device or distributed across multiple storage devices. Within the archive folder is a set of folders and subfolders . These folders contain all of the original digital content e.g. images video audio etc. Further the folders may store revisions of original digital content descriptions of the digital content and tools to backup sort classify locate and or retrieve desired items of content including for example sort boxes albums journal boxes timeline search tools etc.

Referring to one exemplary implementation of the archive comprises an archive storage area for storing items which is characterized by a unified storage structure and a manifest . The unified storage structure includes an archive folder and any corresponding subfolders. All items associated with the archive are copied into the archive storage area and are logically contained within the unitary archive folder or a corresponding subfolder thereof . Moreover when copying digital content into the archive the original source information may be left unaltered and not damaged or deleted thus preserving the underlying data.

The archive may be periodically accessed to perform routine maintenance e.g. by performing backups and by running diagnostics to ensure that the digital content is maintained in serviceable condition. Due at least in part to the unified storage structure a backup may conveniently save everything necessary to completely restore the archive or a portion thereof even if the original archive information becomes damaged or lost. Additionally the unified storage structure allows for example easy upgrade to a new computer or to move the software and archive storage area to a different computer or storage location.

The archive storage area is a dedicated storage area and may be implemented for example as a primary directory and subdirectories on a storage medium in communication with a corresponding host processing device. Alternatively a system based upon compressed formats database formats or other custom or open standard formats may be implemented.

The archive storage area may be stored on one or more storage medium s which may comprise for example a fixed disk or disk array within or otherwise connected to the host processing device e.g. a conventional hard disk or RAID configured disks a shared resource such as a network attached storage device a removable or otherwise swappable storage medium e.g. a Universal Serial Bus enabled storage device a Firewire enabled device an Ethernet enabled device etc.

According to an aspect of the present invention the user does not need to manage the storage structure the archive storage area or any other aspect of the archive . Rather the archive storage area may be considered a black box in this respect if the user so desires. Users place items into the archive and retrieve items from the archive but how the archive arranges these files may not be known or fully understood by the user. In this regard search tools and other aids may be associated with the archive to allow a user to identify and locate items of interest. Exemplary searching and browsing tools will be described in greater detail herein. Alternatively information may be provided with regard to the internal structure of the archive for those users who are interested or require an understanding of the organization of the archive .

The archive storage area may optionally be marked as a special directory e.g. to provide a layer of protection to the storage structure . The manner in which the storage structure is marked as special if marked at all will depend upon a number of factors such as the characteristics of the host processing device. For example if the host processing device is operating under the Microsoft Windows operating system by Microsoft Corporation of Redmond Wash. the storage structure may be marked as special using suitable Windows shell extensions. For example the Windows operating system allows software to extend the shell e.g Windows Explorer to create areas of the disk that behave differently than normal directories.

Alternatively an optional information file such as a readme file may be utilized to mark the storage structure as a special directory. The optional information file may be stored for example at a known or otherwise specified location within the storage structure . The optional information file may be utilized for example to inform the user to be careful when making changes to the directory structure of the archive storage area .

The manifest may be stored for example at a known or otherwise specified location within the archive storage area and provides an index to the content items and other information associated with the archive . The manifest may further provide additional information for support maintenance and usage of the archive and its contents. The manifest will be described in greater detail herein.

An archive service is provided to serve as an intermediate between the items stored in the archive storage area and corresponding interacting users which may comprise for example hardware devices software applications and modules human operators software services and or other hardware or software processes . In addition to handling requests from users for access to items stored in the archive storage area the archive service updates and maintain the manifest and may handle maintenance and administrative tasks associated with maintaining the archive.

As noted above the user of the archive need not know either the internal structure of the archive storage area or its storage location. In this regard the archive service may be used to shield all the implementation details of the archive from the corresponding interacting user e.g. an application or human user requesting access to a particular archived item. Moreover the archive service may support an interface for providing searching browsing and other tools to facilitate user interaction with the archive .

Depending upon the specific implementation of the archive the archive service may require that a user register file formats that it is unfamiliar with e.g. using a suitable interface. Such may be desirable where for example the runtime addition of new file formats is desired required or where the archive service cannot determine how to process a particular file etc.

The archive service may be written in any suitable language. For example if operating under above mentioned Microsoft Windows operating system the archive service may be written in C and may be shared by loading .Net assemblies into a common EXE file. Further the archive service may be accessed via a remote procedure call interface across a process network boundary which is suitable for shared access by many processes to a common shared archive storage area . Correspondingly the archive storage area may be implemented to support single or multiple users e.g. using standard multi user access methods for shared resources.

Referring to items that are stored in the archive storage area may include a file name an item identification hereinafter Item ID and optionally an indication of a revision . The file name is any conventional filename which may include a file designation and optionally a period . and a three character extension. According to an aspect of the present invention all items in the archive storage area have an item ID which provides a unique identifier. As an example the item ID may comprise a simple function e.g. a numeric or alphanumeric designation appended to or otherwise concatenated with the original file name of a corresponding file. If an original filename and item ID are already used a counter or other suitable logical arrangement may be used to adjust e.g. increment or decrement the item ID of the current item to be saved. As such the names of a given item s files are a function of the corresponding item ID.

Some item types e.g. digital images can have zero to multiple revisions. In one exemplary implementation all indications of revision are referenced under their corresponding original item. The filename of a revision is a function of an assigned revision code e.g. a revision number and the corresponding Item ID . Thus the Item ID may be determined from the revision name.

Referring to the storage structure of the archive storage area may comprise a hashed directory structure . The hashed directory structure comprises a root directory and a 64 way sub directory as shown. The sub directory is determined for example by using the modulus of a corresponding hash function. The subdirectory could alternatively consist of any other number of hashed directories.

According to an exemplary implementation of the storage structure an item is stored in one of the item subdirectories and the name of this subdirectory is a hash on the item s ID . For example a subdirectory may be named based upon a .Net hash of the string that is the item ID revision . The standard Microsoft .Net version 1 string hash function or any other suitable has function may be utilized. Moreover other naming conventions may be implemented. However if the hash function is a strict function of the filename and no other information the location of the item may be determined independently of the other content or the state of the archive storage area .

That is when items are stored within the archive storage area a hash function is applied to the item ID which is a function of the original file name . This hash is then used to determine where in the archive storage area the file will be located. If a first item is already stored at an indicated location the keys of the previously stored item and the current item are compared. If the keys hash to the same value then an alternative storage location may be selected for the newer item.

The hashed directory structure need not be implemented on a single physical storage device. Rather the hashed directory structure may be spread out across different physical storage devices. Hashing files over multiple storage devices may provide a relatively even use of storage resources and access bandwidth of the host processing device. A hashing scheme is not necessary. However distinguishing the digital content using hashing or other key based or index based schemes may provide for relatively rapid access to items in the archive storage area especially as the number of items grows.

The manifest describes the archive storage area and the locations of its item contents. The manifest may also store information regarding special processing capabilities of the archive e.g. that may be used to sort backup organize describe or otherwise characterize the stored items. Referring to an exemplary implementation of the manifest comprises a manifest structure that supports an item index an organizational structure one or more backup queues and optionally a hashing modulus that is used for the hashing function described with reference to .

The manifest may be constructed and maintained in an open standard format such as the extended markup language XML . Such use of standard formats provides transparency in that proprietary software applications are not required to read the manifest . Thus for example a user may read the manifest using any XML capable program to locate a file of interest. Moreover the use of an appropriate industry standard format s to construct the manifest makes the archive robust and allows future applications as well as third party applications the ability to interact with the archive .

The archive service maintains the manifest . As files are added to and or edited and or removed from the archive storage area the manifest is updated by the archive service to properly identify the contents of the archive storage area . The archive service may also utilize the manifest to keep track of item revisions. The use of the manifest further provides a health check for the archive storage area . By matching files actually in the archive storage area with the contents of the manifest it is possible to detect when files in the archive storage area are missing or when extra files in the archive storage area exist.

According to one aspect of the present invention when the archive service saves the manifest the entire manifest is saved. This may be performed for example as an atomic operation. A copy of the current state of the manifest may be saved to a file upon an occurrence of a predetermined event such as when a predetermined number of changes have been made to the state of items in the archive storage area and or when a predetermined period of time has elapsed. The manifest may be initially saved to a file that is next to the current manifest file. Under this arrangement when the entire save operation is complete the newly saved manifest file replaces the previous manifest file. The previous manifest file may then be renamed to serve for example as a backup manifest file. The above described operation to save a manifest may be implemented from the perspective of the user as a single operation.

Moreover multiple generations of the manifest may be saved. For example a backup of the manifest may be stored when the manifest is saved. Still further additional backups of the manifest may be stored using a grandfathering backup system. Under this arrangement a corrupted missing manifest may be automatically recovered from the next available backup the next time the archive storage area is loaded.

Psuedo code is presented below for an exemplary backup operation of the manifest that illustrates the use of backup generations grandfathering to maintain multiple backups of the manifest captured at different times 

As noted above the manifest may maintain a user defined organizational structure that allows a user to customize characterize and classify items stored in the archive storage area . Referring to an exemplary organizational structure comprises a definition of user defined categories comprising one or more root categories . For each root category there may be any number including zero of subcategories . This characterization can be extended by defining any number of subcategories of subcategories etc. For each root category and subcategory there may be any number including zero of container items .

Container Items are items in the archive storage area that are lists of other items. There can be many types e.g. classes of container items . As an illustrative example an organizational structure may be comprised of two root categories such as an Organizer and a Bookshelf. There may be any number of subcategories under each of the Organizer and a Bookshelf depending upon the particular user application. Moreover there may be two defined container items such as folders and albums each of which may be associated with one or more of the root categories and subcategories .

The organizational structure is not used to actually store items. Rather the organizational structure is a tool e.g. as implemented through an interface via the archive service that allows a user to have one or more different views of the items stored in the archive storage area by maintaining corresponding lists of related or otherwise associated items. This allows the user to quickly find a desired item of interest.

The archive service may provide a suitable interface so that a user can create edit maintain and delete root categories sub categories and container items . Moreover the archive service may be used to allow a user to interact with the organizational structure to identify items of interest that are stored in the archive storage area such as by implementing visualizing browsing and other software techniques.

The manifest may further comprise a Check which is a message digest of item list information and secret information. This allows the ability to throttle archive storage usage based on the activation state of the application and prevent tampering with the archive . The check is a checksum or message digest of the manifest contents. The archive service can use this to detect if the manifest has been changed by any other entity. The manifest contains a count of the number of times the archive has been opened by the user. The check prevents this counter from being changed. Therefore the counter can be safely used to limit usage of the archive until the archive service is properly activated.

A pseudo code for an exemplary XML based manifest is illustrated below for a sample archive that has been simplified for purposes of illustration. The manifest code presented below includes a manifest format Version and Global unique ID GUID 

The manifest code presented below also includes a checksum which may be used for health checks as noted above. As illustrated the checksum assumes is a binary value that is base encoded. However other binary to string encoding schemes can be used 

The exemplary pseudo code further illustrates a manifest that includes multiple items associated with a container item multiple revisions to an item an image in the illustrative example and a structure for the organizer and bookshelf root categories described above. The manifest further illustrates a backup queue. This is a pipe character delimited list of item IDs.

In general there are four main sections to the exemplary manifest code. The first section is the main manifest tag. The main manifest tag contains the identity of the archive in addition to the checksum and ID information. The next section is the item list. The item list is the list of contents stored in the archive. The next section of the manifest code is the backup queue section. The manifest may support a plurality of backup queues . As illustrated there are two backup queues including a first backup queue directed to implement backups onto a CD DVD media device and a second backup queue directed to implement backups via a shadow copy. The operation and implementation of backup queues is described in further detail herein. The last main section of the exemplary manifest code describes the set of user defined categories used to organize the items stored in the archive which are also described in greater detail herein.

As noted above each root category or subcategory may have zero to a plurality of containers . As an additional example a pseudo code for an exemplary container file format is provided below. This code may comprise an extension of the manifest code illustrated above. In the example a Category named Memorabilia has a Container named Artwork . There are two exemplary item IDs associated with the Artwork container.

As noted above there may be two or more container types e.g. folders and albums. Below is an example of an album which is named Sample Album that is in a Category of Other . The exemplary album shows the name of the album and the last known category in which it was located an optionally ordered list of item IDs and journal boxes. The example further shows a journal box entry with GUID title body text formatting information and the use of UseDefaults flags which if set ignore local formatting information and use the application journal box defaults.

The organization of the items in the archive storage area may be described via the manifest without requiring a database e.g. by storing relevant information in an XML or other open standard manifest of the archive. Moreover all associated files may be open standard formats. For example the manifest including any files such as container files albums and folders etc. may be implemented in XML. Further sort box and bookshelf information may be stored in the container items . Also as noted above item IDs may be created as a function of the original item s filename. Item revisions may be named for example using a function of the item s ID and the revision number. In this regard much of the manifest information can be recovered or rebuilt from the archive storage directory structure filenames and file content should the manifest become lost corrupt damaged etc.

One way to preserve the integrity of stored items is to make frequent backup copies of the items that have changed. Referring back to the manifest may have one or more backup queues . A backup queue is a list of items in the archive storage area that meet predetermined backup criteria for that queue. For example a backup queue may queue up items that have been changed or that have not yet been backed up. Under appropriate conditions the archive service implements a backup of the items in the corresponding backup queue to a designated device.

Referring to a representative computer system is illustrated in which an archive may be created accessed and utilized to collect store organize archive catalog retrieve and or manage digital content. The system comprises a host processing device upon which a user interacts with the archive storage area . A representative host processing device may comprise for example a general purpose personal computer PC server notebook computer appliance or pervasive computing device such as a personal data assistant PDA palm computer cellular access processing device or other suitable device capable of supporting or otherwise interacting with the archive .

The host processing device typically includes at least one processor for executing software code including the archive service . The processing device also includes system memory such as random access memory RAM for temporarily storing software code that is being executed by the processor . The manifest is also loaded into system memory . According to one aspect of the present invention the entire manifest may be loaded into system memory during operation of the archive service . Putting the entire manifest into system memory allows the archive service the capability of quickly locating accessing and otherwise operating on the archive storage including saving the manifest itself.

The processing device also comprises disk or other permanent storage for storing files of information including software applications data files etc. a handling mechanism which is typically provided to facilitate communication between the system memory and the permanent storage and a plurality of input output devices I O devices which allow external devices to communicate with the processor . The processing device further includes suitable software including an operating system and one or more applications which are typically stored in the permanent storage and are temporarily copied into the system memory for execution. The processing device may also include an application programming interface API as well as any additional hardware and or software as necessary for operation as is well understood in the art.

The host processing device may have permanent or temporary access to additional storage devices such as a compact disk CD Digital Video Disk DVD burner and or one or more storage devices such as zip drives USB drives Firewire drives compact flash drives and other internally mounted or externally connected devices.

The system may further include one or more processing devices e.g. computers that are connected to the host processing device by a local network peer to peer network wireless infrared or other by using any other suitable communications interface and corresponding technology. Additionally the host processing device may communicate to one or more server computers A B e.g. by connecting across a network such as the Internet. For example the I O devices may include a network interface that includes hardware and or software for communicating across the network .

The entire manifest and the archive service are loaded into the system memory of the host processing device during operation of the archive . The archive storage area and corresponding items may be stored for example in the disk storage . When a user requests access to an item in the archive storage area the archive service locates the item using the item index in the manifest and the corresponding item is retrieved stored etc. depending upon the intended operation. Because the entire manifest may be loaded into system memory retrieval storage and updating can be accomplished in a quick and efficient manner.

As noted above the manifest supports multiple backup queues . As one example a first backup queue can be designated as a CD DVD backup queue. Under this arrangement the archive service periodically writes copies of the items identified in that backup queue to the specified CD DVD drive e.g. drive . For example the backup queue which is targeted to a CD DVD will move a block of files identified in the CD DVD backup queue to the CD DVD drive when the user places an appropriate media device e.g. a blank or otherwise writable CD DVD in the drive . As an alternative the archive service may schedule routine backup times or other suitable triggering events and or conditions can be identified and defined. If there is information in the backup queue at the designated backup time the archive service notifies the user that a backup operation is recommended. The user may opt to proceed with the backup or ignore or otherwise delay the backup. If the user does not complete the backup operation the CD DVD backup queue will continue to accumulate backup information until a successful backup operation is implemented to an appropriate CD or DVD media.

As another example a second backup queue can be designates as a shadow copy queue. A backup queue targeted to a shadow copy moves files to a replica of the archive storage area . The shadow copy may be located elsewhere on the disk storage . As a further example the shadow copy may reside on one or more of the devices . If the shadow copy is written to a swappable or otherwise removable media e.g. a USB or compact flash drive and the device is not available at the scheduled or otherwise intended backup time the shadow copy queue may continue to log information until a successful backup can be completed in a manner analogous to that described above.

As a further example a shadow backup queue could back up to a storage space on a remote server e.g. the server A which may comprise a dedicated archive protection appliance. This archive protection appliance may provide a simple and easy to understand device that works with the shadow backup queue.

Still further there can be a plurality of backup queues each with a different destination and a different set of guidelines as to when and or what content to back up. For example a first backup queue may be configured to perform a weekly backup to storage on a first server A. A second backup queue may be configured to perform a monthly backup to storage on a second server B. Still further additional backup queues may be set up to periodically back up to a DVD or CD via drive an additional backup queue could be set up to perform yet a different backup to a removable media on device and yet a further backup could be made to a shadow area designated on the disk storage internal to the host processor or to device .

The backup queue operation may be performed automatically whenever a triggering event or condition occurs e.g. a programmed time period has elapsed a corresponding application shuts down a file or predetermined number of files have changed been moved created removed etc. If the backup copy location is temporarily unavailable the corresponding backup queue continues to maintain and grow as necessary the corresponding backup information until that backup copy location becomes available.

Whenever an item is changed created removed or otherwise satisfies predefined criteria for backup it may be listed in one or more including all of the corresponding backup queues . Item references are removed from each backup queue whenever a backup operation that saved that item is totally complete. As one example the entire backup operation corresponding to backing up all items in a particular backup queue is an atomic level operation such that all items are backed up successfully in a given operation or no items are removed from the corresponding backup queue.

There are a number of schemes that can be implemented for administering the backup queues. For example as noted above items that are changed may be automatically queued for backup including queuing the changed item in every established backup queue . In this exemplary configuration items are backed up in the order they were queued for backup. If any part of an item requires backup then the entire item is backed up. As another example users may also be able to explicitly add and remove items queued for backup. Moreover users may be prompted to backup items on startup of the archive service if for example a threshold number of megabytes or a threshold number of items require backup. Under this arrangement the user may be able to set the appropriate thresholds. As yet another example the user may be provided with the option to backup the entire archive .

Each backup may also comprise for example a copy of the manifest and or a backup queue content file XML that lists the items on the backup.

As an alternative to maintaining the archive storage area on the disk storage of the host processing device the host computer may be coupled to a remote storage appliance dedicated storage device such as a media system . The media system is a separate storage device and may be a turnkey system or general purpose system that supports the archive storage area . The media system may serve as the central storage archival and retrieval system for a home multimedia center thus alleviating the burdens on the host computer for storing the items in the archive storage. A large range of dedicated network line attached archive devices may be utilized with the various aspects of the archive storage area .

Items within the archive storage area may be viewed using a suitable library application that interacts with the archive service . The library may be organized using an organizer panel which contains sort boxes and folders e.g. which themselves may be saved as items within the archive storage area . For example sort boxes may contain folder items that classify digital content items in a predefined manner.

Referring to the archive service can effectively manage the archive as well as maintain one or more shadow copies of the archive. One of the backup queues may be utilized to define and manage the shadow copy e.g. which may be provided on a permanently accessible location e.g. a hard drive media system etc. or an intermittent connection such as a Universal Serial Bus or Network connection etc. According to an aspect of the present invention the shadow copy contains a replication of the archive contents including the archive storage area manifest and other support files. Additionally the shadow copy may comprise a marker file or other additional information that maintains a reference to the original archive . Still further as noted above multiple shadow copies may be maintained e.g. in a grandfathering or other arrangement where multiple iterations or different previous versions of the archive are saved in each shadow copy .

With reference to as noted in greater detail herein the archive service may be configured such that every event that is to be backed up is sent to every backup queue . As such every item that is added removed and or updated is also updated in each backup queue .

It is also possible to have different rules and operations when backing up to different backup queues . For example it may be useful to establish different rules for backing up to a CD DVD backup compared to a shadow copy. For example when backing up to a CD DVD for each item added or updated the corresponding item ID or other suitable indicator may be placed at the front of the CD DVD backup queue . Events designating that one or more items have been removed from the archive storage area may be ignored. Under this arrangement CD DVD items are copied to the backup media writable CD or DVD in the order they appear in the CD DVD backup queue . If the next item is too large to fit onto the media the next item in the CD DVD backup queue may be tried etc. This process may continue until all queued items are suitably backed up across one or more CD DVD media disks. Further the complete manifest may be copied to each CD or DVD media disk if multiple media disks are required for the backup. Still further a content file e.g. containing a list of items on the backup may be copied to each media disk and or each media disk may receive a unique content file of the contents on that media disk.

In an exemplary implementation of a shadow copy backup queue for each item added or updated in the archive the corresponding item ID or other suitable indicator may be queued in a changed archive items list of the shadow copy backup queue to identify items that have changed. Further items that have been removed from the archive may be added to a deleted files list of the shadow copy backup queue . Accordingly on a shadow copy update deleted files may be removed from the shadow copy first. Then the files from the changed archive items list may be copied to the shadow copy. Files that have not changed since the last backup may be skipped. Further the complete manifest may be copied to the shadow copy for each update operation.

As noted above tools may be provided to assist a user in retrieving items from the archive storage area . Some additional examples of search and retrieval tools are illustrated below. As an illustrative example content items may be rated and sorted based upon ratings such as a five star rating system or other arbitrary classification technique that may be used to provide an additional view or views into the content of the items stored in the archive storage area e.g. by setting up the appropriate categories and containers .

Still further as noted above containers may comprise folders or albums and or other suitable organizational metaphor s . Albums may be useful for example in the context of images to tell a story of a collection of images. Journal entries and other additional content may be added to the album to preserve information as noted in the exemplary code provided in greater detail herein.

A date and time may be assigned to each item of content stored in the archive storage area . Dates and times assigned to each item of content may be precise or fuzzy. For example months can be specified by number accepted abbreviations full name etc. The archive service may assign an item to a position in a time based upon its time and or date or date s or date range s . The specific implementation for the conversion of fuzzy time and date entries can vary. However by way of example a user may enter sometime in 1972 . In response thereto the archive service may translate this to 1 1 72 12 31 72 etc.

As used herein a fuzzy date is a date that covers an arbitrary range of dates and or times. For example a user may not know the date of an old picture video clip or musical arrangement. Moreover a user may want to assign an arbitrary date to an item. Content items may be dated based upon the date that the content was created the date added to the archive or any arbitrary date assigned by the user. For example a photograph of a historical landmark may be dated corresponding to a historical period e.g. a picture of Stonehenge could be classified based upon a date that the photograph was taken or upon an approximation of the date that Stonehenge was built. Still further once a date is associated with an item the date may be broadened narrowed etc.

As another example a video clip may be taken of the battlefield of Gettysburg during a tour of the field during the summer of 2006. However the user may want to date the footage based upon the date of the Civil War battle e.g. summer of 1863. Further the exact date and time of an item may not be known and may never be known. Although it is possible that additional refinements of the date may be possible in the future as more information become available.

The dating system may also allow for the specification of holidays and seasons. The exact date of some holidays may vary from year to year ex lunar calendar holidays like Easter and Passover so the application has to know how to calculate these variable holidays. It also allows for the user to specify other fuzzy notations such as seasons ex summer summer vacation the hot season etc. The dating system may also allow for circa or about dates. These are extra ranges around another date. For example circa the summer of 1970 may mean an actual date range greater than just the summer of 1970 . The user may also be able to specify the meaning of words like summer or about to user defined ranges. Moreover time and date information may be influenced by geography e.g. which may allow for the automatic setting of some information based on the geographic information know about an image. For example summer for a picture taken in Florida may have a defined time range that is different from a time range for summer associated with a picture taken in Canada.

As a few illustrative examples if a user enters 1 14 1972 3 00 PM a time code of Jan. 14 1972 15 00 hours may be associated with a corresponding item. As another example if a user enters Autumn or fall 1942 a time code of 9 1 1942 thorough 11 30 1942 may be associated with a corresponding item. As yet a further example if a user enters early 1977 a time code of 1 1 1977 through 6 30 1977 may be associated with a corresponding item.

Item content may be viewed by time date using a time date scaling feature. The time date scale provides a sliding scale that allows a user to search through content items that have been classified by time date e.g. by traversing forwards and backwards along an appropriate scale thus allowing a user to view both older and newer content in different ways.

Referring to the archive service may provide a timescale control that is designed to allow the user to visualize different amounts of time and to change these view very rapidly. The items in the archive storage area are identified by time date which as noted above can be precise or fuzzy and are associated with the timescale control to allow a user to quickly perform chronologically based searches for archive content. In one exemplary implementation this scale is determined by an internal variable that defines the number of seconds each pixel on the screen represents call the pixelseconds .

The user is shown the current pixelseconds on a notched slider or other suitable visual icon. The user can slide the slider to select the required timescale. For example the slider may be notched with the pixelsecond settings such as for centuries decades years months weeks days etc. A single mouse click may also be used to snap the pixelsecond settings to the closest notch. The timescale windows update as the slider is moving. The results is that the user gets the visual experience of zooming in and out of time.

As shown in the exemplary implementations of the timescale control the scale is broken into a set of contiguous time slices. The major and minor time division displays are automatically set so the time slices stays within a minimum and maximum number of pixels. The major time division may only be shown when it first appears and when it changes. The minor time division may be shown for each time slice. The list below shows exemplary time divisions. The divisions are spaced so that one division is roughly 2 3 times the size of the previous division 

This wide range of time divisions allows for it being used to mark everything from major historical periods down to a set of frames inside a video clip. For example the exemplary ranges can be used to show how still pictures and video sequences are intermixed in time as well as how images are spread over the lifespan of a person.

A histogram or other visual presentation as shown across the top of the timeline may be used to show the number of items in the archive storage area from the current query that is found within that specified time date slice. The currently displayed or selected part of the query may be shown for example in darker color or other visually distinguishing manner. As one illustrative example if the selected range encloses the entire slice then its histogram bar may be drawn in a solid darker color. If the selected range starts or ends in a slice then a fade in or fade out is used to show that the selected range either starts in or ends in the slice.

The user can change the selected range by grabbing and sliding an appropriate tab or other icon provided on the timescale . A user may alternatively select a date range by entering a specific or fuzzy date specification in a suitable textbox and by clicking go or any other suitable control. The user may also be able to select all dates e.g. by clicking on an All or other suitable link. The user can scroll the visible date range by using the side arrows or click and drag the time scale background. A click without dragging may be used for example to select the specified time slice. The control key thus allows the user to select a range of dates on the mouse click.

When the timescale zoom or visible range changes the application is requested to recalculate the histogram values. The control is redrawn immediately and then again when the recalculate is complete. When a slice is drawn the histogram is not drawn if there are no data available. The old values may be maintained as temporary values for drawing until the new histogram values are available. A tab or other visual icon may be used to show the date of the item or items that are displayed to the user and which satisfy the specified time date search parameters. The user can slide this value directly. Or it is updated if the user scrolls a query results or other item view listing provided in cooperation with the timescale control.

Clicking on the center bar adjusts the display so the center of the selected range is over the center of the control. This centering capability works well with timescale zooming since the zoom keeps the center date constant.

As will be appreciated by one skilled in the art the present invention may be embodied as a computer method a system or computer program product on a computer usable storage medium having computer usable program code embodied in the medium. The software aspects of the present invention may be stored implemented and or distributed on any suitable computer usable or computer readable medium s including but not limited to any medium that can contain store communicate or transport the program for use by or in connection with an instruction execution system of a corresponding processing device. The computer program product embodiments of the present invention may each have computer usable or computer readable program code portions thereof which are stored together or distributed either spatially or temporally across one or more devices. A computer usable or computer readable medium may comprise for example an electronic magnetic optical electromagnetic infrared semiconductor system etc. apparatus or device.

More specific examples of the computer usable or computer readable medium comprise an electrical connection having one or more wires swappable intermediate storage mediums such as floppy drives tape drives or external hard drives a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM or digital video disk DVD an optical storage device a transmission media such as those supporting the Internet or an intranet or a magnetic storage device.

In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate or transport the program for use by or in connection with an instruction execution system apparatus or device. The computer usable program code may also be transmitted using any appropriate medium including but not limited to the Internet wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any suitable language including for example an object oriented programming language such as Java C or the like. The computer program code for carrying out operations of the present invention may also be written in conventional procedural programming languages such as the C programming language or in higher or lower level programming languages. The program code may execute entirely on a first computer partly on one or more different computers partly on the first computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the first computer through a network such as a local area network LAN a wide area network WAN or the connection may be made to the remote computer for example through the Internet using an Internet Service Provider or other suitable means of communicating across the Internet.

The present invention is described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams may be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The present invention may be practiced on any form of computer system including a stand alone computer or one or more processors participating on a distributed network of computers. Thus computer systems programmed with instructions embodying the methods disclosed herein or computer systems programmed to perform various aspects of the present invention and storage or storing media that store computer readable instructions for converting a general purpose computer into a system based upon the various aspects of the present invention disclosed herein are also considered to be within the scope of the present invention. Once a computer is programmed to implement the various aspects of the present invention including the methods of use as set out herein such computer in effect becomes a special purpose computer particular to the methods and program structures of this invention. The techniques necessary for this are well known to those skilled in the art of computer systems.

Other computer system configurations can also be employed to perform the method of this invention and to the extent that a particular system configuration is capable of performing the method of this invention it is equivalent to the representative computer system and within the scope of this invention.

The flowchart and block diagrams in the Figures and code examples provided in the specification illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions may occur out of the illustrated order. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

Having thus described the invention of the present application in detail and by reference to preferred embodiments thereof it will be apparent that modifications and variations are possible without departing from the scope of the invention defined in the appended claims.

