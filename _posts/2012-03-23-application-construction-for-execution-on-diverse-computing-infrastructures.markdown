---

title: Application construction for execution on diverse computing infrastructures
abstract: Example systems and methods of application construction for execution on diverse computing infrastructures are presented. In one example, an application descriptor comprising information regarding an application is received. Available computing machine resources for execution of the application are selected based on the information in the application descriptor. Software resources comprising the application are installed on the selected computing machine resources based on the information in the application descriptor. At least one of the selected computing machine resources and the installed software resources are configured for execution of the application based on the information in the application descriptor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141363&OS=09141363&RS=09141363
owner: SAP SE
number: 09141363
owner_city: Walldorf
owner_country: DE
publication_date: 20120323
---
Several types of cloud computing solutions have been developed to address the needs of multiple customer segments. One type of solution is Software as a Service SaaS in which a cloud computing service provider provides one or more software applications and the various hardware and software computing resources to execute those applications at the request of a customer. Such a solution frees the customer from the procurement and maintenance of the hardware and software used to execute applications of interest as well as the upkeep of the applications themselves.

Another type of solution is Platform as a Service PaaS to which the customer publishes or otherwise provides the application to be executed to the hardware and software platform supplied by the service provider. In many instances the hardware and software platform provided may also include a development environment in which the customer may develop and test the application to be executed. Thus in PaaS offerings the customer is responsible for more of the execution environment than in the SaaS environment in exchange for greater control over the application.

Representing another level of cloud computing solution is Infrastructure as a Service IaaS in which the service provider offers computing resources in the form of physical or virtual machines data storage networks load balancers and the like. In some examples the customer provides any applications to be executed possibly along with operating system images and other portions of the execution runtime environment for executing the applications. Generally access to an IaaS is facilitated by way of an application programming interface API . Typically IaaS APIs are not standardized and thus tend to vary from service provider to service provider. As a result in order to adapt applications to execute on multiple IaaS offerings the applications may require manual changes to the application to port the applications to each IaaS offering of interest.

The description that follows includes illustrative systems methods techniques instruction sequences and computing machine program products that embody illustrative embodiments. In the following description for purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques have not been shown in detail.

At least some of the embodiments described herein provide various techniques for constructing an application for execution on a computing infrastructure. In one example the computing infrastructure is provided via an infrastructure as a service IaaS . Generally the application is modeled by way of an application descriptor that provides information regarding hardware and software resources to be employed in the computing infrastructure to execute the application as well as instructions and or rules for controlling the execution of the application. To facilitate execution of the application a constructing infrastructure associated with the computing infrastructure assembles and configures the necessary resources of the computing infrastructure according to the application descriptor. Thus any computing infrastructure employing a constructing infrastructure capable of understanding the application descriptor may execute the application without changes to either the application descriptor or the application itself. Other aspects of the embodiments discussed herein may be ascertained from the following detailed description.

As depicted in the enterprise application platform includes an infrastructure as a service IaaS and a constructing infrastructure . In one example the constructing infrastructure appears as a platform as a service PaaS residing atop of and working in conjunction with the IaaS . The IaaS provides an application programming interface API that facilitates use of the IaaS by the constructing infrastructure . Further the IaaS may include one or more physical machines virtual machines data storage communication networks firewalls and load balancers . The physical machines may be any type of computing machines or systems capable of executing a portion of an application. The virtual machines may be any type of virtual machine used to execute one or more types of applications. One type of virtual machine may be a Java Virtual Machine JVM capable of running on a physical machine to execute a Java application. Depending on the particular implementation the IaaS may make available to a user via the API one or more of the physical machines the virtual machines or both.

The physical machines and or the virtual machines may also have access to data storage . In one example the data storage may be block data storage in the form of one or more hard disk drives optical disk drives solid state disk SSD drives or other non volatile memory devices. The data storage may be used to store input or output data for an application being executed on the one or more physical machines and or virtual machines . In one example the data storage may contain a database employed by the physical machines and or virtual machines to service database queries.

Continuing with the IaaS the communication networks may facilitate communication between any of the physical machines the virtual machines or other devices or systems external to the IaaS . The firewalls may provide protection for the various devices or systems of the IaaS from security threats originating outside the IaaS . The load balancers may instantiate and control the amount of resources such as the number of physical machines or virtual machines being employed for a particular application as well as control the workload of each of the resources.

Depending on the particular IaaS different types and amounts of resources may be available to a user. For example one IaaS may provide only virtual machines to a user another IaaS may supply only physical machines and a third IaaS may facilitate the use of both by a user or client directly. Also some IaaS offerings may employ fewer resources than those depicted in while others may provide more resources than those shown therein.

Currently several IaaS offerings may be available to a user at any particular time for executing a particular application of interest to the user. In many instances one IaaS may employ a different API than another especially if the IaaS systems are provided by different suppliers. Further any particular IaaS may evolve over time along with its API . Since the application may employ the API to perform various functions associated with the application differences between various possible APIs or changes to a particular API may cause corresponding modifications in the application to allow the application to be executed on a particular IaaS . Given the time and expense likely involved to make such modifications a user may be influenced to restrict execution of the application to only those IaaS offerings having APIs which are compatible with the current version of the application.

To facilitate execution of an application to a wider range of IaaS offerings the constructing infrastructure of may be employed atop the IaaS . Generally the constructing infrastructure provides a number of software resources that facilitate execution of the application on the IaaS . These software resources may include but are not limited to an operating system middleware for supporting the application e.g. a database and or other binary files native to the operating system software frameworks for executing the application e.g. Java application servers for Java applications web services and the like. In some examples the software resources may include one or more development tools such as an integrated development environment IDE for developing and testing the application an example of which is the Eclipse environment often used by developers for Java applications. Accordingly in one example the constructing infrastructure may operate as a platform as a service PaaS from the viewpoint of a user. While the various software resources are depicted within the constructing infrastructure in one or more of the software resources may be provided external to the constructing infrastructure in other implementations.

To facilitate execution of the application on the IaaS the constructing infrastructure receives the application oftentimes organized as multiple application components along with an application descriptor . Generally the application descriptor includes information describing the hardware and software resources to be employed in the IaaS to execute the application as well as any runtime rules or policies to be implemented during execution of the application. The constructing infrastructure may then use the information in the application descriptor to select the appropriate hardware resources install the application components of the application and associated software resources thereon and execute the application according to the runtime rules or policies specified.

As illustrated in the application components and the application descriptor may be transmitted to the constructing infrastructure of the enterprise application platform from a client machine via the network . In other implementations machines devices or systems other than the client machine may provide either or both of the application components and the application descriptor to the constructing infrastructure. For example the application descriptor may describe locations at which the constructing infrastructure may retrieve one or more of the application components such as at a data storage system external to the enterprise application platform . Further devices other than the client machine may access the executing application on the IaaS in other examples.

Any of the modules may be combined into fewer modules or may be partitioned into a greater number of modules. In addition while the embodiments discussed herein presume the use of the client server architecture of the system of the techniques presented may be employed in a peer to peer arrangement or even within a single computing system.

While the operations through of the method of are shown in a specific order other orders of operation including possibly concurrent execution of at least portions of one or more operations may be possible in some implementations of method as well as other methods discussed herein.

Each section of application component information may include one or more of a machine template identifier provisioning instructions identifier and runtime policies . In an example the machine template identifier may be a name or other identifier of a machine template that specifies various aspects of the computing machine resources that will be used for the associated application component . Such resources may include but are not limited to the operating system to be used the type and number of processor cores to be employed the amount of main memory to be provided the amount of disk drive capacity to be made available and so on. In one implementation the machine template identifier may reference a particular machine template maintained by the IaaS . In that case the constructing infrastructure may only pass the machine template identifier to the IaaS which in turn selects the various resources available in the IaaS for executing the application. In other examples the constructing infrastructure may access the machine template referenced by the machine template identifier and instruct the IaaS via the API as to the particular computing machine resources desired. Under this scenario the constructing infrastructure may store one or more machine templates locally or access machine templates that are stored in the IaaS or elsewhere. In yet another example the application component information may store the machine template within the application component information .

Each section of application component information may also include a provisioning instructions identifier for identifying one or more provisioning instructions that in turn identify one or more software resources e.g. the software resource of that are to be installed in the computing machine resources identified via the machine template identifier . Examples of the software resources may include virtual machines one or more additional modules deployed in the virtual machines applications servers binary content and the like. In the particular example of a Java application the software resources may include one or more Java Virtual Machines JVMs other Java modules deployed in the JVMs Java application servers and so forth. In one implementation the constructing infrastructure may execute the provisioning instructions after the computing machine resources associated with the current application component have been instantiated or selected for the application component . The provisioning instructions may also specify the installation of the associated application component . In one implementation the constructing infrastructure may use the provisioning instructions identifier to access the provisioning instructions which may be stored either within the constructing infrastructure or elsewhere and execute the instructions to install the software resources. In yet another sample the application component information may store the provisioning instructions within the application component information .

Additionally the application component information for each application component may include information for one or more runtime policies for the associated application component during execution. As shown in the runtime policies applicable to the associated application component may include elasticity rules visibility rules and load balancer instructions . In some implementations the application component information for any particular application component need not include each of the elasticity rules the visibility rules and the load balancer instructions but may instead omit one or more of these types of runtime policies .

In one example the elasticity rules may define how many instances or machines of the associated application component may be instantiated in response to one or more prevailing conditions such as the workload expected or experienced by each instance of the application component the response time desired for each instance of the application component the current time of day and the current day of week. The elasticity rules may also specify a minimum and a maximum number of instances that may apply during the lifetime of the application execution or for certain times or days. Other rules regarding the number of instances of the application component may also be specified as elasticity rules .

For each application component the visibility rules of the runtime policies for that component may specify application components of the application that maintain visibility of the application component governed by the visibility rules . In some embodiments the visibility rules may specify certain entry points or uniform resource locators URLs of the associated application component that are visible to the other application components . In an example illustrated in described below the visibility rules may be employed to model a plurality of tiers for the application. The ability to specify application tiers in such a manner may facilitate the modeling of complex applications in the application descriptor .

The load balancer instructions for an application component may provide instructions to register an entry point or URL of an associated application component with a load balancer of the IaaS . In an example execution of the instructions leads to exposure of the entry point or URL to users so that the users may access the application component by way of an Internet browser e.g. Internet Explorer by Microsoft Corporation or other client. The load balancer instructions may also include other instructions or rules that further specify the operation of the load balancer with respect to the application component .

For each application component operation a machine template is determined from the machine template identifier in the application component information operation . The identified machine template may then be used to select or identify computing machine resources from resources through in the IaaS that are available for executing the application component operation . The constructing infrastructure may also determine provisioning instructions via the provisioning instructions identifier operation and then execute the provisioning instructions to install software resources such as the software resources of on the selected computing machine resources operation .

The constructing infrastructure may then configure the various machine and or software resources associated with the application component for execution. More specifically the constructing infrastructure may configure the resulting machine or software resources to control the number of instances of the application component created according to the elasticity rules operation . The machine for the application component may also be configured to control the visibility of the associated application component to other application components of the same application based on the visibility rules for the application component operation . Further the constructing infrastructure may execute load balancer instructions to register the application component with a load balancer to expose the application component to a user operation . Other operations described above in conjunction with the application descriptor shown in may also be implemented in other embodiments of the method .

As described above the relative position of the application components within the application hierarchy is determined via the application descriptor more specifically the runtime policies of for the application . In the specific example of the application descriptor provides load balancer instructions for the first application component thus exposing at least one URL or entry point of the first application component to a user via a load balancer . As a result of exposing at least a portion of the first application component to a user the first application component may be viewed as residing in the first application tier . In one example the first application component may serve as a proxy or front end for the application .

The second application component which may be a process engine for the application may be associated with a visibility rule allowing visibility of the second application component to instances of the first application component and other instances of the second application component . This visibility rule may be viewed as placing the second application component in its own second application tier . In addition an elasticity rule for the second application component may cause the creation of as many instances or machines for the second application component as necessary to satisfy some predefined response time. In this particular situation three machines associated with the second application component are created.

The third application component which operates as a database in is associated with a visibility rule allowing visibility of at least a portion of the third application component to the second application component but not to the first application component . By isolating the third application component from the first application component the third application component operates in a third application tier separate from the other tiers and . While the application reflects three separate application tiers and fewer or greater numbers of tiers may be specified in a similar fashion via the visibility rules and the load balancer instructions for each application component of an application.

Moreover while only a few runtime policies are shown in for each of the application components and other runtime policies may be provided in some examples. In one implementation each of the first application component and the third application component may have an associated elasticity rule restricting each of these components and to a single machine or instance. In other examples the lack of such an elasticity rule may be interpreted as a default number of machines for the components and equal to one.

As a result of at least some of the embodiments described above an application may be executed on a variety of IaaS offerings with varying APIs without modifying the application. More specifically by defining the various computing machine resources and support software to be employed along with any relevant runtime policies applicable to the application an application descriptor containing a number of data structures holding this information may be interpreted by a constructing infrastructure to build the application using associated IaaS. Further the application descriptor may not require modification if a standardized format for the descriptor is employed. As a result in return thr generating the application descriptor a user may gain the ability to execute the associated application on a variety of IaaSes as well as continue the ability to execute the application on an IaaS with a modified API.

While the above discussion employs Java applications as examples applications drafted in other programming languages may benefit from use of the various principles described herein. Furthermore while various embodiments discussed herein depict a typical client server environment peer to peer or other cooperative arrangements between a user and a system designed to execute an application may also employ the inventive techniques discussed above.

The machine is capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The example of the processing system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory e.g. random access memory and static memory e.g. static random access memory which communicate with each other via bus . The processing system may further include video display unit e.g. a plasma display a liquid crystal display LCD or a cathode ray tube CRT . The processing system also includes an alphanumeric input device e.g. a keyboard a user interface UI navigation device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit a type of non volatile memory storage includes a machine readable medium on which is stored one or more sets of data structures and instructions e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The data structures and instructions may also reside completely or at least partially within the main memory the static memory and or within the processor during execution thereof by processing system with the main memory and processor also constituting machine readable tangible media.

The data structures and instructions may further be transmitted or received over a computer network via network interface device utilizing any one of a number of well known transfer protocols e.g. HyperText Transfer Protocol HTTP .

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. the processing system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may include dedicated circuitry or logic that is permanently configured for example as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also include programmable logic or circuitry for example as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry for example configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules include a general purpose processor that is configured using software the general purpose processor may be configured as respective different hardware modules at different times Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and constitute a different hardware module at a different instance of time.

Modules can provide information to and receive information from other modules. For example the described modules may be regarded as being communicatively coupled. Where multiples of such hardware modules exist contemporaneously communications may be achieved through signal transmissions such as for example over appropriate circuits and buses that connect the modules. In embodiments in which multiple modules are configured or instantiated at different times communications between such modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple modules have access. For example one module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further module may then at a later time access the memory device to retrieve and process the stored output. Modules may also initiate communications with input or output devices and can operate on a resource for example a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments include processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processors may be located in a single location e.g. within a home environment within an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

While the embodiments are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of claims provided below is not limited to the embodiments described herein. In general the techniques described herein may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the claims. In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the claims and their equivalents.

