---

title: Distributed computing environment software configuration
abstract: Certain embodiments herein relate to configuring software in a virtual machine instance (“instance”) to optimally utilize computing resources that are available for implementation of the software. The software, such as operating systems and software applications, may be configured based on resource parameters associated with the instance. Such resource parameters may include information associated with capacities of the available computing resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436493&OS=09436493&RS=09436493
owner: Amazon Technologies, Inc.
number: 09436493
owner_city: Reno
owner_country: US
publication_date: 20120628
---
Service providers may offer distributed computing environments. These computing environments may include a number of computing resources that are made available over networks such as the Internet and accessed through services such as Web services. Typically when these resources are allocated to run workloads for users the software associated with the user i.e. operating systems or applications may not be tailored to run on the allocated resources. This may lead to less than optimal performance for the users and the misallocation of resources within the distributed computing environment.

Certain implementations will now be described more fully below with reference to the accompanying drawings in which various implementations and or aspects are shown. However various aspects may be implemented in many different forms and should not be construed as limited to the implementations set forth herein rather these implementations are provided so that this disclosure will be thorough and complete and will fully convey the scope of the disclosure to those skilled in the art. Like numbers refer to like elements throughout.

Illustrative embodiments herein are directed to among other things configuring software for optimized performance in a distributed computing environment. Software such as operating systems OSs and software applications may be configured such to take advantage of available computing resources. For example an OS or application could enable features when additional resources are available or alternatively minimize its features or performance when less powerful computing resources are available. Certain embodiments herein relate to such software configuring itself based at least in part on the computing resources available to the software. For example an operating system may configure itself and or be configured by limiting the maximum number of concurrent web connections that may be received by a web server upon detecting that adequate computing resources are not available. The same operating system however may configure itself and or be configured by increasing the number of maximum concurrent web connections that may be received by a web server upon detecting that adequate computing resources are available. In this way software may perform optimally based on computing resources available to the software. According to certain embodiments herein the software may perform such configurations without a user s assistance.

An example of software optimization as described herein may be as follows. A customer may request a certain amount of computing capacity for implementing a virtual machine running a web server from a service provider. In response to the request the service provider may request a certain amount of processing power memory and hard disk space to run the virtual machine for the customer. To make it easier for service providers to manage computing capacities categories of computing capacities may exist. For example a customer may request a small medium or large amount of computing capacity and the service provider will locate a server within the distributed computing environment to host the requested amount of capacity. After the service provider selects a server it can launch a virtual machine instance or instance which may include an operating system and the web server software. The operating system and web server may require tuning or configuring so that they run according to allocated computing resources of the server. As discussed above using too few of the available computing resources may represent inefficiency or wasted opportunities to provide content to users whereas using too many resources may result in a poor user experience in the form of slow delivery of content system errors or even outages.

Software optimization according to the present disclosure may solve these problems. In particular software such as the operating system and web server in the present example may configure itself or be configured based on information provided by the service provider. Such optimization may occur as follows. In a specific example when the instance is created an operating system in the instance may begin to configure itself. For example the operating system may detect that it is running in a large instance because the operating system may analyze the hardware allocated to it by a virtualization manager running on a server and or because an agent running in the virtual machine exposes information that indicates the size of the instance to the OS. Because it is running in a large instance type the operating system may take advantage of having relatively more computing resources. For example the operating system may configure itself to allow an increased number of maximum allowable concurrent connections to the web server

Similar to the operating system the web server may also tune or configure itself based on the computing resources available in the large instance. The web server may for example activate a feature that may stream real time video content to end users of the customer. Streaming real time video content may be a CPU intensive process that may only be available for large instances or greater. Thus upon detecting that it is running in a large instance the web server may activate such a CPU intensive feature. Notably the web server and the operating system may not have configured themselves to provide such enhancements were they running in a small instance.

Software optimization as described herein may have numerous benefits some of which may include improved efficiency and productivity gains for customers in the way that their software may be preconfigured to take advantage of available resources or put another way to constrain itself to available computing resources which may result in a more enriched and reliable experience for a service provider s end users.

As described physical computing resources available for implementing software may be represented virtually by associating the software with a virtual machine instance instance such as in a distributed computing environment. As used herein a virtual machine instance or instance may be referred to as a software implementation of a machine such as a computer that executes computer programs like a physical machine. There may be various types of instances each of which may include different information associated with computing resources that may be utilized to implement the software referred to herein as resource parameters. Such information may be used to configure software in certain embodiments herein. In so doing the software may be optimized for utilization of the computing resources. In association with using a distributed computing environment a user may request an instance that may include software such as an operating system and or one or more software applications. The instance may represent a certain capacity or portion of the available computing resources as requested by a user for implementing the software. Such capacity of resources may define an execution environment for the software. In certain embodiments a user may request various amounts of such capacities by requesting a type of instance in which each type of instance may correspond to a certain capacity of the computing resources. Thus a different execution environment may exist for different types of instances based on a user s needs in one example.

An instance may be hosted by a server computer in a distributed computing environment of a service provider. In so doing the server computer may perform a number of functions. For example the server computer may identify resource parameters associated with a type of instance requested by a user. Such resource parameters may provide information associated with the instance s execution environment. For example the resource parameters may specify a capacity of CPU RAM hard disk or other hardware devices that may be utilized by software associated with an instance. The resource parameters may include predetermined information associated with computing information in a distributed computing environment as well as real time information obtained by a server computer hosting the instance.

The instance including its operating system and software applications may utilize the resource parameters to optimize its behavior or performance. In other words as used herein the instance may be configured according to the resource parameters. As an illustration an instance e.g. software associated with the instance may detect an available amount of CPU capacity or RAM and based at least in part on the detection adjust one or more parameters that may control the software s performance availability etc. Numerous examples of how an instance may be configured according to its resource parameters are provided in certain embodiments herein.

Different occurrences in an execution environment may trigger configuration of an instance. For example an instance may be configured in association with its creation or launching by a server computer hosting the instance. During such creation or launching an operating system in the instance may adjust its configuration based on the resource parameters as part of its initial startup process. Other examples of triggers for configuration include but are not limited to installation of software and changes in computing resources available to implement the software associated with an instance. For example the utilization of an increased number of software applications hardware performance issues the addition or removal of hardware etc. may affect the available computing resources for an instance. In certain embodiments such occurrences may be monitored and upon their occurrence an instance may be reconfigured to account for the changes in the execution environment.

The above examples and descriptions are non limiting. Many more examples and descriptions may exist in other embodiments some of which are provided below.

The example computing environment may include but is not limited to one or more instance host devices one or more instance host selection devices one or more service provider devices and one or more user devices . Each of these devices may communicate with one another via one or more networks to implement the features described herein. For example an instance host device may be selected by an instance host selection device e.g. via a selection application executed in a memory to host an instance that may be requested by a user utilizing a service provider device . The instance host device may provide content information etc. to users in association with software running on the instance host device .

As used herein the term device may refer to any computing component that includes one or more processors that can be configured to execute computer readable computer implemented or computer executable instructions. Example devices can include personal computers server computers server farms digital assistants smart phones personal digital assistants digital tablets Internet appliances application specific circuits microcontrollers minicomputers transceivers or customer premise equipment such as set top boxes kiosks or other processor based devices. The execution of suitable computer implemented instructions by one or more processors associated with various devices may form special purpose computers or other particular machines that may facilitate optimized configuration of software as described herein.

Embodiments may be provided as a computer program product including a non transitory machine readable storage medium having stored thereon instructions in compressed or uncompressed form that may be used to program a computer or other electronic device to perform processes or methods described herein. The machine readable storage medium may include but is not limited to hard drives floppy diskettes optical disks CD ROMs DVDs read only memories ROMs random access memories RAMs EPROMs EEPROMs flash memory magnetic or optical cards solid state memory devices or other types of media machine readable medium suitable for storing electronic instructions. Further embodiments may also be provided as a computer program product including a transitory machine readable signal in compressed or uncompressed form . Examples of machine readable signals whether modulated using a carrier or not include but are not limited to signals that a computer system or machine hosting or running a computer program may be configured to access including signals downloaded through the Internet or other networks. For example distribution of software may be downloaded via the Internet.

The one or more networks may include any number of wired or wireless networks that can enable various computing devices in the example computing environment to communicate with one another. In other embodiments other networks intranets or combinations of different types of networks may be used including but not limited to the Internet intranets cable networks cellular networks landline based networks or other communication mediums connecting multiple computing devices to one another. Other embodiments may not involve a network and may for example provide features on a single device or on devices that are directly connected to one another e.g. the instance host device may be directly connected to the instance host selection device .

The devices illustrated in may include one or more processors configured to communicate with one or more memory devices and various other components or devices. For example the instance host device may include one or more processors that are configured to communicate with one or more memory or memory devices one or more input output IO devices storage one or more communication connections and one or more data stores . The processor may be implemented as appropriate in hardware software firmware or combinations thereof. The processors and associated with the instance host selection device and the service provider device respectively may be the same or at least similar to the processor in one embodiment.

The memory may store program instructions that are loadable and executable on the processor as well as data generated during the execution of these programs. Depending on the configuration and type of instance host device the memory may be volatile such as random access memory RAM and or non volatile such as read only memory ROM flash memory etc. The memory and associated with the instance host selection device and the service provider device respectively may be the same or at least similar to the memory in one embodiment.

The storage may include removable and or non removable storage including but not limited to magnetic storage optical disks and or tape storage. The disk drives and their associated computer readable media may provide non volatile storage of computer readable instructions data structures program modules and other data for the computing devices. In some implementations the memory may include multiple different types of memory such as static random access memory SRAM dynamic random access memory DRAM or ROM.

The memory and the storage both removable and non removable are all examples of computer readable storage media. For example computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data.

The one or more communication connections may allow the instance host device to communicate with other devices e.g. user devices databases user terminals and various other devices that may exist on the one or more networks . The IO devices may enable a user to interact with the instance host device . Such IO devices may include but are not limited to a keyboard a mouse a pen a voice input device a touch input device a display a camera or imaging device speakers or a printer.

The one or more data stores may store lists arrays databases flat files etc. In some implementations the data store may be stored in memory external to the instance host device but accessible via the one or more networks such as with a cloud storage service. The data stores may store resource parameters and various other information that may be utilized to configure an instance with which the data stores may be associated. In one embodiment each instance may have a data store that stores resource parameters associated with the instance.

The memory may also include an operating system O S one or more instances and various software applications and or modules that may implement the configuration of software applications according to their execution environment. Example modules may include a configuration agent which may run in an instance and an instance manager which may include a resource parameters identification module and a resource parameters store module . Each of these modules may be implemented as individual modules that provide specific functionality associated with configuring software applications. Alternatively one or more of the modules may perform all or at least some of the functionality associated with the other modules.

The instance manager may create or launch an instance based on the relevant resource parameters identified by the resource parameters identification module as will be discussed below. The creation or launching may make available to the instance a capacity of resources in a distributed computing environment or other computing environment that may be commensurate with the type of instance requested. In one embodiment the instance may include an operating system when it is created. The operating system may configure itself based on the relevant resource parameters stored in the instance e.g. by the resource parameters store module . Examples of the various types of configurations will be described below. Similarly one or more software applications when installed and or initiated in association with the instance may also be configured based on the resource parameters associated with the instance. According to certain embodiments such software may be configured by a configuration agent which may facilitate the configuration of software in an instance as will be discussed in greater detail below. In some embodiments an instance may include an operating system as well as software applications when it is created.

The instance manager may also facilitate the dissemination of information to other devices such as the service provider device or the user devices . For example the instance manager may store information in an instance. When a service provider device for example requires information such as the Internet Protocol IP address or the resource parameters used to configure an instance the service provider device may access and retrieve the stored information. In one embodiment the users may perform the information retrieval by utilizing one or more service provider applications stored in a memory at the service provider device .

The instance manager may receive requests from the instance host selection device to host one or more instances . Selection of an instance host device may be based on various criteria such as but not limited to the capacities of computing resources available to the instance host device . If sufficient capacities exist for hosting the type of instance desired then the instance host device may host the instance per the request received by the instance manager according to one embodiment.

In addition to communicating with the various devices on the network the instance manager may also perform various management functions for the instance host device . For example the instance manager may monitor the computing environment in which an instance runs for changes that may occur in the computing environment such as changes in utilization of central processing units CPUs the installation of additional hardware and or software outages of computer servers or other devices or other occurrences in a computing environment. Information associated with such occurrences may be stored in the instance by the resource parameters store module for use by software associated with the instance to reconfigure the software.

The resource parameters identification module may identify resource parameters associated with various types of instances . An example type of an instance may include a description of the instance associated with different capacities of computing resources as will be discussed in greater detail below. The resource parameters identification module may identify resource parameters from various sources in the network . In one example resource parameters may be stored at a central database server not shown which may include predetermined information e.g. before an instance is created and launched about computing resources available in a distributed computing environment. Resource parameters may also include various other information that may not be predetermined but may be obtained in real time from a server computer hosting the instance .

The user devices may include a processor which may be configured to process computer executable instructions in a memory . The memory may include one or more user applications that may be utilized by a user to interact with content information etc. provided by the instance host device . Example user applications may include a web browser for presenting content to a user or a client side application that may interact with a server side application for exchanging content between the user devices and the instance host device . A user application may also include an authentication program or module for facilitating authentication of a user at the instance host device .

Distinctions drawn herein between the user devices and service provider devices may not exist in some embodiments. In these embodiments a user may utilize a user device to perform each of the functions described above in association with the service provider device . For example the user device may also request instances provide user account credentials and interact with content information etc. provided by the instance host device .

The above examples are not meant to be limiting. Many more examples related to configuring various types of instances and the software therein may exist in other embodiments. The software such as operating systems and software applications may modify any number of its functions based on resource parameters associated with an instance in which the software runs. In certain embodiments configuring an instance may refer to configuring an operating system and or a software application in the instance. While various functions are described above with respect to particular devices it is understood that these functions may be distributed in many ways across the devices. For example the functionality provided by the instance host device may be provided at least in part by the instance host selection device .

Resource parameters may be stored in various formats. In one embodiment the resource parameters may be stored as one or more text files that may include one or more delimiters that may assist program code with parsing information from the resource parameters. Various other formats and techniques for obtaining resource parameters in such formats may exist in other embodiments.

As described resource parameters may be determined from predetermined information e.g. before an instance is created or it may be determined from real time information associated with a server computer on which an instance associated with the resource parameters may run as non limiting examples. There may be in certain embodiments different types of resource parameters. In one example a different resource parameters type may exist for each different distributed computing environment each of which may include various types of instances. Each type of instance may utilize different amounts of capacity of available computing resources. Each configuration of computing resources may be available in different sizes such as large resources consisting of numerous processors large amounts of memory and or large storage capacity e.g. large instance and small resources consisting of relatively few processors a relatively small amount of memory and or a relatively small storage capacity e.g. small instance . Such capacities may be allocated for an instance in terms of one or more slots. A slot may be referred to as a virtual unit of capacity for CPU RAM hard disk bandwidth network connectivity or other computing resources. To provide additional capacities of computing resources slots may be combined. For example one slot may be utilized to provide a small amount of computing resources for the small instance . Five slots may be utilized however to provide a large amount of computing resources for the large instance in one example. The resource parameters associated with the instances and may include information identifying such computing resources and their respective capacities. As will be described below such information may be accessed by software in the instances and and utilized to configure the software.

As an example a request to create a small instance type for running a web server may be received from a user utilizing a service provider device not shown . In response to the request the instance may identify resource parameters associated with the instance type e.g. via the resource parameters identification module in . In one embodiment a resource parameters identification module may specify various computer arguments e.g. pieces of data provided as inputs into a function or subroutine in addition to instance type to select the resource parameters for the instance . Such arguments may include but are not limited to the type of operating system the type of the web server e.g. if provided or known when the instance is requested or more generally the type of software applications running in the instance an indication of how the instance will be utilized an identification of the service provider or user requesting the instance and software a geographical location of the service provider or user and various other information associated with the instance. Such arguments may determine which resource parameters are selected. For example resource parameters selected based at least in part on the type of software associated with an instance may be different from resource parameters selected based on the service provider that requested the instance. As an example when a type of software is specified as an argument to the identification module resource parameters associated with computing resources that are historically associated with implementing the software may be provided. Such information may be stored in one or more system or activity logs other files databases etc. For example if the type of software is related to computer networking resource parameters associated with network connectivity bandwidth and other computer networking related resource parameters may be selected.

Returning to the present example the selected resource parameters may be stored in instance as resource parameters e.g. via the resource parameters store module . The resource parameters may include at least a portion of the resource parameters based on the selection parameters for identifying resource parameters associated with the requested instance as described above. In one embodiment the resource parameters may be the same a subset or a derivation of the resource parameters . A capacity of the computing resources in the resource parameters however may be specified commensurate with the requested small instance .

The instance may be created e.g. by the instance manager in . In association with creating the instance the operating system may detect that it is associated with a small instance by analyzing the resource parameters . The operating system may configure itself so that it performs optimally based on the resource parameters . For example the operating system may adjust the maximum transmission unit MTU size for sending packets in a network based on the network conditions associated with an instance such as available bandwidth of the server hosting the instance percent utilization of a network interface card NIC and network latency as non limiting examples. For example upon detecting a relatively high bandwidth the operating system may increase the MTU size for sending data packets in a network whereas the operating system may decrease the MTU size for sending data packets in a network upon detecting a relatively low bandwidth.

As another example the operating system may configure itself to adjust a number of allowable processes that may be performed by the web server the one or more software applications or other software applications not shown that may run in the instance . For example the operating system may decrease a maximum number of threads that may be spawned by the software applications a maximum number of concurrent web connections that may be received by the web server a maximum number of database connections that may be received by a database server not shown as non limiting examples upon detecting that the instance is a small instance thereby having a small amount of computing resources available. The operating system may have increased the number of allowable processes if it detected that it was running in a large instance for example.

As another example in association with installing or initiating the web server the web server may also be configured based on the resource parameters . For example the web server may update a parameter in its configuration to activate utilization of a less computing resource intensive server side function upon detecting that it is running in a small instance with lower capacities of the computing resources than a large instance type for which a more resource intensive server side function that provides richer content to users may be used. Depending on the function activated a type and amount of content provided by the web server or other software application may be adjusted to optimize utilization of the available computing resources e.g. such that rich content is not delivered when the available resources may struggle or fail to communicate the content.

In certain embodiments the instance may include a configuration agent such as the configuration agent illustrated in which may configure the operating system the web server the software applications or other software in the instance .

Also in association with creating an instance information associated with the instance may be communicated from the instance host device to a service provider device requesting the instance in one embodiment. In one embodiment such information may be based on a request from a service provider device or other device. For example in response to a request for a network location of the instance the service provider device may send an IP address associated with the instance the resource parameters used to configure the instance as well as other information related to the instance . A service provider utilizing the service provider device may configure the web server to have an IP address equivalent to the IP address returned from the instance host device . An end user may specify the IP address in a web browser for example at a user device not shown to gain access to software associated with the instance . Numerous other examples involving different types of requested information content data etc. may exist in other embodiments.

In certain embodiments software associated with instances may be reconfigured. In one embodiment software may be reconfigured based on changes in an execution environment to which the software may belong. An example of such reconfiguration may be as follows. Additional software such as software applications may be installed in the instance . As a result of the installations and subsequent use of the software applications CPU utilization at the host instance device may increase. Such an increase may be detected by the host instance device e.g. an instance manager such as instance manager in in one embodiment. For example the instance manager may periodically input an operating system command utilize other program code or utilize other techniques to determine the current CPU utilization of the instance host device . Information resulting from such commands code or techniques may update resource parameters that may be stored as resource parameters and or resource parameters in some embodiments.

The instance manager may compare the CPU utilizations upon receiving the results from each request and upon detecting variations in the CPU utilizations may determine that a change event has occurred in the instance . In one embodiment CPU utilizations that vary by a certain percentage for a certain duration of time e.g. 10 for more than one hour may signify a change event instead of smaller percentage variations in CPU utilization which may suggest more temporary increases in CPU utilization. If a change event has been determined in the present example the operating system and web server may be reconfigured to optimize their performance based on the change in CPU utilization. For example the operating system may increase the maximum number of allowable concurrent web connections based on the decrease in CPU utilization. Such a reconfiguration may prevent the web server from attempting to receive more web connections than the available computing resources may be able to provide which if granted may further burden CPU utilization and other computing resources associated with the resource parameters . Numerous other examples of changes in an execution environment and reconfiguring an instance and associated software based on such changes may exist in other embodiments.

An instance may be created and configured in a similar fashion to that described in association with the instance . For example the resource parameters may be accessed and the identified resource parameters may be stored in the large instance . In one embodiment the resource parameters may be the same as the resource parameters . In another embodiment the resource parameters and resource parameters may differ based on the type of instance. For example the instance may provide a web server for delivering static content to users whereas the instance may provide a game application for delivering real time content information etc. in association with a real time game which may require much greater computing resources than the web server in small instance hence the large instance and a correspondingly different resource parameters . The web server and the game application may be optimized according to the computing resources available as indicated in the resource parameters and respectively.

Similar to that described above in association with the instance the instance may be created and configured. Because instance is a large instance larger capacities of computing resources may be available to the instance than that available for the small instance . The resource parameters may reflect such larger capacities. Upon creating the instance the resource parameters may be accessed and utilized by the operating system to adjust its configuration so that the operating system is optimized according to the computing resources available to the instance . For example upon detecting that it is associated with a large instance type having a large amount of computing resources available the operating system may increase a maximum number of allowable processes. For example the operating system may increase a maximum number of threads that may be spawned by the game application a maximum number of concurrent web connections that may be received by the web server and a maximum number of database connections that may be received by a database server not shown as non limiting examples. As discussed above the operating system of instance may decrease the number of allowable processes when it detects that it is associated with a small instance.

The game application upon being installed or initiated may also access the resource parameters and adjust its configuration to optimize its performance according to the computing resources available to the instance as set forth in the resource parameters . For example the game application may enable a user of the game application to enable 3 dimensional effects or more computing resource intensive features of the game application upon detecting in the resource parameters the availability of a Graphics Processing Unit capable of processing game intensive features.

The operating system and game application may also be reconfigured based on changes in the execution environment associated with instance in similar fashion to that described in association with the instance .

As described above in association with instance the instance may include a configuration agent that may configure the operating system the web server the game application and other software in the instance or another instance.

The instance host device may provide content information etc. to the user devices which users may utilize to interact with the applications and databases in the instances and . Communications between the user devices the instance host device and the service provider device may occur via one or more networks which are not shown in for purposes of simplification.

Numerous examples may exist in other embodiments each of which may illustrate the capability of configuring software applications to utilize resource capacities in their execution environment. Use of terms such as small and large in association with instance types are for purposes of illustration only and are not meant to be limiting. A service provider or user may specify any term symbol or representation of an amount of desired computing resource capacity for hosting its services including specifying a capacity for each of the desired computing resources. Additionally various resource parameters may be analyzed by software to determine configurations for the software. In the above examples the resource parameters and are analyzed to determine such configurations. In other examples the resource parameters from which the resource parameters and may be determined may be utilized to determine configurations for the software.

Resource parameter processing modules which may include a resource parameters identification module and a resource parameters store module may identify all or a portion of resource parameters and store the resource parameters as resource parameters respectively as described above. For purposes of explanation it is assumed that the instance is a large instance . Any number of instance types may be used in other examples.

An example of utilizing the configuration agent to configure the software may be as follows. In association with creating the instance e.g. by the instance manager the operating system may communicate with the configuration agent and instruct it to access the resource parameters in the instance . In one example such communication may occur via a program function call or similar communication instruction in which the software may pass parameters to the configuration agent that may direct the configuration agent s behavior. For example the software may specify the location of the resource parameters such that the configuration agent may know how to access the resource parameters . The location may be a file path an IP address a website Uniform Resource Locator URL translatable to an IP address a memory address or other location specific information.

In addition to locating the resource parameters the software may also specify a portion of the resource parameters to retrieve in certain embodiments. In this way the resource parameters may be filtered by the software to provide only a portion of the resource parameters . For example the software may determine that only the CPU RAM and network connectivity resource parameter information are relevant to the configuration of the software and may therefore instruct the configuration agent to retrieve only this information. The software may also provide the configuration agent with one or more locations of the software s configuration information and other information that may be used by the configuration agent to update configurations for the software .

To update configurations for the software according to a non limiting example the configuration agent may parse relevant information associated with the configuration from the resource parameters locate the configuration of the software e.g. in configuration files databases etc. compare the values in the configuration with the parsed resource parameters determine appropriate values for a new configuration based on the parsed resource parameters and update the configuration with the appropriate values.

For example the configuration agent may update a configuration file accessed by the operating system to change the maximum number of allowable concurrent web connections from 10 000 to 20 000 upon detecting that the operating system is associated with a large instance type. Such detection may be accomplished by the configuration agent analyzing information in the resource parameters . For example upon determining that 2.0 gigahertz CPU processing capacity and 3.0 gigabytes of RAM exists in the resource parameters the configuration agent may determine that the software exists in a large instance type. The configuration agent may utilize the amount of CPU RAM and or the type of the instance e.g. large to determine the optimal configuration for the maximum number of concurrent web connections and an appropriate request for more or less may be issued in one embodiment.

The optimal configuration may be determined in various ways. For example the optimal configuration may be determined based on predetermined values that may for example be included in a matrix or table of information that may associate a configuration value with certain capacities of computing resources as identified in the resource parameters. For example the table may include a certain number of rows that may include a description of types of instances and or a capacity or range of capacities for various computing resources available in a computing environment. The columns may contain various configuration parameters that may be associated with various software. The intersection of the rows and columns may include a configuration value associated with the configuration parameter for a particular computing resource or type of instance. For example in the above example in which the number of concurrent users was increased from 10 000 to 20 000 a table may include a row indicating a large instance type and a column indicating maximum number of concurrent sessions. The intersection of the row and column e.g. the optimal configuration value may indicate that 20 000 concurrent users is the optimal configuration value for receiving a number of concurrent web sessions for a web server associated with a large instance type in the present example. Configuration values may also exist for other configuration parameters such as those discussed in the examples herein and for other resource parameters such as CPU and RAM as well as for ranges of such resource parameters.

The optimal configuration value may also be determined using various other techniques algorithms logic mathematical computations etc. in other embodiments. A configuration value may be a number term amount of capacity or other indicator that may cause the software to perform according to the configuration value when accessed by the software.

In some embodiments instead of the configuration agent configuring the software the configuration agent may provide resource parameters to the software and or optimal configuration values and the software may utilize such information to configure itself. The operating system may use such information to configure its kernel in one example. The configuration of the operating system s kernel may be performed when the operating system is being installed and or being initiated in the instance . Similar to the operating system the software application may also be configured during its installation e.g. via the installation software during its initial startup at which time the software application may access its configuration information or other opportunities in which the software application may access its configuration information. As another example the installation software may communicate with the configuration agent to configure software that is being installed by the installation software based on the resource parameters as described above.

The configuration agent may monitor changes in the execution environment associated with the instance or may receive an indication from the instance manager that such a change has occurred. The indication from the instance manager may trigger the configuration agent to configure software in the manner described above in one embodiment. The configuration agent may also detect such changes by periodically accessing the resource parameters and comparing current information in the resource parameters to previous information in the resource parameters . Upon detecting changes in the resource parameters the configuration agent may configure the software in the manner described above in one embodiment. In this way the software may be configured in real time. In some examples the software may require a stop and restart for example so that the software may access and adjust to its updated configuration.

The above example is only one non limiting example. Many more examples that may involve fewer or more devices different types of devices and or different types of resource parameters configurations etc. may exist in other embodiments. For example the examples above refer to the configuration agent configuring the software or the software configuring itself. In other examples a different one or more software programs and or modules may perform the configurations performed by the configuration agent or the software . Additionally numerous other opportunities for configuring the software in addition to installation initiation or startup or detection of changes in the computing execution environment may exist in other embodiments. Also in other embodiments the operating system the installation software and the software application each may have their own program code independent of the configuration agent that may respectively configure these software as described in association with the configuration agent .

At least a portion of resource parameters may be identified for configuring the software at block . As described resource parameters may include but are not limited to information associated with capacities of computing resources available in a distributed computing environment or other computing environment for implementing software such as operating systems and software applications. In certain embodiments all or at least a portion of the resource parameters may be identified based on various considerations such as the type of instance an indication of how the instance will be utilized the type of software running in the instance etc.

At block at least a portion of the identified resource parameters may be stored e.g. via the resource parameters store module where it may be accessed by software associated with the created instance e.g. via the configuration agent in . The instance may be created or launched based on the identified resource parameters at block . Such creation may make available to the instance a certain capacity of computing resources. Software running in the instance may optimize its performance according to these available computing resources e.g. the execution environment.

At block a request for information associated with the instance may be received e.g. from the service provider device or other device. The requested information may include an IP address and the resource parameters used to configure the instance as non limiting examples. The requested information may be sent to the device that requested the information at block .

At block an optimized configuration value that may be used to configure the instance may be determined at block . As described above various techniques may be used to determine the optimized configuration value such as but not limited to cross referencing the value in a matrix associating resource parameters with respective capacities. Software in the instance may be configured using the optimized configuration value e.g. via the configuration agent at block . According to some configurations the software may configure itself at block which will be discussed in greater detail in association with .

At block a determination may be made whether a configuration update is required. As an example a configuration update may be required in response to changes in available computing resources associated with an instance which may be detected by the configuration agent or the instance manager according to various embodiments. Example change events that may impact computing resources may include but are not limited to an increased number of software applications hardware performance issues or the addition or removal of hardware. If a configuration update is required processing may return to block where at least a portion of resource parameters may be determined for configuring the instance. By configuring the instance based on changes in the computing environment software in the instance may be optimized according to the changes in computing resources.

At block the configuration agent may prepare information that may be used to configure the software. For example the configuration agent may determine at least a portion of information associated with resource parameters and or configuration values e.g. as determined for the instance at blocks and of . The determined portion of the resource parameters and or configuration values may represent the relevant information to be used in configuring the software in one example. After the information is prepared it may be made available at block .

The software may access the information at block and process the information at block . Such processing may include the software requesting additional information for use in configuring itself. In one example the software may request the additional information after determining that the software requires additional information to perform its configuration. The configuration agent may determine the additional information at block for example by determining additional resource parameters or configuration values based on information that may be provided in the request from the software. The software may access the additional information determined by the configuration agent at block . The software may use all or a portion of the information made available by the configuration module to perform its configuration at block .

In some embodiments all or a portion of the functionality described herein may be performed by one or more software programs and or modules. For example software such as an operating system or software application may configure itself without communicating with a configuration agent as described above.

The operations and processes described and shown above may be carried out or performed in any suitable order as desired in various implementations. Additionally in certain implementations at least a portion of the operations may be carried out in parallel. Furthermore in certain implementations less than or more than the operations described above may be performed.

Certain aspects of the disclosure are described above with reference to block and flow diagrams of systems methods apparatuses and or computer program products according to various implementations. It will be understood that one or more blocks of the block diagrams and flow diagrams and combinations of blocks in the block diagrams and the flow diagrams respectively can be implemented by computer executable code or program instructions. Likewise some blocks of the block diagrams and flow diagrams may not necessarily need to be performed in the order presented or may not necessarily need to be performed at all according to some implementations.

These computer executable code or program instructions may be loaded onto a special purpose computer or other particular machine a processor or other programmable data processing apparatus to produce a particular machine such that the instructions that execute on the computer processor or other programmable data processing apparatus create means for implementing one or more functions specified in the flow diagram block or blocks. These computer program instructions may also be stored in a computer readable storage media or memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable storage media produce an article of manufacture including instruction means that implement one or more functions specified in the flow diagram block or blocks. As an example certain implementations may provide for a computer program product comprising a computer readable storage medium having a computer readable program code or program instructions implemented therein said computer readable program code adapted to be executed to implement one or more functions specified in the flow diagram block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational elements or steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions that execute on the computer or other programmable apparatus provide elements or steps for implementing the functions specified in the flow diagram block or blocks.

Accordingly blocks of the block diagrams and flow diagrams support combinations of means for performing the specified functions combinations of elements or steps for performing the specified functions and program instruction means for performing the specified functions. It will also be understood that each block of the block diagrams and flow diagrams and combinations of blocks in the block diagrams and flow diagrams can be implemented by special purpose hardware based computer systems that perform the specified functions elements or steps or combinations of special purpose hardware and computer instructions.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain implementations could include while other implementations do not include certain features elements and or operations. Thus such conditional language is not generally intended to imply that features elements and or operations are in any way required for one or more implementations or that one or more implementations necessarily include logic for deciding with or without user input or prompting whether these features elements and or operations are included or are to be performed in any particular implementation.

Many modifications and other implementations of the disclosure set forth herein will be apparent having the benefit of the teachings presented in the foregoing descriptions and the associated drawings. Therefore it is to be understood that the disclosure is not to be limited to the specific implementations disclosed and that modifications and other implementations are intended to be included within the scope of the appended claims. Although specific terms are employed herein they are used in a generic and descriptive sense only and not for purposes of limitation.

