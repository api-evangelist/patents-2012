---

title: Techniques for providing hardware security module operability
abstract: A technique provides hardware security module (HSM) operability which is performed in a computing device. The technique involves running, by processing circuitry of the computing device, a virtual machine monitor to provide a virtual machine environment. The technique further involves running, by the processing circuitry, a security module VM within the virtual machine environment. The security module VM is configured to perform HSM operations on behalf of a set of other VMs. The technique further involves imposing, by the processing circuitry, a requirement that all access between the security module VM and the set of other VMs occur through the virtual machine monitor to isolate and protect the security module VM against tampering.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08694781&OS=08694781&RS=08694781
owner: EMC Corporation
number: 08694781
owner_city: Hopkinton
owner_country: US
publication_date: 20120330
---
A conventional hardware security module HSM is a hardware device e.g. a stand alone appliance a PCI card a USB module etc. which electronically connects to a computer system to provide data encryption decryption services without revealing its encryption decryption keys. The software running on the computer system typically obtains these encryption decryption capabilities through an API or network services.

FIPS 140 2 is a standard which defines various security levels i.e. requirements for HSMs. For example an HSM which is provisioned for FIPS 140 2 Security Level 2 may include a tamper evident coating or seal so that the coating or seal must be broken in order to obtain physical access to the keys parameters within the HSM. As another example an HSM which is provisioned for FIPS 140 2 Security Level 3 may include circuitry that zeroizes the keys parameters within the HSM if the HSM is physically opened.

Unfortunately there are deficiencies to the above described conventional HSM. For example suppose that an HSM is physically plugged into a computer system and that a virtual machine runs within a virtual environment of the computer system. Further suppose that the virtual machine or an application running within the virtual machine relies on access to the HSM for encryption decryption services. Since the HSM is physically tied to the computer system the virtual machine or the application is unable to move freely across computer systems e.g. to another computer system for load balancing or fault tolerance without losing access to the HSM.

As another example suppose that each virtual machine within a virtual environment of a computer system requires access to its own HSM. In this situation the number of virtual machines running on the computer system may be limited by the physical limitations of computer system e.g. the number of HSMs that are able to physically connect to the computer system . Accordingly the physical limitations constrain the ability of HSMs to support rapid allocation and or de allocation of resources within a virtual infrastructure.

In contrast to the above described conventional HSMs and their associated limitations e.g. inability to move freely in a virtual infrastructure an improved technique involves providing hardware security module HSM operability using a security module virtual machine VM which is constructed and arranged to perform HSM operations on behalf of a set of other VMs i.e. one or more other VMs . With instantiation of such a security module VM and perhaps the ability to move the security module VM freely across a virtual infrastructure such a security module VM supports rapid allocation and or de allocation of resources. Additionally enhanced provisioning of the virtual environment such as augmenting a virtual machine monitor VMM or hypervisor to isolate the security module VM and monitor for unpermitted direct access attempts can protect the security module VM in a manner consistent with various FIPS 140 2 levels e.g. tamper identification self destruction in response to tampering etc. . Furthermore other mechanisms can be put in place to protect against rogue VMs malware infected VMs unauthorized copying and unintended data leakage and so on.

One embodiment is directed to a method of providing hardware security module HSM operability which is performed in a computing device. The method includes running by processing circuitry of the computing device a virtual machine monitor to provide a virtual machine environment. The method further includes running by the processing circuitry a security module VM within the virtual machine environment. The security module VM is configured to perform HSM operations on behalf of a set of other VMs. The method further includes imposing by the processing circuitry a requirement that all access between the security module VM and the set of other VMs occur through the virtual machine monitor to isolate and protect the security module VM against tampering.

In some arrangements the security module VM is configured to maintain a set of cryptographic keys in the sense of a non virtual HSM i.e. an actual hardware device configured to perform HSM operations . In these arrangements running the security module virtual machine within the virtual machine environment includes inputting first data in unencrypted form from the set of other virtual machines into the security module virtual machine and outputting the first data in encrypted form from the security module virtual machine to the set of other virtual machines the outputted first data being encrypted by the security module virtual machine using the set of cryptographic keys. The method further includes inputting second data in encrypted form into the security module virtual machine from the set of other virtual machines and outputting the second data in unencrypted form from the security module virtual machine to the set of other virtual machines the outputted second data being decrypted by the security module virtual machine using the set of cryptographic keys.

In some arrangements the method further includes running a data loss prevention DLP application within the security module VM to prevent exposure of the set of cryptographic keys to the set of other VMs. In these arrangements the DLP application can be configured to scan or filter for data resembling cryptographic keys and thus prohibit release of that data to prevent unauthorized key exposure.

In some arrangements the method further includes running a monitoring VM which monitors computational and input output IO activity of the virtual machine monitor to guard against the virtual machine monitor exposing the set of cryptographic keys from the security module VM. In these arrangements the presence of the monitoring VM provides the ability to check whether the virtual machine monitor is operating properly or identify whether the virtual machine monitor has been compromised. For example the monitoring VM can attempt to perform a privileged instruction or directly access memory that belongs to another VM. In these situations the operations of the monitoring VM should be rejected by the virtual machine monitor and the virtual machine monitor should provide an alert message.

In some arrangements the method further includes imposing a requirement that M of N human administrators provide approval to unlock access to a security module template prior to instantiating the security module VM from the unlocked security module template to control access to the security module template. In these arrangements N is the total number of human administrators having administrative access to the virtual machine environment and M is greater than 1. Accordingly multiple human administrators are necessary to unlock access to the security module template.

In some arrangements imposing the requirement that all access between the security module VM and the set of other VMs occur through the virtual machine monitor includes outputting by the virtual machine monitor a tamper alert signal in response to detection of an attempt by the set of other VMs to directly access the security module VM rather than access the security module VM through the virtual machine monitor. In these arrangements the tamper alert signal is capable of providing tamper evidence along the lines of FIPS 140 2 Security Level 2.

In some arrangements imposing the requirement that all access between the security module VM and the set of other VMs occur through the virtual machine monitor further includes destroying the security module VM and the security module template in response to the tamper alert signal. In these arrangements such destruction of the security module VM and the security module template is capable of providing tamper resistance along the lines of FIPS 140 2 Security Level 3.

Other embodiments are directed to systems apparatus processing circuits computer program products and so on. Some embodiments are directed to various methods electronic components and circuitry which are involved in providing hardware security module HSM operability in a computing device.

Improved techniques involve providing hardware security module HSM operability using security module virtual machines VMs which are constructed and arranged to perform HSM operations on behalf of other VMs. With instantiation of such a security module VM and perhaps the ability to move the security module VM freely across a virtual infrastructure such a security module VM supports rapid allocation and or de allocation of resources. Additionally enhanced provisioning of the virtual environment such as augmenting a virtual machine monitor VMM or hypervisor to isolate a security module VM and monitor for unpermitted direct access attempts can protect the security module VM in a manner consistent with various FIPS 140 2 levels e.g. tamper identification self destruction in response to tampering etc. . Furthermore other mechanisms can be put in place to protect against rogue VMs malware infected VMs unauthorized copying and unintended data leakage and so on.

Each computer system includes specially configured underlying system hardware which forms a VMM and a set of VMs . In particular the computer system A includes system hardware A which forms a VMM A and a set of VMs A . For illustration purposes the VM A is a control VM the VM A is a security module VM and the VM A is simply another VM e.g. a VM running a set of applications to perform useful work . Similarly the computer system B includes system hardware B which forms a VMM B and a set of VMs B .

The communications medium connects the various components of the electronic environment together to enable these components to exchange electronic signals e.g. see the double arrow . At least a portion of the communications medium is illustrated as a cloud to indicate that the communications medium is capable of having a variety of different topologies including backbone hub and spoke loop irregular combinations thereof and so on. Along these lines the communications medium may include copper based devices and cabling fiber optic devices and cabling wireless devices combinations thereof etc.

During operation each computer system runs at least one local security module VM to perform HSM operations on behalf of one or more other VMs . For example suppose that the virtual machine A requires encryption decryption services that would be typically provided by an actual physical HSM device. Rather than configure the virtual machine A to rely on such a physical HSM device and be tied to the physical properties associated with that physical HSM device the virtual machine A is able to obtain HSM services from the security module VM A . In this manner the virtual machine A and perhaps other VMs running on the computer system A are able to enjoy rapid deployment of the security module VM A e.g. dynamic instantiation of the security module VM A at the same time the other VM A is instantiated. Similarly the resources of the security module VM A can be de allocated at the same time the resources of the virtual machine A are de allocated. Accordingly such resource utilization is free of certain physical limitations of the computer system A such as the number of physical HSM devices that can physically connect to the computer system A at any one time.

Moreover and as will be explained in further detail shortly the VM A is capable of moving within a cohesive virtual infrastructure formed by multiple computer systems . For example the VM A is capable of migrating from the computer system A to the computer system B for fault tolerance or load balancing purposes see arrow in . Similarly workloads e.g. sets of applications running in the VM A sets of VMs etc. can migrate from the computer system A to the computer system B i.e. live migration of workloads . During such migration the migrating VMs are able to maintain access to security module VM s in order to keep full operability. Along these lines the security module VM is able to migrate concurrently and or transfer support to another security module VM on another computer system . Migration in the opposite direction i.e. from the computer system B to the computer system A is available as well.

It should be understood that before the security module VMs are instantiated and throughout the operation of the security module VMs after instantiation the virtual infrastructure operates to maintain isolation of the security module VMs and their initial images and thus protect the contents of the security module VMs e.g. to prevent exposure of plaintext cryptographic keys critical security parameters CSPs other secrets etc. Along these lines the VMMs impose a requirement that all communications with the security module VMs pass through the VMMs e.g. as API calls to the VMMs . Additionally the VMMs monitor for unauthorized code execution and IOs that attempt to cross VM boundaries e.g. an attempt to read the memory of another VM . Additional restrictions include authentication of applications and VMs that move across computer systems e.g. certificate exchanging and verification special monitoring VMs the imposition of M of N access administration policies and the imposition of FIPS 140 2 Security Levels. Further details will now be provided with reference to .

The computer system includes a network interface memory and a controller . The computer system may include additional hardware such as a user interface e.g. a keyboard a pointer a display etc. peripherals and so on.

The network interface is constructed and arranged to connect the computer system to the communications medium also see and thus enables the computer system to communicate with other devices such as other computer systems forming a cohesive virtual environment and external devices . In some arrangements the network interface is implemented in the form of a network card or a network adapter module. In some arrangements the network interface includes a wireless transceiver for wireless communications.

The memory includes volatile storage e.g. fast semiconductor memory cache memory etc. and non volatile storage e.g. magnetic disk drive memory flash memory storage arrays etc. . The memory stores among other things VMM code e.g. hypervisor code a kernel or OS drivers etc. VM templates e.g. golden images such as .VHD and VFD files etc. and a security module template . As will be explained in further detail shortly the security module template includes cryptographic keys critical security parameters other secrets etc. and access to the security module template is securely protected e.g. requires M of N administrative permissions to access .

The controller of the computer system executes the various memory constructs stored in the memory to form a VMM and a set of VMs also see . It should be understood that the controller can be implemented in a variety of ways including via one or more processors running specialized software application specific ICs ASICs field programmable gate arrays FPGAs and associated programs discrete components analog circuits other hardware circuitry combinations thereof and so on. In the context of one or more processors running specialized software a computer program product is capable of delivering all or portions of the software to the computer system . The computer program product has a non transitory or non volatile computer readable medium which stores a set of instructions which controls one or more operations of the computer system . Examples of suitable computer readable storage media include tangible articles of manufacture and apparatus which store instructions in a non volatile manner such as CD ROM flash memory disk memory tape memory and the like.

During operation the controller forms the VMM when executing the VMM code . In some arrangements the computer system has an OS hosted configuration in which the VMM or hypervisor runs over an existing general purpose operating system. In other arrangements the computer system has a non OS hosted configuration in which a kernel customized to support virtual machines takes the place of a general purpose operating system.

Additionally the controller further forms the security module VM using the security module template . In particular the security module template is the VM image on which the security module VM is based e.g. a .VHD or VFD file .

Furthermore the controller forms other VMs based on the other VM templates . These other VMs may during their operation obtain HSM services from the security module VM via API calls or network services through the VMM . Moreover various security mechanisms are in place to prevent exposure of secrets e.g. keys CSPs other secrets etc. within the security module VM in a manner analogous to that of a conventional hardware security module. Further details will now be provided with reference to .

During operation suppose that the VMM and the control VM are initially running on the computer system . Further suppose that the need arises to instantiate another VM which is equipped with access to HSM services. Perhaps the other VM must run an application which requires encryption or decryption of a file or other data . To fulfill this need the control VM instantiates the security module VM and the other VM i.e. rapid allocation of resources.

Once the security module VM and the other VM are in operation the other VM is capable of running the application . Additionally the security module VM stands ready to provide encryption decryption services to the other VM as if the VM had access to an actual non virtual HSM device. Along these lines the security module VM is configured to utilize cryptographic keys critical security parameters other secrets etc. also see in a manner similar to that of an actual non virtual HSM device.

To encrypt or decrypt a file or other data the VM makes an API call or network service call to the VMM . In contrast in a conventional situation such a call would be to an interface of an actual non virtual HSM device or to an operation system . However since the VM makes a call to the VMM the VMM is able to control communication to the security module VM thus maintaining isolation of the security module VM as if the security module VM where are an actual tamper guarded hardware device.

The call from the VM is illustrated in by the arrow . Here the call may involve an encryption or decryption command and a file or other data .

The security module VM responds to the call by performing an HSM operation based on the encryption or decryption command. In particular the security module VM cryptographically processes the file or other data using the cryptographic keys critical security parameters other secrets and so on.

Ultimately the security module VM provides as an output a response to the call. As shown in the communication again passes through the VMM . That is the security module VM returns the response to the VMM . The VMM then provides the response to the VM .

It should be understood that the security module VM and the other VM are able to enjoy the flexibility provided by the virtual infrastructure . For example additional resources e.g. memory processing cycles etc. can be easily allocated to these VMs and or de allocate from these VMs dynamically. Additionally one or both of the VMs may be moved from one computer system to another e.g. for fault tolerance for load balancing etc. . Along these lines the virtual infrastructure may extend across multiple computer systems which are distributed over great distances also see .

In all situations it should be understood that the above described operation of the VMM enables the VMM to maintain robust and reliable isolation of the security module VM for security. In particular at no time did the VM have direct access to the security module VM . Moreover as will now be explained in further details and with reference to the VMM and other mechanisms e.g. a security feature in the control VM also can monitor code execution and IOs to prevent unauthorized access attempts.

As shown in the system hardware of the computer system includes among other things processing circuitry a user interface a network interface and memory also see . Nevertheless the computer system is resistant to a variety of attacks or threats including side channel attacks hacking due to malware or malicious code infiltration of a malicious machine or workload administrative attacks and inadvertent exposure of secrets .

In connection with side channel attacks there is a risk that a running VM may attempt to cross virtual boundaries and read or change data of another virtual component. To prevent such an attack and to maintain isolation of the security module VM all communications with the security module VM must pass through the VMM . That is the VMM is the only virtual component that is able to access the security module VM . Such isolation and protection is achieved by restricting what code can run and what IOs can be performed by each VM . In particular the security module VM can only be reached through a VMM API or hypervisor procedure calls or a network service call through the VMM .

In connection with malware or malicious code it is possible that a VM or the VMM could become infected with malware. The above described restrictions against side channel attacks provide protection against such malware crossing virtual boundaries. However in addition both the VMM as well as the control VM monitor code execution activity and IOs within the computer system also see security mechanism in . In these arrangements both the VMM and the control VM are provisioned to require application authentication. Any application that is unable to provide credentials to properly authenticate on the computer system is denied the ability to execute on the processing circuitry of the computer system .

Furthermore both the VMM and the control VM are provisioned with an alert mechanism to output a tamper alert signal if code execution or an IO occurs which crosses a virtual component boundary. Accordingly if either a VM or the VMM becomes infected or somehow turns malicious the alert mechanism enables the computer system to react and take remedial measures. One remedial measure is for the tamper alert signal to provide evidence of tampering e.g. FIPS 140 2 Security Level 2 and to initiate some form of enforced lock down or restriction on data movement. Another remedial measure is for the tamper alert signal to automatically destroy the security module VM and or the security module template e.g. FIPS 140 2 Security Level 3.

In connection with possible infiltration of a malicious machine or workload there is a risk that a malicious external device see the external device in may attempt to place a rogue VM or similar type of workload into the virtual environment . For example the malicious external device may attempt to load a fake security module VM onto the computer system . To protect against such attempts the VMM imposes certificate exchanging and verification of digital signatures using public private key techniques. In particular migration of a workload must be from an authenticated computer system e.g. see or workload migration is denied.

In connection with administrative attacks the computer system is provisioned with a user interface which requires M of N administrator access to authorize access to the security module template . That is without collaboration of at least M administrators users are unable to obtain access to the security module template . Such a security mechanism protects the security module template from being read and or tampered with e.g. protects against involvement of fewer than M administrator changing a property parameter etc. . In some arrangements M is at least 2 or 3 and N is 3 or greater.

In connection with inadvertent exposure of secrets the security module VM is provisioned with data loss prevention DLP tools to prevent inadvertent exposure of the cryptographic keys critical security parameters other secrets etc. In some arrangements not only is such information prevented from escaping the security module VM the DLP tools are also constructed and arranged to output a tamper alert signal.

In step the computer system runs a security module VM within the virtual machine environment. The security module VM is configured to perform HSM operations on behalf of a set of other VMs. Such HSM operations include encrypting data files etc. and decrypting data files etc. while preventing exposure of the encryption decryption keys and associated secrets.

In step the computer system imposes a requirement that all access between the security module VM and the set of other VMs occur through the VMM to isolate and protect the security module VM against tampering. As mentioned earlier such a requirement may be carried out at least in part by the VMM e.g. restricting communications to the security module VM through the VMM monitoring code execution and IOs imposing M of N administrative access policies requiring authentication of workloads and migrating VMs etc. . Additionally such a requirement may be further fulfilled at least in part by the security module VM e.g. performing DLP etc. . Also such a requirement may be further fulfilled at least in part by other VMs such as dedicated monitoring VM or a control VM e.g. monitoring operation of the VMM etc. .

As mentioned above an improved technique involves providing hardware security module HSM operability using a security module VM which is constructed and arranged to perform HSM operations on behalf of a set of other VMs . With instantiation of such a security module VM and perhaps the ability to move the security module VM freely across a virtual infrastructure such a security module VM supports rapid allocation and or de allocation of resources. Additionally enhanced provisioning of the virtual environment such as augmenting a VMM or hypervisor to isolate the security module VM and monitor for unpermitted direct access attempts can protect the security module VM in a manner consistent with various FIPS 140 2 levels e.g. tamper identification self destruction in response to tampering etc. . Furthermore other mechanisms can be put in place to protect against rogue VMs malware infected VMs unauthorized copying and unintended data leakage and so on.

While various embodiments of the invention have been particularly shown and described it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined by the appended claims.

For example a security module VM was described above as providing HSM services locally on a computer system . In some arrangements a security module VM is capable of providing HSM services remotely across computer systems . Furthermore the flexibility of the virtual infrastructure enables the security module VM to move freely across platforms but the various enhancements and augmentations to the virtual infrastructure preserve the fundamental isolation of the cryptographic material and the associated HSM operations.

Additionally it should be understood that various embodiments were described and illustrated herein primarily as including one or more VMMs that appear as separate entities from other components of the virtualization software. This paradigm for illustrating VMMs is only for the sake of simplicity and clarity and by way of illustration. Differing functional boundaries may be appropriate for differing implementations. In general functionality and software components structures described herein can be implemented in any of a variety of appropriate places within the overall structure of the virtualization software or overall software environment that includes the virtualization software .

With respect to the VMM in view of the above and without limitation an interface usually exists between a VM and an underlying platform which is responsible for executing VM issued instructions and transferring data to and from memory and storage devices or underlying hardware. A VMM may be implemented as a thin piece of software that runs directly on top of a host or directly on the hardware and virtualizes at least some of the resources of the physical host machine. The interface exported to the VM is then the same as the hardware interface of a physical machine. In some cases the interface largely corresponds to the architecture resources and device complements of the underlying physical hardware however in other cases it need not.

Although a VM and thus applications e.g. see executing in the VM and their users cannot usually detect the presence of the VMM the VMM and the VM may be viewed as together forming a single virtual computer. Accordingly the boundary between VM and VMM may be somewhat arbitrary although the boundary does exist . For example while various virtualized hardware components such as virtual CPU s virtual memory virtual disks and virtual device s including virtual timers are presented as part of a VM for the sake of conceptual simplicity in some virtualization system implementations these components are at least partially implemented as constructs or emulations exposed to the VM by the VMM . One advantage of such an arrangement is that the VMM may be set up to expose generic devices which facilitate VM migration and hardware platform independence. In general such functionality may be said to exist in the VM or the VMM .

It is noted that while VMMs have been illustrated as executing on underlying system hardware many implementations based on the basic abstraction may be implemented. In particular some implementations of VMMs and associated virtual machines execute in coordination with a kernel that itself executes on underlying system hardware while other implementations are hosted by an operating system executing on the underlying system hardware and VMMs and associated virtual machines executed in coordination with the host operating system.

