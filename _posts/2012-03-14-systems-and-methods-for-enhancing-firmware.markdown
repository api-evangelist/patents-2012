---

title: Systems and methods for enhancing firmware
abstract: A measuring instrument includes at least one processor having at least one processor internal resource. The measuring instrument may also include at least one hardware component external to the processor and at least one storage component. Firmware may be stored in the storage component and is accessible by the processor. The firmware includes at least one application; a virtualized hardware system having routines that emulate at least one processor internal resource; and at least one application programming interface between the application and the virtualized hardware system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348618&OS=09348618&RS=09348618
owner: Aclara Meters LLC
number: 09348618
owner_city: Hazelwood
owner_country: US
publication_date: 20120314
---
The subject matter disclosed herein relates to measuring instruments and more particularly to an electricity meter with enhanced firmware portability.

In general instruments include devices that measure physical quantities of objects and events. An example of a measuring instrument is an electricity meter. Electricity meters measure the amount of electric energy consumed by a residence business or an electrically powered device.

Electronic electricity meters include a microcontroller or processor that controls a number of subsystems including metrology subsystems communication subsystem s and data stores. The processor is typically programmed with firmware that controls the interaction of the processor with the different subsystems. The firmware includes programs drivers that allow the operating system and application software to interact with hardware components. Typically drivers are written to include higher level logic elements and hardware specific elements within the same code.

As new meters are developed over time they may have unique microprocessor or microcontroller hardware features. This may include specific components external to the processor. Because hardware drivers are typically hard coded into the firmware applications the firmware has to be re programmed applications have to be rewritten to incorporate new device drivers. Re programming of the firmware is costly.

In accordance with one exemplary non limiting embodiment the invention relates to a measuring instrument including at least one processor having at least one processor internal resource. The measuring instrument may also include at least one hardware component external to the processor and at least one storage component. Firmware may be stored in the storage component and is accessible by the processor. The firmware includes at least one application a virtualized hardware system having routines that emulate at least one processor internal resource and at least one application programming interface between the application and the virtualized hardware system.

In another embodiment a method for controlling a measuring instrument having a processor firmware and at least one hardware component external to the processor is provided. The method includes storing at least one application in the firmware and providing a virtualized hardware system having routines that emulate at least one processor internal resource. The method may also include providing at least one application programming interface between the application and the virtualized hardware system and providing instructions that map the application programming interface to the processor internal resource. The method may also include communicating between the application and the processor internal resource through the application programming interface.

In another embodiment a meter including a metrology subsystem a communications subsystem and a microcontroller is provided. The microcontroller is provided with an architecture having an application layer a device driver layer an interface driver layer and a hardware layer.

In another embodiment a method for communicating data in a meter between an application a processor and a hardware device coupled to the processor is provided. The method includes the steps of sending data from the application to at least one abstracted device driver and sending data from the abstracted device driver to an abstracted interface driver.

Other features and advantages of the present invention will be apparent from the following more detailed description of the preferred embodiment taken in conjunction with the accompanying drawings which illustrate by way of example the principles of the invention.

The meter may also include a microcontroller . The microcontroller may be a small computer or a single integrated circuit containing a processor core memory and programmable input output peripherals. In some embodiments a microprocessor may be substituted for the microcontroller . The microcontroller may access one or more storage devices such as a flash memory a dynamic random access memory SDRAM and an Electrically Erasable Programmable Read Only Memory EEPROM . The microcontroller may also access one or more input output or communications components such as for example an optical interface . Associated with the optical interface is an optic driver . Optical interfaces to electricity meters are usually designed to IEC1107 or ANSI C12.18 standards. These standards specify data rates character format transmission protocol as well as the optical and mechanical parameters of the optical interface. Another communication component that may be coupled to the microcontroller is a wireless communication component such as those that implement the ZigBee standard Wi Fi HomePlug Green PHY and the like. In one embodiment a ZigBee transceiver may be provided. The wireless communication component may communicate with a home area network HAN that connect to digital devices of a user. Wireless communication components may include a system on a chip that implements the appropriate standard. Yet another communication component that may be coupled to the microcontroller may be an Advanced Metering Infrastructure AMI system . AMI Systems may incorporate a Power Line Communication PLC subsystem for carrying data through the power line. The AMI system may also be implemented with network devices that connect to a network such as a mesh network a WiMax network or a GSM network. The PLC subsystem may be coupled to the meter through a PL port . The AMI system may be coupled to the meter through an AMI port . Other communication components such as hardwired components e.g. RS485 or Ethernet links may be used to communicate externally.

Another way that PLC communications may be implemented is through a powerline communication subsystem that may have a PLC integrated circuit coupled to a synchronous SDRAM . SDRAM has a synchronous interface that waits for a clock signal before responding to control inputs. An analog to digital converter such as for example an analog front end AFE may be coupled to the PLC integrated circuit . A band pass filter BPF and a transformer may also be included in the power line communication subsystem . The meter may also be provided with a ripple control subsystem . A ripple is a small unwanted residual periodic variation of direct current output of the power supply which is been derived from an alternating current source such as power source . The ripple control subsystem may include a transformer a ripple detector and low pass filter LPF that filters out frequencies higher than a cutoff frequency and a processor . The meter may be provided with an isolation circuit that may be used to isolate the meter from the load. The isolation circuit may include a relay driver and a relay

Illustrated in is a high level functional representation of a meter including the firmware with hardware abstraction system . Firmware is a term often used to denote fixed programs and or data structures that internally control various processor resources and hardware components. A resource or system resource is any physical or virtual component of limited availability within a computer system. Every device connected to a computer system is a resource. Every internal system component is a resource. Virtual system resources include files network connections and memory areas. Hardware abstractions such as those implemented by the hardware abstraction system are software routines that emulate some platform specific details giving programs direct access to the hardware resources. A hardware abstraction layer HAL is an abstraction between the physical hardware of a microcontroller and the software that runs on the microcontroller . The function and technical effect of a HAL is to hide differences in hardware from most of the application and operating system firmware on the microcontroller so that most of the firmware does not need to be changed to run on systems with different hardware. A HAL is implemented with software. The meter includes a microcontroller coupled to a communication subsystem the metrology subsystem and a storage subsystem . The microcontroller accesses hardware abstraction system and one or more applications in the firmware . The hardware abstraction system includes a virtualized hardware system component an application programming interface API and a software component such as mapping software component . The virtualized hardware system component includes one or more software routines that emulate at least one processor resource or hardware component interface. The API is an interface used by software components to communicate with each other. The API enables communication between the applications and the virtualized hardware system component .

The connectivity subsystem may include a UART USART interface . A UART Universal Asynchronous Receiver Transmitter is usually an individual integrated circuit or a component of an integrated circuit used for serial communications over a computer or peripheral device serial port. Many modern integrated circuits may include a USART universal synchronous asynchronous receiver transmitter that can also communicate synchronously. The connectivity subsystem may also include a Serial Peripheral Interface SPI interface . The SPI interface is a synchronous serial interface for connecting external devices having low medium bandwidth. SPI devices communicate using a master slave relationship over two data lines and two control lines. The connectivity subsystem may also include may include an I2C interface . An I2C is a multi master serial single ended bus used to attach low speed peripherals to a motherboard or embedded system

The system controller may include an interrupt controller . An interrupt is an asynchronous signal indicating the need for attention or a synchronous event in software indicating the need for a change in execution. An interrupt controller is used to combine several sources of interrupt on one or more CPU lines and or processor internal resources e.g. a DMA controller completion interrupt while allowing priority levels to be assigned to its interrupt outputs. The system controller may also include a processor clock manager for manipulating clock signals. The system controller may also include a processor reset resource . Processor reset resource resets the processor making it start execution from a reset vector address. The system controller may also include a determine cause of processor reset resource a resource that determines the cause of a reset which can then be used to condition the startup processing of the firmware based on the cause. The system controller may also include a direct memory access DMA interface . A DMA allows some hardware subsystems to access system memory independently of the processor .

The memory subsystem interface may include an EEPROM a non volatile memory to store small amounts of data that must be saved when power is removed. The memory subsystem interface may also include a flash memory interface . Flash memory is a non volatile computer storage chip that can be electrically erased and reprogrammed.

The control subsystem may include an analog to digital conversion ADC interface and a digital to analog conversion DCA interface . An ADC converts a continuous quantity to a discrete time digital representation. A DAC does the inverse of the ADC converting a multi level discrete time digital representation into a continuous signal. The control subsystem may also include a PWM interface . Pulse width modulation PWM is a technique for controlling power to inertial electrical devices. The control subsystem may also include timer resources and a General Purpose Input Output GPIO interface . A GPIO is a generic pin on a chip whose function is controlled through software to input or output a discrete binary signal to the system.

Illustrated in is the hardware abstraction system architecture of a virtualized hardware system. The virtualized hardware system may include one or more routines that emulate at least one function of an external hardware component. In one embodiment the hardware abstraction system architecture includes an application layer a device driver layer an interface driver layer a DMA driver layer and a hardware layer . One or more applications may reside in the application layer . The device driver layer provides those services that are generic to the particular architecture of the devices accessed by the application e.g. common hardware driver elements . For example the device driver layer may determine which type of transfer is appropriate program I O or DMA . Device driver layer may include a one or more device driver abstractions such as for example serial flash driver abstraction a ZigBee driver abstraction and an EEPROM driver abstraction . As used here a device driver abstraction means a computer program allowing another computer program to interact with drivers that are generic to the relevant class of hardware devices common hardware driver elements . For example a device driver abstraction may provide services to a device that are necessary irrespective of the hardware specific driver elements.

The interface driver layer arbitrates multiple devices on a single bus and performs data transfers using its own routines for program input and output. The interface driver layer may utilize a HAL DMA HAL D function of the processor to accomplish the movement of data between the interface driver layer and the hardware itself. The interface driver layer also sets the baud rate. The interface driver layer may include an SPI driver abstraction a UART driver abstraction and an I2C driver abstraction . The DMA driver layer manages a fixed number of DMA channels for moving data from memory to peripherals peripherals to memory or memory to memory. The DMA driver layer does not allocate memory. DMA driver layer may include one or more abstracted DMA drivers . The DMA driver layer communicates with one or more hardware component and the interface layer that may reside in the hardware layer .

In one embodiment the hardware abstraction system provides a method for communication data between an application and a hardware component . A calling program in the application invokes a routine in an abstracted driver in the device driver layer for example serial flash driver abstraction ZigBee driver abstraction or EEPROM driver abstraction . The abstracted driver issues commands to an abstracted driver on the interface driver layer such as SPI driver abstraction UART driver abstraction or I2C driver abstraction . The abstracted driver on the interface driver layer then issues the command to an abstracted DMA driver on DMA driver layer . Commands are then transmitted to the hardware component via the DMA driver layer . Hardware component sends data back via the abstracted DMA driver . The abstracted DMA driver communicates data to an abstracted driver in the interface driver layer which in turns communicates data to an abstracted driver in the device driver layer . The abstracted driver in the device driver layer may invoke routines in the original calling program of the application .

This written description uses examples to disclose the invention including the best mode and also to enable any person skilled in the art to practice the invention including making and using any devices or systems and performing any incorporated methods. The patentable scope of the invention is defined by the claims and may include other examples that occur to those skilled in the art. Such other examples are intended to be within the scope of the claims if they have structural elements that do not differ from the literal language of the claims or if they include equivalent structural elements with insubstantial differences from the literal languages of the claims.

