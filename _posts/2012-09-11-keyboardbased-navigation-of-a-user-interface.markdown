---

title: Keyboard-based navigation of a user interface
abstract: Various embodiments of systems and methods for keyboard-based navigation of a user interface are described herein. An area around a first object displayed on a user interface is divided into quadrants and one or more segments for at least one of the quadrants. The user interface includes a plurality of objects and the quadrants represent directions with respect to the first object. In response to a key stroke indicating a first direction, a first one of the quadrants corresponding to the first direction is identified. The segments of the first quadrant are scanned to identify a second object that is closest to the first object in the first quadrant. The second object is then selected.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09383922&OS=09383922&RS=09383922
owner: SAP SE
number: 09383922
owner_city: Walldorf
owner_country: DE
publication_date: 20120911
---
The field relates generally to user interface navigation. More particularly the field relates to user interface navigation using a keyboard.

Mouse and keyboard are typical means for navigating a user interface UI . A user can navigate a UI and reach a desired UI object using a mouse or a keyboard. A mouse can be more versatile for navigating a user interface. A user can simply move the cursor to a desired UI object using the mouse and make a selection. Keys such as up arrow key down arrow key left arrow key and right arrow key are used for keyboard based navigation. A combination of these keys can be used to navigate a UI and reach a desired UI object. Spreadsheets tables and other grid type user interface environments can be conveniently navigated using a keyboard. However keyboard based navigation is not convenient and in some cases not possible for free or unstructured environments where UI objects are not in a grid like arrangement. A user has to resort to a mouse to navigate such unstructured environments.

Embodiments of techniques for keyboard based navigation of a user interface are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the invention.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present invention. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

Grid type user interfaces can be conveniently navigated using a keyboard. A grid type user interface UI includes UI elements arranged in rows and columns or along vertical and horizontal lines. For example referring to a spreadsheet is a grid type UI that includes a plurality of cells. The cells are arranged in rows and columns. Directional keys such as up arrow key down arrow key left arrow key and right arrow key are used to navigate the spreadsheet and select cells. If a user intends to select a cell that is above a currently selected cell the up arrow key is used. Therefore it is straightforward to determine which direction the user intends to navigate and accordingly represent the movement on the spreadsheet.

In unstructured environments UI objects are scattered in a UI area without any specific pattern. These UI objects are not arranged in a grid or in any other sequence. illustrates UI objects in an unstructured environment . Navigating such unstructured environments with a keyboard is not possible. Consider the UI objects A E and D in the unstructured environment . Object E and object D are on the right side of the object A . If a user selects the right arrow key then it is not possible to determine which object the user is intending to select since both object E and object D are on the right side of the object A . Similarly if a user selects the left arrow key then it is not possible to determine which object the user is intending to select since both object B and object H are on the left side of the object A .

There are several types of unstructured environments that include scattered UI objects. One such unstructured environment is a map displayed on a UI as shown in . A map includes UI objects such as pins which represent various locations. Navigating from one pin to another pin may not be possible using the keyboard since the pins are scattered. The pins are not in a grid type or any sequential arrangement. The keyboard based navigation method is explained in reference to the map environment. However it should be understood that the method can be applied to any unstructured environment for navigating between UI objects.

Although a pointing device such as a mouse can be more versatile in navigating a user interface there are several situations where a keyboard is preferable. For example some users while working with a keyboard may be more comfortable using the keyboard to navigate the UI instead of switching to a mouse. As another example physically challenged users may also find a keyboard more comfortable and practical since operation of a mouse requires relatively more precision. A keyboard can be any type of keyboard on a computing device or any input device that includes keys to move up down left and right in a user interface.

The central angle of each quadrant is 90 degrees. For example a right side quadrant is the area between lines L and L. The angle between the lines L and L is 90 degrees which is the central angle of the right side quadrant . Similarly a lower quadrant is the area between lines L and L a left side quadrant is the area between lines L and L and an upper quadrant is the area between lines L and L. The quadrants divide the area around the first object into four equal parts.

Each quadrant represents a direction corresponding to the first object . The right side quadrant corresponds to the right side direction of the first object the lower quadrant corresponds to a direction below the first object the left side quadrant corresponds to the left side direction of the first object and the upper quadrant corresponds to a direction above the first object . The right side quadrant is associated with the right arrow key the lower quadrant is associated with the down arrow key the left side quadrant is associated with the left arrow key and the upper quadrant is associated with the up arrow key . Therefore if a user selects a right arrow key the right side quadrant would be identified.

Each quadrant is divided into one or more segments. The segments are concentric. For example a first or center segment of the right side quadrant is the area encompassed by the lines L and L and the curve C. A second segment of the right side quadrant is the area encompassed by the lines L and L and the curves C and C. A third segment of the right side quadrant is the area encompassed by the lines L and L and the curves C and C. These segments of the right side quadrant are concentric in that the curves C C and C have the same center but different radii.

The curves C C and C are parts of circles with the same center . For example the curve C is a quarter circle extending from the line L to line L. Similarly the curve C is also a quarter circle extending from the line L to line L but has a larger radius than the curve C. If the first object represents a point then the center of the curves is the location of the first object. In another embodiment if the first object is not a point then this center can be the center of a boundary e.g. a rectangle that encompasses the first object.

In one embodiment the segments are divided such that the width of the segments is equal to the shortest of the distances between the objects. Distances between pairs of the objects can be determined and the shortest of such distances is used for the width of the segments. Consider that the distance between the object C and the object H is the least among distances between any other pair of the objects. This distance between the object C and the object H is then used as the width for the segments. Therefore the segments have equal width. The width of the first segment of the right side quadrant is the distance between the center e.g. first object and the curve C. The width of the second segment of the right side quadrant is the distance between the curve C and the curve C. The width of the third segment of the right side quadrant is the distance between the curve C and the curve C.

Referring to considering the example of a map the first object is a first pin indicating a location. The map also includes several other pins indicating other locations. The first pin pin C can be a pin that is currently selected. This selection can be a default selection when the map is first rendered based on a user request. The area around the first pin is divided into four quadrants by lines L L L and L and each quadrant is divided into segments as explained previously.

Referring back to in response to a keystroke indicating a first direction a first quadrant corresponding to the first direction is identified at . The keystroke includes up down left or right direction with respect to the first object. For example referring to when a user selects a right arrow key or any other key indicating a right side direction a right side quadrant is identified. The right side quadrant is the quadrant that corresponds to a right side direction with respect to the first pin . This right side quadrant is the area between the lines L and L.

Referring back to once the first quadrant is identified the segments in the first quadrant are scanned sequentially at . The segments are scanned to identify a second object that is closest to the first object in the first quadrant. For example referring to after the right side quadrant is identified the segments in the right side quadrant are scanned sequentially starting from the first or center segment to identify a second pin that is closest to the first pin . The first segment is scanned first to determine if a second pin lies in the right side quadrant . If the second pin represents a point then it is determined whether that point lies within the first segment . In another embodiment if the second pin or object does not represent a point then it is determined whether a boundary of the second object overlaps with the first segment .

In the example of the first segment does not include any pins. Therefore as shown in a second segment of the right side quadrant is then scanned to determine if there are any pins in the second segment . Since there are no pins in the second segment a third segment is then scanned as shown in . The second pin lies in the third segment and is therefore identified. This second pin is closest to the first pin in the right side quadrant . Referring back to once identified the second pin is selected at . This selection can be represented by changing a display attribute such as color size etc. of the second pin as shown in .

As another example if a user selects an up arrow key then an upper quadrant is identified as shown in . The upper quadrant is the area above the first object between lines L and L. The first segment of the upper quadrant is scanned to determine if there a second pin within the first segment . Since the first segment does not include any pin a second segment is then scanned as shown in . The second segment also does not include any pin. Therefore the third segment is then scanned as shown in . The second pin lies in the third segment and is identified. This second pin is closest to the first pin in the upper quadrant . Following which the second pin is selected and this selection is represented on the user interface as shown in .

There can be scenarios in which a segment includes multiple objects. In such scenarios the segment including multiple pins is divided into smaller segments. For example referring to the third segment of the left side quadrant includes two pins namely pin E and pin D . The third segment is concentrically divided into three segments as shown in . The third segment is the area defined between the curves C and C and the lines L and L. A first divided segment is the area defined between the curves C and C and the lines L and L. A second divided segment is the area defined between the curves C and C and the lines L and L. A third divided segment is the area defined between the curves C and C and the lines L and L. Curves C C C and C are concentric. These divided segments and are then scanned sequentially to identify the second pin that is closest to the first pin in the left side quadrant . The first divided segment does not include any pins. Therefore the second divided segment is then scanned. The second pin i.e. pin D is in the second divided segment . The second pin is therefore identified and selected as shown in .

Referring to in one embodiment even after dividing a segment a divided segment can included more than one object. For example the second divided segment of the left side quadrant includes pin K pin L and pin M . In such cases referring to a center line that divides the left side quadrant is used as a reference for selecting a second pin that is closest to the first pin F in the left side quadrant . A pin that is in the second divided segment and closest to the center line is identified as the second pin. Pin L is the closest to the center line and is therefore selected as the second pin. In one embodiment the second pin is the pin that has the least circle distance from the center line . In another embodiment the divided segment in which the pins lie is scanned from the center line as represented by the shaded region along the curvature of the divided segment until a pin is encountered. The first encountered pin is the second pin . The selection of the second pin is then presented on the user interface as shown in .

Some unstructured environments can include active text objects. An example of such environments is a feed update as shown in . The feed update includes active text objects and along with other text. The active text objects are not in a grid type arrangement and a user has to typically use a mouse to select an active text object. The active text objects can be links. The feed update can also one or more visual objects to perform actions such as to flag set as favorite like dislike etc. The keyboard based navigation method described above in reference to map environment can be similarly used to navigate between the active text objects . The area around a first active text object is divided into four equal quadrants with the first active text object as the center as shown in . The first active text object can be the active text object that occurs first in the feed update . The quadrants are defined by lines L L L and L that originate from the first active text object. The central angle of each quadrant is 90 degrees. The right side quadrant is the area between lines L and L the lower quadrant is the area between lines L and L the left side quadrant is the area between lines L and L and the upper quadrant is the area between lines L and L.

The right side quadrant corresponds to the right side direction of the first object the lower quadrant corresponds to a direction below the first object the left side quadrant corresponds to the left side direction of the first object and the upper quadrant corresponds to a direction above the first object . The right side quadrant is associated with a right arrow key the lower quadrant is associated with a down arrow key the left side quadrant is associated with a left arrow key and the upper quadrant is associated with an up arrow key.

Each quadrant is divided into one or more segments. The segments in each quadrant are parallel. For example referring to a first segment of the right side quadrant is the area defined by the lines L L S and S. A second segment of the right side quadrant is the area encompassed by the lines L L S and S. A third segment of the right side quadrant is the area encompassed by the lines L L S and S. A fourth segment of the right side quadrant is the area encompassed by the lines L L S and S. The lines S to S are parallel. In one embodiment the segments are divided such that the width of the segments is equal to the line height of the text objects in the feed update.

When a user selects a right arrow key the right side quadrant is identified. The first segment is scanned first to determine if a second active text object lies in the right side quadrant . Since the first segment does not include any active text objects the second segment is then scanned. Since there are no active text objects in the second segment the third segment is then scanned. The second active text object lies in the third segment and is therefore identified. The second active text object is then selected as shown in .

If a segment includes multiple active text objects then the segment is divided into smaller segments. For example referring to the third segment of the right side quadrant includes two active text objects. The third segment is divided into two segments. A first divided segment is the area defined between the lines S and SD and the lines L and L. A second divided segment is the area defined between the lines SD and S and the lines L and L. These divided segments and are scanned sequentially to identify an active text object that is closest to the first active text object in the right side quadrant . The first divided segment includes the second active text object which is therefore identified and selected.

Referring to in one embodiment even after dividing a segment a divided segment can included more than one active text object. For example a divided segment of the lower quadrant includes two active text objects and . In such cases referring to a center line that divides the left side quadrant is used as a reference for selecting a second active text object that is closest to the first active text object in the left side quadrant . An active text object that is in the divided segment and closest to the center line is identified as the second active text object. The active text object AT is the closest to the center line and is therefore selected as the second active text object. In one embodiment if there are multiple active text objects within same distance from the center line left most of the active text objects is identified as the second active text object. For example if the active text objects AT and AT are within the same distance from the center line then the active text object AT is selected because it is the left most.

Some embodiments of the invention may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments of the invention may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. Examples of computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment of the invention may be implemented using Java C or other object oriented programming language and development tools. Another embodiment of the invention may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments of the invention. One skilled in the relevant art will recognize however that the invention can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details to avoid obscuring aspects of the invention.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments of the present invention are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the present invention. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments of the invention including what is described in the Abstract is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made to the invention in light of the above detailed description. Rather the scope of the invention is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

