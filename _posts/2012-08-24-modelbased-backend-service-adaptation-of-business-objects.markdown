---

title: Model-based backend service adaptation of business objects
abstract: The disclosure generally describes computer-implemented methods, software, and systems for allowing model-based backend services adaptations of business objects. One computer-implemented method includes receiving, at a generic interface associated with at least one backend application, a request for data from a particular backend application, identifying a service for execution associated with the received request based at least in part on the received request, identifying a configuration entry associated with the identified service in a configuration table, where the configuration entry defines a set of access-related information associated with at least one business object associated with the backend application, and requesting data from a business logic layer of the backend application based, at least in part, on the access-related information associated with the at least one business object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08943086&OS=08943086&RS=08943086
owner: SAP SE
number: 08943086
owner_city: Walldorf
owner_country: DE
publication_date: 20120824
---
This application claims priority under 35 USC 119 e to U.S. Patent Application Ser. No. 61 666 512 filed on Jun. 29 2012 the entire contents of which are hereby incorporated by reference.

The present disclosure relates to computer implemented methods software and systems for allowing model based backend services adaptations of business objects.

Access to a business suite system is typically provided through a customer graphical user interface which interfaces with back end business objects and data through a business object layer. With the rise in use of mobile computing and other computing platforms such as smart phones and tablet computers among others the use of open data protocol OData is becoming more prevalent. Allowing devices to access the business suite system using OData has generated further development of backend solutions for providing flexible and adaptable entries into the business suite system while minimizing the development costs.

The disclosure generally describes computer implemented methods software and systems for allowing model based backend services adaptations of business objects. One computer implemented method includes receiving at a generic interface associated with at least one backend application a request for data from a particular backend application identifying a service for execution associated with the received request based at least in part on the received request identifying a configuration entry associated with the identified service in a configuration table where the configuration entry defines a set of access related information associated with at least one business object associated with the backend application and requesting data from a business logic layer of the backend application based at least in part on the access related information associated with the at least one business object.

While generally described as computer implemented software embodied on tangible media that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

The disclosure generally describes computer implemented methods software and systems for allowing model based backend services adaptations of business objects. For the purposes of this disclosure a business suite is a bundle of business applications that provide integration of information and processes collaboration tools industry specific functionality and scalability. The business suite provides the delivery of end to end business processes which span organizational boundaries such as business departments and locations integrates business partners such as customers suppliers and service providers and allows an organization to align business plans budgets and operational reports. With only a web browser business suite users can begin work once they have been authenticated offering a single point of access to information functionality and services. The business suite may present information from diverse sources in a unified and structured way and provide additional services such as dashboards an internal search engine e mail news navigation tools and various other features. The business suite is often used by enterprises to providing their employees customers and possibly additional users with a consistent look and feel and access control and procedures for multiple applications which otherwise would have been separate entities altogether.

Generally through a graphical user interface GUI a business suite user is provided with an efficient and user friendly presentation of data provided by or communicated within the system. The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

In general the business suite server is a server that stores one or more business suite applications where at least a portion of the business suite applications are executed via requests and responses sent to users or clients within and communicably coupled to the illustrated example distributed computing system . In some implementations the business suite server may store a plurality of various business suite applications . In other implementations the business suite server may be a dedicated server meant to store and execute only a single business suite application . In some implementations the business suite server may comprise a web server where the business suite applications represent one or more web based applications accessed and executed by the mobile device or client device via the network or directly at the business suite server to perform the programmed tasks or operations of the business suite application .

At a high level the business suite server comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the example distributed computing system . Specifically the business suite server illustrated in is responsible for receiving application requests for example business suite navigation requests from one or more client applications associated with the client device and or from one or more mobile applications associated with the mobile device of the example distributed computing system and responding to the received requests by processing said requests in the associated business suite application and sending the appropriate response from the business suite application back to the requesting client application or mobile application . In addition to requests from the respective devices requests associated with the business suite applications may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a single business suite server environment can be implemented using two or more servers as well as computers other than servers including a server pool. Indeed business suite server may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further illustrated business suite server may be adapted to execute any operating system including Linux UNIX Windows Mac OS Java Android iOS or any other suitable operating system. According to one implementation business suite server may also include or be communicably coupled with an e mail server a web server a caching server a streaming data server and or other suitable server.

The business suite server also includes an interface a processor and a memory . The interface is used by the business suite server for communicating with other systems in a distributed environment including within the environment connected to the network in some instances via the gateway server as described herein for example the client device and or the mobile device as well as other systems communicably coupled to the network not illustrated . As described the communication channel may travel via a path from the network to the gateway server which then continues at interface of the business suite server . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network and or the gateway server . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network the gateway server or interface s hardware is operable to communicate physical signals within and outside of the illustrated example distributed computing system . While the gateway server is illustrated as being within the path for all communications between the network and the business suite server some communications between the network and the business suite server may be completed without using the gateway server . For example one or more communications from client applications may pass directly from the network to the business suite server such as when the client application provides requests in a common format or protocol as those understood by the business suite server . In those instances the example client application may connect to processing layers within the business suite server without translation or conversion by the gateway server . The connection may be to the UI layer a platform adaptation layer or any other suitable layer.

As illustrated in the business suite server includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the environment . Each processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the business suite server . Specifically the processor executes the instructions and functionality required to receive and respond to requests from the client device the mobile device and or allowing model based backend services adaptations of business objects.

Regardless of the particular implementation software may include computer readable instructions firmware wired and or programmed hardware or any combination thereof on a tangible medium transitory or non transitory as appropriate operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Objective C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. While portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The business suite server also includes a memory or multiple memories . The memory may include any type of memory or database module and may take the form of volatile and or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the business suite server . Additionally the memory may include any other appropriate data such as VPN applications firmware logs and policies firewall policies a security or access log print or other reporting files as well as others. While memory is illustrated as an integral component of the business suite server in alternative implementations memory or a portion thereof can be external to the business suite server and or the example distributed computing system .

The business suite server further includes an application programming interface API . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. In some implementations the API can be used to interface between the business suite application and or one or more components of the business suite server or other components of the example distributed computing system both hardware and software. For example in one implementation the business suite application can utilize API to communicate with the client device and or the mobile device . Although the API is shown as a stand alone component within the business suite server there may be multiple other APIs in the example distributed computing system that are integrated into or accessible by individual components both hardware and software.

The service layer provides software services to the example distributed computing system . The functionality of the business suite system may be accessible for all service consumers via this service layer. Software services such as business suite navigation provide reusable defined business functionalities through a defined interface. The defined interface may be software written in extensible markup language XML or other suitable language. While illustrated as an integrated component of the business suite server in the example distributed computing system alternative implementations may illustrate the service layer as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the service layer may be implemented as child or sub modules of another software module or enterprise application not illustrated or of another hardware module not illustrated without departing from the scope of this disclosure. In some instances the service layer can be associated with a particular service registry illustrated in memory in which one or more service definitions can be available and used for execution of the services as requested by clients devices and applications within the system .

The memory i.e. a back end data system holds data for the business suite server . In some implementations the memory includes business object business object model and business object model data . Although illustrated as single instances there may be more than one instance of the business object business object model and business object data .

The business object can be considered a representation of an intelligible business non business entity such as an account an order employee an invoice a financial report etc. The business object may encompass both functions for example in the form of methods and data such as one or more properties. For example an account business object may have properties such as Name Priority Value etc. Business objects may reduce system complexity by reducing a system into smaller units. The implementation details of business objects are typically hidden from a non development user and may be accessed through the defined functions and encapsulated data. Business objects also form a point of entry of the functions and data of a system and enable the system to easily share communicate display or otherwise operate with other systems. A business object may also be considered the target of a request for data in a particular business suite for example through a web page and may contain a view to be displayed when the business object is accessed. In some implementations the business object can control the location of a selected view personalized views for a specific business suite user and dynamic views. While illustrated as integrated within memory of the business suite server in the example distributed computing system in alternative implementations the business object can be stored external to the business suite server .

The business object model is a structured way of representing relationships associations roles etc. of business objects applicable to an organization. For example the business object model may be represented through the use of an entity relationship diagram ERD or other suitable diagram or descriptive method. An example of a business object model for ProductSeller may include root business objects such as Account and Order each of which may contain their own methods properties and relationships to other dependent objects in the business object model . The root business objects may also have associations with other dependent business objects . Examples of a dependent object for the Account root business object may include AccountAddressUS. Example dependent objects for the Order root business object may include OrderPartner and OrderItemShipmentData. While illustrated as integrated within memory of the business suite server in the example distributed computing system in alternative implementations the business object model can be stored external to the business suite server .

The business object data is data associated with a specific instance of a business object . For example for the example AccountAddressUS dependent object above there may be properties Name Title Address1 Address2 City State and PostalCode. Business object data would be the data associated with each property for example Name XYZ Inc. Address1 12345 Any Street Address2 Suite ABC City Some City etc. In some implementations the business object model data may include among other things text images sounds videos and animations. While illustrated as integrated within memory of the business suite server in the example distributed computing system in alternative implementations the business object model data can be stored external to the business suite server .

The business object processing framework BOPF model is also stored in memory or an alternative suitable location and is associated with a business object processing framework included within the business logic layer . The BOPF model provides information that assists the business logic layer in accessing and understanding the organization and contents of the various business objects stored in memory . Additionally the business logic layer allows operations for accessing creating and interacting with business objects to be performed. The business logic layer may receive requests from various applications and users for information associated with those business objects . Using the BOPF model and the business object model the business logic layer can perform operations on the business objects and their respective business object data to provide responsive sets of information and visualizations associated with the same. The BOPF model and the business object model may be semantically similar but may have different presentations. In some instances the business object model may be provided as or described with global data types following a UN CEFACT CCTS standard. The BOPF model may in some instances use internal data types.

Access to the business suite server is provided through one or more client applications and or mobile applications for example a web browser or other suitable GUI application interfacing with a user interface UI presentation layer that further interfaces with an application programming interface API provided by the business logic layer . The business logic layer s APIs provide a consistent interface for a GUI application to access business objects and their respective data associated with the business suite application .

Returning to memory a GBI configuration table is further illustrated as included therein. The GBI configuration table assists the gateway BOPF integration GBI module in providing a way to access the business objects and their corresponding data without requiring frequent updates to the metadata and data models associated with the data adapter with a low implementation effort for different business objects and business object models . Specifically the GBI configuration table stores information defining different types of views and view instances into particular business objects and business object models . The information defined in the views for example define the combination or subcombination of structure from within a particular business object and or set of business objects an implementation of which may allow the business logic layer to understand the specific combinations of nodes subnodes and attributes of the business object s and accessing them via are of importance to a particular view. A view instance can identify the corresponding business object data associated with the view and can allow the business logic layer to access said data via its available operations. In some instances the information defined in the GBI configuration table may be predefined for use in floor plans and other user interface related operations providing users with a view into various business objects and their associated data. The GBI configuration table may be stored in any suitable format including a database table spreadsheet comma separated value CSV file or a text file among others.

The GBI module acts as a generic integration layer that bridges communications between the gateway of the gateway server and the business logic layer via the API layer . The GBI module interacts with the illustrated with the Platform Adaption Layer and Data Adapter of to create appropriate connections to the business objects and business object data associated with the particular service called via the gateway server by a particular client or device. For further description of the GBI module a description of the gateway server is provided.

Various computing platforms e.g. mobile computing platforms applications desktop systems portal systems etc. may access the business suite server through the gateway server . The gateway server provides a defined API and acts as an interface gateway between clients e.g. mobile device client device and the business suite server . In some implementations the gateway server can communicate with various systems using OData through hypertext transfer protocol HTTP or hypertext transfer protocol secure HTTPS requests. In some implementations the gateway server can use a remote function call RFC interface to communication with ABAP and or non ABAP programs. In some implementations the gateway server can be stand alone. In some implementations the gateway server can be incorporated into any component of the example distributed computing system . In some implementations the gateway server may be a hardware server a software server and or a virtual server. In some implementations the gateway server can be part of a web server a streaming server an RSS server or other suitable server.

Open Data Protocol OData is a web protocol for querying and updating data and allows for a user to request data from a data source over the Hypertext Transfer Protocol and receive results back from the data source in formats such as Atom Publishing Protocol Atom Javascript Object Notation JSON Extensible Markup Language XML etc. In some implementations the request may be divided into multiple segments. In some implementations the multiple request segments may made and or received concurrently and or in parallel. Mobile computing and other computing platforms such as smartphones and tablet computers can use OData and are an increasingly important method of access to business suite information. To provide access to the business suite server using OData compliant computing platforms a data adapter is used to at least provide object model mapping and runtime conversion of data associated with the mapped object model.

The gateway server may receive OData compliant requests from a system from within or outside environment where the gateway server converts the OData compliant request into a business suite compliant request and communicates the request to the business logic layer via the provided API . In some instances the gateway server may provide the received request directly to the corresponding system i.e. the business suite server with a built in or embedded data adapter . For example the data adapter in is illustrated as within the business suite system . The business logic layer receives data responsive to the OData request from the business suite s operations and transmits that data via the API to the data adapter . The data adapter converts the received data to OData compliant data which can be passed back to the gateway server . The gateway server then transmits the converted OData compliant data to the requesting client device or system. While illustrates the data adapter as integrated with or included in the business suite server in alternative implementations all or portions of the data adapter can be implemented in other components of the example distributed computing system . In some instances the data adapter can be a part of the gateway server while in others the data adapter may interface with the gateway server and or the business suite server as a stand alone component.

In general the data adapter can include a metadata provider class MPC and a data provider class DPC that are used to access the business object data stored within the associated system. The MPC is used to define the model and the metadata associated with the service being requested. The DPC implements the functionality for data retrieval the creation of new data and the update or deletion of existing data. Previously call to different business objects and or portions of different business objects require additional knowledge and programming for providing an MPC and DPC corresponding to the information required by users. In the present disclosure however a generic MPC and a generic DPC are provided which are adapted to particular service calls based on information retrieved from the GBI configuration table . The generic MPC uses the table s view information while the DPC uses the view instance information to call to the business logic layer and retrieve the correct business object information from the business suite server . By using this solution users can define the particular information to be associated with particular services thereby allowing a low cost effort model for providing access to a plurality of business objects. The generic data adapter can be used along with an updated GBI configuration table to access the correct information for each call. Additional MPCs and DPCs are not needed for each service. The GBI module described above can identify the service associated with a received request retrieve the appropriate view and or view instance information stored in the GBI configuration table associated with that service and use that information to adapt the business object related requests via the API to the business logic layer .

The business suite server also includes the OData channel where the OData channel allows for communication between the gateway server and the business suite server . In general the OData channel provides a component for providing and enabling OData services and operations to be performed. For example the OData channel may include a metadata component and a runtime component for processing information received from the gateway server .

The metadata component manages metadata for messages received from the gateway server where the metadata describes OData models that are exposed as OData service documents and OData metadata documents. The metadata may contain references to object models. The metadata infrastructure manages access to content based upon metadata and exposes the standardized description of OData services by assembling OData service documents and metadata documents from internal and external sources. The metadata component may include or be associated model information from the GBI configuration table the business object model and the service registry . This stores a link between particular OData services and an actual implementation of the particular OData service accessing the correct API and business object . The requests received from the gateway server can be analyzed to determine the corresponding OData service associated with the request.

The runtime component of the OData channel can analyze and process requests from the requesting system. In some implementations the runtime component may embed features such as automatic logging and tracing configuration based routing transaction handling etc. In some implementations some common services can be offered using an API for reuse by the OData runtime. Examples of common services may include metering services for enabling usage based charging and push service notifications. The OData runtime may contain functionality required to exposes OData services.

The business suite server includes a platform adaptation layer which provides a layer for customization and connections between the data adapter and the business logic layer . The platform adaptation layer may include functionality for assisting the GBI module in adapting requests for information from the business logic layer .

The illustrated example distributed computing system also includes the client device or multiple client devices . The client device may be any computing device operable to connect to or communicate with at least the business suite server via the network using a wireline or wireless connection. In general the client device comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the example distributed computing system .

The illustrated client device further includes a client application . The client application is any type of application that allows the client device to request and view content on the client device . In some implementations the client application can be and or include a web browser. In some implementations the client application can use parameters metadata and other information received at launch to access a particular set of data from the server . Once a particular client application is launched a user may interactively process a task event or other information associated with the business suite server . Further although illustrated as a single client application the client application may be implemented as multiple client applications in the client device .

The illustrated client device further includes an interface a processor and a memory . The interface is used by the client device for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the business suite server as well as other systems communicably coupled to the network not illustrated . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the example distributed computing system .

As illustrated in the client device includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the example distributed computing system . Each processor may be a central processing unit CPU an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the client device . Specifically the processor executes the functionality required to send requests to the business suite server and to receive and process responses from the business suite server .

Further the illustrated client device includes a GUI . The GUI interfaces with at least a portion of the example distributed computing system for any suitable purpose including generating a visual representation of a web browser. In particular the GUI may be used to view and navigate various web pages located both internally and externally to the business suite server .

The illustrated client device also includes a memory or multiple memories . The memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including caches classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the client device . Additionally the memory may include any other appropriate data such as VPN applications firmware logs and policies firewall policies a security or access log print or other reporting files as well as others.

There may be any number of client devices associated with or external to the example distributed computing system . For example while the illustrated example distributed computing system includes one client device alternative implementations of the example distributed computing system may include multiple clients communicably coupled to the business suite server and or the network or any other number suitable to the purposes of the example distributed computing system . Additionally there may also be one or more additional client devices external to the illustrated portion of the example distributed computing system that are capable of interacting with the example distributed computing system via the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while the client device is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The illustrated client device is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. For clarity also includes a mobile device which includes a mobile application along with an interface processor memory and GUI similar to those of the client device . Using the gateway server to route and interpret requests various types of clients devices and other applications may interact with the business suite server such as through OData compliant requests. For example the client device may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the business suite server or the client device itself including digital data visual information or a GUI as shown with respect to the client device .

Network facilitates wireless or wireline communications between the components of the environment i.e. between the business suite server and one or more mobile and client devices as well as with any other local or remote computer such as additional clients servers or other devices communicably coupled to network but not illustrated in . In the illustrated environment the network is depicted as a single network in but may be a continuous or discontinuous network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients. The network may be all or a portion of an enterprise or secured network while in another instance at least a portion of the network may represent a connection to the Internet. In some instances a portion of the network may be a virtual private network VPN . Further all or a portion of the network can comprise either a wireline or wireless link. Example wireless links may include 802.11a b g n 802.20 WiMax and or any other appropriate wireless link. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated environment . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may also include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations. The network however is not a required component of the present disclosure.

While is described as containing or being associated with a plurality of elements not all elements illustrated within environment of may be utilized in each alternative implementation of the present disclosure. For example although depicts the data adapter as separate from the gateway server . In some instances the data adapter may be part of or included within the gateway server . Still further one or more of the elements described herein may be located external to environment while in other instances certain elements may be included within or as a portion of one or more of the other described elements as well as other elements not described in the illustrated implementation. Further certain elements illustrated in may be combined with other components as well as used for alternative or additional purposes in addition to those purposes described herein.

As illustrated in requests are received at a backend system e.g. a business suite server in from a plurality of applications and users. In the illustrated system requests are received from a client application associated with a client device and user a mobile application associated with a mobile device and user and a web based application and user . Requests from both the client application and the mobile application are routed through the gateway prior to being passed to the backend system while requests from the web based application are provided directly to the backend system .

As illustrated the mobile application s requests are first processed by a mobile platform for formatting and processing mobile application requests. Some mobile applications may send their requests directly to the gateway while others may first route requests and messages through the mobile platform for initial processing. The messages can then be received at the gateway . The gateway using the minimal gateway relays those messages to the appropriate OData channel associated with the backend system . The OData channel is associated with the illustrated service registry which provides service definitions and access through the OData compliant requests received via the OData channel . The OData channel thus exposes a plurality of services that can be accessed by external users clients and applications to interact with the information stored at and managed by the backend system . Further processing operations performed by or associated with the backend system can be accessed through these exposed services allowing the external applications to request information exposed by the service and receive responsive messages and data sets in return via the gateway .

The OData channel can pass information related to a received request including the service called to the data adapter . The data adapter can adapt the information included in the request into a backend system compliant language and or format and use the operations and data stored in the backend system to provide a responsive message. In the present disclosure the requests received from the external applications and associated with particular services can be linked to specific business object views and view instances. The data adapter can interact with the GBI module to provide particular service related views into the business objects associated with the request. Specifically the GBI module can identify the service associated with the received request and access the GBI configuration table . The GBI configuration table can be customized to define the particular views and view instances associated with particular business objects and associate those views with one or more services. When a particular service is requested the GBI module identifies the corresponding views and view instances to be used with the data adapter to access the business logic layer its business objects and one or more BOPF models via the BOPF service and transaction manager as well as their corresponding business object data stored in the persistency layer . In some instances the GBI configuration table can have access to or can request information from the FBI configuration . The FBI configuration is a repository component containing model information of the FBI views existing in the system.

In the illustrated instance a platform adaptation layer is associated with a floorplan manager BOPF integration component FBI . The FBI is meant for rapid development of user experience compliant UI development. The FBI provides configurable and codeless integration of floorplan manager FPM and business objects implemented in the business object processing framework BOPF . In other words the configuration of particular views into floorplans and business objects can be defined by users with those definitions used to access the corresponding objects via calls to the BOPF s processing capabilities. By defining views as to how to access the business objects a generic interface for implementing those views can be provided removing an implementation and development hurdle for many users.

The FBI includes an FBI view and an FBI view instance . The FBI view portion of the FBI is used for the provision of metadata from the BOPF layer while the FBI view instance component is used for the consumption of the services that are provided by the BOPF based BOs. The form feeder is used for providing data associated with the business objects or views upon business objects that is provided in a one to one relationship while the list feeder is used for providing data associated with the business objects or associated views provided in a one to many relationship. When the FBI view is called at runtime it can read the metadata associated with the FBI view from FBI configuration in order to process the correct portions of the business object. The GBI configuration table may be a logical extension of the FBI configuration table incorporating services associated with particular metadata otherwise associated with the FBI configuration table and allowing information to be accessed and used by the GBI module .

Once the correct view and view instance are retrieved from the GBI configuration table the data adapter and GBI module format the request to the business logic layer for business object related data. Specifically a request formatted for the BOPF is created and sent to the business logic layer specifically the BOPF service and transaction manager which uses the operations of the BOPF to identify one or more business objects associated with the particular operations associated with the received request and which access the BO s associated BOPF model data i.e. BO metadata and business object data . The information is collected and returned to the data adapter which can return that data and structure to the OData channel where it can be placed back into its appropriate format and returned via the gateway and its minimal gateway to the requesting application.

As illustrated the web based application can use the functionality of the FBI to access the data from the business logic layer via a floorplan manager FPM .

At a request is received for data at a generic interface from an external application where the request is in a first format. Further the request may be associated with a specific service. In some instances the first format can be an OData compliant format. In some instances the request may have been directed to the receiving system by a gateway system responsible for routing requests provided by various clients systems and or applications to provide a single interface for interacting with one or more systems and or applications.

At the received request is converted into a second format associated with a backend application to allow for further processing. The second format can be any format suitable for use at a system or application associated with the system at which the request is received. In one example that system may be a business suite server as described in where the second format is a data and or messaging format suitable for communications and operations within the business suite server and or the server s applications with which the requests are associated.

At the service associated with the received request is identified. As described above one or more services may be associated with specific configurations that can be used to generate from a generic data adapter service specific views and view instances on one or more business objects and or other suitable objects. The service may be identified based for instance on the location at which the received request was sent and received. In some instances the received request may include within its payload and or associated metadata a clear or derivable identification of the associated service. In some instances algorithms for deriving the associated service can be executed to identify the service. In other instances the associated service identification may be retrieved from the received request.

At a configuration entry from the configuration table associated with the identified service is identified. The identified configuration entry can define one or more views and view instances associated with one or more business objects included in or associated with the backend application. The views can provide a description of the structure of the business objects and the particular portions of the business object to be accessed while the view instances are used to retrieve the information from those portions and interact with the services and operations associated with the business object. The configuration entry may be an entry in a database table linked to the identified service such as by using service identifiers as primary keys in the database table. In some instances the database or other suitable file or storage mechanism can be queried based on the identified service or its unique service identifier with the corresponding configuration information being returned in response to the query.

At the information retrieved from the configuration entry associated with the identified service is used to request the corresponding data from the backend application s business logic layer. In some instances a generic metadata provider class and a generic data provider class can be modified or updated with the retrieved information in order to provide a request to the business logic layer specific to the identified service at . The request may be received and interpreted by the business logic layer which can then access the corresponding business objects metadata and data associated with the request. The data corresponding to the requested business objects and data can be returned in the second format associated with the backend application. At that data can be converted into the first format by the data adapter or other suitable component. At the returned data is returned to the requesting external application in the first format in response to the initially received request.

The data adapter includes a generic metadata provider class and a runtime data provider class . These classes would normally need to be specifically implemented for each possible interaction with different business objects and or combinations of business objects. Using the generic classes however the information specific to a particular business object set of business objects or portions thereof can be determined at runtime based on stored configuration information associated with a particular service requested by the client . The data adapter interacts with the GBI module to identify the configuration information stored in the GBI configuration associated with the particular service being called. The GBI configuration may include or be associated with an FBI configuration not shown that assists the GBI configuration and the GBI module in accessing view relevant information stored within or associated with the FBI configuration. That information can be passed back to the classes where the correct data adapter classes are configured which can then be provided to the FBI . The data classes of the data adapter can use the FBI to pass specific business object requests to the BOPF . The BOPF can access the business object data and metadata repositories collectively BO data and metadata to access and return the corresponding business object data. The data is returned to the data adapter then subsequently through the OData channel back to the gateway and ultimately back to the client .

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But environment or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the steps in these processes may take place simultaneously concurrently and or in different orders than as shown. Moreover environment may use processes with additional steps fewer steps and or different steps so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

