---

title: Method and apparatus for synchronizing a physical machine with a virtual machine while the virtual machine is operational
abstract: A method for synchronizing, using at least one processor, a physical machine with a virtual machine while the virtual machine is operational in memory is disclosed. In one embodiment, the method includes monitoring a physical machine that utilizes a physical disk for storing computer data, consolidating a virtual disk with modifications to the physical disk, wherein the modifications to the physical disk are replicated on the virtual disk in response to unavailability of the physical machine, operating a virtual machine that utilizes the virtual disk for storing the computer data and migrating the virtual machine, using the virtual disk, to a computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484431&OS=08484431&RS=08484431
owner: Symantec Corporation
number: 08484431
owner_city: Mountain View
owner_country: US
publication_date: 20120409
---
This application is a continuation of U.S. patent application Ser. No. 12 465 614 entitled METHOD AND APPARATUS FOR SYNCHRONIZING A PHYSICAL MACHINE WITH A VIRTUAL MACHINE WHILE THE VIRTUAL MACHINE IS OPERATIONAL filed May 13 2009 now U.S. Pat. No. 8 156 301 naming Atul Khandelwal and Anurag Runthala as inventors. This application is assigned to Symantec Corporation the assignee of the present invention and is hereby incorporated by reference in its entirety and for all purposes.

Embodiments of the present invention generally relate to computer resource management systems and more particularly to a method and apparatus for synchronizing a physical machine with a virtual machine while the virtual machine is operational.

In a typical computing environment small to large organizations produce a significant amount of mission critical data e.g. financial information trade secrets legal documents intellectual property critical business strategies e.g. marketing and or production plans source code presentations and or the like . These organizations may employ various computing technologies to protect and process the mission critical data such that various users may process such mission critical data with little or no interruption. For example an employee may utilize a physical machine e.g. a computer such as a desktop a laptop a PDA and or the like to perform various tasks e.g. billing payroll and or the like and any data loss or interruption may result in downtime.

Physical machines however may become inoperable e.g. system crash due to various failures e.g. a hardware failure a software fault an operating system failure and or the like . These failures often cause disastrous errors and or data loss. For example a sudden computer crash may occur while a user is testing source code. As another example the user may be demonstrating proprietary software to a potential customer or investor when the physical machine fails to boot and jeopardizes future business relations.

Various data recovery software programs may be utilized to restore a software and or hardware configuration of the physical machine upon recovery after a failure. Unfortunately these data recovery software programs require a significant amount of time to complete the restoration process. The user may also require an administrator to manually restore the physical machine. Even after the physical machine is restored the user is required to reinstall applications and reconfigure hardware devices on the restored physical machine.

These data recovery software programs may configure a virtual machine to be a clone of the physical machine. Furthermore the virtual machine may use the same computer data as the physical machine. As such the user may operate the virtual machine in a manner similar to the physical machine. The virtual machine unfortunately must be powered off in order to recover the physical machine at a later point in time.

Therefore there is a need in the art for a method and apparatus for synchronizing a physical machine with a virtual machine while the virtual machine is operational.

Embodiments of the present disclosure generally include a method and apparatus for synchronizing a physical machine with a virtual machine while the virtual machine is operational. In one embodiment the method for synchronizing using at least one processor a physical machine with a virtual machine while the virtual machine is operational in memory is provided. The method includes monitoring a physical machine that utilizes a physical disk for storing computer data consolidating a virtual disk with modifications to the physical disk wherein the modifications to the physical disk are replicated on the virtual disk in response to unavailability of the physical machine operating a virtual machine that utilizes the virtual disk for storing the computer data and migrating the virtual machine using the virtual disk to a computer.

In some embodiments the virtual machine may be migrated to the physical machine when the physical machine is available. In some embodiments modifications to the virtual disk may be replicated on the physical disk. In some embodiments delta modifications associated with the virtual disk may be replayed onto the physical disk. In some embodiments heartbeat data from the physical machine may be processed. In some embodiments the heartbeat data may indicates availability of the physical machine. In some embodiments availability of the physical machine may be assessed. In some embodiments changed data information may be generated that indicates at least one changed data block within at least one of the physical disk or the virtual disk. In some embodiments the physical disk may be restored to a current state associated with the virtual disk. In some embodiments a virtual machine image may be converted into a bootable virtual disk for recovering the physical machine. In some embodiments the physical machine may be recovered using a bootable virtual disk. In some embodiments the virtual disk may be transformed into a bootable virtual disk.

In another embodiment an apparatus for synchronizing using at least one processor a physical machine with a virtual machine while the virtual machine is operational in memory is provided. The apparatus includes means for monitoring a physical machine that utilizes a physical disk for storing computer data means for replicating on a virtual disk modifications to the physical disk and generating a virtual machine that utilizes the virtual disk for storing the computer data when the physical machine is unavailable and means for operating a virtual machine that utilizes the virtual disk for storing the computer data and migrating the virtual machine to the physical machine wherein modifications to the virtual disk are replicated on the physical disk.

In some embodiments the apparatus further includes means for transforming the virtual disk into a bootable virtual disk. In some embodiments the apparatus further includes means for converting a virtual machine image into a bootable virtual disk for recovering the physical machine. In some embodiments the apparatus further includes means for restoring the physical disk to a current state associated with the virtual disk.

In yet another embodiment a computer readable storage medium is provided. The computer readable storage medium comprises one or more executable instructions that when executed by at least one processor causes the at least one processor to monitor a physical machine that utilizes a physical disk for storing computer data to consolidate modifications to the physical disk with a virtual disk wherein the modifications to the physical disk are replicated on the virtual disk to operate a virtual machine that utilizes the virtual disk for storing the computer data in response to unavailability of the physical machine and to migrate the virtual machine to the physical machine wherein modifications to the virtual disk are replicated on the physical disk.

In some embodiments the one or more processor executable instructions may transform the virtual disk into a bootable virtual disk. In some embodiments the one or more processor executable instructions may replicate on the physical disk delta modifications to the virtual disk. In some embodiments the one or more processor executable instructions may convert a virtual machine image into a bootable virtual disk for recovering the physical machine.

As explained in detail below various embodiments of the present disclosure enables synchronization of a physical machine with a virtual machine while the virtual machine is operational. As computer users operate the physical machine and process computer data stored within a physical disk a consolidation module may be executed to maintain on a virtual disk a current state of the computer data within the physical disk. The consolidation module cooperates with various software modules to create a virtual machine for performing computer operations on the virtual disk and communicating with these computer users through a Remote Desktop Connection. After a hardware failure or software fault the physical machine becomes unavailable and the consolidation module instructs a virtualization module to operate the virtual machine such that these computer users may continue processing the computer data with minimal or no interruption and or data loss.

When the physical machine returns to functionality and becomes available these software modules may cooperate to recover the physical machine. In some embodiments the consolidation module cooperates with the virtualization module to produce a bootable virtual disk e.g. a bootable .VHD file that includes the virtual disk as well as various software programs e.g. device drivers operating system programs application software and or the like to be installed on the physical machine. In some embodiments a consolidation module may instruct a recovery module to restore the current state of the physical disk using the virtual disk.

Generally each of the plurality of computers may be a type of computing device e.g. a laptop a desktop a terminal and or the like that facilitates operation of various applications for one or more computer users. For example the plurality of computers may include a laptop through which a salesperson may send emails to customers. If the laptop crashed the salesperson may continue sending emails using a virtual machine hosted by the server as explained further below.

Each of the plurality of computers includes a physical disk which facilitates persistent storage of computer data. One or more users may utilize the computer to perform various computer operations e.g. file system and or storage operations that modify the physical disk through various software applications. For example a user may create a file e.g. an MS WORD file and or the like and or add and or change one or more data blocks to an existing file. The one or more changed data blocks are stored on the physical disk . As explained further below modifications to the physical disk are replicated to the virtual disk by a data change module.

The network comprises a communication system that connects computers by wire cable fiber optic and or wireless link facilitated by various types of well known network elements such as hubs switches routers and the like. The network may employ various well known protocols to communicate information amongst the network resources. For example the network may be a part of the Internet or Intranet using various communications infrastructure such as Ethernet WiFi WiMax General Packet Radio Service GPRS and the like.

The server may be a type of computing device e.g. a laptop a desktop a server class machine and or the like known to one of ordinary skill in the art having the benefit of this disclosure. The server generally provides various services e.g. application services storage services and or the like to the plurality of computers within the system . The server includes a consolidation module . The server hosts a plurality of virtual machines to the plurality of computers . As explained in detail further below each virtual machine may be an instance of a virtual machine image.

The server may couple with the plurality of devices through the Storage Area Network SAN fabric and provide the plurality of computers with access to various storage resources. The SAN fabric comprises various communications infrastructure such as Ethernet Fibre Channel InfiniBand Internet Small Computer System Interface iSCSI and or the like. As an example such a Storage Area Network SAN fabric may include Fibre Channel switches and or iSCSI block storage devices.

The SAN fabric and the plurality of devices may form a type of a storage system that generally includes various components i.e. hardware and software not shown for managing storage resources. The plurality of devices may include one or more data storage devices e.g. hard disk drives optical drives magnetic tape drives a storage array e.g. a disk array in a RAID configuration and or the like . Each of the plurality of devices may function through an interface e.g. Integrated Drive Electronics AT Attachment IDE ATA Small Computer Systems Interface SCSI and or the like with one or more computing devices e.g. physical machines and or virtual machines . The plurality of devices facilitate persistent storage of the computer data in the form of one or more virtual disks i.e. one or more virtual disk files such as a .VHD file or a .VMDK file as explained further below.

The computer may initiate a registration process with the server such that various virtualization software modules may provision one or more virtual machines to facilitate uninterrupted operation of the computer data e.g. a Physical to Virtual Conversion as explained further below. The server creates a virtual machine to which the user of the computer may utilize to process the computer data within the virtual disk . Subsequently the computer may utilize various solutions e.g. a heartbeat mechanism to indicate availability. For example the computer may communicate heartbeat data at regular time intervals e.g. one hour . If the server fails to receive the heartbeat data at a scheduled point in time the computer most likely crashed.

After the computer crashes e.g. unavailability due to a hardware and or a software failure the user may utilize another computer and operate the virtual machine hosted by the server . Any subsequent operation initiated by the user is performed on the virtual disks . As the user operates the virtual machine the consolidation module maintains on the virtual disks a current state of the computer data within the physical disks . When the computer is to be recovered the virtual machine may be migrated to a computer of the plurality of computers as described further below.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system are generally stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical disk drive a floppy disk unit or other storage medium. Additionally applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem or interface .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . The operation of a computer system such as that shown in is readily known in the art and is not discussed in detail in this application. Code to implement the present disclosure can be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 UNIX Linux or another known operating system.

Moreover regarding the signals described herein those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block or a signal can be modified e.g. amplified attenuated delayed latched buffered inverted filtered or otherwise modified between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next other embodiments of the present disclosure may include modified signals in place of such directly transmitted signals as long as the informational and or functional aspect of the signal is transmitted between blocks. To some extent a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved e.g. there will inevitably be some attenuation and delay . Therefore as used herein a second signal derived from a first signal includes the first signal or any modifications to the first signal whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and or final functional aspect of the first signal.

The server is a type of computing device e.g. a laptop a desktop a server class machine and or the like that comprises a Central Processing Unit CPU various support circuits and a memory . The CPU may comprise one or more commercially available microprocessors or microcontrollers that facilitate data processing and storage. Various support circuits facilitate operation of the CPU and may include clock circuits buses power supplies input output circuits and or the like. The memory includes a read only memory random access memory disk drive storage optical storage removable storage and the like. The memory includes various data and software packages such as an operating system virtualization software a recovery module a physical to virtual P2V component a virtual to physical V2P component a consolidation module a replay module changed data information . The memory further includes a virtual machine a data change module a virtual machine image and a virtual disk .

The operating system generally manages various computer resources e.g. network resources data storage resources file system resources and or the like . The operating system is configured to execute operations on one or more hardware and or software components such as network interface cards NICs hard disks application processes virtualization layers firewalls and or the like. For example the various software packages call commands associated with the operating system i.e. native operating system commands to perform various file system and or storage operations such as creating files or metadata writing data to the files reading data from the files modifying metadata associated with the files and or the like. The operating system may call one or more functions associated with the virtualization module to execute various operations on the virtual disk . As an example the operating system may cooperate with the virtualization module to process the virtual machine image in order to operate the virtual machine such that a user may continue processing computer data when a failure occurs at a computer i.e. a physical machine .

The virtualization module includes software code e.g. processor executable instructions that is executed by the CPU to facilitate creation of a virtualization layer e.g. a hypervisor between the virtual machine and local and or remote computer resources e.g. computer memory physical processors hard disks and or the like associated with the server as well as any other networked storage devices e.g. the plurality of devices of . The virtualization layer multiplexes the local and or remote computer resources to the virtual machine running on the server e.g. the virtual machines of . Through the virtualization layer the virtual machine may use the local computer resources on the server as well as the remote computer resources on the networked storage devices. Thus the virtualization layer generated by the virtualization software modules facilitates the necessary virtual machine abstraction. As shown further below the recovery module cooperates with the virtualization module in order to create the virtual machine image and run the virtual machine .

Operating the virtual machine emulates a physical machine e.g. the computer of which includes a physical disk e.g. a physical hard disk drive for storing computer data. The virtual machine may be a runtime instance of the virtual machine image that represents a hardware and or software configuration associated with the physical machine. As such the virtual machine includes computer memory state information e.g. file system logs contents of working memory cache memory and or swap memory as well as one or more running computer processes e.g. guest operating system processes application processes device processes and or the like . Furthermore the virtual machine includes the data change module as explained in detail below.

The virtual machine image may include various virtualization files e.g. a .VMX file a .VMDK file a .VHD file and or the like that are utilized e.g. mounted by the virtualization module e.g. a Hypervisor a Virtual Machine Monitor VMM and or the like to generate and monitor the virtual machine which is abstract representations of the physical machine. In some embodiments the virtual machine image may represent a backup of the virtual machine . In some embodiments the virtual machine image may include a bootable virtual disk e.g. a bootable virtual machine hard disk image .VHD file for migrating the virtual machine as explained further below.

The recovery module includes software code e.g. processor executable instructions that may be executed by the CPU to monitor and facilitate recovery of the physical machine e.g. the physical machine of FIG. according to various embodiments. The recovery module may employ various mechanisms to determine if the physical machine is available. For example the recovery module monitors heartbeat data communicated by the physical machine to assess availability. After a definable time period elapses an absence of the heartbeat data indicates that the physical machine is unavailable. If the recovery module determines that the physical machine is unavailable based on the heartbeat data the recovery module may initiate operation of the virtual machine which uses the virtual disk for storing the computer data. When the physical machine is to be recovered the recovery module may access the virtual disk and restore the physical disk to a current state associated with the virtual disk . Alternatively the recovery module may restore another physical disk at another computer e.g. another computer of to the current state associated with the virtual disk .

The recovery module may include the physical to virtual P2V component e.g. VMWARE vCenter Converter . The physical to virtual P2V component includes software code e.g. processor executable instructions that facilitates migration of the physical machine to the virtual machine. In some embodiments the physical to virtual component may convert the physical machine and the physical disk e.g. a physical hard disk into the virtual machine image such that the computer data within the physical disk is stored within the virtual disk . For example the P2V component may create a bootable virtual disk having read write privileges such as a dynamic virtual hard disk image .VHD file including bootable operating system files.

The recovery module may further include the virtual to physical V2P component e.g. VMWARE vCenter Converter . The V2P component includes software code e.g. processor executable instructions that facilitates migration of the virtual machine to the physical machine and or any other computer. In order to perform the V2P migration the V2P component accesses i.e. mounts and converts the virtual machine image that corresponds with the physical machine to be recovered according to some embodiments. For example the V2P component may convert the virtual machine image into a bootable virtual disk that includes hardware boot information e.g. a boot.ini file a NTLDR process and or the like operating system boot information device drivers application installation files and or the like associated with the physical machine to be recovered. In some embodiments the V2P component may transform the virtual disk e.g. a .VHD file into the bootable virtual disk e.g. a bootable .VHD file for recovering the physical machine. The V2P component mounts the bootable virtual disk to install the operating system configure hardware devices and copy the computer data within the virtual disk to the physical disk. In some embodiments the physical machine runs hardware specific files and starts an operating system from the bootable virtual disk.

The consolidation module includes software code e.g. processor executable instructions that may be executed to enable synchronization of the physical machine e.g. the computer of with the virtual machine while the virtual machine is operational. In some embodiments the consolidation module analyzes the changed data information which may be communicated by the physical machine that utilizes the physical disk for storing computer data. In some embodiments the consolidation module utilizes the changed data information to maintain on the virtual disk a current state of the computer data within the physical disk. In some embodiments the consolidation module cooperates with the replay module to replicate computer data modifications between the physical disk and the virtual disk .

The replay module includes software code e.g. processor executable instructions that may be executed to consolidate the virtual disk with one or more modifications to the physical disk. In some embodiments the consolidation module calls the replay module in order to replicate the one or more modifications on the virtual disk . For example the consolidation module communicates a data block and an extent to the replay module which writes the data block to a portion of the virtual disk that is identified by the extent.

While the physical machine is unavailable the user may utilize another physical machine to communicate with the virtual machine . As an example the other physical machine may connect with the server as a remote desktop e.g. a Remote Desktop Connection in order to operate the virtual machine . Furthermore the user may initiate execution of various guest operating system commands for modifying the computer data stored in the virtual disk . As the user operates the virtual machine the virtualization module performs one or more computer data modifications on the virtual disk .

Because the P2V component created the virtual machine as a clone of the physical machine the data change module and a data change module within the physical machine e.g. the data change module of may operate identically or at the very least similarly. The data change module monitors each and every modification performed on the virtual disk . For example the data change module examines one or more WRITE operations communicated to the virtual machine . The data change module stores information e.g. extents associated with one or more changed data blocks within the virtual disk as the changed data information .

In some embodiments the recovery module assesses the availability of the physical machine before instructing the virtual to physical component to migrate the virtual machine . After the recovery module calls the V2P component to convert the virtual machine image into a bootable virtual disk for recovering the physical machine the recovery module monitors the physical machine for heartbeat data. If the recovery module receives heartbeat data indicating availability of the physical machine the recovery module instructs the virtualization software to terminate the virtual machine and or unmount the virtual machine image .

In addition the consolidation module examines the changed data information to identify one or more delta modifications e.g. modifications to the virtual disk subsequent to the migration of the virtual machine to the physical machine and before termination of the virtual machine . Once the one or more delta modifications are identified the consolidation module cooperates with a data change module running in the physical machine to replicate the one or more delta modifications such that the physical disk may be restored to a current state associated with the virtual disk and the physical machine may be fully recovered on the computer.

The operating system generally manages various computer resources e.g. network resources data storage resources file system resources and or the like . The operating system is configured to execute operations on one or more hardware and or software components such as network interface cards NICs hard disks virtualization layers firewalls and or the like. For example the various software packages call commands associated with the operating system i.e. native operating system commands to perform on the physical disk various file system and or storage operations such as creating files or metadata writing data to the files reading data from the files modifying metadata associated with the files and or the like. The operating system may call one or more functions to execute various file system and or storage operations.

In one or more embodiments the data change module includes software code e.g. processor executable instructions that may be configured to monitor modifications to the physical disk e.g. the physical disk of . As an example the data change module may cooperate with the operating system to process one or more WRITE operations performed on the physical disk and communicate information associated with such operations to another computer e.g. the server of or the server of . As explained further below such information may identify one or more changed data blocks within the physical disk . In some embodiments the data change module creates the changed data information to store locations e.g. extents associated with the one or more changed data blocks.

In some embodiments the data change module cooperates with a consolidation module e.g. the consolidation module of to store such locations as changed data information e.g. the changed data information of on the other computer e.g. the server of . For example the data change module may communicate the changed data information to the other computer where the consolidation module parses the changed data information to identify an extent e.g. an offset from a first sector and a size in bytes associated with a particular changed data block. As described in the present disclosure the consolidation module instructs a replay module to perform on a corresponding virtual disk one or more file system operations for replicating the modifications to the physical disk . In some embodiments the data change module may communicate the changed data information at a pre defined time interval or a variable time interval. In some embodiments the data change module may continuously communicate the changed data information to the consolidation module running within the other computer e.g. the server .

In some embodiments the changed data information may further include one or more delta modifications which may be applied to update the physical disk . In some embodiments the data change module processes information communicated by the consolidation module indicating one or more delta modifications to the corresponding virtual disk. The one or more delta modifications may identify one or more changed data blocks during a time period between a V2P conversion point in time and the virtual machine termination point in time. In some embodiments the data change module performs the one or more delta modifications on the physical disk in order to recover the physical machine .

The method starts at step proceeds to step . A consolidation module e.g. the consolidation module of and the consolidation module of in the memory is executed by the one or more processors. At step a physical machine e.g. the physical machine of is registered. In one embodiment the physical machine may register with the server e.g. the server of and the server of . The physical machine may utilize various available Application Programming Interfaces API and or Command Line Interfaces CLI to request such a registration. In some embodiments the physical machine may communicate a registration request to a recovery module e.g. the recovery module of which calls a physical to virtual component to create a bootable virtual disk. Subsequently the recovery module may monitor heartbeat data in order to determine a state associated with the physical machine e.g. including but not limiting to powered on powered down available unavailable and or the like .

At step a physical disk e.g. the physical disk of is monitored. In one embodiment the data change module e.g. the data change module of monitors the physical disk. For example the data change module monitors each and every WRITE operation on the physical disk. Such operations are initiated by an operating system e.g. the operating system of utilizing various operating system native commands e.g. including but not limiting to WRITE APPEND FILE CREATE and or the like . The data change module may store locations associated with one or more changed data blocks as changed data information e.g. the changed data information of . In some embodiments the data change module communicates the changed data information to a consolidation module e.g. the consolidation module of running in the server.

At step a virtual disk e.g. the virtual disk of is consolidated with modifications to the physical disk. In some embodiments the consolidation module cooperates with the data change module to aggregate information associated with one or more computer data modifications to the physical disk. For example the consolidation module may combine two writes operations that overwrite each other into a single write operation to a particular extent within the virtual disk. Accordingly the consolidation module modifies the changed data information to retain a latter changed block associated with the particular extent and remove a former changed block. The consolidation module may using the one or more processors execute a replay module e.g. the replay module of in the memory e.g. the memory of to perform the single write operation which stores the later changed block at the particular extent within the virtual disk. Because the modifications to the physical disk are replicated on the virtual disk the consolidation module maintains a current state of the computer data within the physical disk.

As a result the recovery module may utilize the virtual disk as a copy or backup of the physical disk. If a file X on the physical disk is modified in which one or more data blocks are appended then the consolidation module may append the one or more data blocks to the file X within the virtual disk. The consolidation module maintains a currents state associated with the file X in the virtual disk. In some embodiments one or more virtual volumes may form a portion e.g. one or more partitions including but not limited to a boot partition a system partition and or the like of the virtual disk e.g. a virtual hard disk image such as a .VHD .

In some embodiments the consolidation module may instruct the recovery module to create the virtual disk as a clone of the physical disk. In some embodiments the consolidation module may instruct the recovery module to transform the virtual disk into a bootable virtual disk for restoring the physical disk. In order to perform the migration of the virtual machine at a later point in time the bootable virtual disk further includes various files for installing and running software programs e.g. operating system processes device drivers application software and or the like .

At step a determination is made as to whether a physical machine is unavailable. In some embodiments the recovery module processes heartbeat data communicated by the physical machine. In some embodiments if the recovery module fails to receive a heartbeat after a pre defined time period elapses the physical machine may be unavailable due to one or more failures. For example the physical machine may experience network connectivity problems because a Network Interface Card NIC failed to initialize. Hence the physical machine cannot communicate the heartbeat and the recovery module determines that physical machine is unavailable. If the recovery module on the other hand receives the heartbeat after a regular time interval the physical machine may be available and operational. If it is determined that the physical machine is available option NO then the method proceeds to step . At step the method waits. In some embodiments the consolidation module proceeds to replicate on the virtual disk one or more subsequent modifications to the physical disk until the physical machine becomes unavailable.

If at step it is determined that the physical machine is unavailable option YES then the method proceeds to step . At step a virtual machine is operated in response to unavailability of the physical machine. In some embodiments a user may operate the virtual machine after a failure renders the physical machine unavailable. The recovery module cooperates with the virtualization module e.g. the virtualization module of to mount a virtual machine image and run the virtual machine. The recovery module may utilize a physical to virtual component e.g. the physical to virtual component of to create a bootable virtual disk that represents a clone of the physical machine.

At step the virtual disk is monitored. In one embodiment a data change module running in the virtual machine monitors the virtual disk to identify one or more changed data blocks. As described in the present disclosure the virtual machine may be a clone of the physical machine and accordingly includes the data change module. At step a determination is made as to whether the physical machine is to be recovered. In some embodiments the virtual machine communicates message data instructing the recovery module to recover the physical machine. Alternatively the recovery module may select another physical machine for restoring the physical disk.

If it is determined that the physical machine is not to be recovered option NO then the method proceeds to step . For example the physical machine cannot be recovered if failures that keep the physical machine unavailable persist. At step the method waits. In some embodiments the recovery module waits until the physical machine resumes functionality. If at step it is determined that the physical machine is to be recovered option YES then the method proceeds to step . At step the virtual machine is migrated to the physical machine. In some embodiments modifications to the virtual disk are replicated on the physical disk after the physical machine becomes available again. In one embodiment the consolidation module cooperates with the replay module to replicate such modifications on to the physical disk.

At step a determination is made as to whether the physical machine is available. In some embodiments the physical machine resumes regular heartbeat data communications to the recovery module. If it is determined that the physical machine is not available option NO then the method proceeds to step . At step the method waits. In some embodiments the recovery module waits until the physical machine communicates the heartbeat data. If at step it is determined that the physical machine is available option YES then the method proceeds to step .

At step the virtual machine is terminated. In some embodiments the recovery module instructs the virtualization module to power down the virtual machine. At step delta modifications to the virtual disk are replicated on the physical disk and the method proceeds to step . In some embodiments the recovery module processes the heartbeat data and determines that the physical machine is available. Then the recovery module instructs the consolidation module to identify one or more changed data blocks after the migration of the virtual machine. The consolidation module may communicate information associated with the one or more changed data blocks to the data change module running within the physical machine which replays the one or more changed data blocks on the physical disk. At step the method ends.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the present disclosure and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as may be suited to the particular use contemplated.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

