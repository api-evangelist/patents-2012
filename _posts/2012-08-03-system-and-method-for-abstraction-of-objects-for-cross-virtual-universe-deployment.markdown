---

title: System and method for abstraction of objects for cross virtual universe deployment
abstract: A system and method for abstracting objects in a virtual universe (VU) deployment is provided. The system and method abstracts VU objects for editing in a common abstraction utility and for deploying to one or more VU grids containing one or more VU architectures and/or platforms (servers). The method can be implemented in a computer infrastructure having programming instructions operable to: obtain an object associated with a first virtual universe server; translate the object with syntax specific to at least a second virtual universe server, the syntax being different than that used with the first virtual universe server; and deploy the translated object to the second virtual universe server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08495078&OS=08495078&RS=08495078
owner: International Business Machines Corporation
number: 08495078
owner_city: Armonk
owner_country: US
publication_date: 20120803
---
The present application is a continuation of application Ser. No. 12 629 555 filed on Dec. 2 2009 the contents of which are incorporated by reference herein in their entirety.

The present invention generally relates to a system and method for abstracting objects in a virtual universe VU deployment and in particular to a system and method to abstract VU objects for editing in a common abstraction utility and deploying to one or more VU grids containing one or more VU architectures and or platforms servers .

A virtual universe VU is a computer based simulated environment for users to interact via avatars. The users can interact with other avatars or items such as for example buildings products etc. hereinafter referred to as objects . The objects are usually depicted as textual two dimensional or three dimensional graphical representations although other forms are possible auditory and touch sensations for example . In implementation the VU is a modeled world that can simulate rules based on the real world or some hybrid fantasy world. Example rules can include for example gravity topography locomotion real time actions and communication. Communication between users can range from text graphical icons visual gesture sound and voice command as some examples. VUs can include for example computer conferencing text based chatrooms and other business forums.

The number of VUs and VU servers is rapidly expanding creating incompatible VUs. This discourages users from experiencing multiple VUs because users would have to spend duplicate time and effort to achieve object parity within the VUs using separate interfaces and methods. Similarly administrators who need to manage multiple VU object sets must currently do so from multiple tools with separate interfaces and methods. This is time consuming and expensive as many VUs simply are not compatible with one another. For example VUs may use different syntax rules SQL etc.

Currently users can teleport from one VU to another including transferring associated inventory and avatar data. However the deficiency of current approaches is that they require a user to manage objects from a plurality of interfaces and methods. Similarly known approaches do not enable an administrator to manage multiple VU object sets without entering into those VUs with separate interfaces and methods.

Accordingly there exists a need in the art to overcome the deficiencies and limitations described herein above.

In a first aspect of the invention a method is implemented in a computer infrastructure having computer executable code tangibly embodied on a computer readable storage medium having programming instructions operable to obtain an object associated with a first virtual universe server translate the object with syntax specific to at least a second virtual universe server where the syntax is different than that used with the first virtual universe server and deploy the translated object to the second virtual universe server.

In an additional aspect of the invention a system implemented in hardware comprises an adapter component to translate actions that need to occur to SQL Structured Query Language to create a single object that can be deployed across different VU servers a communication component designed to pass data between an abstraction utility and the different VU servers over a network and a deployment component designed to deploy selected objects that have been translated to the different VU servers.

In a further aspect of the invention a computer program product comprises a computer usable storage medium having readable program code embodied in the storage medium. The computer program product includes at least one component operable to translate an object from one syntax specific to at least first virtual universe server to a syntax that is specific to a second virtual universe server and deploy the translated object between the first and second virtual universe server.

In a further aspect of the invention a computer system provides an abstraction and deployment of objects in virtual universes. The system comprises a CPU a computer readable memory and a computer readable storage media first program instructions to retrieve an object from storage second program instructions to translate actions that need to occur to SQL Structured Query Language in order to create a single object that can be deployed across different VU servers third program instructions to pass data between a utility that is accessible across different platforms and the different VU servers over a network and fourth program instructions to deploy the translated objects to the different VU servers. The first second third and fourth program instructions are stored on the computer readable storage media for execution by the CPU via the computer readable memory.

The present invention generally relates to a system and method for abstracting objects in a virtual universe VU deployment and in particular to a system and method to abstract VU objects for editing in a common abstraction utility and deploying to one or more VU grids containing one or more VU architectures and or platforms hereinafter referred to as VU servers . In embodiments the objects can be for example avatars inventory buildings product placements and or other items along with associated scripts and metadata from a VU server. By implementing the present invention it is now possible to create a single object and deploy the object across different VU servers. In this way administrators will no longer need to modify objects using different interfaces methodologies etc. for multiple VUs thus saving considerable time and expense when creating objects such as for example product placements for multiple VUs. Instead it is now possible to deploy objects from a centralized computing system to a plurality of different VU servers each having their own rules syntax etc. 

More specifically by creating a single object in terms of for example graphics or other attributes or properties the system and method of the present invention hereinafter referred to as an Abstraction Utility is capable of saving the single object and then deploying the object to different VUs without the need to manually translate such graphics or other attributes or properties for the new VU server. Instead the saved objects such as for example textures coordinates graphics on top of the coordinates etc can be automatically translated and deployed across VU servers.

As used herein an attribute is a specification that defines a property of an object element or file. The attribute of the object usually comprises a name and a value. For an element the attribute may be a type or class name. For a file the attribute may be a name and extension. As should be understood each named attribute has an associated set of rules called operations. Also an object definition can be extended by imposing data typing a representation format a default value and legal operations rules and restrictions. For example in computer graphics line objects can have attributes such as thickness with real values color with descriptive values such as brown or green or values defined in a certain color model such as RGB dashing attributes etc. A circle object can be defined in similar attributes plus an origin and radius. Markup languages such as HTML and XML use attributes to describe data and the formatting of data. The present invention is applicable to objects files and elements using for example any known markup language database protocols syntax SQL etc.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Any combination of one or more computer usable or computer readable medium s may be utilized. The computer usable or computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or propagation medium. More specific examples a non exhaustive list of the computer readable medium would include the following 

The computer usable or computer readable medium could even be paper or another suitable medium upon which the program is printed as the program can be electronically captured via for instance optical scanning of the paper or other medium then compiled interpreted or otherwise processed in a suitable manner if necessary and then stored in a computer memory.

In the context of this document a computer usable or computer readable medium may be any medium that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The computer usable medium may include a propagated data signal with the computer usable program code embodied therewith either in baseband or as part of a carrier wave. The computer usable program code may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network. This may include for example a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

In embodiments the server or other computing system may be designated as an Abstraction Utility designed for multiple VU logins. The Abstraction Utility may be for example a dedicated application a component on an existing VU client or a standalone system any of which may be designed for multiple VU logins. In embodiments and without limitation the Abstraction Utility may reside in part or in whole on one or more VU servers third party service providers such as for example a web application or a client device e.g. such as an application to name a few. The Abstraction Utility provides a centralized location to edit create save modify etc. objects for deployment to numerous different VU servers.

In further embodiments the Abstraction Utility may be a shared system i.e. more than one user may interact with the Abstraction Utility. In such embodiments source control object locks and other standard group development tooling and techniques may be employed to prevent the same object from being modified by more than one user at a time. In such embodiments there may be layers of object abstraction or modification approvals. In additional embodiments the present invention contemplates the creation of reusable objects e.g. template objects . These reusable objects may be created within a VU or within the Abstraction Utility itself.

The computing device also includes a processor memory A an I O interface and a bus . The memory A can include local memory employed during actual execution of program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. In addition the computing device includes random access memory RAM a read only memory ROM and an operating system O S . The computing device is in communication with the external I O device resource and storage component . The I O device can comprise any device that enables an individual to interact with the computing device or any device that enables the computing device to communicate with one or more other computing devices using any type of communications link. The external I O device resource may be for example a graphical user interface a handheld device PDA handset keyboard etc.

In general the processor executes computer program code e.g. program control which can be stored in the memory A and or the storage component . While executing the computer program code the processor can read and or write data to from memory A storage component and or I O interface . The program code executes the processes of the invention. The bus provides a communications link between each of the components in the computing device .

In accordance with aspects of the invention the program control is designed to control and or execute functionalities of the following Adapter Component Communication Component Interface Editor Component and Deployment Component . It should be understood by those of skill in the art that the Adapter Component Communication Component Interface Editor Component and Deployment Component can be a single module component hardware system or multiple modules components hardware systems each with their own processor or sharing one or more processors. In any implementation the processors can be specific use processors for executing the functionality of each of the multiple modules components hardware systems separately or combined. Although a brief description of the components and are discussed below a more detailed discussion follows under their respective headings.

In embodiments the Adapter Component translates actions that need to occur to the SQL Structured Query Language in order to create a single object that can be deployed across different VU servers without the need for manual conversion. Those of skill in the art should understand that SQL is a database computer language designed for managing data in relational database management systems RDBMS . The scope of SQL includes for example data query and update schema creation and modification and data access control.

The Communication Component is designed to provide authentication between servers e.g. how to access a server and can equally provide encryption services e.g. Transport Layer Security TLS and or Secure Sockets Layer SSL . Those of skill in the art should understand that TLS and SSL are cryptographic protocols that provide security for communications over networks such as the Internet. TLS and SSL encrypt the segments of network connections at the Transport Layer end to end.

The Interface Editor Component generates and or presents the fields necessary to edit modify save etc. the objects and their related attributes. These fields can be provided in a graphical user interface e.g. as provided by the I O device resource . By way of example these fields can by dynamic for importing and exporting graphics creating graphics etc.

The Deployment Component is designed to schedule activities amongst other functionality described in greater detail below. In embodiments the Deployment Component can be a standalone module component hardware system or be integrated with one or more of the other modules components hardware systems.

The Storage Component stores the objects and related attributes or properties and mapping information for translation and deployment to different VU servers. The Storage Component can be a database that saves object attributes such as for example textures coordinates graphics on top of the coordinates etc which can be automatically translated and deployed across VU servers using mapping techniques e.g. tables pointers etc. 

The computing device can comprise any general purpose computing article of manufacture capable of executing computer program code installed thereon e.g. a personal computer server etc. . However it is understood that the computing device is only representative of various possible equivalent computing devices that may perform the processes described herein. To this extent in embodiments the functionality provided by the computing device can be implemented by a computing article of manufacture that includes any combination of general and or specific purpose hardware and or computer program code. In each embodiment the program code and hardware can be created using standard programming and engineering techniques respectively.

Similarly the computing infrastructure is only illustrative of various types of computer infrastructures for implementing the invention. For example in embodiments the server comprises two or more computing devices e.g. a server cluster that communicate over any type of communications link such as a network a shared memory or the like to perform the process described herein. Further while performing the processes described herein one or more computing devices on the server can communicate with one or more other computing devices external to the server using any type of communications link. The communications link can comprise any combination of wired and or wireless links any combination of one or more types of networks e.g. the Internet a wide area network a local area network a virtual private network etc. and or utilize any combination of transmission techniques and protocols.

In embodiments the Adapter Component translates actions that need to occur to the SQL Structured Query Language in order to create a single object that can be deployed across different VU servers without the need for manual conversion. More specifically the Adapter Component contains the database query syntax to read and write to each VU server s database.

Typical sub components of the Adapter Component can include for example one or both of a VU specific syntax and an abstraction layer mapping to the VU specific syntax. For example an abstraction utility command to read all inventory items for a specific user may be mapped in a first adapter designed for a first VU server as SELECT from INVENTORY where USER user1 . An abstraction utility command to read all inventory items for a user may be mapped in a second adapter designed for a second VU server as 

In addition to database query syntax such as SQL adapters can be designed to interact with different VU servers using an Application Programming Interface API or other call such as for example GetInventory user1 .

By using the Adapter Component it is possible to deploy objects to one or more VU grids containing one or more VU servers. For example by using the Adapter Component objects such as for example avatars inventory buildings and other items along with associated scripts and metadata can be translated from one VU server to another VU server. In this way deployment of the objects amongst different VU servers can be achieved without manual conversion by an administrator thereby saving considerable time and expense when creating objects such as for example product placements in multiple VUs.

The Communication Component is designed to pass data between the Abstraction Utility and one or more VU servers over a network. This can be accomplished by providing authentication between servers e.g. how to access a server. In embodiments the Communication Component includes for example an authentication component and a server access component. The server access component comprises VU server specific connection information such as IP address or server and domain name port number s and any encryption keys. Thus by using the Communication Component it is possible to communicate between servers and more specifically amongst different VU servers and a central database or tool. This allows objects to be transferred between VU servers and or a central database or tool.

The Interface Editor Component can be a user interface for example as shown in . The Interface Editor Component allows the users to invoke all commands to query store modify and deploy objects and their related attributes to one or more VU servers. More specifically the interface of shows a scene editor Object Library a Properties View and Wizards display window and a directory amongst other features. The interface of shows an export control and an editor .

Referring to the scene editor allows the user to create multiple scenes e.g. objects and related attributes and different layouts for each of the scenes. The Object Library provides the user with a list of commonly used objects in order to design a scene. These objects can be for example meta data information concerning features attributes etc. of the scene. The Properties View and Wizards allow users to modify details about the objects to lay out using wizards and predefined properties. The created saved etc. objects and their related attributes can be converted to different syntax for export to different VU servers. Moreover the interface of shows a display window and a directory . The display window allows the user to modify create edit etc. the scene and the directory enables the user to select different directories.

The interface of shows an export control and an editor . The export control allows a user to export deploy the object e.g. scene etc. from a database or VU server to another VU server. The editor enables the user to edit parameters of the object such as for example location size rotation etc. The editor additionally includes tabs for other functions such as for example error log properties and explorer functions. The error log for example provides a log of errors. The properties allows the user to change properties of the object such as for example textures etc. The explorer function permits the user to search for different objects attributes etc.

The representations depicted in for example can include the predefined properties which are listed in the Properties View. In for example the objects can include any object that is being used in the VU. In embodiments many of the objects are stationary however the present invention contemplates dynamic objects such as for example a camera. In the camera example the camera should be positioned in an appropriate location in order to provide video e.g. machinima or pictures of the VU. In still further embodiments there may be logic associated with the object such as for example when to switch which character to follow etc. This enables the camera to be dynamic for example. In further embodiments the object for the camera can include a location and rotation parameter which can be obtained from VirtualObject class .

The model of is a data model of objects that can be used in a virtual world environment. The model of can include for example a data model for the objects in a composite pattern to allow for recursive containment. The recursive containment allows a hierarchy of folders. Additionally it is contemplated that composite relations can be removed between the container and the VirtualObject so that the objects can be provided in different containers without the need for replication. Additionally the present invention contemplates using tags on the objects and even storing an index for fast search capabilities. The model can also include additional fields such as for example user rights and the like. These options may be available for all models as represented by .

The Deployment Component is designed to transmit data to deploy objects selected in the Interface Editor Component from storage to the one or more selected VU servers. Deployment may be automatic such as whenever an object changes or is approved for deployment. The Deployment Component may be invoked from within the Interface Editor Component or may be invoked from a VU client augmented to interact directly with the Deployment Component .

For deployment the adapters are used to determine the read and write syntax specific to each VU server. For example if the Deployment Component is invoking a command to update an existing object in a first VU server it retrieves the syntax mapped to this command from the adapters for the first VU server and determines for example that it should send the following SQL over the Communication Component 

The Storage Component stores the objects and related attributes and mapping information for translation to different VU servers. The Storage Component can be a database that saves object information such as for example textures coordinates graphics on top of the coordinates etc which can be automatically translated and deployed across VU servers using mapping techniques e.g. tables pointers etc. .

More specifically the Storage Component can be a database designed to store the abstracted objects retrieved from the VU servers and in some embodiments may store a history of interaction between the Abstraction Utility and the Storage Component . For example in addition to storing the geometries textures and metadata of an object history may be stored such as where the object was created e.g. in a specific VU or directly in the Abstraction Utility acting as a VU server in such a case where the object has been deployed to according to the Deployment Component amongst other features. The table of history information can include for example at least the object identifier in the Storage Component the VU server identifier and a date and time. The table may be separate from or part of the table of objects. The Storage Component may be implemented on the user s machine on any database server or both.

In embodiments the Storage Component may include data structures and or tables. The structures and or tables can include for example syntax for different VU servers e.g. databases. In embodiments the syntax of different VUs can be mapped so that a syntax from one database or VU can be translated into a syntax for another VU server. The mapping and configuration of the database structures and or tables can be provided by third party developers or service providers. In such an implementation the syntax for each VU can be provided to the third party developers or service providers and once received populated into the data structures tables. In this way it is possible to convert the syntax e.g. file formats protocols of one VU server to another VU server thereby allowing a seamless exportation of objects and related properties and or attributes e.g. scripts animations sounds textures or other features between VU servers or from a central database to one or more VU servers.

The database Storage Component can also include rules which are predefined by an administrator or provided by each of the VU servers that are associated with the Abstraction Utility. These rules may be for example 

The architecture of may be implemented in the environment of for example. As shown in the architecture can include several layers such as for example a domain specific language a user level language and a virtual world level language . In this illustrative implementation the adapters of the present invention can be provided on the virtual word level language.

The domain specific language can include for example rehearsal services event management and call center management. The user level language can include for example design tools runtime tools analysis tools vertical solutions and other design modalities. The user level language can also include a DRA platform and DRA meta model. The virtual world level language includes different VU servers and adapters in accordance with the present invention. It is contemplated though that the adapters can also be at different layers.

In embodiments a service provider such as a Solution Integrator could offer to perform the processes described herein. In this case the service provider can create maintain deploy support etc. the computer infrastructure that performs the process steps of the invention for one or more customers. These customers may be for example any business that uses technology. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

Furthermore the invention can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. The software and or computer program product can be implemented in the environment of . For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or semiconductor system or apparatus or device or a propagation medium. Examples of a computer readable storage medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disc read write CD R W and DVD.

In embodiments selecting an object requires a visual pointer or other selection system specific to the VU server. In embodiments selection may be automatic based on some criteria such as all objects owned or created by the user by the user s colleagues by other residents in a specific region or building by objects not previously abstracted by objects containing at least one keyword in one or more descriptive fields etc. Object owners and VU owners may place restrictions such as with a No Abstract flag to prevent users from selecting objects for abstraction such as for protecting intellectual property rights. Additionally selection can be limited to objects that the user has rights to thus preventing abstracting confidential documents and media. Other embodiments may include selling or trading abstraction rights.

In embodiments obtaining object information requires a database query mapping to be able to query required data geometries textual coordinates textures jpgs and metadata UUID descriptive info and associated scripts . Displaying object information requires syntax to cause object information to display on the graphical user interface. This can be performed either before obtaining object information so a request from the VU or after obtaining object information so a request to the Interface Editor Component . In embodiments both will be displayed so the user can see what if any object data cannot be abstracted.

In embodiments designating object for abstraction requires confirming the selected object should be abstracted. This typically is a user confirmation such as clicking an Abstract Object button in the Interface Editor Component. This may be an automated confirmation such as designating all selected objects. This may include for example options of when to abstract such as during non peak hours or at a point in time prior to a user need for the abstracted objects and what portions of the object to abstract such as geometries and textures but not metadata or not certain metadata . In embodiments this may update the object metadata in the VU server database to indicate the object has been abstracted along with pertinent information such as when by which user and to what IP address.

In another embodiment the objects may have already been abstracted to or are created in the Interface Editor Component based on a prior selection and abstraction thus acting as an object template. The designation instructs the Abstraction Utility to initiate the next method subject to any scheduling for later abstraction.

At step of the program control translates and stores selected VU objects from the first VU server with the abstraction utility. In embodiments the translation requires use of the Query Adapter Component as discussed above. Once translated and abstracted the designated object is stored in a Storage Component e.g. a database local to the Abstraction Utility. This storage may or may not be of the same database vendor and structure as a VU server s database. The Storage Component includes all of the abstracted geometries textures and metadata. Additionally the Storage Component may include modifications such as alterations or additions.

Alterations may include user or automated alterations to geometries such as to change shape make more complex or make less complex textures such as lower resolution image files higher resolution image files or alternate image files and metadata such as more or less verbose object descriptions purging history spell checking the descriptions or alternate tagging . Additions may include additional geometries such as appending a shape to the object additional textures such as adding more image files in support of more complex or additional geometries or additional metadata such as a UUID for the abstracted object ID used by the Abstraction Utility UUIDs and VU server identifiers to track deployed objects history of where and when the object has been deployed and auto tagging such as Abstracted or Abstracted by on . Once abstracted and stored an object may be modified in accordance with the invention.

At step the translated object may be modified in the Abstraction Utility. Possible modifications of an abstracted object were discussed above. The modifications may be performed as follows without limitation 

At step the program control or user may select a set of VU objects in the Abstraction Utility and a second VU server. Similar to how objects were identified and designated for abstraction above the objects are identified and designated in the Abstraction Utility via the Interface Editor Component. In addition to selecting and designating an object a second VU server is also selected. The selection may be one or more VU servers including the first VU server. In embodiments the selection may default to a specific VU server such as a VU server specified by the user or the VU server from whence the object was originally abstracted or derived if from an object template . The selection may include scheduling when to deploy to the second VU server. Selection may be by a user request or automated according to pre specified user preference. Once objects and a second VU server are selected selected objects may be deployed to the second VU server.

At step the objects may be deployed to the second VU server. To deploy selected VU objects from the Abstraction Utility to the selected second VU architecture platform the Communication Component connects to the second VU server according to the pre specified authentication information or upon user entry. The Query Adapter Component is used to translate the abstracted utility to the syntax of the VU architecture platform similar to that discussed above. The VU server may have restrictions on what may be deployed when objects may be deployed and fees may be paid. If the abstracted object includes a UUID of a VU server object the VU server object may be replaced or an additional object may be created. If the VU object belongs to another owner it may only allow an additional object to be created. If the abstracted object does not include a UUID of a VU server object an object may be created. In any of these scenarios the VU server may use existing logic to prevent certain modifications or creations from deploying such as if any objects are analyzed and discovered to violate security size or content policies. Fees may be associated with deploying an object. The deployment event may be logged in the Storage Component.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims if applicable are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principals of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. Accordingly while the invention has been described in terms of embodiments those of skill in the art will recognize that the invention can be practiced with modifications and in the spirit and scope of the appended claims.

