---

title: Method and apparatus for interactive gameplay across multiple computing platforms
abstract: A method and apparatus is disclosed for enabling interactive gameplay across multiple platforms.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09017170&OS=09017170&RS=09017170
owner: King.Com Limited
number: 09017170
owner_city: St. Julians
owner_country: MT
publication_date: 20120523
---
The embodiments relate generally to an interactive game system that enables players to engage in a common interactive game using different computing platforms.

Interactive video games among multiple players within a social network have become increasingly popular. For example the assignee of this application is the creator of Bubble Witch Saga a popular game that can be played on facebook . In Bubble Witch Saga a particular player is faced with challenges of increasing difficulty. A player can engage in an interactive game with other users within his or her social network such that they can play the same Bubble Witch Saga game. When each player logs in to facebook and initiates the Bubble Witch Saga game he or she will be provided with current information about the other players in the game such as the status of each player score level etc. the names of players who are playing at the current time and the names of players who have recently joined the game. The platform in this situation would be the facebook environment where each player accesses the game using a web browser through facebook and the game is enabled by a server that communicates with each player s web browser using API s in the facebook environment.

One limitation of the prior art systems is that players can only engage in a common interactive video game if they are using the same platform. At present it is not possible to engage in a common interactive game from different platforms such as the facebook environment and an iOS environment an operating system created and operated by Apple Inc. and used by mobile devices including iPhone and iPad and Android based environments used by other mobile devices. It also is not possible to engage in a common interactive game when a user does not have network connectivity.

What is needed is a gameplay system that can be accessed by users of different platforms. What is further needed is a gameplay system that allows play to continue even when a user has lost network connectivity and to synchronize once the user has regained network connectivity.

In this example computing device is a PC running a first platform such as the facebook environment. Server is configured to communicate with computing devices running the first platform such as computing device . For example server can be configured to communicate using facebook APIs with computing devices running the first platform.

Computing device is a mobile device running a second platform such as an iPhone application or Android application. Server is configured to communicate with computing devices running the second platform such as computing device . For example server can be configured to communicate using a proprietary API with computing devices using the second platform. Server and server are coupled to server .

In this embodiment User A the user of computing device and User B the user of computing device are able to play an interactive game together. With reference now to the same structures from are shown. Computing device creates and stores data structure for User A and computing device creates and stores data structure for User B. Server creates and stores data structure for User A and server creates and stores data structure for User B. Server creates and stores data structure for User A and data structure for User B. Each of these data structures comprise common fields and sub fields such as the fields and sub fields shown in Table 1 

Optionally data structures and can be tables in a database such as a MySQL database wherein the key is the Data Structure ID Game ID or User ID. The database storing data structure can run on server the database storing data structure can run on server and the database or databases storing data structures and can run on server . Optionally data structures and can be tables in databases running on computing device and computing device respectively.

Referring now to the initiation of an interactive game in an embodiment will now be discussed. In this example computing device at User A s instruction requests a new game to be created by sending a message to server and computing device creates data structure step . Server then creates a new Game ID and data structure step . Server sends a message to server that the new Game ID has been created and that data structure has been created step . Server then creates data structure and populates the fields and sub fields step . Server and server then synchronize data structure and data structure using the synchronization process described below step . Server and computing device then synchronize data structure and data structure using the synchronization process described below step .

With reference now to adding an additional player to the interactive game described previously with reference to will now be discussed. In this example computing device at User A s instruction submits a request to server to invite User B to the interactive game step . Server submits the request to server to invite User B step . Server then sends a request to User B to join the game step . This request can be by email SMS or MMS text message an API sent directly to an application running on a computing device associated with User B or another communication mechanism. User B then accepts the request using computing device step . The acceptance can be made by selecting a web link responding by email responding by SMS or MMS text message selecting a button within an application or any other communication mechanism. Computing device transmits the acceptance to server step . Server transmits the acceptance to server step . Server creates data structure and updates data structure step . Server and server synchronize data structures and step . Server and computing device synchronize data structures and step . Server creates data structure based on data structure and computing device creates data structure based on data structure step .

In this example server communicates with computing device using a first API such as the facebook API and server communicates with computing device using a second API such as a proprietary API designed for use with an iPhone or Android device as the case may be . Server and server can communicate with server using the first and second APIs respectively or using a third API or protocol such as an API for inter server communications .

An embodiment of a synchronization process will now be discussed. In the embodiments described thus far data structures and correspond to user A and data structures and correspond to User B. Optionally server can create and store a master game data structure for the game that User A and User B have joined. Master game data structure can contain the same fields and sub fields describe previously for data structures and .

During game play User A will interact with computing device and User B will interact with computing device . Computing device runs local application not shown and computing device runs local application not shown . Local application will update data structure as User A progresses through the game. Local application will update data structure as User B progresses through the game. User A and User B need not necessarily be playing at the same time.

In the situation where User A is playing the game periodically such as every 100 ms computing device will send a synchronization request to server . The request will contain a timestamp. If that timestamp indicates a later time than the timestamp in data structure then data structure will be written over with the data from data structure as to fields and sub fields that have changed and the timestamp field of data structure will be updated with the timestamp in the initial request from computing device . However if the Other Players field and sub field of data structures and do not match then the Other Players field and sub fields of data structure will be overwritten with the data from data structure because this mismatch would only occur if the status of other players had changed since the last synchronization event in which case data structure would contain the more recent data for the Other Players. 

Periodically server will send a synchronization request to server . If the timestamp of data structure indicates a later time than the timestamp in data structure then data structure will be written over with the data from data structure as to fields and sub fields that have changed and the timestamp field of data structure will be updated with the timestamp of data structure . However if the Other Players field and sub field of data structures and do not match then the Other Players field and sub fields of data structure will be overwritten with the data from data structure because this mismatch would only occur if the status of other players had changed since the last synchronization event in which case data structure would contain the more recent data for the Other Players. 

If the timestamp of data structure indicates a later time than the timestamp in master game data structure then master game data structure will be written over with the data from data structure as to fields and sub fields that have changed and its timestamp field will be updated with the timestamp of data structure . However if the Other Players field and sub field of master game data structure and data structure do not match then the Other Players field and sub fields of data structure will be overwritten with the data from master game data structure because this mismatch would only occur if the status of other players had changed since the last synchronization event in which case master game data structure would contain the more recent data for the Other Players. 

This synchronization process between computing device server and server has been described thus far with reference to changes in the status of User A. It will be understood by one of ordinary skill in the art that the same changes could occur in data structures and and master game data structure with reference to changes in the status of User B.

The changes in data structures as to User A will now propagate to the data structures associated with User B. Periodically server will compare the timestamp fields of master game data structure and data structure . If the timestamp of master game data structure is a later time than that of data structure then data structure will be written over with the data from master game data structure as to Other Players field and sub fields that have changed and the time stamp of data structure will be updated with the time stamp of data structure .

Periodically server will send a synchronization request to server . The request will contain the timestamp from data structure . If that timestamp indicates a later time than the timestamp in data structure then data structure will be written over with the data from data structure as to the Other Players field and sub fields that have changed.

Periodically server will send a synchronization request to computing device . The request will contain the timestamp from data structure . If that timestamp indicates a later time than the timestamp in data structure then data structure will be written over with the data from data structure as to Other Players field and sub fields that have changed.

Thus it will be appreciated that User A and User B can engage in an interactive game through this synchronization process.

An embodiment enabling airplane mode will now be described. If User B loses connectivity to network on computing device as might occur for example if computing device is on an airplane or has lost WiFi or cellphone connectivity then User B can continue to play the game on computing device using local application . Local application will continue to update data structure . When computing device regains connectivity to network computing device will initiate the synchronization process described above. In this manner User A will learn of the changes in User B s status even though the changes had occurred while User B was not connected to network .

The embodiments have been described as to two users User A and User B but it will be appreciated by one of ordinary skill in the art that the embodiments can accommodate any number of players. Similarly the embodiments have been described as to two computing devices using two different platforms computing device and but it will be appreciated by one of ordinary skill in the art that the embodiments can accommodate any number of computing devices utilizing any number of different platforms.

In addition while the foregoing has been with reference to particular embodiments of the invention it will be appreciated by those skilled in the art that changes in these embodiments may be made without departing from the principles and spirit of the invention the scope of which is defined by the appended claims.

