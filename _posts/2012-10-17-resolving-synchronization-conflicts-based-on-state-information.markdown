---

title: Resolving synchronization conflicts based on state information
abstract: Techniques are described for resolving document change conflicts based on state information. A document management system records, at a client device, changes that a user made to a root client-side instance of a document bundle to create a modified client-side instance of the document bundle, wherein the changes were made while the client device was not connected to a remote storage service. After the changes are recorded, the client device is connected to the remote storage service. In response to determining that a conflict has occurred, the document management system selects a particular resolution action, based, at least in part, on state information associated with at least one of: a user that made the changes, an instance of the document bundle, or the client device on which the changes were made. The document management system then resolves the conflict by performing the particular resolution action.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286315&OS=09286315&RS=09286315
owner: Apollo Education Group, Inc.
number: 09286315
owner_city: Phoenix
owner_country: US
publication_date: 20121017
---
The present invention relates to resolving document conflicts and more specifically to resolving conflicts for document text and metadata based on state information.

Online forums in which users may post and review messages are becoming increasingly popular. An online forum allows users to draft and post messages respond to posted messages and may allow a user to make changes to posted messages such as flagging a posted message or deleting a message that the user authored . Such online forums are generally run for a particular purpose e.g. as part of a support group as a question and answer forum as a discussion board for online education etc.

Many users participate in online forums via multiple client computing devices. For example a particular user may have both a laptop computer and a tablet computer on which the user reviews modifies and creates new messages for a particular online forum. Because these client devices may not be constantly connected to a network through which the online forum is accessible the software used to access the online forum may be designed to maintain a client side instance of messages from the online forum. Further the software may provide a mechanism by which the user may modify the client side instance of a posted message or a draft of a new message while the user s device is offline.

Changing a message offline can create synchronization issues at the online forum. For example a user may make some offline edits changes X to an instance of a message on the laptop computer and different offline edits changes Y to another instance of the same message on the tablet computer. If the user attempts to causes both sets of edits to be propagated to the instance of the message that resides at online forum a conflict occurs. Possible resolutions to such a conflict include but are not limited to 

While there are many possible ways to resolve the conflict it can be difficult to determine which resolution is appropriate in any given situation. Further the example given above is merely one way a conflict can occur. There are any number of situations that may result in conflicting offline updates to the same message which can be equally difficult to resolve.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

As explained above when documents are maintained at a remote storage service that allows multiple client devices to make changes to the documents conflicts may arise when users perform offline edits to the documents. Techniques are described herein for automatically determining how to resolve such conflicts based on state information.

Conflicts may occur when offline changes are made to a document itself or to metadata associated with the document. Such metadata may include for example a rating of the document flags associated with the document a category attribute of the document etc. For the purpose of explanation a document and its associated attributes shall be referred to herein collectively as a document bundle or dBDL . Thus both modifications to a document itself and modifications to metadata associated with the document qualify as changes to the dBDL of the document.

Further a dBDL may represent any kind of data with associated metadata. For example a particular dBDL represents a particular preference setting for a user profile with associated metadata including a timestamp representing when the preference was last changed and a flag indicating whether the value of the preference setting is the default value. Other examples of dBDLs represent data for user profiles syllabus and course materials grades and assignments solicitations contracts for faculty etc.

The version of a dBDL that exists on a client device when the client device disconnects from an online document service is referred to herein as the root client side instance of the dBDL. Offline edits made at the client are initially made to the root client side instance of the dBDL. After any change has been made to the root client side instance of the dBDL that instance ceases to be a root instance because the instance is no longer the version of the dBDL that existed when the client device disconnected from the online document service.

Typically the root client side instance of a dBDL matches the server side instance of the dBDL that was current at the time the client went offline. However after the client goes offline the client side instance and the server side instance may diverge in response to a offline changes made at the client b changes made by another client that are propagated to the server side instance or c both.

In one embodiment conflicts are handled by recording at the client offline changes that a user makes to the root client side instance of a dBDL. Such changes create a modified client side instance of the dBDL. After the changes are recorded the client device is connected to the remote storage service that maintains the server side instance of the dBDL.

After the client device has reconnected with the remote storage service the document management system determines whether a conflict has occurred by determining whether the server side instance of the dBDL matches the root client side instance of the dBDL. If the two instances do not match a conflict has occurred. Specifically both the client side instance and the server side instance have changes that were made after the client device went offline.

In response to determining that a conflict has occurred the document management system selects a particular resolution action of a plurality of available resolution actions based at least in part on state information. The state information that is used to select the particular resolution action may include for example 

The plurality of available resolution actions include at least changing the server side instance of the dBDL to match the modified client side instance of the dBDL and leaving the server side instance of the dBDL unchanged. The document management system then resolves the conflict by performing the particular resolution action.

Edits may be considered as performed offline when the client device used to make the edits was not connected to a data network when data access from a messaging service that manages the server side copies of documents becomes unreliable when the messaging service is not able to process data in time to provide an adequate user experience etc. A messaging client at the client device may not be able to access the messaging service e.g. due to a system or network outage network conditions such as the client device passing through a tunnel that prevents reliable data reception updates being performed at the messaging service etc.

Further a messaging client may effectively go offline because data and resource usage on the client device may be high enough to prevent the messaging client to receive or process data adequately. For example the messaging client may not have sufficient resources such as battery power available CPU etc. when a user runs a resource intensive application in conjunction with running the messaging client. Examples of resource intensive applications include games video streaming applications etc.

Further the messaging client may operate in an offline state because a user explicitly set the messaging client or client device to an offline state such as airplane mode . It is to be appreciated that the above examples of device and application conditions that may cause a messaging client to move to a offline state are non limiting.

An example messaging client may reside on a client device. The messaging client may identify resolution actions to resolve message conflicts discovered when synchronizing messages that have been edited offline. is a block diagram that depicts an example network arrangement for resolving message conflicts according to embodiments. Network arrangement includes a client device a client device and a server device communicatively coupled via a network . Server device is also communicatively coupled to a forum database and client device is communicatively coupled to an offline message database and a display device . Example network arrangement may include other devices including client devices server devices and display devices according to embodiments.

Client devices and may be variously implemented by any type of computing device that is communicatively connected to network . Example implementations of client device and client device include without limitation workstations personal computers laptop computers personal digital assistants PDAs tablet computers cellular telephony devices and any other type of computing device.

In network arrangement client device is configured with a messaging client . Messaging client may be implemented in any number of ways including as a stand alone application as a plug in to a browser which may also be implemented on client device as a component of a stand alone application etc. A browser running on client device may be configured to interpret and display web pages received over network such as Hyper Text Markup Language HTML pages and eXtensible Markup Language XML pages etc. Client device may be configured with other mechanisms processes and functionalities depending upon a particular implementation.

An offline message database is communicatively coupled to client device and may be implemented by any type of storage system capable of storing message information. Offline message database may reside in any type of storage including volatile and non volatile storage such as random access memory RAM one or more hard or floppy disks main memory etc. The storage on which offline message database resides may be external or internal to client device . In one embodiment offline message database stores information about dBDLs.

A display device is communicatively coupled to client device and may be implemented by any type of device capable of displaying a graphical user interface GUI the information for which is supplied by messaging client . Example implementations of display device include a monitor a screen a touch screen a projector a light display a display of a tablet computer a display of a telephony device a television etc.

In network arrangement client device is configured with a messaging client . Messaging client is configured in the same way as messaging client described herein. Client device may be communicatively coupled with a display device not shown in and an offline message database distinct from offline message database also not shown in which are configured to function as the corresponding components described in connection with client device .

Network may be implemented with any type of medium and or mechanism that facilitates the exchange of information between client devices and and server device . Furthermore network may use any type of communications protocol and may be secured or unsecured depending upon the requirements of a particular embodiment.

Server device may be implemented by any type of computing device that is capable of communicating with client devices and over network . In network arrangement server device is configured with messaging service . Messaging service may be part of a cloud storage service according to embodiments. Further messaging service is configured to communicate information for messages associated with one or more online forums with messaging client .

Messaging service may receive and respond to Application Programming Interface API calls from messaging client Simple Object Access Protocol SOAP messages requests via HyperText Transfer Protocol HTTP HyperText Transfer Protocol Secure HTTPS Simple Mail Transfer Protocol SMTP or any other kind of communication from messaging client . Further messaging service may send one or more of the following over network to messaging client information via HTTP HTTPS SMTP etc. XML data SOAP messages API calls and other communications according to embodiments. Messaging service may be implemented by one or more logical modules and is described in further detail below. Server device may be configured with other mechanisms processes and functionalities depending upon a particular implementation.

Server device is communicatively coupled to forum database . Forum database may reside in any type of storage including volatile and non volatile storage including random access memory RAM one or more hard or floppy disks or main memory. The storage on which forum database resides may be external or internal to server device . In one embodiment forum database stores information for dBDLs used by messaging service .

Messaging service manages information for at least one example online forum. For purposes of illustration the example online forum for which messaging service manages information is described as part of an online college course. However embodiments are not limited to online college courses.

In the example online forum one or more users from multiple devices which include e.g. client devices and from may add and manipulate messages arranged in message discussion threads. Message instances may have associated metadata which may include one or more of 

An identifier may be a sequence of alphanumeric characters or any other information that uniquely identifies an entity.

A discussion thread is created when an initiating message is posted to an online forum by a user of the online forum. depicts a discussion thread in an example online forum. Discussion thread includes an initiating message from a faculty member that solicits questions about a pending homework assignment from participants of discussion thread who include students of the course at least one other faculty member and teacher s assistants . Discussion thread also includes a message that responds to message .

To participate in the online forum a user logs in to messaging client using authentication information that uniquely identifies the user e.g. through GUI . Messaging client may communicate the authentication information with messaging service and receive from messaging service information from forum database that is needed to display the forum content that the authenticated user is authorized to view.

For example a particular user at client device authenticates with messaging client . The particular user is authorized to view discussion thread and messaging client receives from messaging service any updated information for discussion thread that is needed to update discussion thread stored at offline message database . Messaging client also sends any change information stored at offline message database that was recorded while messaging client was not connected to messaging service e.g. because either client device or server device did not have access to network at the time. Any conflicts are identified and resolved during the initial exchange of information between messaging client and messaging service as described in connection with flowchart of below.

Discussion threads and depict additional edits performed offline to the messages depicted in discussion thread subsequent to the sync operation. These additional offline edits may have been performed by different users or by the same user on two different client devices. In the example illustrated in the revised discussion threads and both include revisions to the draft message created by Janet Hastings. Consequently it is likely that revised discussion thread reflects offline changes made by a user Janet Hastings on one device while the revised discussion thread reflect offline changes made by the same user using a different device.

After the initial sync operation each message in discussion thread has both a client side instance of the dBDL and a server side instance of the dBDL both of which have the same dBDL identifier. For the purposes of discussion the client side instance of the dBDL for message shall be referred to as dBDLv1 while the server side instance of the dBDL for message shall be referred to as dBDLv2.

In one embodiment messaging service stores dBDLv2 at forum database . Messaging client stores a dBDLv1 at offline message database to enable the user to view and or change messages in discussion thread without having to be connected to messaging service . While there is a connection between messaging service and messaging client the client side instance and the server side instance of the dBDL for each message in discussion thread kept in sync.

As depicted in discussion thread of the authenticated user begins drafting a draft message replying to initiating message of discussion thread while messaging client is connected to messaging service . Thus draft message is saved to both offline message database by messaging client as dBDLv1 and to forum database by messaging service as dBDLv2 . Draft message may be saved at offline message database and forum database through an autosave initiated by messaging service or messaging client or through the user explicitly saving the draft. Draft message has not yet been posted and is therefore not viewable by any user other than the author of the draft.

For the purpose of illustration assume that after draft message is saved the connection is lost between messaging client and messaging service . Because dBDLv1 is the client side instance that exists at the time device goes offline dBDLv1 is the root client side instance of the dBDL for message .

While the user is offline or in other words while messaging client is not connected to messaging service via network the user may make changes to the client side instances of the dBDLs for discussion thread . For example the user may edit the text of draft message may add or edit metadata for message and or message may change metadata associated with discussion thread etc. Such changes are saved to client side instances of data stored for discussion thread while the user is offline. For example a revised client side dBDL dBDLv3 would be created at offline client device if the user uses the offline client device to revise dBDLv1.

At step when a client device is offline changes that are made to a root client side instance of a dBDL are recorded at the client device to create a modified client side instance of the dBDL. For the purpose of explanation it shall be assumed that messaging service is the remote storage service referred to in flowchart . According to another embodiment a cloud storage service of which messaging service is a part is the remote storage service referred to in flowchart .

When a user first changes the client side instance of a dBDL while offline the user changes the root instance of the dBDL to a modified instance of the dBDL which is now different from the server side instance of the dBDL . Messaging service maintains the server side instance of the dBDL i.e. dBDLv2 . For example modifying dBDLv1 while offline creates dBDLv3 which no longer matches dBDLv2.

According to the example of the root instances of messages and are depicted in discussion thread . To illustrate step an authenticated user of client device edits client side information for discussion thread stored at offline message database while messaging client is not connected to messaging service . These changes are illustrated by discussion thread of . As shown in discussion thread the authenticated user edits the text of draft message to state I m having trouble with problem 2 you are a horrible person for assigning it. as reflected in modified draft message . The authenticated user also edits message to include a blue flag in the metadata for message of discussion thread . Messaging client records the appropriate changes to the root client side instances of the dBDLs for messages and respectively to produce modified instances of the dBDLs for messages and in offline message database .

The remote storage service of allows multiple client devices to make changes to the server side instance of the dBDL. For example both client device and client device maintain messaging clients to communicate changes to server side instances of dBDLs stored at forum database . Messaging service responds to communications from messaging client at client device in the manner described in connection with messaging client .

At step the client device connects to the remote storage service after the changes are recorded. Continuing with the example above messaging client at client device connects to messaging service after messaging client records the modified client side instances of the dBDLs for messages and reflected in discussion thread at messages and respectively at offline message database .

At step it is determined whether a conflict has occurred by determining whether the server side instance of the dBDL matches the root client side instance of the dBDL. Server side instance of the dBDL does not match the root client side instance of the dBDL then some other client has caused the server side instance to change after client device went offline.

According to an embodiment determining whether a conflict has occurred is performed automatically in response to the client device establishing a connection with the remote storage service. For example messaging client determines whether a conflict has occurred for the messages in offline message database that have changed while messaging client was offline automatically in response to messaging client establishing a connection with messaging service .

To illustrate step messaging client saves at offline message database information identifying the root client side instances of the dBDLs for the messages as depicted in discussion thread . Messaging client may save this information when the client side instances of the dBDLs are saved at offline message database . Information identifying the root instance of a dBDL may be but is not limited to a unique instance identifier of the root instance of the dBDL a hash identifier created by hashing one or more pieces of metadata in the root instance of the dBDL or a hash identifier created by hashing the entire dBDL including state information stored in metadata such as timestamps locations etc. The information identifying the root instance of a dBDL is referred to herein as a root identifier.

Messaging client compares the root identifier for message of discussion thread which is the last state of the discussion thread that was stored at both forum database and offline message database stored at offline message database with information such as a hash identifier for the server side instance of the dBDL for message stored at forum database .

If no changes have occurred to the server side instance of the dBDL for message since the connection was lost between messaging client and messaging service then the root identifier for message stored at offline message database will match the information for the server side instance of the dBDL for message stored at forum database and there is no conflict for message . According to an implementation in the absence of a conflict messaging client causes messaging service to update forum database to include blue flag in the metadata of the server side instance of the dBDL for message .

Messaging client also compares the root identifier for draft message which is draft message of discussion thread with information for the server side instance of the dBDL for draft message stored at forum database . As described in connection with message if no conflict is identified for draft message then messaging client causes messaging service to update the server side instance of the dBDL for draft message to reflect the changes depicted in draft message .

However if the root identifier for any message in discussion thread does not match information for the server side instance of the corresponding dBDL then messaging client identifies a conflict for the message.

The following is an illustration of a situation that would cause the root identifier for draft message to not match information for the server side instance of the corresponding dBDL. After making the changes to offline message database reflected in discussion thread while messaging client was not connected to messaging service and before messaging client has communicated those changes to messaging service the user authenticates with messaging service using client device . Messaging client of client device retrieves update information for discussion thread from messaging service which does not reflect the changes that the user made in discussion thread .

The user makes different changes to discussion thread which are depicted in discussion thread . Specifically the user changes the text of draft message to state I m having trouble with problems 2 and 3. as depicted in draft message . The user saves the draft while online which updates the server side instance of the dBDL of draft message stored at forum database to be draft message . The user also adds a yellow flag to the metadata of message and does not add a blue flag to the metadata of message as depicted in discussion thread . This new metadata is also saved in the server side instance of the dBDL for message at forum database .

Messaging client of client device connects to messaging service after the edits reflected in discussion thread are committed to forum database and attempts to synchronize the changes stored at offline message database depicted in discussion thread with the data for the discussion thread stored at forum database depicted in discussion thread . However the root client side instances of the dBDLs for draft message and for message will not match the server side instances of those dBDLs since discussion thread which is the root of discussion thread is different than discussion thread that is committed to forum database .

At step in response to determining that a conflict has occurred because the information for the server side instance of the dBDL does not match the information for the root client side instance of the dBDL a particular resolution action of a plurality of available resolution actions is selected based at least in part on state information. The state information that may be used to select the appropriate resolution action is described in greater detail hereafter.

For example messaging client determines that the root identifier for one or more messages in discussion thread stored at offline message database does not match information for the server side instances of the corresponding dBDLs stored at forum database e.g. which stores discussion thread indicating a conflict for the at least one message. There are various resolution actions that messaging client can select to resolve the conflict including at least changing the server side instance of the dBDL to match the modified client side instance of the dBDL and leaving the server side instance of the dBDL unchanged.

According to an embodiment messaging client selects a resolution action based at least in part on state information associated with a user that made the changes. State information associated with a user may include a geographic location of the user when the user made the changes to the modified client side instance of the dBDL a user type associated with the user etc.

For example messaging client may track where a user is when the user makes changes to client side dBDLs. Based on this information the system may select a location specific resolution action. For example if the conflict is between an offline change the user made in location X and another offline change the user made in location Y the change made in location X may win.

As another example the messaging client may determine that the user is located at a particular geographic location a certain percentage of instances where offline changes are made. This determination may be based on data that messaging client has gathered or may be based on information available in a profile for the user that is accessible by messaging client . Any and all information attributed to a user or a client device may be available in such a user profile or based on data that messaging client has gathered.

According to an embodiment if the certain percentage of instances where the user makes modifications to dBDLs from a particular geographic location is above a particular threshold and the user made the change to the modified client side instance of the dBDL for which messaging client identified the conflict the conflicted dBDL at a geographic location that is different from the particular geographic location then messaging client selects the resolution action of changing the server side instance of the conflicted dBDL to match the modified client side instance of the dBDL. The particular geographic location at which a user made the change to the modified client side instance of the dBDL may be recorded by messaging client e.g. using Global Positioning System GPS technology available at client device using the IP address assigned to client device etc.

As a further example messaging client selects the resolution action based at least in part on a user type for the user that made the changes to at least one instance of the conflicted dBDL. For example if the user that made changes to the modified client side instance of the dBDL is associated with a student user type messaging client may determine that the resolution action to take is to leave the server side instance of the dBDL unchanged. Such a policy is simple and in the case of the online forum being dedicated to education would result in simple logic for the majority of conflicts occurring in the example online forum.

As another example if the user that made changes to the modified client side instance of the dBDL is associated with a faculty user type messaging client may determine that the resolution action to take is to allow the faculty user to choose one of a changing the server side instance of the conflicted dBDL to match the modified client side instance of the dBDL b leaving the server side instance of the dBDL unchanged or c manually editing the server side instance of the dBDL to include features of the modified client side instance of the dBDL. In connection with allowing the faculty user to choose a resolution action messaging client may provide such a user with the server side instance of the dBDL and the modified client side instance of the dBDL in a side by side comparison at GUI . Further messaging client may provide a faculty user with a redline representation of the dBDL at GUI showing the differences between the server side instance of the dBDL and the modified client side instance of the dBDL.

According to an embodiment the difference in treatment of a student type user and a faculty type user is based on a hierarchy of the user types. The student user type is at a different level in a hierarchy of user types than the faculty user type and therefore conflict resolution actions for the users of the different types are different. In this embodiment a user type may be at the same level in the hierarchy of user types as another user type. For example a teacher s aide user type may be at the same level in the hierarchy as the faculty user type and therefore conflict resolution actions for teacher s aide type users are the same as conflict resolution actions taken for faculty type users.

Selecting a resolution action based on a hierarchy of user types may occur when the most recent changes to the server side instance of a conflicted dBDL were performed by a different user than the user that performed the changes to the modified client side instance of the dBDL. To illustrate in the context of a particular student type user changed the metadata for message in discussion thread which is stored in a modified client side instance of the dBDL for message . Also a particular faculty type user changed the metadata for message in discussion thread which is stored in a server side instance of the dBDL for message . Messaging client compares the location of the student user type within the user type hierarchy with the location of a faculty user type within the user type hierarchy. Because a faculty user type is higher in the example user type hierarchy than a student user type messaging client selects the resolution action to be automatically leaving the server side instance of the dBDL for message unchanged effectively throwing out the conflicting changes to message performed by the student type user.

In another example the faculty type user has performed edits to a modified client side instance of the conflicted dBDL and a student type user performs edits to the server side instance of the dBDL. According to an embodiment because the faculty user type is at a higher location in the user hierarchy than the student user type messaging client selects the resolution action to be automatically changing the server side instance of the dBDL to match the modified client side instance of the dBDL.

According to this embodiment if the user type of the user that edits the modified client side instance of the conflicted dBDL and the user type of the user that edits the server side instance of the dBDL are at the same level in the hierarchy of user types then the users are treated as if there were only one user that performed the changes as described above.

Messaging client may also select a resolution action based at least in part on state information associated with an instance of the conflicted dBDL. State information associated with an instance of the dBDL may include any information in the text and or metadata for the message such as a timestamp recording the time that an instance of the dBDL was last changed the text of the message of the document a subject for the message a flag associated with the message a status of the server side instance of the dBDL e.g. draft posted etc.

For example messaging client selects the resolution action of leaving the server side instance of the conflicted dBDL unchanged if the timestamp recording the time that the modified client side instance of the dBDL was last changed is within a particular range e.g. from 2 00 am 5 00 am . The particular range for the modification timestamp may be based on usage records for the user including when the user tends to create or edit messages. To illustrate if the percentage of instances that the user drafts messages between 7 00 AM and 11 00 PM is over a particular threshold and the user last saved the modified client side instance between 7 00 AM and 11 00 PM then messaging client selects the resolution action of changing the server side instance of the dBDL to match the modified client side instance of the dBDL. However in the same situation except that the user last saved the modified client side instance between 11 00 PM and 7 00 AM messaging client selects the resolution action of leaving the server side instance of the dBDL unchanged.

As another example messaging client selects the resolution action of automatically changing the server side instance of the conflicted dBDL to match the modified client side instance of the dBDL if the modified client side instance of the dBDL has a particular flag associated therewith e.g. urgent important substantive etc. .

As yet another example if the status of the server side instance of the conflicted dBDL is draft messaging client may select the resolution action of saving the modified client side instance of the dBDL as a new dBDL in both offline message database and forum database . In this embodiment the user sees both drafts in the associated discussion thread after messaging client performs the conflict resolution.

As yet another example if the status of the server side instance of the conflicted dBDL is posted messaging client may automatically modify the metadata in the server side instance of the conflicted dBDL to include the metadata of the modified client side instance of the dBDL. Thus no metadata changes are lost even if the root client side instance of the dBDL does not match the server side instance of the dBDL. According to an embodiment messaging client first determines whether the metadata in the server side instance of the dBDL and the metadata in the modified client side instance of the dBDL are mutually exclusive before modifying the metadata of the server side instance of the dBDL to include metadata from the modified client side instance of the dBDL.

Messaging client may also select a resolution action based at least in part on state information associated with the client device on which changes to the conflicted dBDL were made. State information associated with a client device may include one or more of a type of the client device a geographic location associated with the client device an identifier of the client device an IP and or MAC address of the client device information about a network with which the client device is connected etc.

For example messaging client identifies a location associated with client device on which the changes to the conflicted dBDL were made on the client side . In this example the latest changes to the server side instance of the dBDL were performed on a different client device. If the location associated with client device is in a list of preferred locations for client devices and a location associated with the different client device is not on the list then messaging client selects the resolution action to be replacing the server side instance of the dBDL with the modified client side instance of the dBDL. A list of preferred locations for client devices may include one or more zip codes e.g. associated with a university campus that hosts the example online forum one or more IP addresses and or MAC addresses or other information identifying the location of a client device.

As a further example messaging client selects the resolution action based at least in part on a device type for the device on which a user made the changes to at least one instance of the conflicted dBDL. For example if the device on which a user made changes to the modified client side instance of the dBDL is associated with a tablet device type messaging client may determine that the resolution action to take is to leave the server side instance of the dBDL unchanged.

As another example messaging client selects the resolution action based at least in part on information for a network to which the device from which a user made the changes to at least one instance of the conflicted dBDL was connected. To illustrate if the network used to make changes to the modified client side instance of the dBDL was a 3G network messaging client may determine that the resolution action to take is to leave the server side instance of the dBDL unchanged. However if the network used to make changes to the modified client side instance of the dBDL was a WIFI network messaging client may determine that the resolution action to take is to change the server side instance of the dBDL to match the modified client side instance of the dBDL.

Further messaging client may provide information about a network on which the change to an instance of the dBDL was made in connection with giving the user an option of what resolution action to take. According to embodiments of the invention any of the information described herein on which messaging client bases decisions of resolution actions to take may be presented to a user to allow the user to make a more informed decision of what resolution action to take.

As yet another example if the device on which a user made changes to the modified client side instance of the dBDL is associated with a desktop device type messaging client may determine that the resolution action to take is to allow the user of the desktop device to choose one of a changing the server side instance of the dBDL for which a conflict is identified to match the modified client side instance of the dBDL b leaving the server side instance of the dBDL unchanged or c manually editing the server side instance of the dBDL to include features of the modified client side instance of the dBDL. In connection with allowing the user of the desktop device to choose a resolution action messaging client may provide the user with the server side instance of the dBDL and the modified client side instance of the dBDL in a side by side comparison at GUI . Further messaging client may provide the user with a redline representation of the dBDL at GUI showing the differences between the server side instance of the dBDL and the modified client side instance of the dBDL.

According to an embodiment messaging client may track usage data indicating from what type of device a user performs edits to dBDLs. Messaging client may select resolution actions for the type of client device on which the user performs edits that cause the conflict based at least in part on the usage data.

According to an embodiment the difference in treatment of a tablet type device and a desktop type device is based on a hierarchy of the device types. The tablet device type is at a different level in a hierarchy of device types than the desktop device type and therefore conflict resolution actions for devices of the different types are different. In this embodiment a device type may be at the same level in the hierarchy of device types as another device type. For example a laptop device type may be at the same level in the hierarchy as the desktop device type and therefore conflict resolution actions taken for laptop type devices are the same as conflict resolution actions taken for desktop type devices.

Selecting a resolution action based on a hierarchy of device types may occur when the most recent changes to the server side instance of the conflicted dBDL were performed on a different device than the device on which a user made changes to the modified client side instance of the dBDL. To illustrate in the context of a user changed the metadata for message in discussion thread which is stored in a modified client side instance of the dBDL for message on a particular tablet type device. Also a user changed the metadata for message in discussion thread which is stored in a server side instance of the dBDL for message on a particular desktop type device. Messaging client compares the location of the tablet device type within the device type hierarchy with the location of a desktop device type within the device type hierarchy. Because a desktop device type is higher in the example device type hierarchy than a tablet device type messaging client selects the resolution action to be automatically leaving the server side instance of the dBDL for message unchanged.

In another example a user of a desktop type device has performed edits to a modified client side instance of the conflicted dBDL and a user of a tablet type device has performed the latest edits to the server side instance of the dBDL. According to an embodiment because the desktop device type is at a higher location in the device hierarchy than the tablet device type messaging client selects the resolution action to be automatically changing the server side instance of the dBDL to match the modified client side instance of the dBDL.

According to this embodiment if the device type of the client device on which a user edits the modified client side instance of the conflicted dBDL and the device type of the client device on which a user edits the server side instance of the dBDL are at the same level in the hierarchy of device types then the devices are treated as if there were only one device on which the user performed the changes as described above.

At step the conflict is resolved by performing the particular resolution action. For example messaging client performs the particular resolution action selected at step including instructing messaging service to replace the server side instance of the conflicted dBDL with the client side instance of the dBDL instructing messaging service to leave the server side instance of the dBDL unchanged requesting information from messaging service required to create a display at GUI for the user in connection with the particular resolution action instructing messaging service to replace the server side instance of the dBDL with a modified server side instance of the dBDL etc. In connection with leaving the server side instance of the conflicted dBDL unchanged messaging client may replace the client side instance of the dBDL with the server side instance of the dBDL.

In the embodiments a dBDL may represent any kind of document that a user can change while messaging client is offline where the offline changes must be propagated online once messaging client connects to messaging service which may result in a conflict with changes that have occurred in the meantime. Thus dBDLs are not limited to messages in an online forum.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk optical disk or solid state drive is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operate in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical disks magnetic disks or solid state drives such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

