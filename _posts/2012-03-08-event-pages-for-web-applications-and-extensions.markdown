---

title: Event pages for web applications and extensions
abstract: A method and system for monitoring events related to web browser extensions includes storing a set of events for which a browser extension integrated in a web browser application registers a listener. The browser extension integrated in the web browser application is executed. Upon the occurrence of an event related to the browser extension, an invisible event page associated with the browser extension is loaded if the event is one of the set of events. Using the invisible event page, a function related to a visible object of the browser extension is executed. The invisible event page is unloaded from the browser after receiving an acknowledgement from the browser extension.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09274913&OS=09274913&RS=09274913
owner: Google Inc.
number: 09274913
owner_city: Mountain View
owner_country: US
publication_date: 20120308
---
Browsers typically enable users to interact with and experience many different types of content usually over a computer network and often in a visual or graphical manner. For example users may install one or more internet browsers on a local computing device and may thereafter utilize the internet browser to access content and or functionality provided by a remote computing device.

Current internet browsers process many events some generated by a user and some generated by the browser itself other applications or the operating system. Events can be handled by the browser or by components of the browser. Background pages may spend time idle wasting memory. Accordingly there exists a need for a page that is loaded only when needed.

An event page may include a background page that is loaded only when it needs to do something and unloaded when idle. Event pages may therefore reduce the total number of web browser extension processes running on a user s system at a given time.

According to one general aspect a method for monitoring events related to web browser extensions includes storing a set of events for which a browser extension integrated in a web browser application registers a listener. The browser extension integrated in the web browser application is executed. Upon the occurrence of an event related to the browser extension an invisible event page associated with the browser extension is loaded if the event is one of the set of events. Using the invisible event page a function related to a visible object of the browser extension is executed. The invisible event page is unloaded from the browser application after receiving an acknowledgement from the browser extension.

According to another general aspect a system for monitoring events related to web browser extensions may include a memory and a processing device operably connected to the memory and configured to execute code to store a set of events for which a browser extension integrated in a web browser application registers a listener execute the browser extension integrated in the web browser application upon the occurrence of an event related to the browser extension load an invisible event page associated with the browser extension if the event is one of the set of events using the invisible event page execute a function related to a visible object of the browser extension and unload the invisible event page after receiving an acknowledgement from the browser extension.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings and from the claims.

This document describes systems and techniques that relate to event pages for web applications or browser extensions installed in a browser application. An event page may serve as a replacement for a background page. Background pages are pages that currently spend a lot of time idle wasting memory. An event page may be thought of as a background page that is loaded only when it needs to do something and unloaded when idle. Overall this may reduce the total number of extension processes running on a user s system at a given time.

A background page as discussed herein enables a web application or browser extension to run as soon as a user logs into a computer including before the user launches a web application or browser extension in the browser application. The background page is an invisible element in a browser application where the background page includes a declared association with an installed web application or browser extension associated with the browser application or with a user account of the browser application. The terms background page and background element be used interchangeably to mean the same thing throughout this disclosure.

In some implementations the background page continues to run and execute code even when a web application browser extension and or the browser application have no visible windows. In this manner the background page is a persistent element even when the web application browser extension and or the browser application associated with the background page is closed.

In contrast to a background page an event page is an invisible web element or web page in a browser application which is loaded in the browser application when needed and unloaded when idle. An event page does not continue to run and execute code at all times. Thus an event page may save more resources than a background page. An event page may also include a declared association with an installed web application or browser extension that is associated the browser application or with a user account of the browser application.

Thus unlike a background page that continues to run and execute code even when a web application browser extension and or the browser application have no visible windows and event page may not continue to run or execute code when a web application browser extension or browser application have no visible windows. In this manner the event page is not persistent when the web application browser extension and or the browser application associated with the background page is closed. Therefore event pages may save memory.

In some implementations however the event page may persist even when the browser has no tabs or windows open such as when a background process associated with the browser application is still running. In such an implementation if an event occurs during the time that the browser has no tabs or windows open but when a background process associated with the browser application is still running the event page may still be loaded to handle the event.

An event page may otherwise perform all the same actions that a background page may perform as discussed in more detail below with respect to .

Throughout this document a web application browser application or an installed application may refer to a number of different types of applications that are installed in a browser application. Throughout this document the terms browser and browser application may be used interchangeably to mean the same thing.

In one example the application may refer to an extension application. Throughout this document the terms extension application web extension web extension application extension app and extension may be used interchangeably to refer to the same thing. An extension application may be a zipped bundle of files that adds functionality to a browser application. Extension applications may be webpages and may use all of the application programming interfaces APIs that the browser application provides to webpages. The extension application may include hypertext mark up language HTML cascading style sheets CSS JavaScript images and other types of files and web related computer languages and code.

In one exemplary implementation the background element of an extension application is an invisible element that includes the main logic or instructions related to the extension application. In this manner the background element may function as a central hub for the functionality of the extension application. The background element is associated with one or more visible elements of the extension application. Upon the launch or a triggering event such as logging into a computer or launching the browser application or launching the extension application the background element launches and begins executing the instructions contained within the background element. In this manner the extension application provides quick and fast access to content due to the fact that the background element is operating even when the visible elements of the extension are not being displayed. Upon invocation of a visible element of the extension the background element provides content and information that has been collected in the background.

In another example the application may be an installed web application. Throughout this document the terms web application and web app may be used interchangeably to refer to the same thing. A web application may be a normal website that includes extra metadata that is installed as part of a browser application. Installable web apps may use standard web technologies for server side and client side code. The extra metadata associated with the installable web application affects the web application s interaction with the browser application. The web application also may be associated with a background element that is an invisible element in the browser application that includes instructions related to one or more visible elements of the web application in the browser application. Upon the triggering of an event such as launching the browser application or opening the web application the background element may execute the instructions on its page to perform functions related to the one or more visible elements of the installed web application.

Background elements may be used to include additional functionality related to the declared association with either the web application or the extension application or other types of applications installed in the browser application. For example the background feature may be used to provide notifications to download data from a server in the background to upload data to a server to prepare the user interface to play audio and to perform computations.

In one exemplary implementation the application associated with the background element may declare its association as part of the extra metadata associated with the application. For example the extra metadata may be defined in a file which also may be referred to as a manifest or a manifest file. The background feature information may be included as part of the manifest file. In one example specific permission may be declared in the manifest file such that the user is notified of the background element s existence prior to the installation of the application in the browser application. In this manner the user is explicitly notified that an invisible background element exists and may be performing functions in the background even when no visible elements related to the installed application are being displayed. The installation of the application may be an implicit grant of permission by the user to use the background element in this manner. Should the user no longer desire to allow the background permission the user may revoke the background permission by uninstalling the application from the browser application.

In one exemplary implementation an event page may be a background webpage that is unloaded when idle. The background webpage as described above is not a visible webpage but instead is an invisible webpage that provides functionality to one or more of the visible elements related to the application. In another exemplary implement the event page may be a background window that is also an invisible window that includes instructions related to one or more of the visible elements of the application. The event page in contrast to the background page is unloaded when idle.

Computing device includes CPU I O memory and O S . O S may include kernel A. Computing device is discussed in more detail below with respect to .

Computing device may also include browser application which includes browser interface including tabs A B and C. Browser application may execute browser extension A. Tabs A B and C may execute separate processes as described in more detail below with respect to . In some implementations browser application operating on computing device may also host various APIs that are asynchronous.

Of course server and computing device may include similar elements as server and or computing device . The use of two servers and two computing devices is merely for illustration as any number and any configuration of servers computing devices and other computers may be used in system . For example an additional sync server and a digital marketplace server may be utilized in system .

A web browser e.g. browser application executed by computing device can receive code e.g. HTML code JavaScript etc. from server e.g. a remote server that hosts a website and can execute the receive code on the device for the benefit of a user of the computing device .

In various implementations the web browser may include or be associated with one or more web applications e.g. one or more of applications . In this context a web application may be configured to a single task or multiple tasks for a user. In such an implementation the web application may be configured to be executed or interpreted by the web browser. This is compared with the native applications that include machine executable code and are configured to be executed directly by a processor or via the operating system of the client device whereas a web application may be incapable of execution or display without the aid of the web browser. Thus web applications can be run inside a browser with a dedicated user interface and typically provide functionality and an experience that is more rich and interactive than a standalone website but are less cumbersome and monolithic than a desktop application. Examples of web applications include games photo editors and video players that are run inside the browser.

Web applications can be hosted applications or packaged applications. Hosted applications may include at least a portion of a web site that itself includes web pages plus some metadata that may be especially pertinent to the web application or to the user of the web application to allow the web application to perform some particular functionality for the user. Packaged applications can be thought of as web applications whose code is bundled so that the user can download all of the content of the web application for execution by the browser. A packaged web application may not need to have network access to perform its functionality for the user and rather may be executed successfully by the browser locally on the computing device without access to a network. Packaged web applications have the option of using Extension APIs allowing packaged applications to change the way the browser behaves or looks.

In various implementations the web browser may include or be configured to interact with one or more browser extensions e.g. one of extensions . In this context a browser extension may include one or more web pages packaged or grouped together as a definable whole and configured to extend the functionality to the web browser. Thus extensions also provide extra functionality to a browser but generally unlike web applications there is little or no user interface component to the functionality provided by a browser extension. Instead browser extensions extend the functionality of the browser and the websites being viewed in it. For example browser extensions can extend the functionality of the browser by adding a new button to the address bar such as an ever present currency converter. Buttons like this can also apply to the current website being viewed for example clicking the currency converter button can convert all prices on the website presented to a user into a currency chosen by the user. In another example an extension can be installed so that when a user hovers a cursor over a thumbnail image on a webpage executed by a browser a larger size version of the image is displayed until the user moves the cursor away from the image. In another example an extension may be installed to embed a mail this button next to every link in every page. Compared to web applications extensions cut across websites and web applications. Extensions may be in effect across all websites though some are site specific . Web applications may not combine with other applications in this way. Rather web applications generally run standalone like any regular website.

Browser application may also include a background page which as describe above may be an invisible element such as a webpage that is associated with multiple visible elements such as visible webpages. The visible elements in this example include tabbed webpages A B and C that are visible in browser interface of browser application . Browser application may also include an event page which as describe above may be an invisible element such as a webpage that is associated with multiple visible elements such as visible webpages and which is loaded when needed and unloaded when idle.

In the example depicted in the browser application also includes at least two extensions A and B that are installed. The first extension A may be referred to as a browser action and the second extension B may be referred to as a page action. The browser action may be associated with each of the visible tabs A B and C. The browser action is associated with the background element. The background page and the event page may each be defined by a separate an html file e.g. background.html and include JavaScript code that controls the behavior of the browser action in the windows A B and C. The background page and the event page may each include instructions that enable the pages to access APIs that the extensions A B may have been granted access to. In this manner the background page or the event page may act as a control hub that includes the logic and instructions to run the extensions A B.

Also the background page or the event page may be allowed to have direct script access to one or all of the views of a page associated with the extension that is running at any given time. The background page or the event page may be enabled to access all of the views and to communicate with them synchronously. The background page or the event page may allow past shared state for all of the views running in the background page or the event page . In this manner the background page or the event page may include cached logic. The other pages whether visible or invisible may get state information updated from the background page or the event page .

In one exemplary implementation the background page or the event page may be configured to perform as a central hub for receiving messages from content scripts or from other extensions e.g. any of extensions or other extensions associated with browser application . For example the other pages associated with extension A or B often need to communicate. Because all of an extension s pages may execute in the same process on the same thread e.g. within the same tab A as shown in the pages can make direct function calls to each other. To find pages in the extension chrome.extension methods and getViews and getBackgroundPage may be used. Once a page has a reference to other pages within the extension the first page may invoke functions on the other pages and it may manipulate their document object models DOMs .

The extensions A B may use a content script to interact with other pages. For example a content script may be a script e.g. JavaScript that executes in the context of a page that has been loaded into the browser application . Content scripts may read details of the web pages that browser application visits and the content scripts may make changes to the web pages. For example a content script may read and modify the DOM for a displayed web page. However the content script may not be able to modify the DOM of its parent extension s background page. Also a content script may exchange messages with its parent extension. For example a content script might send a message whenever it finds a Really Simple Syndication RSS feed in a browser page. Also for example a background page or an event page may send a message asking a content script to change the appearance of its browser page. In these and other examples the background page or the event page may function as a hub to receive messages from content scripts or from other extensions and to communicate the messages to an appropriate destination or to take action on the received message.

In one exemplary implementation the background page or the event page may include a cache of all messages. For instance in an email application the extension may be related to the email application where the email application includes a visible window with an inbox. The inbox may populate and display quickly because the window itself is not retrieving information from a remote server. Instead the invisible background page or the event page may pull the information from the remote server and provide the updated information directly to the visible window such that when the inbox window is selected either to open or to bring it into focus the inbox window may be populated very quickly from the background page or the event page .

In another exemplary implementation a web application such as a newspaper related application may include a background page or an event page associated with the newspaper application. The background element associated with the newspaper application may be persistent and continue to run even when the newspaper application is closed or not running. The background page may continue to gather and collect information from one or more remote servers such that when the newspaper application is made visible or brought into visible focus the newspaper application may be updated more quickly by pulling the information from the background page instead of from the remote servers. In this manner the persistent background element that runs in the background may be used to update content in the background such that when a user desires to make the content visible it is easily and more quickly made accessible.

In one exemplary implementation the browser application may run all top level pages from an installed application or extension application in the same process. In this manner only one instance of critical systems related to the application is running at a time. As discussed in more detail below with respect to each tab in the browser application may use a separate process to protect the overall browser application from bugs and glitches in a rendering engine associated with the browser application. Access may be restricted from one rendering engine process to other rendering engine processes and to the rest of the system. In this manner one process running for one application or for one extension is isolated and separate from other processes running for other applications or for other extensions.

In this example the extension A may be associated with both a background page and a popup page . The popup page may be implemented by an HTML file e.g. popup.html . Also as an example extensions may use other means and implementations to display HTML files that are part of the extension application. For example extensions also may use chrome.tabs.create or window.open to display HTML files that are in the extension. The pages e.g. HTML pages inside an extension may include complete access to each other s DOM and those pages may invoke functions on each other. The popup page may invoke functions on the background page . Similarly the background page may invoke functions on the popup page .

In this example the popup window that is made visible in the browser tab A may be considered a dumb view. The dumb view does not update itself directly from the remote servers e.g. servers . Instead when the view needs some state it requests the state from the background page . Also when the background page notices a state change the background page provides the state information to the popup window without first receiving a request. The background page is always running in contrast to an event page as discussed in more detail below with respect to .

As discussed above a background element whether it is a background page and or a background window may be declared and registered as part of an application or extension e.g. extension A in the metadata that is associated with the application or extension. Similarly an event page may be declared and registered as part of an application or extension e.g. extension A in the metadata that is associated with the application or extension.

Event page is an invisible page that may be loaded by browser application only when needed to perform actions which may reduce the total number of extension processes running on computing device at a given time. In one exemplary implementation event page may be loaded when extension A is first installed and computing device may record a set of all events that the extension A registers a listener for. The set of events may be stored in preferences file which may be stored in memory so that the set of events persists across browser restarts. The set of events may be cleared when the extension A is upgraded at which time the event page may be loaded again and the set of events may be recreated at that time.

Whenever an event in the set of events occurs the browser application may check to see which extensions have listeners e.g. using listeners file for that event. For those extensions that have listeners for that event the event page e.g. event page is loaded in browser application and the event is dispatched. In some implementations to preserve resources all event pages for a given event may be loaded in the same process.

To decide when the event page can be unloaded a counting system may be used. The browser application may keep track of the relevant count s . For example when an event page s count reaches 0 the browser application knows is safe to unload the page. In some implementations the page may not be unloaded immediately but after a delay e.g. 5 seconds 10 seconds 20 seconds etc. in case multiple events fire in quick succession.

1. An event is dispatched to the event page . The event is released when extension A responds with an acknowledgement.

2. The event page makes an API call and is waiting for its callback to return a result e.g. API call chrome.tabs.getCurrent callback . This event is released when the callback is dispatched e.g. by the browser or by a server .

3. The event page starts a resource load such as an XHR or iframe resource . For example XMLHttpRequest XHR is an API available in web browser scripting languages such as JavaScript. It may be used to implement dynamic web applications for example to send HTTP or HTTPS requests directly to a server e.g. server or and load the server response data directly back into the script. The data might be received e.g. from server or as XML text or plain text. Data from the response can be used directly to alter the DOM of the currently active document in the browser window e.g. tab A without loading a new web page document. The response data can also be evaluated by client side scripting e.g. by computing device .

5. Of course there are potentially other asynchronous events that require the event page to be notified of the event.

In some implementations it may be difficult to keep the event page alive for all cases. For example there might be some event that is difficult or impossible to wait for completion. In such an example the delay before unloaded the event page could also act as a buffer for reasonable activity to die down. This is in contrast to other ephemeral page models where the application or extension has a hard time limit to clean up before it is forcibly closed. When the browser wants to unload the extension page it may send a message to the extension process and wait for an acknowledgement. This is to ensure that all events and callbacks have run before the page is unloaded.

In some implementations the browser may remember events registered at any point not just when the extension is installed. The browser may continue to remember the event until the extension explicitly removes each listener for example using eventObject.removeListener . This supports the case of optional features that can be enabled or disabled at runtime.

This behavior means that the browser may load an event page to handle an event but the page may decide not to add a listener for that event. If that happens the event will simply be discarded e.g. with a warning message .

Some events fire very frequently during normal usage of the browser so frequently that an event page might never have idle time in which it can unload. If an extension needs to listen to these events it will may either use a persistent background page or handle the events with a declarative listener. APIs that may have chatty events include tabs cookies or history APIs. Examples of non chatty events include pageAction browserAction and omnibox e.g. search bar APIs.

One method such as chrome.extension.setTimeout timeout callback may provides an alternative to window.setTimeout to cause the event page to be loaded if it is not already. In some implementations this functionality may be included in a window.setTimeout method. In some implementations this method is not allowed to be called more than once per minute.

A common use case for persistent background pages is to keep some runtime data in global variables relevant to the current session. This method may not work for event pages because global state is cleared when browser unloads the event page. An extension can manually use localStorage document.cookie or the extension storage API to handle this use case.

3. The call to browserAction.onClicked.addListener causes the browser to remember that the extension cares about that event.

6. The browser sees that the extension cares about the browserAction.onClicked event so it loads eventpage.js in an extension process.

7. This time the call to browserAction.onClicked.addListener simply registers the javascript callback. The browser already knows that browserAction.onClicked is a registered event so it does not have to persist that again.

9. The event handler is invoked triggering an API call to tabs.create . This keeps the page alive until its callback runs.

10. The callback runs triggering another API call to tabs.update This time the call has no callback so there is nothing else keeping the page alive.

In line the code makes use of the persisted storage object. In line the enabled state might normally be a global variable if this were a persistent background page. However this event page might be unloaded at any time so it is stored in the extension storage API instead.

In line the bookmarks.onCreated listener is not created until the user clicks on the browser action well after the initial page load on extension install . The browser will remember the extension s interest in this event until it is unregistered in line . It does not matter when an event listener is called the first call may always register the event with the browser s internal list e.g. within preferences file as described above with respect to . In lines and the event listeners e.g. listeners as described above with respect to are updated to match the enabled status. Both calls may be necessary because in line the browserAction.onClicked event is being dispatched and the browser needs to be notified that the event page is interested in the bookmarks.onCreated event. Otherwise the browser may not know to notify the user. Additionally in line the page is being loaded before in preparation for dispatching the bookmarks.onCreated event. In this case the javascript callback that will handle the event may be registered.

In one example if the else clause above line were omitted the browser would think the event page is always interested in the bookmarks.onCreated event. In that example the user adds a bookmark the browser would load the event page to dispatch the event but since localStorage enabled is false the javascript callback is not set up to act as the event listener in line . The event would get dropped.

The browser extension that is integrated in the browser application is executed for example by the browser application. Upon the occurrence of an event related to the browser extension a processor e.g. CPU of the computing device may load an invisible event page e.g. event page associated with the browser extension e.g. extension A if the event is one of the set of events . Using the invisible event page a function related to a visible object of the browser extension is executed . The visible object may include a window in the browser application a pop up window in the browser application or other notification windows and visible elements associated with the browser application. The visible elements of the application may be associated with a tab in the browser application e.g. tab A shown in . The browser unloads the invisible event page after receiving an acknowledgement from the browser extension . In some implementations the acknowledgement is received after a request from within the browser application which is invisible to a user. In some implementations the browser unloads the invisible event page after a certain predefined time period e.g. 50 seconds .

In one exemplary implementation executing the instructions on the background element includes collecting information from one or more remote servers e.g. servers and shown in and updating state information associated with the invisible elements of the browser extension. In this manner information may be collected in the background by the event page and the event page may provide the updated state information to a visible webpage either upon request by the visible element or after obtaining the updated information.

In another exemplary implementation the event page may collect information from one or more remote servers upload state information associated with the browser extension and display a notification including the information from the remote servers.

Thus in contrast to background pages and rather than waste time memory event pages may serve to reduce the number of browser extension processes running on a user s system at any given time.

Computing device includes a processor memory a storage device a high speed interface connecting to memory and high speed expansion ports and a low speed interface connecting to low speed bus and storage device . Each of the components and are interconnected using various busses and may be mounted on a common motherboard or in other manners as appropriate. The processor can process instructions for execution within the computing device including instructions stored in the memory or on the storage device to display graphical information for a GUI on an external input output device such as display coupled to high speed interface . In other implementations multiple processors and or multiple buses may be used as appropriate along with multiple memories and types of memory. Also multiple computing devices may be connected with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers or a multi processor system .

The memory stores information within the computing device . In one implementation the memory is a volatile memory unit or units. In another implementation the memory is a non volatile memory unit or units. The memory may also be another form of computer readable medium such as a magnetic or optical disk.

The storage device is capable of providing mass storage for the computing device . In one implementation the storage device may be or contain a computer readable medium such as a floppy disk device a hard disk device an optical disk device or a tape device a flash memory or other similar solid state memory device or an array of devices including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory the storage device or memory on processor .

The high speed controller manages bandwidth intensive operations for the computing device while the low speed controller manages lower bandwidth intensive operations. Such allocation of functions is exemplary only. In one implementation the high speed controller is coupled to memory display e.g. through a graphics processor or accelerator and to high speed expansion ports which may accept various expansion cards not shown . In the implementation low speed controller is coupled to storage device and low speed expansion port . The low speed expansion port which may include various communication ports e.g. USB Bluetooth Ethernet wireless Ethernet may be coupled to one or more input output devices such as a keyboard a pointing device a scanner or a networking device such as a switch or router e.g. through a network adapter.

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a standard server or multiple times in a group of such servers. It may also be implemented as part of a rack server system . In addition it may be implemented in a personal computer such as a laptop computer . Alternatively components from computing device may be combined with other components in a mobile device not shown such as device . Each of such devices may contain one or more of computing device and an entire system may be made up of multiple computing devices communicating with each other.

Computing device includes a processor memory an input output device such as a display a communication interface and a transceiver among other components. The device may also be provided with a storage device such as a microdrive or other device to provide additional storage. Each of the components and are interconnected using various buses and several of the components may be mounted on a common motherboard or in other manners as appropriate.

The processor can execute instructions within the computing device including instructions stored in the memory . The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide for example for coordination of the other components of the device such as control of user interfaces applications run by device and wireless communication by device .

Processor may communicate with a user through control interface and display interface coupled to a display . The display may be for example a TFT LCD Thin Film Transistor Liquid Crystal Display or an OLED Organic Light Emitting Diode display or other appropriate display technology. The display interface may comprise appropriate circuitry for driving the display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the processor . In addition an external interface may be provided in communication with processor so as to enable near area communication of device with other devices. External interface may provide for example for wired communication in some implementations or for wireless communication in other implementations and multiple interfaces may also be used.

The memory stores information within the computing device . The memory can be implemented as one or more of a computer readable medium or media a volatile memory unit or units or a non volatile memory unit or units. Expansion memory may also be provided and connected to device through expansion interface which may include for example a SIMM Single In Line Memory Module card interface. Such expansion memory may provide extra storage space for device or may also store applications or other information for device . Specifically expansion memory may include instructions to carry out or supplement the processes described above and may include secure information also. Thus for example expansion memory may be provided as a security module for device and may be programmed with instructions that permit secure use of device . In addition secure applications may be provided via the SIMM cards along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The memory may include for example flash memory and or NVRAM memory as discussed below. In one implementation a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that when executed perform one or more methods such as those described above. The information carrier is a computer or machine readable medium such as the memory expansion memory or memory on processor that may be received for example over transceiver or external interface .

Device may communicate wirelessly through communication interface which may include digital signal processing circuitry where necessary. Communication interface may provide for communications under various modes or protocols such as GSM voice calls SMS EMS or MMS messaging CDMA TDMA PDC WCDMA CDMA2000 or GPRS among others. Such communication may occur for example through radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth WiFi or other such transceiver not shown . In addition GPS Global Positioning System receiver module may provide additional navigation and location related wireless data to device which may be used as appropriate by applications running on device .

Device may also communicate audibly using audio codec which may receive spoken information from a user and convert it to usable digital information. Audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of device . Such sound may include sound from voice telephone calls may include recorded sound e.g. voice messages music files etc. and may also include sound generated by applications operating on device .

The computing device may be implemented in a number of different forms as shown in the figure. For example it may be implemented as a cellular telephone . It may also be implemented as part of a smart phone personal digital assistant or other similar mobile device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made to the implementations described herein.

In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

