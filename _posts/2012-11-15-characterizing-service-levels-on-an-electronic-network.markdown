---

title: Characterizing service levels on an electronic network
abstract: The described implementations relate to processing of electronic data. One implementation is manifest as a system that that can include an event analysis component and one or more processing devices configured to execute the event analysis component. The event analysis component can be configured to obtain events from event logs, the events reflecting failures by one or more network devices in one or more data centers and characterize a service level of an application or a network device based on the events. For example, the event analysis component can be configured to characterize the availability of an application based on one or more network stamps of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09325748&OS=09325748&RS=09325748
owner: Microsoft Technology Licensing, LLC
number: 09325748
owner_city: Redmond
owner_country: US
publication_date: 20121115
---
Applications are often deployed in data centers where the applications execute on one or more servers. A data center generally has a network that includes a number of different network devices such as various types of routers switches etc. A failure of any individual network device can sometimes cause the application to be unavailable from outside the data center. Thus from the perspective of an end user the availability of an application is dependent not only on whether the application itself is executing properly but also on the proper functioning of intervening network devices that connect the application to the end user.

To address this issue network devices may be deployed in redundant pairs or larger groups. Redundant network devices and or links can provide some measure of protection against individual device failures or link failures because when an individual device link in a given group fails the other device will sometimes continue functioning and therefore the application may still be reachable by end users. Thus whether a particular application is reachable from outside the data center depends not only on the proper functioning of the individual network devices but also on how effective the redundant groups are at preserving connectivity when one or more devices in the redundant groups fail.

The above listed example is intended to provide a quick reference to aid the reader and is not intended to define the scope of the concepts described herein.

This document relates to processing electronic data. One implementation is manifest as a technique that can include obtaining events from one or more event logs. The events can reflect failures by one or more network devices in one or more data centers. The technique can also include filtering the events using one or more criteria to obtain a sub set of the events. The technique can also include determining one or more network stamps of an application characterizing one or more service levels of individual network devices in the one or more network stamps using the sub set of the events and characterizing a service level of the application based on the service levels of the individual network devices in the one or more network stamps.

Another implementation is manifest as one or more computer readable storage devices comprising instructions which when executed by one or more processing devices cause the one or more processing devices to perform acts. The acts can include obtaining events from one or more event logs. The events can reflect failures by one or more network devices in one or more data centers. The acts can also include filtering the events using one or more criteria to obtain a sub set of the events and characterizing one or more service levels of the network devices using the sub set of the events. The acts can also include determining one or more correlations of the service levels and identifying one or more risky devices based on the one or more correlations.

Another implementation is manifest as a system that can include an event analysis component and one or more processing devices configured to execute the event analysis component. The event analysis component can be configured to obtain events from event logs the events reflecting failures on a network by one or more network devices in one or more data centers. The event analysis component can also be configured to characterize a service level of an application or a network device based on the events and to identify one or more recommended potential network changes to change the service level of the application or the network device. The one or more recommended potential network changes can be recommended based on at least one of expected costs or expected benefits associated with the recommended potential network changes.

This discussion relates to characterizing service levels of devices or applications on an electronic network. For the purpose of this document the term service level includes concepts such as reliability availability traffic flow loss etc. For example availability relates to the fraction of time a given application device or hardware software component is functioning on average over a given period of time e.g. the uptime as measured on a time basis such as an annual basis. Reliability relates to the likelihood of failure of a given application device or hardware component e.g. the expected time until the next failure. Failure relates to instances when a given application device or component does not perform as intended.

Specific definitions of availability reliability and failure can be found in various references. Although the following definitions are not explicitly adopted herein the following definitions may provide further clarity for the terms availability reliability and failure. For example MIL STD 721C defines availability as a measure of the degree to which an item is in an operable and committable state. MIL STD 721C defines reliability as 1 the duration or probability of a failure free performance under stated conditions or 2 the probability that an item will perform its intended function without failure for a specified interval under stated conditions. Failure can be defined as the inability of an item to function within its specified limits of performance MIL STD 721B or as an event or inoperable state in which any item or part of any item does not or would not perform as previously specified MIL STD 721C .

Generally speaking the disclosed implementations may characterize the service level of an individual network device such as an access router aggregation switch etc. Additionally the disclosed implementations may characterize the service level of an application that uses one or more network devices. The service level of an application can be a function of the service level of the network devices used by the application. Moreover some of the network devices may be deployed in redundant groups of multiple devices. Thus the service level of an application can be a function of how effective the redundant groups are at ensuring that application traffic can be routed without significant impact despite failures e.g. some alternative path along alternative devices links. The term network service level describes the service level of an application independently of failures of application code and or computing devices executing the application and relates to the service level of various network devices and links upon which an application depends for connectivity. For example network service levels can be impacted by hardware failures device or link failures software failures protocol device operating system firmware etc. as well as configuration failures. The term network availability is similarly independent of application code failures and failures of computing devices executing the application.

Some of the present techniques can leverage data center event logs which may include events that are logged by various devices or applications. The events in the log can include error reports indicating failure of one or more devices in the data center. Event logs can be processed to evaluate the service levels of individual devices in the data center. In some implementations the event logs can be filtered to provide a more compact data set for evaluating service levels e.g. by filtering out duplicate events merging simultaneous events etc.

From a logical standpoint the architecture can be organized into a hierarchy that includes a core layer an L3 aggregation layer and a L2 aggregation layer . This logical organization can be based on the functional separation of Layer 2 e.g. trunking VLANs etc. and Layer 3 e.g. routing responsibilities. In only one access router and one aggregation switch are shown but examples with multiple access routers and multiple aggregation switches follow. In implementations with multiple access routers the multiple access routers can be deployed in redundancy groups to provide redundancy at the L3 aggregation layer . Likewise in implementations with multiple aggregation switches the multiple aggregation switches can be deployed in redundancy groups to provide redundancy at the L2 aggregation layer . Generally in a redundancy group the group contains multiple members and individual members can perform the switching routing functions when other member s of the redundancy group fail. Note also that illustrates core routers in a redundant configuration. While the following examples use redundant pairs of devices to explain certain inventive concepts devices can be redundantly configured in groups of 2 or more. Thus the term group as used herein encompasses both pairs of devices as well as larger groups.

Generally speaking redundancy groups can be deployed in various configurations including active standby configurations and active active configurations. In active standby configurations one or more devices are active e.g. carrying traffic and one or more other devices are on standby e.g. not carrying traffic and can be activated to take over for a failing device. In active active configurations the devices in the group are active and when a device in the group fails traffic that would have otherwise been carried by the failing device can be carried by the remaining members of the group.

ToRs also known as host switches connect the servers hosted by the racks to a remainder of the architecture via an internal data center network represented by connecting lines in . Host ports in these ToR switches are often 10 100 1000 Ethernet with the uplinks being Gigabit Ethernet or 10GE ports. The ToRs can be connected upstream to aggregation switch . These aggregation switches can serve as an aggregation point for Layer 2 traffic and typically support high speed technologies such as 10 Gigabit Ethernet to carry large amounts of traffic e.g. data .

Traffic from the aggregation switch can be forwarded to the access router . The access router can use Virtual Routing and Forwarding VRF to create a virtual Layer 3 environment for each tenant. A tenant is an application such as a service hosted on servers which use network devices for connectivity route traffic from to users or other services to from its hosted servers. Thus illustrates a single tenant application although multiple tenants can execute on individual servers of racks . In some implementations the L3 aggregation layer can aggregate traffic from up to several thousand servers and route the traffic to core routers that can connect to the rest of the architecture and network .

Some implementations especially user facing applications may use load balancers to improve the performance of hosted applications. Redundant pairs of load balancers can connect to the aggregation switch and perform mapping between static IP addresses exposed to clients through DNS and dynamic IP addresses of the servers to process user requests to application . Load balancers can support different functionalities such as network address translation secure sockets layer or transport layer security acceleration cookie management and data caching.

Firewalls can be deployed in some implementations to protect applications from unwanted traffic e.g. DoS attacks by examining packet fields at IP Internet Protocol layer transport layer and sometimes even at the application layer against a set of defined rules. Generally software based firewalls can be attractive to quickly implement new features. However hardware based firewalls are often used in data centers to provide performance critical features.

Virtual private networks can augment the data center network infrastructure by providing switching optimization and security for web and client server applications. The virtual private networks can provide secure remote access. For example the virtual private networks can implement secure sockets layer transport layer security or other techniques.

Considering note that there are several points of failure which could result in the unavailability of application . For example application could have a software failure hardware failure misconfiguration protocol error or other malfunction that causes application to stop executing properly on the servers of racks . Additionally failure of both ToRs and can result in unavailability of application as can concurrent failure of both of the redundantly configured core routers . Note also that since there is only a single aggregation switch and a single access router shown in a failure of either of these individual devices could be sufficient to prevent users from accessing application from outside data center .

For the purposes of this document the network devices on which a given application depends to carry application traffic are referred to as the network stamp of the application. Thus in the network stamp of application includes ToRs and aggregation switch access router and core routers . The following discussion will explain techniques for characterizing the service level of an application based on the network stamp of the application. In some implementations the characterization of the service level can reflect redundant groups of network devices. Detailed examples are discussed herein with respect to the L2 aggregation layer and the L3 aggregation layer . However those skilled in the art will understand that these concepts are readily extensible to other network devices or layers of the network topology e.g. core router redundancy load balancer redundancy etc. 

As a hypothetical example for purposes of exposition assume network core routers access router aggregation switch ToRs and racks and software of application all exhibit perfect reliability no failures ever. Also assume that application is not hosted elsewhere and is only available via data center . Under this idealized set of circumstances application would exhibit 100 availability and infinite reliability. Now assume that access router is replaced with a device having 90 availability instead. Because there is no redundancy at the L3 aggregation layer the availability of the application is now reduced to 90 . Note also that replacing aggregation switch instead of access router with a device having 90 availability would have a similar effect on the availability of application .

More generally to compute network availability for a given application network availability can be considered on an end to end basis for each component link or device carrying application traffic. Some implementations may assume statistical independence of failures among devices. Under such an assumption if both aggregation switch and access router have 90 availability the expected network availability of application is 0.9 0.9 0.81 or 81 . As discussed in more detail below further implementations may consider the extent to which device failures are statistically correlated.

Continuing with the hypothetical example introduced above assume network core routers aggregation switch ToRs and racks and software of application all exhibit perfect reliability and 100 availability. Further assume each individual device from access routers exhibits 90 availability and that a single access router can handle all of the application traffic in the event that the other access router fails otherwise the remaining access router will drop traffic when the traffic is redirected to the remaining access router . The following scenarios illustrate how the effectiveness of the redundancy may vary depending upon whether failures of the individual access routers are closely correlated.

In one zero redundancy hypothetical circumstance the addition of redundancy at the L3 aggregation layer provides no additional benefit relative to a single 90 available access router . Specifically consider the case where the individual devices of access routers always fail together. Under these circumstances the availability of application is still 90 since the redundant pair of access routers effectively still functions as a single point of failure.

Now consider a different perfect redundancy hypothetical circumstance where the individual redundant access routers never fail together. In this circumstance the availability of application is 100 . Hypothetically two redundant access routers with perfect redundancy i.e. never failing together could provide 100 availability with only 50 availability for each individual device. Continuing with the hypothetical example in a redundant group of 3 access routers the individual devices need only exhibit availability of the time a group of 4 devices needs availability etc.

In practice redundant devices are not likely to provide zero redundancy or perfect redundancy. Rather sometimes the individual devices in a redundant group will fail together e.g. due to a common cause such as a power outage at a location where the redundancy group is located. Other times some of the devices in the redundancy group will fail while other devices in the group continue functioning properly. For example a power supply for one device in a redundancy group may fail causing one device in the group to fail. The following discussion explores techniques for characterizing application and device service levels in view of these practical considerations.

As mentioned above with respect to one practical approach used in some implementations is to assume statistical independence of failures. Here given the assumptions above the hypothetical network availability is the probability that at least one access router is available. at least 1 access router is available 1 no access router is available 1 access router 1 isn t available access router 2 isn t available 1 1 0.9 1 0.9 1 1 0.9 2 1 0.01 0.99

Thus using redundancy higher system availability can be achieved even though the individual components of the system have lower availability of 0.9 each. More generally the equation at least 1 access router available 1 1 access router failing of access routers can be used to generalize to different numbers of access routers. The equation can be generalized in a straightforward manner to other device types links numbers of data centers as well.

For example the previous examples illustrate the notion of intra data center redundancy e.g. redundancy of devices or links within a given data center. Some implementations may consider service levels of inter data center redundancy as well e.g. circumstances where applications are hosted at multiple data centers. Inter data center redundancy can be considered when evaluating the service level of an application in a manner similar to that set forth above. Thus for example the expected availability of an application hosted at two data centers with availability of 90 each is 99 assuming statistical independence of failures by the two data centers and that each data center is individually capable of carrying the necessary application traffic.

Note that in the example of each aggregation switch is connected to both access routers from the redundant pair. Thus as long as at least one access router at the L3 aggregation layer and one aggregation switch at the L2 aggregation layer is functioning traffic can pass between ToRs and and core routers . This change to the network stamp of application can have different effects on the availability of application as discussed more fully below.

For example consider another hypothetical scenario where network core routers ToRs and racks and software of application continue to exhibit perfect reliability and 100 availability. Furthermore assume that collectively the redundant group of access routers at L3 aggregation layer provides perfect redundancy at least one of the two devices in the pair is always functioning properly and can handle the application traffic should the other device fail. In this hypothetical the only point of failure is at the pair of aggregation switches in L2 aggregation layer .

The zero redundancy hypothetical mentioned above with respect to the introduction of redundancy at the L3 aggregation layer also applies to the redundant L2 aggregation layer shown in . That is if the individual aggregation switches in the redundant pair always fail together there is no benefit to having multiple aggregation switches. Likewise the perfect redundancy hypothetical also applies e.g. if the individual aggregation switches never fail together and can handle each other s application traffic the availability of application is 100 .

Moreover note also that failures may occur at multiple layers and whether these failures tend to co occur can affect the availability of application . Continuing with the hypothetical assume that both the redundant pair of access routers and the redundant pair of aggregation switches exhibit 90 availability e.g. 10 downtime. In other words both access routers in the redundant pair are down 1 out of every 10 hours on average and both aggregation switches in the redundant pair are down 1 out of every 10 hours. Note that in a best case hypothetical scenario the failures of the redundant pairs at the L2 and L3 layers always occur together. Thus the availability of application is still 90 because the failures always co occur. In a worst case scenario the failure of the L2 layer may never co occur with the L3 layer. In this case the availability of application is 80 i.e. for every 10 hours of operation one hour is lost to failure of the redundant aggregation switches at L2 and another is lost to the failure of the redundant access routers at L3.

For similar reasons as already discussed neither the best case scenario nor worst case scenario is likely. Rather sometimes the redundant pair of access routers will fail at the same time as the redundant pair of aggregation switches and other times both devices in one pair will fail whereas at least one device in the other pair will continue functioning. Assuming statistical independence the expected availability is 0.9 0.9 or 0.81 81 . Since failures may or may not be statistically independent some implementations may consider the extent to which failures at one layer may be correlated to failures at other layers when characterizing the service level of application .

Network can include various wired and or wireless networks and combinations thereof. For example network can include the public Internet as well as various private networks or portions thereof that connect any of the devices data centers shown in . For the purposes of the following discussion it is generally sufficient that network provides connectivity between devices or data centers that share information.

Each data center can be configured as discussed above with respect to any of or in other suitable configurations. Client device can interact with application by communicating over network with either data center or data center . Application interface can include logic for communicating with application e.g. formatting functionality display functionality etc. For example client device can be employed by an end user that wishes to use various features made available by application .

Server operations center can generally include one or more server devices configured to monitor the individual data centers for network problems. For example monitoring system can execute on the server devices to monitor data centers and . In some implementations network operators e.g. network engineers at server operations center may attempt to resolve issues on either data center and can track the issues using support tickets diaries or other techniques.

Event analysis component of analysis device can be configured to analyze various events in one or more data centers e.g. to characterize the service level of various applications located at data center or both. The event analysis component can also be configured to characterize the service level of one or more network devices at one or both data centers. Generally speaking the event analysis component can be configured to analyze various events as well as support tickets and other data to characterize the service levels of applications and or devices.

Note that the various devices shown in system are illustrated with respect to logical roles that can be performed by the devices in operation of system . However the geographical locations of the various devices are not necessarily reflected by system . For example data centers and or may be collocated with server operations center and or analysis device . As another example the event analysis component and or monitoring system can be implemented on one or more devices inside an individual data center e.g. on one or more of server racks .

Furthermore note that illustrates server operations center as multiple server devices whereas analysis device and client device are illustrated as individual computing devices. This reflects one particular implementation and other implementations may provide characterization functionality and or client functionality as discussed herein via multiple devices. Likewise server operations center and or data center functionality as discussed herein may be performed by individual devices.

In addition functionality described herein with respect to a particular device or devices can be distributed across multiple devices or combined on a single device. For example monitoring system and event analysis component can be collocated at a server operations center on a single device or multiple devices. As another example the event analysis component and or monitoring can be employed on a device at one or both data centers of system .

Further note that in practice there may be additional instances of each computing device mentioned herein e.g. additional analysis devices server operations centers client devices and data centers. As discussed in more detail below each of the computing device s shown in can include one or more processing devices such as computer processors executing instructions stored on one or more computer readable storage media such as volatile or non volatile memories optical disks hard drives flash drives etc.

The monitoring system on server operations center can generally serve to obtain various data relating to the operation of data centers and . The obtained data can be provided to event analysis component for further processing as discussed in more detail below. For example the data obtained by the monitoring system can include events trouble tickets maintenance data and traffic data.

With respect to events the monitoring system can accept event log streams e.g. from syslog and can perform functions such as reformatting and filtering event data based on rules and routing messages to any installed rule engines or archival log files. For example the event logs can be obtained from and include events generated by network devices such as core routers access routers aggregation switches and or ToRs as well as various other network devices firewalls load balancers etc. . The events in the event logs can contain information about what type of network component experienced an event the event type the other end point of this component e.g. the one hop directly connected neighbor and a short machine generated description of the event.

The monitoring system on server operations center can also obtain trouble tickets or data related to trouble tickets. For example network operators may troubleshoot network faults through problem tracking systems or ticketing systems that coordinate among network operators working on the problem. Some troubleshooting systems can be built around a Request for Comments memo e.g. RFC 1297 containing specifications for trouble ticket systems for network operations centers NOCs such as server operations center . In such a case a possibly unique identifier herein referred to as NOC TicketID is assigned to each failure event. These tickets contain structured information about when and how an event was discovered and diaries of steps taken by the network operators in troubleshooting and mitigating the problem.

The monitoring system on server operations center can also obtain maintenance data. For example network operators can use a maintenance tracking and revision control system to track activities that can change the network such as device provisioning configuration changes and or software upgrades throughout the system . The maintenance tracking and revision control system can be features of the monitoring system or a separate system. Before debugging an outage a network operator can check the maintenance tracking system for on going and planned maintenance. The network operator can use the revision control system to detect any recent changes to the device configuration files. Maintenance data obtained from the maintenance tracking and revision control system can reflect the device provisioning configuration changes and or software upgrades.

The monitoring system on server operations center can also obtain traffic data. For example traffic carried on network interfaces links can be logged using Simple Network Management Protocol SNMP polling that averages traffic seen every five minutes for example. Other sources of traffic data can be obtained from sampling based approaches such as sFlow. Traffic monitoring systems can use the MIB format to store the data that includes fields such as the interface type token ring Ethernet etc. the other end of the interface the interface status up down timestamp and or the number of bytes sent or received by the interface among others.

Using the monitoring system as described above the server operations center may allow network operators to monitor status of the data centers and for various failures e.g. a failed router improper device configuration slow response times etc. Individual events obtained by the monitoring system can be processed to characterize service levels of applications and or devices as discussed in more detail below.

Event analysis component can utilize event logs obtained by the monitoring system to characterize application and or device service levels. For instance additionally or alternatively to the event logs obtained from the monitoring system the event analysis component can utilize data collected by network operators. For example network operators can detect faults from network devices and analyze root causes by using monitoring alarms such as syslog and SNMP traps and by monitoring device status via ping and SNMP polling. The event analysis component can obtain other device related data to use in analyzing service levels of both applications and devices including trouble tickets maintenance data and traffic data.

Event analysis component can correlate the above mentioned data with failure events in the event logs to extract failures impacting network traffic and to reverse engineer the topology information using link level connectivity as the topology changes from time to time. As used herein a failure can be thought of as an event that causes a device or a link to be unavailable to perform its intended task e.g. carry traffic . Specifically a link failure can be thought of as occurring when the connection between two devices is down. Similarly a device failure can be thought of as occurring when the device is not functioning for routing forwarding traffic.

Some implementations of event analysis component can filter several types of spurious network events in event logs such as inaccurate event logs duplicate events caused by multiple devices reporting the same event single events being recorded as multiple events and shadow reports e.g. chatty devices . In regard to inaccurate event logs syslog messages can be spurious with devices sending multiple notifications that are logged as failure events even though a device is operational. In regards to multiple reporting devices two or more devices e.g. neighbors may send notifications for the same event that are logged as separate events leading to redundant event logs e.g. multiple redundant error reports . The error reports can be thought of as redundant if subsequent error reports relate to an error that was reported by an earlier error report. Regarding a single event being recorded as multiple events a flapping device can generate multiple down and up messages which each get logged as different events.

Shadow events can be thought of as events being triggered due to devices which are being scheduled for replacement or have been detected as faulty by operators but which are awaiting repairs. In some cases this effect can be severe with some devices e.g. chatty or shadow devices sending more than a thousand device down notifications over a few hours because the notification system did not suppress them during the troubleshooting window. Techniques that the event analysis component can employ to filter several types of spurious events from network event logs are described in more detail below. The filtered network event logs can be used by the event analysis component to characterize application and or device service levels as discussed herein.

In this case analysis device can include an application layer an operating system layer and a hardware layer . The event analysis component can be manifest as a program or application of the application layer among other configurations. In this example the event analysis component can include a filter module a characterization module and an output module . The event analysis component can process data such as event logs provided over network by monitoring system . Alternatively monitoring system can populate a database with event data and the event analysis component can process the event data in the database.

The hardware layer can include a processor storage memory e.g. one or more computer readable storage media a display device and or various other elements. For instance the other elements can include input output devices optical disc readers USB ports etc.

Processor can execute computer readable instructions to provide a functionality such as an event analysis component functionality. Data and or computer readable instructions can be stored on storage memory and or received from another source such as optical storage device . The storage memory can include any one or more of volatile or non volatile memory devices hard drive storage devices flash storage devices e.g. memory sticks or memory cards and or optical storage devices e.g. CDs DVDs etc. among others.

Alternatively to the illustrated configuration of analysis device the computer can employ a system on a chip SOC type design. In such a case functionality provided by the computer can be integrated on a single SOC or multiple coupled SOCs. For instance the computer can include shared resources and dedicated resources. An interface s can facilitate communication between the shared resources and the dedicated resources. As the name implies dedicated resources can be thought of as including individual portions that are dedicated to achieving specific functionalities. Shared resources can be storage processing units etc. that can be used by multiple functionalities.

Generally any of the functions described herein can be implemented using software firmware hardware e.g. fixed logic circuitry manual processing or a combination of these implementations. The term engine tool component or module as used herein generally represent software firmware hardware whole devices or networks or a combination thereof. In the case of a software implementation for instance these may represent program code that performs specified tasks when executed on a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable storage memory devices such as computer readable storage media. The features and techniques of the component are platform independent meaning that they may be implemented on a variety of commercial computing platforms having a variety of processing configurations.

As used herein the term computer readable media and computer readable medium can include signals and hardware. In contrast the terms computer readable storage media and computer readable storage medium exclude pure signals. Computer readable storage media can include computer readable storage devices . Examples of computer readable storage devices include volatile storage media such as RAM and non volatile storage media such as hard drives optical discs and flash memory among others.

In some implementations the filter module can be configured to perform functionality relating to separating duplicate events from a remainder of events in one or more event logs. The filtered events can result in a sub set of germane events that are used as a dataset for characterizing device or application service levels. The characterization module can be configured to perform functionality relating to characterizing current or future service levels of individual network devices and or applications at data centers and or . For example the characterization module can be configured to characterize the service levels using individual events from the filtered sub set of events as well as ticket data maintenance data and or traffic data. The characterization module can infer relationships between the ticket data maintenance data and or traffic data and the events based on time of occurrence date of occurrence duration of occurrence physical location type property configuration setup and or functional role of the involved devices. The output module can be configured to output results of the characterizing. The output results can include values reflecting the characterized service levels e.g. a percentage availability of a device or application . The output results can also identify various devices or device groups that tend to fail together e.g. risky devices or device groups.

In the example of the output module can generate GUI screenshot by obtaining data from monitoring system and or database . As mentioned database can be populated by the monitoring system and can include events from one or more data centers. Events obtained from or relating to one or more data centers can be thought of as a dataset that is evaluated by the event analysis component . The event analysis component can separate individual events relating to network devices and links connecting these devices from those of other data center devices. The event analysis component can also determine the network stamp of an application e.g. on a data center by data center basis and characterize the service level of the application based on the service levels of individual devices in the network stamp.

The GUI screenshot shown in can be generated by the event analysis component from the dataset. GUI screenshot illustrates that at data center application has approximately 98 availability. At data center application has approximately 96 availability. The event analysis component can infer these percentages using the individual network stamps of application at the individual data centers as discussed in more detail herein including the various hypothetical examples. In other words illustrates a configuration where the network stamp of application at data center has 98 availability whereas the network stamp of application at data center has 96 availability.

To summarize several features that can be offered by the event analysis component are described above and below. These features can include characterizing device and or application service levels. Another feature discussed in more detail below can involve identifying risky redundancy groups e.g. redundancy groups of one or more devices that tend to fail together instead of individually. A further feature can involve evaluating the effectiveness of redundancy when a redundancy group has multiple devices and also evaluating the effectiveness of redundantly hosting an application at multiple data centers. These features are described in more detail below.

As mentioned above some implementations employ filtering of events from event logs to obtain a dataset that can be used to characterize service levels of applications and or devices. shows a filtering method for separating a sub set of germane events from less informative events from a set to obtain a sub set. This method can utilize events from various sources. In this case the events can be manifest as Syslog SNMP events and can be filtered using tickets from a NOC ticket database . In this implementation obtained events that do not have an associated NOC ticket can be removed by a no ticket filter at . This filter can be based upon the assumption that if an event was not dealt with by an operator then it is likely that the event did not cause an impact. Thus filter can filter events based on associated ticket criteria relating to whether the events have associated NOC tickets.

The method can employ a timing filter that filters events using timing related criteria. The timing filter can be used to fix various timing inconsistencies. In one implementation the timing filter can first group events with the same start and end time originating on the same interface into a single event. This process can remove duplicate events. Next the timing filter can pick the earliest start and end times of multiple events that originated within a predefined time window on the same interface. For example any events that happened within a predefined time of 60 seconds on the same interface can be grouped into a single event e.g. characterized as a single event . This process can reduce or avoid any problems due to clock synchronization and log buffering. The timing filter can also be used to group two events using interface criteria e.g. by identifying events that originate on the same interface. For example events that have the same start time but different end times can be grouped into a single event that is assigned the earlier of the end times. The earliest end times can be utilized since events may not be marked as cleared long after their resolution.

The technique can employ a planned maintenance filter that applies planned maintenance criteria. Events caused by planned maintenance can have less value in understanding device behavior than unplanned events e.g. unexpected outages . Thus the planned maintenance filter can remove events that are caused by planned maintenance activities.

The technique can employ a shadow device filter . The shadow device filter can apply shadow device criteria to filter events logged by devices that are scheduled for replacement or that have been detected as faulty by operators but are awaiting repairs. The shadow device filter can identify these shadow devices by arranging the devices in the descending order of their number of failures. In one implementation for a top percentage of the devices in this list all events are merged that have the same NOC TicketID field. This constitutes a merged event reflecting individual events with the same ticket ID that are likely to have the same symptoms. In one case the top percentage is defined as the top five percent but other values can be employed in other implementations.

The technique can employ an impact filter that applies impact criteria to filter events. An event can be defined as having an impact when the event affects application reliability e.g. throughput loss number of failed connections or increased latency. In implementations without access to application level logs failure impact can be estimated by leveraging network traffic data and computing the ratio of the median traffic on a failed device link during a failure and its value in the recent past. For example the value of the recent past can be set as the preceding eight hour or other duration time correlation window . Other implementations can use other values. A failure has impact if this ratio is less than one or another e.g. lower threshold on the ratio can be used. The above acts can collectively allow method to identify the failures with impact at . Note that other filters can alternatively or additionally be utilized.

As mentioned above some implementations may characterize the service level of an application hosted at one or more data centers. shows a method that can be applied in this context. For example method can be performed by event analysis component to characterize the service level of an application.

At block the method can obtain a set of events logged at one or more data centers. In one implementation the set of events can be obtained from a data center monitoring system or from a database that stores the set of events on behalf of the data center monitoring system. The events can reflect failures by one or more network devices in the one or more data centers.

At block the method can filter the events using one or more criteria. For example the method can separate spurious and duplicate events to obtain a filtered sub set of the events using method . In one implementation the separating can be accomplished by applying a pipeline of event filters to the set of events to generate the filtered sub set of the events. In some cases the pipeline can be created by selecting individual filters from a set of available event filters. The individual event filters may each apply different criteria to filter different events to create the filtered sub set.

At block the method can determine one or more network stamps of an application. For example each data center hosting an application can have an individual network stamp. In some cases block can include processing the filtered sub set of events to determine the network stamp of the application in the data centers.

At block the method can characterize the service level of one or more network devices in the network stamps. For example the method can characterize the availability reliability and or traffic loss of an individual access router aggregation switch etc. In addition the method can characterize the service levels of the one or more network devices by characterizing the service level of a redundant group that includes multiple network devices.

At block the service level of the application can be characterized using the service levels of the network devices e.g. the service levels of individual devices and or redundant groups of devices in the network stamp s where the application is hosted. In implementations where the application is hosted on a single data center the service level can be the availability of the network stamp at the single data center. In implementations where the application is hosted on multiple data centers the service level can be a function of availability of the application on each of the multiple data centers. Some implementations may assume statistical independence of the availability of the application on different data centers.

At block the method can identify potential network changes relating to the application or network devices. For example the method can identify a redundant configuration for the application based on one or more criteria e.g. hosting the application at multiple data centers adding a new redundancy group to a given layer of a network stamp etc. As another example of a network change the method can identify a suggested change to the ToR connectivity of one or more aggregation switches. In some implementations the suggested change can be identified to meet a constraint such as a service level agreement SLA defined metric relating to reliability availability traffic loss etc.

Note also that cost can be used as criteria for identifying potential network changes. For example cost in terms of currency time resources etc. can be determined for each potential change. For example hosting an application at a new data center may cost approximately 10 000 000 and be expected to increase network availability of the application from 90 to 99.9 . Merely adding a redundant device to a data center where the device is already hosted may cost approximately 10 000 and be expected to increase network availability of the application from 90 to 99 . Depending on the specific requirements for application availability either approach may be appropriate.

Further implementations may recommend one or more of the identified potential network changes using a cost benefit analysis. For example some implementations may recommend the least expensive potential network change that is expected to meet a given constraint such as an SLA requirement while excluding other potential network changes that are not expected to meet the constraint. Other implementations may rank various potential network changes on a cost per unit of availability or reliability expected to be obtained by making the respective network changes. A top ranking subset can be recommended while discarding other less cost efficient possible changes. Additionally some implementations may fix a cost budget and select one or more recommended changes that meet the cost budget. The recommended potential changes can include those changes that meet the cost budget and tend to maximize the expected service level. Other potential changes that do not meet the budget can be excluded from the recommended potential changes.

Note that some implementations may focus the service level of the application from a network stamp perspective. In other words such implementations may disregard the consequences of application code failure and or failure of servers or racks hosting the application and instead focus on the service levels provided by the network devices used by the application to communicate with other devices outside the data center. However further implementations may characterize the service level of the application based on both the service level of the network stamp s of the application as well as the service levels of the application code and or hosting servers racks. The following discussion focuses on characterizing application service levels from a network stamp perspective e.g. network service levels. 

In some implementations the network stamp of an application can be determined by considering the connections between the various devices in an individual data center. Considering the example of which shows an architecture where data center is configured with a second application . Note that application is shown as hosted on two server racks and connected by a single ToR through pairs of redundant aggregations switches access routers and core routers . Application is shown as hosted in a similar configuration but with a single aggregation switch and a single access router also note that application is hosted on racks and and connected via ToR .

Note also that each application can be viewed as part of a common tree of devices that includes all of the devices in the data center. The individual application network stamps can include devices that are in different subtrees. In application has a subtree rooted at access routers that is distinct from a second subtree rooted at access router for application . The core routers are typically shared across multiple hosted applications and therefore in some implementations the core routers are not considered part of the application specific network stamp.

In some implementations a network operator can manually evaluate the physical and or logical connections of the data center configuration to determine the network stamp of each application. For example the network operator could identify ToR aggregation switch pair access router pair and core router pair as the network stamp of application . Likewise the network operator could identify ToR aggregation switch access router and core routers as the network stamp of application .

In further implementations application traffic can be leveraged to determine the network stamp of the application. For example event analysis component can evaluate traffic flows through the data center to determine through which devices application traffic flows e.g. inbound or outbound network traffic . The event analysis component can also extract redundant device groups from the traffic by identifying individual devices that have common parents or children. For example the event analysis component can infer from network traffic that individual aggregation switches of aggregation switch pair are redundantly paired to ToR because traffic to from ToR passes through both aggregation switches in the pair. As another example since traffic from both aggregation switches passes through both access routers the event analysis component can infer that the access routers are redundantly paired with one another. The event analysis component can also infer that since the network traffic from ToR goes through single aggregation switch and single access router there is no redundancy for single aggregation switch or single access router . Note that failure of a non redundant device can cause the entire subtree rooted at the failed device to become unavailable due to loss of connectivity.

Some implementations may infer certain naming conventions that convey whether devices are redundantly paired. For example access router pair may include an individual access router named AR1 A and another individual access router named AR1 B. In contrast individual access router may be simply named AR2. In this instance the naming convention suffix  A and  B imply two redundant devices that have the common prefix AR1. Further implementations may infer redundancy by considering both traffic flows and redundancy.

Some implementations may also consider the connectivity of individual ToRs. For example the service level provided by a given aggregation switch or access router may vary depending on how many ToR switches are connected indirectly or directly to the aggregation switch or router. Again network operators can manually examine physical and or logical connections in the data center to determine the number of ToRs that are connected to a given aggregation switch and can also examine the number of ToRs connected to one or more aggregation switches in the subtree rooted at an individual access router. Some implementations may also infer the ToR connectivity or ToR count for aggregation switches and or access routers by analyzing traffic data in a manner similar to that described above for identifying redundancy groups.

Generally speaking the disclosed implementations can characterize the service level of a device or collectively characterize the service level of a group of redundant devices. Filtered events can be grouped across several dimensions e.g. by individual device redundancy group device model and or device type and metrics can be applied to measure the service levels using the grouped events. Exemplary metrics used to characterize the grouped events can include total outage time traffic loss and or total tickets. The metrics can be computed using the filtered event data from one or more data centers.

In the case of total outage time the event analysis component can determine the total outage time of an individual device in an additive fashion e.g. summing the individual outage minutes for each event in the filtered data set. One example of a service level availability can be computed based on the total uptime of a particular device over a period such as a year. Note that this is also true of redundancy groups e.g. the availability of a redundancy group can be calculated without calculating the availability of individual group members by considering the total outage time of the redundancy group as a whole. This can also be done for device types e.g. the average availability of access routers as a whole can be computed based on the total uptime of multiple e.g. all devices of a particular type. Similar processing can be performed for individual device models e.g. a brand X model Y access router the average availability of the model can be computed as the total outage minutes for all of the devices of that particular model divided by the total expected operational time of all of the devices of that particular model.

In the case of traffic loss several equations can be used. The estimated average of median traffic loss per event for a device can be defined as 

Here the equation implies that the estimated average of median traffic loss of a given device per event can be represented by the sum over all events of the difference in median network traffic before and after an event multiplied by the duration of the failure divided by the total events contributed by the device to normalize the loss on a per event basis. To obtain this value the median traffic before and after each event can be computed to determine the median traffic loss and then the median traffic loss can be averaged for a given event. Note that in this context the term event can refer to any individual failure episode and can refer to a single or multiple individual device and or link failures that collectively relate to the event.

Here the equation implies that the loss for the device in a day is the sum for each event associated with that device on that day of the difference in median traffic before and after the event multiplied by the duration of the failure. Note also that traffic flow can be aggregated e.g. summed across links or devices in a redundant group.

In the case of total tickets the number of total tickets for a given individual device redundancy group device type or device model can be computed in a relatively straightforward fashion from the filtered events. For example each filtered event can identify a single failed device or multiple failed devices e.g. for merged events . The number of tickets e.g. unique tickets for that particular device can be computed in an additive fashion. Similarly for a redundancy group the number of tickets identifying at least one device from the group can be computed in an additive fashion. For a device type e.g. access router the number of tickets identifying any access router can be computed in an additive fashion. For a device model e.g. brand X model Y access router the number of tickets identifying a particular model can be computed in an additive fashion. This concept is readily extensible to other concepts related to service levels e.g. total downtime for a platform or group of devices can be another appropriate metric.

Using the above metrics device service levels can be characterized and the service level of an application can be computed using the service levels of the individual devices redundancy groups in the network stamp s of the application. Further implementations may consider other network configuration aspects e.g. device properties connectivity etc.

Device properties for a network device can reflect configuration parameters software or firmware revisions the particular application that is communicating through the device etc. Some implementations can calculate individual metrics on a property by property basis to capture how different device properties may influence service levels. For example the availability of access routers having a particular model with a particular software firmware revision can be determined. As another example the availability of aggregation switches used to route traffic from a search application can be determined and may be different than the availability of similarly configured aggregation switches that route traffic for a different application e.g. cloud storage .

Some implementations may also consider device connectivity or capacity and determine the aforementioned metrics for different levels of connectivity. For example assume up to 80 ToR switches can be connected to a single aggregation switch. Some implementations may characterize the traffic loss of an aggregation switch based on the number of connected ToRs. To the extent the ToR connectivity influences the traffic loss of the aggregation switch such implementations may uncover this relationship. This can also be the case at other layers e.g. the number of aggregation switches connected to a given access router can be considered as well. Also note that this processing can be performed across multiple layers e.g. some implementations may characterize service levels of access routers based on the total number of connected ToRs in the subtrees rooted at the access routers.

Referring back to the following will introduce some simple numerical examples to elaborate on the concepts expressed above. As with the previous hypotheticals unless otherwise indicated assume all devices shown in exhibit 100 availability. Considering application note that a failure at either aggregation switch or access router causes the entire subtree rooted at the failing device to lose connectivity. For the purpose of this hypothetical assume the access router has 90 availability. Thus the availability of application in this instance is computed as 90 since the only point of failure has 90 availability.

Now consider application and again assume only the access routers have any failures and have availability of 90 or the probability of a failure at any given time is 10 . Since access routers are employed in a redundant group assuming statistical independence the probability of a co occurrence of failures is 0.1 where n is the number of redundant devices in the group. In the example shown there are two devices so the probability of both devices failing is 0.01. Thus deploying the access routers in a redundant pair results in 99 availability.

Given the above one way to use ticket counts is to represent devices or device families e.g. a particular model number using an ordered tuple . For device families the ticket counts can be aggregated for each individual device from a given family. The tuples can be compared using lexicographic ordering e.g. if availabilities are the same or similar then the device family with the lower ticket count is preferred because it implies that the number of impactful failures is smaller. Similarly the traffic loss can be used for comparison relatively small loss is preferred over device families platforms which cause high traffic loss during outages. Conversely device families with high ticket counts and or traffic loss can be considered risky device families. These risky families can be identified by lexicographically ordering device families based on ticket count traffic loss and selecting the device families with high ticket counts traffic loss. Risky device families can also be identified by applying thresholds to ticket counts traffic loss e.g. device families having greater than a threshold ticket frequency or greater than a threshold percentage traffic loss can be considered risky. Similar analyses can be performed using other metrics e.g. device failure rates etc.

The previous examples illustrate how the event analysis component can characterize the service level of an existing network configuration. The event analysis component can also estimate the service level of a proposed configuration reflecting one or more changes to the network. For example assume a configuration change is contemplated to remove a single router from access router pair . In this case the event analysis component could estimate the availability of application after the configuration change as 90 e.g. n 1 . Alternatively the event analysis component can estimate the availability of application if another access router were added as 99.9 e.g. n 3 . Further implementations may account for the extent to which access router failures may be correlated e.g simultaneous at least partially overlapping or in temporal succession .

Note that this analysis can also extend to different devices or data centers e.g. assume application is hosted on a single data center with 90 availability. A potential network change could be to host application on 3 identical data centers each providing 90 availability. Assuming statistical independence of the data centers the estimated availability of application would be 99.9 if this change were made. Alternatively if the individual data centers provide different estimated availability and are assumed to be statistically independent the individual network stamps of the application at each data center can be evaluated independently and multiplied to obtain an estimated availability. This is the case provided the individual data centers have enough capacity to handle the full application traffic load when other data centers are unavailable.

In some implementations the event analysis component can identify various network changes that can meet a particular constraint. One type of constraint is defined by a Service Level Agreement SLA . For example the operator of the data center may be contractually obligated to provide 99.8 availability for application . Recall that in the example of application has 99 availability at a single point of failure the redundant pair of access routers . In this example the event analysis component could identify hosting application at an additional data center as one potential change because two data centers with 99 individual availability would be expected to provide 99.99 availability. Alternatively the event analysis component could identify configuring a third access router with the pair of access routers in a redundant configuration as another potential change that would meet the SLA required availability for application . This is the case since each individual access router is expected to provide 90 availability resulting in an expected availability of 99.9 assuming statistical independence .

Some implementations may also convey costs associated with the various potential configuration changes e.g. adding currency hourly or other resource costs to GUI screenshot for each potential change e.g. on a secondary Y axis textual representation pie chart etc. Some implementations may also represent the costs on a per unit of availability basis e.g. 1 additional 9 of availability from 90 to 99 99 to 99.9 etc. is expected to cost a certain amount of resources. For example shows the cost in dollars for adding an additional data center is far higher than the cost to add an additional access router. In this instance it may be appropriate to add the additional access router rather than add another data center because both proposed configurations meet the SLA requirement and adding the access router is far cheaper.

Also note that some potential network changes may consider connectivity. For example assume a different hypothetical where all of the devices except the aggregation switches exhibit 100 availability and the availability of the aggregation switches varies with ToR connectivity. Specifically consider an example where aggregation switches connected to 50 or fewer ToRs exhibit 90 availability and aggregation switches connected to 51 or more ToRs exhibit 80 availability. Now assume that the network stamp of application includes a total of 80 ToRs and two non redundant aggregation switches the first of which has 60 connected ToRs and the second of which has 20 connected ToRs. In this example the event analysis component can compute estimated availability of 80 for the first aggregation switch and 90 for the second aggregation switch. Assuming statistical independence the estimated availability for the subtree is 98 in this configuration. The event analysis component can identify a potential change to move at least 10 of the connected ToRs over to the second aggregation switch since this would not change the estimated availability of the second aggregation switch and would increase the estimated availability of the first aggregation switch to 90 for a subtree with an estimated 99 availability. This is the case provided there remains sufficient capacity in place for any application from which the ToRs are moved.

In the hypothetical examples discussed above statistical independence between failures in various devices was assumed to allow for relatively simple exemplary computations. In practice some devices may exhibit some statistical correlation in their failures. For example a pair of redundant access routers may tend to fail together due to problems common to both of the access routers. For example both access routers may have a bug in the software firmware power outages or spikes could cause both routers to fail overload conditions could affect both routers concurrently etc. However note that highly correlated failures can be undesirable particularly for redundant devices. This is because as discussed above when redundant devices in a group fail together they are not available to take over functioning for each other.

In view of the above some implementations may identify certain groups of risky devices in a given network configuration. shows a method . For example method can be performed by event analysis component to characterize groups of devices as risky meaning the devices are relatively likely to fail together rather than individually.

At block the method can obtain a set of events logged at a data center. Block can be similar to block of method .

At block the method can method can filter the events using one or more criteria. Block can be similar to block of method .

At block the method can characterize service levels of one or more devices using the filtered sub set of the events. For example the method can determine the individual availability of multiple access routers in a redundancy group at the L3 aggregation layer or multiple aggregation switches at the L2 aggregation layer.

At block the method can determine correlations between the service levels of the individual devices. For example some implementations may compute the correlation e.g. Pearson correlation between tickets outage minutes or traffic loss for devices within an individual redundancy group. Some implementations may also compute the correlation between tickets outage minutes or traffic loss of connected devices at different layers e.g. between an individual aggregation switch and an individual access router.

At block the method can identify risky devices based on the correlations. For example the correlations can be compared to a threshold and devices having a correlation exceeding the threshold can be identified as risky because these devices may tend to fail together e.g. failures with a temporal relationship such as overlapping failures or tending to fail in succession . As one example access routers or aggregation switches in a redundancy group that tend to fail together can be risky because the redundancy is less effective when the devices tend to fail together. As another example failures of a device at one layer can tend to cause failures of devices at other layers e.g. failed ToRs can tend to bring down upstream aggregation switches and this can be apparent from the correlations. Note also that individual devices that tend to fail frequently can also be identified at block e.g. devices with a high number of failures .

The service levels used for method can include the various service levels mentioned above e.g. total outage time total tickets traffic loss etc. Note however that other metrics may be suitable. Furthermore while the following implementations discuss Pearson correlation as a suitable measure of correlation other correlation measures can also be used such as Spearman s rank correlation coefficient and or Kendall tau rank correlation coefficient.

Considering total outage time one way to correlate outage time between two devices is as follows. First the total downtime of a device A and the total downtime of a device B are determined from filtered events as discussed above. Next the filtered events are also used to determine individual events where both device A and B were down together or at least partially overlapping in terms of their time window of being unavailable. If there is a strong negative correlation between failures of devices A and B e.g. Pearson coefficient close to 1 then the overlapping failures will tend to be relatively minimal relative to the individual failure rates of the devices in other words the devices are less likely to fail together than would be the case if there were no correlation. If there is minimal or no correlation e.g. Pearson coefficient of approximately 0 then the devices tend to fail independently of one another e.g. the failure of one device has little or no apparent impact on whether the other device fails. If there is a strong correlation e.g. Pearson coefficient close to 1 there is a strong correlation and the devices are more likely to fail together than would be the case if the failures were independent.

This last case relatively high correlation can be problematic for devices in a redundant configuration for reasons already mentioned. Thus in some implementations risky devices can be devices deployed in a redundant configuration that have a correlation exceeding a certain threshold e.g. 0.7. Similar processing can be employed with respect to network tickets by determining the Pearson coefficient for support tickets e.g. determining the total number of tickets for each individual device and the intersection of these tickets that relate to both devices. Assuming an equivalent number of tickets smaller intersections imply lower correlations and larger intersections imply higher correlations. Correlations can also be determined for losses of network traffic by individual devices e.g. if traffic loss by one device in a redundant pair tends to be highly correlated to traffic loss by another device in the redundant pair the pair can be flagged as a risky device pair.

Note that some implementations may perform processing similar to that discussed above with respect to method to determine risky device properties. For example consider a data center with many physically identical network devices a first group of which have a first software firmware revision Revision A and a second group of which have a second software firmware revision Revision B. One device property for these devices may reflect the current revision. If Revision A is highly correlated e.g. using one or more of the correlation measures mentioned above to tickets outages or traffic loss then this property can be flagged as a risky property. In further implementations the event analysis component may evaluate the data center topology to identify those devices having the risky property e.g. Revision A . The event analysis component may also estimate the change in device availability if the Revision A devices were upgraded to revision B. Based on the estimated individual device availability the event analysis component can also estimate the change in application availability for applications having network stamps that include one or more Revision A devices.

The order in which the disclosed methods are described is not intended to be construed as a limitation and any number of the described blocks can be combined in any order to implement the method or an alternate method. Furthermore the methods can be implemented in any suitable hardware software firmware or combination thereof such that a computing device can implement the method. In one case the methods are stored on one or more computer readable storage media as a set of instructions such that execution by a processor of a computing device causes the computing device to perform the method.

Although techniques methods devices systems etc. pertaining to characterizing service levels are described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as exemplary forms of implementing the claimed methods devices systems etc.

