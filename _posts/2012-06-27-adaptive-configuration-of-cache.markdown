---

title: Adaptive configuration of cache
abstract: A computer-implemented method for adaptively configuring a cache includes: implementing a cache adaptation agent in a system that has multiple applications, the system including a memory and a disk storage, wherein the system creates a cache in the memory for use by each of the applications; monitoring, by the cache adaptation agent, the cache in use by at least one of the applications, the monitoring covering at least a size of the cache used by the application, how many objects are in the application's cache, and sizes of the objects in the application's cache; and configuring, by the cache adaptation agent and based on the monitoring, at least one of the cache and system behavior regarding at least one of the applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08886890&OS=08886890&RS=08886890
owner: SAP Portals Israel Ltd
number: 08886890
owner_city: Ra'anana
owner_country: IL
publication_date: 20120627
---
A cache is a vital module in any large system. The system has a cache module or infrastructure that can be configured. The cache is divided into multiple areas and each area represents a cost to the owner of maintaining the cache and the cache is managed by the system to aid the functional operations of applications or other software.

One example of cache management is that virtually everything is cached. This improves performance response times but because the cache needs to be large enough to hold all that information the cost of ownership increases with this approach.

Another example of cache management is that virtually nothing or only a small fraction of information is cached. This can help minimize the memory footprint of the system but the system response time deteriorates because essentially every operation requires a call to the database.

Sometimes a customer configuration is arranged by first simulating a load test on the system analyzing the results and deciding the optimal configuration. However the configuration thus chosen may be less optimal for use in other scenarios. Also the configuration may be less optimal when used by other customers in the same scenario or even when used by the same customer at a different time.

In a first aspect a computer implemented method for adaptively configuring a cache includes implementing a cache adaptation agent in a system that has multiple applications the system including a memory and a disk storage wherein the system creates a cache in the memory for use by each of the applications monitoring by the cache adaptation agent the cache in use by at least one of the applications the monitoring covering at least a size of the cache used by the application how many objects are in the application s cache and sizes of the objects in the application s cache and configuring by the cache adaptation agent and based on the monitoring at least one of the cache and system behavior regarding at least one of the applications.

In a second aspect a computer program product is embodied in a non transitory computer readable storage medium and includes instructions that when executed by a processor perform a method for adaptively configuring a cache. The method includes implementing a cache adaptation agent in a system that has multiple applications the system including a memory and a disk storage wherein the system creates a cache in the memory for use by each of the applications monitoring by the cache adaptation agent the cache in use by at least one of the applications the monitoring covering at least a size of the cache used by the application how many objects are in the application s cache and sizes of the objects in the application s cache and configuring by the cache adaptation agent and based on the monitoring at least one of the cache and system behavior regarding at least one of the applications.

In a third aspect a system includes one or more processors and computer program product embodied in a non transitory computer readable storage medium and including instructions that when executed by a processor perform a method for adaptively configuring a cache. The method includes implementing a cache adaptation agent in a system that has multiple applications the system including a memory and a disk storage wherein the system creates a cache in the memory for use by each of the applications monitoring by the cache adaptation agent the cache in use by at least one of the applications the monitoring covering at least a size of the cache used by the application how many objects are in the application s cache and sizes of the objects in the application s cache and configuring by the cache adaptation agent and based on the monitoring at least one of the cache and system behavior regarding at least one of the applications.

Implementations can include any or all of the following features. The monitoring also includes determining how many times the application writes to the disk storage. The monitoring also includes determining system response time. The configuration includes modifying a caching strategy. The system is operated by a vendor and each of the applications is used by one of multiple customers and the method further includes determining a total cost of ownership for the vendor per each of the customers. The configuration includes creating an index for the disk storage. The configuration includes providing a recommendation to a user the recommendation indicating at least one task for the user to perform.

Implementations can provide any or all of the following advantages. In a system that is used for multiple customers the amount of memory used by each customer can be reduced allowing more customers to be held on a single system. Cache use can be made more effective. System performance can be improved. Scalability and or system stability can be improved. Elastic cache configuration can be provided.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings and from the claims.

This document describes methods and systems in which a cache is adaptively configured. In a system where applications are using a cache an agent can be implemented that analyzes the cache and configures the cache and or system behavior based on one or more rules. For example the adaptive configuration can involve allocating more or less cache space to an application causing the application to cache more or fewer objects when it performs its operations and or to make other changes in caching strategy.

The client tier is implemented on one or more devices for example a smartphone personal computer and or a tablet. The client tier includes one or more browsers . In some implementations any suitable browser can be used including without limitation a Google Chrome browser an Internet Explorer browser a Safari browser or a Firefox browser.

Here the browser includes at least one client and an admin client . For example the client is a browser compatible instance of an application client and can be created using any suitable code or programming language. A user can operate the client to cause one or more functions to be performed. The admin client can serve one or more purposes of administration configuration or other preparation and or restoration. In some implementations the client and or the admin client are implemented outside the browser for example in a standalone configuration.

The web tier here includes an application server in connection with the browser . The application server can have stored therein and execute one or more applications of any type. In some implementations the application server includes a server application . For example the server application can provide an application programming interface API one or more services a cache manager and an index manager .

The data tier here includes one or more databases and one or more indices . In some implementations the API can provide the client tier access to one or more of the services which service s can involve accessing the database and or using cached information managed by the cache manager . For example If at least part of the database is indexed the index can be stored in the indices and used by the index manager to facilitate database lookup.

The architecture can include an adaptive cache infrastructure ACI . In this implementation the ACI is implemented in the web tier . For example the ACI can analyze use of the cache s in the architecture and or monitor system response time. Based on the analysis and or monitoring the ACI can cause one or more changes to be made in an effort to optimize cache usage. For example more or less cache space can be allocated and or the caching strategy can otherwise be changed. As another example if the ACI detects that the database or certain data structures therein do not have an index then an index can be created such as by indexing the contents and providing the index for management by the index manager . Creating such an index can speed up database accesses and thereby improve system performance.

The system provides a platform for hosting and executing the operative functionality that users will seek access to. Here a platform as a service PaaS is included in the system . For example the PaaS can be implemented using any suitable script or programming language including but not limited to Java.

The system can include one or more business suites and or at least one other application . In some implementations applications relating to enterprise resource management ERP can be used. For example business suite software from SAP AG can be used.

The PaaS here includes one or more services or proxies to services . Such services and or proxies can relate to activities e.g. an activity controller runtime container or runtime content composition navigation search documents real time communication e.g. desktop sharing chat audio video conferencing feeds e.g. status updates system feeds or feed aggregation content composition e.g. thing collection user interface composition e.g. Pagebuilder OpenSocial container networks e.g. groups communities implicit networks explicit networks people e.g. profile reference to third party profiles presence context awareness e.g. business object task role location services discussions blogs wiki commerce loyalty payments coupons and or usage analytics. In some implementations one or more of the services and or proxies can be implemented as Open Services Gateway initiative bundles.

The PaaS here includes a core platform . The core platform can provide business logic persistency lifecycle management e.g. for an application and connectivity to remote business logic. In some implementations the core platform is used in a true multichannel architecture. The core platform here includes business logic a persistency module backend connectivity and orchestration and at least one cache . The business suite and or the other application can be connected to and interact with the cache . In some implementations one or more gateways can be used between the cache and the business suite application .

The system here includes the adaptive cache infrastructure . In some implementations the adaptive cache infrastructure can monitor the system including the cache and take one or more actions based on the analysis. For example the cache can be modified regarding how much space is allocated to the business suite and or to the other application . As another example the object s used by the business suite application can be cached if that leads to time saving or not cached if the object takes up too much cache space or is not used frequently.

In a particular implementation the system is operated by a vendor and each of the applications in the system is used by one of multiple customers. For example the vendor provides remotely accessible ERP services to different customers. A total cost of ownership TCO for the vendor can then be determined for each of the customers. For example the adaptive cache infrastructure can monitor how much of the cache is occupied by the application s of each respective customer and the cost per customer or per application can be calculated.

The cache includes multiple areas associated with respective applications. For example each of areas A D can be allocated to and used in the operation of a separate application program. The areas A D are schematically shown as contiguous fields in this example but in some situations one or more of the areas can be distributed over two or more physical locations.

For each of the areas A D it can be determined e.g. by the adaptive cache infrastructure in whether to allow more or less memory space based on usage. For example an area can be duplicated one or more times or discarded. This can help lower the TCO in that only the needed resources are being used. In some implementations respective modules corresponding to the areas A D can provide interfaces that expose their load factors. In other implementations operating system metrics such as CPU use and or memory use can be used e.g. by the adaptive cache infrastructure in .

A dashed outline schematically illustrates that the area D previously were larger than it currently is. For example the area D may have been deliberately made smaller upon determining e.g. based on monitoring caching activities that the corresponding application was not using its cache space frequently enough to justify the original size of its cache. Accordingly some cache resource that was previously available to that application was taken away to be used more efficiently. Here for example the area C has been allowed to expand into some of the space previously occupied by the area D. In some situations the allocation of more cache space to the area C i.e. to the corresponding application that uses the space C can also or instead be prompted by analysis showing that the corresponding application needed more cache space. For example it can be determined that the corresponding application accesses the database frequently and as such it can be advantageous to allow the application more cache.

In some implementations the analysis also or instead relates to one or more objects that an application stores in the cache . For example the number of objects can be determined and the size of the area A can be adjusted up or down accordingly. As another example if one or more of the objects is too large i.e. takes up too much space then the caching behavior can be changed so that the too large object is no longer cached.

One or more of the following aspects can be taken into account the size of the object the relative cost of creating the object or how frequently the object changes. For example it can be determined that an application accesses a particular object only within a confined time interval e.g. twice in less than one minute . The cache can then be configured so that after that short time e.g. after one minute the area is reallocated possibly to another application . Other approaches can be used.

As another example it can be determined from analyzing caching activities that an application uses the cache mostly between 9.00 AM and 5.00 PM in a particular time zone and or that another application does not use the cache during the noon hour. Accordingly based on the monitoring the appropriate caching behavior can be implemented so as to make more effective use of system resources.

That is the system usage is monitored e.g. by the adaptive cache infrastructure and accordingly the following for example can be increased or decreased 

The underlying hardware using virtualization e.g. CPU RAM memory memory bandwidth network bandwidth etc. 

In a particular example the cache adaptation agent can be implemented in a system that includes a memory and a disk storage and has multiple applications e.g. the architecture in or the system in . The system creates a cache in the memory for use by each of the applications. The cache adaptation agent can monitor at least a size of the cache used by the application how many objects are in the application s cache and sizes of the objects in the application s cache. For example the sizes of the areas can be monitored as well as the number and sizes of the objects . Based on the monitoring the cache adaptation agent can modify the cache and or system behavior regarding at least one of the applications. For example one or more applications can be allocated more or less cache the number of objects in the cache can be decreased or increased or the size of objects in the cache can be decreased or increased .

The cache adaptation agent can perform monitoring at suitable times. In some implementations the agent monitors system activities essentially in a continuous fashion and can take action when justified by the analysis. In other implementations the monitoring is performed at one or more specified times.

The cache adaption agent monitors the running system. In some implementations the agent is implemented inside the running process. In other implementations the agent can be run in a separate place for example so that multiple systems can be monitored.

The cache adaptation agent can include one or more modules to perform relevant monitoring and or to take suitable measures in response. Here the agent includes the following 

The memory stores information within the system . In some implementations the memory is a computer readable medium. The memory is a volatile memory unit in some implementations and is a non volatile memory unit in other implementations.

The storage device is capable of providing mass storage for the system . In one implementation the storage device is a computer readable medium. In various different implementations the storage device may be a floppy disk device a hard disk device an optical disk device or a tape device.

The input output device provides input output operations for the system . In one implementation the input output device includes a keyboard and or pointing device. In another implementation the input output device includes a display unit for displaying graphical user interfaces.

The features described can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier e.g. in a machine readable storage device for execution by a programmable processor and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer will also include or be operatively coupled to communicate with one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the features can be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.

The features can be implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include e.g. a LAN a WAN and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of this disclosure. Accordingly other implementations are within the scope of the following claims.

