---

title: Parser, code generator, and data calculation and transformation engine for spreadsheet calculations
abstract: A system including spreadsheet sheets, makes calculations and data transformations, which is available through a programming interface, and conforms to the grammar and syntax of a target software development language is presented. The system includes an Object Model with Data Structures representing entities involved in spreadsheets. The system includes a Parser and Code Generator that extracts data from a body of spreadsheet data, instantiates instances of Data Structures of the Object Model to represent the spreadsheet data, parses the data and formulas contained in the cells of the spreadsheets, iterates through the instantiated instances of the Data Structures, and generates source code that performs the calculations and data transformations embodied in the spreadsheet data. The system includes a Calculation Engine with software base classes that implement the common structural and data access features of spreadsheet data, and further implement the operations of common spreadsheet functions and operators.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08656348&OS=08656348&RS=08656348
owner: Knowledge Dynamics, Inc.
number: 08656348
owner_city: Glenview
owner_country: US
publication_date: 20120504
---
This application is a continuation of U.S. patent application Ser. No. 12 901 875 filed Oct. 11 2010 which is a continuation of U.S. patent application Ser. No. 11 301 734 filed Dec. 12 2005 now U.S. Pat. No. 7 836 425 which is a continuation of U.S. patent application Ser. No. 10 222 730 filed Aug. 15 2002 now U.S. Pat. No. 7 010 779 which claims the benefit of U.S. provisional patent application No. 60 312 981 filed Aug. 16 2001 the entire disclosures of which are hereby incorporated by reference.

The present invention pertains in general to software based calculation and data transformation engines and more particularly to conversion of the calculation and data transformation features of spreadsheet data into source code of a target software development language for independent run time execution.

Spreadsheet applications for computers such as IBM s Lotus 123 and Microsoft Excel have become very popular analysis and communication tools. Spreadsheets are typically used to perform numerical analyses and what if analyses to simulate complex systems and to communicate ideas. Many users are familiar with the spreadsheet metaphor. With little or no training users can create complex interrelated calculations and data transformations in spreadsheet applications.

The rapid growth and adoption of the Internet has spawned an explosion in web based distribution of application functionality and server based applications. Many such distributed and server based applications have underlying logic that comprises complex calculations and data transformations. Development of such functionality in software language source code can be effort intensive tedious and error prone. Furthermore creating such functionality requires highly skilled software developers.

Being able to embed the calculations and data transformations of a spreadsheet directly into stand alone applications distributed applications and server based applications can be very powerful. Some spreadsheet applications have application programming interfaces APIs that allow them to provide calculation and data transformation as a service to other applications. But distributing and using spreadsheets in this way requires that users have the same or a compatible spreadsheet application as the one in which the spreadsheet was created.

Using spreadsheet applications as calculation engines in server based applications also has limitations. Background art spreadsheet applications are meant for single users and cannot scale to support high volume server side processing. Also the User Interface and display features of spreadsheet applications carry significant overhead.

There are background art spreadsheet components available that can read and write spreadsheet data created by popular spreadsheet applications and perform calculations at runtime. These components do facilitate the integration of spreadsheet functionality into other distributed applications or server based applications. But these components operate internally in the same way spreadsheet applications do they interpret Cell formulas at runtime. Runtime interpretation of Cell formulas is generally considered to be a desirable feature because it allows Cell formulas to be changed at runtime. But in many application scenarios calculations and data transformations need to remain unchanged at runtime. So when a spreadsheet component is used as a calculation engine in such an application then the runtime Cell formula interpretation feature adds memory and processing overhead without adding any value. Background art spreadsheet components are typically larger than 1 Megabyte in size.

When using background art spreadsheet components in server based applications the overhead associated with the User Interface and runtime cell formula interpretation features can negatively impact server performance both from processing speed and memory usage standpoints. When using background art spreadsheet components in distributed applications the overhead can also significantly degrade download performance.

Some spreadsheet applications and spreadsheet components use mechanisms to represent simple cell formulas as machine code during idle time processing. While this can reduce the negative performance impact related to run time cell formula interpretation it maintains the memory overhead and it can limit the spreadsheet application or spreadsheet component to running on only a single platform.

It would be desirable to provide a facility for automatically generating source code from spreadsheet data such that the generated source code embodies the calculations and data transformations embodied in the spreadsheet data. The generated source code may then be integrated into a wide variety of different types of applications or other utilization mechanisms. The calculations and data transformation may allow features to be accessed by users who do not have a spreadsheet application or spreadsheet component or who have a spreadsheet application or spreadsheet component that is incompatible with the original spreadsheet application. The calculations and data transformation may protect features from being modified accidentally or deliberately. Thus spreadsheet applications may be used as design tools for creating and testing complex interrelated calculation functionality for use in a wide variety of applications. The calculations and data transformation allows features to be embedded into high volume server architectures such as mainframe computers or super computers that are not fully supported by background art spreadsheet applications or components. Moreover the calculations and data transformation may allow features to be embedded into disparate or distributed computing environments such as web browsers embedded systems gaming consoles cell phones and personal digital assistants PDAs that are not fully supported by background art spreadsheet applications or components.

One of the most labor intensive aspects of software development is testing to verify that the software meets specifications. In many software development efforts major parts of the system must be built before any of the parts can be tested. This makes it difficult to localize the origin of errors. But when using a spreadsheet to develop the core logic of a system it is easy to create multiple sets of test data and switch between the sets to test the spreadsheet. Therefore it would be desirable to provide a core functionality that can be verified locally before deployment and without writing any code.

Developing complex logic in a spreadsheet is much more efficient than hand coding in a software language. The visual nature of spreadsheets and usability features like drag copy have been critical to their widespread adoption. When these productivity enhancers are applied to programming the effects are no less dramatic. Developers can create calculations and data transformation routines in a spreadsheet in a fraction of the time that it takes to do the same in code. Sophisticated systems may incorporate with built in functions. Beginning developers can be effective at coding logic that might otherwise require a very skilled resource.

Briefly summarized the present invention relates to source code generator programming interfaces defined to facilitate the analysis of a body of spreadsheet data and the generation of software source code representative of the body of spreadsheet data. The generated software source code embodies structural aspects of the body of spreadsheet data. The calculations and data transformations are performed thorough a plurality of spreadsheet sheets. This makes the calculations and data transformations available through a programming interface. Further the grammar and syntax is conformed to a target software development language.

A preferred embodiment of the Parser and Code Generator integrated directly into a spreadsheet application. The preferred embodiment optionally generates source code conforming to the syntax of multiple target software development languages including Java by Sun Microsystems C C and others.

With reference to the figures and particularly a block diagram of the representative computer hardware is shown illustrating a computer system implementing a source code generator with methods employing a process and computer readable medium containing instructions for controlling the computer system which comprises a processor or CPU receiving input from a keyed input device or pointing device . A display device and printing device are provided for output and volatile storage and non volatile storage may include computer readable media and random access memory and the like. As described further below a spreadsheet application is employed with a plurality of sheets from which a data structure including calculation files are used for corresponding spreadsheet data. A data acquisition interface is used for receiving the spreadsheet data which is transferable to the calculation files. A parser and source code generator is used for extracting information from the data structure. An information processor facilitated the use of CPU for performing a data transformation of extracted information stored in said data structure through said programming interface to conform to the grammar and syntax of a target software development language. A calculation engine is provided which has the following benefits 

 b reducing distribution size by eliminating the overhead of a spreadsheet application or spreadsheet component 

 c reducing distribution size by eliminating the overhead of User Interface features and run time cell formula interpretation features 

 d allowing the generated code to be executed on any platform which supports a target software development language 

 e improving the performance of the calculations and data transformation features because they are embodied in compiled code rather than being interpreted at runtime 

 f improving the performance of the calculations and data transformation features because optimizing compilers can optimize for a target platform 

Within the field of object orientation the concepts of encapsulation polymorphism and inheritance are well known. A Class is an embodiment of characteristics and behaviors. An instance of a Class is an object that exhibits the characteristics and behaviors of the Class. There are many well known and widely available references describing object oriented principles in great detail.

Within the field of computer applications spreadsheet concepts are well known. In a typical background art spreadsheet application a body of spreadsheet data comprises a singleton Workbook comprising a plurality of Worksheets. Worksheets comprise a plurality of Cells that can contain literal data values or formulas that are dependent on other Cells. Individual Cells as well as Ranges of Cells can be Named and can be referred to and accessed by Name. There are many well known and widely available references describing spreadsheet principles and specific spreadsheet applications and components in great detail.

The disclosed invention comprises several data structures that represent the various entities of a spreadsheet. In a preferred embodiment the data structures are object oriented software classes that embody characteristics and behaviors of said spreadsheet entities. The Data Structures may be representative of spreadsheet entities which may be instantiated as Extensible Markup Language XML data representative of spreadsheet entities. Some of these Data Structures are considered at code generation time and some are considered at runtime. For the purposes of specification it is useful to define said data structures 

In a preferred embodiment the data structures of the Parser and Code Generator comprise the following object oriented software classes KDBook KDSheet KDCell KDName KDFunc KDFuncArg KDColorScheme KDEncoder KDParser KDCodeSegment and KDSharedFormula.

In background art spreadsheet applications and components the global data aspects of a body of spreadsheet data are commonly referred to as a workbook or a book . KDBook is a software Data Structure that represents the global data aspects of a body of spreadsheet data. In a preferred embodiment KDBook is an object oriented software class. A singleton instance of KDBook is instantiated.

KDSheet is a software Data Structure that represents the aspects of a single spreadsheet sheet within a body of spreadsheet data. In background art spreadsheet applications and components these are commonly referred to as worksheet or sheet . In a preferred embodiment KDSheet is an object oriented software class. An instance of KDSheet is instantiated for each sheet in the body of spreadsheet data.

KDCell is a software Data Structure that represents the aspects of a single spreadsheet cell within a spreadsheet sheet. In a preferred embodiment KDCell is an object oriented software class. An instance of KDCell is instantiated for each cell on said spreadsheet sheet. The KDCell includes the following members.

KDName is a software Data Structure that represents the aspects of a named range of spreadsheet cells within a spreadsheet sheet. In a preferred embodiment KDName is an object oriented software class. An instance of KDName is instantiated for each named range of spreadsheet cells within said body of spreadsheet data.

KDFunc is a software Data Structure that represents the aspects of built in or user defined spreadsheet functions that can be used in spreadsheet cell formulas. In a preferred embodiment KDFunc is an object oriented software class. An instance of KDFunc is instantiated for each supported spreadsheet function. The use of KDFunc allows the present invention to be easily extended to support additional built in spreadsheet functions and unanticipated user defined functions by simply adding more instances of KDFunc and KDFuncArg described below . KDFunc instances representative of built in spreadsheet functions are included in the invention. KDFunc instances representative of user defined functions can be dynamically included from an external data source.

KDFuncArg is a software Data Structure that represents the aspects of arguments of built in or user defined spreadsheet functions that can be used in spreadsheet cell formulas. In a preferred embodiment KDFuncArg is an object oriented software class. An instance of KDFuncArg is instantiated for each argument accepted by each supported spreadsheet function. The use of KDFuncArg allows the present invention to easily support the representation of built in or user defined spreadsheet functions that take any number of arguments. Some built in or user defined spreadsheet functions take no arguments some take a fixed number of arguments some have optional arguments and some can take a variable length list of arguments.

KDCodeSegment is a software Data Structure that represents the aspects of a segment of code in a cell formula. In a preferred embodiment KDCodeSegment is an object oriented software class. An instance of KDCodeSegment is instantiated for each contiguous code segment or parameterizable reference in a cell formula. The use of KDCodeSegment allows the output of present invention to be optimized by identifying spreadsheet cells with cell formulas similar enough that total generated source code size can be reduced by having multiple cells call the shared formula rather than implement the formula individually.

KDSharedFormula is a software Data Structure that represents the aspects of a cell formula formation that is common to multiple cells. In a preferred embodiment KDSharedFormula is an object oriented software class. An instance of KDSharedFormula is instantiated where at least two cells are similar enough that total generated source code size can be reduced by having multiple cells call a shared formula rather than implement the formula individually.

KDColorScheme is a software Data Structure that represents the aspects of a particular combination of colors of spreadsheet cell features. In a preferred embodiment KDColorScheme is an object oriented software class. An instance of KDColorScheme is instantiated for each color scheme defined by the user in said body of spreadsheet data. The KDColorScheme allows the user to indicate which spreadsheet cells should be included in code generation excluded from code generation and marked as persistent by specifying the foreground and background colors of the spreadsheet cell.

KDEncoder is a software Data Structure that represents the aspects of a parser and code generator that generates software source code representative of a body of spreadsheet data. In a preferred embodiment KDEncoder is an object oriented software class. A singleton instance of KDEncoder is instantiated to generate said software source code.

KDParser is a software Data Structure that represents aspects of a recursive descent expression parser that parses spreadsheet cell formulas and generates software source code representative of the calculations and data transformations of said spreadsheet cell formulas. In a preferred embodiment KDParser is an object oriented software class. A singleton instance of KDParser is instantiated to parse said cell formulas and generate said representative source code. All cell formula parsing functionality is embodied in this class. In a preferred embodiment KDParser parses a cell formula and generates source code conforming to the grammar and syntax of a software development language such as the Java language by Sun Microsystems. Various derivations of KDParser support various target software development languages such as Visual Basic VBScript Jscript and Microsoft Visual Basic for Applications by Microsoft Basic Assembler C C Fortran COBOL and other existing and unanticipated target software development languages.

In a preferred embodiment the data structures of the Calculation Engine comprise the following object oriented software classes IKDJEngine KDJEngine KDJObject KDJWorkbook MyWorkbook book KDJWorksheet MyWorksheet sheet KDJCell KDJRange KDJValue and KDJExpressionParser KDJCalcException KDJFunctionLibrary and KDJUserDefinedFunctionLibrary.

KDJEngine is a software Data Structure and functions that together represent aspects of a Calculation Engine. KDJEngine implements a public application programming interface API that make features of the invention available to calling applications. The methods are directed at loading getting and setting values among other operations. In a preferred embodiment KDJEngine is an object oriented software class. A singleton instance of

KDJEngine is instantiated at runtime. Note that the list of methods exposed of KDJEngine is exemplary.

In a preferred embodiment KDJObject is an object oriented software class that has no member data fields or methods but acts as the root most class in an inheritance hierarchy. KDJValue KDJRange and KDJCell all inherit from KDJObject. Instances of KDJObject are not instantiated directly.

In background art spreadsheet applications and components the global data aspects of a body of spreadsheet data are commonly referred to as a workbook or a book . In the present invention KDJWorkbook is a software Data Structure and functions defined in the target software development language that together represent the global general data and behavior aspects of a body of spreadsheet data at runtime. In a preferred embodiment KDJWorkbook is an object oriented software class from which classes representative of specific spreadsheet workbooks are derived. KDJWorkbook inherits from KDJEngine. KDJWorkbook is not instantiated at runtime.

 MyWorkbook book is a software Data Structure and functions defined in the target software development language that together represent global data and behavior aspects of a specific body of spreadsheet data at runtime in the present invention. In a preferred embodiment MyWorkbook book is an object oriented software class that is derived from KDJWorkbook. The source code of this class is generated by the Parser and Code Generator to represent the global data and behavior aspects of a specific body of spreadsheet data. In a preferred embodiment MyWorkbook is derived from the name of a spreadsheet workbook so if the spreadsheet workbooks name is Financials then the name of the generated class is Financialsbook . A singleton instance of MyWorkbook book is instantiated at runtime.

KDJWorksheet is a software Data Structure that represents the aspects of a single spreadsheet sheet within a body of spreadsheet data. In background art spreadsheet applications and components these are commonly referred to as worksheet or sheet . In the present invention KDJWorksheet is a software Data Structure and functions defined in the target software development language that together represent the general data and behavior aspects of a of a single spreadsheet sheet at runtime. In a preferred embodiment KDJWorksheet is an object oriented software class from which classes representative of specific spreadsheet sheets are derived. KDJWorksheet is not instantiated at runtime.

 MyWorkbook book is a software Data Structure and functions defined in the target software development language that together represent data and behavior aspects of a specific spreadsheet sheet at runtime in the present invention. In a preferred embodiment MyWorksheet sheet is an object oriented software class that is derived from KDJWorksheet. The source code of this class is generated by the Parser and Code Generator to represent the data and behavior aspects of a specific spreadsheet sheet. In a preferred embodiment MyWorksheet is derived from the name of a spreadsheet sheet so if the spreadsheet sheet is named Revenue then the name of the generated class would be Revenuesheet. An instance of My Worksheet sheet is instantiated at runtime for each spreadsheet sheet in the spreadsheet workbook.

KDJCell is a software Data Structure and functions defined in the target software development language that together represent data and behavior aspects of a spreadsheet cell at runtime in the present invention. In a preferred embodiment KDJCell is an object oriented software class. Source code declaring a static instance of this class is generated by the present invention to represent the data aspects of each spreadsheet cell that contains a literal value rather than a cell formula. Instances of KDJCell are instantiated at runtime by the present invention to represent data and behavior aspects of each spreadsheet cell that contains a cell formula rather than a literal value.

KDJRange is a software Data Structure and functions defined in the target software development language that together represent data and behavior aspects of a range of spreadsheet cells within a spreadsheet sheet. In a preferred embodiment KDJRange is an object oriented software class. Instances of KDJRange are instantiated at runtime.

KDJValue is a software Data Structure and functions defined in the target software development language that together represent data and behavior aspects of a KDJCell s value evaluation whether the cell contains a literal value or a cell formula. KDJValue is also used to represent the results of built in spreadsheet functions and user defined functions. In a preferred embodiment KDJValue is an object oriented software class. Instances of KDJValue are instantiated at runtime.

KDJCalcException is a software Data Structure and functions that represent aspects of an Exception. In a preferred embodiment KDJCalcException is an object oriented software class. Instances of KDJCalcException are instantiated at runtime when an error occurs as the result of any unexpected conditions.

KDJExpressionParser is a software Data Structure and functions that represent the aspects of an expression parser for use by run time implementations of built in spreadsheet functions and user defined functions that can take quoted regular expressions as arguments. In a preferred embodiment KDJExpressionParser is an object oriented software class. Instance of KDJExpressionParser are instantiated at runtime during evaluation of functions such as SUMIF and COUNTIF for example.

KDJFunctionLibrary is a set of functions defined in the target software development language that represent behavior aspects necessary for execution of built in spreadsheet functions. In a preferred embodiment KDJFunctionLibrary is an object oriented software class. All member functions of KDJFunctionLibrary are static and require no instantiation. In a preferred embodiment KDJFunctionLibrary can be generated and only include implementations of the built in spreadsheet functions actually used in the specific workbook for which code is generated. This serves to optimize the generated code for size. The entire library of built in spreadsheet functions can be used if the Calculation Engine is to be shared by modules representing several workbooks where the used functions may not be known at code generation time.

Note The following list of built in spreadsheet functions and descriptions contemplated by the invention is in spreadsheet syntax format as defined within the Help System of Microsoft Excel 2000 a background art spreadsheet application.

Some background art spreadsheet applications and spreadsheet components allow users to define functions that are not built in. KDJUserDefinedFunctionLibrary is a set of functions defined in the target software development language that represent behavior aspects necessary for execution of user defined spreadsheet functions. In a preferred embodiment KDJUserDefinedFunctionLibrary is an object oriented software class. KDJUserDefinedFunctionLibrary allows unanticipated functions to be made available for use in KDJCell formulas. All member functions of KDJUserDefinedFunctionLibrary must be defined as static and require no instantiation. In a preferred embodiment KDJUserDefinedFunctionLibrary can be generated and only include implementations of the user defined spreadsheet functions actually used in the specific workbook for which code is generated. This serves to optimize the generated code for size. The entire library of user defined spreadsheet functions can be used if the Calculation Engine is to be shared by modules representing several workbooks where the used functions may not be known at code generation time.

