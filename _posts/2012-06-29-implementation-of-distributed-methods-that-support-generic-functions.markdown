---

title: Implementation of distributed methods that support generic functions
abstract: Embodiments are directed to providing a generic software function for a plurality of data types in a distributed environment and to implementing type checking at compile time and at runtime. In one scenario, a computer system receives a portion of software code for a distributed software application, where the software code is written as a generic function in a computer programming language that supports reflection. The computer system presents a function signature at runtime to a just-in-time (JIT) compiler. The function signature describes which of multiple different input and output data types the generic function is configured to work with. The computer system also implements reflection at runtime to resolve each generic function to a function pointer after compilation by the JIT.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08924944&OS=08924944&RS=08924944
owner: Microsoft Corporation
number: 08924944
owner_city: Redmond
owner_country: US
publication_date: 20120629
---
Computers have become highly integrated in the workforce in the home in mobile devices and many other places. Computers can process massive amounts of information quickly and efficiently. Software applications designed to run on computer systems allow users to perform a wide variety of functions including business applications schoolwork entertainment and more. Software applications are often designed to perform specific tasks such as word processor applications for drafting documents or email programs for sending receiving and organizing email.

In some cases software applications are designed using integrated development environments IDEs . These IDEs allow developers to write and debug software code. Developers typically write software applications using multiple different functions or methods. Typically each of these methods or functions is developed for a specific data type. Examples of data types include integer float string character and others. Accordingly if a developer wants to use a certain function or method with multiple different data types the developer has to write separate functions or methods for each data type.

Embodiments described herein are directed to providing a generic software function for a plurality of data types in a distributed environment and to implementing features such as type checking and overload resolution for generic methods both at compile time and at runtime. In one embodiment a computer system receives a portion of software code for a distributed software application where the software code is written as a generic function in a computer programming language that supports reflection. The computer system presents a function signature at runtime to a just in time JIT compiler. The function signature describes which of multiple different input and output data types the generic function is configured to work with. The computer system also implements reflection at runtime to resolve each generic function to a function pointer after compilation by the JIT.

In another embodiment a computer system implements type checking at compile time and at runtime. The computer system receives a portion of software code for a distributed software application where the software code being written as a generic function in a computer programming language that supports reflection. The computer system presents a function signature at runtime to a just in time JIT compiler. The function signature describes which of multiple different input and output data types the generic function is configured to work with. The computer system performs type checking on the generic function at compile time and at runtime to determine whether type based errors exist in the software code and implements reflection at runtime to resolve each generic function to a function pointer after compilation by the JIT.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Additional features and advantages will be set forth in the description which follows and in part will be apparent to one of ordinary skill in the art from the description or may be learned by the practice of the teachings herein. Features and advantages of embodiments of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. Features of the embodiments of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

Embodiments described herein are directed to providing a generic software function for a plurality of data types in a distributed environment and to implementing features such as type checking and overload resolution for generic methods both at compile time and at runtime. In one embodiment a computer system receives a portion of software code for a distributed software application where the software code is written as a generic function in a computer programming language that supports reflection. The computer system presents a function signature at runtime to a just in time JIT compiler. The function signature describes which of multiple different input and output data types the generic function is configured to work with. The computer system also implements reflection at runtime to resolve each generic function to a function pointer after compilation by the JIT.

In another embodiment a computer system implements type checking at compile time and at runtime. The computer system receives a portion of software code for a distributed software application where the software code is written as a generic function in a computer programming language that supports reflection. The computer system presents a function signature at runtime to a just in time JIT compiler. The function signature describes which of multiple different input and output data types the generic function is configured to work with. The computer system performs type checking on the generic function at compile time and at runtime to determine whether type based errors exist in the software code and implements reflection at runtime to resolve each generic function to a function pointer after compilation by the JIT.

The following discussion now refers to a number of methods and method acts that may be performed. It should be noted that although the method acts may be discussed in a certain order or illustrated in a flow chart as occurring in a particular order no particular ordering is necessarily required unless specifically stated or required because an act is dependent on another act being completed prior to the act being performed.

Embodiments described herein may comprise or utilize a special purpose or general purpose computer including computer hardware such as for example one or more processors and system memory as discussed in greater detail below. Embodiments described herein also include physical and other computer readable media for carrying or storing computer executable instructions and or data structures. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer readable media that store computer executable instructions in the form of data are computer storage media. Computer readable media that carry computer executable instructions are transmission media. Thus by way of example and not limitation embodiments described herein can comprise at least two distinctly different kinds of computer readable media computer storage media and transmission media.

Computer storage media includes RAM ROM EEPROM CD ROM solid state drives SSDs that are based on RAM Flash memory phase change memory PCM or other types of memory or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to store desired program code means in the form of computer executable instructions data or data structures and which can be accessed by a general purpose or special purpose computer.

A network is defined as one or more data links and or data switches that enable the transport of electronic data between computer systems and or modules and or other electronic devices. When information is transferred or provided over a network either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a transmission medium. Transmission media can include a network which can be used to carry data or desired program code means in the form of computer executable instructions or in the form of data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer readable media.

Further upon reaching various computer system components program code means in the form of computer executable instructions or data structures can be transferred automatically from transmission media to computer storage media or vice versa . For example computer executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module e.g. a network interface card or NIC and then eventually transferred to computer system RAM and or to less volatile computer storage media at a computer system. Thus it should be understood that computer storage media can be included in computer system components that also or even primarily utilize transmission media.

Computer executable or computer interpretable instructions comprise for example instructions which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language or even source code. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather the described features and acts are disclosed as example forms of implementing the claims.

Those skilled in the art will appreciate that various embodiments may be practiced in network computing environments with many types of computer system configurations including personal computers desktop computers laptop computers message processors hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers mobile telephones PDAs tablets pagers routers switches and the like. Embodiments described herein may also be practiced in distributed system environments where local and remote computer systems that are linked either by hardwired data links wireless data links or by a combination of hardwired and wireless data links through a network each perform tasks e.g. cloud computing cloud services and the like . In a distributed system environment program modules may be located in both local and remote memory storage devices.

Additionally or alternatively the functionally described herein can be performed at least in part by one or more hardware logic components. For example and without limitation illustrative types of hardware logic components that can be used include Field programmable Gate Arrays FPGAs Program specific Integrated Circuits ASICs Program specific Standard Products ASSPs System on a chip systems SOCs Complex Programmable Logic Devices CPLDs and other types of programmable hardware.

Still further system architectures described herein can include a plurality of independent components that each contribute to the functionality of the system as a whole. This modularity allows for increased flexibility when approaching issues of platform scalability and to this end provides a variety of advantages. System complexity and growth can be managed more easily through the use of smaller scale parts with limited functional scope. Platform fault tolerance is enhanced through the use of these loosely coupled modules. Individual components can be grown incrementally as business needs dictate. Modular development also translates to decreased time to market for new functionality. New functionality can be added or subtracted without impacting the core system.

For instance the user may input a generic function into the IDE which is received at module . The generic function may include software code and or a function signature . The function signature may describe which of a variety of different input and output data types the generic function is configured to work with. Each of these input and output data types may be used with the generic function . Indeed the generic function is designed to work with many different types so that a developer can write a single function a generic function and have that function work with multiple different data types.

In some cases invocation of methods in a distributed runtime environment sometimes referred to as Remote Procedure Calls or RPCs may be a complex process which involves the registration of specific functions as part of a service deployment. This may require system administrative privileges on the part of the person whose job it is to deploy the software. Moreover the process may not allow the user to add delete or modify functionality. The generic functions described herein allow distributed applications to be created and subsequently modified to add delete or modify functionality. A distributed runtime may be provided which leverages programming language reflection to provide this functionality to parallel programmers e.g. user . From the user programmer s point of view distributed applications can be coded and run with virtually no features that are explicitly parallel.

In some embodiments the developer may not be made aware of any remote procedure call requirements. Still further the developer may not necessarily be aware that the only portions of their application which run in parallel are those functions supplied by the provided parallel libraries. The runtime may offer a collective API which executes a specified method e.g. a C method on all parallel ranks. The collective implementation may be extended to include support of generic functions and function overloading as well as allowing multiple input arguments and combinations of data types.

Some embodiments may implement a just in time JIT compiler along with programming language reflection e.g. C reflection . This provides additional functionality and allows even greater programmability and code reuse in a parallel environment. Functions are described textually in the runtime by utilizing reflection APIs to obtain their containing class and method names. Runtime arguments may be serialized for transport within the collective implementation. In some cases the serialization may be provided by the programming language itself. Transport and invocation of the collective method may be accomplished by broadcasting the method signature along with the serialized input arguments. Generic functions e.g. may be identified via reflection and will in addition to receiving the actual runtime arguments receive a collection of the type signatures which may be used by reflection APIs to resolve the actual address of the overloaded or type specialized function that is to be invoked. Once a local method is resolved and the runtime arguments are de serialized then the selected method can be invoked on each of the parallel ranks. Error handling and transport of exceptions for processing may be implicitly provided in such implementations. These concepts will be explained further below with regard to methods and of respectively.

In view of the systems and architectures described above methodologies that may be implemented in accordance with the disclosed subject matter will be better appreciated with reference to the flow charts of . For purposes of simplicity of explanation the methodologies are shown and described as a series of blocks. However it should be understood and appreciated that the claimed subject matter is not limited by the order of the blocks as some blocks may occur in different orders and or concurrently with other blocks from what is depicted and described herein. Moreover not all illustrated blocks may be required to implement the methodologies described hereinafter.

Method includes an act of receiving a portion of software code for a distributed software application the software code being written as a generic function in a computer programming language that supports reflection act . For example receiving module of computer system may receive or otherwise access generic function . The generic function includes software code that works with multiple different data types without needing to rewrite the function. The generic function may be coded in one of a variety of different programming languages that support reflection. The generic function allows the use of multiple input arguments of the same or different types. The generic function also allows multiple different combinations of data types including int float double char and other known data types.

In addition to the above generic functions may also be usable in a software application or other function without being formally registered beforehand. Typically each function must be registered before it can be used in a function. Moreover distributed application functions typically specify that functions are to be looked up on a lookup table. Generic functions however as described herein can be used without performing a table lookup beforehand. In some cases the generic function may be thought of as a template that is usable with a multiple different data types. The template may be implemented for example to generate at least two different functions using different data types. The compiler e.g. JIT then selects the appropriate function based on the incoming data type.

Method also includes an act of presenting a function signature at runtime to a just in time JIT compiler the function signature describing which of a plurality of input and output data types the generic function is configured to work with act . For example the function signature of generic function may be presented at the JIT compiler . The function signature specifies to the compiler which input and output data types and respectively the generic function works with and as a result which data types the compiler can expect to see. In some cases serialization may be used to package type signatures with function information and arguments. For example serialization may be used to package type signatures with function information and arguments when performing an add operation on an integer array.

In some embodiments user may be able to add one or more additional functions by broadcasting function signature and type information to various ranks. For instance various ranks may exist within the message passing interface MPI system for distributing messages in a distributed or parallel application. The additional functions may be added by broadcasting function signatures and associated type information for the types that will be used. Then the functions may be used in the distributed application. Additional method invocation steps may be performed by reflection during runtime by the JIT compiler . Moreover type checking is performed e.g. by type checking module at runtime and at compile time to determine whether type based errors exist in the software code. This is in contrast to most systems that only perform compile time or runtime checks.

Method further includes an act of implementing reflection at runtime to resolve each generic function to a function pointer after compilation by the JIT act . Accordingly the reflection function built into many modern programming languages e.g. reflection module may be used to resolve the generic function to a function pointer after compilation by JIT compiler . In other systems unique identifiers are cached along with a local function pointer and thus transport between processes is automated through the use of a remote procedure call RPC compiler. In embodiments described herein reflection allows the executing runtime to determine the desired generic methods on the fly by providing sufficient data type information e.g. input and output types and along with text strings which identify the generic method. Indeed the generic software function may be described textually in the runtime and various reflection application programming interfaces APIs may be used to obtain the generic function s corresponding containing class and method names. When reconstituted on MPI ranks greater than zero along with the number and type declarations supplied by the user or compiler the reflection capabilities provide the application writer with most if not all the capabilities and benefits of utilizing function delegates but in the context of a distributed parallel implementation. Thus generic functions may be used by a developer to provide functions with a variety of different data types.

Turning now to a flowchart of a method for implementing type checking at compile time and at runtime is illustrated. The method will now be described with frequent reference to the components modules and data of environment of of .

Method includes an act of receiving a portion of software code for a distributed software application the software code being written as a generic function in a computer programming language that supports reflection act . For example receiving module of computer system may receive software code that is written as a generic function . As explained above generic function templates may be used such that the generic function can work with a variety of different data types. Generic function templates may also prevent users from having to hand code type specific methods as the one template works with a variety of different data types. For example if a developer was writing a sort function for integers a sort function for strings and a sort function for doubles the developer would not have to build a separate dispatch table with each type rather with generic functions the developer can write one version of sort function use generic parameters and write one implementation that works for all data types. The compiler then picks the correct implementation based on the incoming data type.

In some cases the generic software function may be written as an overloaded or type specialized function. This overloaded function may be specially configured for use in parallel or distributed functions. In such cases distributed input objects may trigger parallel invocation of the overloaded function via a collective action command. As mentioned above transport and invocation of a collective method may be accomplished by broadcasting the method signature along with various serialized input arguments.

Method also includes an act of presenting a function signature at runtime to a just in time JIT compiler the function signature describing which of a plurality of input and output data types the generic function is configured to work with act . The runtime and JIT compiler determine one or more appropriate functions to perform based on the received generic software function. The type checking module may then perform type checking on the generic function at compile time and at runtime to determine whether type based errors exist in the software code act .

As shown in environment of type checking module may perform type checking at both compile time and at runtime . The results of the compile time check A and the results of the runtime check B may be combined and sent to the user . The results may indicate to the user whether a type problem exists. By checking at both compile time and at runtime problems caused by data typing errors may be avoided. Moreover performing type checking on the generic function at compile time and at runtime may at least in some cases avoid wrapping arguments as objects. Method then implements reflection at runtime to resolve each generic function to a function pointer after compilation by the JIT act . The function pointer may be sent to the user as results or or may be displayed within the integrated development environment for use by the developer in coding other functions or applications.

Accordingly methods systems and computer program products are provided which provide a generic software function for multiple different data types in a distributed environment. Moreover methods systems and computer program products are provided which implement type checking both at compile time and at runtime.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

