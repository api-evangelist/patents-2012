---

title: Discovering object definition information in an integrated application environment
abstract: Provided is a method, system, and program for providing an object discovery agent (ODA) client. There is one object discovery agent (ODA) client and at least one ODA, wherein each ODA is associated with one application and includes: (i) application programming interfaces (APIs) to communicate with the associated application to discover definition information on objects maintained by the application and (ii) code to communicate with the ODA client. The ODA client communicates with one of the at least one ODA to cause the ODA to gather definition information on at least one object used by one application. The gathered object definition information is provided to an integration server to integrate the object in an environment including heterogeneous objects from different applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09218225&OS=09218225&RS=09218225
owner: International Business Machines Corporation
number: 09218225
owner_city: Armonk
owner_country: US
publication_date: 20120723
---
This application is a continuation of U.S. patent application Ser. No. 12 142 650 filed Jun. 19 2008 which is a continuation of U.S. patent application Ser. No. 11 008 306 filed Dec. 8 2004 and issued as U.S. Pat. No. 7 406 474 on Jul. 29 2008 all of which are incorporated herein by reference in their entirety.

The present invention relates to discovering object definition information in an integrated application environment.

In an integrated application environment an integration server enables data to be integrated among heterogeneous applications and the data objects used by the heterogeneous applications. The integration server maintains a mapping for each application specific business object maintained in the integrated application environment that defines how the data in an application specific business object maps to a generic business object. In this way data may be integrated among heterogeneous applications by transforming data from a source application specific business object to a generic business object and then from the generic business object to a target application specific business object. In this way data generated and maintained by a source application may be integrated with a target application.

Before the mapping can be generated the user or developer of the integrated application environment needs to determine the definition and format of the business objects and then provide that definition to the integration server to generate the mappings.

Provided is a method system and program for providing an object discovery agent ODA client. There is one object discovery agent ODA client and at least one ODA wherein each ODA is associated with one application and includes i application programming interfaces APIs to communicate with the associated application to discover definition information on objects maintained by the application and ii code to communicate with the ODA client. The ODA client communicates with one of the at least one ODA to cause the ODA to gather definition information on at least one object used by one application. The gathered object definition information is provided to an integration server to integrate the object in an environment including heterogeneous objects from different applications.

In the following description reference is made to the accompanying drawings which form a part hereof and which illustrate several embodiments of the present invention. It is understood that other embodiments may be utilized and structural and operational changes may be made without departing from the scope of the present invention.

The integration server maintains object mappings which provides information to enable the integration server to map the content of one application specific object to a generic object and then map the content of the generic object to another application specific object . In this way information produced by the heterogeneous applications stored in their heterogeneous objects may be integrated. Integration tools comprises development tools that the user would utilize to create the object mappings and other complex artifacts the integration server requires to provide enterprise application integration EAI .

The user maintaining the integration server may deploy an object discovery agent ODA client and ODA components that are used to collect definition information on the objects . The integration server uses this object definition information to generate the object mappings . The ODA client may generate an ODA client graphical user interface GUI that enables a user to control the ODA client to interact with ODAs to control how object definition information is gathered. For instance the ODA client GUI may enable the user to review objects available at the applications and select those objects for which definition information is gathered to enable selective definition information gathering. In one embodiment the ODA client may be deployed at the integration server and a separate ODA is deployed for each application in the system including the application 

The ODAs include a communication protocol layer that enables the ODAs to communicate with the ODA client over the network or within a single system if the ODA client and ODA are on a same platform. ODA interfaces comprise the methods and services that the ODA client may invoke on the ODAs via the client access APIs . The ODA Client Access APIs comprise the APIs the ODAs call to invoke operations and services on the ODA client . The ODA object APIs comprise the APIs the ODAs call to interface and communicate with the application associated with the ODAs and extract information on the objects used by the application . The content interfaces provide the methods and interfaces to enable the ODAs to package accessed object definition information in different content types such as an XML file text file etc. The ODA object APIs and content interfaces are APIs written by the users to connect to specific applications 

If at block the user selects to receive information on further child object nodes of selected objects then the ODA client sends at block to the ODA as a request for information on child object nodes of the selected listed object node. In response the ODA generates at block information on the selected child nodes and returns to the ODA client. The ODA client generates at block the GUI displaying the previous objects from previous levels and the selected child node objects in a hierarchical tree structure in the GUI . Control returns to block to wait for further user action. When the user selects to receive definition information for selected objects from the hierarchical list of object nodes control proceeds to block in to communicate to the ODA selection of at least one of the objects used by the associated application. At this point the ODA client requests at block the ODA to generate application specific object definitions provided by the ODA in all the callback and on request content types they support.

For the content types transferred via the call back method the ODA client asynchronously waits for the ODA to return definition information in the different content types e.g. an XML file flat file etc. . If at block the ODA client provides object content on a callback then the ODA client asynchronously requests at block the ODA to generate as described at blocks the callback content. Otherwise if the object definition information is provided by the ODA using the on request transfer method i.e. synchronously from the no branch of block then the ODA client synchronously requests at block for each on request content the ODA to generate as described in blocks the content and return the size and count of the object definition information. The ODA client selects at block an order of retrieving object definition information and then retrieves at block the on request object definition information in the selected order.

From block or the ODA generates at block the definition information for the selected objects by communicating with the application . With respect to if at block the ODA needs additional parameter value information to generate the definition information for the selected objects then the ODA requests at block additional parameters via the client callback interface from the ODA client . The ODA client obtains at block the requested parameter values from the user via the GUI and returns to the parameter values to the ODA to use to gather the definition information for the objects from the application 

From block or the no branch of the ODA returns at block to the ODA client definition information for the at least one selected object and additional object definition information generated in response to any configuration information from the ODA client. If the ODA client had requested in the on request transfer method an order to return object definition information in different content types then the ODA returns the definition information in the content types in the requested order. Both the definition information and additional definition information may be in the format of the selected content type.

Upon receiving at block all the object definition information the ODA client provides the gathered object definition information to the integration server to integrate the object in an environment including heterogeneous objects from different applications. The integration server may generate at block object mappings from the object definition information for objects used by the applications where each mapping provides an association of information in one application object to a generic object. The object mappings are used to transform information from one source application object to the generic object and then from the generic object to one target application object.

Described embodiments provide techniques to enable a user of an integrated application environment to discover definition information for heterogeneous objects in the environment to enable the integration of information between heterogeneous objects and applications.

The described operations may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof. The term article of manufacture as used herein refers to code or logic implemented in hardware logic e.g. an integrated circuit chip Programmable Gate Array PGA Application Specific Integrated Circuit ASIC etc. or a computer readable medium such as magnetic storage medium e.g. hard disk drives floppy disks tape etc. optical storage CD ROMs optical disks etc. volatile and non volatile memory devices e.g. EEPROMs ROMs PROMs RAMs DRAMs SRAMs firmware programmable logic etc. . Code in the computer readable medium is accessed and executed by a processor. The code in which preferred embodiments are implemented may further be accessible through a transmission media or from a file server over a network. In such cases the article of manufacture in which the code is implemented may comprise a transmission media such as a network transmission line wireless transmission media signals propagating through space radio waves infrared signals etc. Thus the article of manufacture may comprise the medium in which the code is embodied. Additionally the article of manufacture may comprise a combination of hardware and software components in which the code is embodied processed and executed. Of course those skilled in the art will recognize that many modifications may be made to this configuration without departing from the scope of the present invention and that the article of manufacture may comprise any information bearing medium known in the art.

The illustrated operations of and show certain events occurring in a certain order. In alternative embodiments certain operations may be performed in a different order modified or removed. Moreover steps may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel. Yet further operations may be performed by a single processing unit or by distributed processing units.

The foregoing description of various embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

