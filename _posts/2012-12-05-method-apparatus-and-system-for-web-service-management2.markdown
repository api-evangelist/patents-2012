---

title: Method, apparatus and system for web service management
abstract: A method and an apparatus for realizing web service. An apparatus having a binary web service interface to communicate with nodes operationally connected to the apparatus using a binary web service, the nodes having one or more resources, the binary web service interface being configured to receive information from a node whenever a resource of a node changes or whenever a pre-configured event regarding a resource occurs. The apparatus also has an interface for communicating with web applications making use of the resources and ap component for receiving subscriptions regarding the information received from the nodes and providing the subscribed information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09614877&OS=09614877&RS=09614877
owner: ARM FINLAND OY
number: 09614877
owner_city: Oulu
owner_country: FI
publication_date: 20121205
---
This patent application claims priority to Finish Patent Application No. 20116233 filed 7 Dec. 2011 the disclosure of which is incorporated herein by reference in its entirety.

Disclosed embodiments relate to a method an apparatus and a system for web service management. In particular disclosed embodiments relate to managing web services in networks comprising machine to machine systems.

The following description of background art may include insights discoveries understandings or disclosures or associations together with disclosures not known to the relevant art prior but provided by the disclosed embodiments. Some of such contributions may be specifically pointed out below whereas other such contributions will be apparent from their context.

In modern communication and computer networks management of network infrastructure equipment such as personal computers servers and printers is an important part of the operation of the network. In a large network comprising tens and hundreds of devices the management of devices requires a systematical approach to be efficient or even possible. Today the management of infrastructure is performed using standards like the Simple Network Management Protocol SNMP and Netconf. These protocols enable the monitoring and possible control of devices connected to the network in a controlled and efficient manner. These methods work well in an Ethernet based office information technology IT environment comprising devices having processor power. Power consumption traffic overhead and implementation complexity are not a concern in this environment.

Enterprises are rapidly connecting Machine to Machine M2M systems into their backend IT infrastructure for e.g. energy monitoring remote machine monitoring building automation and asset management. M2M systems often include very simple cheap battery powered devices connected via deep low bandwidth access networks. The scale of devices in an M2M network is also massively different including even up to millions of devices in a single management domain.

Traditional IT system network management solutions and existing protocols like SNMP are too inefficient and complex to managing M2M systems end to end.

Prior art machine to machine systems have solved this problem by building monolithic vertical technology all the way from the device to the backend server often employing proprietary protocols. ISO IEC 14908 based protocol LONtalk is an example of such a system. ISO stands for International Organization for Standardization and IEC for the International Electrotechnical Commission.

More recently as machine to machine devices have become IP enabled systems have become more open by using IP as a networking protocol but in order to keep the system efficient they employ proprietary protocols.

Finally some devices are starting to be connected to the web however this is now done using standard HTTP TLS TCP technology which is not suitable for constrained devices or networks. Here HTTP is the Hypertext Transfer Protocol TLS Transport Layer Security and TCP the Transmission Control Protocol.

These solutions are not designed for deep networks and extremely large numbers of devices with small processing power and minimum power consumption.

Disclosed embodiments provide a solution for managing Machine to Machine systems and accessing resources offered by M2M devices.

A first disclosed embodiment provides an apparatus comprising a binary web service interface to communicate with nodes operationally connected to the apparatus using a binary web service the nodes comprising one or more resources the binary web service interface being configured to receive information from a node whenever a resource of a node changes or whenever a pre configured event regarding a resource occurs an interface for communicating with web applications making use of the resources a component for receiving subscriptions regarding the information received from the nodes and providing the subscribed information.

A second disclosed embodiment provides a method comprising communicating with nodes operationally connected to the apparatus using a binary web service the nodes comprising one or more resources receiving information from a node whenever a resource of a node changes or whenever a pre configured event regarding a resource occurs receiving subscriptions regarding the information received from the nodes and providing the subscribed information.

A third disclosed embodiment provides a method communicating with nodes operationally connected to the apparatus using a binary web service the nodes comprising one or more resources receiving information from a node whenever a resource of a node changes or whenever a pre configured event regarding a resource occurs receiving subscriptions regarding the information received from the nodes and providing the subscribed information.

A fourth disclosed embodiment provides a method comprising receiving from a server address and property information on one or more resources operationally connected to the server sending the server a subscription request regarding a resource to receive a notification from the server whenever a given resource changes and receiving a notification from the server when the resource has changed.

The disclosed embodiments are exemplary. Although the specification may refer to an one or some embodiment s in several locations this does not necessarily mean that each such reference is to the same embodiment s or that the feature only applies to a single embodiment. Single features of different embodiments may also be combined to provide other embodiments.

Data exchange between programs and computers is a vital element. Different programs computers and processors may exchange data without human intervention. Different networks and protocols are used in different environments. On the Internet the Transmission Control Protocol Internet Protocol TCP IP is the basic protocol used in communication. TCP IP takes care of assembling and disassembling the data to be transmitted in packets. IP handles the addressing so that packets are delivered to the correct destination. Above TCP IP the Hypertext Transfer Protocol HTTP is used as a client server protocol. A program may send an HTTP request to a server which responds with another HTTP message.

The exchanges of interoperable messages using APIs Application Program Interfaces provided by servers on the Internet are realized by using web services. A web service can be realized in many ways usually by using a REST Representational State Transfer design with the built in features of a web protocol like HTTP and payload encoding with Extensible Markup Language XML or realized as a remote procedure call via SOAP Simple Object Access Protocol .

Low power wireless networks such as IEEE 802.15.4 based embedded and sensor networks have extremely limited resources for transmitting packets. These networks are very energy efficient and the chip technology is cheap. For this reason the technology is making its way to embedded devices very quickly for automation measurement tracking and control for example.

In low power wireless networks current web service technologies are far too complex headers content parsing and heavy large header and content overhead . Recently binary web service protocols have been developed for low power wireless networks. A binary web service solution includes the use of a suitable web service protocol such as simplified HTTP or a binary web service protocol such as Constrained Application Protocol CoAP and an efficient content encoding such as Efficient XML Interchange EXI Binary XML or Fast Infoset FI .

The architecture consists of a server which hosts backend components of the system. Such a server can be realized on anything from a standard personal computer PC to a server cloud. The server components can be located on the same apparatus or distributed across a cluster. Disclosed embodiments are designed to scale from small M2M systems 1000 s of nodes to very large M2M systems 100 s of millions of nodes .

The server provides a web service interface to web applications that make use of embedded node resources. The web application may be application run in a browser or in standalone software. The application or software may be run in an apparatus capable of Internet communication. The server is configured to communicate using optimized embedded web service algorithms and protocols with local proxy components or directly with nodes over the M2M interface . In at least one disclosed embodiment the functions of this interface include registration events subscription and resource requests. The architecture includes the ability to cluster the backend server across multiple physical or virtual machines called private or public cloud computing .

In at least one disclosed embodiment a local proxy component may be utilized to distribute parts of the intelligence of the server to the edges of the architecture. Thus this component has a subset of the server functionality and from the point of view of nodes in a local constrained network the local proxy looks identical to the server. An M2M interface to the server and an M2M interface to the nodes are used. The local proxy provides discovery proxy registration local lookup subscription aggregation and resource caching services to the nodes using it. There may be any number of local proxies associated with one or more servers.

The constrained nodes in the system have limited memory and processing capabilities may sleep most of the time and often operate using a constrained network technology . Nodes communicate with local proxies or servers using an M2M interface . Each node contains resource registration eventing and subscription related functionality. The nodes comprise one or more resources which may be utilized by the web applications.

The embedded M2M devices or nodes that are being managed by the NMS server can be connected to the server via IP either directly or via the proxy . The interfaces between the node proxy and server are realized using a binary web service protocol over IP. In at least one disclosed embodiment the intermediate proxy may help in the registration process provide extra security and do intermediate web resource caching on behalf of nodes. The M2M devices reside in a constrained network over which traditional management protocols would be too inefficient. The constrained or low power wireless network may be a multihop network comprising a set of wireless low power nodes. In this simplified example one node is illustrated.

In at least one disclosed embodiment the wireless links in the wireless network may be realized by using IEEE 802.15.4 with Internet Protocol v6 6lowpan IEEE 802.15.4 with ZigBee Bluetooth or Bluetooth Ultra Low Power ULP Low Power Wireless Local Area Network proprietary low power radio cellular radio system or any other system suitable for low power transmission. IEEE stands for the Institute of Electrical and Electronics Engineers.

The communication with local proxies or constrained nodes are realized in the server using an M2M interface realized using embedded web services binary web protocol and payload for example with the CoAP protocol. Other protocols such as SMS or optimized HTTP are also supported. Each protocol is realized in the server using an M2M Connector .

The server further comprises a Resource Directory . The server is configured to receive registrations of constrained nodes or end points operationally connected to the server. The nodes and their web resources path along with other meta data are registered with the Resource Directory either directly by the node via a local proxy or by another third party. Thus the Resource Directory is a registry of the resources below the server in the M2M network. This way the Resource Directory eliminates the need for management tools to probe the M2M network directly which is very inefficient .

The server further comprises a Resource Cache . The Resource Cache is a temporary cache of the most recent representation latest payload value of node resources. The cache is accessed any time the server receives a request for a resource. The cache is updated any time a response is made or a notification as a result of a subscription is received. This caching greatly improves efficiency as subsequent requests for that resource are fetched internally rather than loading the constrained M2M network.

In at least one disclosed embodiment the server comprises a Resource Lookup which is configured to provide a lookup interface for web applications and other internal components to discover end points and resources. A web application or internal component may send a lookup request to the server and the Resource Lookup is configured to handle these requests and reply with necessary information. With the knowledge of the domain the end point and a resource a web application or internal component can make a resource request. These requests are handled by a Resource Proxy and the Resource Cache . The Resource Proxy is first configured to check if a local cached copy of the requested resource is available. If a valid copy is found it may be sent as a reply. If the cache does not have a copy of the resource it is requested from the node via an M2M Connector .

In at least one disclosed embodiment the server supports a push interaction model and context awareness via the Subscription Eventing component . Events can be generated by any node and sent to a server using an event name which is received by this component. Likewise web applications and other internal components can make subscriptions for resources. Any time the subscribed resource changes on a node a notification is sent to the Subscription Eventing component. The results of events and notifications are sent to subscribing entities which may be Web applications or internal components. The subscription and event procedures are described in detail below.

In at least one disclosed embodiment resources to be managed on a node are represented as web resources. Resources of the nodes may be defined as Uniform Resource Identifier web resource structure. A web resource is identified by a Uniform Resource Locator URL . A Uniform Resource Locator is a Uniform Resource Identifier URI that specifies where a resource is available and the mechanism for retrieving the resource. An example of an URL is the address of a web page on the World Wide Web such as http www.example.com .

The proxy comprises a Local Resource Directory configured to provide a discovery service so that local nodes can find the correct local proxy and a lookup service so nodes can discover resource of other local nodes for peer to peer communications without loading the system. In these operations incurs no load on connection to the server.

The Resource Proxy component of the proxy accepts incoming requests for resources from the server and attempts to respond using information stored in the Local Resource Cache of the proxy. If requested resource data is not cached the resources are requested using the M2M interface and valid responses received from the nodes are cached for future use in the Local Resource Cache .

In at least one disclosed embodiment the proxy comprises a Subscription Aggregation component which shields constraint nodes from the need to handle multiple subscriptions for the same resource for example when multiple servers use the same local proxy. The component handles all the subscription for resources of nodes registered to it and subscribes to the resources. When multiple subscriptions for the same resource are made it sends only a single subscription to the actual resources and then makes the multiple notifications made. This component can also handle the execution of batch subscriptions.

Node or nodes may have resources of different types registered. A basic type of resource is one which may have a given value. A web application may request the node the value the value is read and reported back to the web application typically immediately after receiving the request. An observable resource is a resource on a node that supports a special observation feature. The observation feature allows asynchronous notifications to be sent from the node to the server each time the resource changes.

In following the subscription and event procedures are described in more detail. In subscription a server makes a special observe request which results in a node to server notification each time the resource changes. In event procedure a node comprises pre configured events. Web applications may create event names at the server. When a given event occurs the node is configured to send a notification to the associated event name that the event occurred. Web applications may subscribe to these events.

The nodes of the system are configured to register their end points and resources with the Resource Directory either directly with the server or via the proxy . In at least one disclosed embodiment the registration is performed using a REST interface containing query parameter meta data and a body with a link description for each resource. The server stores the end point its resources and associated meta data in the Resource Directory . Once the data is in the Resource Directory the data can be looked up resources requested or subscriptions made.

Example of a registration message where an end point called node registers three resources with the Resource Directory. The obs attribute indicates that this is an observable resource.

In this example the node registers a light resource a temperature resource and a Boolean resource such as a switch or a relay. The light resource is an observable resource.

The server offers a REST subscription interface for the web applications to browse subscriptions create new subscriptions create event names and to receive streams of notifications. The server provides the web applications and internal components a possibility to subscribe to observable resources or application events. Once subscriptions have been made the server is configured to receive notifications from the nodes as a result of these subscriptions and events.

In at least one disclosed embodiment the server is configured to provide an interface to enable a web application to subscribe to observable resources using different scopes. In at least one disclosed embodiment this interface is realized as a REST interface or a JMS interface. The subscriptions are modified using GET read subscription PUT create subscription and DELETE remove subscription methods on those URIs. In this example realization the following three interfaces allow subscription to observable resources in different scopes. The first interface allows subscription to a single resource of an end point in a domain 

Combinations of the above interfaces are naturally possible for example subscribing to all the resources in a domain that have the same address path. Furthermore other scopes and variables may be included in the subscription. For example meta data variables may be included in the query string part of the interface. For example 

In a similar way an interface to create PUT and retrieve GET application events can be realized using a REST interface. When a new event name is created it is then available for receiving application events from the nodes through the M2M interface. The following interface can be used for retrieving or creating an application event name.

Once subscriptions for observable events or for application events have been created a mechanism for collecting all the resulting notifications using a domain scope may be provided. This greatly improves the efficiency and scalability of the server an application interface as a single TCP connection per domain is all that is needed to handle large numbers of nodes and resources. In one realization the notification interface is a REST interface with a domain component. Notifications are received by doing an HTTP long polling GET on this interface. The response is a stream of JSON objects containing arrays of notifications. These notifications can be the result of observable resource updates or of application events being received.

Furthermore it is possible for the Resource Directory component of the Server to send notifications to web application via this interface. These include End point creation and removal notifications which are important for a web application to know when new nodes and resources are available or no longer available .

For example assume that a node has an observable resource which is an infrared IR motion sensor. This would be modeled as a motion resource on a node and marked as Observable when registered. When a web application wishes to receive notifications about changes in the motion sensor it makes a subscription to the server. This results in an Observation GET request to the motion resource. After that each time a new motion resource is available it might be a counter of motion IR clicks the node is configured to send an asynchronous notification to the server. The server is configured to send a JSON object of the new representation to each web application that is polling for notifications.

The following example shows one possible structure of a notification JSON object. The object comprises four independent messages. There an update type is related to an observable resource from the end point ep on the path uri along with meta data about the resource where if denotes the interface that the resource provides the payload ct content type and finally the payload itself val . The update messages are notifications that the resource value has changed. Similarly the event type includes the name of the event app along with the same meta data and value fields. The event message informs the recipient that the event has occurred. The create type indicates that a new end point was registered with the Resource Directory.

When a new node registers with the server an entry is made in the Resource Directory of the server. In the entry an observation flag for each resource indicates if it is an observable resource. When the new entry is made in the Resource Directory a Create notification is sent to the web application . The web application will then subscribe to a specific resource the whole end point or the domain of interest. In this example it subscribes to the s light resource of node. The observation is then made using the M2M interface from the server to the node .

Every time the subscribed resource changes the node is configured to send a notification to the server . The server sends a notification to the web application subscribing the resource. The realization of the notification depends on the used protocol. In HTTP a long poll method may be used for example.

Subscription Aggregation is performed in real time. When the first server A subscribes to the s light resource of the node the proxy creates a subscription entry locally including and then observes the resource of the Node if observation is supported or alternatively polls the resource periodically. When a second server B subscribes to that same resource the proxy performs subscription aggregation and combines that into the same subscription entry. It should be noted that the IP address port and Token of the subscription is stored for each subscriber to that resource. When a notification or updated resource result is received for the s light resource of that node by the proxy then a notification is sent by the proxy to each subscriber in the entry for that resource.

In at least one disclosed embodiment batch subscriptions are supported. When a web application wants to subscribe to many resources on an end point or to all the resources on an end point the standard observation mechanism on the M2M interface is inefficient as it requires a separate request for each resource observation. In at least one disclosed embodiment a more efficient mechanism called batch subscription is utilized. In the batch subscription mechanism each node supports a special resource e.g. obs for the purpose of making batch subscriptions. Batch subscriptions are made by sending a POST or PUT request to that resource with a list of links in the payload. Each link corresponds to a new or updated subscription and must include a token field that indicates the token identifier to be included in each notification. By default notifications are sent to the source IP address and port that made the batch request as in the example below 

In at least one disclosed embodiment the system may comprise nodes which may be contacted by a server or a proxy only using an external messaging system such as the short message service SMS of a Global System of Mobile Communication GSM system. In such cases for example when making a CoAP batch subscription over SMS the source IP address and port are included with a query string parameter con that includes the IP address and port to send notifications to 

This way the node may be instructed to contact the server or proxy not by using an SMS but contacting another IP address.

A further optimization of the batch mechanism may be used that allows a collection of resources to be subscribed to 

When this is done any time that resource or any of its sub resources are updated the updated resource representations are sent as an array of JSON objects. This reduces the number of links that need to be sent along with the number of notification messages sent when resources change.

In at least one disclosed embodiment the apparatus implementing aspects may be realized as software in a node a server a computer or a set of computers connected to Internet and a binary web service domain directly or via a proxy router or server.

The computer programs may be in source code form object code form or in some intermediate form and it may be stored in some sort of carrier which may be any entity or device capable of carrying the program. Such carriers include a record medium computer memory read only memory and software distribution package for example. Depending on the processing power needed the computer program may be executed in a single electronic digital controller or it may be distributed amongst a number of controllers.

Some disclosed embodiments may be realized by an apparatus comprising a binary web service interface means for communicating with nodes operationally connected to the apparatus using a binary web service the nodes comprising one or more resources the binary web service interface being configured to receive information from a node whenever a resource of a node changes or whenever a pre configured event regarding a resource occurs means for communicating with web applications making use of the resources and means for receiving subscriptions regarding the information received from the nodes and providing the subscribed information.

It will be obvious to a person skilled in the art that as technology advances the inventive concept can be implemented in various ways. The invention and its embodiments are not limited to the examples described above but may vary within the scope of the claims.

