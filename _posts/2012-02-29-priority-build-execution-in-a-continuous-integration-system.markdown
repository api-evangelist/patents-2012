---

title: Priority build execution in a continuous integration system
abstract: A mechanism for priority build execution in a continuous integration system is disclosed. A method includes executing, by a computing device in a continuous integration system, a low priority job of the continuous integrations system using a resource of the computing device. The method also includes receiving a high priority job to be executed by the computing device and identifying a conflict at the resource when the high priority job is assigned to execute using the same resource that is currently being used for executing the low priority job. When the conflict is identified, the method further includes suspending the execution of the low priority job, recording a state of the low priority job at a time of the suspension of the execution and executing the high priority job using the resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262232&OS=09262232&RS=09262232
owner: Red Hat, Inc.
number: 09262232
owner_city: Raleigh
owner_country: US
publication_date: 20120229
---
The embodiments of the invention relate generally to a computer system and more specifically relate to mechanism for priority build execution in a continuous integration environment.

Continuous integration is a modern technology used in software engineering and software quality assurance. Continuous integration is a software development practice of frequently integrating new or changed code with an existing code repository resulting in multiple integrations. There are various continuous integration systems that exist today. One such system is Jenkins. Jenkins provides a continuous integration system making it easier for developers to integrate changes to a project and making it easier for users to obtain a fresh build.

However Jenkins and other continuous integration systems face the problem of system congestion. System congestion occurs when there are several jobs waiting in a queue to be executed. One solution to system congestion is for the continuous integration system to prioritize incoming jobs to be executed and then execute the high priority infrequent jobs ahead of the low priority jobs. However a problem with this prioritization solution is that the high priority jobs often have to wait until the currently executed jobs are completed which may take several hours or even days. Thus this prioritization solution frequently does not actually solve the above mentioned system congestion problem in continuous integration systems.

Embodiments of the invention provide a mechanism for priority build execution in a continuous integration system.

According to one embodiment of the invention the method includes executing by a computing device in a continuous integration system a low priority job of the continuous integration system using a resource of the computing device. The method also includes receiving a high priority job to be executed by the computing device and identifying a conflict at the resource when the high priority job is assigned to execute using the same resource that is currently being used for executing the low priority job. When the conflict is identified the method further includes suspending the execution of the low priority job recording a state of the low priority job at a time of the suspension of the execution and executing the high priority job using the resource.

According to another embodiment of the invention the method includes managing by a priority build execution component of a computing device in a continuous integration system a low priority job in execution on a first virtual machine VM of the computing device and receiving by the priority build execution module a high priority job to be executed. The method also includes identifying a conflict such that the high priority job is assigned to be executed by the first VM and when the conflict is identified suspending the execution of the low priority job on the first VM and when the execution of the low priority job is suspended recording a state of the first VM in a snapshot file stored in a hard drive of the computing device. The method further includes stopping execution of the first VM and while the low priority job is suspended managing by the priority build execution component execution of the high priority job on a second VM.

According to further embodiment of the invention the method includes managing by a priority build execution component of a computing device in a continuous integration system a low priority job that is execution on a first virtual machine VM of the computing device and receiving by the priority build execution component a high priority job to be executed. The method also includes identifying a conflict such that the high priority job is assigned to be executed by the first VM and when the conflict is identified suspending execution of the first VM and the low priority job. A state of the first VM and the low priority job at a time of the suspension is maintained in a virtual memory of the first VM. While the first VM and the low priority job are suspended the method further includes managing by the priority build execution component execution of the high priority job on a second VM.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not typically these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times typically for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as sending receiving stopping suspending forwarding executing determining identifying recording resuming managing computing generating detecting transferring retrieving storing or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be constructed for the specific purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct an apparatus to perform the method steps. The structure for a variety of these systems will appear as set forth in the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

The present invention may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present invention. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

Embodiments of the invention disclose systems and methods for providing a priority build execution in a continuous integration system. Continuous integration is a software development practice of frequently integrating new and or changed code with an existing code repository resulting in multiple integrations. In one embodiment a priority build execution module is initialized on a host operation system OS to provide a priority build execution optimization for a continuous integration system of the priority build execution module.

The hardware platform may include one or more central processing units CPUs and data storage . In one embodiment the data storage comprises one or more hardware and software devices which may be located internally and externally to the computer system . Examples of data storage may include but are not limited to random access memory RAM non volatile storage memory e.g. Flash EEPROM solid state drives SSD etc. magnetic storage memory e.g. one or more hard drives and optical memory e.g. CDs DVD BlueRay drives etc. . In addition hardware platform may include additional hardware devices such as network interface cards NICs sound or video adaptors photo video cameras printer devices keyboards displays or any other suitable device intended to be coupled to a computer system.

The host OS may include one or more software application programs i.e. applications . In one embodiment the applications executed by host OS comprise multiple JAVA applications. In some embodiments the multiple JAVA applications may be separate individual JAVA applications or multiple versions of the same JAVA applications or a combination of both. The host OS also includes one or more resources . A resource is an application specific or process specific software construct serving as a communications endpoint. In one embodiment the resources are application specific and are utilized to execute the applications executed by the host OS . In one embodiment the one or more resources are network ports each of which are identified by a port number that is based on an application address of the computer system and a communication protocol used over the port. The host OS also includes one or more memories located internally to the computer system . Examples of data storage memories may include but are not limited to random access memory RAM read only memory ROM and cache memory.

In some embodiments the host OS includes a continuation integration system . As discussed above the continuous integration system frequently integrates new or changed code with an existing code repository resulting in multiple integrations. In some embodiments the continuous integration system is interfaced by continuous integration application programming interfaces APIs to access and retrieve the application codes . In other embodiments the continuous integration system continuously integrates new or changed application codes with existing application codes .

In some embodiments a priority build execution module is integrated in the continuation integration system of the host OS . In one embodiment host OS receives a high priority job to be executed while a low priority job is being executed using a resource by the priority build execution module of the continuous integration system . A job is a task or a process to be performed by the computing system . Jobs may be performed by a single or multiple programs commands or script. In one embodiment a low priority job is a process that utilizes a large amount of memory space and or takes a large amount of time to complete. Similarly a high priority job may be a process that utilizes a small amount of memory space and or takes a short amount of time to complete.

In one embodiment when the high priority job is received the priority build execution module determines a resource that the high priority job is assigned to be used for execution and whether there is conflict on the resource . A conflict occurs when the high priority job is assigned to be executed using the same resource that is currently being used for executing the low priority job. As such both the high priority and the low priority jobs are assigned to use the same resource that cannot be shared at the same time. In one embodiment if a conflict is detected then the priority build execution module suspends the low priority job currently using the resource for execution and records a state of the low priority job at the time of the suspension of the execution. In one embodiment the state is condition or a status of the job that changes with time. Once the low priority job is suspended the resource is available to be used for another job and the priority build execution module executes the high priority job using the resource . Upon completion of execution of the high priority job the priority build execution module resumes execution of the low priority job from its recorded state at the suspension using the resource .

In some embodiments virtualization is utilized to provide the priority build execution feature for continuous integration. The host OS may be configured with one or more virtual machines VMs . VMs are portions of software that when executed on appropriate hardware create an environment that virtualizes a physical computer system. Each of the VMs includes a virtual memory VMEM which is a virtualization of memory of host OS . Each of VMs may function as a self contained platform comprising one or more virtual devices and running a corresponding guest OS . The guest OS in each of the VMs may be the same or different OSs. Similar to the host OS the guest OS may be Microsoft Windows Unix Linux Solaris Macintosh OS or any other suitable operating system for managing operations associated with a virtualization environment.

In one embodiment a hypervisor which emulates the underlying hardware platform for VMs is provided and may run on host OS of the computer system . A hypervisor may also be known as a virtual machine monitor VMM a kernel based hypervisor or a host operating system. The hypervisor may support multiple VMs executing on the host OS of computer system . Alternatively more than one hypervisor not shown may be provided to support multiple VMs executing on the host OS .

In one embodiment assume that VM is executing a low priority job using a VMEM . Concurrently host OS receives a high priority job to be executed by the VM . The priority build execution module determines that there is conflict between jobs on VM because the high priority job is assigned to be executed by VM which is already executing the low priority job. Once a conflict is determined between a high priority job and a low priority job the priority build execution module may implement one of two options.

In the first option when the conflict is detected the priority build execution module suspends the execution of the low priority job on the VM . Then a state of the low priority job at the time of the suspension is recorded by taking a snapshot of the VM at the time of the suspension of the low priority job. In one embodiment the snapshot is a file based representation of the state of the VM at the time of the suspension. In one embodiment the snapshot of the state of VM is stored in a hard drive of the computer system such as in the data storage . After the snapshot of VM has been taken and stored execution of VM is stopped on the computing device .

The priority build execution module then executes the high priority job at another VM such as VM using the VMEM . Upon completion of the execution of the high priority job at VM the priority build execution module retrieves the previously recorded VM snapshot file from the hard drive i.e. data storage and resumes the execution of the low priority job from the recorded state of the low priority job at the time of the suspension. The execution of the low priority job is resumed at VM

In the second option when the conflict is detected between the high priority job and the low priority job the priority build execution module suspends the execution of the VM itself which consequently results in the suspension of the low priority job at the same time. The state of the VM which includes the state of the low priority job is maintained in memory such as VMEM of the VM while the VM is in the suspended state. While VM and the low priority job is in a suspended state the priority build execution module executes the high priority job in another VM such as VM using the VMEM . Upon completion of the execution of the high priority job the priority build execution module resumes the execution both the VM e.g. VM and the low priority job from the recorded state in the VM originally executing the low priority job e.g. VM using the VMEM of that VM e.g. .

Method begins at block where a low priority job is executed in a continuous integration system using a resource and one of the memories such as memory . As discussed above a resource is an application specific or process specific software construct serving as a communications endpoint. At block a high priority job is received. At block the priority build execution module determines that a conflict exists when a resource assigned to be used to execute the high priority job is same as the resource that is currently being used for executing the low priority job. At block the priority build execution module suspends the execution of the low priority job using the resource . At block the priority build execution module records a state of the low priority job at the time of the suspension. As discussed above the state is condition or a status of the job that changes with time. Once the low priority job is suspended the resource is available to be used for another job. At block the high priority job is executed using the resource and the memories such as and of the memories . Upon completion of the high priority job at block execution of the low priority job is resumed from its recorded state at the time of the suspension using the resource and the memory

Method begins at block where a low priority job is executed on a VM such as VM using a VMEM such as VMEM associated with the VM . As discussed above the execution of the low priority job is managed in the continuous integration system . At block a high priority job to be executed is received by a host OS . At block priority build execution module determines that a conflict exists between the jobs when the high priority job is assigned to be executed by the VM which is already executing the low priority job. At block the low priority job being executed on the VM is suspended by the priority build execution module . Then at block a state of the VM at the time of the suspension is recorded by the priority build execution module by taking a snapshot of the VM at the time of the suspension of the low priority job. In one embodiment the snapshot is a file based representation of the state of the VM at the time of the suspension. At block the snapshot of the state of VM is stored in a hard drive of the computer system such as in the data storage . After the snapshot of VM has been taken and stored the priority build execution module stops the execution of VM on the computing device at block . The priority build execution module then at block executes the high priority job at another VM such as VM using another VMEM such as VMEM associated with the VMEM . Upon completion of the execution of the high priority job at block the priority build execution module at block retrieves the previously recorded VM snapshot file from the hard drive i.e. data storage . At block the priority build execution module resumes the execution of both the VM and the low priority job from the recorded state of the VM and the low priority job at the time of the suspension.

Method begins at block where a low priority job is executed on VM such as VM using a VMEM such as VMEM associated with the VM . As discussed above the execution of the low priority job is managed in the continuous integration system . At block a high priority job is received by a host OS . At block priority build execution module determines that a conflict exists between the jobs when the high priority job is assigned to be executed by the VM which is already executing the low priority job. At block the priority build execution module suspends the execution of the VM which consequently results in the suspension of the low priority job at the same time. At block the state of VM which includes the state of the low priority job is maintained in the memory VMEM . While VM and the low priority job is in a suspended state at block the priority build execution module executes the high priority job in another VM such as VM using another VMEM such as the VMEM associated with the VM . Upon completion of the execution of the high priority job at block the priority build execution module at block resumes the execution of both the VM and the low priority job from the state maintained in the VMEM in the VM

The computer system includes a processing device a memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute priority build execution logic for performing the operations and steps discussed herein. In one embodiment performance build execution module described with respect to performs the priority build execution logic .

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions e.g. priority build execution logic embodying any one or more of the methodologies of functions described herein such as methods and for providing priority build execution in a continuous integration system described with respect to and respectively. The priority build execution module logic may also reside completely or at least partially within the memory and or within the processing device during execution thereof by the computer system the memory and the processing device also constituting machine accessible storage media.

The machine readable storage medium may also be used to store the priority build execution module logic persistently containing methods that call the above applications. While the machine accessible storage medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

