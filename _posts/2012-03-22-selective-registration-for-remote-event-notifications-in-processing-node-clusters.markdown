---

title: Selective registration for remote event notifications in processing node clusters
abstract: An event notification method for distributed processing systems provides remote and local node event notification in systems that require local registration of an event consumer in order produce an event notifications. To provide notification of an event occurring on a remote node, either event consumers on all nodes in the cluster register locally to receive event notifications and specify that the event is a cluster event, in which case the nodes send notification of their locally-occurring events to all nodes, or remote registrations are accepted at nodes and if a local consumer for the event is not present, a listener thread registers as an event consumer. The listener thread sends the event notifications to the remote nodes registered as consumers for the event by observing communication between the event producer and the local consumer, or receiving the event notifications directly if there is no local consumer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08756314&OS=08756314&RS=08756314
owner: International Business Machines Corporation
number: 08756314
owner_city: Armonk
owner_country: US
publication_date: 20120322
---
The Present Application is a Continuation of U.S. patent application Ser. No. 12 879 414 filed on Sep. 10 2010 and thus claims priority thereto under 35 U.S.C. 120.

The present invention is related to handling of event notifications in large scale distributed computer systems and more specifically to handling of registration for remote event notifications in processing mode clusters.

In large scale distributed computer systems such as those using distributed software models to perform tasks multiple nodes provide independent execution of sub tasks. The nodes are typically organized into clusters in order to perform specific tasks and or as a physical organization of a processing system for example clustering by processor affinity. In order to keep such a system operational and further to provide indication of events occurring at one node that either require a reaction from another node or indicate to the other node that either an erroneous operating condition has occurred or that a phase of processing is complete. In particular event notification and event logging are operations used to indicate system health to system administrators or software applications including operating systems components.

Health monitoring techniques employed in distributed processing systems perform an important function in that connections to other nodes must be reliable and all of the active nodes that have been assigned tasks need to perform those tasks in order to ensure that the totality of the processing requirements are met and in a timely fashion. The health of a node based distributed processing system is typically monitored by 1 a heartbeat messaging system which passes messages between the nodes and a central monitoring component and 2 an event notification system that signals interested nodes when events occur on other nodes. Event notification systems in node based distributed processing systems typically require an interested application a consumer to register to receive event notifications either with a centralized event manager or with the processes or objects that generate the events an event producer .

The invention provides event notification methods that provide local and remote event notification to event consumers in systems that require a local consumer for event notification. The methods always provide a local consumer at a node for which a remote notification is needed where the remote notification is directed to a node having an interested consumer.

In one embodiment of the invention event consumers register locally to receive event notifications for a particular event type and specify whether or not they are to receive notifications when the event type occurs on a remote node using an indication that the event of interest is to be handled as a cluster event. A cluster event is an event for which the event consumer should be notified if the event occurs on any node of the cluster. If the event of interest is a cluster event then event consumers are started on all nodes and also register the event as a cluster event. When the event manager receives a request to register for a cluster event when the event occurs the event notification is sent to all other nodes. Otherwise if the event is not a cluster event the event notification is only provided to the local consumer s and is not propagated among the nodes.

In another embodiment of the invention event consumers register to receive event notifications for a particular event type and specify from which nodes they are to receive notifications. If a node registers to receive an event from a remote node and there is no local consumer for the event on the remote node a listener thread registers as a local consumer on the remote node. Otherwise the listener thread monitors communication of the event from the event producer to the local consumer on the remote node. When the event occurs the listener thread on the node that generated the event sends an event notification to only the remote nodes that have registered to receive the event.

The event notification methods can be implemented in a mountable file system in which file or device open read and write requests are received from event consumers and interpreted as event registrations by the file system implementation providing a facile and portable mechanism for providing event notifications between nodes in a distributed processing system. The files within this file system represent events that event consumers may monitor.

The foregoing and other objectives features and advantages of the invention will be apparent from the following more particular description of the preferred embodiments of the invention as illustrated in the accompanying drawings.

The present invention encompasses techniques for event notification in clusters of nodes within distributed computing systems. In particular embodiments of the invention provide remote event notification techniques that may be used within systems that require local event consumers in order for an event producer to generate event notifications and or for the event notification framework to recognize the event notifications. According to one embodiment of the invention a local event consumer is started on every node when an event type is designated as a cluster event. The starting of the local event consumers is the responsibility of the user who starts the monitoring of the event on every node according to the particular service or application that implements the monitoring. If the event type is a cluster event each node sends event notifications to all of the other nodes when an event of that type occurs on the node. According to another embodiment of the invention nodes are informed of a subset of interested nodes that should receive event notifications for an event type and if no local consumer for each particular event type is present on a given node a listener thread registers as a local event consumer.

Referring now to a distributed computer system in accordance with an embodiment of the present invention is shown. A first physical processing node A includes a processor core coupled to a memory that stores program instructions for execution by processor . The program instructions include program instructions forming computer program products in accordance with embodiments of the invention that provide event notification between either physical processing nodes A D virtual processing nodes partitioned within the depicted computer system as will be described in further detail below or both. Processing node A also includes a network interface NWI that couples processing node A to a wired wireless or hybrid network which may be a standardized network such as Ethernet or a proprietary network or interconnect bus. Other processing nodes B D are of identical construction in the exemplary embodiment but embodiments of the invention may be practiced in asymmetric distributed systems having nodes with differing features. Although only four compute nodes A D are illustrated a distributed computer system in accordance with an embodiment of the present invention will generally include a large number of compute nodes connected via one or more networks. The distributed computer system of also includes other resources such as I O devices including graphical display devices printers scanners keyboards mice which may be coupled to the network or one of nodes A D via workstation computers that provide a user interface to administrative personnel and other users. Nodes A D are also coupled to storage devices for storing and retrieving data and program instructions such as storing computer program products in accordance with an embodiment of the invention.

Referring now to communication between multiple nodes of the distributed computer system of is shown. As mentioned above nodes may correspond exactly on a one to one basis with processing nodes A D and other nodes of or nodes may be partitioned in a different manner as virtual processing nodes. For example a single node may have exclusive use of multiple processing nodes e.g. nodes A B and result in a system having a greater number of virtual nodes than processing nodes or alternatively multiple nodes may be implemented on a single processing node e.g. node A. In the present invention each of nodes represents at least one operating system image and one or more applications executing within the operating system image. In general the entire system as depicted may execute a single application but sub tasks within the application are apportioned to the various nodes which may be identical sub tasks or different sub tasks. The present invention concerns event notification within the computer system of in which events are communicated between nodes via event notification messages. Other messages are also passed between nodes including data and program code transmissions and messages as needed to support features of embodiments of the present invention such as indications to remote nodes that event notifications of a particular event type are of interest to another node. A separate physical network may be provided for administrative tasks such as event notification and heartbeat messaging or the same physical networks may be used. Nodes are generally arranged in a cluster which is a group of virtual or physical processing nodes organized to perform a particular task or group of tasks e.g. for a particular customer. As illustrated communication between nodes in a cluster may be accomplished by direct node to node communications or by next neighbor communications in which nodes pass along messages to other nodes . Another alternative is to use a central facility for inter node communication. However since the present invention provides a high availability event notification system having low latency it is generally preferable not to use a central clearinghouse for events and other messages.

While event notification in accordance with embodiments of the present invention may be implemented using a variety of event notification mechanisms such as direct object to object interfaces using operating system maintained signaling object such as semaphores in the depicted embodiment the event notification is provided by a special file system that implements an event manager. Event consumers i.e. the applications or objects interested in receiving event notifications register to receive event notifications by calling file operation functions methods on an interface to the file system. Event producers notify the file system of events via a separate application programming interface API provided by the event manager. The event manager then provides the event notifications to the event consumers interested in the particular events represented by the event notifications. In the depicted embodiment the file system is a kernel extension which facilitates availability and uniformity of the event manager at each node in the system. Further details of a file system based event manager are provided in U.S. Patent Application Publication U.S. 200901991051 which is incorporated herein by reference. The event notification system the Autonomic Health Advisor File System AHAFS disclosed in the above incorporated U.S. patent application does not provide direct event notification between the nodes so a separate layer is used for inter node event communication. The generic methods open and write described below are understood to include specific file operations fopen and fwrite as alternatives or other operations provided in a file system interface that can be used to provide the same type of information flow.

Referring now to information flow within an event notification system according to an embodiment of the invention is shown. A first node A has an event consumer A that is interested in receiving notifications of occurrences of an event type e occurring on any of the nodes in the cluster. Event consumer A calls the open method on the AHAFS file system interface A and then calls the write file system interface with arguments including e to identify the event type and x which is a flag that indicates whether or not the event is a cluster event CLUSTER YES . Event consumer A also provides a callback interface or alternatively a signaling object such as a semaphore for which a thread of event consumer A can wait to the write method. AHAFS interface A then notifies the corresponding event producer A A that event consumer A should receive notifications of occurrences of event e. The registration is provided through a register callback API provided by the event producers that accepts the event identifier and a security credential of the interested event consumer. The security credential of the event consumer is obtained by the AHAFS interface when the event consumer calls the open and write interface methods. For proper notification of cluster event e at event consumer A two actions must be performed within the cluster 1 event consumer A must register event e as a cluster event by calling open and then by calling write to write CLUSTER YES and 2 an event consumer e.g. event consumer B must be started on each of the other nodes e.g. node B of the cluster and must register for notification of event e as a cluster event i.e. by calling the open and then the write method for event e on local AHAFS interface B with CLUSTER YES . Each node responds to such an event registration by sending all events registered as cluster events to all other nodes i.e. AHAFS interfaces A B are implemented such that events marked as cluster events are broadcast to other nodes.

Referring now to event notification information flow in a system in accordance with an embodiment of the invention is shown. When event producer B on node B produces event e local event consumer B is notified and AHAFS interface B determines whether event e is registered as a cluster event. Since event e was registered as a cluster event AHAFS interface B broadcasts the corresponding event notification to the other nodes in the cluster. Node A receives the event notification for event e and notifies event consumer A that event e occurred on node B. Similarly if event producer A generates event e which has the same event type as event e Event consumer A is notified AHAFS interface A determines that event type e is registered as a cluster event and transmits an event notification for event e to the other nodes in the system. Node B receives the event notification for event e and AHAFS interface B notifies event consumer B that event e has occurred on node A. If event e were not registered as a cluster event then only local event consumer A would be notified of event e and similarly only local event consumer B would be notified of event e.

Referring now to a method in accordance with an embodiment of the invention is shown in a flowchart. When a local request is received to register an event from an event consumer step the event is registered with the local event producer step . If the cluster event flag is set decision then the event is registered with AHAFS as a cluster event step otherwise the event registration is complete. When the event is triggered decision the local consumer is notified step . If the event is a cluster event decision the event is propagated to other nodes in the cluster step . Steps are generally repeated and represent an independent process from steps which may also be re entered as events are registered unregistered. The above described embodiments of the invention referenced to represent one manner of providing for remote notification of events with low notification latency. With reference to below another alternative embodiment of the invention will be described.

Referring now to information flow within an event notification system according to an alternative embodiment of the invention is shown. A first node C has an event consumer A that is interested in receiving notifications of occurrences of an event type e occurring a subset of nodes in the cluster. Event consumer A calls the open and write methods on the AHAFS file system interface C with arguments including e to identify the event type and to write a set of node names or node IDs that indicates the nodes on which event consumer A is interested in receiving notifications of occurrences of event e. Event consumer A also provides a callback interface or alternatively a signaling object such as a semaphore for which a thread of event consumer A can wait to the write method. If node C is in the subset of nodes specified by data structure subset AHAFS interface C notifies local event producer A that event consumer A should receive notifications of occurrences of event e. For notification of event e at event consumer A from remote nodes specified in subset AHAFS interface C sends registration requests to other nodes specified in data structure subset. The remote nodes e.g. node D receive the registration requests and if the local AHAFS interface D determines that no existing registration exists for event e e.g. from event consumer B a registration is made by a listener thread that provides other functions as detailed below so that listener thread will receive direct notification of events produced by event producer B and can send event notifications to nodes that have indicated interest in event e on node D including node C. Otherwise if a registration for event e exists e.g. by local event consumer B then AHAFS interface D only records the particular node and event consumer interested in event e on node D.

Referring now to event notification information flow in a system in accordance with the alternative embodiment of the invention is shown. When event e occurs on node D i.e. event producer B generates an event notification for event e which is reported to event consumer B if event consumer B is registered to receive notifications for event e on node D. Otherwise listener thread has been registered to receive the notification as a proxy on node D. In either case listener thread either snoops on the event notification passed between event producer B and event consumer B for event e or receives the event notification directly as a proxy for one or more remote nodes. Listener thread sends the event notification to remote nodes according to the remote nodes interested in event e as recorded by AHAFS interface B. Node C receives the event notification for event e determines the interested event consumer s recorded by AHAFS interface A and delivers an event notification for event e to event consumer A.

Referring now to a method in accordance with the alternative embodiment of the invention is shown in a flowchart. When a local request is received to register an event from an event consumer for a subset of interested nodes step if the local node is included in the subset decision then the event is registered with the local event producer step . If there are remote nodes in the subset decision a registration request is sent to those nodes step . When the requests are received at the remote nodes step the node issuing the request is added to the subset of nodes to receive notifications for the particular event step . If there is a local consumer registered to receive notifications for the event decision registration is complete. Otherwise if there is no local consumer registered to receive notifications for the event decision then a listener thread is registered as a local consumer step .

Referring now to a method in accordance with the alternative embodiment of the invention is shown in a flowchart. When the event is triggered decision the local consumer which can be an event consumer or a listener thread is notified step . If the local consumer is a listener thread decision the event is received by the listener thread step . Otherwise if the local consumer is an event consumer decision the listener thread snoops on the event notification and the event notification is copied step . The event notification is then sent to the interested subset of remote nodes step .

As noted above the present invention may be embodied as a system method and or a computer program product. A computer program product may be embodied in firmware an image in system memory or another memory cache stored on a fixed or re writable media such as an optical disc having computer readable code stored thereon. Any combination of one or more computer readable medium s may be used to store the program instructions in accordance with an embodiment of the invention. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing.

In the context of the present application a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device. A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. Further while the illustrative embodiment is directed to an AIX AIX is a trademark of IBM or other type of UNIX operating system UNIX is a trademark of The Open Group in which the event notification is provided by a mountable file system provided as a kernel extension it is understood that the techniques of the present invention can be applied in event monitoring systems executing under any operating system and can be implemented using proprietary or standardized signaling interfaces as an alternative to the file system interface provided in the depicted embodiments.

While the invention has been particularly shown and described with reference to the preferred embodiments thereof it will be understood by those skilled in the art that the foregoing and other changes in form and details may be made therein without departing from the spirit and scope of the invention.

