---

title: Seamless vector map tiles across multiple zoom levels
abstract: Rendering map tiles with style data for zoom levels other than the style data intended for that tile at its nominal zoom level can be used to avoid abrupt changes between map tiles. Particularly when changing zoom levels, use of styles from more than one level may create an uneven look. To address this, either the new data may be displayed with the style for the previous zoom level or the old data may be presented with the style for the new zoom level style until all tiles for the new zoom level are received. At that time, all the map tiles may be displayed using the style for the new zoom level along with the map data intended for that zoom level. Displaying map tiles at a first zoom level using a progression of styles from other zoom levels may also be used when creating a perspective view map.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08937627&OS=08937627&RS=08937627
owner: Google Inc.
number: 08937627
owner_city: Mountain View
owner_country: US
publication_date: 20120328
---
The present disclosure relates to map rendering systems such as electronic map display systems and more specifically to a map rendering system that renders map elements using style data from different zoom levels across concurrently displayed map data.

The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors to the extent it is described in this background section as well as aspects of the description that may not otherwise qualify as prior art at the time of filing are neither expressly nor impliedly admitted as prior art against the present disclosure.

Today maps of geographic regions may be displayed by software applications running on a wide variety of devices including mobile phones car navigation systems hand held global positioning system GPS units tablets laptops and other computers. Depending on the application and or user preferences maps may display topographical data street data urban transit information traffic data etc. Further some applications display maps in an interactive mode so that a user may operate various controls radio buttons scrollbars etc. to change the zoom level or pan the camera to a new location for example. A user in some cases also may select or unselect the display of certain information. For example the user may operate the appropriate control to turn on the display of bicycle trails.

In at least some vector mapping systems the map data to be displayed is downloaded as tiles of vector data specified for a certain zoom level. The vector data is rendered using style information for the specified zoom level.

In an embodiment a method of rendering graphical map information on a display of a computer device uses zoom level specific styles to display a first map tile of graphical map information on a portion of the display of the computer device at a first zoom level using a zoom level style corresponding to the first zoom level and displays a second map tile of graphical information on a second portion of the display of the computer device at the same time as displaying the first map tile. Displaying the second map tile includes determining a zoom level style associated with a nominal use of the second map tile and displaying the second map tile using a zoom level style different from the zoom level style associated with the nominal use of the second map tile.

In another embodiment a method in a map client at a client device used for rendering a map image at discrete zoom levels receives at the client device style information including zoom level specific styles for rendering map data at each discrete zoom level. For a first map data designated for display at a first zoom level displaying the first map data at the first zoom level using a corresponding first zoom level style and displaying contemporaneously with and contiguous to the first map data a second map data designated for a second zoom level wherein the second map data is displayed using the first zoom level style.

In yet another embodiment a client device may be adapted to execute software code on a processor to display map data on a display of the client device. The client device may include a first module executed on the processor that receives map tile information and style data by zoom level each map tile having a corresponding style data specifying style information unique to each zoom level and a second module executed on the processor that receives user input from a user interface including an indication to change from a first zoom level to a second zoom level. The client device may also include a third module executed on the processor that i displays a first map tile with data for a first zoom level at the first zoom level using style information for the first zoom level and ii concurrently displays a second map tile with data for a second zoom level at the first zoom level using at least in part style information for the first zoom level.

The use of map styles across zoom levels allows the seamless display of map data when there is a mismatch of map data and styles on a display at the same time. There are many circumstances in which map data or map tile from one zoom level may be displayed with different map data or map tile from another zoom level. Overlaying zoom level specific styles on each map tile will cause a visual mismatch. This is particularly true when using vector map data where the style is often applied at the client device using zoom level specific styles.

The term map tile was originally used to describe a raster view of an area at a particular zoom level. The use of vector map data can blur the concept of a map tile because some vector descriptions of map features can be used at multiple zoom levels. However the concept of tile is useful even for vector map data in that there are panning operations or changes in zoom level that result in the importation of new data either adjacent to map data currently displayed or map data with different amounts of detail for the same geographic area.

To render a map image in a web browser or another application the client device may request map data from the map server via a communication network and the map server in response may provide vector data that describes map content as well as style data that indicates how the vector data should be rendered. More particularly vector data may specify various geometric shapes e.g. using mathematical descriptions and indicate how these shapes should be positioned for rendering various map elements such as roads buildings parks bodies of water text icons etc. while style data may describe such visual characteristics or properties such as font and text sizes as well as line thickness e.g. width in pixels line color one or more fill colors etc. for various visual styles that may be applied to the vector data. The map server also may specify which visual styles the client device should apply to various vector based descriptions of map elements.

Style information generally matches the zoom level for which the map data is targeted. Map data may be nominally targeted for a particular zoom level. For example a tile of vector data for a street map at zoom level 15 may have a corresponding style set for that zoom level designating various road widths road edge line styles feature and fill colors etc. Tiles of map data with a nominal use designated for another zoom level may have corresponding different style sets appropriate to each zoom level. To continue with the example a tile of vector data for zoom level 16 that covers a portion of the same geographic area as above may have different road widths road edge styles fill colors etc.

However several situations may occur for which a tile designated for use at a nominal zoom level may not use the corresponding style for that zoom level. For example a tile may be displayed at a zoom level other than its nominal zoom level while waiting for a tile designated for that zoom level. In other examples a style may not be available for a particular tile at the currently displayed zoom level a network interruption may have caused new data to be incomplete or unavailable or a style mismatch may exist between adjacent tiles particularly when data is in transit to the map application. In these and other similar cases the visual mismatches between tiles can be reduced by selectively displaying map data for one zoom level using style information for a different zoom level.

When zooming between levels particularly when zooming between adjacent or nearly adjacent levels the visual presentation of the change between zoom levels can be smoothed as new tiles are received by changing the style of currently displayed data to a style of the new zoom level as adjacent tile data is displayed. Alternatively newly received map data can be displayed using the old zoom level style information until all new map tiles are received and the styles of each tile are updated in a coordinated fashion.

For example when updating adjacent map tiles to a new zoom level there may often be a period of time during the updating process when new map data is available for one tile but not the other. Similarly new data for a map tile may be displayed as the data is received but other map tiles may not be using the same style as the data being received. When displaying the new data with style information for the new zoom level there may be a dramatic mismatch in styles at the border between the tile with new data and the tile with old data displayed at the old style.

Before returning to this topic in detail a brief discussion of mapping basics and mapping system elements is presented. To render a map image in a web browser or another application a client device may request map data from the map server via a communication network and the map server in response may provide vector data and in some cases text data that describes map content. In addition style data may also be received that indicates how the vector data and the text data should be rendered. More particularly vector data may specify various geometric shapes e.g. using mathematical descriptions and indicate how these shapes should be positioned for rendering various map elements such as roads buildings parks bodies of water etc. while style data may describe such visual characteristics or properties as line thickness e.g. width in pixels line color one or more fill colors etc. for various visual styles that may be applied to the vector data. Text data may specify map labels to be displayed for individual or aggregate map elements for example and style data may be applied to the text data to render the text using a particular size color font etc. The map server may specify which visual styles the client device should apply to various vector based descriptions of map elements also referred to herein as vector descriptors or simply vectors . The style data may be sent with each map tile update but in some embodiments a style table may be downloaded that describes styles by zoom level and by map type. The style table may persist through the mapping session or as memory considerations permit the style table may be stored on the device permanently until the memory is needed or until the style table is obsolete.

In some embodiments a map server indicates which visual style applies to a vector based description of a map element for a particular map type at a particular zoom level such as terrain transit traffic bicycle trail etc. at a particular zoom level such as levels 1 19. While there are several ways to group and index styles for simplicity sake this description will simply use an example with some elements of street map types at particular zoom levels. A more complete discussion of style tables may be found in co pending U.S. patent application Ser. No. 13 237 830 filed on Sep. 20 2011 titled Rendering a Map Using Style Identifiers which is hereby incorporated by reference for all purposes.

Referring to a system for supporting client device map applications and map data transfers includes a map server a client device communicatively coupled to the map server via a network and a map database communicatively coupled to the map server . The network may be a wide area network WAN such as the Internet a local area network LAN or any other suitable type of a network. Depending on the embodiment the map database is coupled to the map server via the network or via another communication link as illustrated in . For simplicity only one instance of the map server the client device and the map database is illustrated in . However in other embodiments the system may include more than one map server more than one client device and or more than one map database .

The map server may include a processor and a computer readable memory that stores a map controller in the form of computer instructions for example that may be executable on the processor directly e.g. as compiled code or indirectly e.g. as a script interpreted by another application executing on the processor . The computer readable memory may include volatile memory to store computer instructions and data on which the computer instructions operate at runtime e.g. Random Access Memory or RAM and in an embodiment persistent memory such as a hard disk for example. In an embodiment the map controller includes a dynamic feature controller that generates vector data for various map elements that are provided as map content to the client device . As used herein a map feature or simply feature may correspond to an individual map element such as a building or an aggregation of several map elements such as several buildings a park and several pedestrian paths of a college campus. In general a map feature may be described using one or more vector descriptors.

The map controller may also include a style controller to provide style data to the client . The style controller may provide style data along with vector data provided by the dynamic feature controller in response to various events including receiving a request for map data including map content and style data from the client device or receiving a request for specified styles from the client device among others.

With continued reference to the client device may include a processor to execute instructions and a memory to store instructions and data. The client device also may include an input device and an output device to receive input from a user and provide output to the user respectively. The input device may include one or more of a keyboard a mouse and a touchscreen and the output device may include a touchscreen or another type of a monitor for example. The client device may include various software components such as device drivers operating system OS event handlers etc. to control the input device and the output device so as to implement an interactive user interface. Further software applications executing on the processor may utilize these software components to provide an application specific user interface.

In an embodiment the client device is a so called thin client that depends on another computing device for certain computing and or storage functions. For example in one such embodiment the memory includes only volatile memory such as RAM and a program and or storage unit having persistent memory is external to the client device . In another embodiment the memory includes both volatile and persistent memory components. The memory may be a physical memory having tangible storage locations embodied in physical locations using a manufacturing process and does not include propagated media.

A browser application may include a set of computer readable instructions that execute on the processor . In general the browser application accesses web pages that include content such as text images embedded video etc. and instructions in a mark up language such as Hypertext Markup Language HTML and renders the content on the output device according to the instructions in the mark up language. To this end the browser application may implement functions for generating and processing data packets that conform to the Hypertext Transfer Protocol HTTP parse HTML content encode data according to the Secure Socket Layer SSL protocol request and verify digital certificates etc. as well as user interface functions for receiving various user commands related to navigation rendering and managing web page data. In some embodiments the browser application is configured to interpret instructions in a scripting language e.g. Javascript provided in a web page.

A dynamic map rendering engine may execute as a component of the browser application . Depending on the embodiment the dynamic map rendering engine may be a plugin e.g. a set of compiled instructions that extends the functionality of the browser application and executes on the processor a script e.g. a set of instructions in a scripting language interpreted by the browser application at runtime or another suitable software component. According to one example scenario the dynamic map rendering engine is downloaded when a user operating the client device visits a web page that includes an embedded interactive map. More specifically the web page may include a first hyperlink to an online map server and a certain geographic location as well as a second hyperlink to a copy of the browser application which is required for rendering map data received from the online map server according to the first hyperlink.

Both the client device map server and related equipment may incorporate computer memory that stores data in physical media and is separate from a carrier wave or other transmission media. The methods described herein may be performed using software stored in one or more such computer memories and executed on one more processors of the client device map server or other related hardware such as networking equipment.

During operation the dynamic map rendering engine may receive vector data and style data from the map server generate corresponding map images using the received vector data and the style data and cause the map image to be displayed within a certain region allocated by the browser application . The dynamic map rendering engine may also store available style data in a style table which is disposed in the memory .

In at least some of embodiments the dynamic map rendering engine receives vector data that specifies geometric shapes using mathematical descriptions of points and paths connecting the points. For example rather than specifying each pixel that makes up a raster image of a line segment vector data may specify the two endpoints of the line segment and indicate that the two endpoints are connected by a straight line. The dynamic map rendering engine then may apply style data as appropriate to the specified line segment so that the line segment is displayed with a particular color width etc. As another example the vector data may specify the contour of a triangle and the corresponding style data may specify the color of the contour lines the width of the contour lines and the color of the interior region of the triangle. In other words rather than receiving raster images from the map server the dynamic map rendering engine may receive instructions for drawing a map image on the output device and execute the instructions so as to generate a raster map image. In some cases however vector data also may include raster images as certain component elements that cannot be easily represented in a vector format.

For simplicity the client device is illustrated with a single processor . However the client device in other embodiments may include additional processing units not shown such as a graphics processing unit GPU configured to facilitate image rendering on the output device for example. Further in an embodiment the browser application may utilize a library of graphics functions for efficiently generating a map image. For example the memory may store a plugin such as an OpenGL or Direct3D library having functions for rendering graphics which various applications executing on the client including the browser application may access via an application programming interface API . In another embodiment the memory may store a browser incorporating WebGL or may store a plugin particularly suitable for browser applications. Also in some embodiments the memory stores additional software components that facilitate efficient rendering of images via the output device . For example the memory may store an Adobe Flash plugin or an O3D plugin.

The client device may store in memory executable modules that when executed on the processor cause the dynamic map rendering engine of the client device to perform specialized functions associated with map display. The memory may include a first module that receives map tile information and style data by zoom level where each map tile has corresponding style data specifying style information unique to each zoom level. The memory may include a second module that receives user input from a user interface including an indication to change from a first zoom level to a second zoom level. The memory may include a third module that i displays a first map tile with data for a first zoom level at the first zoom level using style information for the first zoom level and ii concurrently displays at the first zoom level a second map tile with data for a second zoom level using at least in part style information for the first zoom level. The third module may display a portion of the second map tile using the style information for the first zoom level during a time when the second map tile is downloading and the third module may display the second map tile using style information for the second zoom level after the second map tile is downloaded in full.

As illustrated in a first representative tile is shown at the higher zoom level but is reusing the map feature data from the previous zoom level. That is data from zoom level 18 is illustrated being redrawn at an expanded scale for zoom level 19. In this example tile is drawn using the style for zoom level 18 LS. A second representative tile has data for the new zoom level 19 showing additional features not illustrated at the previous zoom level zoom level 18 as shown for example in tile of see e.g. building . Map tile is drawn using the style for zoom level 19 LS. As illustrated the lines for road edges are darker and the road widths are wider compared to adjacent tile . When the two tiles are drawn according to their respective styles LSfor tile and LSfor tile the two halves will have a visible discontinuity at a point where the feature s for each tile meet but are drawn using different styles. The visual mismatch between tiles and is apparent not only in level of detail but even more so in the style mismatch.

To accommodate a smoother visual transition when changing between zoom levels illustrates an alternate technique of displaying the updated map feature data in a display area when changing zoom levels. Tile corresponding to tile from is drawn as described above with map feature data from the previous zoom level level 18 drawn using style LS also from the previous style. Tile is drawn using updated data for zoom level 19 showing additional detail not found in zoom level 18. As illustrated tile is also drawn using style data for zoom level 18 LS so that in contrast to both map tiles and are drawn using the style from zoom level 18 LS. The additional feature data for tile is visible but the glaring difference in styles is not present and the feature s that bridge between the two tiles match at the boundary .

Even in the scenario where no new map data is available for map tile the map feature data may updated using the style from the previous zoom level and the style for both can be changed together when all the data is ready to display.

Alternatively the process can be implemented using the new style during the transition period. That is during the interim period illustrated in the style for zoom level 19 LS can be used for both map tiles and . This may be advantageous when no new data is expected for tile so that as data is being loaded for map tile the styles will be consistent throughout.

In the illustration of elements in a first rank may be drawn with the appropriate style for example LSfor zoom level 15. Horizontal street widths are fixed and building outlines are relatively dark.

Elements in a second rank may be drawn using a lower zoom level style for example LS applicable to zoom level 12. In the second rank compared to corresponding elements in the first rank horizontal streets are narrower and their line thicknesses are thinner building outlines are lighter. Fill colors if used may be lighter or more transparent according to style rules.

At a third rank horizontal streets are reduced to a single line and building outlines are thinner than previous ranks according to a lower zoom level style e.g. LS. For map elements with lower priorities such as smaller buildings parks etc. the line thicknesses may be reduced to zero and therefore may not drawn at all. In one embodiment a zoom level style for map elements in this rank would be two or more zoom levels removed from the zoom level style in the first rank so that interpolation of zoom level styles is not necessary and may save some processing steps when used on a low powered platform. However interpolation of zoom level styles may also be used for example to smooth transitions between ranks or when using a limited amount of map data. See e.g. the discussion below related to .

Elements in a fourth rank may use such a low level style e.g. LSfor zoom level 8 that all elements but the major cross streets may hidden by virtue of having their corresponding features use zero line widths.

As illustrated in this simplistic example the appearance of distance and perspective can be accomplished simply by applying appropriate zoom level styles to map tiles in the progression of tiles without respect to the actual zoom level for which the data is intended. As illustrated in four ranks are drawn using selected styles. Other embodiments could include all ranks from the front most to zoom level 0 or 1 at the back.

At block the second map tile may be displayed along with the first map tile. The first and second map tiles may be displayed at the same time contemporaneously and may be displayed with one common edge contiguously . The second map tile may be displayed using a zoom level style different from the zoom level style associated with the nominal use of the second map tile. For example if the second map tile has a nominal use at the first zoom level that is the same zoom level as the first map tile the second map tile may be displayed using a zoom level style corresponding to a zoom level other than the first zoom level. In one embodiment this may occur when displaying the first and second map tiles in a perspective view as discussed above with respect to . In that case the second map tile may be displayed graphically above the first map tile and the second map tile may be displayed using a zoom level style for a lower zoom level than the first zoom level.

When displaying map data in a perspective view additional map tiles may be displayed at the first zoom level using successively lower zoom level styles that are interpolated between the highest zoom level style and the lowest zoom level style.

In another embodiment at block the second map tile may have a nominal use at a zoom level other than the first zoom level and the second map tile is displayed using the first zoom level style. Using the example above for illustration the second map tile may be designated for use at the zoom level 16 and may be displayed using the zoom level style for zoom level 15. See e.g. and related description above.

In one embodiment the second map data may be displayed at zoom level 16 using style information for zoom level 15 while the graphical information for the second map data is being downloaded. The second map tile may be displayed using the second zoom level style e.g. the style for zoom level 16 when all the data for the second map tile has been completely received. If appropriate all map tiles may be changed to the zoom level style for the new zoom level after all associated map tile data in the display area is received.

Some legacy applications use a map data server and a map rendering server not illustrated to retrieve map data and render one or more map tiles before sending the rendered image to a client device. The same concepts discussed above are equally applicable to this server side rendering environment. That is style information for one zoom level may be used to render map vector data for another zoom level if intermediate rendered images are to be supplied to a client or if a network interruption or high latency causes the map data to be lost or delayed.

The following additional considerations apply to the foregoing discussion. Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or a combination thereof registers or other machine components that receive store transmit or display information.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. For example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the invention. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for generating map data through the disclosed principles herein. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.

