---

title: Smart card session optimization
abstract: A command destined for a smart card is received. If the command is of a state-altering type that places the smart card in a known state, it is relayed to a smart card reader unless the smart card is currently in the known state. If the command is a POWER OFF command, it is relayed to the smart card reader unless (i) the smart card is currently in the known state and (ii) within a predetermined time from receiving the command, a subsequent command of the state-altering type that places the smart card in the known state is received. If the command is not a POWER OFF command and is not of the state-altering type that places the smart card in the known state, it is relayed to the smart card reader. The command is discarded if not relayed to the smart card reader.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08640966&OS=08640966&RS=08640966
owner: BlackBerry Limited
number: 08640966
owner_city: Waterloo, Ontario
owner_country: CA
publication_date: 20120511
---
The present application is a continuation of U.S. patent application Ser. No. 12 790 940 filed May 31 2010 which in turn is a continuation of U.S. patent application Ser. No. 11 688 935 filed Mar. 21 2007 and issued as U.S. Pat. No. 7 726 568 on Jun. 1 2010 the contents of which are hereby incorporated herein by reference.

The present application relates generally to smart card readers and in particular to communications between a smart card reader and a computer system.

Smart card readers are used in a variety of applications for example in combination with handheld devices and personal computers for security related purposes.

Some operating systems such as Microsoft Windows installed in personal computers include a generic or multipurpose smart card resource manager. Third party vendors may also provide their own smart card readers which may thus require their own smart card reader drivers to be installed for use with the operating system. In such instances the smart card resource manager may communicate with the vendor specific smart card reader driver first in order to access or communicate with the smart card reader.

Improved efficiencies in communications between smart card resource managers smart card reader drivers and smart card readers is desirable.

According to one aspect described herein there is provided a method of facilitating communications between a computer device and a smart card reader having an associated smart card the computer device including a smart card resource manager and a smart card reader service the smart card reader service acting as a relay for commands between the smart card resource manager and the smart card reader. The method comprising the smart card reader service a receiving from the smart card resource manager a first command for placing the smart card in a first state and relaying the first command to the smart card reader b receiving a second command from the smart card resource manager for placing the smart card into a second state and a third command from the smart card resource manager for placing the smart card into the first state and c determining if the smart card was in the first state prior to receiving the second command and i if the smart card is determined to have been in the first state then forgoing relaying the second command and the third command to the smart card reader and ii if the smart card is not determined to have been in the first state then relaying the second command and the third command to the smart card reader.

According to another aspect there is provided a computer device for communicating over a wireless communications link with a smart card reader the computer device comprising a smart card resource manager for providing commands for the smart card reader and a smart card reader service for selectively relaying and filtering commands received from the smartcard resource manager for the smart card reader the smart card reader service being configured for a receiving from the smart card resource manager a first command for placing the smart card in a first state and relaying the first command to the smart card reader b receiving a second command from the smart card resource manager for placing the smart card into a second state and a third command from the smart card resource manager for placing the smart card into the first state and c determining if the smart card was in the first state prior to receiving the second command and i if the smart card is determined to have been in the first state then forgoing relaying the second command and the third command to the smart card reader and ii if the smart card is not determined to have been in the first state then relaying the second command and the third command to the smart card reader.

As suggested above some operating systems such as Microsoft Windows installed in personal computers include a generic or multipurpose smart card resource manager. Third party vendors may also provide their own smart card readers which may thus require their own smart card reader drivers to be installed for use with the operating system. In such instances the smart card resource manager may communicate with the vendor specific smart card reader driver first in order to access or communicate with the smart card reader. In other words the vendor supplied smart card reader driver would merely act as a flow through or relay of any instructions from the smart card resource manager to the smart card reader. A difficulty with such systems is that many commands from the smart card resource manager may be redundant or unnecessary and relaying such commands to the smart card reader may be an inefficient use of time and computational resources. Thus more efficient management of communications between a generic smart card resource manager and a smart card reader is desired.

Reference is first made to which shows an illustrative communication system to which embodiments described herein can be applied. The system includes one or more mobile devices only one of which is shown in that are enabled to communicate with one or more wireless networks . The wireless network may be implemented as a packet based cellular wide area wireless network that includes a number of base stations each providing wireless Radio Frequency RF coverage to a corresponding area or cell. In some embodiments instead of or in addition to a wide area wireless network network may include a local wireless area network such as for example a wireless local area network that conforms to IEEE 802.11 standards such as 802.11b and or 802.11g. In at least some example embodiments the wireless network is connected through intermediate communications links including for example the Internet to one or more enterprise networks each associated with respective mobile devices such that the mobile devices are each enabled to exchange electronic messages and other information with the enterprise networks that they are associated with. At least some of the mobile devices have a further associated secondary mobile device in the form of a smart card reader . Additionally a user of the mobile device and the smart card reader will have access to a personal computer that is connected to the enterprise network over a communications link . In one embodiment the communications link is a local area network or wide area network providing organizational connectivity with the enterprise network . The smart card reader may also be used with the personal computer through either a wired or wireless connection.

Reference is next made to which shows in greater detail an embodiment of the personal computer . The personal computer includes a display sub system and a network communication subsystem for two way communications with the enterprise network . According to one embodiment the communications subsystem may include a wireless communications subsystem including antennas not shown RF transceivers not shown and some signal processing capabilities implemented for example by a digital signal processor not shown . According to another embodiment the communications subsystem may include a wired communications subsystem conforming to the well known Ethernet standard including a 10 Mbps 100 Mbps or 1 Gbps Ethernet connection. The personal computer also includes a controller in the form of at least one microprocessor which is suitably programmed to control the overall operation and functions of the personal computer which are described in more detail below. The personal computer includes peripheral devices or subsystems such as a random access memory a storage device such as a hard disk drive an auxiliary input output I O subsystem e.g. a mouse a serial port e.g. a USB port an input device e.g. a keyboard a speaker a microphone a short range communications subsystem e.g. an infrared transceiver wireless bus protocol such as a Bluetooth system or any other means of local wireless communications and any other device subsystems generally designated by reference .

The microprocessor operates under stored program control with code being stored in the storage device . As depicted in while operational the RAM includes programs including an operating system program or code module such as the Microsoft Windows operating system. Operating systems such as Microsoft Windows typically divide the RAM space into two portions namely a restricted access space such as a kernel space and a user space or functional equivalents thereof. The RAM further includes software applications indicated generally by reference which typically reside in the user space and drivers which typically reside in the kernel space . The user space further includes various application programming interfaces APIs and various user interface UT components . The UI components are the existing functions or routines provided by the operating system that may be called by programs such as the software applications in order to display elements of the graphical user interface to the user of the personal computer .

The operating system code code for specific software applications code for the drivers code for the various application programming interfaces APIs or code for the various user interface UI components is permanently or semi permanently stored on the storage device and may be temporarily loaded into a volatile storage medium such as the RAM during operation of the personal computer . Received communication signals and other data with information may also be stored in the RAM . Code for the specific device applications or other elements of the user space may be swapped back out to the storage device as needed during operation of the personal computer while code related to the kernel space such as many aspects of the operating system code and or the drivers is typically loaded into the RAM upon boot up of the personal computer and is retained in the RAM as long as the personal computer remains powered up.

The stored program control e.g. operating system software applications for the microprocessor also includes a predetermined set of applications or code components or software modules that control basic device operations for example data and text communication applications which are normally installed on the personal computer as the software applications when the personal computer is first configured. Further applications may also be loaded i.e. downloaded onto the personal computer through the operation of networks described above for the auxiliary I O subsystem the serial port or the short range communications subsystem . The downloaded code module or components are then installed by the user or automatically in the RAM or the storage device .

The serial port comprises a USB type interface port for interfacing or synchronizing with another device such as the mobile device or the smart card reader . In one embodiment the serial port may be used to communicate with the smart card reader . The short range communications subsystem provides an interface for communication between the personal computer and other devices including the smart card reader to be described in greater detail in connection with below. For example the subsystem may comprise an infrared communication link or channel a wireless bus protocol such as a Bluetooth communications subsystem or any other localized wireless means of communication.

Reference is next made to which shows in greater detail an example embodiment of a secondary mobile device namely the smart card reader . The smart card reader includes a controller including at least one microprocessor which is suitably programmed to control the overall operation and functions of the smart card reader and an output device e.g. a display module . The smart card reader further includes peripheral devices or subsystems such as a flash memory a random access memory RAM a serial port e.g. a USB port a short range communications subsystem e.g. an infrared transceiver wireless bus protocol such as a Bluetooth system or any other means of local communications a storage component interface e.g. for a memory card or any other data storage device a user input device e.g. a push button and a biometric input device e.g. a fingerprint reader .

The microprocessor operates under stored program control with code or firmware being stored in the flash memory or other type of non volatile memory device or devices . As depicted in the stored programs include an operating system program or code module and other programs or software applications indicated generally by reference . The operating system of the smart card reader further includes a memory card driver component . The memory card driver is responsible for coordinating communications between the smart card reader and a memory card and or between the smart card reader and related drivers of a device to be used in conjunction with the smart card reader such as the drivers of the personal computer . The operating system code code for specific software applications code for the memory card driver or code components thereof may be temporarily loaded into a volatile storage medium such as the RAM . Received communication signals and other data with information may also be stored in the RAM . Additionally the storage component interface receives the removable memory card providing additional storage space for the smart card reader . In one embodiment the memory card may be a smart card similar to the smart cards known to those skilled in the art. The memory card may include fingerprint authentication data password or pin code related data or other security related data. While operation of the smart card reader is described using a smart card it will be understood by those skilled in the art that the smart card reader may be designed using any suitable form of removable media without departing from the intended scope of the smart card reader .

The stored program control e.g. operating system software applications for the microprocessor also includes a predetermined set of applications or code components or software modules that control basic device operations for example management and security related control of the data of the smart card reader and may be installed on the smart card reader as a component of the software applications during the manufacturing process. Further applications may also be loaded i.e. downloaded onto the smart card reader through the operation of the serial port the short range communications subsystem or from the smart card . The downloaded code module or components are then installed by the user or automatically in the non volatile program memory e.g. the flash memory or the RAM .

The serial port comprises a USB type interface port for interfacing or synchronizing with another device such as the personal computer or the mobile device . The serial port is used to exchange data with a device such as the personal computer to be stored on the smart card that is plugged into the storage component interface of the smart card reader . The serial port is also used to extend the capabilities of the smart card reader by providing for information or software downloads including any user interface information to the smart card reader .

In various example embodiments the short range communications subsystem provides an interface for communication between the smart card reader and the personal computer or the mobile device . In one embodiment the short range communications subsystem includes an infrared communication link or channel. In another embodiment the subsystem comprises a wireless RF bus protocol such as a Bluetooth communications subsystem. However the short range communications subsystem may comprise any suitable local wireless means of communication so long as the short range communications subsystem of the personal computer is chosen to operate using the same protocol which may for example facilitate wireless communication between the personal computer and the smart card reader . Any suitable communications mechanism and or protocol may be implemented for the short range communications subsystems and .

In order for the personal computer to be able to properly communicate with the smart card reader a suitable driver hereinafter referred to as a smart card reader driver can be loaded onto the personal computer e.g. as one of the drivers . For example an operating system such as Microsoft Windows may be applied to or loaded onto the personal computer and may include its own system supplied smart card reader driver.

Referring to a diagram is shown illustrating a Microsoft Windows smart card environment for example as described by the Windows Driver Development Kit DDK . For purposes a facilitating an understanding of example embodiments of the invention that are described further below a brief description will now be provided of the different components of the Microsoft Windows smart card environment for communications with a smart card reader through a wired connection such as a Universal Serial Bus USB interface. The kernel space and the user space are indicated as shown in with the interface between the kernel space and the user space referred to as an I O control interface . Applications communicate with a smart card reader driver by means of a smart card resource manager . In one example embodiment the smart card reader driver is a vendor supplied smart card reader driver supplied by the vendor of smart card reader and resides in the kernel space . In some embodiments the smart card reader driver may be provided by the source of the operating system e.g. Microsoft rather than the vendor of the smart card reader . The smart card resource manager resides in the user space . As shown the smart card reader driver communicates with the smart card reader . The resource manager communicates with the smart card reader driver by means of an I O control function i.e. the IOCTL function across the I O control interface . The I O control functions are dispatched using a DeviceIoControl system call. A smart card aware application may send instructions to the smart card reader driver by means of the system call DeviceIoControl and the operating system forwards the indicated I O control function to the smart card reader driver . I O control functions initiated by the smart card aware applications are passed to a smart card service provider which passes the function to the smart card resource manager which manages the resources related to the smart card reader and may communicate with the smart card reader driver . The operating system forwards the request by means of an I O request packet IRP .

In some example embodiments the smart card reader driver is designed to work with the resource manager and a smart card driver library supplied with operating system . Thus the smart card reader driver may use the smart card driver library to perform many of its key operations.

If the parameters are correct SmartcardDeviceControl processes the IOCTL request if it can step . SmartcardDeviceControl then checks to see if the smart card reader driver has a callback defined for the IOCTL request that it is processing step . If the callback exists SmartcardDeviceControl calls the callback as indicated by reference . The smart card reader driver callback routine then calls all the driver library routines that are required to complete the processing of the IOCTL as indicated by reference . After processing the IOCTL function the callback routine returns to the SmartCardDeviceControl function as indicated by reference . In the WDM version of the library SmartcardDeviceControl completes the IRP that carried the IOCTL as indicated by reference . SmartcardDeviceControl then returns control to the reader driver dispatch routine as indicated by reference . The smart card reader driver then returns the IOCTL call to the smart card resource manager as indicated by reference .

The smart card library driver synchronizes access to the smart card reader driver so that no two callback functions are called at the same time. However card insertion and removal event handling e.g. when the smart card reader indicates that the smart card is either inserted into or removed from the storage interface shown in may be processed asynchronously.

Referring now to another smart card reader environment is illustrated in accordance with example embodiments of the invention. The smart card environment is similar to the environment of described above except that in environment a wireless air interface exists between the smart card reader and the personal computer rather than a wired USB interface as shown in . AS indicated above user applications e.g. such as Microsoft Outlook or Microsoft Word typically reside in the user space and drivers including smart card reader driver reside in the kernel space . In at least some example embodiments placing a driver such as the smart card reader driver in the kernel space as required by Microsoft Windows can raise two possible issues a the user interface components cannot be directly accessed and or displayed by code residing in the kernel space and b the Bluetooth application programming interface API which is installed as one of the APIs and is used to access the Bluetooth communications port i.e. the short range communications subsystem cannot be directly accessed from the kernel space . Since Bluetooth communications between the personal computer and the smart card reader would have to occur via the Bluetooth API the Bluetooth API must be accessible to a smart card reader driver to be installed on the personal computer . The smart card reader driver to be used on the personal computer also needs access to the UI components so that a user of the personal computer can input Bluetooth secure pairing keys using the UI components as well as other information.

To address the above two issues the example embodiment shown in environment of includes a user space application referred to as a smart card reader service SCRS . The SCRS is placed in the user space and therefore has access to the Bluetooth API as the APIs also reside in the user space . Therefore using the Bluetooth API the SCRS is capable of opening a Bluetooth communication port. The SCRS takes messages from the Smart Card Reader Driver and sends the messages to the smart card reader through the Bluetooth communication port e.g. using the short range communications subsystems and . Since the SCRS resides in the user space the SCRS can make display calls to the user interface at any time using the user interface components .

Turning again to environment of in which a wired interface e.g. a USB connection exists between the personal computer and the smart card reader in such an environment messages or data destined for the smart card reader are passed from the smart card reader driver through the driver stack to the USB or serial driver since all the drivers are located in the kernel space . The USB or serial driver then sends these messages to the smart card reader over the serial connection. Turning back again to environment of in such an environment communication between the personal computer and the smart card reader is achieved via an air interface e.g. a Bluetooth connection between short range communications subsystems and . As the smart card reader driver is located in the kernel space and does not have access to Bluetooth drivers messages are passed back into the user space to the smart card reader service and the available Bluetooth API is used. Communication between the smart card reader driver and the smart card reader service is facilitated by a smart card reader service library . The smart card reader service library includes a set of function calls that the smart card reader service uses to communicate with the smart card reader driver .

Environment will now be further explained in the context the following example. A user who is currently using the desktop computer may wish to login to his smart card which is inserted into the storage component interface of the smart card reader using the short range communications subsystems as the means of connectivity between the personal computer and the smart card reader . In one example a request may come from Microsoft Outlook i.e. one of the smart card aware applications as a result of the user wishing to insert an encrypted digital signature that is stored on the smart card into an email. In the current example Microsoft Outlook first sends a message to the Windows smart card service provider requesting the login to the specific smart card . For example the smart card service provider may create a command Application Protocol Data Unit APDU to be sent to the smart card . An APDU is a standardized data structure for smart card systems for example as defined by ISO 7816. The smart card service provider then passes the APDU to the Windows smart card resource manager which passes the APDU across the I O control interface to the smart card reader driver . The smart card reader driver then passes the APDU on to the smart card driver library . The smart card driver library uses a callback function to pass the APDU back to the smart card reader driver . This callback function notifies the smart card reader driver that the smart card reader driver is to send the APDU to the smart card reader and wait for a response from the smart card reader . The smart card reader driver then passes the APDU up to the smart card reader service using commands and or functions that are part of the smart card reader service library . The smart card reader service sends the APDU over the Bluetooth connection i.e. using the short range communications subsystem and shown in using the Bluetooth API to the smart card reader . The smart card reader then processes the APDU and returns the appropriate response. This response from the smart card reader follows the same path in reverse fashion back to Microsoft Outlook or the applicable smart card aware application .

As indicated above the smart card reader service library includes a set of function calls that the smart card reader service uses to communicate with the smart card reader driver . The smart card reader service also uses the smart card reader service library to communicate with the smart card reader in order to perform certain functions or routines provided in the smart card reader service library .

Referring briefly to there are a number of commands that may be sent from a smart card aware application to a smart card reader e.g. via the path as described above in the context of . A cold reset command may for example be used to reset the smart card . The cold reset command may also be used at any time the smart card aware application is to start a new or clean session with the smart card . For example the cold reset command may be used when the computer receives a message from the smart card reader that the smart card has just been inserted into the smart card reader such that the smart card is in a known reset state. In at least some example embodiments the smart card and its associated reader is in a known state when the smart card reader is known to have recently come out of reset and no Application Protocol Data Units APDU have been sent or received by the smart card reader since it came out of reset. As indicated above an APDU is a standardized data structure for smart card systems for example as defined by ISO 7816. A send Application Protocol Data Unit Send APDU command sends an APDU. A power off command disengages or turns off the smart card . In at least some example embodiments the smart card reader is used to provide user authentication information digital certificate information and or encryption key information to the personal computer .

Generally example embodiments described herein are directed to reducing redundant or unnecessary commands being sent to the smart card reader . It is often the case where the manufacturer of a vendor supplied smart card reader driver is different than at least one of the other applications such as the operating system and or smart card resource manager . Certain operational characteristics of a vendor supplied smart card reader driver and an associated smart card reader service are thus described herein to facilitate such example embodiments.

Reference is now made to which show examples of methods for sending commands to the smart card reader . shows a method as carried out by the smart card reader service while illustrates an example conversation between the smart card resource manager the vendor supplied smart card reader driver the smart card reader service and the smart card reader . Generally in the examples of the smart card reader service acts as a flow through or relay for any instructions from the smart card resource manager . Thus referring to the smart card reader service may perform the example algorithm as shown. At a first step the smart card reader service receives through the smart card reader driver a command from the smart card resource manager . At step in response the smart card reader service sends the command through the Bluetooth API in an appropriate command format that may be understood by the smart card reader for processing by the smart card reader and subsequently the smart card .

Referring now to an example of a message exchange between the smart card resource manager the smart card reader driver the smart card reader service and the smart card reader is illustrated. Passage of time is generally traversed from top to bottom of the conversation shown in . The illustrated conversation may for example start when the personal computer receives a message from smart card reader indicating that a smart card has been inserted into the smart card reader . Note that the smart card reader may be configured in some embodiments to send a smart card insertion notification message to the personal computer even if the smart card was not just inserted into the smart card reader . For example in one embodiment card insert card removal messages are used not only in the conventional sense i.e. when a smart card has been physically inserted into or removed from the smart card reader but also to share access to the smart card reader . For example in an embodiment where the smart card reader can pair with or communicate with two different applications or devices for example a personal computer and a mobile communications device the smart card reader will send a card removal message to one application device which forces that application or device to stop sending messages to the smartcard reader . At the same time the smart card reader will send a card insert message to another application device thereby allowing the other application device to send messages to the smart card reader .

When the personal computer receives a smart card insertion notification message the smart card resource manager may send a number of commands intended to be processed by the smart card reader . As shown the smart card resource manager may send the commands of cold reset power off cold reset send APDU etc. In response the smart card reader driver will relay or send the command in the appropriate command format to the smart card reader service as shown in corresponding commands of cold reset power off cold reset send APDU etc. The smart card reader service will relay or send the command in the appropriate command format through the Bluetooth API to the smart card reader as shown in corresponding commands of cold reset power off cold reset send APDU etc. Each step notably the power off and cold reset takes time of up to at least a few seconds for the system to implement.

Inefficiencies may arise from the above method. For example the first instance of cold reset has caused the smart card to be in a reset state. This reset state is known to the smart card resource manager . The subsequent steps of power off and cold reset may thus be redundant in view of the fact that the reset state is a known state and as such may not be necessary to be sent to the smart card reader . It is also recognized herein that since no APDU is sent to the smart card reader before the steps of power off and cold reset these steps are unnecessary as the smart card would still be in the same known reset state.

Accordingly an example embodiment of an alternative method performed by a smart card reader service will now be explained with reference to . The method shown in is similar to the method shown in subject to differences that will be apparent from the Figures and the present description. shows a flow diagram of the alternative method carried out by the smart card reader service while shows an example conversation using such alternative method as between the smart card resource manager the smart card reader driver the smart card reader service and the smart card reader . Referring now to the smart card reader service processes received commands from the smart card reader driver and determines whether certain commands should be sent to the smart card reader and which commands should not be sent. Prior to the start of the algorithm it is assumed that the system is in a known state for example a reset state where no command APDUs have been received. Thus initially at step a data indicator APDU may be set to FALSE. The data indicator APDU will be explained in further detail below. At step the algorithm receives a command i.e. COMMAND from the smart card resource manager . Note that although the present method re uses COMMAND as a single variable throughout the algorithm it can be appreciated that any number of commands may be stored queued and or processed as appropriate. At step the algorithm determines whether COMMAND is an APDU. If so the data indicator APDU is set to TRUE and the COMMAND is sent to the smart card reader i.e. step . If in step a determination is made that COMMAND is not an APDU the algorithm then determines whether COMMAND is power off as indicated at step . If not then as indicated at step a determination is then made if COMMAND is a cold reset. If the COMMAND is a cold reset then data indicator APDU is set to FALSE. The COMMAND is then sent to the smart card reader i.e. step . Considering again step if a determination was made at step that the COMMAND is power off and then at step the algorithm determines whether the data indicator APDU is TRUE. If so COMMAND is sent through the Bluetooth API to the smart card reader i.e. step . If at determination step the data indicator APDU is FALSE the algorithm proceeds to step .

At step a TIMER is initially set at zero seconds. Generally the TIMER may be used to determine whether a predetermined time has elapsed between a power off and a cold reset. In the example shown the predetermined time is 2 seconds. The determination or selection of the predetermined time may for example be slightly greater than the time that it would normally take for the service to receive a cold reset command immediately after receiving a power off command. This would facilitate the situations where these two commands arrive sequentially in relatively quick succession so that the algorithm may optimize the discarding of both commands. Note that there is no strict upper bound on what is selected as the predetermined time. However in the case where the smart card resource manager is only sending a power off and has no intention of sending a cold reset and if the predetermined time is too high the smart card resource manager will be unnecessarily preventing other devices from accessing the smart card. If an excessive time or greater than the predetermined time has elapsed then the power off command is sent to the smart card reader and the method proceeds at the initial step . A reason for this is that after the predetermined time has elapsed it is unlikely that the smart card reader service will receive a Cold Reset command from the smart card resource manager . In this case the smart card should be powered down by way of the power off command. At step the algorithm is constantly polling within the predetermined time to determine whether the cold reset command is received by the smart card reader service . Thus at step the algorithm determines whether 2 seconds has elapsed. If so then the smart card reader driver sends the power off command to the smart card reader and the method proceeds at the initial step . If the cold reset is sent to the smart card reader within 2 seconds the algorithm returns to the initial step i.e. the power off command and cold reset command are not sent to the smart card reader .

Referring now to an example conversation using the above described method may take place between the smart card resource manager the smart card reader driver smart card reader service and the smart card reader . Passage of time is generally traversed from top to bottom of the conversation shown in . Communications between the smart card resource manager the vendor supplied smart card driver and the smart card reader service occur within the personal computer and communications between the smart card reader service and the smart card reader occur in at least some example embodiments over a wireless link such as a Bluetooth connection. Generally the smart card resource manager and the smart card reader driver are sending the same commands to the smart card reader service as in the example conversation of . The illustrated conversation may for example start when the personal computer receives a smart card insertion notification message from smart card reader indicating that a smart card has been inserted into the smart card reader . In an embodiment the smart card reader would be unaware of which commands the smart card resource manager is sending and which are being filtered by the smart card reader service . As illustrated the commands being sent are cold reset power off cold reset and send APDU etc. As shown the commands that are sent from the smart card driver to the smart card reader service are cold reset power off cold reset and send APDU . Also shown are the commands that are sent from the smart card reader service to the smart card reader which are cold reset and send APDU . The handling of each command by the smart card reader service will now be explained with reference to the algorithm .

Using the algorithm shown in the cold reset command would be received as COMMAND at step . At step at the decision of whether COMMAND APDU the answer would be NO since cold reset is not an APDU and thus the algorithm proceeds to step . Similarly at step at the decision of whether COMMAND power off the answer would be NO and thus the algorithm proceeds to step . At step at the decision of whether COMMAND cold reset the answer would be YES and the data indicator APDU is set to FALSE. At step the cold reset command is then sent to the smart card reader i.e. by sending cold reset .

The power off command and cold reset command will now be explained with reference to . Using the algorithm shown in the power off command would be received as COMMAND at step . At step at the decision of whether COMMAND APDU the answer would be NO since power off is not an APDU and thus the algorithm proceeds to step . Similarly at step at the decision of whether COMMAND power off the answer would be YES and thus the algorithm proceeds to step . At step at the decision of whether APDU TRUE the answer would be NO i.e. since no APDUs have been sent and the algorithm proceeds to step At step a timer is reset to TIME 0 s. At step and the algorithm continually waits for the predetermined time e.g. 2 seconds until a cold reset command is received. In the example conversation of a cold reset has been received within the 2 seconds and as such the algorithm proceeds to the initial step i.e. neither the power off command nor the cold reset command are sent to the smart card reader as shown in the gap in the conversation in . By filtering out the power off command and the cold reset command a time savings can be achieved in some configurations for the method of relative to the method of .

Referring again to step of if no command is received within 2 seconds then referring to step a power off command would be sent to the smart card reader . In other words it is as if the power off command was merely relayed through to the smart card reader as in the typical or conventional case.

Continuing with the example at step a send APDU command may be received by the smart card reader service . At step at the decision of whether COMMAND APDU the answer would be YES and the data indicator APDU is set to TRUE. The algorithm then proceeds to step . At step the APDU command is then sent to the smart card reader i.e. by send APDU .

Accordingly in some example embodiments referring again to in the described algorithm if an APDU command was sent by the smart card resource manager before the power off command then data indicator APDU would be set to TRUE. In consequence subsequent commands would be merely relayed through to the smart card reader . A reason for this feature is that most smart card resource managers assume that after a cold reset the smart card will be in a fresh session state in which no APDUs have been received. The described algorithm assists in maintaining this assumption by permitting the power off and cold reset commands to go to the smart card reader when an APDU has been previously sent.

It is understood that there may be additional steps in the above described conversation shown in . For example there are certain responses that are made by the smart card reader back to the smart card reader service and to the smart card resource manager for example an answer to reset ATR which are not illustrated in order to simplify the workings of embodiments of the system.

In the example embodiment described above in respect of the power off command is sent to the smart card reader if any APDU is sent to the smart card reader after the cold reset and no distinction is made between APDUs that change the state of the of smart card and APDUs that do not change the state of the smart card. Thus in the embodiments of an assumption is made that all ADPUs are potentially state altering even though this may not reflect reality. One reason for making such an assumption is that some APDUs may be card dependent proprietary APDUs such that the smart card reader service is unable to differentiate between state altering and non state altering APDUs. In an alternative embodiment of the method shown in the response of the smart card reader service can vary depending on the type of APDU command sent. For example if APDU commands are received that would not alter the state of the smart card from a known state such as the reset state then the smart card reader service would refrain from sending the power off and reset commands to the smart card reader . In such an alternative embodiment decision block is modified to set APDU TRUE only when i the received command is known to be a state altering command other than power off or cold rest or ii the smart card reader service does not know if the received command is a state altering command or not. Information about the state altering nature of various smart card commands can be stored for example in a look up table on personal computer . Accordingly in some example embodiments the smart card is in a known state when subsequent to a reset command being sent to the smart card reader no state changing APDUs have been sent or received by the smart card.

The above described embodiments of the present application are intended to be examples only. Alterations modifications and variations may be effected to the particular embodiments by those skilled in the art without departing from the scope of the application.

