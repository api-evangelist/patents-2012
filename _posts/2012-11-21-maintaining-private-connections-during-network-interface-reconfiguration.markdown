---

title: Maintaining private connections during network interface reconfiguration
abstract: A request is received to change an association of a network interface record from a first resource instance to a second resource instance. The network interface record may include an IP address associated with the first resource instance. In response to the request, the first resource instance is prevented from receiving data packets addressed to the IP address of the network interface record through a first network interface object attached to the first resource instance. The network interface record is associated with the second resource instance so that the second resource instance is enabled to receive data packets addressed to the IP address of the network interface record through a second network interface object attached to the second resource instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09166947&OS=09166947&RS=09166947
owner: Amazon Technologies, Inc.
number: 09166947
owner_city: Seattle
owner_country: US
publication_date: 20121121
---
A data center is a facility that houses computer systems and various networking storage and other related components. Data centers may for example provide computing services to businesses and individuals as a remote computing service or to provide software as a service e.g. cloud computing . To facilitate utilization of data center resources virtualization technologies may allow a single physical computing machine to host one or more instances of virtual machines that appear and operate as independent computer machines to a connected computer user. With virtualization the single physical computing device can create maintain or delete virtual machines in a dynamic manner.

Some virtualization technologies are capable of providing virtual resources that span two or more physical resources such as a single virtual machine with multiple virtual processors that spans multiple distinct physical computing systems. As another example virtualization technologies may allow data storage hardware to be shared among multiple users by providing each user with a virtualized data store that may be distributed across multiple data storage devices with each such virtualized data store acting as a distinct logical data store that provides users with the illusion that they are the sole operators and administrators of the data storage resource.

Operators of data centers that provide different types of virtualized computing storage and or other services typically use standard networking protocols to receive customer requests and transmit responses to such requests using commodity network hardware such as network interface cards NICs . Despite recent advances in virtualization technology many networking related properties of virtual servers are typically managed at the level of individual physical network interface cards.

Embodiments of systems and methods are described for reassigning private network addresses from a first computing resource to a second computing resource with minimal or no service interruption. In a virtual private network environment virtual network objects can have multiple private addresses for example private IP addresses that are only known to the computers in the virtual private network. In order to communicate with computers outside of the virtual private network the private addresses can be associated with public addresses that are known to the outside world. A gateway device situated between the virtual private network and the outside public network may perform network address translation for data traffic between the public network and the virtual private network.

In various embodiments a private address may be assigned to a virtual network object. The private address may subsequently be un assigned or disassociated from the virtual network object and reassigned to another virtual network object. The new virtual network object may be installed on the same computing device or another computing device. Existing connections between public addresses and the private address are maintained during the re assignment. A user in the public network connected to the virtual private interface need not be aware of the re assignment. According to an example use case customers may re assign private addresses of faulty computing resources to replacement computing resources with minimum service interruptions.

In some cases a customer user of resource instance may wish to remap its allocated private IP address from resource instance to resource instance . In one embodiment system may provide the ability to change the mapping of private IP address to different resource instances that in turn may be mapped to one or more public IP addresses. Such a feature may be useful for example to allow a user to respond to changes in computing requirements or to respond to resource failures. In other embodiments an administrator of system may remap resource instances to reallocate resources upgrade services upgrade hardware and or software and other reasons. Thus for various reasons a change of the association of private IP address from resource instance to resource instance may be requested. Network interface virtualization service may disassociate or detach private IP address from NIO and associate or attach private IP address to NIO . Network interface virtualization service may process and track the changes. By updating and maintaining information regarding associations between private IP addresses and the NIOs network interface virtualization service can efficiently enable private IP addresses to be reassigned to different resource instances with minimum service interruptions.

In one example a user may desire to remap an existing virtual machine instance in a virtual private network to a virtual machine instance with increased memory capacity and loaded with an updated set of applications. The user may launch the virtual machine instance in the virtual private network and remap its associated private IP address from the previous virtual machine instance to the new virtual machine instance. As explained previously a device such as gateway of may be configured to translate the allocated public IP address to a corresponding private IP address of a virtual machine instance. When the user remaps the private IP address to the new virtual machine instance network interface virtualization service may update its stored information so that data traffic addressed to the private IP address will now be delivered to the new virtual machine instance.

Referring back to one drawback of remapping of the private IP address from resource instance to resource instance is that existing user connections that are active at the time of the remapping may be broken. For example if a connection to resource instance is active a remapping of private IP address of resource instance to resource instance may result in a loss of mapping of data between public IP address and private IP address . Although the connection can be resumed between public IP address and private IP address the loss and reestablishment of the connection can be disruptive to the user and result in a poor customer experience.

According to an embodiment a data center customer can request a remapping of an allocated private IP address in a virtual private network from a first resource instance to a second resource instance while maintaining existing connections between the private IP address and the corresponding public IP address.

Various aspects of the disclosure are described with regard to certain examples and embodiments which are intended to illustrate but not to limit the disclosure.

A data center may provide one or more services accessible via the Internet such as various types of cloud based computing or storage to a distributed set of clients. The data center may host various resource pools such as collections of physical and virtualized computer servers storage devices networking equipment and the like needed to implement and distribute the services offered by the data center. The data center may also provide private and isolated sections of its data services in which a customer may launch computing resources in a virtual network defined by the user.

To enhance the flexibility with which different sets of resources may be accessed without having to resort to cumbersome security setting modifications reconfiguring and or physically moving network interface cards in some embodiments an operator of a provider network may set up a set of virtualization services for network interfaces. Such services may be enabled and managed by a network interface virtualization service responsible for maintaining and implementing various operations on a set of network interface records to manage networking operations required to access various resources of the provider network.

In some embodiments different parts of the functionality of the network interface virtualization service may be incorporated within several different cooperating software components and or devices such as modules of hypervisor or operating system software running on various hardware platforms of the provider network router software on edge devices and the like.

In one embodiment the data center may provide customers with one or more instances of virtualized computer resources and or storage resources each of which may require network addressability to allow the customers to interact with the resources. The network interface virtualization service in such an implementation may allow a customer to request that a modifiable and transferable network interface record be created which includes various elements of networking configuration information such as security policies addressing information and routing information that the customer wishes to set up and then associate and disassociate as desired with various resource instances over time. A network interface record may in some embodiments include one or more Internet Protocol IP addresses and a subnet identifier for a subnet to which the IP address or addresses belong. In addition various security related settings may be included in the network interface records identifying for example which entities or users are allowed to perform the attach and detach operations described in further detail below.

The network interface virtualization service may create the requested interface record and in one embodiment store it in a persistent repository or database of interface records. The customer may in some embodiments request that the network interface virtualization service attach the network interface record to a resource instance such as a virtualized computer server or storage server thereby enabling the resource instance to receive incoming traffic directed at an IP address of the network interface record and enabling outbound traffic from the resource instance to indicate that it originated at that IP address.

The network traffic may flow over one or more physical network interface cards NICs that are installed at a physical platform on which the virtualized resource instance may currently be instantiated but the properties of the interface record may be considered to be independent of any particular NIC or NICs and independent of any particular resource instance. At a given point in time for example an interface record may or may not be associated with i.e. attached to a resource instance. During a period when it is not associated with any resource instance the interface record may exist in an inactive or quiescent mode within the network interface virtualization service s repository of interface records while retaining its properties.

In response to a request to detach an interface record from a resource instance to which it currently is attached the network interface virtualization service may ensure that traffic directed to the IP address or addresses of the interface record no longer reaches the resource instance in some embodiments. The customer may also request that the network interface virtualization service now attach the interface record to a different resource instance such as a different virtualized computer server than the instance to which it was previously attached. This new attachment operation may then result in IP traffic targeted at the IP address es included within the interface record reaching the newly attached resource instance using whichever set of physical NICs is appropriate thus allowing the customer to easily transfer network configuration settings and associated security settings across resource instances without dealing with physical NICs directly. Various other operations such as modifications of IP addresses associated with a given interface record modifications of security settings billing related operations and the like may be supported by the virtual network object coordinator in various embodiments.

In some embodiments a customer may define a virtual network topology for a computing network and define parameters such as an IP address range create subnets and define configurations of routing tables and network gateways. Thus a user may for example create a publicly accessible subnet for one or more servers that can access the Internet and situate backend systems such as databases or application servers in a private facing subnet with no Internet access. The user may implement one or more layers of security mechanisms such as security groups and network access control lists to control access to resources in each subnet.

A user may launch virtual instances that may be assigned an internal and external IP address. External IP addresses may provide connectivity to the Internet while internal IP addresses may be used to allow instances to communicate with one another. Virtual instances may include a virtual network object that is assigned a private IP address on the virtual private network. Additional virtual network objects can be created and associated with virtual instances. A virtual network object may in some embodiments correspond to a physical NIC a virtualized NIC or a subset of a physical NIC or a virtualized NIC.

Virtual network objects for example may comprise a primary private IP address one or more secondary private IP addresses a public IP address a MAC address membership in specified security groups a description and a source destination check flag. In some embodiments a virtual network object may be associated with a virtual instance and later disassociated from the virtual instance. The virtual network object may then be associated with another virtual instance. In one embodiment the virtual network object and its associated private IP address any secondary private IP addresses public IP addresses and MAC address may be configured to follow the virtual network object as it is attached or detached from a virtual instance and reattached to another virtual instance.

For example a user may create a virtual private network that includes virtual instances that utilize one or more virtual network objects. The user may configure the network so that a first virtual network object handles public facing traffic. The user may also configure the virtual private network to include a second virtual network object to handle back end management traffic that is connected to a separate subnet in the virtual private network with different security access controls. The first virtual network object may have an associated security group allowing access to the server from the Internet. The second virtual network object may have an associated security group allowing secured access only from an allowed range of IP addresses either within the virtual private network or from the Internet a private subnet within the virtual private network or a virtual private gateway.

In some cases a failure or other unexpected behavior in a computing resource may necessitate a re assignment of the resource in order to respond to the failure. In the event of an instance failure a user may move the virtual network object to another instance. In one embodiment the virtual network object may maintain its private IP addresses public IP addresses and MAC address and allow for data traffic to flow to the new instance without any loss of connectivity.

A service platform for a resource instance that provides a virtual computing system may for example include a hardware server with one or more CPUs as well as associated memory storage and networking hardware. Service platform may also include software such as a hypervisor and or elements of an operating system that implements the virtualization of the computing system. Similarly a service platform that provides a virtual storage system may comprise portions or all of one or more hardware storage devices such as disk arrays or storage appliances and the associated processing elements and software.

In some embodiments resource instances may be transferable from one platform to another. For example a virtual computing system may initially be brought up on one physical server and later moved to another physical server.

Furthermore multiple resource instances may be resident on one service platform . For example resource instances B and C are shown resident on service platform B. The physical resources e.g. CPUs and network cards of a service platform B with multiple resident resource instances may be distributed using a variety of schemes in different embodiments. Resource instances may correspond to resource instances and in . In one embodiment some of the resources may be allocated exclusively to the resource instances e.g. if the service platform B has four CPUs two CPUs may be allocated to resource instance B while the other two CPUs may be allocated to resource instance C . In another embodiment the physical resources may be shared using time slices. For example all four CPUs may be usable by either resource instance with a scheduling mechanism set up to decide how CPU cycles within a given time slice are to be distributed among the instances as a function of their computing demands. In the embodiment illustrated in each service platform may have one or more physical network interface objects NIOs service platform A has NIO A service platform B has NIO B and service platform C has NIOs C and D. In various embodiments a NIO may be a virtualized NIC or may refer to a physical NIC. A NIO may also refer to a subset of features of a virtualized NIC or a physical NIC. The network traffic flowing to and from a resource instance that happens to be resident on a given service platform flows through one or more of the NIOs of the service platform. In some implementations a single resource instance may span multiple hardware service platforms in which case any of the NIOs available on any of the multiple service platforms may be used. In one embodiment resource instance may comprise a non virtualized server i.e. a resource instance may be implemented using a conventional operating system running on a bare hardware service platform instead of using hypervisor software.

System may include network interface virtualization service operable to provide a set of virtualization services for network interfaces in the illustrated embodiment. Clients may submit various types of requests including requests to create interface records to attach the interface records to resource instances detach the interface records modify the interface records query the interface records and so on. In response to a given request network interface virtualization service may perform various operations that may affect interface records and resource instances on service platforms as indicated by the arrows labeled A B C and D. For example the network interface virtualization service may in response to create requests from clients generate interface records such as A and B that may each contain a set of networking related properties that can be associated and disassociated on demand with various resource instances . The interface records may be generated in a set of in memory data structures and may be stored in a repository such as a database on persistent storage. An interface record for a network that uses TCP IP protocols may include for example one or more IP addresses one or more subnet identifiers of the subnets that contain the IP address or addresses and a set of security properties described in further detail below. In some implementations interface record may also include one or more other fields such as various status fields source and destination address check settings billing related information an identification of a currently associated resource instance the Media Access Control MAC address of a NIO currently associated with the interface record and the like. Interface records for networks employing network protocols other than TCP IP may include network address related information appropriate for the protocol used.

In some embodiments network interface virtualization service may be configured to perform attach operations to dynamically associate interface records with resource instances and to thereby enable traffic to flow to and from the resource instances in accordance with the networking and security properties specified in the interface records . In response to an attachment request received from a client for example network interface virtualization service may perform some or all of the following operations a validate based on the security information stored in the specified interface record and or elsewhere that the client is authorized to request the attachment of the interface record with the specified resource instance b verify that the networking information IP address or addresses subnet identifier etc. of the interface record is appropriate for activation of network traffic to and from the specified resource instance e.g. the network interface virtualization service may check whether an IP address is already in use for another instance and therefore is unavailable c ensure that a NIO is operational and available for use by the resource instance at the service platform where the resource instance is currently residing d initiate or make the necessary configuration changes e.g. in hypervisor or operating system software running at the service platform and at the appropriate routers gateways and other network devices of the provider network to allow the specific resource instance to begin to send traffic from and receive traffic at the IP address or addresses specified in the interface record and e make changes to the interface record and or repository to reflect the attach operation performed. As part of the configuration changes new or modified routing information such as routing table entries may be propagated to a set of routers gateways and the like in some implementations. In one embodiment the network interface virtualization service may ensure that each resource instance has at least one interface record attached to it whenever the resource instance is activated or brought up.

Network interface virtualization service may also be operable to detach or disassociate interface record from resource instance to which it is currently attached. In response to a detachment request from a client network interface virtualization service may prohibit further traffic directed to or from the IP address or addresses specified in interface record from flowing to or from the resource instance. In order to do so network interface virtualization service may perform some or all of the following operations a validate based on the security information stored in interface record and or elsewhere that the client is authorized to request the detachment of the interface record from resource instance b initiate or make the necessary configuration changes e.g. within hypervisor or operating system software running at service platform and at the appropriate routers gateways and other network devices to prevent network traffic associated with the IP address es of interface records from flowing to or from resource instance and c make changes to interface record and or repository to reflect the detach operation performed.

An interface record that was previously attached to a particular resource instance and then detached from that resource instance may later be attached to any desired resource instance either a different resource instance or the same resource instance to which it was previously attached by network interface virtualization service at the request of a client. In such embodiments the same IP address may be used during a first attachment period to send and receive traffic at one resource instance A through a particular NIO A and then during a subsequent attachment period to send and receive traffic at a different resource instance B potentially through a different NIO B and or at a different service platform . In addition to allowing clients to map a given IP address to different resource instances at different times network interface virtualization service may also allow the client to reuse some or all of the security settings associated with interface record thus substantially reducing the effort and complexity required for making networking configuration changes. In many embodiments multiple interface records may be attached to a single resource instance thus allowing multiple IP addresses to be used for the same resource instance. In some implementations a single interface record may be attached to multiple resource instances at the same time. For example network interface virtualization service may be capable of distributing or load balancing traffic directed at a single IP address specified in interface record across two or more resource instances . Using these capabilities of network interface virtualization services a highly flexible mapping of IP addresses subnets and network security settings to resource instances may be implemented in various embodiments.

A logical partition may include resources that are geographically distributed in some embodiments thereby providing the customer the benefits of access to a virtual private network of resources. In some cases interface record may include a zone identifier which may for example indicate a geographical region or set of data centers whose service platforms may be available for attachment to the interface record .

Any of several types of network addressing related fields may be included within an interface record in different embodiments. One or more private IP addresses may be specified for the interface record in some embodiments. Private IP addresses addresses may be used internally for routing within the provider network and may not be directly accessible from outside the provider network. One or more public IP addresses may also be included in some embodiments. Public IP addresses may be visible outside the provider network. Various devices or components including for example components of network interface virtualization service of or network interface virtualization service of may implement any desired network address translation technique or techniques to translate between public IP addresses and private IP addresses in various embodiments as needed. One or more subnet identifiers may be included within an interface record.

The term subnet as used herein is a logically visible subdivision of a network. In the case of IP networks the set of logical or physical devices that belong to a subnet may be addressed with a common identical most significant bit group in their IP address. This results in the logical division of an IP address into two fields a network or routing prefix and the rest field. The rest field may serve as a specific identifier for the logical or physical device. The routing prefix may be expressed in Classless Inter Domain Routing CIDR notation which may be written as the first address of a network followed by the bit length of the prefix separated by a slash character. For example 10.1.1.0 34 is the prefix of an Internet Protocol Version 4 IPv4 network starting at the address 10.1.1.0 having 34 bits allocated for the network prefix and the remaining 8 bits reserved for device identification. In IPv4 the routing prefix may also be specified in the form of the subnet mask which is expressed in quad dotted decimal representation like an address. For example 355.355.355.0 is the network mask for the 10.1.1.0 34 prefix. Slightly different notation may be used for IP Version 6 networks and for networks that use protocols other than the TCP IP suite. Subnets may be used in general for a variety of reasons for example to provide logical isolation between different sets of network addressable devices to arrange the resources of a logical partition such as a virtual private cloud into hierarchies for easier administration and so on. A subnet identifier included within an interface record may comprise in some implementations a string that may in turn include or encode the CIDR representation for the subnet e.g. subnet df543fda 10.1.1.0 34 . In one embodiment an identification of a Domain Name Server DNS may be included in the interface record as well.

In some embodiments interface record may include security related properties . Some provider networks may allow users to specify rules including for example firewall related rules for the types of incoming and or outgoing traffic allowed at resource instances to which an interface record may be attached. Such rules may be termed security groups and identified via security group s fields . Various port and protocol restrictions may be enforced using such rules and multiple rules may be associated with each interface record. For example a user may use security groups to ensure that only HTTP and HTTPs outgoing or incoming traffic is allowed to limit the set of TCP or UDP User Datagram Protocol ports to which traffic is permitted to filter incoming and outgoing traffic according to various policies and so on. In some implementations an attacher list may be specified indicating which users or entities are allowed to request attachments of the interface record to resource instances . In some cases a separate detacher list may be used to specify which entities can detach the interface record while in other cases a single list such as attacher list may be used to identify authorized attachers and detachers. The set of users or entities that are allowed to set or modify IP addresses e.g. public IP addresses and or private IP addresses of interface record may be provided in IP address setter list and the set of users or entities that own or can modify various other fields of the interface record may be specified in owner modifier field in some embodiments. For example an owner modifier identified in field may be permitted to change the attacher list or the IP address setter list in some implementations thus changing the set of entities permitted to attach or detach the interface record or modify its IP address es . While the term list has been used for fields and logical data structures other than lists such as arrays hash tables sets and the like may be used to represent the groups of entities given various security privileges roles and or capabilities in various embodiments.

In some embodiments users may be allowed to terminate resource instances . For example client may set up virtual computer server resource instances attach interface records to the instances run a desired set of computations on the instances and then issue a request to terminate the instances when the desired computations are complete thus indicating that the resource instances are no longer required . In such embodiments a DeleteOnTerminate setting may be used to specify what happens to attached interface records when a resource instance is terminated. If DeleteOnTerminate is set to true for an interface record attached to the resource instance being terminated network interface virtualization service may delete the interface record e.g. the record may be removed from repository . If DeleteOnTerminate is set to false the network interface virtualization service may retain interface record so that it may be attached again to some other resource instance. In one embodiment when interface record is attached to a resource instance an attachment record separate from the interface record may be created to represent that relationship and the DeleteOnTerminate property may be associated with the attachment record instead of or in addition to being associated with the interface record. In such an embodiment interface record may include a reference or pointer to the attachment record or records for each of the attachments in which the interface record is currently involved and different values of DeleteOnTerminate may be set for each attachment record. In such an environment instance record which happens to be unattached to any resource instances may not have a DeleteOnTerminate property associated with it as long as it remains unattached. By persisting interface records independent of resource instances in this way the overhead of setting up various security related and other properties each time a new instance is activated may be reduced for clients .

In one embodiment interface record may contain routing related information such as an indication of whether a source and or destination check is to be performed for network packets transmitted to a resource instance to which interface record is attached. If the source destination check setting is set to false or off routing decisions may be made based on a packet s source and destination IP addresses e.g. the packet may be forwarded from one subnet to another and if the setting is true or on the resource instance may not perform routing in some embodiments. Thus the source destination field may be used in some embodiments to control whether a resource instance to which the interface record is attached performs routing or gateway functions on packets for which it is not the final destination or whether it ignores such packets. Other types of routing related information such as routing table entries may also or instead be included in interface records in other embodiments. Billing related information may be included in some implementations identifying for example the entity or user to be billed for network traffic associated with interface record .

The interface status field may be used to indicate a current state of interface record e.g. whether the interface record is available disabled or in repair. Similarly the attachment status field may be used to indicate whether interface record is currently attached detached or in the process of being attached or detached in some embodiments. In one implementation as described above a record of an attachment separate from interface record may be created at the time the corresponding attachment operation is performed and an identifier or identifiers of the current attachments of interface record may be stored in attachment ID field . Identifiers of resource instance or instances to which the interface record is currently attached may be stored in attached to instance field and the user or entity that requested the attachment may be identified via attachment owner field in some embodiments. In one embodiment a list of identifiers of the NIO or NIOs currently usable for traffic directed to from the IP addresses of interface record may be maintained e.g. in the form of a MAC address es field . In some implementations monitoring information such as statistics about the amount of traffic flowing to or from the IP addresses of the interface record may also be retained with the interface record. Other fields not shown in may be included in interface records in various embodiments. In some embodiments clients may associate tags such as a virtual local area network VLAN tag formatted in accordance with a VLAN standard such as the 802.1Q standard with interface records to implement network isolation. In such embodiments such a tag may also be stored in or referenced from interface record .

In one embodiment some of the fields shown in may be replaced by references or pointers to other objects. For example security information for interface record may be stored in a separate security object and the interface record may store a reference to the security object. Similarly each attachment of resource instance to interface record may be represented by an attachment object and the interface record may point or refer to the appropriate attachment object in some implementations.

If the requested address has been assigned then in operation the network interface virtualization service may disassociate address a.b.c.d from the resource instance to which it currently is attached. The network interface virtualization service may ensure that traffic directed to the IP address or addresses of the interface record no longer reaches the resource instance. In operation the network interface virtualization service may determine if the requested private IP address has a network interface record. If the requested private IP address does not have a network interface record then in operation the network interface virtualization service may create the requested interface record and store it in a persistent repository or database of interface records. If the requested private IP address has a network interface record then in operation the network interface virtualization service may detach the interface record and change its association . The interface record may be attached to a different resource instance such as a different virtualized computer than the instance to which it was previously attached using a different NIO as appropriate. The new resource instance may be specifically requested by the user. The new attachment operation may then result in IP traffic targeted at the private IP address reaching the newly attached resource instance using the new NIO as appropriate. In this way the customer can easily transfer network configuration settings and associated security settings across resource instances without existing users having to deal with the particular resource instances and associated NIOs directly. Once it is verified that all changes have been correctly entered then the changes may be committed and brought online.

Referring to operation begins the operational procedure. Operation may be followed by operation . Operation illustrates translating a first IP address in a packet received from a first network to one of a plurality of second IP addresses on a second network. In an embodiment an IP address on a first network e.g. public IP address in may be translated to a first one of a plurality of IP addresses on a second network e.g. private IP address in . Each of the plurality of IP addresses on the second network may correspond to respective resource instances e.g. resource instances and in .

Operation may be followed by operation . Operation illustrates maintaining the plurality of resource instances and a plurality of network interface records. As discussed above the network interface records may comprise a second IP address on the second network. Furthermore the second IP address may be associated with one of the plurality of resource instances so that the resource instance is enabled to receive data packets addressed to the second IP address of the associated network interface record through an associated network interface object.

Operation may be followed by operation . Operation illustrates receiving a request to change the association of a selected one of the network interface records from a first resource instance to a second resource instance.

Operation may be followed by operation . Operation illustrates determining if the network interface record is an existing record. If the network interface record does not exist then operation may be followed by operation in which the network interface record is created.

If the network interface record is an existing record then operation may be followed by operation . Operation illustrates preventing the first resource instance from receiving traffic addressed to an IP address of the selected network interface record through a first network interface object. Operation may be followed by operation . Operation illustrates associating the selected network interface record with the second resource instance so that the second resource instance is enabled to receive traffic addressed to the IP address of the selected network interface record through a second network interface object. Operation may be followed by operation .

The availability of virtualization technologies for computing hardware has provided benefits for providing large scale computing resources for customers and allowing computing resources to be efficiently and securely shared between multiple customers. For example virtualization technologies such as those provided by VMWare or other virtualization systems may allow a physical computing device to be shared among multiple users by providing each user with one or more virtual machine instances hosted by the physical computing device. A virtual machine instance may be a software emulation of a particular physical computing system that acts as a distinct logical computing system. Such a virtual machine instance provides isolation among multiple operating systems sharing a given physical computing resource. Furthermore some virtualization technologies may provide virtual resources that span one or more physical resources such as a single virtual machine instance with multiple virtual processors that spans multiple distinct physical computing systems.

Referring to communications network may for example be a publicly accessible network of linked networks and possibly operated by various distinct parties such as the Internet. In other embodiments communications network may be a private network such as for example a corporate or university network that is wholly or partially inaccessible to non privileged users. In still other embodiments communications network may include one or more private networks with access to and or from the Internet.

Communication network may provide access to computers . User computers may be computers utilized by customers or other customers of data center . For instance user computer or may be a server a desktop or laptop personal computer a tablet computer a wireless telephone a personal digital assistant PDA an e book reader a game console a set top box or any other computing device capable of accessing data center . User computer or may connect directly to the Internet e.g. via a cable modem or a Digital Subscriber Line DSL . Although only two user computers and are depicted it should be appreciated that there may be multiple user computers.

User computers may also be utilized to configure aspects of the computing resources provided by data center . In this regard data center might provide a Web interface through which aspects of its operation may be configured through the use of a Web browser application program executing on user computer . Alternatively a stand alone application program executing on user computer might access an application programming interface API exposed by data center for performing the configuration operations. Other mechanisms for configuring the operation of the data center including deploying updates to an application might also be utilized.

Servers shown in may be standard servers configured appropriately for providing the computing resources described above and may provide computing resources for executing one or more applications. In one embodiment the computing resources may be virtual machine instances . In the example of virtual machine instances each of the servers may be configured to execute an instance manager or capable of executing the virtual machine instances. The instance managers may be a virtual machine monitor VMM or another type of program configured to enable the execution of virtual machine instances on server for example. As discussed above each of the virtual machine instances may be configured to execute all or a portion of an application.

It should be appreciated that although the embodiments disclosed above discuss the context of virtual machine instances other types of implementations can be utilized with the concepts and technologies disclosed herein. For example the embodiments disclosed herein might also be utilized with computing systems that do not utilize virtual machine instances.

In the example data center shown in a router may be utilized to interconnect the servers and . Router may also be connected to gateway which is connected to communications network . Router may manage communications within networks in data center for example by forwarding packets or other data communications as appropriate based on characteristics of such communications e.g. header information including source and or destination addresses protocol identifiers etc. and or the characteristics of the private network e.g. routes based on network topology etc. . It will be appreciated that for the sake of simplicity various aspects of the computing systems and other devices of this example are illustrated without showing certain conventional details. Additional computing systems and other devices may be interconnected in other embodiments and may be interconnected in different ways.

In some embodiments one or more of the virtual machine instances of data center may form part of one or more networks. In some embodiments gateway may be used to provide network address translation NAT functionality to a group of virtual machine instances and allow the virtual machine instances of the group to use a first group of internal network addresses to communicate over a shared internal network and to use a second group of one or more other external network addresses for communications between virtual machine instances of the group and other computing systems or virtual machine instances that are external to the group. An IP address is one example of a network address that is particularly applicable to the TCP IP context in which some embodiments of the present disclosure can be implemented. The use of IP addresses herein is intended to be illustrative of network addresses and not limiting as to the scope of the described concepts.

Virtual machine instances may be assigned a private network address not shown . For example the private network addresses may be unique with respect to their respective private networks but not guaranteed to be unique with respect to other computing systems that are not part of the private network. IP addresses are used to illustrate some example embodiments in the present disclosure. However it should be understood that other network addressing schemes may be applicable and are not excluded from the scope of the present disclosure.

Gateway may operate to manage both incoming communications to data center from communication network and outgoing communications from data center to communication network . For example if virtual machine instance sends a message not shown to computer virtual machine instance may create an outgoing communication that includes network address on a first network e.g. an external public IP address for computer as the destination address and include a network address on a second network e.g. a private IP address for virtual machine instance as the source network address. Router may then use the destination address of the outgoing message to direct the message to gateway for handling. In particular in order to allow computer to reply to the outgoing message gateway may temporarily map one of the public network addresses for data center to virtual machine instance and modify the outgoing message to replace the private network address for the source network address with the mapped public network address. Gateway may then update its mapping information with the new mapping and forward the modified outgoing message to computer over the Internet.

If computer responds to the modified outgoing message by sending a response incoming message not shown that uses the mapped public network address for virtual machine instance as the destination network address the response incoming message may be directed over the Internet to gateway . Gateway may then perform similar processing in reverse to that described above for the outgoing message. In particular gateway may use its mapping information to translate the mapped public network address into the private network address of virtual machine instance modify the destination network address of the response incoming message from the mapped public network address to the private network address of virtual machine instance and forward the modified incoming message to virtual machine instance . In this manner at least some of the internal computers of data center may communicate with external computing systems via temporary use of the public network addresses. Furthermore in some situations one or more of the internal computing systems of data center may be mapped to use one of the public network addresses e.g. to a unique combination of a public network address and a port number such that external computing systems may initiate new incoming messages to the internal computing system by directing the new incoming messages to the mapped representative public network address port as the destination network address of the new incoming messages.

It should be appreciated that the network topology illustrated in has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. These network topologies and devices should be apparent to those skilled in the art.

It should also be appreciated that data center described in is merely illustrative and that other implementations might be utilized. Additionally it should be appreciated that the functionality disclosed herein might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art. It should also be appreciated that a server gateway or other computing device may comprise any combination of hardware or software that can interact and perform the described types of functionality including without limitation desktop or other computers database servers network storage devices and other network devices PDAs tablets cellphones wireless phones pagers electronic organizers Internet appliances television based systems e.g. using set top boxes and or personal digital video recorders and various other consumer products that include appropriate communication capabilities. In addition the functionality provided by the illustrated modules may in some embodiments be combined in fewer modules or distributed in additional modules. Similarly in some embodiments the functionality of some of the illustrated modules may not be provided and or other additional functionality may be available.

Each of the processes methods and algorithms described in the preceding sections may be embodied in and fully or partially automated by code modules executed by one or more computers or computer processors. The code modules may be stored on any type of non transitory computer readable medium or computer storage device such as hard drives solid state memory optical disc and or the like. The processes and algorithms may be implemented partially or wholly in application specific circuitry. The results of the disclosed processes and process steps may be stored persistently or otherwise in any type of non transitory computer storage such as e.g. volatile or non volatile storage.

The various features and processes described above may be used independently of one another or may be combined in various ways. All possible combinations and subcombinations are intended to fall within the scope of this disclosure. In addition certain method or process blocks may be omitted in some implementations. The methods and processes described herein are also not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state. The example blocks or states may be performed in serial in parallel or in some other manner. Blocks or states may be added to or removed from the disclosed example embodiments. The example systems and components described herein may be configured differently than described. For example elements may be added to removed from or rearranged compared to the disclosed example embodiments.

It will also be appreciated that various items are illustrated as being stored in memory or on storage while being used and that these items or portions of thereof may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software modules and or systems may execute in memory on another device and communicate with the illustrated computing systems via inter computer communication. Furthermore in some embodiments some or all of the systems and or modules may be implemented or provided in other ways such as at least partially in firmware and or hardware including but not limited to one or more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the modules systems and data structures may also be stored e.g. as software instructions or structured data on a computer readable medium such as a hard disk a memory a network or a portable media article to be read by an appropriate drive or via an appropriate connection. The systems modules and data structures may also be transmitted as generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission media including wireless based and wired cable based media and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly the present invention may be practiced with other computer system configurations.

Conditional language used herein such as among others can could might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list.

While certain example embodiments have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the inventions disclosed herein. Thus nothing in the foregoing description is intended to imply that any particular feature characteristic step module or block is necessary or indispensable. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the inventions disclosed herein. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of certain of the inventions disclosed herein.

