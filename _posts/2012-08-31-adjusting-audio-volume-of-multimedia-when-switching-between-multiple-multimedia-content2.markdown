---

title: Adjusting audio volume of multimedia when switching between multiple multimedia content
abstract: A multiple media module receives data indicating a status of a tab of a graphical user interface (GUI) presented on a user device. The multiple media module determines, based on the data indicating the status of the tab, whether the tab is active, the tab comprising a streaming media player. If the tab of the web browser is not active, the multiple media module mutes an audio component of a streaming media file playing in the streaming media player.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09535653&OS=09535653&RS=09535653
owner: Google Inc.
number: 09535653
owner_city: Mountain View
owner_country: US
publication_date: 20120831
---
This disclosure relates to the field of multimedia content and in particular to adjusting audio volume of multimedia when switching between multiple multimedia content.

Streaming media is multimedia such as video and audio content which is received by and presented to an end user while being delivered by a streaming provider. With streaming media a client media player can start playing media content before the entire file has been transmitted from a server e.g. over a telecommunications network. For example a user may visit a media streaming website using a web browser running on a personal computing device. The user may play multimedia content including video and audio portions in a media player from the media streaming website. The streaming provider may transmit the audio and video portions of the content to the personal computing device over a network such as the Internet which may be played back in the media player.

Many users stream multimedia content including video and audio components to their personal computers. In some cases a user may stream multiple multimedia content items so that the streams run simultaneously in multiple windows or tabs of a browser. For example this may occur when streaming different sporting events or other types of multiple coverage for an event that the user wants to toggle between. In these cases the user typically hears the sound from the multiple multimedia streams playing in the different windows or tabs of the browser regardless of which multimedia stream the user is currently watching. This is a sub optimal experience for the user as the conflicting sounds from the various multimedia streams cancel each other out. Solutions exist that turn off sound using shortcuts on a taskbar of the user s device or using keyboard controls. However these solutions usually require the user to manually select the task bar shortcut or manually input the keyboard control.

The following is a simplified summary of the disclosure in order to provide a basic understanding of some aspects of the disclosure. This summary is not an extensive overview of the disclosure. It is intended to neither identify key or critical elements of the disclosure nor delineate any scope of the particular implementations of the disclosure or any scope of the claims. Its sole purpose is to present some concepts of the disclosure in a simplified form as a prelude to the more detailed description that is presented later.

In one implementation a multiple media module receives data indicating a status of a tab of a graphical user interface GUI presented on a user device. The multiple media module determines based on the data indicating the status of the tab whether the tab is active the tab comprising a streaming media player. If the tab of the web browser is not active the multiple media module mutes an audio component of a streaming media file playing in the streaming media player. In some implementations the tab is not active if the tab is in the background of the GUI behind one or more other tabs.

The multiple media module may also stop playback of the audio component of the streaming media file to the user device and continue to transmit a video component of the streaming media file to the user device. In one implementation if the tab of web browser is active the multiple media module determines if a volume level of the audio component is currently muted. If the volume level of the audio component is currently muted increasing the volume level to a default setting. On the other hand if the volume level of the audio component is not currently muted maintaining a current setting of the volume level of the audio component.

In further implementations the multiple media module also subsequent to receiving the data indicating the status determines that other streaming media files are playing in other streaming media players in other tabs of the GUI. In addition receiving the data indicating the status of the tab can include sending a request for the status of the tab using a page visibility application programming interface of the GUI.

In additional implementations computing devices for performing the operations of the above described embodiments are also implemented. Additionally in implementations of the disclosure a computer readable storage media stores methods for performing the operations of the above described embodiments.

Implementations are described for adjusting audio volume of multimedia when switching between multiple multimedia content. In one implementation a user requests that multimedia content including video and audio components be streamed to a personal computer or other user device. For example the user may play a music video using a media streaming website accessed through a browser running on the user s computer. In many cases however the user may access multiple streams of multimedia content simultaneously. For example if the browser is a tabbed browser the user may open a new tab and play another multimedia stream in the new tab. In this case the first browser tab playing the initial media streaming website is minimized or shifted to the background and the new multimedia stream is active in the current tab.

In one implementation a visibility monitor running on the user s computer detects that the first media player is no longer visible to the user due to the fact that the browser tab has been minimized or shifted to the background. For example the browser may have an application programming interface API such as the Page Visibility API which other devices can call to determine the visibility status of the tab containing the media player. While details are provided herein specifically relating to videos as an example for clarity of explanation it shall be appreciated that such details may be equally applicable to other types of media e.g. audio e.g. music flash content etc. as applicable.

If for example the web browser providing the multiple media players streaming the media content receives an indication from the visibility monitor that the user is not currently viewing the music video the user device can dynamically adjust the volume level of the streaming audio component. In one implementation the volume level can be muted. In another implementation the streaming of the audio component can be halted completely. Muting the volume level or halting streaming of the audio component can reduce noise interference between simultaneously playing videos allowing them to be continuously running but with a single audio feed tied to the currently viewed media stream. If the web browser receives an indication from the visibility monitor that the tab containing the media player has been brought back to the foreground the volume level of the media stream can be increased or streaming of the halted audio component resumed.

As a result of implementing the above each video should automatically without any user input mute off when a user toggles away from it on the web browser and should automatically have the sound back on when the user toggles back to it. The user can successfully toggle back and forth between different videos and capture the sound only when it is relevant i.e. when the user is actually watching that particular video instead of having the various audio streams interfere with each other s sound. This allows the user to maintain an enjoyable experience while consuming the media content.

Web server and media server may include a network accessible server based functionality various data stores and or other data processing equipment. The servers and may be implemented by a single machine or a cluster of machines. As illustrated in web server and media server are separate devices. In another implementation however web server and media server may be combined into a single machine or device. One or both of web server and media server may be hosted for example by computer system of . In one implementation web server hosts web page . Web server can deliver web page to user device or another client device using for example the Hypertext Transfer Protocol HTTP . Web page may be part of for example a media content hosting website that allows users to upload view and share multimedia content.

In one implementation media server includes one or more media files . Media file may represent audio and video content that a user plays through web page . For example when a user of user device views web page using a web browser or other content rendering program running on user device and requests to view a certain multimedia content web server can send a message to media server requesting media file . Although the following description describes the use of a web browser one skilled in the art will appreciate that other content rendering programs may implement aspects of the disclosure. Media server can initiate streaming of media file to user device via network . In one implementation media file is a music video file including both a visual and an audio component. In other implementations however media file may be some other type of media file such as an MP3 audio file.

In some implementations a user at user device may request multiple media files for simultaneous streaming to web browser . In this case multiple media module running in conjunction with web browser can receive an indication from visibility monitor of whether the user is currently viewing a tab or window playing streaming media. Based on the received indication multiple media module can dynamically adjust the audio of the streaming media that is not being currently viewed to be silent. A tab or a tabbed document interface TDI allows multiple documents e.g. web pages to be contained within a single window. By selecting different tabs a user can switch between individual documents.

For example if multiple media module receives an indication that the user is not viewing one of the multiple streaming media at web browser e.g. because content of a tab or window of web browser used to view the streaming media has been minimized or shifted to the background in favor of content in another tab or application multiple media module can optionally mute the audio portion of the media or pause the media item to silence the audio portion of the media. In some implementations a video component of the media stream may continue to play and or be transmitted to user device so that the user may still receive a live feed of media uninterrupted. Some implementations of multiple media module are discussed in more detail below.

In one implementation storage device is connected to visibility monitor and includes tab visibility status . In one implementation user device may include visibility monitor and storage device . In another implementation storage device may be external to user device and may be connected to user device over a network or other connection. In other implementations user device may include different and or additional components which are not shown to simplify the description. Storage device may include one or more mass storage devices which can include for example flash memory magnetic or optical disks or tape drives read only memory ROM random access memory RAM erasable programmable memory e.g. EPROM and EEPROM flash memory or any other type of storage medium.

In one implementation request receiving module receives requests for example from multiple media module for the visibility status of a particular tab of web browser . The request may identify the tab of web browser in which a media player is running and to which media server is currently was previously or is about to stream media content such as media file .

In one implementation the request is in the form of an API call made for example to visibility monitor . In one implementation visibility monitor is the Page Visibility API. The Page Visibility API may be a standard interface that is included by a vendor of web browser . The Page Visibility API allows applications to request the visibility state of a document or web page e.g. tab or window being displayed by web browser . In other implementations visibility monitor may include some other API or specification. Upon receiving the request request receiving module may forward the request to or otherwise notify visibility state determining module that the request has been received from media server . In other implementations the request may be received from some other source besides multiple media module such as from media server .

Visibility state determining module can determine whether content of the requested tab or window of a content rendering application such as web browser is currently selected and or active to a user. illustrates an example GUI for presenting media content according to one implementation. In this implementation the GUI is a window of web browser or another content rendering application and includes one or more browsing tabs and browser controls . Browsing tabs and allow multiple web pages to be viewed in a single browser window. For example browsing tab may display web page including media player A . In one implementation media player A may also include a set of controls to control playback of media content.

When the first browsing tab is selected or activated web page may be visible to the user assuming no other windows are placed on top of the window for GUI . In one implementation when a browsing tab is selected or activated that means that the content associated with the browsing tab is visible. When a browsing tab is not selected or not active that means that the content associated with the browsing tab is hidden. Any additional tabs such as browsing tab are in the background and the content displayed therein is generally not visible to the user. Visibility state determining module can determine if browsing tab i.e. the tab containing web page and media player A is currently selected activated or in the foreground of GUI . If so visibility state determining module can return a visible indicator and store that value in an entry in tab visibility status information corresponding to tab . If another browsing tab were activated and browsing tab was in the background visibility state determining module can return a hidden indicator. In some embodiments the visibility state determining module may utilize JAVA script commands such as window.unblur and or window.unfocus to determine whether a particular tab or window is in an active state or not.

In one implementation visibility state determining module checks the status of tabs and in response to receiving the request. In other implementations visibility state determining module can check the status of tabs and at periodic intervals or can update the status in tab visibility status information each time the status changes. In these implementations rather than checking the status of each tab visibility state determining module can just read the stored values from tab visibility status information .

In one implementation when the user requests to move browsing tab to the background the visibility status of browsing tab can change. illustrates an example GUI for presenting media content in this situation. In this implementation a second browsing tab is selected. The user may select tab or switch between browsing tabs using for example browser controls using a computer mouse or other pointer device by tapping the selected tab if user device includes a touch sensitive display or by some other means. In one implementation browsing tab displays a different web page which may include a different media player B . In one implementation media player B may also include a set of controls to control playback of media content from media player B . Media player A remains running in browsing tab which is now in the background. In one implementation visibility state determining module can update the status of browsing tabs and in tab visibility status information .

In one implementation request responding module can respond to the request for the visibility status of a particular tab. Request responding module can read the current value stored in tab visibility status information for the particular tab and send a response including the value to the requestor. In one implementation request responding module sends the response to multiple media module . Request responding module can send an update with the state information of each tab to multiple media module in response to the request periodically or each time the status of a tab is updated in tab visibility status information . In another implementation where the requestor is media server request responding module can send the response over network .

In one implementation storage device is connected to multiple media module and includes media file . In one implementation user device may include multiple media module and storage device . In another implementation storage device may be external to user device and may be connected to user device over a network or other connection. In other implementations user device may include different and or additional components which are not shown to simplify the description. Storage device may include one or more mass storage devices which can include for example flash memory magnetic or optical disks or tape drives read only memory ROM random access memory RAM erasable programmable memory e.g. EPROM and EEPROM flash memory or any other type of storage medium.

In one implementation visibility state requestor generates and issues a request to visibility monitor for the visibility status of a tab of web browser in which multiple media players such as media player A and media player B are running. The request may specify the particular browsing tab or may be for the status of all tabs and or windows of web browser . In one implementation visibility state requestor may repeatedly issue a request at periodic intervals. In another implementation visibility state requestor may issue the request in response to a command from an administrator or other entity. In response to the request visibility state requestor can receive a value indicating the visibility status e.g. visible or hidden from visibility monitor on user device .

In one implementation audio volume controller can dynamically adjust the volume level of the audio component of media file and or halt playback of the media file completely. If visibility state requestor receives an indication from the visibility monitor that a browsing tab window containing one of multiple media players running in the web browser is not visible or active to the user audio volume controller may reduce or mute the volume level of the audio component of the media file playing on the inactive browsing tab window.

For example audio volume controller may mute the volume level of the audio component of media file that is streamed to user device by instructing the media player on the inactive tab to turn off the audio portion of the particular media stream. In another implementation media stream communicator may halt playback e.g. pause or stop playback of the audio component of the media file or of the entire media file audio and video components completely. In one implementation media server may be streaming media file to user device . In this case the multiple media stream communicator may work in conjunction with media server to halt transmission of media file or the audio portion of media file.

In some implementations when the audio component being halted or muted the video component of the streaming media may remain unchanged so that the user can continue to receive live feed of corresponding streaming video. Similarly if visibility state requestor receives an indication that the browsing tab or window has become visible again audio volume controller can resume the audio output of the audio component of media file back to an original or default setting or media stream communicator can resume transmission of the audio component. In one implementation the default setting of audio volume is configured by an administrator of the user deice or may be configured by the user of user device.

For simplicity of explanation the methods of this disclosure are depicted and described as a series of acts. However acts in accordance with this disclosure can occur in various orders and or concurrently and with other acts not presented and described herein. Furthermore not all illustrated acts may be required to implement the methods in accordance with the disclosed subject matter. In addition those skilled in the art will understand and appreciate that the methods could alternatively be represented as a series of interrelated states via a state diagram or events. Additionally it should be appreciated that the methods disclosed in this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methods to computing devices. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device or storage media. In one implementation method may be performed by visibility monitor as shown in .

Referring to at block method receives a request for visibility status of media player content such as content associated with a browsing tab or a browsing window. For convenience of the following discussion browsing tabs are referred to. However one skilled in the art will appreciate that embodiments of the implementation are equally applicable to multiple browsing windows. In one implementation request receiving module receives the request for example from a multiple media module of a web browser. The request may identify the tab or window of web browser having a media player that is playing streamed media content such as media file.

In one implementation the request is in the form of an API call made for example to visibility monitor. In one implementation visibility monitor is the Page Visibility API. Upon receiving the request request receiving module may forward the request to or otherwise notify visibility state determining module that the request has been received from multiple media module. In other implementations the request may be received from some other source such as a media server.

At block method determines if the content associated with the media player tab is visible to the user. Visibility state determining module can determine whether the content of the requested tab is currently visible to the user. The content of the tab may be visible to the user when the tab is selected activated or running in the foreground of web browser. Any additional tabs such as browsing tabs or additional browsing windows are in the background and the content displayed therein is generally not visible to the user. Visibility state determining module can determine whether each browsing tab is activated or not and if activated determine that the content of the browsing tab is visible. If at block method determines that the content of the browsing tab is visible at block method sets the state value for browsing tab to visible. 

If at block method determines that the browsing tab is not visible at block method sets the state value for browsing tab to hidden. In one implementation visibility state determining module can store the value in tab visibility status information. Alternatively the steps at blocks and are not performed in response to block . In one implementation the visibility status is updated by a different process e.g. every time a different tab is selected and method will only need to access this information rather than sending a specific request.

At block method returns the determined state value to the requestor. In one implementation request responding module can respond to the request for the visibility status of a particular tab. Request responding module can read the current value stored in tab visibility status information for the particular tab and send a response including the value to the requestor. In one implementation where the requestor is media server request responding module can send the response over network.

Referring to at block method determines that multiple media players are streaming media files in multiple browsing tabs and or browsing windows. For convenience of the following discussion browsing tabs are referred to. However one skilled in the art will appreciate that embodiments of the implementation are equally applicable to multiple browsing windows. In response to the determination of multiple media players in multiple browsing tabs method at block requests the visibility status of a browsing tab containing media player. In one implementation visibility state requestor generates and issues a request to user device for the visibility status of the browsing tab. In one implementation visibility state requestor may repeatedly issue a request at periodic intervals. In another implementation visibility state requestor may issue the request in response to a command from an administrator or other entity.

In response to the request at block method receives an indication of the requested visibility state. Visibility state requestor can receive a value indicating the visibility status e.g. visible or hidden from visibility monitor on user device. Alternatively user device can provide an update to the visibility status each time the status changes during media streaming.

At block method determines if the received visibility status is set to visible or if the received indication otherwise indicates that the content of the browsing tab is active. In one implementation the visibility status will be set to either visible or hidden. In other implementations however some other indication may be provided. If at block method determines that the visibility status is not set to visible at block method mutes the volume of the audio or halts playback of the audio component. For example audio output controller may mute the volume level of the audio component of media file that is streamed to user device. In another implementation media stream communicator may halt playback e.g. pause or stop media of the audio component completely. In some embodiments media stream communicator may work in conjunction with a media server to cause transmission of the audio component to be halted.

If at block method determines that the visibility status is set to visible at block method determines if the audio component of media file is currently muted or halted. If so then at block method increases the volume level back to a default setting or resumes playback of the audio component. In one implementation the audio component of media file may have a default volume setting. This may be for example the average volume level supported by user device or some intermediate volume level. In one implementation the default volume level may be set by the user of user device. Audio volume controller may track what quality setting is currently being used to stream the video component to user device. If at block method determines that the audio component is not currently muted or halted then at block method maintains the current volume level of the audio component.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus . Any of the signals provided over various buses described herein may be time multiplexed with other signals and provided over one or more common buses. Additionally the interconnection between circuit components or blocks may be shown as buses or as single signal lines. Each of the buses may alternatively be one or more single signal lines and each of the single signal lines may alternatively be buses.

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine readable storage medium on which is stored one or more set of instructions e.g. software embodying any one or more of the methodologies of functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media. The instructions may further be transmitted or received over a network via the network interface device .

The machine readable storage medium may also be used to store instructions to perform a method for dynamically adjusting video quality as described herein. While the machine readable storage medium is shown in an exemplary implementation to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. A machine readable medium includes any mechanism for storing information in a form e.g. software processing application readable by a machine e.g. a computer . The machine readable medium may include but is not limited to magnetic storage medium e.g. floppy diskette optical storage medium e.g. CD ROM magneto optical storage medium read only memory ROM random access memory RAM erasable programmable memory e.g. EPROM and EEPROM flash memory or another type of medium suitable for storing electronic instructions.

The preceding description sets forth numerous specific details such as examples of specific systems components methods and so forth in order to provide a good understanding of several implementations of the present invention. It will be apparent to one skilled in the art however that at least some implementations of the present invention may be practiced without these specific details. In other instances well known components or methods are not described in detail or are presented in simple block diagram format in order to avoid unnecessarily obscuring the present invention. Thus the specific details set forth are merely exemplary. Particular implementations may vary from these exemplary details and still be contemplated to be within the scope of the present invention.

Reference throughout this specification to one implementation or an implementation means that a particular feature structure or characteristic described in connection with the implementations included in at least one implementation. Thus the appearances of the phrase in one implementation or in an implementation in various places throughout this specification are not necessarily all referring to the same implementation. In addition the term or is intended to mean an inclusive or rather than an exclusive or. 

Although the operations of the methods herein are shown and described in a particular order the order of the operations of each method may be altered so that certain operations may be performed in an inverse order or so that certain operation may be performed at least in part concurrently with other operations. In another implementation instructions or sub operations of distinct operations may be in an intermittent and or alternating manner.

