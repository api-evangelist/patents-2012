---

title: Application programming interface for prefetching map data
abstract: An API for prefetching map data receives a prefetch request for an indicated geographic area from a software application. In response, the API retrieves map data corresponding to the indicated geographic area from a map data provider and stores the map data in a map data cache without causing a digital map based on the map data to be displayed on the display device. The map data cache is accessible to the software application only via the API. Subsequently to storing the map data in the map data cache, the API receives a request to render the digital map from the software application and, in response to the request to render the map image, renders the map image for display on a display device using the map data stored in the map data cache.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08849942&OS=08849942&RS=08849942
owner: Google Inc.
number: 08849942
owner_city: Mountain View
owner_country: US
publication_date: 20120821
---
This application claims priority to U.S. Provisional Patent Application No. 61 678 065 filed on Jul. 31 2012 and entitled Application Programming Interface for Prefetching Map Data the entire disclosure of which is hereby expressly incorporated by reference herein.

The present disclosure relates to digital maps and more particularly to an application programming interface API for prefetching map data on a computing device.

The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors to the extent it is described in this background section as well as aspects of the description that may not otherwise qualify as prior art at the time of filing are neither expressly nor impliedly admitted as prior art against the present disclosure.

Today various computing devices including many portable devices support software applications that display interactive digital maps. Some of these software applications such as mapping and navigation applications are developed primarily for displaying interactive digital maps. Other software applications such as web browsers may display interactive digital maps along with other content.

To display an interactive digital map a software application usually requests map data from a map data provider for a particular geographic area. A software application executing on a portable device such as a smart phone typically requests map data from the map data provider via a wireless communication network in which the portable device operates. As a result the software application can only receive map data when the portable device has wireless network coverage that supports a data connection. When the portable device cannot establish a data connection or when the portable device leaves the area of network coverage altogether the software application often cannot display a map of the area in which the portable device is located for example.

One embodiment of the techniques discussed below is a computer readable medium storing instructions that implement an API for prefetching map data. The map data is prefetched on a computing device having a processor and a display device and configured to communicate with a map data provider via a communication network. When invoked in a software application executed on the processor the API is configured to receive a prefetch request for an indicated geographic area from the software application. In response to the prefetch request the API is configured to retrieve map data corresponding to the indicated geographic area from the map data provider and store the map data in a map data cache without causing a map image based on the map data to be displayed on the display device where the map data cache is accessible to the software application only via the API. The API is further configured to subsequently to storing the map data in the map data cache receive a request to render the map image from the software application and in response to the request to render the map image render the map image using the map data stored in the map data cache where the map image is displayed on the display device.

Another embodiment of these techniques is a method for prefetching map data in computing device including a memory a processor and a display device. The method includes allocating a portion of the memory for use as a map data cache that stores map data received from a map data provider via a communication network and preventing software applications being executed by the processor from accessing the map data cache. The method further includes providing an API for use by the software applications. In response to the API being invoked for prefetching map data the method includes retrieving map data for an indicated geographic area and storing the map data in the map data cache where a map image based on the map data is not displayed on the display device in response to the API being invoked for prefetching the map data. In response to the API subsequently being invoked for displaying the prefetched map data the method includes retrieving the map data from the map data cache and generating a map image using the map data for display on the display device.

According to yet another embodiment a mobile device is configured to communicate via a wireless communication link and includes a processor a display device a network interface communicatively coupled to the wireless communication link a memory communicatively coupled to the processor a map data cache disposed in the memory and instructions stored in the memory that implement an API for prefetching map data. The map data cache is not accessible to software applications executing on the mobile device via read or write operations. The API when invoked by a software application executing on the mobile device is configured to in response to receiving a prefetch request indicating a geographic area from a software application executing on the mobile device retrieve map data for the indicated geographic area via the network interface and store the map data in the map data cache where a map image based on the map data is not displayed on the display device in response to receiving the prefetch request. In response to subsequently receiving a request to render the map image from the software application the API is configured to cause the map image to be displayed on the display device using the map data stored in the map data cache.

An Application Programming Interface API allows software applications to prefetch map data for a geographic area in advance of a user request or an automated decision to display a digital map image for simplicity a digital map of the geographic area. According to an example implementation a software application invokes the API to specify a polyline or a point and the API retrieves map data for a geographic area within a certain radius of the polyline or point from a map data provider. The API stores the received map data in a map data cache over which the API has exclusive control so that a software application that invokes the API cannot access the map data cache directly. In other words the software application can access the map data cache only via calls to the API. Further the API may control the level of detail of the prefetched map data. At a later time the software application invokes the API to display a digital map of the geographic area and the API renders the digital map using the stored map data without requesting the map data from the map data provider.

When the portable device operates in the wireless communication network the software application requests and receives map data from the map data provider on demand. For example the software application may be a mapping application and a user may request a digital map for a specified location e.g. San Francisco Calif. . The software application generates and transmits a request for map data corresponding to the specified location upon receiving the user request. The map data server in response provides the requested map data and the software application renders and displays a digital map for the specified location. As another example the software application may be a navigation application configured to display a digital map for the current location of the portable device . When the portable device enters a location for which map data is not yet available the software application automatically generates a request for map data corresponding to this new location.

However the software application or in some cases the user may determine that the portable device will soon leave the area of coverage of the wireless communication network or that the portable device will roam to a wireless network that offers a significantly slower or a significantly more expensive data connection. If the software application or the user can anticipate for which locations map data will be needed the software application can invoke the API to prefetch map data for some of all of these anticipated locations. In some embodiments the software application is configured to automatically prefetch map data only if the user explicitly configures the software application to do so particularly if the software application uses the user s profile to determine which map data should be prefetched. In other embodiments the software application automatically prefetches map data without the user s explicit configuration but in any case with user s consent and in accordance with relevant privacy policies.

Generally speaking the software application may respond to various events or signals to determine that map data should be prefetched and identify the geographic area for which map data should be prefetched. For example the user may search for driving directions and the software application may anticipate loss of network coverage along the route from a source location to the destination. If the user configured her user profile so as to allow the software application to prefetch based on driving directions the software application invokes the API to prefetch map data along the entire route or parts of the route. As another example the user may configure his user profile so as to cause the software application to unconditionally prefetch map data along a route regardless of whether the portable device is expected to have network coverage.

With continued reference to the wireless communication network may be a cellular network a wireless local area network WLAN network or any other suitable network that provides a data connection to the portable device . The map server need not be coupled to the wireless communication network directly. Thus in some implementations the map server operates on a wide area network such as the Internet that is communicatively coupled to the wireless communication network via a gateway for example. In general the map server may be a single computing device having a memory and a processor that executes instructions stored in the memory a pool of such devices each capable of processing a request for map data a group of such devices that processes requests for map data in a distributed manner etc. The map database similarly may be implemented in any suitable manner on one or multiple physical devices.

The portable device can be a laptop or tablet computer a smart phone a car navigation system a hand held global positioning system GPS unit or any other suitable device. An example embodiment of a portable device that can operate in the communication system is discussed next with reference to .

An example portable device illustrated in includes an instruction memory a processor configured to execute instructions stored in the memory a display device a network interface that supports wireless communications and a storage memory . For clarity the instruction memory and the storage memory are illustrated separately. It will be understood however that the components and also can be regions within the same memory module. More generally the portable device can include one or several additional processors memory modules network interfaces which may be provided separately or on a same chip or board. Further the components and may include persistent memory e.g. flash memory volatile memory e.g. RAM or both.

The instruction memory stores sets of instructions of an operating system OS an API for prefetching and rendering map data and a software application . The OS may be a mobile OS developed specifically for portable devices. As such the OS may include functions that allow the software application to access such data as wireless network parameters e.g. identity of the wireless network quality of service as well as invoke such services as telephony location determination e.g. via global positioning service GPS or WLAN wireless network data call origination etc. In another implementation the OS is a general purpose operating system that operates on both mobile and stationary devices such as smartphones and desktop computers for example.

Similar to the API discussed above the API for prefeteching and rendering map data allows software applications to prefetch map data along a polyline a point an arc etc. or within a shape that encloses a geographic area such as a polygon a circle a rectangle etc. or according to another suitable principle. The API in one scenario receives a specification of a polyline as a set of points interconnected by straight line segments. For example the software application may generate or receive driving directions in the form of endpoints and intermediate points e.g. Source starting address at 1010 Fifth P1 Fifth at Main P2 Main and Third etc. and provide these endpoints to the API as a parameter to prefetch map data along the corresponding polyline. In another scenario the software application specifies only the endpoints e.g. Source 1010 Fifth Destination 2020 Third and the API automatically requests map data along the polyline that forms the route between the points S and E from the map data provider.

The API in one embodiment is provided as a part of a larger API for retrieving map data. For example the API may be a component of an API for obtaining map data business data driving directions etc. from a map data provider. The API also may share some of the interface exposed to software applications with the larger API. In particular the larger API may include a function which the software application invokes to retrieve map data on demand such that an additional parameter supplied to the function indicates that the software application invokes the API to prefetch map data in advance of an event that triggers the display of the map data. Thus the API in general can support fetching as well as prefetching of map data and the software application can select between fetching and prefetching via special parameters different function calls or in any other suitable manner.

The API can be implemented as one or several functions a data structure a messaging scheme etc. Further the API may include compiled code that executes directly on the processor or alternatively instructions in a any other form such as a scripting language interpreted at runtime by the application . The API in one example includes well documented prototypes of several functions which a developer can include in the code of the software application as well as instructions that implement these functions. If desired the implementation instructions can be provided in a binary format unreadable by the developer.

In some cases the API is provided as a part of the OS . In one such implementation the software application is native to the OS i.e. the software application is developed to execute specifically on the OS using the function library supported by the OS including using the functions that are unique to the OS . The API alternatively can be developed as a separate module compatible with the OS . Also the software application in other implementations can operate on a variety of platforms and can operate on the OS using the corresponding porting instructions.

The software application can be for example a mapping application a navigation application a shopping guide application etc. Further the software application can be a web browser application that invokes the API to display map within an allocated portion of a browser window. In general the API can be made available to any suitable software application that executes on the portable device . Also multiple different software applications may invoke the API .

Referring still to the software application invokes the API with a prefetch request indicating a certain geographic area and the API retrieves and stores prefetched map data in a map data cache . At a later time the software application invokes the API again to render a digital map corresponding to the same geographic area or a portion of that area. The API checks the map data cache to see whether the requested map data is already available on the portable device and if so retrieves the map data from the map data cache . The API then can render a digital map using the stored map data. In some implementations the API is configured to also display the rendered digital map on the display device . The API may control the level of detail of the prefetched map data and in some cases the zoom level of the prefetched map data. For example the software application may request that map data be prefetched along a specified polyline and the API in response may prefetch a base map with the zoom at which roads are visible but individual buildings and other structures are not visible. As another example the API may prefetch map data that embeds various markers and point of interest POI information. In this manner the API may effectively limit the use of prefetched map data by the software application .

The OS and or the API may allocate a portion of the memory for use as the map data cache when the API is initialized or when the portable device powers up for example. In at least some of the implementations the software application cannot directly access the map data cache . Thus even though the software application in general can invoke standard functions for writing and reading data to and from the memory the map data cache is inaccessible to the software application other than via the API . To this end the OS may control access to the map data cache at the level of read and write operations so that the software application cannot inadvertently or purposefully refer to memory locations within the map data cache . In another implementation the API allocates memory for map data cache without exposing the location of the map data cache to the software application but also without any additional protection from the OS . In yet another implementation the map data cache stores map data in an encoded format which the software application cannot interpret.

The map data cache need not be limited to prefetched map data and according to some implementations stores all map data received from a map data provider. The API may be configured to both save map data to the map data cache and remove map data from the map data cache when necessary. For example the API may be configured to remove those portions of the map data that are no longer current. As another example the API may remove the oldest map data once the entire map data cache is occupied.

The map data in the map data cache can correspond to various types of geographic data including topographical data street data urban transit information and traffic data. The geographic data in turn may be schematic or based on photography such as satellite imagery. Further the map data can be for rendering a digital map in two dimensional 2D or three dimensional 3D format.

The map data can conform to any suitable format including a raster format and a vector graphics format for example. Generally speaking an image in a raster format specifies which colors are applied to various pixels that make up an image whereas a graphic in a vector graphics format includes mathematical descriptions of points and various shapes e.g. a line can be specified using a vector graphics format as two endpoints and an indication of thickness and color . In the scenarios in which the map data cache stores map data in a raster format the map data may be organized into regular sized component images or tiles corresponding to a certain zoom level. For example at a particular zoom level a map tile can be a square 128 pixels wide that in the physical world corresponds to a square geographic area that is two hundred meters wide. In another scenario in which the map data cache stores map data in a vector graphics format the shapes that make up a digital map are organized according to square map tiles for convenience. In yet another scenario the shapes stored in the map data cache are not organized into tiles at all.

In some implementations in addition to data used to render a digital map the map data in the map data cache includes other information associated with geographic coordinates. For example the API can retrieve business data such as names hours of operation customer reviews etc. for businesses located within a radius of a polyline a point within an enclosed polygon etc.

To better illustrate which map data that can be stored in the map data cache several example approaches are discussed next with reference to . The API the API or another suitable API configured to prefetch map data can implement these techniques in the corresponding portable or non portable device. However for ease of explanation the examples of are discussed with reference to the API .

Referring first to a map tile array includes multiple square map tiles that make up a digital map of a certain large geographic area at a relatively low zoom level which can be preprogrammed in the API or supplied to the API as a parameter. The API prefetches map data along a polyline between a source S and a destination D. Because the polyline passes through map tiles the API in this implementation prefetches only these map tiles and does not prefetch the surrounding map tiles illustrated without shading in .

In another scenario illustrated in the API is configured to prefetch map tiles within a certain radius of the polyline . The radius as well as the zoom level can be preprogrammed or the API can receive the radius and the zoom level as parameters. The API in this example prefetches in addition to map tiles map tiles .

As one alternative to the approaches illustrated in the API can efficiently prefetch map elements corresponding to physical entities e.g. buildings parks bodies of water that lie within a certain radius of a polyline or a point and not necessarily prefetch entire map tiles that include these map elements. For example illustrates prefetching map elements in a vector format within a certain radius of a polyline . The virtual lines and demarcate the boundaries of the geographic area for which the API prefetches map data. Each of lines and is at a distance R of the polyline . Although the polyline in this example passes through map tiles and the API prefetches only map elements etc. that are at least partially located within the area bounded by the virtual lines and . By contrast the API does not prefetch map elements or for example. Map elements that the API prefetches are illustrated with a fill pattern and map elements that the API does not prefetch are illustrated without a fill pattern.

Referring to the API in another scenario prefetches map elements corresponding to physical entities within a radius R of a single point . The corresponding geographic area is demarcated by a virtual boundary . Similar to map elements that the API prefetches in this scenario are illustrated with a fill pattern and map elements that the API does not prefetch are illustrated without a fill pattern.

With reference to it is noted that map data in these examples need not be associated with map tiles at all neither at the map data provider nor at the portable device. For example each map element can be positioned on a digital map using global coordinates. On the other hand if map tiles are used map elements can be positioned within the corresponding map tiles using local tile specific coordinates.

Now referring to an example method for providing map data prefetching capability to software applications can be implemented in a computing device such as the portable device or for example. According to one implementation an operating system that provides an API for prefetching and rendering map data such as the API or implements the method .

At block a portion of a memory is allocated to serve as a map data cache. Next at block access to the map data cache is restricted so as to prevent software applications such as the software applications and from accessing the map data cache directly. At block the method includes providing an API for prefetching and rendering map data to be stored in the map data cache. In an embodiment the API has read and write permissions for the map data cache allocated at block . More generally the API can operate the map data cache in accordance with the techniques discussed above with reference to .

Map data then is retrieved from a map data provider at block and stored in the map data cache at block . Next at block a request is received to render a digital map depicting the entire geographic area for which map data was prefetched at block . The request at block sometimes may specify only a portion of the geographic area. For example if map data is retrieved along a polyline e.g. a driving route from a source city to a destination city the request at block may indicate a point proximate to the polyline e.g. a town on this route . At block a digital map is rendered using the map stored in the map data cache without requesting the map data from a map data provider.

The following additional considerations apply to the foregoing discussion. Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter of the present disclosure.

Additionally certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code stored on a machine readable medium or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware and software modules can provide information to and receive information from other hardware and or software modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware or software modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware or software modules. In embodiments in which multiple hardware modules or software are configured or instantiated at different times communications between such hardware or software modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware or software modules have access. For example one hardware or software module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware or software module may then at a later time access the memory device to retrieve and process the stored output. Hardware and software modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods or routines described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or processors or processor implemented hardware modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as an SaaS. For example as indicated above at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. APIs .

The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the one or more processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the one or more processors or processor implemented modules may be distributed across a number of geographic locations.

Some portions of this specification are presented in terms of algorithms or symbolic representations of operations on data stored as bits or binary digital signals within a machine memory e.g. a computer memory . These algorithms or symbolic representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. As used herein an algorithm or a routine is a self consistent sequence of operations or similar processing leading to a desired result. In this context algorithms routines and operations involve physical manipulation of physical quantities. Typically but not necessarily such quantities may take the form of electrical magnetic or optical signals capable of being stored accessed transferred combined compared or otherwise manipulated by a machine. It is convenient at times principally for reasons of common usage to refer to such signals using words such as data content bits values elements symbols characters terms numbers numerals or the like. These words however are merely convenient labels and are to be associated with appropriate physical quantities.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or a combination thereof registers or other machine components that receive store transmit or display information.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. For example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the description. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for providing an API for prefetching and rendering map data through the disclosed principles herein. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.

