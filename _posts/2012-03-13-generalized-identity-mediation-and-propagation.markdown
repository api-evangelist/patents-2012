---

title: Generalized identity mediation and propagation
abstract: Provided are techniques for providing security in a computing system with identity mediation policies that are enterprise service bus (EBS) independent. A mediator component performs service-level operation such as message brokering, identity mediation, and transformation to enhance interoperability among service consumers and service providers. A mediator component may also delegate identity related operations to a token service of handler. Identity mediation may include such operations as identity determination, or “identification,” authentication, authorization, identity transformation and security audit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832779&OS=08832779&RS=08832779
owner: International Business Machines Corporation
number: 08832779
owner_city: Armonk
owner_country: US
publication_date: 20120313
---
The present application is a continuation and claims the benefit of the filing date of an application entitled Generalized Identity Mediation and Propagation Ser. No. 12 826 614 filed Jun. 29 2010 assigned to the assignee of the present application and herein incorporated by reference.

The claimed subject matter relates generally to computer security and more specifically to identity mediation between client applications and server applications.

Provided are techniques for providing security in a computing system with identity mediation policies that are enterprise service bus ESB independent. In a typical computing system of today a number of applications may be connected to a number of service providers via a mediator component. A mediator component may be an ESB that performs service level operation such as message brokering identity mediation and transformation to enhance interoperability among service consumers and service providers. A mediator component may also delegate identity related operations to a token service or handler. Identity mediation may include such operations as identity determination or identification authentication authorization identity transformation and security audit.

Provided is a method of mediation in a computing system to provide secure access to a server application comprising loading into an identity mapping module an identity mapping policy for specifying correspondence between a first set of identities and a second set of identities wherein the first set of identities correspond to a party requesting a service in conjunction with the client application from the server application and the second set of identities correspond to the party and the server application loading into an authentication module an authentication policy for authenticating a first identity of the first set of identities and a second identity of the second set identities wherein the first identity and the second identity are mapped to each other by the identity mapping module with respect to the client application and the server application loading into an authorization module an authorization policy for authorizing the second identity for access to the server application and providing the service to the party based upon a mapping of the first identity to the second identity by the mapping module an authentication of the first and second identities by the authentication module and an authorization of the second identity by the authorization module.

This summary is not intended as a comprehensive description of the claimed subject matter but rather is intended to provide a brief overview of some of the functionality associated therewith. Other systems methods functionality features and advantages of the claimed subject matter will be or will become apparent to one with skill in the art upon examination of the following figures and detailed description.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code or logic embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

As the Inventors herein have recognized different applications may have different requirements with respect to identity mediation and each particular enterprise service bus ESB platform may have a different approach as to how identity mediation operations are configured and implemented. Therefore the management of such an environment with the intent to consistently apply security policies is difficult. For example a change in a security policy may require changes to applications a process that can be redundant error prone and time consuming. Other issues arise in a migration from one ESB to another which may require recreation of all identity mediation policies from scratch on the new platform.

Turning now to the figures is one example of a computing system architecture that may implement an Enhanced enterprise service bus EEBS in accordance with the disclosed technology. A client system includes a central processing unit CPU coupled to a monitor a keyboard and a mouse which together facilitate human interaction with computing system and client system . Also included in client system and attached to CPU is a data storage component which may either be incorporated into CPU i.e. an internal device or attached externally to CPU by means of various commonly available connection devices such as but not limited to a universal serial bus USB port not shown . Data storage is illustrated storing an example of a computer application i.e. app  which is hosted by client system and employs the claimed subject matter for mediation services. It should be noted that a typical computing system would include more than one application but for the sake of simplicity only one is shown.

Client system is communicatively coupled to a local area network LAN which is coupled to the Internet . Also coupled to LAN is an additional client system and a server . Although not shown client system and server would also typically include a CPU monitor keyboard mouse and data storage. Client system is illustrated hosting a second application i.e. app  which is stored on a data storage not shown and executed on a CPU or processor not shown both associated with server .

Server is also illustrated with an enhanced enterprise service bus EESB which is stored on data storage not shown and executed on a processor not shown associated with server . EESB may utilize a token handler and a security handler to implement mediation service in accordance with the claimed subject matter. EESB is described in more detail below in conjunction with . Also communicatively coupled to the Internet and therefore LAN client systems and server and EESB are two service providers or servers i.e. a service provider and a service provider . Although not shown servers and would also like client system and typically include a CPU monitor keyboard and mouse to enable human interaction. Server is coupled to a data storage which stores a service application or service i.e. ser  and server is coupled to a data storage which stores a service i.e. ser  . Services and each execute on a processor not shown associated with servers and respectively.

Although in this example clients server EESB and servers and are communicatively coupled via LAN the Internet they could also be coupled through any number of communication mediums such as but not limited to additional LANs not shown or direct or indirect wired or wireless connections. Further it should be noted there are many possible computing system configurations of which computing system is only one simple example. Throughout the Specification clients and applications and servers and and services and are employed as examples of computing components that may implement and or utilize the claimed subject matter.

It should be understood that the claimed subject matter can be implemented in many types of computing systems and data storage structures but for the sake of simplicity is described primarily in terms of computer server and the other elements of system architecture . In addition the representation of EESB in is a logical model. In other words each of components may be stored in the same separate or multiple files and loaded and or executed within system either as a single system or as separate processes interacting via any available inter process communication IPC techniques.

I O module handles any communication EESB has with other components of system . EESB configuration module includes processing logic and stores parameters that control the operation of EESB . Module is described in more detail below in conjunction with . Identification module enforces a policy for identifying a party requesting mediation by EESB . Module is described in more detail below in conjunction with and . Authentication module enforces a policy for verifying the identity identified by Identification module . Module is described in more detail below in conjunction with . Authorization module enforces an authorization policy for permitting an authorization operation to permit an access control check. Module is described in more detail below in conjunction with and .

Identity Mapping module enforces identity mapping rules. Identity mapping rules may include but are not limited to identity replacement simple identity mapping value to value directory based mapping value to lookup value and rule based identity mapping. Module is described in more detail below in conjunction with and . Audit module defines the operation for the logging and audit of service requests. Module is described in more detail below in conjunction with .

Transformation and routing module is employed for standard ESB processes such as but not limited to transformation e.g. additional operations that may be performed on a service request and routing. Other functions executed by EESB that are not listed in conjunction with specific modules include but are not limited to service response filtering service response masking security token replacement security token validation and verification decryption of inbound security tokens encryption of outbound security tokens and the implementation of security policy combination rules. Module is described in more detail below in conjunction with .

It should be noted that lines that connect elements of include numbers that indicate a relationship between any two particular elements. For example the line between MediationPolicySet and MediationPolicy has the character 1 at both ends. These characters indicate that elements and have a one to one relationship i.e. for each instance of element there is one instance of element . Other characters employed in this fashion include a character and a 0..1 symbol. The character indicates that the corresponding element i.e. the particular element closest to the number many have many instances and the 0..1 symbol indicates that there may be either 0 or 1 of the corresponding element. For example MediationPolicy and a Transformation data structure have a one to many relationship.

MediationPolicy has a one to one relationship with Identification which defines how to determine the identity of a particular service consumer. Element stores an IdentificationMethod attribute not shown that indicates the selected identification mechanism. In this example elements and have a one to one relationship. Examples of some possible identification mechanisms include but are not limited to a web services security WS Security username token a client IP address a lightweight third party authentication LTPA mechanism a security assertion markup language SAML token a custom XPath expression applied to the request a Kerberos AP REQ from Simple and Protected GSSAPI Negotiation Mechanism SPNEGO token and a hypertext transfer protocol IMP Authentication header. A PolicyCombiningAlgorithm element provides a mechanism for combining multiple identification policies in the event two or more policies are specified by for example specifying which one or which multiples in any particular order should be executed. Identification is described in more detail below in conjunction with .

MediationPolicy has a one to one relationship with. Authentication which defines a method of authenticating or verifying the identity as determined by the method specified by Identification . Element may specify a new authentication policy or reference a policy that has been previously declared. An authentication policy contains an AuthenticationMethod attribute not shown that indicates one or more authentication mechanisms. Examples of possible authentication mechanisms include but are not limited to binding to a lightweight directory access protocol LDAP server validating a LTPA token validating a SAML assertion using a SAML server for a SAML authentication statement using a TIVOLI access manager server or a WS Trust server and validating a signer certificate for a digitally signed request. A PolicyCombiningAlgorithm element provides a mechanism for combining multiple authentication policies in the event two or more policies are specified by for example specifying which one or which multiples in any particular order should be executed. In an alternative embodiment element may enforce an authentication policy with respect to another module s policy. For example a user who is authenticated with a private key may be allowed to access one particular service while a user authenticated with a password is not.

MediationPolicy has a one to many relationship with an Authorization each of which defines a particular method of authorizing execution of a request from a service customer provided the service customer has been identified as explained above in conjunction with element and the identity authenticated as described above in conjunction with element . Element may specify a new authorization policy or reference a policy that has been previously declared. An authorization policy contains an AuthorizationMethod attribute not shown that indicates one or more authorization mechanisms. Examples of possible authorization mechanisms include but are not limited to using an extensible access control markup language XACML policy decision point checking for membership in a LDAP group generating a SAML authorization query and calling an authorization AZN application programming interface API . A PolicyCombiningAlgorithm element provides a mechanism for combining multiple authorization policies in the event two or more policies are specified by for example specifying which one or which multiples in any particular order should be executed. Authorization is described in more detail below in conjunction with .

MediationPolicy has a one to many relationship with an Audit each of which defines a particular method of auditing an inbound request from a service customer. It should be noted that a service request may be audited even though the service customer has been identified as explained above in conjunction with element and the identity has not been authenticated as described above in conjunction with element and or the request has not been authorized as explained above in conjunction with element . Element may specify a new audit policy or reference a policy that has been previously declared. An audit policy contains an AuditMethod attribute not shown that indicates one or more audit mechanisms. Examples of possible audit mechanisms include but are not limited to creating a log record or file creating one or more database records and sending one or more electronic messages or emails to an appropriate party. A PolicyCombiningAlgorithm element provides a mechanism for combining multiple audit policies in the event two or more policies are specified by for example specifying which one or which multiples in any particular order should be executed.

MediationPolicy has a one to many relationship with an Mapping each of which defines a particular method of mapping one identity to another for example when a particular service customer is know by different names by different service providers. For example mapping may be employed when a service consumer and a service provider use different user registries or in similar circumstances. Element may specify a new mapping policy or reference a policy that has been previously declared. A mapping policy contains a MappingMethod attribute not shown that indicates one or more mapping mechanisms. Examples of possible mapping mechanisms include but are not limited to one to one mapping mapping based upon a LDAP lookup and rule based mapping. A MappingType element specifies how a particular mapping is performed. Mapping is described in more detail below in conjunction with .

MediationPolicy has a one to many relationship with a Transformation each of which defines a particular method of transforming a service request. A transformation of a service request is an additional operation that is executed on the service request before the request is transmitted to a service provider. Element may specify a new transformation policy or reference a policy that has been previously declared. A transformation policy contains a TransformationMethod attribute not shown that indicates one or more transformation mechanisms. Examples of possible transformation mechanisms include but are not limited to a custom extensible style sheet language transformation XSLT a WS Security token replacement TIVOLI federated identity manager TFIM token replacement generating a LTPA token and generating a SAML assertion. A PolicyCombiningAlgorithm element provides a mechanism for combining multiple transformation policies in the event two or more policies are specified by for example specifying which one or which multiples in any particular order should be executed.

By providing structures such as and the claimed subject matter is able to provide a platform independent or enhanced ESB. The standardization of interfaces provides means for individual mediation policies to be replaced without requiring changes to either applications such as app  and app  and servers such as ser  and ser  . In this manner changes in a security policy do not need to be implemented in each application that uses EESB . In addition authorization and identity mapping may be removed from information applications and token service and specialized security handlers can be easily transferred from one ESB platform to another even if security policies are implanted in the ESBs.

A specific method is identified by an instantiation of element with an IdentificationMethod attribute . The specific instantiation of element is associated with an IdentificationPolicyID which is a key that uniquely identifies the specific instantiation of the policy. Attributes and are two examples of specific properties associated with element . Attributes and as well as any other attributes are stored in an Attribute which includes an AttributeID to uniquely identify the corresponding attribute. Each attribute is also associated with one or more attribute values . In general an attribute is a generic element used in the different elements to provide policy designers with a mechanism for defining additional policy configurations. For example an attribute in used in an AuthenticationPolicy element not shown may be a host name of a particular LDAP server. Identification may also be associated with multiple IdentificationPolicyRef each of which provides a reference to a particular instantiation of IdentificationPolicy .

A specific method is identified by an instantiation of element with an AuthorizationMethod attribute not shown . The specific instantiation of element is associated with an AuthorizationPolicyID which is key that uniquely identifies the specific instantiation. An attribute is a specific property associated with element . AuthorizationMethod attribute and AuthorizationPolicyID as well as any other attributes are stored in an Attribute which includes an AttributeID to uniquely identify the corresponding attribute. Each attribute is also associated with one or more attribute values . Authorization may also be associated with multiple AuthorizationPolicyRef each of which provides a reference to a particular instantiation of AuthorizationPolicy .

Like Identification policy includes MediationPolicy MediationPolicyID Mapping and MappingType . Each instantiation of Mapping represents a particular method for performing a mapping function as described above in conjunction with which as explained above may include but are not limited to one to one mapping mapping based upon a LDAP lookup and rule based mapping. Each instantiation of mapping is associated with an InboundIdentity element that is used in conjunction with one to one mapping. Element indicates the target identity for the current mapping policy. Each instantiation of mapping is also associated with an OutboundIdentity element that is used in conjunction with one to one mapping. Element indicates the destination identity for the current mapping policy. Like the other elements of mediation policy model mapping may include additional attributes each of which is associated with an attributeID which uniquely identifies a particular attribute . Each attribute is also associated with one or more AttributeValues which stores the relevant data associated with each attribute .

During a Parse PolicySet block process analyzes MediationPolicy which was retrieved during block . In general process identifies individual MediationPolicy policy components such as components and . During a Get Next Policy block begins to process each component or module identified during block . For example the first time through block process may process Identification . During an Analyze Policy block process examines in this example the values stored in Identification to ascertain how a specific identification policy is identified.

During a Policy Reference block process determines whether or not Identification lists a specific identification policy such as IdentificationPolicy directly or provides a reference to a particular identification policy via IdentificationPolicyRef . If process determines that a reference to a policy is employed control proceeds to a Retrieve Referenced Policy block during which the specific policy is identified.

During a Correlate Policy block the specific policy being processed is correlated with a particular module such as components and . During a Load Policy block process loads into memory for processing by EESB the specific policy that was identified either during block or block into the component and identified during block . During Another Policy block process determines whether there is another type of policy that needs to be loaded into EESB . For example once an identification policy has been loaded an authentication policy such as Authentication Authorization Audit Mapping and Transformation may be processed and loaded. If process determines that one or more policies remain to be loaded control returns to Get Policy block the next unprocessed policy is retrieved and processing continues as described above.

Finally if process determines during block that all relevant policies have been loaded into EESB control proceeds to an End Setup EESB block in which process is complete.

During block process waits for a mediation request. For example app  may make a request of a service provided by ser  . During a Parse Request block process determines the nature of the request by identifying both the requestor and the requested service. During an Identify Identity block see process determines the identity of the party making the request see and during a Mapping Required block see process determines whether or not the identity associated in this example with app  is the same as an identity expected or authorized to access serv  see . Typically information necessary for this determination is stored in configuration data stored in conjunction with EESB see .

If process determines that a mapping is required control proceeds to a Map Identity block see . During block process associates the identity identified during block see with an appropriate identity associated with the service identified during block see . Once mapping is complete during block or if during block process has determined that mapping is not required control proceeds to an Authenticate identities block see . During block process determines that the parties identified during blocks and are the actual identities i.e. a spoofing detection is made. Those with skill in the computing and communication arts should be familiar with various techniques to perform this task.

During an Authorize Request block process verifies that the identities identified during blocks and and authenticated during block are authorized to access the services of the requested service see . During a Transform. Required block process determines whether or not the request received during block requires any additional processing see . If so control proceeds to a Perform Transform block during which the additional processing is executed. Once any transformation processing is complete during block or if during block process has determined that not such processing is required control proceeds to an Establish Connection block during which the connection between in this example app  and ser  is established and ser  may process the request of app  .

Once a connection has been established process proceeds to a Log Process block during which the processing is logged if process is so configured see . It should be noted that if any processing fails to executed properly for example identities cannot be identified during block identities cannot be authenticated during block or a request cannot be authorized during block an asynchronous async. interrupt is generated and control is passed to Log Process block and that information is logged. Once information is logged during block process returns to Wait for Request block and processing continues as described above.

Finally process is halted by means of an asynchronous interrupt which passes control to an End Operate EESB block in which process is complete. Interrupt is typically generated when the OS browser application etc. of which process is a part is itself halted. During nominal operation process continuously loops through the blocks and processing mediation requests as they are received.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

