---

title: Multi-level cache with synch
abstract: Disclosed in some examples is a method of caching by storing data in a first cache specific to a first geographic area and accessible only by a first application in the first geographic area; storing data in a second cache specific to a second geographic area and accessible by a plurality of applications in the second geographic area including the first application and a second application, the second geographic area being larger than and encompassing at least part of the first geographic area; responsive to a miss in the first cache for data, contacting the second cache and searching for the data in the second cache; and responsive to a hit for the data in the second cache, sending the data to a first application, wherein the data was placed in the second cache by a second application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08700735&OS=08700735&RS=08700735
owner: Zynga Inc.
number: 08700735
owner_city: San Francisco
owner_country: US
publication_date: 20121119
---
This application is a continuation of and claims the benefit of priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 13 077 466 entitled MULTI LEVEL CACHE WITH SYNCH filed on Mar. 31 2011 which issued as U.S. Pat. No. 8 332 488 on Dec. 11 2012 which claims the benefit of priority under 35 U.S.C. Section 119 e to U.S. Provisional Patent Application Ser. No. 61 449 551 entitled MULTI LEVEL CACHE WITH SYNCH filed on Mar. 4 2011 the benefit of priority of each of which is claimed hereby and each of which are incorporated by reference herein in its entirety.

A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent files or records but otherwise reserves all copyright rights whatsoever. The following notice applies to the software and data as described below and in the drawings that form a part of this document Copyright Zynga Inc. 2011 All Rights Reserved.

A social networking service is an online service platform or site that allows members to build or reflect social networks or social relations among members. Typically members construct profiles which may include personal information such as name contact information employment information photographs personal messages status information links to web related content blogs and so on. Typically only a portion of a member s profile may be viewed by the general public and or other members.

The social networking site allows members to identify and establish links or connections with other members in order to build or reflect social networks or social relations among members. For instance in the context of a business networking service a person may establish a link or connection with his or her business contacts including work colleagues clients customers and so on. With a social networking service a person may establish links or connections with his or her friends and family. A connection is generally formed using an invitation process in which one member invites a second member to form a link. The second member then has the option of accepting or declining the invitation. If the second member accepts the invitation the first and second members are connected.

In general a connection or link may represent or may be otherwise associated with an information access privilege such that a first person who has established a connection with a second person is via the establishment of that connection authorizing the second person to view or access non publicly available portions of their profiles. Of course depending on the particular implementation of the business social networking service the nature and type of the information that may be shared as well as the granularity with which the access privileges may be defined to protect certain types of data may vary greatly.

A variety of different social networking services have gained popularity including FACEBOOK of Palo Alto Calif. MYSPACE of Beverly Hills CA and run by News Corp. LINKEDIN of Mountain View Calif. TWITTER of San Francisco Calif. and the like. These sites often allow for third party applications to utilize certain functionality provided by the host social networking service. In some examples these third party applications may utilize certain user interface UI elements of the social networking service access personal information about a user including profile information and send and receive social interactions such as messages to the user of the third party application or to their connections. FACEBOOK for example allows developers to create applications which are integrated into the FACEBOOK user interface and with the FACEBOOK social networking system. In some examples these applications may include games such as CITYVILLE FARMVILLE and MAFIA WARS all developed by ZYNGA Inc. of San Francisco Calif. These applications appear in a FACEBOOK page and make use of various features of FACEBOOK such as contacting friends to encourage them to join the game and play with the user and the like.

The social networking services integrate with these applications by providing to these applications an Application Programming Interface or API. In general an Application Programming Interface API is a particular set of rules and specifications that a software program may follow to access and make use of the services and resources provided by another particular software program that implements that API. The API serves as an interface between different software programs and facilitates their interaction.

In the drawings which are not necessarily drawn to scale like numerals may describe similar components in different views. Like numerals having different letter suffixes may represent different instances of similar components. The drawings illustrate generally by way of example but not by way of limitation various embodiments discussed in the present document.

Typically when a user accesses a social networking application such as a game the user selects the application via the social networking service which then re directs the user to access the application on another server. In some examples this server may be located on a social networking application service . The user s browser connects to the application server downloads the application client then displays or executes the application. A social networking application is any application which utilizes or is capable of utilizing the API of one or more social networking services. In some examples this social networking application may be or include HTML XML JavaScript Adobe Flash Microsoft Silverlight and the like. The social network from which the user selected the content may be called the host social network. The user s browser then executes or displays this social networking application until the user decides to exit or the application closes or otherwise ends.

In some examples while the application executes it communicates with the host social networking service to which it is associated. Example communications include authenticating authorizing utilizing the user interface elements of the host social network obtaining social network information about user such as connections with other users sending messages to other users and the like.

In some examples social networking application may communicate with social networking application service . Social networking application service may include various functions to assist social networking application . In some examples social networking application service may include application module which stores and delivers to user terminals including user terminal social networking application from storage . In other examples application module may contain execution logic for social networking application . Examples of this execution logic include responding to user actions and inputs payment and purchasing information for purchasing the application or unlocking accelerating or making available various features in the application sending messages to and from various other users of the application storing application data in data store providing various media files such as graphics video and sound files and the like.

While shows one social networking application many different instances and different types of social networking applications may utilize social networking application service . These applications often request the same information from the various social networking services. For example each application that user executes will likely query social networking services for a connections list. Each call to the social networking service is slow and in some cases may slow down the execution of the social networking application .

Disclosed in one example is a multi level caching and synchronization system. This system utilizes different caching layers to cache information retrieved by or for social networking applications from social networking services for easier retrieval. In some examples the system is also designed to allow social networking applications to share retrieved data to allow for increased efficiencies. In other examples the system and method may take geography into account such that various pieces of the caching system are close to the social networking applications for faster response times.

A cache may be short term storage that can be used to speed up data accesses by temporarily placing data or a copy of it in a location where it may be accessed more rapidly than normal. If requested data is contained in the cache cache hit this request may be served by simply reading the cache which is comparatively faster. Otherwise cache miss the data might need to be recomputed or fetched from its original or some other storage location which may be comparatively slower. In some examples a cache may be hardware implemented or software implemented on general purpose hardware. In some examples the storage for the caches may be implemented in random access memory but in other examples it may be implemented on persistent storage such as hard disks magnetic disks optical disks tape drives and the like.

Turning now to an example split geography multi layer caching system is shown. Elements represent different defined geographical regions. An exploded view of a region is shown. Regions in some examples have the same components as those shown in region . These regions may contain one or more social networking application services . Each social networking application service may contain one or more process cache modules for the various social networking applications . A request for data from social networking application may be sent to social networking application service . Social networking application service may then check application process cache to determine whether or not the information is already stored in the application process cache . If the information is in the cache e.g. the cache hits it is returned. If the information is not in the cache e.g. the cache misses in some examples the social networking application service may then contact the social networking services for the information. The process cache may be controlled by the social networking application or on its behalf by social networking application service and in some examples may be specific to a social networking application such that data placed in the process cache by one social networking application is not accessible by any other social networking application. In some examples the hardware that implements the social networking process cache may be shared among multiple social networking applications but logically kept specific to each individual application by software. In other examples the hardware that implements the social networking process cache may be separate for each application. In yet other examples the process caches may be located separately from social networking application service .

In other examples the social networking application service may utilize additional caching structures and network infrastructure to handle the request on a miss from the process cache. Social networking application services located within geographical region or area may have access to hot caches . Hot caches may be specific to each social networking application and may be checked if the process cache misses does not have the required data . The hot caches may be implemented on one or more computing resources including servers persistent storage databases etc. . . . that are generally located close to the social networking application service that they serve and configured to provide a cache. As with the process caches each social networking application may have its own separate hot caches. In some examples the hardware that implements the hot caches may be shared among multiple social networking applications but logically kept specific to each individual application by software. In other examples the hardware that implements the different hot caches may be separate for each application. In some examples the hot caches utilize memcached a general purpose distributed memory caching system originally developed by Danga Interactive. In some other examples the hot caches may be implemented on one or more of the social networking application services data center or persistent storage and manager or a separate data center.

While process caches and hot caches were described as specific to a social networking application in that each social networking application can only access data stored by itself in some examples process cache warm cache or both can be shared caches. In these examples data submitted to the caches is accessible by all other social networking applications in the same geographical region or in some other examples by all social networking applications in general.

On a miss from the hot caches social networking application service and social networking application also have access to a data center with a series of warm caches . Warm caches in some examples are not specific to any particular social networking application service or any specific social networking application . Instead data stored in warm caches in some examples may be accessed by any other application executing in the geographical region. In still other examples any application executing anywhere can access the data stored in the warm caches . In this way disparate social networking applications within a particular geographic area may decrease access times by sharing data. For example if the application is MAFIA WARS from ZYNGA it may utilize information regarding user that was previously collected by a CITYVILLE application developed by ZYNGA . In other examples the warm caches may be application specific. In some examples the warm caches are in a separate data center but in other examples the warm cache may be implemented as part of one of the social networking application services or on each social networking application service . The data center can be any combination of hardware and software necessary to implement the warm cache and can include computing resources such as computer processors temporary and permanent storage such as RAM ROM Networked Attached Storage Storage Area Networks hard disks tape drives and any means of temporary or permanent storage network communications for communicating with social networking application service persistent storage manager hot caches or any other component and the like. Data center may also include any of the components described in the example machine implementation of this disclosure. In still other examples warm caches can be implemented in one or more social networking application services or implemented with hot caches or with persistent storage and manager .

On a miss from the warm cache social networking application services and social networking application have access to a persistent storage manager and associated persistent storage . In some examples persistent storage may persistently store previously requested information from social networking applications . In some examples once user is known to the system the persistent storage manager may begin to store information regarding the user and in yet other examples persistent storage manager may actively contact social networking applications and retrieve additional information for storage. Persistent storage may be any method of storing data for more than a transitory period. In some examples persistent storage may be implemented as a database or a data store.

In some examples persistent storage manager may schedule updates of the information about a user based on a variety of events including the time since the last update user events such as a user playing a game or the like. Once the information is updated persistent storage manager may be responsible for updating the warm caches in the various regions to reflect this new information. Additionally persistent storage manager may be responsible for updating warm caches in the various regions upon a cache miss for requested data. Persistent storage manager can be any module that maintains persistent storage responds to requests for data and updates user data. Persistent storage manager may be any combination of hardware and software necessary to manage persistent storage and can include computing resources such as computer processors temporary and permanent storage such as RAM ROM Networked Attached Storage Storage Area Networks hard disks tape drives and any means of temporary or permanent storage network communications for communicating with other components and the like. Persistent storage manager may also include any of the components described in the example machine implementation of this disclosure. In addition persistent storage manager may be integrated with persistent storage .

Once the requested data is obtained from one of the various levels of caches any cache which missed for the data is updated to include the requested data. Persistent storage is also updated if it misses. In some examples the warm caches are updated by the persistent storage manager and the process and hot caches are updated by the social networking application service or in some examples social networking application .

In some examples the geographical region can be divided into sub geographical regions each with one or more social networking application services such that users that utilize social networking applications are geographically close to social networking service such that access times are quicker. In some examples each sub geographic region may have its own hot caches in other examples hot caches may serve more than one sub geographic region and in yet other examples the hot caches may serve all the sub geographic regions. In some examples data center is specific to each geographical region . In yet other examples data center may be specific to one or more sub geographical regions.

Thus in some examples each level of cache may serve a broader geographical or sub geographical region. In one example the process cache serves a sub geographical region the hot caches serve multiple sub geographical regions the warm caches serve all sub geographical regions whereas the persistent storage and manager serve all geographical regions. A geographical region can be any physical grouping of resources and modules. In some examples the region can be based upon pre existing territorial or other boundaries but in other examples the region can be based upon factors such as server access times network infrastructures cost and the like.

If the process cache misses the application service next checks the hot cache . If the hot cache hits at the information in the hot cache is returned to the requestor and refreshed and the information is then stored in the process cache at .

If the hot cache misses turning to the application service checks the warm cache . If the warm cache hits at then the information is returned to the requestor and the warm cache is updated at . Additionally the information is then stored in the hot cache at and the process cache at .

If the warm cache misses the application service then checks persistent storage . If the information is in persistent storage at then the information is stored in the warm cache the hot cache and the process cache at and returned to the requestor.

If the requested data is not in the persistent storage then the social networking application service the social networking application or the persistent storage manager may fetch the information from social networking services . Once the information is retrieved it is stored in persistent storage the warm cache the hot cache and the process cache . This operation can be done immediately or queued for later processing.

In some examples the social networking application or application service may be responsible for checking the various caches by first checking process caches then contacting hot caches then warm caches and then persistent storage and manager . In other examples upon a miss from one of the caches each cache contacts the next cache thus for example the hot cache would contact the warm caches upon a miss in the hot caches. The resulting requested application data can be transferred directly back to the social networking application or application service or transferred back to the requester e.g. one of the caches .

While the various components of are shown connected to each other directly in some examples they may be connected through a network. In some examples the network may be the internet a LAN WAN Cellular or any other network which allows the various components to communicate with each other. The communications over the network may be any method that allows the transfer of the information from the various components. Additionally while the present disclosure used social networking applications and social networking data one skilled in the art with the benefit of the present disclosure will appreciate that the caching system disclosed is applicable to other types of applications and other types of data. Additionally while three levels of caching are shown one skilled in the art with the benefit of the present disclosure will appreciate that more or fewer caches can be used.

Disclosed in one example is a method whereby a request for application data may be made by a first application over a network. The method may include searching for the application data in a first cache using at least one computer processor responsive to a miss from the first cache contacting over the network a second cache and searching for the application data in the second cache responsive to a miss from the second cache contacting over the network a third cache and searching for the application data in the third cache. The third cache may be specific to one of a plurality of geographical areas the third cache storing data for the first application and a plurality of other applications executing in that geographical area the searching for the application data in the third cache including searching data stored by the plurality of other applications and data stored by the first application. The method may also include responsive to a miss from the third cache contacting over the network a persistent store and searching for the application data in the persistent store and responsive to a hit from any of the first second or third caches receiving the application data.

Disclosed in another example is a caching system. The caching system may have a first cache specific to a first application and configured to store data and search for application data requested over a network from the first application and responsive to a hit in the first cache to return the application data to the first application. The caching system also may have a second cache communicatively coupled to the first cache through the network the second cache configured to store data search for the application data in response to a miss from the first cache and return the application data to the first application in response to a hit in the second cache. The caching system may also have a third cache communicatively coupled to the first and second caches through the network the third cache specific to one of a plurality of geographical areas and configured to store data for the first application and a plurality of other applications executing in that geographical area search for the application data in the data stored by the plurality of other applications and data stored by the first application in response to a miss from the second cache and return the application data to the first application in response to a hit in the third cache. The caching system may also have a persistent store configured to store data responsive to a miss from the third cache search for the application data and responsive to a hit from the persistent store return the application data to the first application.

Disclosed in another example is a machine readable storage medium that stores instructions which when performed by a machine causes the machine to perform certain operations. The operations include receiving a request for application data made by a first application over a network. The operations may include searching for the application data in a first cache responsive to a miss from the first cache contacting over the network a second cache and searching for the application data in the second cache responsive to a miss from the second cache contacting over the network a third cache and searching for the application data in the third cache. The third cache may be specific to one of a plurality of geographical areas the third cache storing data for the first application and a plurality of other applications executing in that geographical area the searching for the application data in the third cache including searching data stored by the plurality of other applications and data stored by the first application. The operations may also include responsive to a miss from the third cache contacting over the network a persistent store and searching for the application data in the persistent store and responsive to a hit from any of the first second or third caches receiving the application data.

These examples maybe combined in any permutation or combination. These non limiting additional notes and examples are intended to provide an overview of subject matter of the present patent application. It is not intended to provide an exclusive or exhaustive explanation of the invention. The detailed description is included to provide further information about the present patent application.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied 1 on a non transitory machine readable medium or 2 in a transmission signal or hardware implemented modules. A hardware implemented module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more processors may be configured by software e.g. an application or application portion as a hardware implemented module that operates to perform certain operations as described herein.

In various embodiments a hardware implemented module may be implemented mechanically or electronically. For example a hardware implemented module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware implemented module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware implemented module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware implemented module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily or transitorily configured e.g. programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which hardware implemented modules are temporarily configured e.g. programmed each of the hardware implemented modules need not be configured or instantiated at any one instance in time. For example where the hardware implemented modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware implemented modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware implemented module at one instance of time and to constitute a different hardware implemented module at a different instance of time.

Hardware implemented modules may provide information to and receive information from other hardware implemented modules. Accordingly the described hardware implemented modules may be regarded as being communicatively coupled. Where multiple of such hardware implemented modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware implemented modules. In embodiments in which multiple hardware implemented modules are configured or instantiated at different times communications between such hardware implemented modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware implemented modules have access. For example one hardware implemented module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware implemented module may then at a later time access the memory device to retrieve and process the stored output. Hardware implemented modules may also initiate communications with input or output devices and may operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. Application Program Interfaces APIs . 

Example embodiments may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Example embodiments may be implemented using a computer program product e.g. a computer program tangibly embodied in an information carrier e.g. in a machine readable medium for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers.

A computer program may be written in any form of programming language including compiled or interpreted languages and it may be deployed in any form including as a stand alone program or as a module subroutine or other unit suitable for use in a computing environment. A computer program may be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

In example embodiments operations may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method operations may also be performed by and apparatus of example embodiments may be implemented as special purpose logic circuitry e.g. a field programmable gate array FPGA or an application specific integrated circuit ASIC .

The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In embodiments deploying a programmable computing system it will be appreciated that that both hardware and software architectures require consideration. Specifically it will be appreciated that the choice of whether to implement certain functionality in permanently configured hardware e.g. an ASIC in temporarily configured hardware e.g. a combination of software and a programmable processor or a combination of permanently and temporarily configured hardware may be a design choice. Below are set out hardware e.g. machine and software architectures that may be deployed in various example embodiments.

The example computer system includes a processor e.g. a Central Processing Unit CPU a Graphics Processing Unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a Liquid Crystal Display LCD or a Cathode Ray Tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard a User Interface UI cursor controller e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device e.g. a transmitter .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or used by any one or more of the methodologies or functions illustrated herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media.

The instructions may further be transmitted or received over a network via the network interface device using any one of a number of well known transfer protocols e.g. HTTP Session Initiation Protocol SIP .

The term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any of the one or more of the methodologies illustrated herein. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic medium.

Method embodiments illustrated herein may be computer implemented. Some embodiments may include computer readable media encoded with a computer program e.g. software which includes instructions operable to cause an electronic device to perform methods of various embodiments. A software implementation or computer implemented method may include microcode assembly language code or a higher level language code which further may include computer readable instructions for performing various methods. The code may form portions of computer program products. Further the code may be tangibly stored on one or more volatile or non volatile computer readable media during execution or at other times. These computer readable media may include but are not limited to hard disks removable magnetic disks removable optical disks e.g. compact disks and digital video disks magnetic cassettes memory cards or sticks Random Access Memories RAMs Read Only Memories ROMs and the like.

The above detailed description includes references to the accompanying drawings which form a part of the detailed description. The drawings show by way of illustration specific embodiments in which the invention may be practiced. These embodiments are also referred to herein as examples. Such examples may include elements in addition to those shown or described. However the present inventors also contemplate examples in which only those elements shown or described are provided. Moreover the present inventors also contemplate examples using any combination or permutation of those elements shown or described or one or more aspects thereof either with respect to a particular example or one or more aspects thereof or with respect to other examples or one or more aspects thereof shown or described herein.

All publications patents and patent documents referred to in this document are incorporated by reference herein in their entirety as though individually incorporated by reference. In the event of inconsistent usages between this document and those documents so incorporated by reference the usage in the incorporated reference s should be considered supplementary to that of this document for irreconcilable inconsistencies the usage in this document controls.

In this document the terms a or an are used as is common in patent documents to include one or more than one independent of any other instances or usages of at least one or one or more. In this document the term or is used to refer to a nonexclusive or such that A or B includes A but not B B but not A and A and B unless otherwise indicated. In this document the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein. Also in the following claims the terms including and comprising are open ended that is a system device article or process that includes elements in addition to those listed after such a term in a claim are still deemed to fall within the scope of that claim. Moreover in the following claims the terms first second and third etc. are used merely as labels and are not intended to impose numerical requirements on their objects.

Method examples described herein may be machine or computer implemented at least in part. Some examples may include a computer readable medium or machine readable medium encoded with instructions operable to configure an electronic device to perform methods as described in the above examples. An implementation of such methods may include code such as microcode assembly language code a higher level language code or the like. Such code may include computer readable instructions for performing various methods. The code may form portions of computer program products. Further in an example the code may be tangibly stored on one or more volatile non transitory or non volatile tangible computer readable media such as during execution or at other times. Examples of these tangible computer readable media may include but are not limited to hard disks removable magnetic disks removable optical disks e.g. compact disks and digital video disks magnetic cassettes memory cards or sticks random access memories RAMs read only memories ROMs and the like.

The above description is intended to be illustrative and not restrictive. For example the above described examples or one or more aspects thereof may be used in combination with each other. Other embodiments may be used such as by one of ordinary skill in the art upon reviewing the above description.

The Abstract is provided to comply with 37 C.F.R. 1.72 b to allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims.

Also in the above Detailed Description various features may be grouped together to streamline the disclosure. This should not be interpreted as intending that an unclaimed disclosed feature is essential to any claim. Rather inventive subject matter may lie in less than all features of a particular disclosed embodiment.

Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment and it is contemplated that such embodiments may be combined with each other in various combinations or permutations. The scope of the invention should be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

