---

title: User customizable queries to populate model diagrams
abstract: A method, computer program product, and system for visually modeling architectures or system designs are described. A method may comprise providing an architectural model having a plurality of elements of one or more types. The method may further comprise providing a platform for a user to develop a non-software code query relating to the elements of the model. The method may also comprise executing the developed query to extract one or more of the plurality of elements from the model. The method may additionally comprise populating a diagram with the extracted one or more of the plurality of elements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08997037&OS=08997037&RS=08997037
owner: International Business Machines Corporation
number: 08997037
owner_city: Armonk
owner_country: US
publication_date: 20120716
---
The subject application is a continuation application of U.S. patent application with Ser. No. 12 879 654 the entire content of which is herein incorporated by reference which claims priority of Canadian Patent Application Serial No. 2684438 entitled User Customizable Queries To Populate Model Diagrams filed on Sep. 22 2009. The entire contents of the aforementioned applications are incorporated herein by reference.

The present invention relates to visual modeling of architectures or system designs and more specifically to user customizable queries to populate model diagrams with elements of a model.

In model driven development MDD domain specialists system architects and developers may communicate the architecture of a business or the design of a system which may include software programs through visual models. Different types of elements may be used in the model to represent the domain concepts relationships and processes. To enable others to understand these various concepts and their relationships model designers may use various reporting techniques including specialized diagrams. Each diagram may typically show one or more types of elements and the relationships between those elements. With large models it may be difficult for users to search such a model to find the desired types of elements within the model. The elements may be needed to populate the specialized diagrams.

Various modeling products may contain element types and may provide several components with public application programming interfaces API that may allows programmers to write code that can query a model for desired elements to populate a diagram with the results. However most users of these products may not have the time and or the skills necessary to write the required code to implement such a query mechanism. Although users may use existing product features to populate the diagrams manually such a task may be time consuming and with large models there may be a risk of missing elements needed to populate the diagrams.

In one embodiment a method may comprise providing an architectural model having a plurality of elements of one or more types. The method may further comprise providing a platform for a user to develop a non software code query relating to the elements of the model. The method may also comprise executing the developed query to extract one or more of the plurality of elements from the model. The method may additionally comprise populating a diagram with the extracted one or more of the plurality of elements.

In another embodiment a computer program product for visually modeling architectures or system designs may comprise a computer readable storage medium having computer readable program code embodied therewith. The computer readable program code may comprise computer readable program code configured to implement a method for visually modeling architectures or system designs. The method may include providing an architectural model having a plurality of elements of one or more types. The method may further include providing a platform for a user to develop a non software code query relating to the elements of the model. The method may also include executing the developed query to extract one or more of the plurality of elements from the model. The method may additionally include populating a diagram with the extracted one or more of the plurality of elements.

In yet another embodiment a system may comprise a computing network including a processing device in communication with one or more computer memory storage devices. The computing network may be further configured to implement a method for visually modeling architectures or system designs. The method may include providing an architectural model having a plurality of elements of one or more types. The method may further include providing a platform for a user to develop a non software code query relating to the elements of the model. The method may also include executing the developed query to extract one or more of the plurality of elements from the model. The method may additionally include populating a diagram with the extracted one or more of the plurality of elements.

In still another embodiment a method may comprise providing an architectural model having a plurality of elements of one or more types. The method may further comprise providing an architectural model having a plurality of elements of one or more types and having relationships among the elements in each of the one or more types of elements. The method may also comprise extracting one or more of the elements from the model from a derived user defined non software code query. The method may additionally comprise populating a diagram with at least one of the extracted one or more of the plurality of elements.

In yet another embodiment a computer program product for visually modeling architectures or system designs may comprise a computer readable storage medium having computer readable program code embodied therewith. The computer readable program code may be configured to implement a method for visually modeling architectures or system designs. The method may further include providing an architectural model having a plurality of elements of one or more types and having relationships among the elements in each of the one or more types of elements. The method may also include extracting one or more of the elements from the model from a derived user defined non software code query. The method may additionally include populating a diagram with at least one of the extracted one or more of the plurality of elements.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will become apparent from the description the drawings and the claims.

With reference to there is illustrated a model diagram that shows the various components of a modeling product and their interrelationships in which user customizable queries of embodiments of the present invention may reside. Modeling products such as that shown in may provide frameworks or components that allow developers to add custom features to these products such as embodiments of the present invention. The components illustrated in may include an element type registry an Eclipse preferences dialog and storage mechanism an Eclipse extensions registry an Eclipse diagram component a diagram explore tool framework a model indexing component and a business intelligence and reporting tools BIRT component .

The element type registry may provide a method to distinguish types of elements in an architectural model based upon some characteristic or element property values. For example a Universal Modeling Language 2 UML2 profile with stereotypes may be applied to a model and elements may be stereotyped to indicate domain concepts. Element types may then be defined for each stereotype to identify those elements that correspond to specific domain concepts.

The preferences dialog and storage mechanism may allow for custom preference pages that may enable users to specify parameters for functionality in the product. The preferences storage mechanism may save these parameters so that they may be referenced in subsequent product sessions. This storage mechanism may also allow one user to export the preferences so that another user may import and use them.

The Eclipse extensions registry may enables developers to define custom data that may be integrated into an existing feature in the product. For example embodiments of the present invention may define an extension point for predefining custom queries. Queries defined using this extension point may be automatically made available to all users of that modeling product.

The Eclipse diagram component may provide a notation meta model for constructing shapes and connectors on diagrams.

The explore tool framework may enable developers to define diagram palette tools that have associated query logic written as software code. When an explore tool is selected by the user its corresponding query code may be executed and the results may be added to the selected diagram. The explore tool framework may also enable the user to save a representation of the corresponding query and its parameters on the diagram. A diagram refresh button may update the elements shown on the diagram by once again executing the code that corresponds to the saved custom queries. The embodiments of the present invention may provide the logic for an explore tool framework query that may enable users to define and execute non software coded custom queries.

The model indexing component may provide a relatively efficient mechanism for finding elements in models that may match selected criteria such as elements that correspond to a specific element type.

The BIRT component may enable users to design report templates and to generate reports using a template and associated models. When designing a report the user may desire to include all diagrams from the associated models that have specific saved custom queries. As described in detail hereinafter embodiments of the present invention may provide a mechanism to locate and extract the desired diagrams into a generated report.

In accordance with embodiments of the present invention users may define or create custom queries using a preference page . When defining a custom query the user may specify several parameters including the desired groups of element types and the scope for searching the model including the relationships for the groups of elements based on one or more element types. The created custom queries and their parameters may be saved in the Eclipse preference storage mechanism . A single diagram explore palette tool may enable the user to choose which custom query to execute on a particular diagram. When a custom query is executed the model indexing component and the specified search scope may be used to locate the model elements that correspond to the desired element types and the results may be added to the diagram. After the custom query is executed the explore tool framework may allow the user to save that custom query on the diagram for subsequent refreshes. That is when the custom query is rerun the diagram may be updated with any new elements located i.e. the diagram may not be regenerated from scratch . The query may be saved on a diagram if the user later desires to include the diagram in a report.

Embodiments of the invention define a BIRT callable function which may be referenced when designing a BIRT report template. One of the function parameters may identify a specific custom query. When a BIRT report is generated using that template with associated models that function may be called and it may extract the diagrams that may contain the given custom query and may add them into the generated report.

In order to have consistent diagrams embodiments of the invention may provide an Eclipse extension point to predefine custom queries. Developers and Information Technology IT specialists may typically use this extension in a custom plug in. When that plug in is deployed into the product those custom queries may be automatically available to all of their users.

Embodiments of the invention may be relatively tightly coupled with the explore tool framework . The explore tool framework may provide Eclipse extension points and API to define tools for the explore tab of a diagram palette. The framework may be designed for developers to create tools that may run a query to extract desired elements from a model and to add the results to a diagram. Each explore tool may be designed to run a single specific query with optional parameters. Embodiments of the user customizable queries of the present invention may extend this framework so that a single explore tool actually represents multiple different queries where the queries may not be defined in code by the developer but may be specified by users of the product.

Referring to the more detailed model diagram of in the explore tool framework each explore tool may have an associated topic query model which may define some basic information about the explore tool and three associated classes code which may perform the processing of the tool the configurator the executor and the presenter . When the explore tool is selected on a diagram an overlay instance of the topic query model may be created with the default values for the parameters. The three classes may then called in order. The query configurator may use the overlay to determine if any of the parameter values should be updated. If so the parameter values in the overlay may be changed. The query executor may use the updated parameters from the overlay and may search for the semantic elements that may be displayed on the diagram. The query presenter may take the semantic element results of the executor and may add the corresponding shapes and connectors to the diagram. When the user chooses to save the query on the diagram the overlay object may be persisted along with its parameter values.

In accordance with embodiments of the present invention the user customizable queries feature may use a single custom query explore tool along with specific embodiments of the configurator the executor and the presenter classes. Individual custom queries may be represented by objects that implement the interface custom query instance . There are two classes that may implement this interface the custom query overlay and the preference instance . Both of these classes may implement the methods defined on the interface for manipulating the parameters of the instance . The custom query overlay may encapsulates the overlay created by the explore tool framework and may store its parameters on the diagram. The preference instance may be created by a custom query registry and it may store its parameters in the Eclipse preferences component . The query registry may also use the Eclipse extensions component to obtain the data needed to create the predefined custom queries. A custom query preference page may use the query registry and the element type registry to create modify and delete the user s custom queries. A custom query dialog may be displayed by the configurator when the explore tool is used. This dialog may enable the user to choose which custom query to be executed.

Every custom query instance including saved overlays may include the following parameters which may be specified by the user custom query name description of the custom query custom query identifier must be unique and not translated search scope list of element types and flag to include specializations of the selected element types.

The custom query name and description may indicate the type of data to be added to the diagrams when the query is executed. When a topic overlay corresponding to a custom query is saved to the diagram all of the parameters may be saved. When generating a BIRT report the user may extract diagrams that have a specific saved custom query. The parameter including the custom query identifier may be used to distinguish the overlays because it may be unique and may not be affected by different locales. The names of predefined custom queries may typically be translated.

The search scope for a custom query may assume the following containment structure. The Eclipse workspace may contain one or more projects. Each project may contain one or more models and each model may have a hierarchy of containers called packages. The choices for the search scope may be package package hierarchy model project or workspace. The selected search scope may always be relative to the project model and package that contain the selected diagram. The package hierarchy search scope may correspond to the current package and all of its contained packages.

The list of element types may determine those elements that will be shown on the corresponding diagram. Some element types may not be available because there may be different types of diagrams that may have restrictions on the elements that can be shown.

In the element type registry one element type may be a specialization of another element type. For example in the automotive domain the element type Vehicle might have specializations Car Motorcycle and Truck. Setting the parameter to include specializations or derived element types means that the user may select the root element type and all elements whose types are specializations are also added to the diagram.

As described hereinabove the user customizable query feature of embodiments of the present invention may use a query registry to maintain the available custom query instances. At startup time this registry may examine an extension point for predefined custom queries and may create an instance for each query. The parameters from the extension may become the default parameter values for the query instance. In the query instance the default parameter values may be kept separate from the current values so that the user may override those default values or reset the query instance back to the default values. After the extensions are processed the registry examines the preference storage mechanism for user defined queries. If a user defined query corresponds to a predefined query then the current parameter values of the existing query instance may be updated from the preference storage. If a user defined query does not correspond to a predefined query a new instance may be created with the preference parameter values.

Referring to there is illustrated an exemplary custom query preference page on a computer screen that may enable a user to create modify and delete custom queries in accordance with embodiments of the present invention. The drop down box at the top right in typically may include all of the then known custom queries both predefined and user defined. The New button may create a new custom query with default parameter values while the Copy button may create a new custom query with the current parameter values that were defined for the selected query. In both cases the user may specify the name and a unique identifier for the new custom query. Verification of the identifier may be performed to ensure it is unique and conforms to any design restrictions on its format. The Rename button and the Delete button may typically be available only for user defined queries. Predefined custom queries defined in extensions generally may not be renamed or deleted. Also when an existing user custom query is renamed the query identifier generally may not be changed. All other query parameter values e.g. query description search mode and a list of element types to search for may be changed in the preference page . When the OK button or the Apply button is selected the updated values may be written back to the Eclipse preference storage . When the Restore Defaults button is selected the default values for the selected query may be copied over its current values.

Referring to when the custom query explore tool is selected on a diagram the user may indicate which custom query to execute including any newly created custom queries. illustrates an example of a dialog box that may appear on the computer screen and may allow the user to choose the desired query to execute and to modify some parameters if necessary of the query before its execution. After the custom query runs the user may save the query on the diagram to refresh the diagram relatively quickly by re running the query again and to explicitly extract the diagram into a BIRT generated report. If the query is saved on the diagram an outline view may show the name of the custom query. The diagram refresh may be handled automatically by the explore tool framework . All of the queries overlays saved on the diagram may be executed again by calling the corresponding explore tool classes.

A custom query BIRT function may be registered as an xpath function and may be specified in an expression when defining a BIRT data set. This function may take two parameters a set of model objects that may contain diagrams and a string to identify the custom query that may be saved on those diagrams. Although the latter parameter is to be the custom query identifier the report designer may also specify the query name. When doing the lookup the name specified as a parameter and the names and identifiers of saved custom queries may be normalized to make matching easier. The normalization converts the strings to lower case and removes spaces and commas. For each diagram and each saved query on a diagram the lookup function first may compare the query identifier with the specified parameter and then may compare the query name. If either matches then that diagram may be included in the output set of diagrams.

Referring to a sample UML model may be created and populated with multiple elements of the type along with several relationships created between the elements including a UML generalization and a dependency. illustrates a model diagram called Data Model Diagram and the custom query logical data model may be executed and saved on that diagram . shows the results of the query on the diagram along with the diagram palette and an outline view of the diagram. The custom queries tool according to embodiments of the present invention may be shown in the palette and the saved Logical Data Model custom query may be listed in the outline view .

Referring to a BIRT report design template may be created which may use the callable BIRT function to extract the diagram with the saved custom query. A corresponding published report may be generated for the model in e.g. PDF format as illustrated in .

Embodiments of the present invention provide the user with a tool to define custom queries that may search architectural models or portions of models for selected element types. Embodiments of the invention may also provide a diagram palette tool for the user to execute these custom queries and to populate diagrams with the results. In addition embodiments of the invention may provide a tool to extract these diagrams into generated reports.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Referring now to computer system may have at least one microprocessor or central processing unit CPU . CPU may be interconnected via a system bus to a random access memory RAM a read only memory ROM an input output I O adapter for a connecting a removable data and or program storage device and a mass data and or program storage device a user interface adapter for connecting a keyboard and a mouse a port adapter for connecting a data port and a display adapter for connecting a display device .

ROM may include the basic operating system for computer system . The operating system may alternatively reside in RAM or elsewhere as is known in the art. Examples of removable data and or program storage device may include magnetic media such as floppy drives and tape drives and optical media such as CD ROM drives. Examples of mass data and or program storage device may include hard disk drives and non volatile memory such as flash memory. In addition to keyboard and mouse other user input devices such as trackballs writing tablets pressure pads microphones light pens and position sensing screen displays may be connected to user interface . Examples of display devices may include cathode ray tubes CRT and liquid crystal displays LCD .

A computer program with an appropriate application interface may be created by one of skill in the art and may be stored on the system or a data and or program storage device to simplify the practicing of embodiments of the invention. In operation information for or the computer program created to run embodiments of the present invention may be loaded on the appropriate removable data and or program storage device and may be fed through data port or typed in using keyboard .

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

