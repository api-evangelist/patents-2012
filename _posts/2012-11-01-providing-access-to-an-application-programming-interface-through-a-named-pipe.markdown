---

title: Providing access to an application programming interface through a named pipe
abstract: An API calling process creates a named pipe through which a program can submit data to an application programming interface (“API”). Appropriate permissions are set on the named pipe such that only authorized applications can write data to the named pipe. When data is written to the named pipe, the written data is piped to the API calling process. The API calling process may process the written data, such as by placing the data into an appropriate format for submission to an API. The API calling process then utilizes appropriate credentials to call an API with the data written to the named pipe. For example, the API calling process might utilize service credentials to make a Web services API call to submit the data written to the named pipe to a Web services API exposed by a network service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183065&OS=09183065&RS=09183065
owner: Amazon Technologies, Inc.
number: 09183065
owner_city: Seattle
owner_country: US
publication_date: 20121101
---
Creating program code for utilizing an application programming interface API can be difficult and time consuming. For instance in order for a programmer to program an application to utilize an API such as a World Wide Web Web service API it may be necessary for the programmer to understand a network stack various protocols and the format and use of the API itself. The complexity in creating program code for accessing and utilizing certain APIs might discourage programmers from utilizing the APIs especially when the APIs are not related to the core functionality of an application.

The following detailed description is directed to technologies for providing access to an API through a named pipe. Utilizing the technologies described herein a program can access an API such as a Web service API by writing data to a named pipe. By utilizing a named pipe in this manner a programmer can be freed from the typical complexity of generating program code for accessing an API. Additional details regarding these and other aspects of the concepts and technologies disclosed herein for providing access to an API through a named pipe are provided below.

According to one aspect presented herein a computer program referred to herein as an API calling process creates a named pipe on a network host. A named pipe is a file in a filesystem that can be utilized to transfer data from one program to another program. Using a named pipe information written to the named pipe by one program can be transferred to another program without creating an intermediate temporary file. In the embodiments presented herein processes such as application programs executing on the network host can write data to the named pipe that then is piped to the API calling process.

In one embodiment filesystem permissions are set on the named pipe to restrict write access to the named pipe to one or more applications executing on the network host. The applications authorized to write to the named pipe are those applications that are also authorized to access an API such as a Web service API exposed by a network service. In this way a mapping can be created between filesystem permissions on the named pipe to credentials for accessing an API. It should be appreciated that other types of APIs in addition to Web service APIs might also be accessed through a named pipe in a similar manner.

In some embodiments the named pipe is stored in a filesystem directory that is associated with an API. In this way a mapping can be created between locations in a filesystem and APIs such as Web service APIs. Additionally multiple instances of the API calling process along with multiple associated named pipes might be created on the same host.

When an application with appropriate permissions writes data to the named pipe the written data is piped to the API calling process. In response to receiving the written data the API calling process utilizes a set of service credentials to perform an API call containing the written data. For instance the API calling process might utilize the service credentials to perform a Web service API call that includes the written data to a Web service API exposed by a network service. Other types of credentials might also be utilized to submit data written to a named pipe to other types of APIs.

In some embodiments the API calling process performs processing on the data written to the named pipe prior to generating an API call with the written data. For example the API calling process might place the data written to the named pipe into a format suitable for submission to an API if the data is not already in an appropriate format. The API calling process might also batch the data written to the named pipe with other data written to the named pipe for submission to the API. In this way the processing and network load on the network host executing the API calling process might be reduced. The API calling process might also perform other types of processing on data written to a named pipe prior to submitting the data to an API.

In some implementations an application writes metrics associated with the execution of the application to the named pipe. In this way the application can easily submit metrics to an API configured to collect aggregate and analyze the metrics. In other implementations an application writes log data associated with the execution of the application to the named pipe. In this way an application log can easily be easily submitted to an API configured to collect and analyze application logs. Other types of data might also be written to a named pipe and submitted to an API in other embodiments.

In some implementations multiple applications might write data to the same named pipe. In these implementations the API calling process might examine the written data to identify the application that wrote the data to the named pipe. The API calling process might also identify the destination API for the written data based upon the contents of the written data which might include data specifying the identity of the application that wrote the data to the named pipe.

In other embodiments a single instance of the API calling process might receive data written to multiple named pipes. In this embodiment the API calling process might identify the application writing the data and the destination API for the data based upon the named pipe to which the data was written. Appropriate credentials for accessing an API might also be selected based upon the calling application the named pipe to which data was written the contents of the data or in another manner. Additional details regarding the various components and processes described above for accessing an API through a named pipe will be presented below with regard to .

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that aspects of the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers cellular telephone devices special purposed hardware devices network appliances and the like. The embodiments described herein may be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures which may be referred to herein as a FIG. or FIGS. .

As also illustrated in the network host is configured in one embodiment to execute an API calling process . As will be described in greater detail herein the API calling process is configured to create a named pipe on the network host . As mentioned briefly above a named pipe is a file in a filesystem that can be utilized to transfer data from one program to another program. Using a named pipe information written to the named pipe by one program can be transferred to another program without creating an intermediate temporary file. For instance in the embodiments presented herein an application executing on the network host can write data to the named pipe that is piped to the API calling process . Additional details regarding this process will be provided below.

In the embodiment shown in the API calling process is also configured to generate and make an API call to an API exposed by a network service executing on the network server . As will be described in greater detail herein the API call includes the data written to the named pipe by the application . By allowing an application to provide the data to the API by writing the data to the named pipe the programmer of the application is freed from the complexities of the API . Rather the programmer only needs to configure the application to write the data to the named pipe . Additional details regarding these processes will be provided below with regard to .

As also illustrated in the API calling process might set permissions on the named pipe . The permissions describe the access rights that programs and users have to write to the named pipe . For example the API calling process may set the permissions such that only applications configured to make an API call to the API have permissions to write to the named pipe . In the example shown in for instance the permissions may be set such that only the application has permissions to write to the named pipe . In one implementation the permissions are UNIX permissions such as user or group filesystem permissions. In this implementation a mapping can be effectively created between the UNIX group permissions and an API permission structure such as API service credentials. This mechanism is described in greater detail below.

In some embodiments the API calling process also utilizes service credentials to perform the API call to the API . The service credentials are credentials for accessing the network service . By utilizing credentials in this way an informal mapping is created between the permissions and the credentials utilized to access the network service . In the example shown in only a single set of service credentials is utilized to perform an API call to the API . In other embodiments described below however the API calling process might maintain multiple sets of service credentials and select the appropriate service credentials for a particular API call based upon the contents of the data the named pipe to which data is written the API that is being called and or other factors.

In the example shown in the API is a Web service API exposed by the network service . It should be appreciated however that the embodiments described herein might be utilized with other types of APIs other than Web service APIs. For instance the embodiments disclosed herein might be utilized with APIs exposed by programs executing on the network host by an operating system or by other types of programs using other types of APIs.

As will also be described in greater detail below the API calling process might perform various types of processing on the data prior to generating the API call with the data . For instance the API calling process might perform various translations formatting operations and or aggregation operations on the data . As an example the API calling process might format the data so that the data is in a format suitable for submission to the API .

The API calling process might also batch the data written to the named pipe with other data written to the named pipe for submission to the API . In this way the API calling process might reduce the processing and network load on the network host as a result of the calls to the API . In some implementations the API calling process might discard data that has been batched with other data when the data has expired prior to calling the API . In this way expired data is not submitted to the API . The API calling process might communicate with the submitting application in order to determine if data has expired. The API calling process might also perform other types of processing on the data prior to calling the API .

In some implementations the data written to the named pipe by the application is metrics data related to the execution of the application . In other implementations the data is log data relating to the execution of the application . It should be appreciated however that these examples are merely illustrative and that other types of data may be submitted to the API in the manner described herein.

Additionally although an application is illustrated in as writing to the named pipe any type of process executing on a computing device may write data to a named pipe in the manner described herein. In this regard it should be appreciated that the embodiments disclosed herein are not limited to use with an application a Web service API or server computers operating in a network environment. Additional details regarding these and other aspects of the mechanism disclosed herein for providing access to an API through a named pipe will be provided below with regard to .

As shown in an application A can write data A to a named pipe A created by an API calling process A. The permissions associated with the named pipe A allow the application A to write the data A to the named pipe A. The data A is then piped to the API calling process A which in turn utilizes the service credentials A to generate an API call A including the data A to the API A.

In a similar fashion the API calling process B creates the named pipe B and associates permissions B with the named pipe B that provide write access to the named pipe B to the application B. The application B can then write data B to the named pipe B which in turn is piped to the API calling process B. The API calling process B then utilizes the service credentials B to generate an API call B containing the data B to the API B.

In the manner illustrated in multiple instances of the API calling process can be executed on a single network host . Each instance of the API calling process can be configured to call an API exposed by a different network service . Additionally each API calling process can be configured with appropriate service credentials for accessing the associated API .

It should be appreciated that although two instances of the API calling process are shown in as executing on the network host many more such instances of the API calling process might be executed in other embodiments. These instances of the API calling process might perform API calls to a like or different number of APIs exposed by network services executing on the same or different network servers . As mentioned above calls might also be made in a similar fashion to other types of APIs in other embodiments.

In order to represent the logical structure of the APIs A C named pipes A C have been created in directories A C respectively. The directory A and the named pipe A correspond to the API A exposed by the network service A. Similarly the directory B and the named pipe B correspond to the API B exposed by the network service B. Likewise the directory C and the named pipe C correspond to the API C exposed by the network service C. As also shown in each of the named pipes A C have associated permissions A C respectively that provide write access to the named pipes A C to certain applications or processes.

By configuring the filesystem shown in in the manner described above the logical structure of the APIs A C of the network services C can be represented. This may assist applications or other processes that write data to the named pipes A C in discovering the structure of the APIs A C exposed by the network services A C. In this regard it should be appreciated that the filesystem shown in has been simplified for discussion purposes and that many levels of directories and named pipes might be created within the filesystem to represent an arbitrary structure of a group of APIs . Moreover it should also be appreciated that a single named pipe might be utilized to call access and or otherwise utilized multiple aspects of an API provided by a network service .

The implementation of the various components described herein is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the figures and described herein. Some operations might also be performed in parallel or in a different order than those described herein.

The routine begins at operation where the API calling process creates the named pipe . The API calling process also sets the permissions on the named pipe thereby providing write access to the named pipe to authorized applications . It should be appreciated that processes other than the API calling process might create the named pipe and set or modify the permissions . Additionally the named pipe and permissions may be created and specified by an administrator of the computing system upon which the named pipe is created.

From operation the routine proceeds to operation where an application writes data to the named pipe . The data is then piped to the API calling process . In response to receiving the data the routine proceeds to operation where the API calling process processes the received data . As discussed above the API calling process might perform various types of processing on the data . For example the API calling process may translate the data to a format appropriate for submission to the API . The API calling process might also perform other types of formatting operations on the received data . The API calling process might also batch the data for submission to the API with other data. Other types of processing might also be performed.

From operation the routine proceeds to operation where the API calling process utilizes the service credentials to create an API call that includes the data . The API call is then made to the API exposed by the network service in one embodiment. As discussed above the embodiments disclosed herein are not limited to performing API calls to a Web service API. Other types of API calls might also be made to other types of APIs utilizing the mechanism described herein. From operation the routine proceeds back to operation where additional data may be received by way of the named pipe and processed by the API calling process in the manner described above.

In response to receiving the data A or the data B the API calling process identifies the application A B that submitted the data to the named pipe through an analysis of the data A B. For instance the data A B might include data that identifies the application A B that wrote the data to the named pipe . Other mechanisms might also be utilized by the API calling process to identify the particular application A or B that wrote the data to the named pipe .

In one implementation the API calling process utilizes the same service credentials to generate API calls A B for both of the applications A B. In other embodiments however the service credentials comprise a list of credentials corresponding to each of the applications A B. In this way the API calling process can utilize different service credentials for each of the applications A B.

The API calling process might also determine which of multiple APIs A B to call for a particular application B. This determination might be made based upon the application A B that submitted data to the named pipe . For instance the API calling process might be configured to make an API call A to the API A when data A is received from the application A. Similarly the API calling process might be configured to make an API call B including the data B when an application B writes the data B to the named pipe . The API calling process might also be configured to call other APIs when data is written to the named pipe by other applications.

Although only two applications A B are illustrated in as writing data to the named pipe it should be appreciated that many more such applications might write data to the named pipe in other embodiments. In this way a single named pipe and a single instance of the API calling process can be utilized to generate a multitude of API calls to a multitude of APIs .

In the example shown in the application A has permissions A to write data A to the named pipe A. The data A is then provided by way of the named pipe A to the API calling process . In response to receiving the data A the API calling process might identify the service credentials to utilize in an API call A based on the contents of the data A or based upon the identity of the named pipe A to which the data A was written. For instance in the example shown in if data is written to the named pipe A the API calling process utilizes service credentials associated with the application A.

In a similar fashion the application B has also been provided permissions B to write data B to the named pipe B. When the API calling process receives the data B the API calling process determines the service credentials to utilize for an API call B based upon the data B or the identity of the named pipe B to which the data B was written. Additionally the API calling process might determine the particular API A B to call based upon the contents of the data A B the named pipe A B to which the data A B was written or based on the application A B submitting the data A B.

Once the API calling process has identified the appropriate service credentials and the appropriate API to call the API calling process utilizes the credentials to generate the API call . For instance in the example shown in the API calling process generates an API call A that includes the data A written to the named pipe A by the application A. The API call A is made to the API A exposed by the network service A executing on the network server A. Likewise the API calling process creates an API call B that includes the data B written to the named pipe B by the application B. The API call B is made to the API B exposed by the network service B executing on the network server B. Additional details regarding this mechanism and the mechanism described above with regard to will be provided below with regard to .

From operation the routine proceeds to operation where the API calling process receives data A or data B by way of the named pipes A B respectively. The routine then proceeds to operation where the API calling process identifies the destination API for the received data based upon the contents of the received data as illustrated above with regard to or based upon the named pipe to which the data was written as discussed above with reference to .

From operation the routine proceeds to operation where the API calling process identifies the service credentials to utilize for an API call to the identified API. As discussed above the service credentials to be utilized may be identified based upon the API to be called the application that submitted the data to the named pipe the named pipe upon which the data was received and or other factors.

Once the destination API and the appropriate service credentials have been identified the routine proceeds to operation . At operation the API calling process processes the received data . As discussed above this might include translating formatting and or batching the received data. Other types of processing might also be performed prior to generating an API call with the data.

From operation the routine proceeds to operation where the API calling process utilizes the identified service credentials to provide the received data to the identified API . For instance in the example shown in the API calling process utilizes the service credentials to generate an API call A that includes the data A written to the named pipe A by the application A. The API call A is made to the API A exposed by the network service A executing on the network server A. Other such calls might also be made to other APIs exposed using other technologies. From operation the routine proceeds to operation where additional data received at the API calling process might be processed in a similar manner as described above.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs may be standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard. The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as the local area network . The chipset may include functionality for providing network connectivity through a NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a Fibre Channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media can be any available media that provides for the storage of non transitory data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further embodiments the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer such as the API calling process the named pipe and or the other software components and data described above. The mass storage device might also store other programs and data not specifically identified herein.

In one embodiment the mass storage device or other computer readable storage media is encoded with computer executable instructions which when loaded into the computer transforms the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform the routines and described above with regard to respectively.

The computer may also include an input output controller for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly the input output controller may provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for accessing an API through a named pipe have been presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

