---

title: Methods and systems for evaluating historical metrics in selecting a physical host for execution of a virtual machine
abstract: Methods and systems for improved management of power utilization and resource consumption among physical hosts in a cloud computing environment. The management server may provide functionality facilitating the identification and optimized placement of a virtual machine within a cloud computing environment by evaluating historical and heuristic metrics data associated with both the physical hosts and the virtual machines. The management server utilizes the metrics data to generate scores for a plurality of physical host based on physical resources available in a cloud of computing resources. The management server identifies a physical host on which to place a virtual machine using the metrics data, generated scores, and numerous, configurable criteria. The management server responds to the identification of the physical host on which to place a virtual machine by adjusting processor performance and/or operating states for one or more of the physical hosts in the cloud computing environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09396042&OS=09396042&RS=09396042
owner: Citrix Systems, Inc.
number: 09396042
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20121015
---
This application generally relates to computer networking and computer virtualization. More particularly aspects described herein provide methods and systems for managing and executing virtual machines within a cloud computing environment. In particular aspects relate to methods and systems for dynamically managing power and resource consumption by evaluating historical metrics and redistributing virtual machines among physical hosts within a cloud computing environment.

Traditionally personal computers included operating systems applications and user settings for a single user. However many organizations are now using clouds of computing resources to fulfill their computing needs. The clouds of computing resources generally allow for the operating systems applications and user settings of multiple users to be included on a single physical machine. Desktop virtualization technology allows multiple instances of a guest operating system to be kept separate within a normal host operating system so the activities of one user may not affect the experience of other users. Typically methods for managing the power consumption and heat generation of physical host include consolidating several virtual machines onto a minimal number of physical host allowing inactive or unoccupied hosts to be powered down until increased resource consumption requires the host to be powered back on. Typically however powering on and off physical hosts can be time consuming and such delay can lead to the customer experiencing poor performance during periods of rapidly increasing resource demand. Moreover traditional methods of physical host power management have been limited to managing physical resources available in a shared pool of computing resources. Lacking the ability to implement power heat reduction techniques and evaluate status metrics for physical resources within a cloud computing environment limits or in some instances inhibits an administrator s ability to identify a physical host for executing a virtual machine that will optimize power performance.

In light of the foregoing background the following presents a simplified summary of the present disclosure in order to provide a basic understanding of some aspects described herein. This summary is not an extensive overview and it is not intended to identify key or critical elements or to delineate the scope of the claims. The following summary merely presents various described aspects in a simplified form as a prelude to the more detailed description provided below.

According to one aspect of the disclosure a method for dynamically managing power consumption of a physical host within a cloud computing environment includes retrieving a first plurality of metrics for each of a plurality of physical hosts available for executing a virtual machine said first plurality of metrics including at least a first metric identifying a level of usage for each of the plurality of physical hosts as of a predetermined time period. The method includes retrieving a second plurality of metrics associated with the virtual machine said second plurality of metrics including at least one metric identifying a level of usage exerted on each of the plurality of physical hosts by the virtual machine as of a predetermined time period. The method includes assigning a first power score to each of the plurality of physical hosts responsive to the retrieved first and second pluralities of metrics. The method includes determining a second power score for each of the plurality of physical hosts associated with at least the one metric identifying a level of usage exerted on each of the plurality of physical hosts by the virtual machine as of a predetermined time period. The method includes identifying one of the plurality of physical hosts on which to execute the virtual machine wherein the second power score of said physical host satisfies at least one predetermined criteria. The method includes responding to the identification of the physical host on which to execute the virtual machine by adjusting processor performance states for one or more of the plurality of physical hosts and adjusting processor operating states for one or more of the plurality of physical hosts.

In one embodiment the method includes retrieving the plurality of metrics for each of a plurality of physical hosts available for executing the virtual machine said plurality of metrics including at least a second metric identifying a level of usage for each of the plurality of physical hosts during a time period prior to the predetermined time period. In another embodiment the method includes identifying a first physical host in the plurality of hosts for execution of the virtual machine said first physical host having a higher second power score than a second physical host in the plurality of physical hosts. In still another embodiment the method includes identifying a first physical host in the plurality of hosts for execution of the virtual machine said first physical host including a characteristic for maximizing the power efficiency of the virtual machine. In still even another embodiment the method includes identifying one of the plurality of physical hosts on which to execute the virtual machine by evaluating the location of said physical host to determine maximum power usage efficiency. In yet another embodiment the method includes applying an algorithm to assign a first power score responsive to the retrieved first and second pluralities of metrics wherein a variety of weights are applied to the retrieved first and second pluralities of metrics. In another embodiment the method includes assigning a power score to each of the plurality of physical hosts responsive to the retrieved first and second pluralities of metrics the retrieved first plurality of metrics including at least a second metric identifying thermodynamic information associated with each of the plurality of physical hosts. In some embodiments the method includes assigning a power score to each of the plurality of physical hosts responsive to the retrieved first and second pluralities of metrics said retrieved first plurality of metrics including at least a second metric identifying run state information associated with each of the plurality of physical hosts. In other embodiments the method includes responding to the identification of the physical host on which to execute the virtual machine by adjusting the processor operating states of one or more of the plurality of physical hosts in accordance with one or more optimization preferences.

In another aspect of the disclosure a system for dynamically managing power consumption of a physical host within a cloud computing environment includes a management server a host recommendation service and an analysis engine. The management server requests an identification of a physical host on which to execute a virtual machine. The host recommendation service executing on the management server receives the request for the identification of the physical host. The analysis engine executing on the management server receives from the host recommendation service the request for the identification of a physical host on which to execute the virtual machine. The analysis engine retrieves a first plurality of metrics including a first metric identifying a level of usage on each of a plurality of physical hosts as of a predetermined time period. The analysis engine retrieves a second plurality of metrics associated with the virtual machine the second plurality of metrics including at least one metric identifying a level of usage exerted on a physical host by the virtual machine as of a predetermined time period. The analysis engine assigns a first power score to each of the plurality of physical hosts responsive to the retrieved first and second pluralities of metrics. The analysis engine determines a second power score for each of the plurality of physical hosts associated with at least the one metric identifying a level of usage exerted on each of the plurality of physical hosts by the virtual machine as of a predetermined time period. The host recommendation service identifies one of the plurality of physical hosts on which to execute the virtual machine wherein the second power score of said physical host satisfies at least one predetermined criteria. The management server responds to the identification of the physical host on which to execute the virtual machine by adjusting processor performance states for one or more of the plurality of physical hosts and adjusting processor operating states for one or more of the plurality of physical hosts.

In one embodiment the management server includes a customization interface for configuring one or more optimization preferences. In another embodiment the management server includes a customization interface configuring one or more weights to apply to the retrieved first and second pluralities of metrics. In yet another embodiment the host recommendation service is further configured to identify one of the plurality of physical hosts on which to execute the virtual machine by evaluating a topographic location of said physical host. In still another embodiment the host recommendation service is further configured to identify a first physical host in the plurality of hosts for execution of the virtual machine said first physical host having a higher second power score than a second physical host in the plurality of physical hosts. In some embodiments the analysis engine is further configured to assign the first power score to each of the plurality of physical hosts said retrieved first plurality of metrics including at least a second metric identifying thermodynamic information associated with each of the plurality of physical hosts. In other embodiments analysis engine is further configured to assign the first power score to each of the plurality of physical hosts said retrieved first plurality of metrics including at least a second metric identifying run state information associated with each of the plurality of physical hosts. In yet another embodiment the management server is further configured to respond to the identification of the physical host on which to execute the virtual machine by adjusting the processor operating states of one or more of the plurality of physical hosts in accordance with one or more optimization preferences. In still another embodiment a metrics acquisition service generates the plurality of metrics for each of the plurality of physical hosts. In some embodiments the metrics acquisition service queries at least one of the plurality of physical hosts for an identification of a level of usage.

In the following description of the various embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which aspects described herein may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope and spirit of the present disclosure.

As will be appreciated by one of skill in the art upon reading the following disclosure various aspects described herein may be embodied as a method a data processing system or a computer program product. Accordingly those aspects may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment combining software and hardware aspects. Furthermore such aspects may take the form of a computer program product stored by one or more computer readable storage media having computer readable program code or instructions embodied in or on the storage media. Any suitable computer readable storage media may be utilized including hard disks CD ROMs optical storage devices magnetic storage devices and or any combination thereof. In addition various signals representing data or events as described herein may be transferred between a source and a destination in the form of electromagnetic waves traveling through signal conducting media such as metal wires optical fibers and or wireless transmission media e.g. air and or space .

I O module may include a mouse keypad touch screen scanner optical reader and or stylus or other input device s through which a user of generic computing device may provide input and may also include one or more of a speaker for providing audio output and a video display device for providing textual audiovisual and or graphical output. Software may be stored within memory and or other storage to provide instructions to processor for enabling generic computing device to perform various functions. For example memory may store software used by the generic computing device such as an operating system application programs and an associated database . Alternatively some or all of the computer executable instructions for generic computing device may be embodied in hardware or firmware not shown .

The generic computing device may operate in a networked environment supporting connections to one or more remote computers such as terminals also referred to as client devices . The terminals may be personal computers or servers that include many or all of the elements described above with respect to the generic computing device . The network connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. When used in a LAN networking environment the generic computing device may be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the generic computing device may include a modem or other network interface for establishing communications over the WAN such as computer network e.g. the Internet . It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the computers may be used.

Generic computing device and or terminals may also be mobile terminals e.g. mobile phones smartphones PDAs notebooks etc. including various other components such as a battery speaker and antennas not shown .

The disclosure is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the disclosure include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

As shown in one or more client devices may be in communication with one or more servers generally referred to herein as server s . In one embodiment the computing environment can include an appliance installed between the server s and client machine s . This appliance can manage client server connections and in some cases can load balance client connections amongst a plurality of backend servers .

The client machine s can in some embodiment be referred to as a single client machine or a single group of client machines while server s may be referred to as a single server or a single group of servers . In one embodiment a single client machine communicates with more than one server while in another embodiment a single server communicates with more than one client machine . In yet another embodiment a single client machine communicates with a single server .

A client machine can in some embodiments be referenced by any one of the following terms client machine s client s client computer s client device s client computing device s local machine remote machine client node s endpoint s endpoint node s or a second machine. The server in some embodiments may be referenced by any one of the following terms server s local machine remote machine server farm s host computing device s or a first machine s .

In one embodiment the client machine may be a virtual machine. The virtual machine may be any virtual machine while in some embodiments the virtual machine may be any virtual machine managed by a hypervisor developed by Citrix Systems IBM VMware or any other hypervisor. In some aspects the virtual machine may be managed by a hypervisor while in aspects the virtual machine may be managed by a hypervisor executing on a server or a hypervisor executing on a client .

The client machine may execute operate or otherwise provide an application that can be any one of the following software a program executable instructions a virtual machine a hypervisor a web browser a web based client a client server application a thin client computing client an ActiveX control a Java applet software related to voice over internet protocol VoIP communications like a soft IP telephone an application for streaming video and or audio an application for facilitating real time data communications a HTTP client a FTP client an Oscar client a Telnet client or any other set of executable instructions. Still other embodiments include a client device that displays application output generated by an application remotely executing on a server or other remotely located machine. In these embodiments the client device can display the application output in an application window a browser or other output window. In one example the application is a desktop while in other examples the application is an application that generates a desktop. A desktop may include a graphical shell providing a user interface for an instance of an operating system in which local and or remote applications can be integrated. Applications as used herein are programs that execute after an instance of an operating system and optionally also the desktop has been loaded.

The server in some embodiments executes a remote presentation client or other client or program that uses a thin client or remote display protocol to capture display output generated by an application executing on a server and transmits the application display output to a remote client . The thin client or remote display protocol can be any one of the following protocols the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash.

The computing environment can include more than one server A N such that the servers A N are logically grouped together into a server farm for example in a cloud computing environment. The server farm can include servers that are geographically dispersed and logically grouped together in a server farm or servers that are located proximate to each other and logically grouped together in a server farm . Geographically dispersed servers A N within a server farm can in some embodiments communicate using a WAN MAN or LAN where different geographic regions can be characterized as different continents different regions of a continent different countries different states different cities different campuses different rooms or any combination of the preceding geographical locations. In some embodiments the server farm may be administered as a single entity while in other embodiments the server farm can include multiple server farms .

In some embodiments a server farm can include servers that execute a substantially similar type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. UNIX LINUX or SNOW LEOPARD. In other embodiments the server farm can include a first group of servers that execute a first type of operating system platform and a second group of servers that execute a second type of operating system platform. The server farm in other embodiments can include servers that execute different types of operating system platforms.

The server in some embodiments can be any server type. In other embodiments the server can be any of the following server types a file server an application server a web server a proxy server an appliance a network appliance a gateway an application gateway a gateway server a virtualization server a deployment server a SSL VPN server a firewall a web server an application server or as a master application server a server executing an active directory or a server executing an application acceleration program that provides firewall functionality application functionality or load balancing functionality. In some embodiments a server may be a RADIUS server that includes a remote authentication dial in user service. In embodiments where the server comprises an appliance the server can be an appliance manufactured by any one of the following manufacturers the Citrix Application Networking Group Silver Peak Systems Inc. Riverbed Technology Inc. F5 Networks Inc. or Juniper Networks Inc. Some embodiments include a first server A that receives requests from a client machine forwards the request to a second server and responds to the request generated by the client machine with a response from the second server . The first server A can acquire an enumeration of applications available to the client machine and well as address information associated with an application server hosting an application identified within the enumeration of applications. The first server A can then present a response to the client s request using a web interface and communicate directly with the client to provide the client with access to an identified application.

The server can in some embodiments execute any one of the following applications a thin client application using a thin client protocol to transmit application display data to a client a remote display presentation application any portion of the CITRIX ACCESS SUITE by Citrix Systems Inc. like the METAFRAME or CITRIX PRESENTATION SERVER MICROSOFT WINDOWS Terminal Services manufactured by the Microsoft Corporation or an ICA client developed by Citrix Systems Inc. Another embodiment includes a server that is an application server such as an email server that provides email services such as MICROSOFT EXCHANGE manufactured by the Microsoft Corporation a web or Internet server a desktop sharing server a collaboration server or any other type of application server. Still other embodiments include a server that executes any one of the following types of hosted servers applications GOTOMEETING provided by Citrix Online Division Inc. WEBEX provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office LIVE MEETING provided by Microsoft Corporation.

Client machines can in some embodiments be a client node that seeks access to resources provided by a server . In other embodiments the server may provide clients or client nodes with access to hosted resources. The server in some embodiments functions as a master node such that it communicates with one or more clients or servers . In some embodiments the master node can identify and provide address information associated with a server hosting a requested application to one or more clients or servers . In still other embodiments the master node can be a server farm a client a cluster of client nodes or an appliance.

One or more clients and or one or more servers can transmit data over a network installed between machines and appliances within the computing environment . The network can comprise one or more sub networks and can be installed between any combination of the clients servers computing machines and appliances included within the computing environment . In some embodiments the network can be a local area network LAN a metropolitan area network MAN a wide area network WAN a primary network comprised of multiple sub networks located between the client machines and the servers a primary public network e.g. the Internet with a private sub network a primary private network with a public sub network or a primary private network with a private sub network. Still further embodiments include a network that can be any of the following network types a point to point network a broadcast network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network a wireline network or a network that includes a wireless link where the wireless link can be an infrared channel or satellite band. The network topology of the network can differ within different embodiments possible network topologies include a bus network topology a star network topology a ring network topology a repeater based network topology or a tiered star network topology. Additional embodiments may include a network of mobile telephone networks that use a protocol to communicate among mobile devices where the protocol can be any one of the following AMPS TDMA CDMA GSM GPRS UMTS or any other protocol able to transmit data among mobile devices.

Illustrated in is an embodiment of a computing device where the client machine and server illustrated in may be deployed as and or executed on any embodiment of the computing device illustrated and described herein. Included within the computing device is a system bus that communicates with the following components a central processing unit a main memory storage memory an input output I O controller display devices A N an installation device and a network interface . In one embodiment the storage memory may include without limitation an operating system software routines and a client agent . The I O controller in some embodiments is further connected to a keyboard and a pointing device . Other embodiments may include an I O controller connected to more than one input output device A N.

Embodiments of the computing machine can include a central processing unit characterized by any one of the following component configurations logic circuits that respond to and process instructions fetched from the main memory unit a microprocessor unit such as those manufactured by Intel Corporation those manufactured by Motorola Corporation those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor such as those manufactured by International Business Machines a processor such as those manufactured by Advanced Micro Devices or any other combination of logic circuits. Still other embodiments of the central processing unit may include any combination of the following a microprocessor a microcontroller a central processing unit with a single processing core a central processing unit with two processing cores or a central processing unit with more than one processing core.

While illustrates a computing device that includes a single central processing unit in some embodiments the computing device can include one or more processing units . In these embodiments the computing device may store and execute firmware or other executable instructions that when executed direct the one or more processing units to simultaneously execute instructions or to simultaneously execute instructions on a single piece of data. In other embodiments the computing device may store and execute firmware or other executable instructions that when executed direct the one or more processing units to each execute a section of a group of instructions. For example each processing unit may be instructed to execute a portion of a program or a particular module within a program.

In some embodiments the processing unit can include one or more processing cores. For example the processing unit may have two cores four cores eight cores etc. In one embodiment the processing unit may comprise one or more parallel processing cores. The processing cores of the processing unit may in some embodiments access available memory as a global address space or in other embodiments memory within the computing device can be segmented and assigned to a particular core within the processing unit . In one embodiment the one or more processing cores or processors in the computing device can each access local memory. In still another embodiment memory within the computing device can be shared amongst one or more processors or processing cores while other memory can be accessed by particular processors or subsets of processors. In embodiments where the computing device includes more than one processing unit the multiple processing units can be included in a single integrated circuit IC . These multiple processors in some embodiments can be linked together by an internal high speed bus which may be referred to as an element interconnect bus.

In embodiments where the computing device includes one or more processing units or a processing unit including one or more processing cores the processors can execute a single instruction simultaneously on multiple pieces of data SIMD or in other embodiments can execute multiple instructions simultaneously on multiple pieces of data MIMD . In some embodiments the computing device can include any number of SIMD and MIMD processors.

The computing device in some embodiments can include a graphics processor or a graphics processing unit Not Shown . The graphics processing unit can include any combination of software and hardware and can further input graphics data and graphics instructions render a graphic from the inputted data and instructions and output the rendered graphic. In some embodiments the graphics processing unit can be included within the processing unit . In other embodiments the computing device can include one or more processing units where at least one processing unit is dedicated to processing and rendering graphics.

One embodiment of the computing machine includes a central processing unit that communicates with cache memory via a secondary bus also known as a backside bus while another embodiment of the computing machine includes a central processing unit that communicates with cache memory via the system bus . The local system bus can in some embodiments also be used by the central processing unit to communicate with more than one type of I O device . In some embodiments the local system bus can be any one of the following types of buses a VESA VL bus an ISA bus an EISA bus a MicroChannel Architecture MCA bus a PCI bus a PCI X bus a PCI Express bus or a NuBus. Other embodiments of the computing machine include an I O device that includes a video display that communicates with the central processing unit . Still other versions of the computing machine include a processor connected to an I O device via any one of the following connections HyperTransport Rapid I O or InfiniBand. Further embodiments of the computing machine include a processor that communicates with one I O device using a local interconnect bus and a second I O device using a direct connection.

The computing device in some embodiments includes a main memory unit and cache memory . The cache memory can be any memory type and in some embodiments can be any one of the following types of memory SRAM BSRAM or EDRAM. Other embodiments include cache memory and a main memory unit that can be any one of the following types of memory Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM Ferroelectric RAM FRAM or any other type of memory. Further embodiments include a central processing unit that can access the main memory via a system bus a memory port or any other connection bus or port that allows the processor to access memory .

One embodiment of the computing device provides support for any one of the following installation devices a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device a bootable medium a bootable CD a bootable CD for GNU Linux distribution such as KNOPPIX a hard drive or any other device suitable for installing applications or software. Applications can in some embodiments include a client agent or any portion of a client agent . The computing device may further include a storage device that can be either one or more hard disk drives or one or more redundant arrays of independent disks where the storage device is configured to store an operating system software programs applications or at least a portion of the client agent . A further embodiment of the computing device includes an installation device that is used as the storage device .

The computing device may further include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 SNA DECNET broadband connections e.g. ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET wireless connections or some combination of any or all of the above. Connections can also be established using a variety of communication protocols e.g. TCP IP IPX SPX NetBIOS Ethernet ARCNET SONET SDH Fiber Distributed Data Interface FDDI RS232 RS485 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g CDMA GSM WiMax and direct asynchronous connections . One version of the computing device includes a network interface able to communicate with additional computing devices via any type and or form of gateway or tunneling protocol such as Secure Socket Layer SSL or Transport Layer Security TLS or the Citrix Gateway Protocol manufactured by Citrix Systems Inc. Versions of the network interface can comprise any one of a built in network adapter a network interface card a PCMCIA network card a card bus network adapter a wireless network adapter a USB network adapter a modem or any other device suitable for interfacing the computing device to a network capable of communicating and performing the methods and systems described herein.

Embodiments of the computing device include any one of the following I O devices a keyboard a pointing device mice trackpads an optical pen trackballs microphones drawing tablets video displays speakers inkjet printers laser printers and dye sublimation printers or any other input output device able to perform the methods and systems described herein. An I O controller may in some embodiments connect to multiple I O devices to control the one or more I O devices. Some embodiments of the I O devices may be configured to provide storage or an installation medium while others may provide a universal serial bus USB interface for receiving USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. Still other embodiments include an I O device that may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

In some embodiments the computing machine can connect to multiple display devices in other embodiments the computing device can connect to a single display device while in still other embodiments the computing device connects to display devices that are the same type or form of display or to display devices that are different types or forms. Embodiments of the display devices can be supported and enabled by the following one or multiple I O devices the I O controller a combination of I O device s and the I O controller any combination of hardware and software able to support a display device any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . The computing device may in some embodiments be configured to use one or multiple display devices A N these configurations include having multiple connectors to interface to multiple display devices A N having multiple video adapters with each video adapter connected to one or more of the display devices A N having an operating system configured to support multiple displays A N using circuits and software included within the computing device to connect to and use multiple display devices A N and executing software on the main computing device and multiple secondary computing devices to enable the main computing device to use a secondary computing device s display as a display device A N for the main computing device . Still other embodiments of the computing device may include multiple display devices A N provided by multiple secondary computing devices and connected to the main computing device via a network.

In some embodiments the computing machine can execute any operating system while in other embodiments the computing machine can execute any of the following operating systems versions of the MICROSOFT WINDOWS operating systems such as WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE WINDOWS XP and WINDOWS VISTA the different releases of the Unix and Linux operating systems any version of the MAC OS manufactured by Apple Computer OS 2 manufactured by International Business Machines any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system. In still another embodiment the computing machine can execute multiple operating systems. For example the computing machine can execute PARALLELS or another virtualization platform that can execute or manage a virtual machine executing a first operating system while the computing machine executes a second operating system different from the first operating system.

The computing machine can be embodied in any one of the following computing devices a computing workstation a desktop computer a laptop or notebook computer a server a handheld computer a mobile telephone a portable telecommunication device a media playing device a gaming system a mobile computing device a netbook a device of the IPOD family of devices manufactured by Apple Computer any one of the PLAYSTATION family of devices manufactured by the Sony Corporation any one of the Nintendo family of devices manufactured by Nintendo Co any one of the XBOX family of devices manufactured by the Microsoft Corporation or any other type and or form of computing telecommunications or media device that is capable of communication and that has sufficient processor power and memory capacity to perform the methods and systems described herein. In other embodiments the computing machine can be a mobile device such as any one of the following mobile devices a JAVA enabled cellular telephone or personal digital assistant PDA such as the i55sr i58sr i85s i88s i90c i95cl or the im1100 all of which are manufactured by Motorola Corp the 6035 or the 7135 manufactured by Kyocera the i300 or i330 manufactured by Samsung Electronics Co. Ltd the TREO 180 270 600 650 680 700p 700w or 750 smart phone manufactured by Palm Inc any computing device that has different processors operating systems and input devices consistent with the device or any other mobile computing device capable of performing the methods and systems described herein. In still other embodiments the computing device can be any one of the following mobile computing devices any one series of Blackberry or other handheld device manufactured by Research In Motion Limited the iPhone manufactured by Apple Computer Palm Pre a Pocket PC a Pocket PC Phone or any other handheld mobile device.

In some embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computing device is a TREO 180 270 600 650 680 700p 700w or 750 smart phone manufactured by Palm Inc. In some of these embodiments the TREO smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device.

In other embodiments the computing device is a mobile device such as a JAVA enabled cellular telephone or personal digital assistant PDA such as the i55sr i58sr i85s i88s i90c i95cl or the im1100 all of which are manufactured by Motorola Corp. of Schaumburg Ill. the 6035 or the 7135 manufactured by Kyocera of Kyoto Japan or the i300 or i330 manufactured by Samsung Electronics Co. Ltd. of Seoul Korea. In some embodiments the computing device is a mobile device manufactured by Nokia of Finland or by Sony Ericsson Mobile Communications AB of Lund Sweden.

In still other embodiments the computing device is a Blackberry handheld or smart phone such as the devices manufactured by Research In Motion Limited including the Blackberry 8100 series 8700 series 7700 series 7200 series the Blackberry 7520 or the Blackberry Pearl 8100. In yet other embodiments the computing device is a smart phone Pocket PC Pocket PC Phone or other handheld mobile device supporting Microsoft Windows Mobile Software. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

In some embodiments the computing device is a digital audio player. In one of these embodiments the computing device is a digital audio player such as the Apple IPOD IPOD Touch IPOD NANO and IPOD SHUFFLE lines of devices manufactured by Apple Computer of Cupertino Calif. In another of these embodiments the digital audio player may function as both a portable media player and as a mass storage device. In other embodiments the computing device is a digital audio player such as the DigitalAudioPlayer Select MP3 players manufactured by Samsung Electronics America of Ridgefield Park N.J. or the Motorola m500 or m25 Digital Audio Players manufactured by Motorola Inc. of Schaumburg Ill. In still other embodiments the computing device is a portable media player such as the Zen Vision W the Zen Vision series the Zen Portable Media Center devices or the Digital MP3 line of MP3 players manufactured by Creative Technologies Ltd. In yet other embodiments the computing device is a portable media player or digital audio player supporting file formats including but not limited to MP3 WAV M4A AAC WMA Protected AAC RIFF Audible audiobook Apple Lossless audio file formats and .mov .m4v and .mp4 MPEG 4 H.264 MPEG 4 AVC video file formats.

In some embodiments the computing device comprises a combination of devices such as a mobile phone combined with a digital audio player or portable media player. In one of these embodiments the computing device is a Motorola RAZR or Motorola ROKR line of combination digital audio players and mobile phones. In another of these embodiments the computing device is an iPhone smartphone manufactured by Apple Computer of Cupertino Calif.

Illustrated in is one embodiment of a computer device configured as a virtualization server in a virtualization environment for example a single server multi server or cloud computing environment. The virtualization server illustrated in can be deployed as and or implemented by one or more embodiments of the server illustrated in or the computing devices and illustrated in . Included in virtualization server is a hardware layer that can include one or more physical disks one or more physical devices one or more physical processors and a physical memory . In some embodiments firmware can be stored within a memory element in the physical memory and can be executed by one or more of the physical processors . The virtualization server may further include an operating system that may be stored in a memory element in the physical memory and executed by one or more of the physical processors . Still further a hypervisor may be stored in a memory element in the physical memory and can be executed by one or more of the physical processors . Executing on one or more of the physical processors may be one or more virtual machines A C generally . Each virtual machine may have a virtual disk A C and a virtual processor A C. In some embodiments a first virtual machine A may execute on a virtual processor A a control program that includes a tools stack . In other embodiments one or more virtual machines B C can executed on a virtual processor B C a guest operating system A B.

Further referring to and in more detail the virtualization server may include a hardware layer with one or more pieces of hardware. In some embodiments the hardware layer can include one or more physical disks one or more physical devices one or more physical processors and one or more memory . Physical components and may include for example any of the components described above in . For instance physical disks may include permanent memory storage temporary memory storage disk drives e.g. optical floppy tape hard disks external hard drives flash memory network attached storage a storage area network or any other storage repository that the virtualization server can access. Physical devices may include any device included in the virtualization server and or any combination of devices included in the virtualization server and external devices that communicate with the virtualization server . A physical device may be for example a network interface card a video card a keyboard a mouse an input device a monitor a display device speakers an optical drive a storage device a universal serial bus connection a printer a scanner a network element e.g. router firewall network address translator load balancer virtual private network VPN gateway Dynamic Host Configuration Protocol DHCP router etc. or any device connected to or communicating with the virtualization server . The physical memory in the hardware layer may include any type of memory. The physical memory may store data and in some embodiments may store one or more programs or set of executable instructions. illustrates an embodiment where firmware is stored within the physical memory of the virtualization server . Programs or executable instructions stored in the physical memory can be executed by the one or more processors of the virtualization server . The physical processor may be configured to operate in accordance with the Advanced Configuration and Power Interface ACPI specification which provides a standard for device configuration and power management. The ACPI specification defines various states as levels of power usage and or features availability. For example ACPI states include but are not limited to processor operating states C States and processor performance states P States .

Virtualization server may also include a hypervisor . In some embodiments hypervisor may be a program executed by processors of the virtualization server to create and manage any number of virtual machines . The hypervisor can be referred to as a virtual machine monitor or platform virtualization software. In some embodiments a hypervisor can be any combination of executable instructions and hardware that monitors virtual machines executing on a computing machine. Hypervisor may be Type 2 hypervisor or a hypervisor that executes within an operating system executing on the virtualization server . A Type 2 hypervisor in some embodiments executes within an operating system environment and virtual machines execute at a level above the hypervisor. In many embodiments the Type 2 hypervisor executes within the context of a user s operating system such that the Type 2 hypervisor interacts with the user s operating system. In other embodiments one or more virtualization servers in a virtualization environment may include a Type 1 hypervisor Not Shown . A Type 1 hypervisor may execute on the virtualization server by directly accessing the hardware and resources within the hardware layer . That is while a Type 2 hypervisor accesses system resources through a host operating system a Type 1 hypervisor may directly access all system resources without needing a host operating system . Thus a host operating system may not be present. A Type 1 hypervisor may execute directly on one or more physical processors of the virtualization server and may include program data stored in the physical memory . In many embodiments the hypervisor allocates and manages access to a number of physical resources in the hardware layer e.g. the processor s and disk s by at least one virtual machine executing on the virtualization server .

The hypervisor in some embodiments can provide virtual resources to operating systems or control programs executing on virtual machines in any manner that simulates the operating systems or control programs having direct access to system resources. System resources can include physical devices physical disks physical processors physical memory and any other component included in the virtualization server hardware layer . In these embodiments the hypervisor may be used to emulate virtual hardware partition physical hardware virtualize physical hardware or execute virtual machines that provide access to computing environments. In still other embodiments the hypervisor controls processor scheduling and memory partitioning for a virtual machine executing on the virtualization server . Hypervisor may include those manufactured by VMWare Inc. of Palo Alto Calif. the XEN hypervisor an open source product whose development is overseen by the open source Xen.org community HyperV VirtualServer or virtual PC hypervisors provided by Microsoft or others. In some embodiments a virtualization server executes a hypervisor that creates a virtual machine platform on which guest operating systems may execute. In these embodiments the virtualization server can be referred to as a host server. An example of such a virtualization server is the XEN SERVER provided by Citrix Systems Inc. of Fort Lauderdale Fla.

The control program may execute at least one application for managing and configuring the guest operating systems. In one embodiment the control program may execute an administrative application such as an application including a user interface providing administrators with access to functionality for managing the execution of a virtual machine including functionality for executing a virtual machine terminating an execution of a virtual machine or identifying a type of physical resource for allocation to the virtual machine. In another embodiment the hypervisor executes the control program within a virtual machine created by the hypervisor . In still another embodiment the control operating system executes in a virtual machine that is authorized to directly access physical resources on the virtualization server .

In one embodiment the control program executes in a virtual machine that is authorized to interact with at least one guest operating system . In another embodiment a guest operating system communicates with the control program via the hypervisor in order to request access to a disk or a network. In still another embodiment the guest operating system and the control program may communicate via a communication channel established by the hypervisor such as for example via a plurality of shared memory pages made available by the hypervisor .

In some embodiments the control program includes a network back end driver for communicating directly with networking hardware provided by the virtualization server . In one of these embodiments the network back end driver processes at least one virtual machine request from at least one guest operating system . In other embodiments the control program includes a block back end driver for communicating with a storage element on the virtualization server . In one of these embodiments the block back end driver reads and writes data from the storage element based upon at least one request received from a guest operating system .

In one embodiment the control program includes a tools stack that provides functionality for interacting with the hypervisor or managing virtual machines B C on the virtualization server . In another embodiment the tools stack includes customized applications for providing improved management functionality to an administrator of a virtual machine farm. In yet another embodiment the tools stack may receive requests from a management server to access or manage computing resources for a plurality of virtual machines running on a virtualization server . In some embodiments at least one of the tools stack and the control program include a management API that provides an interface for remotely configuring and controlling virtual machines running on a virtualization server . In other embodiments the control program communicates with the hypervisor through the tools stack .

The hypervisor may create one or more virtual machines B C generally in which guest operating systems execute. In some embodiments the hypervisor may load a virtual machine image to create a virtual machine . In other embodiments the hypervisor may executes a guest operating system within the virtual machine . In still other embodiments the virtual machine may execute the guest operating system . In another embodiment the guest operating system provides a user of the virtualization server with access to resources within a computing environment. In still another embodiment a resource includes a program an application a document a file a plurality of applications a plurality of files an executable program file a desktop environment a computing environment or other resource made available to a user of the virtualization server . In yet another embodiment the resource may be delivered to the virtualization server via a plurality of access methods including but not limited to conventional installation directly on the virtualization server delivery to the virtualization server via a method for application streaming delivery to the virtualization server of output data generated by an execution of the resource on a second virtualization server not shown and communicated to the virtualization server via a presentation layer protocol delivery to the virtualization server of output data generated by an execution of the resource via a virtual machine executing on a second virtualization server or execution from a removable storage device connected to the virtualization server such as a USB device or via a virtual machine executing on the virtualization server and generating output data. In some embodiments the virtualization server transmits output data generated by the execution of the resource to another virtualization server in a virtualization environment.

In another embodiment the guest operating system in conjunction with the virtual machine on which it executes forms a paravirtualized virtual machine which is aware that it is a virtual machine such a machine may be referred to as a Domain U PV virtual machine . In another embodiment a paravirtualized machine includes additional drivers that a fully virtualized machine does not include. In still another embodiment the paravirtualized machine includes the network back end driver and the block back end driver included in a control program as described above. In one embodiment the guest operating system in conjunction with the virtual machine on which it executes forms a fully virtualized virtual machine which is not aware that it is a virtual machine such a machine may be referred to as a Domain U HVM Hardware Virtual Machine virtual machine . In another embodiment a fully virtualized machine includes software emulating a Basic Input Output System BIOS in order to execute an operating system within the fully virtualized machine. In still another embodiment a fully virtualized machine may include a driver that provides functionality by communicating with the hypervisor in such an embodiment the driver is typically aware that it executes within a virtualized environment.

In addition to creating virtual machines the hypervisor may control the execution of at least one virtual machine . In other embodiments the hypervisor may presents at least one virtual machine with an abstraction of at least one hardware resource provided by the virtualization server e.g. any hardware resource available within the hardware layer . In other embodiments the hypervisor may control the manner in which virtual machines access the physical processors available in the virtualization server . Controlling access to the physical processors may include determining whether a virtual machine should have access to a processor and how physical processor capabilities are presented to the virtual machine .

As shown in the example of the virtualization server may host or execute one or more virtual machines . A virtual machine is a set of executable instructions that when executed by a processor imitate the operation of a physical computer such that the virtual machine can execute programs and processes much like a physical computing device. While illustrates an embodiment where a virtualization server hosts three virtual machines in other embodiments the virtualization server can host any number of virtual machines . The hypervisor in some embodiments provides each virtual machine with a unique virtual view of the physical hardware memory processor and other system resources available to that virtual machine . In some embodiments the unique virtual view can be based on any of the following virtual machine permissions application of a policy engine to one or more virtual machine identifiers the user accessing a virtual machine the applications executing on a virtual machine networks accessed by a virtual machine or any other similar criteria. For instance the hypervisor may create one or more unsecure virtual machines and one or more secure virtual machines . Unsecure virtual machines may be prevented from accessing resources hardware memory locations and programs that secure virtual machines may be permitted to access. In other embodiments the hypervisor may provide each virtual machine with a substantially similar virtual view of the physical hardware memory processor and other system resources available to the virtual machines .

Each virtual machine may include a virtual disk A C generally and a virtual processor A C generally . The virtual disk in some embodiments is a virtualized view of one or more physical disks of the virtualization server or a portion of one or more physical disks of the virtualization server . The virtualized view of the physical disks can be generated provided and managed by the hypervisor . In some embodiments the hypervisor provides each virtual machine with a unique view of the physical disks . Thus in these embodiments the virtual disk included in each virtual machine can be unique when compared with the other virtual disks .

A virtual processor can be a virtualized view of one or more physical processors of the virtualization server . In some embodiments the virtualized view of the physical processors can be generated provided and managed by the hypervisor . In some embodiments the virtual processor has substantially all of the same characteristics of at least one physical processor . In other embodiments the virtual processor provides a modified view of the physical processors such that at least some of the characteristics of the virtual processor are different than the characteristics of the corresponding physical processor .

A user of a client computer may for example request access to one or more of the computing resources managed by management server . Management server may run for example CLOUDSTACK by Citrix Systems Inc. of Ft. Lauderdale Fla. or OPENSTACK. Management server may manage computing resources such as host computers data storage devices and networking devices such as firewalls network address translators load balancers virtual private network VPN gateways Dynamic Host Configuration Protocol DHCP routers and the like.

A user of a client computer may request access to one of the computing resources managed by management server such as host computer . A host computer may be for example a virtualization server capable of running one or more virtual machines. A user of a client computer may request for example access to an existing virtual machine or that a virtual machine be created or destroyed. The physical resources selected to fulfill a user request may be governed by management server . However in some embodiments the user may identify a specific host or request that virtual resources be created within a specific group of hosts. A management server may allocate resources in the group requested or it may allocate resources in a different group of hosts to for example avoid overloading a physical computing resource. The management server then sends the appropriate commands to the selected resource. For example the management server may command a host or other resource to create start stop or delete a virtual machine to create alter or remove virtual disks to create alter or remove virtual network interfaces etc. These commands may include additional details. For example a command to create a virtual machine may specify the amount of memory and processing resources it will have available to it the software that will be included on it the virtual and or physical disk s it will have access to etc.

In a computing cloud such as the one managed by management server a zone may refer to a collocated set of physical computing resources. Each zone may be geographically dispersed from each other zone. For example zone may be located in California and zone may be located in Maryland. Management sever may be located in a third zone not shown . Each zone may include an internal network that interfaces with devices that are outside of the zone such as management server through a gateway. Users of the computing cloud may be aware of the distinctions between zones but they are not necessarily aware of the distinctions. For example a user may simply request that a virtual machine having a set amount of memory and processing power be allocated. Management server may present a user with a customization interface such as the one illustrated in . Alternatively a user may be able to request that a virtual machine or other resource be allocated in a specific zone or subset of a zone.

The cloud illustrated in allows management server to perform all of the administrative tasks for the resources under its control. By providing a single interface for managing the resources of the cloud cloud users may achieve both improved scalability and reduced maintenance compared to managing resources individually or managing groups of resources such as zone or individually. The interface provided by management server may be a graphical user interface such as the one illustrated in . Other examples of interfaces that may be provided by management server include text based user interfaces and application programming interfaces APIs . The interface of management server may be public thereby allowing anyone to make requests of the management server.

The users of a cloud may be unrelated for example users may be affiliated with different companies and the information on the virtual machines or storage of any one user may be hidden from any other user. By sharing a single management server or set of servers these users may further reduce maintenance costs by effectively sharing the burden of running management server and the resources it controls.

Some cloud users may wish to have their computing tasks performed on physical resources that the user controls instead of on the physical resources provided by a cloud operator. This may be due to for example a concern that data on a physical resource of the cloud operator may be compromised and made available to another cloud user. A cloud user may also wish to perform computing tasks on its own physical resources because those resources may be located nearer to the rest of the user s network thereby enabling faster connections lower latency etc. Finally a cloud user may wish to use its own physical resources because it can provide the resources at a lower cost than accessing equivalent resources from the cloud operator.

A cloud user desiring to have computing tasks performed on its own physical resources may still take advantage of the improved scalability and reduced maintenance of sharing management server . The cloud user can achieve these advantages by adding its physical resources to the pool of resources managed by management server .

Referring now to a block diagram depicts one embodiment of a cloud of computing devices in a system in which at least one physical host executes a virtual machine. In brief overview the system includes a management server a management component and a hypervisor . The system includes a plurality of virtualization servers a plurality of virtual machines a plurality of hypervisors a plurality of management components referred to as tools stacks and several physical resources. The plurality of virtualization servers may each be provided as computing devices and described above in connection with .

Referring still to and in greater detail a physical disk is provided by a computing device and stores at least a portion of a virtual disk . In some embodiments a virtual disk is associated with a plurality of physical disks . In one of these embodiments and also as described above in connection with one or more virtualization servers may exchange data with a management server regarding processors and other physical resources available in a cloud computing environment allowing a hypervisor to manage a plurality of resources distributed across a plurality of physical computing devices within the cloud computing environment. In another embodiment one or more virtualization servers may exchange data with one or more of the other virtualization servers regarding processors and other physical resources available in a cloud computing environment allowing a hypervisor to manage a plurality of resources distributed across a plurality of physical computing devices within the cloud computing environment. In some embodiments a virtualization server on which a virtual machine executes is referred to as a physical host or as a host machine .

In one embodiment the management component is referred to as a cloud management component . In another embodiment a management operating system which may be referred to as a control program includes the management component. In some embodiments the management component is referred to as a tools stack. In one of these embodiments the management component is the tools stack described above in connection with . In some embodiments management server provides a user interface for receiving from a user such as an administrator an identification of a virtual machine to provision and or execute. In still other embodiments management server provides a user interface for receiving from a user such as an administrator the request for migration of a virtual machine from one virtualization server to another. In another embodiment management component will communicate with management server to identify a virtualization sever on which to execute a requested virtual machine and instructs hypervisor on the identified virtualization server to execute the identified virtual machine such a management component may be referred to as a cloud management component.

In some embodiments host recommendation service and analysis engine execute on a first computing device B and cloud management component A executing on a second computing device A receives a request from a management server for an identification of a physical host on which to execute a virtual machine . In one of these embodiments cloud management component A communicates with host recommendation service to identify a physical host on which to execute a virtual machine . In another of these embodiments host recommendation service transmits a request for the identification of a physical host sent by the cloud management component A to an analysis engine which evaluates present and historical metrics identifying levels of usage on physical hosts e.g. computing devices that are available to execute virtual machine and applies an algorithm to the evaluated metrics to identify an optimal physical host for executing virtual machine . In yet another of these embodiments the host recommendation service includes functionality allowing users to identify what characteristics to optimize. For example whether to optimize for maximum power performance of a virtual machine or to optimize for maximum density of virtual machines on physical hosts. In still another of these embodiments the system includes a metrics acquisition service that provides functionality for collecting performance data from hypervisors virtual machines physical hosts and zones of physical hosts and generating metrics based upon the performance data for use in identifying an optimal physical host. In still even another of these embodiments host recommendation service includes functionality for allowing administrators the ability to define which hypervisor hosts will be monitored for performance data. In yet another of these embodiments host recommendation service includes functionality for generating reports regarding hypervisor and virtual machine performance data. In further embodiments host recommendation service includes functionality for making recommendations regarding virtual machine placement decisions relative to physical hosts.

Referring again to and in greater detail management server requests an identification of a physical host within the cloud computing environment on which to execute a virtual machine . In one embodiment management server which manages power usage and workload on a plurality of physical computing devices in a cloud computing environment requests an identification of a physical host to which to migrate a virtual machine . In another embodiment management server requests an identification of a physical host on which to provision a virtual machine . In some embodiments management server receives a request for execution of a virtual machine . In one of these embodiments management server identifies a virtual machine image associated with requested virtual machine . In other embodiments management server transmits a request for execution of a virtual machine to a cloud management component A. In yet another embodiment the management server sends the request for an identification of a physical host on which to execute the virtual machine via a user interface such as an interface providing a user access to administrative functionality over an intranet or the Internet.

Host recommendation service receives the request from the management server for the identification of physical host on which to execute virtual machine . In another embodiment the host recommendation service retrieves an identification of a virtual machine based upon information included in the request sent by management server . In other embodiments host recommendation service receives the request from cloud management component A for the identification of the physical host on which to execute virtual machine . In one of these embodiments the host recommendation service includes a receiver for receiving from pool management component A a request for an identification of a physical host on which to execute virtual machine . In another of these embodiments the host recommendation service includes a receiver for receiving from pool management component A a request for an identification of a physical host to which to migrate the virtual machine .

In yet another embodiment host recommendation service executes analysis engine upon receiving a request for identification of the physical host on which to execute virtual machine . In some embodiments for example host recommendation service may execute on a computing device and communicate with management server to identify a computer device on which to execute a virtual machine . In one of these embodiments host recommendation service may execute as part of a virtual machine management product such as a lab management program provisioning software or other virtualization platform providing management capabilities. In some of these embodiments the host recommendation service includes a receiver for receiving from management server a request for an identification of a physical host on which to execute virtual machine . In another of these embodiments the host recommendation service includes a receiver for receiving from management server a request for an identification of a physical host to which to migrate virtual machine . In still another embodiment host recommendation service communicates with a user interface to receive a request for an identification of a physical host within the cloud computing environment on which to execute virtual machine .

In yet another embodiment host recommendation service communicates with user interface for configuring one or more optimization preferences as illustrated in . In another embodiment host recommendation service communicates with a user interface that receives an identification of a customization to an algorithm applied to assign a resource consumption score and power score to each of the plurality of physical hosts. In some embodiments host recommendation service communicates with a user interface for receiving an identification of a characteristic needed to maximize the available resources of the virtual machine. In still another embodiment host recommendation service is in communication with a reporting service that provides users with workload distribution and optimization reports the reporting service may for example include without limitation functionality for displaying a report in a user interface transmitting a report via electronic mail implementing really simple syndication to distribute reports and providing an application programming interface API allowing a user to poll for optimization recommendations and workload reports.

In one embodiment host recommendation service executes the analysis engine . In another embodiment the analysis engine applies an algorithm to generate a first power score assigned to at least one of the plurality of physical hosts. In yet another embodiment the analysis engine applies an algorithm to generate a resource consumption score assigned to at least one of the plurality of physical hosts. In still another embodiment analysis engine determines for each of the plurality of physical hosts whether a physical host includes a characteristic required for execution of the virtual machine.

In yet another embodiment analysis engine includes a process that optimizes the power utilization of a physical host. Analysis engine executes on management server and is in communication with host recommendation service . In some embodiments analysis engine is a component of host recommendation service . In other embodiments analysis engine may execute on a first computing device A and communicate with host recommendation service executing on a second computing device B. Analysis engine retrieves a plurality of metrics including at least a first metric identifying a level of usage for each of a plurality of physical hosts as of a predetermined time period. Analysis engine retrieves a plurality of metrics associated with the virtual machine the plurality of metrics including at least one metric identifying a level of usage exerted on a physical host by the virtual machine as of a predetermined time period. In one embodiment analysis engine includes a database interaction component for accessing a database and retrieving a plurality of metrics from database .

In another embodiment a metrics acquisition service acquires performance data and uses the performance data to generate a plurality of metrics including a first metric identifying a level of usage for each of the plurality of physical hosts as of a predetermined time period. In another embodiment metrics acquisition service acquires performance data and uses the performance data to generate a plurality of metrics associated with the virtual machine the plurality of metrics including at least one metric identifying a level of usage exerted on a physical host by the virtual machine as of a predetermined time period. In yet another embodiment metrics acquisition service stores acquired metrics in a database . In another embodiment the metrics acquisition service stores data in an ODBC compliant database. For example database may be provided as an ORACLE database manufactured by Oracle Corporation of Redwood Shores Calif. as a Microsoft ACCESS database or as a Microsoft SQL server database manufactured by Microsoft Corporation of Redmond Wash.

In some embodiments metrics acquisition service queries at least one of the plurality of physical hosts for an identification of a level of usage. In one of these embodiments the metrics acquisition service generates the plurality of metrics for each of the plurality of physical hosts. In some embodiments metrics acquisition service includes a communications component a data collection component and a data collection manager . In one of these embodiments communications component provides functionality allowing a data collection component executing on a first computing device to communicate with a second data collection component executing on a second computing device. In another of these embodiments data collection component on a first computing device in a first zone of computing devices communicates with a second data collection component executing on a second computing device in a second zone of computing devices as illustrated in which shows two illustrative zones and . In another of these embodiments the data collection manager identifies a type of hypervisor executing on a computing device A in a plurality of computing devices . In still another of these embodiments data collection manager generates a data collection component responsive to the identified type of hypervisor. In one of these embodiments data collection component communicates with at least one hypervisor to retrieve an identification of performance data for at least one virtual machine executing on a computing device in a cloud of computing devices. In still another of these embodiments data collection component stores the retrieved performance data in database . In yet another of these embodiments metrics acquisition service executes a plurality of data collection components each of plurality of data collection components communicating with and retrieving performance data from a different type of hypervisor.

In some embodiments metrics acquisition service is part of host recommendation service executing on management server . In other embodiments metrics acquisition service executes on the same computing device as host recommendation service . In yet another embodiment there may be multiple metrics acquisition services in a network. In another of these embodiments a computing device on which metrics acquisition service executes may collect performance data as well as also coordinate via cloud management component A the collection of performance data by data collection components and metrics acquisition services that execute on other physical hosts in the cloud computing environment.

In some embodiments analysis engine receives an identification from host recommendation service of at least one physical host available for executing the identified virtual machine. In one of these embodiments analysis engine retrieves an identification of a characteristic of the at least one physical host. For example an identification of a characteristic may include without limitation an identification of the power utilization of a host an identification of a number of central processing units CPUs an identification of a processing speed of a CPU an identification of an amount of memory available on a host an identification of the level of throughput on the hosting virtualization server an identification of thermodynamic information associated with the physical host an identification of the location of the physical host and an identification of a number of physical network interfaces provide by a host.

In one embodiment analysis engine retrieves a plurality of metrics including a first metric identifying a level of usage for each of the plurality of physical hosts. In another embodiment the level of usage may include a level of usage on a resource in a plurality of resources provided by each of a plurality of physical hosts. In still another embodiment a user may specify a definition for a period of time classified as a predetermined time period. In yet another embodiment and by way of example an administrator may configure analysis engine to retrieve a first metric identifying an average level of usage over a five minute period preceding the receipt of the request on each of the plurality of physical hosts such a time interval may be referred to as a current time period.

In one embodiment analysis engine retrieves a plurality of metrics including a second metric identifying a level of usage for each of the plurality of physical hosts during a time period prior to the predetermined time period. In another embodiment the level of usage may include a level of utilization of a resource in a plurality of resources provided by each of a plurality of physical hosts. In still another embodiment a user may specify a definition for a period of time classified as a period of time prior to the predetermined time period. In yet another embodiment and by way of example an administrator may configure analysis engine to retrieve a second metric identifying an average level of usage over a thirty minute period preceding the ten minute period prior to receipt of the request on each of the plurality of physical hosts such a time interval may be referred to as a historical time period or in another example an administrator may configure analysis engine to retrieve a second metric identifying an average level of usage over a thirty minute period preceding the five minute period prior to receipt of the request on each of the plurality of physical hosts such a time period may be referred to as a recent time period.

In one embodiment analysis engine retrieves a plurality of metrics including a third metric identifying a level of usage on each of the plurality of physical hosts during a time period prior to the predetermined time period. In another embodiment analysis engine retrieves a third metric identifying a historical level off usage on each of the plurality of physical hosts. In some embodiments the analysis engine retrieves a third metric configured to identify an average level of usage over a substantially longer period of time than the second metric. In other embodiments analysis engine retrieves a third metric configured to identify an average level of usage for a substantially different period of time than the second metric. In still other embodiments as with the second metric a user may specify a definition for a period of time classified as a period of time prior to the predetermined time period. In one of these embodiments and by way of example an administrator may configure analysis engine to retrieve a third metric identifying an average level of usage over a twenty four hour period preceding the five minute period prior to receipt of the request on each of the plurality of physical hosts such a time interval may be referred to as a historical time period.

In one embodiment the plurality of metrics includes a metric identifying a threshold for power utilization on a physical computing device. For example if a computing device has a high or critical level of power utilization during the time period for which analysis engine evaluates the computing device analysis engine may determine that the computing device cannot execute an additional virtual machine. In another embodiment the plurality of metrics includes a metric identifying a threshold for utilization of a central processing unit CPU on a physical computing device. For example if a computing device has a high or critical level of CPU utilization during the time period for which analysis engine evaluates the computing device analysis engine may determine that the computing device cannot execute an additional virtual machine. In yet another embodiment the plurality of metrics includes a metric identifying thermodynamic information associated with a physical computing device. For example if a computing device is generating a high or critical level of heat during the time period for which analysis engine evaluates the computing device analysis engine may determine that the computing device cannot execute an additional virtual machine. In one of these embodiments analysis engine retrieves one or more plurality of metrics identifying thermodynamic information from software running on the physical host such as the Data Center Manager DCM software manufactured by Intel Corporation. In still another embodiment the plurality of metrics includes a metric identifying the amount of time the CPU of a physical computing device remains in a particular operational and or transitional state which may be referred to as run state information . For example if the CPU of a computing device has been in a Ready State for a threshold amount of time prior to the time period for which analysis engine evaluates the computing device analysis engine may determine that the computing device can execute an additional virtual machine.

In some embodiments analysis engine evaluates a metric for a first computing device and determines that the first computing device can execute an additional virtual machine but has a level of power utilization associated with a higher power score than a second computing device. For example the first computing device may have a level of power utilization closer to a threshold such as a level categorized as medium or high than the second computing device which may have a lower level of power utilization. In one of these embodiments analysis engine may assign a different e.g. higher power score to the first computing device for that metric. In yet another embodiment the plurality of metrics includes a metric identifying a threshold for available memory on a physical computing device. For example if a computing device has a high or critical level of unavailable memory during the time period for which analysis engine evaluates the computing device analysis engine may determine that the computing device cannot execute an additional virtual machine. In still another embodiment the plurality of metrics includes a metric identifying a threshold for utilization of network resource by a physical computing device. For example if a computing device has a high or critical level of network interface utilization during the time period for which analysis engine evaluates the computing device analysis engine may determine that the computing device cannot execute an additional virtual machine. In yet another embodiment the plurality of metrics includes a metric identifying a threshold for disk utilization on a physical computing device. For example if a computing device has a high or critical level of disk utilization during the time period for which analysis engine evaluates the computing device analysis engine may determine that the computing device cannot execute an additional virtual machine.

In step the analysis engine retrieves a second plurality of metrics associated with the virtual machine said second plurality of metrics including at least one metric identifying a level of usage exerted on a physical host by the virtual machine during a predetermined time period. In some embodiments analysis engine accesses a database to retrieve the plurality of metrics. In one embodiment the plurality of metrics includes a metric identifying a level of power utilization by virtual machine . In another embodiment the plurality of metrics includes a metric identifying a level of utilization of a central processing unit CPU by the virtual machine . In yet another embodiment the plurality of metrics includes a metric identifying a level of utilization of memory by virtual machine . In still another embodiment the plurality of metrics includes a metric identifying a level of utilization of a network resource by virtual machine . In yet another embodiment the plurality of metrics includes a metric identifying a level of disk utilization by virtual machine . In still another embodiment the plurality of metrics includes a metric identifying a level of thermal temperature generated by virtual machine . In yet another embodiment the plurality of metrics includes a metric identifying the location of the virtual machine. In some embodiments the plurality of metrics includes a metric identifying an average amount of resources required by a virtual machine. For example the metric may identify without limitation an average amount of power utilization average amount of available memory average amount of disk utilization average amount of CPU utilization average amount of network resource utilization and an average increase in thermal temperature associated with the virtual machine during previous executions of the virtual machine. In some embodiments analysis engine determines a level of priority associated with at least one of the first metric identifying a level of usage on each of the plurality of physical hosts. In one embodiment analysis engine accesses a database of data stored by host recommendation service and identifying a level of prioritization to apply to a metric.

In some embodiments host recommendation service communicates with a user interface which may be configured as a customization interface with which a user such as an administrator can configure one or more weights to apply to a plurality of metrics. The user thus has the capability to customize a level of significance attributed to each of the plurality of metrics for a particular physical host. The weights attributed to each of the plurality of metrics for a particular physical host are utilized in determining a score for the physical host when determining whether to identify the physical host as the computing device on which to execute the virtual machine. In one of these embodiments customization interface provides functionality allowing a user to specify a weight to apply in scoring a metric generated during a predetermined time period. In another of these embodiments customization interface provides functionality allowing a user to specify a level of priority to assign to a time period during which at least one metric is generated. For example customization interface may include an interface element allowing a user to specify that metrics generated during a historical time period are to be assigned greater level of priority than metrics generated during a current time period.

In other embodiments host recommendation service communicates with a customization interface with which a user such as an administrator can configure one or more rules to apply in determining a score for a physical host. In one of these embodiments for example a rule may specify a quantity of an available resource that a physical host should provide for a virtual machine including without limitation a level of available power utilization memory disk utilization or CPU utilization. In other embodiments host recommendation service communicates with a customization interface with which a user such as an administrator can configure one or more optimization preferences. In one of these embodiments for example a user may specify that host recommendation service should assign lower scores to physical hosts that provide resources for maximizing power performance of a virtual machine which may be referred to as a maximum power performance optimization mode . In another of these embodiments for example a user may specify that host recommendation service should assign lower scores to physical hosts that provide resources for maximizing performance of a virtual machine which may be referred to as a maximum performance optimization mode . In yet another of these embodiments for example a user may specify that host recommendation service should assign lower scores to physical hosts residing on virtualization servers with optimal topographic locations that provide resources for maximizing performance of a virtual machine which may be referred to as a topographical optimization mode . In still another of these embodiments for example a user may specify a time period in which host recommendation service should operate according to an optimization mode. In yet another of these embodiments for example a user may specify a first time period in which host recommendation service should operate according to a first optimization mode and a second time period in which host recommendation service should operate according to a second optimization mode. In yet another of these embodiments for example a user may specify that host recommendation service should assign lower scores to physical hosts that provide resources for a plurality of virtual machines minimizing the number of total physical hosts required to manage a total workload across a plurality of physical hosts which may be referred to as a maximum density optimization mode .

In step the analysis engine assigns a first power score to each of the plurality of physical hosts responsive to the retrieved first and second pluralities of metrics. In one embodiment the analysis engine analyzes each of the metrics in the plurality of metrics to assign the first power score for each of the plurality of physical hosts. In some embodiments the analysis engine assigns a first power score to each of the plurality of physical hosts responsive to the retrieved first and second pluralities of metrics and to a determined level of priority. In another embodiment the analysis engine analyzes each of the metrics in the plurality of metrics to assign the resource consumption score for each of the plurality of physical hosts. In other embodiments the analysis engine assigns a resource consumption score to each of the plurality of physical hosts responsive to the retrieved first and second pluralities of metrics and to a determined level of priority. In another embodiment for example in assigning the resource consumption score to the physical host providing a resource such as disk utilization analysis engine retrieves data identifying a weight to apply to a level of available resource utilization such as a level of disk utilization available analysis engine generates an initial resource consumption score for a physical host based upon an evaluation of a level of availability for a resource provided by the physical host determines that a weight is associated with the level of availability of the resource and modifies the initial resource consumption score for the physical host based upon the weight. In one of these embodiments the resource consumption score is a composite of the weighted initial scores for a plurality of the resources provided by the physical host. In another of these embodiments the resource consumption score is an average of the weighted initial scores for a plurality of the resources provided by the physical host.

In another embodiment analysis engine assigns a resource consumption score comprising one or more sub scores including scores assigned to without limitation a level of power utilization a level of available CPU utilization a level of available memory and a level of available disk utilization that are responsive to the retrieved pluralities of metrics. In yet another embodiment a level of available utilization of a resource is adjusted based on an anticipated level of utilization by the virtual machine. For example an initial level of available disk utilization may be identified as a percentage of total disk utilization available and then reduced by an amount of utilization used by the virtual machine in previous sessions. In some of these embodiments the anticipated level of utilization of a resource is determined in accordance with an amount of utilization used by the virtual machine during a historical time period.

In still another embodiment for example in assigning the first power score to a physical host analysis engine retrieves data identifying a weight to apply to one or more levels of power utilization such as a level of power consumption a level of CPU utilization or a level of thermal temperature analysis engine generates a maximum first power score for the physical host consuming the most power based upon an evaluation of one or more levels of power utilization for each of the plurality of physical hosts determines that a weight is associated with one or more levels of power utilization modifies the maximum first power score for the physical host based upon the weight and determines the first power score for each of the plurality of physical hosts based upon the maximum first power score. In some embodiments analysis engine generates the maximum first power score based upon an evaluation of a level of power utilization for each of the plurality of physical hosts located in one or more zones of computing devices. In one of these embodiments the first power score assigned to each of the plurality of physical hosts is proportional to the maximum first power score. In another of these embodiments the first power score assigned to each of the plurality of physical hosts may be identified as a percentage of the maximum first power score.

In some embodiments analysis engine retrieves an identification of an algorithm to apply in identifying a physical host to execute a virtual machine. In one of these embodiments for example analysis engine retrieves an identification of an algorithm that generates lower resource consumption scores for potential hosts providing resources for maximizing performance of a virtual machine. In still another of these embodiments analysis engine retrieves an identification of an algorithm that generates higher resource consumption scores for potential hosts residing on severs with elevated levels of capacity or throughput. In another of these embodiments analysis engine retrieves an identification of an algorithm that generates lower power scores for potential hosts providing resources for maximizing power performance of a virtual machine. In yet another of these embodiments analysis engine retrieves an identification of an algorithm that generates lower resource consumption scores for potential hosts capable of executing multiple virtual machines resulting in maximum density of virtual machines per physical host and a reduced number of physical hosts to manage a total amount of workload.

In step analysis engine determines a second power score for each of the plurality of physical hosts associated with at least the one metric identifying the level of usage exerted on each of the plurality of physical hosts by the virtual machine as of a predetermined time period. In one embodiment analysis engine analyzes one or more anticipated levels of power utilization and a weight assigned to each anticipated level of power utilization generated by a hypothetical migration of virtual machine to one of the plurality of physical hosts the analysis engine determines a second power score for the physical host based upon an evaluation of the one or more anticipated levels of power utilization generated by the hypothetically migrated virtual machine and the analysis engine determines for each of the plurality of physical hosts a second power score. In another embodiment analysis engine determines the second power score based upon the hypothetical migration of the virtual machine to each of a plurality of physical hosts located in the same zone of computing devices. In yet another embodiment analysis engine determines for each of the plurality of physical hosts whether a physical computing device includes a level of available power capacity required for execution of virtual machine .

In step host recommendation service identifies one of the plurality of physical hosts on which to execute the virtual machine wherein the second power score of said physical host satisfies at least one predetermined criteria. In one embodiment host recommendation service identifies a first physical host in the plurality of physical hosts for execution of the virtual machine the first physical host having a lower second power score than a second physical host in the plurality of physical hosts. In another embodiment host recommendation service identifies a first physical host in the plurality of physical hosts for execution of the virtual machine the physical host including at least one characteristic needed to maximize the available resources of the virtual machine as identified by a weight associated with a metric maximizing a level of power utilization.

In one embodiment host recommendation service selects a physical host for execution of the virtual machine such that power utilization is distributed substantially evenly across a plurality of physical computing devices within a cloud computing environment as illustrated in in order to maximize the power performance of each virtual machine. In another embodiments host recommendation service selects a physical host for execution of the virtual machine such that on or more levels of available resources are distributed substantially evenly across a plurality of physical computing devices within a cloud computing environment in order to maximize the performance of each virtual machine. In another embodiment host recommendation service communicates with a customization interface with which a user such as an administrator can select an optimization mode in which host recommendation service should execute. In one of these embodiments for example the administrator may configure host recommendation service to prioritize power performance placing a virtual machine on a physical host that will provide improved power utilization for the virtual machine or in another example the administrator may configure host recommendation service to require each physical host to maintain a threshold level of power utilization efficiency.

In still another embodiment host recommendation service recommends the migration of a virtual machine from a physical host that exceeds a power utilization threshold to a different physical host in order to optimize distribution of power utilization throughout a zone of physical hosts host recommendation service may identify the physical host to which to migrate the virtual machine using the methods and systems described above. In some embodiments host recommendation service recommends the migration of a virtual machine from a physical host that exceeds a resource threshold to a different physical host in order to optimize distribution of one or more resources throughout a zone of physical hosts. In yet another of these embodiments host recommendation service provides a user with a notification of the exceeded threshold and any migration recommendations identified.

In still another embodiment host recommendation service recommends a physical host for execution of the virtual machine such that each physical host in the plurality of computing devices hosts as many virtual machines as the physical host has resources to support in order to minimize the number of physical hosts. In some of these embodiments in which analysis engine distributes virtual machine workload to as few physical hosts as possible the scoring process may include computing a scaling factor to allow for a balance between performance and density with extra weights applied towards density. In other of these embodiments in which analysis engine distributes virtual machine workload to physical hosts able to maximize the performance of each virtual machine analysis engine may sort a plurality of virtual machines for which it has received requests for identifications of physical hosts sorting the plurality of virtual machines into an enumerated list that for example places virtual machines with lower scores and therefore greater requirements for resources than other virtual machines at the beginning of the list. Thus by identifying a physical host for a virtual machine with a lower score sooner than for a virtual machine with a higher score analysis engine increases the probability that a physical host with the resources to maximize performance of the virtual machine will be available. In other embodiments host recommendation service communicates with a customization interface with which a user such as an administrator can select a maximum density optimization mode in which host recommendation service identifies a physical host executing a plurality of virtual machines in order to maximize the density of virtual machines per physical host in the plurality of physical hosts.

In some embodiments host recommendation service identifies a physical host executing a processor with one or more cores. In one of these embodiments for example the physical host may be a computing device as described above in connection with . In another of these embodiments host recommendation service identifies a processor in a plurality of processors on which to execute the virtual machine. In still another of these embodiments host recommendation service identifies a portion of a multicore processor with which to execute the virtual machine. In yet another of these embodiments host recommendation service identifies a subset of available processors on a physical host for execution of a virtual machine. In other embodiments host recommendation service identifies both a physical host and a subset of available processors on a physical host for execution of a virtual machine.

In still other embodiments host recommendation service receives an identification of a physical host and implementing the methods described herein identifies a processor in a plurality of processors on which to execute a virtual machine. In some of these embodiments host recommendation service identifies a processor for execution of the virtual machine such that workload is distributed substantially evenly across the plurality of processors on which to execute the virtual machine. In some of these embodiments host recommendation service identifies a processor for execution of the virtual machine in accordance with one or more optimization preferences.

In another embodiment host recommendation service may optimize the topographical distribution of resources by recommending the migration of a virtual machine to a physical host on a virtualization server having an optimal location. In some embodiments analysis engine analyzes one or more metrics in a plurality of metrics retrieved from the plurality of available physical hosts to determine an optimal virtualization server location. In one of these embodiments the plurality of metrics includes a metric identifying a threshold for workload on a physical computing device. For example if a computing device has a high or critical level of workload during the time period for which analysis engine evaluates the computing device analysis engine may determine that the computing device cannot execute an additional virtual machine. In another of these embodiments the plurality of metrics includes a metric identifying a location of the physical computing device. For example such a location may include without limitation a zone location a virtualization server location or a geographic location.

In yet another embodiment host recommendation service selects a physical host for execution of the virtual machine such that server workload is distributed substantially evenly across a plurality of available virtualization servers within a cloud computing environment. In some embodiments host recommendation service recommends the migration of a virtual machine from a physical host residing on a virtualization server that fails to satisfy a threshold level of workload to a different physical host in order to optimize the topographical distribution of resources. For example if a virtualization server has a high or critical level of workload then host recommendation service will not recommend a physical host residing on that virtualization server to execute an additional virtual machine or in another example if a virtualization server has a low or minimal level of workload then host recommendation service will not recommend a physical host residing on that virtualization server to execute an additional virtual machine. In one of these embodiments host recommendation service may prioritize the migration of a virtual machine residing on a virtualization server that falls below the threshold level of workload to a different virtualization server exceeding the minimum level of workload in order to decrease the number of total physical hosts required to manage a total workload across a plurality of physical hosts in the cloud computing environment.

In still another embodiment host recommendation service communicates with a customization interface with which a user such as an administrator can select a topographic optimization mode in which host recommendation service recommends the migration of a virtual machine from a physical host residing on a virtualization server that fails to satisfy a threshold level of workload to a physical host on a different virtualization server in order to optimize the topographical distribution of workload throughout the cloud computing environment.

In step management server responds to the identification of the physical host on which to execute the virtual machine by adjusting processor performance states for one or more of the plurality of physical hosts and adjusting processor operating states for one or more of the plurality of physical hosts. In some embodiments management server responds to the identification of the physical host on which to execute the virtual machine by executing the virtual machine on the identified physical host. In another embodiment management server adjusts the ACPI processor operating state i.e. C State for one or more of the plurality of physical hosts in accordance with one or more metrics retrieved by analysis engine . In yet another embodiment management server adjusts the ACPI processor performance state i.e. P State of one or more of the plurality of physical hosts in accordance with one or more metrics retrieved by analysis engine .

In still another embodiment analysis engine determines for each of the plurality of physical hosts whether for any of the metrics in the retrieved first and second pluralities of metrics the physical host meets a configured threshold of available resources. For example analysis engine may determine that a physical host has exceeded a threshold level of power utilization and management server will adjust the P State of physical host s processor upward or in another example analysis engine may determine that a physical host has fallen below a threshold level of power utilization and management server will adjust the P State of physical host s processor downward. In other embodiments analysis engine may determine that a physical host has exceeded a threshold level of power utilization and management server will adjust the C State of physical host s processor upward into an idle state or in another example analysis engine may determine that a physical host has fallen below a threshold level of power utilization and management server will adjust the P State of physical host s processor downward into a ready state. In some embodiments the physical host s processor may be provided as a processing unit having one or more processor cores as described in connection with . In one of these embodiments where the physical host exceeds a configured threshold of available resources management server will adjust the C State State of physical host s processor to idle on or more processor cores. In another of these embodiments management server will adjust the C State of the physical host s processor to shut down on or more processor cores.

In some embodiments management server responds to the identification of the physical host on which to execute the virtual machine by adjusting the processor operating states of one or more of the plurality of physical hosts in accordance with one or more optimization preferences. In one of these embodiments where a maximum performance optimization mode has been selected management server may monitor and adjust the C State of a physical host s processor more aggressively than the processor P State. In another of these embodiments where a maximum density mode has been selected management server will adjust upward the C State of a physical host having fallen below a threshold ratio of virtual machines per physical host. In some of these embodiments the adjusted C State will cause one or more processors of the physical host to become idle or shut down. In yet other embodiments management server adjusts the P state of one or more physical hosts in accordance with a selected optimization mode. In one of these embodiments where a maximum performance optimization mode has been selected management server may monitor and adjust the P State of a physical host s processor more aggressively than the processor C State. In another of these embodiments where a maximum density mode has been selected management server will adjust upward the P State of a physical host having fallen below a threshold ratio of virtual machines per physical host.

Aspects of the disclosure have been described in terms of illustrative embodiments thereof. Numerous other embodiments modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure. For example one of ordinary skill in the art will appreciate that the steps illustrated in the illustrative figures may be performed in other than the recited order and that one or more steps illustrated may be optional in accordance with aspects of the disclosure. Modifications may be made by those skilled in the art particularly in light of the foregoing teachings. For example each of the elements of the aforementioned embodiments may be utilized alone or in combination or sub combination with elements of the other embodiments. It will also be appreciated and understood that modifications may be made without departing from the spirit and scope of the following claims.

