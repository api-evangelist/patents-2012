---

title: Automating workflow validation
abstract: A test document associated with a workflow definition is obtained, the test document including an input for an action of the workflow definition and an expected state for the workflow definition based on the input. The input is delivered for the action of a workflow instance, the workflow instance being an instance of the workflow definition executed by a workflow engine, and the action determined based upon a present state of the workflow instance. A next state of the workflow instance is obtained, where the next state is determined by the workflow engine based upon the present state, the action and the input. The next state of the workflow instance is compared to the expected state of the test document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09170821&OS=09170821&RS=09170821
owner: Amazon Technologies, Inc.
number: 09170821
owner_city: Seattle
owner_country: US
publication_date: 20120808
---
Workflow management systems typically model a business process by defining a workflow comprising a set of tasks to produce a result. Complex business processes may necessitate complex workflows. It can be difficult to validate workflows with current technologies that do not offer the flexibility needed to handle significant complexity.

Disclosed are various embodiments facilitating validation of the operation of one or more actions of a workflow. A workflow definition may contain many possible paths through the various possible actions of a workflow. In order to verify that the workflow definition operates as expected a test document may be created that specifies input for one or more of actions of the workflow definition as well as a corresponding expected state resulting from each of the specified actions. In some embodiments portions of the test document may be created by a synthesis engine based upon the history from prior instances of the workflow definition.

To begin the validation a test engine may obtain the test document specifying input to one or more actions of a workflow instance associated with the workflow definition. The test engine may provide the input to a workflow engine executing the workflow instance then validate that the post action state of the workflow instance matches the expected state specified in the test document. The expected state may be used to ensure that the workflow instance takes the proper path through the actions of the workflow definition and that the history for the workflow instance is updated correctly. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing environment in data communication with one or more computing devices by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may comprise a plurality of servers or other computing devices that are arranged for example in one or more server banks or computer banks or other arrangements. For example the computing environment may comprise a cluster computing resource a grid computing resource and or any other distributed computing arrangement. The computing environment may be located in a single installation or may be distributed among many different geographical locations.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include a workflow engine a test engine a synthesis engine and other applications services processes systems engines or functionality not discussed in detail herein. The workflow engine is executed to orchestrate and execute instances of workflows workflow instances as will be described. The workflow engine is a generic workflow processor that may embody a functional expression of a given workflow definition. Accordingly the workflow engine is a stateless entity that processes the workflow instances according to the respective workflow definition and workflow history. In this respect the workflow engine is configured to identify the activities actions or steps to be performed for a specific workflow instance based upon the respective workflow definition as will be described. In one embodiment the workflow engine comprises a class that may be instantiated multiple times. Thus there may be many instances of various workflow engines executed by the computing environment at any given time.

The test engine is executed to facilitate automated testing of workflow instances according to a pre defined test document. The test engine may communicate with the workflow engine and or other services using various protocols such as for example simple object access protocol SOAP representational state transfer REST remote procedure call RPC and or other protocols for inter process communication. The synthesis engine is executed to generate testing scenarios used within the test documents based upon prior executions of workflow instances. In order to produce the testing scenarios the synthesis engine may examine the workflow logs produced by the workflow engine during the execution of the various workflow instances.

The data stored in the data store includes for example several workflow instances N workflow histories workflow logs several workflow definitions N several test documents N several activities N and potentially other data. Each workflow instance is an instance of a given workflow definition and may be represented by the data making up the workflow instance in its entirety or a workflow instance may be represented by virtue of an identifier that is associated with data embodying a workflow instance stored elsewhere. The workflow represented by each workflow instance is orchestrated by the workflow engine .

Each workflow history is associated with a respective one of the workflow instances processed by the workflow engine . The workflow histories each comprise for example a list of events that have occurred during the execution of a given workflow instance over time. To this end the events listed in a given workflow history act as a record of the execution of a workflow instance . Such events may be expressed using for example extensible markup language XML JavaScript object notation JSON or other such languages. Individual workflow logs include various data related to corresponding workflow instances N executed previously by the workflow engine . The workflow logs may include the workflow history for a given workflow instance identifiers for the workflow instance and the associated workflow definition data used as input for various states of the workflow instance exceptions or errors reported during execution of the workflow instance and or other data associated with a previous execution of one or more workflow instances N.

Each workflow definition defines the activities actions and or steps collectively referred to as the actions to be carried out for each associated workflow instance . In some embodiments the actions of a workflow definition may comprise one or more subordinate tasks sub tasks . In some embodiments the workflow instance may not progress to the next action until each of the sub tasks is complete. In other embodiments the workflow instance may progress to the next action concurrently with the execution of the sub tasks. The workflow definition may be expressed using for example XML process definition language XPDL business process execution language BPEL or other workflow process definition languages.

Each test document corresponds to a workflow definition and provides an input for one or more states of a workflow instance under test and a corresponding expected resulting state for the workflow instance . In some embodiments a test document may be represented as an extensible markup language XML document or a JavaScript Object Notation JSON document. The test document may provide an input for a subset of the possible states along one or more possible paths of execution of the workflow definition . In some embodiments the test document may provide inputs for one or more sub tasks of an action within the workflow definition . In other embodiments the test document may specify a responsive action to initiate in the event that the expected resulting state of the workflow instance under test does not match the actual resulting state of the workflow instance. As a non limiting example the responsive action may comprise logging the event generating an alarm repeating the action that resulted in the unexpected state restarting the workflow instance under test and or other possible responsive actions.

Each of the activities may be executed by the computing environment to perform or facilitate performance of one or more actions tasks or functions that comprise at least a portion of a given workflow instance based upon a request from the workflow engine as will be described. The activities may facilitate performance of one or more actions tasks or functions of a given workflow instance by for example initiating execution of one or more applications providing notice to assignees of tasks monitoring performance of the tasks and or other methods of facilitation as can be appreciated. In some embodiments the actions tasks or functions facilitated by the activities may be performed asynchronously. In other embodiments the applications initiated by the activities may be performed in computing devices remote to the computing environment . The activities may comprise a class that is instantiated multiple times to handle the workflow processing load from the workflow engine as will be described.

The computing device or devices may comprise for example a server computer or any other system providing computing capability. Alternatively the computing device may comprise a plurality of servers or other computing devices that are arranged for example in one or more server banks or computer banks or other arrangements. For example the computing device may comprise a cluster computing resource a grid computing resource and or any other distributed computing arrangement. The computing device may be located in a single installation or may be distributed among many different geographical locations.

The components executed on the computing device or devices for example include an application and other applications services processes systems engines or functionality not discussed in detail herein. The application is executed to perform one or more actions of a given workflow instance . The application may obtain input for the actions to be performed for a workflow instance and may return the result of the action based upon the input. As a non limiting example the application may perform the action of initiating shipment of the items from a paid order. The application may obtain an order number as input then provide a shipment confirmation number as a result of the action performed.

The networked environment is configured to execute workflow instances that perform various functions. One example of such a workflow that may be embodied in workflow instances might be a process to implement the payment for a purchase of an item online over the Internet. Such a process may involve various actions or tasks such as inputting a payment instrument such as a credit card number or other instrument performing a fraud check on the payment instrument and sending a shipment request to a fulfillment center to implement the fulfillment of the order. There may be many other actions or tasks involved in such a process where the above actions or tasks are described merely for the purposes of illustration.

To this end a workflow may involve various components persons applications and other entities that are involved in the processing of data to complete a workflow instance . In the case of the processing of payment for an order for example such an order may be processed through various departments and other entities for ultimate authorization and purchase. A given workflow instance may involve human intervention at some point or may be entirely automated. The human intervention may involve interaction with a given activity on the part of an individual as can be appreciated.

Next a general discussion of the networked environment is described with respect to the execution of various workflow instances according to various embodiments. To begin an operator or an application external to the networked environment may interact with a test engine to initiate testing of a particular workflow definition . To this end a test document associated with the workflow definition may be obtained by the test engine . In response the test engine may create or initiate creation of a workflow instance associated with the workflow definition under test. The workflow engine ultimately orchestrates the execution of the workflow instance while the direction and input necessary for the execution of the workflow instance is provided by the test engine based upon the test document .

To this end the workflow engine retrieves any workflow history and workflow definition from the data store for such workflow instance . In some embodiments an initial state for the workflow instance may be specified by the test document . The workflow engine also obtains the data associated with the respective workflow instance from the data store and or other location. Once the respective workflow history workflow definition and other information embodying the workflow instance are obtained then the workflow engine may begin processing the workflow instance . The test engine may establish a communications interface with the workflow engine such that the test engine obtains the state of the workflow instance as well as provides input required for one or more of the various actions of the workflow instance .

Once the workflow history and other information embodying the workflow instance are received by the respective workflow engine then the workflow engine processes the workflow definition and examines the workflow history in order to determine a next action to be taken for the respective workflow instance . To this end the generic workflow engine becomes a functional embodiment of the workflow definition that is configured to review the workflow history and identify a next action to be taken for the workflow instance .

The workflow engine may determine that the next action of the workflow instance requires input that would typically be provided by a user or an application executing on a computing device. Upon obtaining the state of the workflow instance the test engine may determine if the test document specifies an input for the next action. If such an input is provided in the test document the test engine may communicate the input to the workflow engine . Alternatively if the test document does not specify an input for a given action the test engine may obtain the input from a user through a user interface and or from another input source as can be appreciated.

As a non limiting example an action of a workflow definition may be to obtain an order number of an order to be processed for shipping. During ordinary operation of the workflow instances the workflow engine may obtain this order number from a user from the data store or through another operation specified in the workflow definition . However if the test document associated with the workflow definition under test specifies an input for the particular action the test engine may bypass the input procedure defined for the action. In the present example the test engine may cause the workflow engine executing the workflow instance to bypass the input source for the action and instead provide the order number i.e. the input specified in the test document .

In some embodiments the test document may contain references scripts network links and or other dynamic run time sources for providing input. Furthermore a test document may contain a mixture of static and dynamic input sources. Returning to the previous example the test document may specify one or more order numbers as well as for example a uniform resource identifier URI providing a link to another source of order numbers.

In other embodiments the action of a workflow definition may comprise one or more sub tasks which may themselves continue to be further subdivided. As with the singular actions the test document associated with the workflow definition may specify input data associated with one or more of the sub tasks and or other lineal tasks of an action. As a non limiting example an action of a workflow definition may be to obtain payment for an order. The action may be divided into sub tasks such as obtaining a payment method from a user submitting a request for payment using the payment method and providing confirmation of the payment processing to the user.

Upon obtaining the input for the action of the workflow instance the workflow engine schedules an activity that performs or facilitates performance of the next action and any sub tasks to be executed with respect to the workflow instance . To this end this may involve placing the workflow instance in a queue associated with a respective activity to be performed.

Once the activity indicates the next action has been completed the activity sends a message to the workflow engine that such processing is complete. Thereafter the test engine may compare the data associated with the state of the workflow instance after completing the activity with the expected state of the workflow instance specified by the test document . Such a testing scenario may permit testing of not only the operation of the workflow instance but potentially the operation of one or more applications carrying out the action. For example an action of a workflow definition may be to obtain payment for an order. The action may be divided into sub tasks such as obtaining a payment method from a user submitting a request for payment using the payment method and providing a payment confirmation number to the user. In this example submitting a request for payment may comprise the application obtaining authorization for payment.

If the payment method specified in the test document is an identifier for an expired gift certificate the expected state of the workflow instance may be an error state with no defined payment confirmation number provided by the application . If the state of the workflow instance including the data returned by the application matches the expected state of the test document the test engine may record the results of the test of this action in the workflow log and the workflow instance may proceed to the next action. Alternatively if the states do not match the test engine may record the event as a state mismatch. Additionally based upon the state mismatch the test engine may terminate the execution of the particular workflow instance attempt to repeat the action restart the workflow instance from the beginning and or other possible responses. In some embodiments the response to a state mismatch for a given expected state may be specified by the test document .

It should be noted that a workflow instance created for testing purposes may or may not be executed to completion even if the workflow instance does not deviate from expected states of the test document . For various possible reasons the workflow engine or the test engine may determine that the execution of the particular workflow instance should end. Such a terminal action may comprise an action or task inherent in the workflow of the workflow instance or such action may comprise closing the workflow instance due to the fact that the workflow is complete. If the workflow is complete then the workflow engine closes the workflow instance by performing any needed closing tasks without applying the workflow instance to an activity as can be appreciated. Alternatively an activity may be employed that performs the closing tasks.

In addition to the foregoing the workflow engine also records events in the respective workflow histories of the workflow instances that it handles. As non limiting examples such events may comprise receiving input for a workflow instance and the source of the input the workflow engine determining a next action for the workflow instance and the basis for determining the action initiating an activity for the workflow instance receiving a workflow instance from an activity after completion an indication that a workflow instance has completed or otherwise terminated and or other events. In addition events may record various failure conditions such as the failure of a workflow engine to timely determine the next action to be performed the failure of an activity to perform one or more tasks with respect to the workflow for a workflow instance and or other possible failure states.

In some embodiments the synthesis engine may correlate the workflow histories of prior executions of various workflow instances N in order to produce and or extend the testing scenarios of the test documents N. To this end the synthesis engine may identify the prior executions of workflow instances sharing the same workflow definition . The workflow instances may be correlated to identify common paths of execution taken from among the various potential paths of execution provided by the associated workflow definition . Once the synthesis engine identifies the common paths among the workflow instances the actions as well as inputs from these paths may be correlated and inserted into a test document associated with the workflow definition . Furthermore the expected states of the workflow instances that result from each action and input combination may also be correlated and included within the test document . Thereafter the test document produced by the synthesis engine may be made available in the data store for use and or further editing.

Referring next to shown is a communication diagram that illustrates one example of communication occurring between the test engine the workflow engine and an activity during execution of a workflow instance as described above according to an embodiment of the present disclosure. To begin the test engine requests the current state of a particular workflow instance executed by the workflow engine . The workflow engine requests the workflow definition workflow history and the information embodying the respective workflow instance from the data store . Upon receiving the data the workflow engine determines the next action to be taken for the workflow instance . To this end the workflow engine having embodied the workflow definition then examines the workflow history and determines the next action to be taken. Ultimately the workflow engine generates a directive indicating the next action to be taken with respect to the workflow instance .

In response the workflow engine may return the present state of the workflow instance . The state information returned may include the workflow history for the workflow instance whether an action is currently underway a next action for the workflow instance whether any input is required for the next action and the format of the input and or other data associated with execution of the workflow instance as can be appreciated.

If input is required for the next action the test engine may provide input specified for the action within the test document . In response the workflow engine may initiate an activity for the next action as well as potentially provide the input specified by the test document for the action. All needed data to perform the action may be included in the activity request or the activity request may include a pointer that indicates where such information is stored to be accessed by the respective activity . When sending the activity request the workflow engine may record an event in the workflow history of the respective workflow instance . The activity then proceeds to schedule perform and or facilitate performance of the respective action associated with the workflow instance . As discussed previously an action of a workflow may comprise one or more sub tasks. Each of these sub tasks or other lineal tasks may themselves require an activity . As a result one action of a workflow definition may require one or more activities to schedule perform and or facilitate performance of the respective action associated with the workflow instance . Additionally one or more of the actions and or sub tasks of a workflow instance may be performed asynchronously.

Once the activity indicates the next action has been completed the activity sends a message to the workflow engine that such processing is complete. Thereafter the workflow engine may provide an update of the state of the workflow instance to the test engine . As described previously the test engine may compare the state of the workflow instance with the expected state provided by the test document . If the state of the workflow instance matches the expected state of the test document the test engine may record the results of the test of this action in the workflow log and the workflow instance may proceed to the next action. Alternatively if the states do not match the test engine may record the event as a state mismatch and potentially take further responsive action.

Turning now to shown is a flowchart that provides one example of the operation of the test engine according to various embodiments. It is understood that the flowchart of merely provides an example of the many different types of functional arrangements that may be employed to implement the operation of the test engine as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

This portion of the test engine may be executed based at least upon a workflow definition being selected for testing by the test engine . To begin in block the test engine obtains a test document associated with the workflow definition . Then in block the test engine may initiate a workflow instance where the workflow instance is an instance of the given workflow definition . In some embodiments the test engine may be provided with an identifier for a pre existing workflow instance thereby bypassing the need to create a new instance.

Next in block the workflow engine retrieves any workflow history and workflow definition from the data store for such workflow instance . Once the workflow history and other information embodying the workflow instance are received by the respective workflow engine then the workflow engine processes the workflow definition and examines the workflow history in order to determine a next action to be taken for the respective workflow instance .

Then in block the test engine determines whether input is required for the next action based upon the state information obtained for the workflow instance . If not input is required execution of the test engine returns to block . Alternatively if input is required execution of the test engine proceeds to block . At block the test engine may communicate the input to the workflow engine . If the test document does not specify an input for a given action the test engine may obtain the input from a user through a user interface and or from another input source as can be appreciated.

Continuing at block the test engine may obtain the state of the workflow instance resulting from performance of the action. Moving on at block the test engine may compare the data associated with the state of the workflow instance after completing the activity with the expected state of the workflow instance specified by the test document . Such a comparison may permit testing of not only the operation of the workflow instance but potentially the operation of one or more applications carrying out the action.

Next at block the test engine determines whether the state of the workflow instance including the data returned by the application matches the expected state of the test document . If the states match execution of the test engine returns to block to determine if the present state of the workflow instance requires input. Alternatively if the states do not match in block the test engine may record the event in the workflow log as a state mismatch and initiate a responsive action to the mismatch as described previously. Thereafter this portion of the execution of the test engine may end as shown.

With reference to shown is a flowchart that provides one example of the operation of the synthesis engine according to various embodiments. It is understood that the flowchart of merely provides an example of the many different types of functional arrangements that may be employed to implement the operation of the synthesis engine as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

This portion of the synthesis engine may be executed based at least upon a request from an operator to examine workflow histories in order to produce one or more test documents . To begin in block the synthesis engine may obtain workflow histories associated with one or more of prior executions of various workflow instances N . Next in block the synthesis engine may identify the workflow definitions N represented by prior executions of workflow instances N.

Then in block the synthesis engine may correlate the various workflow instances associated with a given workflow definition in order to identify common paths of execution taken from among the various potential paths of the workflow definition . Continuing in block the synthesis engine may generate one or more test scenarios based upon the various actions inputs and resulting states taken along these common paths. Next in block the synthesis engine may insert the test scenarios in the test document associated with the workflow definition . Thereafter in block the synthesis engine may determine if further workflow definitions N were represented in the workflow histories for which the workflow instances N have not been examined. If more workflow definitions N remain execution of the synthesis engine returns to box . Alternatively if no further workflow definitions N exist for which the associated workflow instances N have not been examined this portion of the synthesis engine ends as shown.

Turning now to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment may comprise for example one or more computing devices . A computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the workflow engine the test engine the synthesis engine and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java Javascript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the workflow engine the test engine the synthesis engine and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the test engine and synthesis engine respectively. If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the workflow engine the test engine and the synthesis engine that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

