---

title: System and method for synchronizing settings and state information for a browser component
abstract: A system and method is disclosed for synchronizing settings and state information for a browser component across multiple computing environments. Settings and state information may be stored for a web application in a storage associated with a user account. An API receives updated state information for the browser component from a first web browser associated with the user account and sends a signal to a second web browser associated with the user account that the stored settings and state information was updated. The second web browser may then send a request to the API for the updated information, the API, in response, propagate the updated information to the second web browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08621091&OS=08621091&RS=08621091
owner: Google Inc.
number: 08621091
owner_city: Mountain View
owner_country: US
publication_date: 20120127
---
This application claims priority from U.S. Provisional Application No. 61 576 216 filed Dec. 15 2011 which is incorporated herein by reference in its entirety.

Web applications for example games email services or the like when accessed or executed by a web browser may store certain information on the device hosting the web browser. The information may include user specific settings and state information regarding the web application in the form of a cookie or where applicable a set of data stored in a local file system. If a user closes the web browser and then uses web application on another web browser for example on a different device then the settings and state for the web application will be lost and the user will be forced to start the web application from a default state.

The subject technology provides a system and computer implemented method for synchronizing settings and state information for a browser component across multiple computing environments. According to one aspect the computer implemented method may include storing state information for a browser component in a storage associated with a user account receiving updated state information from a first instance of the browser component operating in connection with a web browser and the user account and propagating the updated state information to a second instance of the browser component upon an initiation of the second instance of the browser component and subsequent to an initiation of the first instance of the browser component.

In another aspect a system may include a process and a memory the memory having server instructions that when executed cause the processor to store state information for a browser component in a storage remote from a client device the storage associated with a user account receive updated state information from a first instance of the browser component operating on the first device and in connection with the user account and send the updated state information to a second instance of the browser component operating on a second device upon an initiation of the second instance of the browser component and subsequent to an initiation of the first instance of the browser component.

In a further aspect a machine readable medium may include instructions that when executed perform a method that includes storing state information for a browser component in a storage associated with a user account receiving updated state information from a first instance of the browser component operating in connection with a web browser and the user account confirming that the second instance of the browsing component is operating in connection with a browsing session authenticated to the user account and propagating the updated state information to a subsequent instance of the browser component upon an initiation of the subsequent instance of the browser component.

It is understood that other configurations of the subject technology will become readily apparent to those skilled in the art from the following detailed description wherein various configurations of the subject technology are shown and described by way of illustration. As will be realized the subject technology is capable of other and different configurations and its several details are capable of modification in various other respects all without departing from the scope of the subject technology. Accordingly the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.

A computing device may be configured to load and execute a web browser for the display of one or more browser components for example one or more browser components of provided by centralized server . A browser component may include for example software extensions plugins add ons themes web browser applications and the like. A browser component may be a hosted application including data for example a webpage for display of a website supplemented with corresponding metadata for example a name or other identifier launch instructions web address or the like or a packaged application including downloadable software integratable with a web browser for use online or offline.

In one aspect computing device may be configured to store data related to a browser component in a local storage for example a local database data directory file system a memory resident data object or the like associated with computing device . As will be described in further detail data stored in local storage may include configuration data component data and settings state information cookies and the like. For example data stored in local storage may include configuration information including user specific settings for one or more browser components and or state information for the one or more browser components for example in the form of currently entered text or numeric fields variable values screen or tab settings and the like . The configuration and state information may be stored such that they may be retrieved by a computing device and used to execute install update or recover the one or more browser components in accordance with the stored information. In this manner data for a first instance of a browser component may be stored in local storage and if the browser is closed and reopened or a different browser reopened to display a second instance of the browser component the second instance of the browser component may execute as if the user never closed the first instance. Moreover if the first instance of the browser component or for example web browser becomes uninstalled or corrupted a second instance of the browser component may be executed or re installed using the stored data to duplicate the settings and state of the first instance without user intervention.

Data storage may include a local storage object that enables a browser component to store information for example as named key value pairs locally within the object. The local storage object may be a memory resident data object associated with web browser . In one aspect the local storage object may be based on a version of the HTML5 storage specification and may be implemented natively in web browser . In this regard the local storage object may persist in memory like a cookie and information stored in the local storage object may persist even after user navigates away from a current website associated with the browser component or closes web browser . A browser component may store settings and state information in the local storage object while the web component is used by web browser . In one aspect the local storage object or the information therein may be automatically transmitted to centralized server for storage at remote storage . In another aspect local storage object or the information therein may only be transmitted if web browser has been authenticated to user account or if manually authorized or initiated by user .

The data stored in local storage for example the local storage object may be organized and or indexed by a data type. A data type may include a designation for one or more elements of user data for example profile data user specific settings state information corresponding to a user session or the like associated with a browser component or a user interaction involving the browser component. A data type may also include for example a designation for a specific browser component used by user and or a designation for a corresponding set of stored elements for use with that component. In this regard a browser component may be indexed by its designation to retrieve the browser component s associated data elements from local storage to facilitate an installation update or recovery of a browser component including the component s user specific settings and or state information.

Computing device may be configured to connect to centralized server and to provide the data stored in local storage to centralized server for synchronization with data stored at remote storage . In one aspect a first computing device may send the locally stored data to centralized server and centralized server may receive and store the data in remote storage so that it may be accessed and synchronized with a second computing device even when the first device is offline. Centralized server may also store synchronization information for one or more computing devices including the last time each device was synchronized the data types synchronized and the like.

The previously described synchronization process may be used between different types of computing devices or related software applications. For example various browser components may be installed on a web browser of a smart phone. As long as those browser components are associated with user account data corresponding to the browser components may be uploaded and stored on remote storage for synchronization with other devices running a web browser such as a personal computer. Stand alone applications associated with a user account may also be synchronized. A synchronization component may be installed in connection with an operating system to monitor and synchronize data stored at local storage for a stand alone application with data stored at remote storage . In this manner a browser component may be installed or updated on a personal computer with data corresponding to a stand alone application used on a smart phone.

The various connections between computing devices centralized server and remote storage may be made over a wired or wireless connection. In some aspects the functionality of centralized server and remote storage may be implemented on the same physical server or distributed among a plurality of servers. Moreover remote storage and or local storage may take any form such as relational databases object oriented databases file structures text based records or other forms of data repositories.

Browser component may store application specific information such as configuration and state information in a local storage object associated with a first web browser and then minor that information on centralized storage for backup protection and or synchronization with other instances of browser component . As depicted in API may be configured to receive a callback function from browser component including local storage object as an argument. To synchronize the locally stored information browser component may pass the callback function including a local storage object for example from local storage to API for example via the previously described local extension settings API . When information is stored or updated by browser component in local storage object it may then be automatically mirrored stored or updated at centralized storage . Similarly once information has been stored or updated in centralized storage API may propagate the changes to a different instance of browser component operating for example in a different web browser instance for example a second web browser using the callback function of that instance of browser component .

In another aspect synchronization of information may be turned on or off depending on how a browser component or its developer chooses to manage information that has changed at centralized storage . A browser component for example operating in second web browser may for example register an event listener with API for example via the local extension settings API . The event listener may listen for change events for example that data has been updated broadcast by API . In one aspect the event listener may be a form of callback function registered at API by an instance of browser component or the local extension settings API the callback function being executed by API on certain events for example on receiving an indication that data has been updated at centralized storage . In one example a first web browser and a second web browser may be operably connected to API for example having registered respective event listeners . A browser component displayed by first web browser may update data stored at centralized storage by calling a function of API with for example a name of a setting and a corresponding value as function arguments.

An information monitoring service running concurrently with API on server may monitor information stored at centralized storage . On an update of browser component information centralized server may broadcast a signal to all registered browser components including browser component currently running in a web browser notifying them that the stored information was updated by calling their registered event listeners. In one aspect a browser component running in the second web browser may receive at an event listener an indication for example a signal notification or the like that information stored in local storage object has been updated at for example centralized storage . In some aspects the indication may include the name of the changed value and or the value. Browser component may then immediately update the locally stored information. In other aspects on receiving the indication web browser may call API to inquire which data fields were updated since a last update time and then pass the previously described callback function including local storage object to centralized server to receive an update of the locally stored information.

In another aspect browser component may periodically call API to update the stored data or check for updates. Alternatively browser component may wait until a restart of web browser before performing an update. Browser component may also delay calling API until a time convenient for it for example after running other processes . In this regard API enables a browser component developer to have control on how often synchronization occurs. Browser component developers may also designate one or more data types to be synchronized by setting a flag for example at a predefined local storage object for each data type to be synchronized for a browser component . Moreover synchronization information for example data fields values and the like may be stored for example at API in centralized storage or local storage object or the like for each data type at remote storage for use by centralized server and synchronized devices to determine when a synchronization last occurred what data was synchronized and the like.

As described previously access to API may be based on authentication or association to a user account. In this regard the synchronization of information stored at centralized storage may be made available only to browser components that are in use by an authenticated web browser or an unauthorized web browser that can be verifiably associated with the user account. For example on a user authentication to a user account first web browser or second web browser may initiate a browser session and store authentication information for example an authentication token in connection with the session for example as a cookie on the web browser or at the remote web server using a session identifier . In another aspect centralized server may monitor synchronization bandwidth for each registered browser component and throttle the bandwidth down or up if the number of changes made over a predetermined period exceeds a predetermined threshold for example hundreds or thousands of changes in a 24 hour period .

At state information is stored for a browser component in a storage associated with a user account for example remote storage or centralized storage . At updated state information is received from a first instance of the browser component operating in connection with a web browser. The web browser may be associated with the user account for example a browsing session may be authenticated to the user account and the first instance of the browser component may be operating in connection with the browsing session. At a second instance of the browsing component is confirmed to be operating in connection with a browsing session authenticated to the user account.

At the updated state information is propagated to the second instance of the browser component. The updated state information may be propagated for example upon an initiation of the second instance of the browser component. In this regard the updated state information may begin propagating on the initiation of the second instance and continue to propagate as new information is received from the first instance after the initiation of the second instance or otherwise made available at the storage after the initiation of the second instance. The second instance of the browser component may be operating in connection with another browser for example on a different computing device. In other aspects the second instance of the browser component may be operating in connection with the same web browser for example after a restart of the web browser.

In other aspects a signal may be sent to the second instance of the browser component that the stored state information was updated and in response to the signal the second instance of the browser component may send a request for updated state information. In this regard the request may be received before the updated state information is propagated to the second instance of the browser component. Additionally the state information stored updated and or propagated may include settings related to the browser component for example configuration information . The process may also monitor a bandwidth related to the storing or propagating of the updated state information and throttle down bandwidth availability on a determination that a number of changes to the state information made over a predetermined period exceeds a predetermined threshold.

Processor may be configured to execute code or instructions to perform the operations and functionality described herein manage request flow and address mappings and to perform calculations and generate commands. Processor is configured to monitor and control the operation of the components in server . The processor may be a general purpose microprocessor a microcontroller a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA a programmable logic device PLD a controller a state machine gated logic discrete hardware components or a combination of the foregoing. One or more sequences of instructions may be stored as firmware on a ROM within processor . Likewise one or more sequences of instructions may be software stored and read from system memory ROM or received from a storage medium for example via I O interface . ROM system memory and storage medium represent examples of machine or computer readable media on which instructions code may be executable by processor . Machine or computer readable media may generally refer to any medium or media used to provide instructions to processor including both volatile media such as dynamic memory used for system memory or for buffers within processor and non volatile media such as electronic media optical media and magnetic media.

In some aspects processor is configured to communicate with one or more external devices for example via I O interface . Processor is further configured to read data stored in system memory and or storage medium and to transfer the read data to the one or more external devices in response to a request from the one or more external devices. The read data may include one or more web pages and or other software presentation to be rendered on the one or more external devices. The one or more external devices may include a computing system such as a personal computer a server a workstation a laptop computer PDA smart phone and the like.

In some aspects system memory represents volatile memory used to temporarily store data and information used to manage device . According to one aspect of the subject technology system memory is random access memory RAM such as double data rate DDR RAM. Other types of RAM also may be used to implement system memory . Memory may be implemented using a single RAM module or multiple RAM modules. While system memory is depicted as being part of device those skilled in the art will recognize that system memory may be separate from device without departing from the scope of the subject technology. Alternatively system memory may be a non volatile memory such as a magnetic disk flash memory peripheral SSD and the like.

I O interface may be configured to be coupled to one or more external devices to receive data from the one or more external devices and to send data to the one or more external devices. I O interface may include both electrical and physical connections for operably coupling I O interface to processor for example via the bus . I O interface is configured to communicate data addresses and control signals between the internal components attached to bus for example processor and one or more external devices for example a hard drive . I O interface may be configured to implement a standard interface such as Serial Attached SCSI SAS Fiber Channel interface PCI Express PCIe SATA USB and the like. I O interface may be configured to implement only one interface. Alternatively I O interface may be configured to implement multiple interfaces which are individually selectable using a configuration parameter selected by a user or programmed at the time of assembly. I O interface may include one or more buffers for buffering transmissions between one or more external devices and bus and or the internal devices operably attached thereto.

Those of skill in the art would appreciate that the various illustrative blocks modules elements components methods and algorithms described herein may be implemented as electronic hardware computer software or combinations of both. To illustrate this interchangeability of hardware and software various illustrative blocks modules elements components methods and algorithms have been described above generally in terms of their functionality. Whether such functionality is implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. Skilled artisans may implement the described functionality in varying ways for each particular application. Various components and blocks may be arranged differently e.g. arranged in a different order or partitioned in a different way all without departing from the scope of the subject technology.

It is understood that the specific order or hierarchy of steps in the processes disclosed is an illustration of exemplary approaches. Based upon design preferences it is understood that the specific order or hierarchy of steps in the processes may be rearranged. Some of the steps may be performed simultaneously. The accompanying method claims present elements of the various steps in a sample order and are not meant to be limited to the specific order or hierarchy presented.

The previous description is provided to enable any person skilled in the art to practice the various aspects described herein. The previous description provides various examples of the subject technology and the subject technology is not limited to these examples. Various modifications to these aspects will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other aspects. Thus the claims are not intended to be limited to the aspects shown herein but is to be accorded the full scope consistent with the language claims wherein reference to an element in the singular is not intended to mean one and only one unless specifically so stated but rather one or more. Unless specifically stated otherwise the term some refers to one or more. Pronouns in the masculine e.g. his include the feminine and neuter gender e.g. her and its and vice versa. Headings and subheadings if any are used for convenience only and do not limit the invention.

The term website as used herein may include any aspect of a website including one or more web pages one or more servers used to host or store web related content and the like. Accordingly the term website may be used interchangeably with the terms web page and server. The predicate words configured to operable to and programmed to do not imply any particular tangible or intangible modification of a subject but rather are intended to be used interchangeably. For example a processor configured to monitor and control an operation or a component may also mean the processor being programmed to monitor and control the operation or the processor being operable to monitor and control the operation. Likewise a processor configured to execute code can be construed as a processor programmed to execute code or operable to execute code.

A phrase such as an aspect does not imply that such aspect is essential to the subject technology or that such aspect applies to all configurations of the subject technology. A disclosure relating to an aspect may apply to all configurations or one or more configurations. An aspect may provide one or more examples. A phrase such as an aspect may refer to one or more aspects and vice versa. A phrase such as an embodiment does not imply that such embodiment is essential to the subject technology or that such embodiment applies to all configurations of the subject technology. A disclosure relating to an embodiment may apply to all embodiments or one or more embodiments. An embodiment may provide one or more examples. A phrase such as an embodiment may refer to one or more embodiments and vice versa. A phrase such as a configuration does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology. A disclosure relating to a configuration may apply to all configurations or one or more configurations. A configuration may provide one or more examples. A phrase such as a configuration may refer to one or more configurations and vice versa.

The word exemplary is used herein to mean serving as an example or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as preferred or advantageous over other aspects or designs.

All structural and functional equivalents to the elements of the various aspects described throughout this disclosure that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and are intended to be encompassed by the claims. Moreover nothing disclosed herein is intended to be dedicated to the public regardless of whether such disclosure is explicitly recited in the claims. No claim element is to be construed under the provisions of 35 U.S.C. 112 sixth paragraph unless the element is expressly recited using the phrase means for or in the case of a method claim the element is recited using the phrase step for. Furthermore to the extent that the term include have or the like is used in the description or the claims such term is intended to be inclusive in a manner similar to the term comprise as comprise is interpreted when employed as a transitional word in a claim.

