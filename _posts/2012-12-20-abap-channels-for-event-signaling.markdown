---

title: ABAP channels for event signaling
abstract: A system, a method and a computer-program product for exchanging communications between user sessions are provided. A first push channel and a first messaging channel on a first application server for connecting a first client to the first application server are established. The first messaging channel communicates with the first push channel, where both channels form a first session corresponding to the first client. A second push channel and a second messaging channel on a second application server for connecting a second client to the second application server are established. The second messaging channel communicates with the second push channel, where both channels form a second session corresponding to the second client. The first and second application servers communicate on a communication network. Messages are exchanged between the first and second messaging channels to form a connection between the first and second clients.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09467483&OS=09467483&RS=09467483
owner: SAP SE
number: 09467483
owner_city: Walldorf
owner_country: DE
publication_date: 20121220
---
This disclosure relates generally to data processing and in particular to exchanges of various communications between client sessions.

Businesses implement and rely on a plurality of business process applications and software in their day to day activities. Such business process software can run various networks that have a multitude of users connected to it. The users can create design run update and or otherwise use the networks and or business process applications residing on such networks. Each user s connection to the network and or use of the business process applications can be deemed a session. Some applications interact with one another thereby creating a collaborative environment where various user sessions communicate and or exchange messages between one another. The session communications can involve various clients e.g. applications and servers that connect such clients.

Conventional solutions for exchange of messages between sessions with or without user interface access can be realized via a polling mechanism. However such a mechanism can have various drawbacks for both clients and servers. For example when exchanging messages various data can be communicated between clients and or servers and although there can exist instances where no data is ready and waiting at the server the client can poll the server for new data thereby running into busy waiting phases which can extend processing time and delay user s access to resources and applications. On the server side the unnecessary requests can lead to a waste of server and system resources e.g. by occupying processes allocating memory consumption of CPU time an increasing the access load to a database etc.

In some implementations the current subject matter relates to a computer implemented method. The method includes establishing a first push channel on a first application server for connecting a first client to the first application server establishing a first messaging channel on the first application server wherein the first messaging channel communicates with the first push channel the first push channel and the first messaging channel to form a first session corresponding to the first client establishing a second push channel on a second application server for connecting a second client to the second application server wherein the first and second application servers communicate on a communication network establishing a second messaging channel on the second application server wherein the second messaging channel communicates with the second push channel the second push channel and the second messaging channel to form a second session corresponding to the second client and exchanging messages between the first messaging channel and the second messaging channel to form a connection between the first client and the second client. At least one of the establishing the first push channel the establishing the first messaging channel the establishing the second push channel the establishing the second messaging channel and the exchanging can be performed on at least one processor.

In some implementations the current subject matter can include one or more of the following optional features. The first push channel and the second push channel can be advanced business application programming push channels. The first messaging channel and the second messaging channel can be advanced business application programming messaging channels. The exchanged messages can include a connection request from at least one of the first client and the second client. Each messaging channel can include at least one attribute containing at least one of the following a channel group identification a channel identification a channel access scope a channel access right and a message type identification. The channel group identification can identify channels that are grouped together. The channel identification can be an identifier for a channel belonging to the channel group. The channel access scope can define whether a channel is cross client or client specific. The channel access right can represent access rights for the channels. The message type identification can specify a message type assigned to a channel. The first and second clients can be browsers. The first and second push channels can implement a WebSocket protocol to establish a bi directional communication between the first and second clients and first and second application servers respectively. Exchanging of messages can include at least one of the following an exchanging of messages during an advanced business application programming ABAP push channel communication between an ABAP push channel client and a server an exchanging of messages during an ABAP messaging channel communication between sessions and an exchanging of messages during a communication between an ABAP push channel client and an ABAP messaging channel session by connecting ABAP messaging channel to ABAP push channel client.

Computer program products are also described that comprise non transitory computer readable media storing instructions which when executed one or more data processor of one or more computing systems causes at least one data processor to perform operations herein. Similarly computer systems are also described that may include one or more data processors and a memory coupled to the one or more data processors. The memory may temporarily or permanently store instructions that cause at least one processor to perform one or more of the operations described herein. In addition methods can be implemented by one or more data processors either within a single computing system or distributed among two or more computing systems.

The details of one or more variations of the subject matter described herein are set forth in the accompanying drawings and the description below. Other features and advantages of the subject matter described herein will be apparent from the description and drawings and from the claims.

The system can include a user A and a user B where user A can have a session A that can reside on an application server X within system ABC and user B can have a session B that can reside on an application server Y within the system ABC . The users can communicate with one another directly indirectly using a communication protocol between session A and session B and or using any other communication protocols as well as any other sessions. The communication channels may also be established between the user A and session B as well as between the user B and session A . In some implementations sessions A and B can be user interface sessions advanced business application programming ABAP as developed by SAP AG Walldorf Germany sessions and or any other sessions. The current subject matter can provide a technology for pushing messaging efficiently between ABAP user interface sessions and or any other session including their respective user agents as shown in .

In some implementations the current subject matter may provide a push channel that can enable bi directional communication with user agents e.g. via the integration of WebSockets in the SAP NetWeaver Application Server available from SAP AG Walldorf Germany. The current subject matter system can also provide a publish subscribe infrastructure for exchange of messages between different user sessions residing on different SAP NetWeaver Application Servers to user agents. The publish subscribe infrastructure can include a messaging pattern where senders or publishers of messages do not program the messages to be sent directly to specific receivers or subscribers and instead the published messages can be characterized into classes without knowledge of who the subscribers are. Subscribers can express interest in one or more classes and only receive messages that are of interest without knowledge of who the publishers are.

In some implementations the current subject matter s message exchanges between sessions and user interface sessions can be provided by both a WebSocket and the communication channels e.g. ABAP messaging channels that can be integrated in an application server e.g. SAP NetWeaver Application Server . WebSocket protocol can provide a bi directional communications channel over a Transmission Control Protocol Internet Protocol TCP IP socket. The WebSocket protocol can be designed to be implemented in web browsers and web servers and can be used by any client or server application. The aspects of a WebSocket application programming interface API used by the current subject matter s system can be determined by the World Wide Web Consortium W3C standards organization and the WebSocket Protocol can be governed by the Internet Engineering Task Force IETF standards organization and in particular the RFC 6455 standard.

A successful connection in the ABAP engine can be ensured via a correct authentication and identification of the ABAP Push Channel application. The ABAP engine can refer to a programming core of an ABAP program where the programming core drives various functionalities of the ABAP program. An exemplary ABAP engine is provided by SAP AG Walldorf Germany. After connection setup the ABAP Push Channel can instantiate and execute the addressed ABAP Push Channel Application in the same ABAP Push Channel user session in the present description the terms ABAP Push Channel Application and WebSocket Application are synonymous and are used interchangeably similarly the terms ABAP Push Channel user session and the WebSocket user session are synonymous and are used interchangeably . The WebSocket channel can be used bi directionally for communication between a WebSocket client which can correspond to a browser e.g. an HTML5 browser and an application. The WebSocket integration into the ABAP engine can enable a push channel from an ABAP Push Channel user session to its user agent. Additional publish subscribe messaging can enable the transfer of messages from any user session on any application server in a system to a user agent.

In some implementations the current subject matter can establish ABAP messaging channels for the purposes of exchanging messages between clients and applications. ABAP messaging channels AMC can provide publish subscribe messaging where participants can communicate with one another by sending and receiving messages asynchronously referring to a channel. illustrates an exemplary ABAP messaging channel according to some implementations of the current subject matter. shows an exchange of messages between different user sessions i.e. user session P user session S user session S . . . user session Sn . The user session P can publish a message to a specified channel and the user session Si i 1 2 . . . n can indicate a start stop of receiving of messages by subscribing unsubscribing to the channel. The process can be implemented through use of an ABAP messaging channel framework that can connect various user sessions to channel X as shown in . The user session P can send a message to channel X via ABAP messaging channel framework . The user sessions S S . . . Sn can subscribe and or unsubscribe to from the channel X via the ABAP messaging channel framework where subscriptions can allow user sessions S S . . . Sn to receive messages sent from the user session P via the ABAP messaging channel framework . If the user sessions S S . . . Sn are not subscribed to the channel X then they are unable to receive such messages or otherwise communicate with the user session P .

With the integration of the WebSocket protocol into ABAP and in the ABAP Pusch Channel framework and ABAP messaging channel in the ABAP programming environment it can be possible to push and exchange messages between user sessions and user residing on the same system and user agents on client systems. illustrates an exemplary collaboration model between a WebSocket client and an ABAP user session according to some implementations of the current subject matter. A dedicated AMC channel can be used to provide such collaboration model . As shown in a WebSocket client can request a connection to the WebSocket user session which can include a WebSocket framework and a ABAP Push Channel application . The client can send a connection request to the WebSocket framework and receive a connection acceptance indication. Once the connection between the client and the framework is established the framework calls the application wherein the WebSocket connection is bound to the ABAP messaging channel X. Alternatively a WebSocket session can be bound to an ABAP messaging channel not shown in . In this case messages published on the ABAP messaging channel can be received consumed by the WebSocket session and not the WebSocket connection endpoint User agent. Here the WebSocket session can manipulate the received message and can send it to its WebSocket connection endpoint user agent. Once the binding between the WebSocket connection and the ABAP messaging channel is established an external user session can send messages to the WebSocket client via channel X of the ABAP messaging channel framework . In some implementations a WebSocket client can be any user agent e.g. a browser a client program that supports WebSocket protocol and or any agent and or any combination of agents.

Messaging channels can be appropriately modeled to allow for an exchange of messages between different sessions. The channels can be centrally maintained in the ABAP development workbench and can be realized as development objects with transport capabilities. The ABAP development workbench is a development environment that can be used to develop various business applications where a user can use the ABAP development workbench to develop user s own solutions enhance or extend capabilities of existing solutions etc. The ABAP development workbench includes various tools for development and design of programs screens menus debugging an object repository for storing development objects such as programs dictionary data descriptions of structures within programs documentations etc. . An exemplary ABAP development workbench is provided by SAP AG Walldorf Germany. Each messaging channel can have at least one of the following attributes a channel group identification ID name space a channel ID a channel access scope a channel access right and a message type ID. The name space or channel group ID can be used to build up a container to specify various channels which belong to same area. Further the channel group IDs can be unique in the whole development landscape. The channel ID can be an identifier for a single channel belonging to the same channel group ID. The addressing of messaging channels can use both the channel group ID and the channel ID. The channel access scope can define whether a messaging channel is system specific client specific and or user specific. In system specific same system channel access scope messages can be exchanged within the same system. In client specific channel access scope messages can be exchanged within the same system and client. In user specific channel access scope messages can be exchanged within the same system client and for the same user. When the channel access scope is client specific the exchange of messages between producer and consumer sessions can be limited to sessions residing in the same client. Channel access right can represent access rights for the messaging channels that can be realized via code based authorization which can depend on an assigned access role that can include a producer access role and a consumer access role. For each messaging channel and depending on whether the access role is a consumer access role or a producer access role a white list of ABAP reports function groups classes or alike can be maintained otherwise the access can be rejected. The message type ID can be a specification of message type. A dedicated message type can be assigned to each messaging channel. Only messages of the assigned message type can be transferred over the messaging channel. illustrates an exemplary user interface that contains all of the above attributes whereby the attributes can indicate that the access APIs are type safe.

The application server X can include session A and session B . The session A can access an ABAP push channel and an ABAP messaging channel . The session B can access the ABAP messaging channel . The session A and the session

B may communicate using the messaging channel . The browser can receive notifications from the ABAP push channel which in turn can be received from the ABAP messaging channel via the session A.

The application server Y can include session C . The session C can access an ABAP push channel and the ABAP messaging channel . Browser can receive notifications from the ABAP push channel which in turn can be received from the ABAP messaging channel . The server X and the server Y can communicate via the ABAP messaging channel .

The Dynpro ABAP components and can provide at least one of the following asynchronous message handling a programming model for synchronization points messaging connection session and error handling for ABAP messaging channel and ABAP push channel. An exemplary Dynpro technology provided by SAP AG Walldorf Germany can include a business application development and runtime environments that can contain various programming tools. Additionally for ABAP push channel these components can provide at least one of the following bi directional communication to WebSocket client sessions and protocol specific messaging to WebSocket clients e.g. text binary etc. For the ABAP messaging channel these components can provide at least one of the following a synchronization statement e.g. WAIT UNTIL UP TO SECONDS for receiving of various message types i.e. asynchronous RFC ABAP Messaging Channel messages WebSocket messages a synchronization statement e.g. WAIT UNTIL UP TO SECONDS an asynchronous message handling i.e. stacked context handling and ABAP compiler support of the ABAP messaging channel.

The internet communication framework ICF components and can provide appropriate connectivity. The ABAP push channel applications can be integrated into the ICF and or . The ICF and or can further provide a programming model an API and a framework and a message and troubleshooting infrastructure. For the ABAP push channel these components can provide at least one of the following an ABAP push channel framework for integration of WebSocket and server sent event protocols design time of ABAP push channel applications based on WebSocket protocol a programming model based on WebSocket protocol a message connection session and error handling in the push channel framework a bi directional communication in the WebSocket session documentation reference examples and an implementation of server sent events in push channel framework. For the ABAP messaging channel these components can provide at least one of the following design time of ABAP messaging channel design time of ABAP message types a programming model for point to multipoint messaging between ABAP sessions messaging to WebSocket and server sent event connections implementation of messaging to WebSocket connections error handling debugging documentation and reference examples implementation of messaging to server sent event connections messaging to external servers systems and persistence messages.

ABAP push channel frameworks and can be included in the ABAP push channels and respectively as shown in and can correspond to the sessions and . The frameworks and can provide appropriate security for push channel applications. In particular for push channel applications these frameworks can provide an authentication concept and secure messaging to clients e.g. XSS XSRF virus scan etc. . ABAP messaging channel frameworks and can be included in the messaging channel and can correspond to the sessions A B and C shown in respectively. For the ABAP messaging channel the ABAP push channel framework components and can provide an authorization concept and a security concept for messaging inside a system and different sessions as well as messaging between different systems and their sessions.

In some implementations the current subject matter can be configured to be implemented in a system as shown in . The system can include a processor a memory a storage device and an input output device . Each of the components and can be interconnected using a system bus . The processor can be configured to process instructions for execution within the system . In some implementations the processor can be a single threaded processor. In alternate implementations the processor can be a multi threaded processor. The processor can be further configured to process instructions stored in the memory or on the storage device including receiving or sending information through the input output device . The memory can store information within the system . In some implementations the memory can be a computer readable medium. In alternate implementations the memory can be a volatile memory unit. In yet some implementations the memory can be a non volatile memory unit. The storage device can be capable of providing mass storage for the system . In some implementations the storage device can be a computer readable medium. In alternate implementations the storage device can be a floppy disk device a hard disk device an optical disk device a tape device non volatile solid state memory or any other type of storage device. The input output device can be configured to provide input output operations for the system . In some implementations the input output device can include a keyboard and or pointing device. In alternate implementations the input output device can include a display unit for displaying graphical user interfaces.

In some implementations the current subject matter can include one or more of the following optional features. The first push channel and the second push channel can be advanced business application programming push channels. The first messaging channel and the second messaging channel can be advanced business application programming messaging channels. The exchanged messages can include a connection request from at least one of the first client and the second client. Each messaging channel can include at least one attribute containing at least one of the following a channel group identification a channel identification a channel access scope a channel access right and a message type identification. The channel group identification can identify channels that are grouped together. The channel identification can be an identifier for a channel belonging to the channel group. The channel access scope can define whether a channel is cross client or client specific. The channel access right can represent access rights for the channels. The message type identification can specify a message type assigned to a channel.

The first and second clients can be browsers. The first and second push channels can implement a WebSocket protocol to establish a bi directional communication between the first and second clients and first and second application servers respectively.

In some implementations the exchanging of messages can include at least one of the following an exchanging of messages during an ABAP push channel communication between an ABAP push channel client and a server e.g. based on WebSocket Server Sent event an exchanging of messages during an ABAP messaging channel communication between sessions residing in a system e.g. where the system can include several servers and or an exchanging of messages during a communication between an ABAP push channel client and an ABAP messaging channel session by connecting ABAP messaging channel to ABAP push channel client where an ABAP messaging channel session can exchange send and or receive messages with an ABAP push channel client .

The systems and methods disclosed herein can be embodied in various forms including for example a data processor such as a computer that also includes a database digital electronic circuitry firmware software or in combinations of them. Moreover the above noted features and other aspects and principles of the present disclosed implementations can be implemented in various environments. Such environments and related applications can be specially constructed for performing the various processes and operations according to the disclosed implementations or they can include a general purpose computer or computing platform selectively activated or reconfigured by code to provide the necessary functionality. The processes disclosed herein are not inherently related to any particular computer network architecture environment or other apparatus and can be implemented by a suitable combination of hardware software and or firmware. For example various general purpose machines can be used with programs written in accordance with teachings of the disclosed implementations or it can be more convenient to construct a specialized apparatus or system to perform the required methods and techniques.

The systems and methods disclosed herein can be implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Although ordinal numbers such as first second and the like can in some situations relate to an order as used in this document ordinal numbers do not necessarily imply an order. For example ordinal numbers can be merely used to distinguish one item from another. For example to distinguish a first event from a second event but need not imply any chronological ordering or a fixed reference system such that a first event in one paragraph of the description can be different from a first event in another paragraph of the description .

The foregoing description is intended to illustrate but not to limit the scope of the invention which is defined by the scope of the appended claims. Other implementations are within the scope of the following claims.

These computer programs which can also be referred to programs software software applications applications components or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the term machine readable medium refers to any computer program product apparatus and or device such as for example magnetic discs optical disks memory and Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor. The machine readable medium can store such machine instructions non transitorily such as for example as would a non transient solid state memory or a magnetic hard drive or any equivalent storage medium. The machine readable medium can alternatively or additionally store such machine instructions in a transient manner such as for example as would a processor cache or other random access memory associated with one or more physical processor cores.

To provide for interaction with a user the subject matter described herein can be implemented on a computer having a display device such as for example a cathode ray tube CRT or a liquid crystal display LCD monitor for displaying information to the user and a keyboard and a pointing device such as for example a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well. For example feedback provided to the user can be any form of sensory feedback such as for example visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including but not limited to acoustic speech or tactile input.

The subject matter described herein can be implemented in a computing system that includes a back end component such as for example one or more data servers or that includes a middleware component such as for example one or more application servers or that includes a front end component such as for example one or more client computers having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described herein or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication such as for example a communication network. Examples of communication networks include but are not limited to a local area network LAN a wide area network WAN and the Internet.

The computing system can include clients and servers. A client and server are generally but not exclusively remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

The implementations set forth in the foregoing description do not represent all implementations consistent with the subject matter described herein. Instead they are merely some examples consistent with aspects related to the described subject matter. Although a few variations have been described in detail above other modifications or additions are possible. In particular further features and or variations can be provided in addition to those set forth herein. For example the implementations described above can be directed to various combinations and sub combinations of the disclosed features and or combinations and sub combinations of several further features disclosed above. In addition the logic flows depicted in the accompanying figures and or described herein do not necessarily require the particular order shown or sequential order to achieve desirable results. Other implementations can be within the scope of the following claims.

