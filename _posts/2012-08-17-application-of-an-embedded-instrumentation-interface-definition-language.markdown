---

title: Application of an embedded instrumentation interface definition language
abstract: A system and method provides a managed resource instrumentation application on a network device to instrument a managed network device component. The managed resource instrumentation application includes an application programming interface (API) that is common to two or more management agents that are implemented on the device, the management agents being configured to process network management instructions that are in different respective protocols. The API is common to the management agents, to provide access by the management agents to the managed network device component via the common API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08954998&OS=08954998&RS=08954998
owner: Cisco Technology, Inc.
number: 08954998
owner_city: San Jose
owner_country: US
publication_date: 20120817
---
This application claims the benefit of priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 12 337 528 issuing as U.S. Pat. No. 8 255 932 on Aug. 28 2012 filed Dec. 17 2008 which is incorporated herein by reference in its entirety.

This application relates to computer implemented methods and algorithms and in one specific example to the implementation of a computer language.

Computer languages may be based upon grammars. Grammars may dictate how a computer program is lexically syntactically and semantically analyzed prior to compilation or interpretation. A computer language may be object oriented and may be imperative declarative or have some other characteristics. Using a grammar a computer language may be written to reflect the need of particular users.

In one example embodiment a system and method are illustrated that include defining an interface that is independent of a management interface associated with a management agent. The interface is configured to instrument a network device component. Further an API is generated from the interface. Additionally a binding is created between the management agent and the API to implement the management interface associated with the management agent.

In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of an embodiment of the present invention. It may be evident however to one skilled the art that the present system and method may be practiced without these specific details.

Shown is an Embedded Instrumentation Interface Definition Language EI2D developer who using an EI2D editor generates the managed resource instrumentation application . The managed resource instrumentation application is written using the EI2D language. The EI2D editor is generated by a development platform . The EI2D editor is an Integrated Development Environment IED utilized by the EI2D developer to write and translate compile or interpret an interface into the managed resource instrumentation application . The EI2D editor may include parsing compilation and debugging capabilities associated with an IED. The development platform is a computer system.

In some example embodiments the managed resource instrumentation application and the components included therein is installed in a network device . These components may include an API and or a component skeleton . The XML interface may be translated compiled or interpreted into a managed resource instrumentation application that includes one or both of these components. Further these components may be installed as software firmware or hardware components. The API and the component skeleton may be installed as part of an operating system such as LINUX an Internetwork Operating System IOS or some other suitable operating system. Other layers included in the network device include a kernel subsystem layer a system call interface and a management agent . The management agent is a layer capable of processing network management instructions written in one of the aforementioned protocols. Additional middleware layers may also exist between the management agent and API and the other layers shown herein. Further management agent is capable of transmitting a network device response responsive to the network management instructions. As will be more fully discussed below these various layers may be bound together and may communicate via various interfaces.

In some example embodiments a managed resource may be a physical or logical entity that resides as part of the network device. A physical entity may be a chassis a port or a power supply. A logical entity may be a service entity a network interface or a connection. A physical or logical entity is a feature. A network device may be a router switch bridge or other suitable network device capable of layer 1 2 or 3 analyses. These layers are layers in the Transmission Control Protocol Internet Protocol TCP IP stack model or the Open Systems Interconnection OSI model.

In one example embodiment the EI2D language is utilized in the development of one or more of the API and component skeleton . The API interfaces with the management agent whereas the component skeleton interfaces with a network device component . To interface includes making functions available for calling by another component layer or function. Calling means to retrieve for use. The management agent is an application that processes network management instructions written in a protocol such as a Simple Network Management Protocol SNMP Netconf an Internetwork Operating System Command Line Interface IOS CLI or some other suitable network management protocol. The network device component may be for example a routing engine or other suitable component utilized by the network device to access a managed resource. The component skeleton is an interface of the network device component is that is provided by the managed resource instrumentation application .

In some example embodiments certain principles of development time versus run time may be used in understanding the concept of mapping. Development time mapping may include the association of the management agent interface data with the interface data. The development time mapping data can be used at run time in two or more ways. For example development time mapping can be transformed into compiled code or it can be used in a data driven run time mapper. Referencing as cited above is an example of a data driven run time mapper.

In one example embodiment the network management system may generate and transmit network management instructions to be received by the network device . The network management instructions may be written using the aforementioned SNMP Netconf IOS CLI or some other suitable protocol. The network management instructions requests information relating to features of a network device such as the status of a managed resource. A network device response is transmitted by the network device to be received by the network management system . This network device response may include information related to a managed resource or feature of the network device . As illustrated above a managed resource may include chassis port network interface or power supply information.

In some example embodiments a configuration data definition is shown as is an operational data definition and event report definition . These various definitions may be implemented as a configuration data operational data and an event report . Configuration data may refer to data that determines and guides the behavior of the managed system and may include a set of attributes each attribute representing one particular data item. Operational data may be management information that is not configuration data. Further operational data may refer to data that results from the operation of the managed system such as operational state performance data and utilization data which is data that is in effect determined by the managed system and that results from its behavior. An event report may reference the notification messages that are associated with a particular type of managed resource. Additionally an event report may have an event attribute associated with it.

Some example embodiments may include a type definition that may include a simple type an enumerated type and or a complex type . A type definition defines various data types associated with a managed resource. These data types are more fully shown below but may include an integer string or other suitable primitive data type in the form of simple type an enumerated data type in the form of enumeration type or a structure or object type in the form of complex type . The BNF form for a managed resource and its associated attributes and method are shown below along with some example implementations written in the EI2D language.

In one example embodiment a element referenced above as a managed resource is implemented. This element defined as part of the EI2D library defines a managed resource its relationships with other managed resources its attributes e.g. grouped under and elements its actions e.g. methods and its events The following table provides an example XSD based definition of a managed resource and an example EI2D based language implementation thereof 

As alluded to above in some example embodiments a key is a special attribute or set of attributes used to identify the managed resource. The key may be unique within a scope. For example two different scopes may be defined unique across instances of the same type of managed resource of an instrumentation provider or unique across the instances of the same type of managed resource of an including parent managed resource. In addition the value of a key may not change during the lifetime of the managed resource from the moment the managed resource is created to the moment in which the key is deleted. A key may be in effect read only or read create. The key value may need to be assigned by the manager when an instance of the managed resource is created in instances of the managed resource type that can be created by a manager. In some example embodiments the key value is assigned by the agent.

In some example embodiments a element referenced above as key is defined as part of the EI2D library and includes one or more configuration attributes that specify anon opaque unique ID for a particular managed resource. An asNumber of a Border Gateway Protocol BGP service may be an example of such a unique ID. Some example embodiments may include a default in the form of the scope of the key being a class e.g. a managed resource and its subclasses within a managed system possibly containing multiple instrumentation providers . If however the managed resource is included under another managed resource through an inherited type relationship e.g. is a inheritance or has a inheritance or a parent child relationship the key can be made unique by its parent through setting the scope to the parent. The value of the key attribute is not allowed to change over the lifetime of the object the underlying attribute must hence have a maxAccess of read only or read create. In an example case of the attribute being read only the value of the key is assigned by a management agent upon creation. In an example case where the attribute is read create it is assigned by a management application. The following is the XSD based definition of a key.

In some example embodiments configuration data is data that would be included in the operating system of a network device as a configuration file. Configuration data may refer to data that determines and guides the behavior of the managed system. Configuration data may include a set of attributes each representing one particular data item. Configuration data may be subject to configuration e.g. creation update modification deletion by network administrators or management applications in addition to being subject to retrieval. In some example embodiments configuration data is included in the managed resource definition in one of two ways. First configuration data may be specified inline as a set of configuration attributes. Second configuration data references a configuration data definition that is specified out of line as a configuration data definition either in the same EI2D implementation or in an EI2D library package. In some example embodiments if a configuration data definition is referenced from an EI2D library the configuration data can be extended with new attribute definitions. Extension may include adding to the functionalities of the configuration data definition by incorporating the new attribute functions.

In some example embodiments the element referenced above as configuration data and is defined as part of the EI2D library. The element may group a set of related configuration attributes of a Managed Resource. In some example cases configuration data is provided by a managing application upon creation of a managed resource. Configuration data elements can be defined in the two forms in line under or stand alone under to make its definition usable from more than one definitions. In some example embodiments is defined inline as part of a managed resource and may be anonymous or may be optionally be named. Some attributes under anonymous elements share a common name space e.g. their containing MR name . A namespace is an abstract container providing context of a scope for an element. The inline name can be used to introduce one extra level of namespace with this the name of the attribute is prefixed with the name. The following is the XSD based definition of configuration data and an example EI2D language implementation.

In some example embodiments the operational data definition defines a set of operational data that can be included multiple managed resource definitions and is defined as part of the EI2M library. In one example embodiment an element referenced above as operational data and groups a set of related operational data attributes of a managed resource. Operational data attributes may be inherent or may be owned by the instrumentation provider they reflect internal state and can be read. Operational data can be defined in the two forms in line under or stand alone under to make its definition usable from more than one definition. Further operational data that is defined inline as part of a managed resource may be anonymous or may optionally be named. All attributes under anonymous elements share as name space their containing MR name. The optional inline name can be used to introduce one extra level of name space with this the name of the attribute is prefixed with the name. To be used by multiple Managed Resource definitions is defined as stand alone the Managed Resource definitions is not sufficient for it to be named. The following is the XSD based definition of operational data and an example EI2D language implementation.

In some example embodiments actions are methods that can be invoked on a managed resource whose functionality goes above and beyond what an operational primitive would provide. Actions include a set of input and output parameters. For example the element defined as part of the EI2D library and referenced above as action specifies an arbitrary operation such as debugging or test operations on the managed resource. The following is an XSD based definition of an action.

In some example embodiments a element is defined as part of the EI2D library and corresponds to the reference illustrated above. The element is a property of a managed resource that points to or references one or more associated managed resources. It is used for navigating an association between two or more managed resources. In some example embodiments bidirectional association requires two references declared as inverse of each other one on each end of the associated managed resources. Association between two managed resources can be one to one one to many or many to many. The following is the XSD based definition of a reference.

In some example embodiments the element corresponding to attribute outlined above specifies an attribute property of a managed resource configuration data or operational data. An attribute with the multiplicity of many implies a collection of values e.g. non scalar . A multiplicity of one implies a single value or null value e.g. subject to further restriction by a size constraint . The following is the XSD based definition of an attribute.

In some example embodiments the element referenced above as an assert relates to the element that defines a constraint of its containing and elements. The element referenced above as condition specifies the condition applied to the associated constraint. For example the element is provided to specify the following type of constraint If attribute X is . . . then attribute Y constraint is . . . where the constraint of Y is dependent on X value.

In some example embodiments the element referenced above as condition is also used to specify the condition in the elements. For example if zero or more elements with different appears under its containing elements. The condition is to be evaluated in order like a case statement with the unconditional as default constraint. Further order precedence rules apply such that the operator takes precedence over the not operator which in turn takes precedence over the and operator which takes precedence over the or operator. The following is the XSD based definition of a constraint and a condition along with an example EI2D language implementation.

In some example embodiments a grammar written in BNF for constraint and condition expressions is presented as follows 

In some example embodiments the meaning of constraint and condition elements is expressed as follows. A value is one or more of a value value range or enumeration. As a reference a value specifies the target type or list of types that restrict the targetIsA specification. Further a reference specifies a value of other property used as condition. Default specifies the default value. Property without a default value implies that a value needs to be specified when its entity is being created. Size restricts the multiplicity of the attribute or reference property. In case of an attribute the following additional distinction applies. For an attribute of multiplicity one size 1 means a scalar no null value allowed. Size 0 . . . 1 means a scalar with a null value unspecified allowed. For an attribute of multiplicity many the size indicates size of the corresponding collection i.e. number of distinct values associated with the attribute in examples of a reference the following distinction applies. For a reference of multiplicity one size 1 means a non null valid reference size 0 . . . 1 means a reference that can be null. For a reference of multiplicity many size 0 . . . means a set of references size 10 means a set of exactly 10 references. Strlen specifies the length or length range of a string type. Regex specifies the pattern of a string type. Max access specifies the constrained max access. Is null specifies if the value is null or unspecified.

The following table provides an example of how the size and default constraints affects the behavior of a managed resource during its creation in case of a property with multiplicity of one. Analogous behavior applies in the case of multiplicity many. 

In some example embodiments the element referenced above as event attribute is an attribute of the event report which functions as the information fields of the event report. Its value refers to an attribute of a ManagedResource its configData or its operationalData. Events that can be emitted by instrumentation provider are defined as elements under . Under a special type of event can be defined in addition to a generic . The following is the XSD based definition of an event report.

In some example embodiments an element is illustrated that corresponds to the event attribute . The element is an attribute of the eventReport which functions as the information fields of the event report. The element value refers to an attribute of a ManagedResource the ManagedResource configData or the ManagedResource operationalData. The following is the XSD based definition of an event report 

In some example embodiments a simple type is defined as including the primitive data types outlined in the below table.

Library engine defines an interface that is independent of a management interface associated with a management agent. This library engine may be used in conjunction with the EI2D editor . A management interface is one or more functions of a management agent such as management agent that are available for an external management application to use see e.g. network management system and associated applications and platforms .

Operatively coupled to the library engine is a generator to generate the API from the management interface. An API is a set of declarations of the functions or procedures that is provided to support requests made by a software application.

Operatively coupled to the generator is a function mapping engine to bind the management agent and the API to implement the management interface associated with the management agent.

Operatively coupled to the function mapping engine is a compiler to compile the interface into a component skeleton of a feature of the managed device the feature accessed by the management agent through the API Accessed means to make available. Compile means to the translate the text written in one computer language into another computer language. Here for example an interface written in EI2D may be compiled into a component skeleton written in another computer language such as Java C C or some other suitable programming language. In some example embodiments an interpreter not pictured is used in lieu of the compiler .

Operatively coupled to the compiler is an additional function mapping engine to bind a function of the management agent and a function of the API to create a managed resource instrumentation application.

In some example embodiments the computer system further includes a data model engine that is operatively coupled to the function mapping engine . The data model engine generates an XML data model used in conjunction with the management agent the management agent using for example the Netconf protocol.

Operatively coupled to the data model engine is a data model mapping engine to generate a binding between the XML data model and the API. Operatively coupled to the data model mapping engine is a management agent engine to execute a function of the API to access a managed resource instrumentation application. In some example embodiments the interface is defined using an EI2D language. In some example embodiments the function of the API includes at least one of a retrieval function a modification function a relationship traversal function an action invocation function an event modification function or a meta data function. In some example embodiments the feature includes at least one of operational data configuration data actions relationship data or events. In some example embodiments an information retrieval function is used to retrieve information from a network device component. For example this function is used to retrieve the current value of a packet counter. A modification function is used to modify configuration information. For example configuration information includes a setting for a timeout value. An action invocation function is used to invoke actions not per se related to management data. For example these actions include invoking a self test. An event function is used to communicate events from the network device component. Specifically the network device component calls out to a function to communicate that an event has occurred. A metadata function provides introspection capabilities. Specifically metadata function is used to find out what other functions are supported across the API.

Management agent engine calls an API function compiled from an interface that is independent of a management interface associated with a management agent. Operatively coupled to the management agent engine is an API engine to call a component function using the API function. Operatively coupled to the API engine is a receiver to receive a component function call result based upon the component function call. Operatively coupled to the receiver is a management agent to receive a network management instruction using at least one management agent. Operatively coupled to the management agent is an API calling engine to call the API function using the management agent the API function included in a managed resource instrumentation application. Operatively coupled to the API calling engine is a transmitter to transmit a network device response that includes the component function call result.

Operation is executed to compile the interface into a component skeleton of a feature of the managed device the feature accessed by the management agent through the API. In some example embodiments operation is executed to interpret a feature of the managed device the feature accessed by the management agent through the API. Operation is executed to bind a function of the management agent and a function of the API to create a managed resource instrumentation application. Collectively operations through may be performed for any management interface. Operation is executed to generate an XML data model used in conjunction with the management agent the management agent using the Netconf protocol. Operation is executed to bind the XML data model and the API. Operation is executed to execute a function of the API to access a managed resource instrumentation application. In some example embodiments the interface is defined using an EI2D language. In some example embodiments the function of the API includes at least one of a retrieval function a modification function a relationship traversal function an action invocation function an event modification function or a meta data function. In some example embodiments the feature includes at least one of operational data configuration data actions relationship data or events.

Also shown is an operation that resides upon and is executed by the network device . The model of device instrumentation may be written in the EI2D language and is compiled through executing the operation . The operation may utilize the EI2D schema definition during the course of compilation. Through executing the operation the managed resource instrumentation application is generated that includes the API and the component skeleton . In some example embodiments the EI2D editor is used to generate the managed resource instrumentation application . The operation is executed to link or bind the various layers of the component architecture. Specifically operation when executed maps API to the management agent and various agents included therein e.g. Netconf agent SNMP agent and IOS CLI agent . Further operation when executed maps the component skeleton to the network device component 

Functions may be called from the API by the management agent once mapping occurs. Operation is executed to call the API and associated functions based upon the network management instructions . In some example embodiments operation is executed to call a component function that is part of the network device component . These component functions may include functions specific to the operation of the network device . For example functions related to routing may exist and be called at the network device component . Operation is executed to receive component function call results. Operation is executed to return the function call results to the management agent . Operation is executed to map function call results to the management response where a management response may be an outstanding function call in need of being resolved. Operation is executed to transmit a network device response in the form of network device response .

The example computer system includes a processor e.g. a Central Processing Unit CPU a Graphics Processing Unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a Liquid Crystal Display LCD or a Cathod Ray Tube CRT . The computer system also includes an alpha numeric input device e.g. a keyboard a User Interface UI cursor controller e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device e.g. a transmitter .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions illustrated herein. The instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system with the main memory and the processor also constituting machine readable media.

The instructions may further be transmitted or received over a network via the network interface device using any one of a number of well known transfer protocols e.g. Hyper Text Transfer Protocol HTTP .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that stores the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present method and apparatus or that is capable of storing encoding or carrying data structures utilized by or associated with such a set of instructions. The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

It is to be understood that the above description is intended to be illustrative and not restrictive. Although numerous characteristics and advantages of various embodiments as illustrated herein have been set forth in the foregoing description together with details of the structure and function of various embodiments many other embodiments and changes to details may be apparent to those of skill in the art upon reviewing the above description. The scope of the system and method should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein respectively. Moreover the terms first second and third etc. are used merely as labels and are not intended to impose numerical requirements on their objects.

The Abstract of the Disclosure is provided to comply with 37 C.F.R. 1.72 b requiring an abstract that may allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it may not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Description of Example Embodiments it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment.

