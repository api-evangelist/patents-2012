---

title: Method, device, and system for delaying packets during a network-triggered wake of a computing device
abstract: A method, device, and system for delaying delivery of incoming packets during a network-triggered wake of a host computing device includes receiving one or more packets from a remote computing device over a network. The host computing device holds or buffers incoming packets to delay delivery while one or more components transition from a low-power power-managed state to an operational power-managed state. The host computing device may hold and release the packets after passage of a reference time. Additionally, the host computing device may hold and release, buffer and inject, or buffer and replay the packets upon receiving notification that one or more components has transitioned from a low-power state to an operational state. The delayed packets may be acknowledged to the remote computing device to reduce or minimize the overall time needed to establish a connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09461927&OS=09461927&RS=09461927
owner: Intel Corporation
number: 09461927
owner_city: Santa Clara
owner_country: US
publication_date: 20120331
---
Modern computing devices have become increasingly reliant on network based content and services to provide an enhanced user experience. As a result host computing devices that provide network based content and services need to be available to answer requests received over a network. In order to provide such availability host computing devices are often configured to operate in an always on and always connected manner. However due to raising energy prices and an increasing number of green initiatives many network based content and service providers are utilizing a variety of energy saving power managed states that are typically built into host computing devices such as for example low power sleep or hibernate states.

To increase the availability of network based content and services providers may configure host computing devices to remotely wake up upon receiving one or more specially identified packets subsequently referred to as packets or wake packets over the network from a requesting device. Typically the requesting device expects a reliable connection to be formed with the host computing device shortly after sending a packet to initiate a connection. Unfortunately it often takes some amount of time for one or more components of the host computing device to reach an operational state after receiving an initial packet that triggers a wake up. This is especially true in complex host computing devices having a number of interdependent components. As a result the initial packet is often lost and the requesting computing device is typically required to resend the packet at increasing time intervals which in turn increases the overall time needed to establish a connection.

While the concepts of the present disclosure are susceptible to various modifications and alternative forms specific exemplary embodiments thereof have been shown by way of example in the drawings and will herein be described in detail. It should be understood however that there is no intent to limit the concepts of the present disclosure to the particular forms disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives consistent with the present disclosure and the appended claims.

In the following description numerous specific details such as logic implementations opcodes means to specify operands resource partitioning sharing duplication implementations types and interrelationships of system components and logic partitioning integration choices are set forth in order to provide a more thorough understanding of the present disclosure. It will be appreciated however by one skilled in the art that embodiments of the disclosure may be practiced without such specific details. In other instances control structures gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate functionality without undue experimentation.

References in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Embodiments of the invention may be implemented in hardware firmware software or any combination thereof. Embodiments of the invention implemented in a computer system may include one or more bus based interconnects between components and or one or more point to point interconnects between components. Embodiments of the invention may also be implemented as instructions carried by or stored on a transitory or non transitory machine readable medium which may be read and executed by one or more processors. A machine readable medium may be embodied as any device mechanism or physical structure for storing or transmitting information in a form readable by a machine e.g. a computing device . For example a machine readable medium may be embodied as read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices mini or micro SD cards memory sticks electrical signals and others.

In the drawings specific arrangements or orderings of schematic elements such as those representing devices modules instruction blocks and data elements may be shown for ease of description. However it should be understood by those skilled in the art that the specific ordering or arrangement of the schematic elements in the drawings is not meant to imply that a particular order or sequence of processing or separation of processes is required. Further the inclusion of a schematic element in a drawing is not meant to imply that such element is required in all embodiments or that the features represented by such element may not be included in or combined with other elements in some embodiments.

In general schematic elements used to represent instruction blocks may be implemented using any suitable form of machine readable instruction such as software or firmware applications programs functions modules routines processes procedures plug ins applets widgets code fragments and or others and that each such instruction may be implemented using any suitable programming language library application programming interface API and or other software development tools. For example some embodiments may be implemented using Java C and or other programming languages. Similarly schematic elements used to represent data or information may be implemented using any suitable electronic arrangement or structure such as a register data store table record array index hash map tree list graph file of any file type folder directory database and or others.

Further in the drawings where connecting elements such as solid or dashed lines or arrows are used to illustrate a connection relationship or association between or among two or more other schematic elements the absence of any such connecting elements is not meant to imply that no connection relationship or association can exist. In other words some connections relationships or associations between elements may not be shown in the drawings so as not to obscure the disclosure. In addition for ease of illustration a single connecting element may be used to represent multiple connections relationships or associations between elements. For example where a connecting element represents a communication of signals data or instructions it should be understood by those skilled in the art that such element may represent one or multiple signal paths e.g. a bus as may be needed to effect the communication.

Referring now to a system for delaying incoming packets during a network triggered wake of a computing device in a low power state includes a host computing device a remote computing device and a communications network . The host computing device may receive a packet transmitted by the remote computing device over the communications network to initiate and or maintain a connection. In some embodiments the received packet may trigger initiation of a wake process to transition the host computing device or one or more components of the host computing device from a low power state to an operational power state. In such embodiments the received packet may represent both a wake packet and a packet to initiate and or maintain a connection. During performance of the wake process the host computing device may delay delivery of the packet to a destined component while the host computing device achieves a fully operational power state. For example in some embodiments the host computing device may delay delivery of the received packet to one or more components e.g. firmware hardware software operating systems applications. etc. while the host computing device or the one or more components of the host computing device achieve a fully operational power state. Once an operational power state has been reached by the host computing device and or the one or more components of the host computing device e.g. firmware hardware software operating systems applications services etc. the host computing device may release inject or replay the delayed packet for further processing. In this way the overall time to connect may can reduced and or minimized because the host computing device may not be required to wait for a network stack of the remote computing device to resend the initial packet which otherwise would have been lost. As a result connection errors can be reduced and the reliability and or stability of an incoming connection after a network triggered wake may be improved.

As discussed in more detail below the host computing device may hold and or buffer the packet for a reference delay time before releasing the packet for further processing. Additionally or alternatively in some embodiments the host computing device may buffer and or save the packet until being notified that one or more components of the host computing device has reached a fully operational power state and therefore is available to further process the packet. Upon receiving such a notification the host computing device may replay and or inject the packet for further processing by the one or more available components. It should be understood that in some embodiments the initial packet received from the remote computing device may comprise a packet for initiating a new connection and or maintaining an existing connection with the host computing device and or one or more components e.g. firmware hardware software operating systems applications services etc. of the host computing device . However the received packet may additionally or alternatively trigger execution of a wake process on the host computing device to transition one or more components from a low power state to an operational power state or otherwise ready state.

The host computing device may be embodied as any type of computing device for processing data and communicating with remote devices. For example the host computing device may be embodied as a computing tablet reader a laptop a mobile internet device MID a handheld computer a smart phone a personal digital assistant an electronic book reader or other computing device for storing and processing data and or communicating storing maintaining and transferring data over a network. In the illustrative embodiment of the host computing device includes a processor an I O subsystem a memory a data storage communication circuitry and one or more peripheral devices . In some embodiments several of the foregoing components may be incorporated on a motherboard of the host computing device while other components may be communicatively coupled to the motherboard via for example a peripheral port. Furthermore it should be appreciated that the host computing device may include other components sub components and devices commonly found in a computing device which are not illustrated in for clarity of the description.

The host computing device or one or more components of the host computing device may operate in a number of different power managed states. For example one or more components of the host computing device may operate in a sleep state e.g. a low power state . In such embodiments components operating in a low power state are typically inaccessible e.g. unavailable to process data from a remote computing device or from other components of the host computing device . Additionally or alternatively in other embodiments one or more components of the host computing device may operate in a powered on and fully operational power state. Components operating in this power state are typically accessible e.g. available to process data from the remote computing device or from other components of the host computing device . It should be understood that although the host computing device is described as including low power and operational power states in the illustrative embodiment the host computing device may include other power managed states. For example the host computing device may additionally or alternatively include any number of other power managed states e.g. standby hibernate power off etc. . Additionally in some embodiments the host computing device and or the one or more components of the host computing device may operate in any number of ready states e.g. available unavailable limited availability etc. .

The processor of the host computing device may be embodied as any type of processor capable of executing software firmware such as a microprocessor digital signal processor microcontroller or the like. The processor is illustratively embodied as a single core processor having a processor core . However in other embodiments the processor may be embodied as a multi core processor having multiple processor cores . Additionally the host computing device may include additional processors having one or more processor cores .

The I O subsystem of the host computing device may be embodied as circuitry and or components to facilitate input output operations with the processor and or other components of the host computing device . In some embodiments the I O subsystem may be embodied as a memory controller hub MCH or northbridge an input output controller hub ICH or southbridge and a firmware device. In such embodiments the firmware device of the I O subsystem may be embodied as a memory device for storing Basic Input Output System BIOS data and or instructions and or other information e.g. a BIOS driver used during booting of the host computing device . However in other embodiments I O subsystems having other configurations may be used. For example in some embodiments the I O subsystem may be embodied as a platform controller hub PCH . In such embodiments the memory controller hub MCH may be incorporated in or otherwise associated with the processor and the processor may communicate directly with the memory as shown by the hashed line in . Additionally in other embodiments the I O subsystem may form a portion of a system on a chip SoC and be incorporated along with the processor and other components of the host computing device on a single integrated circuit chip.

In some embodiments the I O subsystem may include a Trusted Execution Environment TEE engine which may be embodied as an embedded microprocessor such as a security co processor that operates independently of the processor to provide a secure and isolated environment that cannot be accessed by the processor or other components of the host computing device . The TEE engine may in some embodiments function in an operational power state while the processor and other components of the host computing device are in a low power state e.g. sleep hibernate etc. . In such embodiments the TEE engine may facilitate receiving incoming packets triggering initiation of a wake procedure for the processor or other components of the host computing device in response to receiving the one or more incoming packets and or delaying and then releasing or replaying the packets while the host computing device or one or more components thereof are waking up from the low power state and transitioning to an operational power state. In doing so it appears to the remote computing device that the host computing device or one or more components or services of the host computing device is fully available and operational even though the host computing device is operating in a low power state.

The processor is communicatively coupled to the I O subsystem via a number of signal paths. These signal paths and other signal paths illustrated in may be embodied as any type of signal paths capable of facilitating communication between the components of the host computing device . For example the signal paths may be embodied as any number of wires cables light guides printed circuit board traces via bus intervening devices point to point interconnects and or the like.

The memory of the host computing device may be embodied as or otherwise include one or more memory devices or data storage locations including for example dynamic random access memory devices DRAM synchronous dynamic random access memory devices SDRAM double data rate synchronous dynamic random access memory device DDR SDRAM mask read only memory ROM devices erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM devices flash memory devices and or other volatile and or non volatile memory devices. The memory is communicatively coupled to the I O subsystem via a number of signal paths. Although only a single memory device is illustrated in the host computing device may include additional memory devices in other embodiments. Various data and software may be stored in the memory device . For example one or more operating systems OS applications programs libraries and drivers that make up the software stack executed by the processor may reside in memory during execution.

The data storage may be embodied as any type of device or devices configured for the short term or long term storage of data such as for example memory devices and circuits memory cards hard disk drives solid state drives or other data storage devices. In some embodiments the data storage may be used to temporarily store one or more incoming packets and or information associated with the one or more incoming packets while the host computing device or one or more components thereof are transitioning from a low power state to an operational power state after a network triggered wake. Additionally or alternatively the data storage may be used to temporarily store a current power state for one or more components of the host computing device .

The communication circuitry of the host computing device may be embodied as any number of devices and circuitry for enabling communications between the host computing device and the remote computing device over the network . For example the communication circuitry may be embodied as a network interface controller NIC in some embodiments. The network may be embodied as any number of various wired and or wireless communication networks. For example the network may be embodied as or otherwise include a local area network LAN a wide area network WAN or a publicly accessible global network such as the Internet. Additionally the network may include any number of additional devices to facilitate communication between the host computing device and the remote computing device . The host computing device and the remote computing device may use any suitable communication protocol to communicate with each other over the network depending on for example the particular type of network s .

The peripheral devices of the host computing device may include any number of additional input output devices interface devices and or other peripheral devices. For example the peripheral devices may include a display for displaying content to a user a keyboard mouse or other input output peripheral device. The peripheral devices are communicatively coupled to the I O subsystem via a number of signal paths thereby allowing the I O subsystem and or processor to receive inputs from and send outputs to the peripheral devices .

The remote computing device may be embodied as any type of computing device capable of performing the functions described herein. As such the remote computing device may include various hardware and software components e.g. a processor memory and communication circuitry typically found in a computing device for communicating storing maintaining and transferring data over a network. The illustrative remote computing device transmits a packet to the host computing device over the network to remotely trigger the initiation of a wake procedure by one or more components of the host computing device. In some embodiments the packet comprises a specially formatted network message packet e.g. a magic packet which is sent to the host computing device to trigger one or more components of the host computing device to turn on or wake up e.g. transition from a low power state to an operational power state . Additionally or alternatively the remote computing device may transmit a wake packet of a specific type e.g. a TCP SYN packet to the host computing device to trigger one or more components to wake up. It should be understood that the remote computing device may transmit other types of packets capable of waking up one or more components of the host computing device . For example the remote computing device may transmit wake packets targeting a specific port or range of ports being monitored by the host computing device wake packets comprising specific patterns identifiable by the host computing device and or any other packet or message suitable for use in triggering the host computing device to transition from a low power state to an operational power state.

Referring now to one embodiment of an environment of the host computing device includes a communication module a packet filter wake trigger module a power state determination module a packet delay module a timer module a packet capture packet buffer module and a packet injection packet replay module . It should be understood that the illustrative environment may not always necessarily include all of the modules illustrated in . Rather in some embodiments the illustrative environment may instead include some portion or combination of the modules illustrated in . For example in one embodiment the illustrative environment may include the communication module the packet filter wake trigger module the power state determination module the packet delay module and the timer module . In other embodiments the illustrative environment may instead include the communication module the packet filter wake trigger module the power state determination module the packet capture packet buffer module and the packet injection packet replay module . Additionally it should be understood that the environment and or any of the modules included therein may be implemented in hardware firmware software or any combination thereof.

As discussed above in some embodiments the host computing device may receive a packet from the remote computing device over the network . Of course it should be understood that although only one incoming packet is described in the illustrative embodiment below any number of incoming packets may be sent by the remote computing device and received by the host computing device . Upon receiving the incoming packet a wake process may be triggered on the host computing device to transition one or more components from a low power state to an operational power state. In such embodiments the host computing device may delay delivery of the packet to one or more components e.g. firmware hardware software operating systems applications services etc. of the host computing device while achieving a fully operational power state. To do so the communication module may facilitate communications with the remote computing device over the network . Additionally the communication module of the host computing device and the remote computing device may use any suitable communication protocol to communicate with each other over the network depending on for example the particular type of network s .

The communication module may be communicatively coupled with the packet filter wake trigger module to facilitate triggering one or more components of the host computing device to transition from a low power operating state to an operational e.g. powered on functional available ready etc. power state. In use the packet filter wake trigger module may receive the incoming packet from the communication module . Upon receipt of the packet the packet filter wake trigger module may parse or otherwise examine the contents of the packet to determine whether to trigger execution of a wake procedure for one or more components of the host computing device . To do so the packet filter wake trigger module may in some embodiments determine that the incoming packet is of a specific type e.g. a TCP SYN packet being monitored or destined to a specific port e.g. TCP TCP etc. on the host computing device . Additionally or alternatively the packet filter wake trigger module may also determine whether the incoming packet or the contents thereof matches one or more filters. In such embodiments the filters comprise one or more configurable rules which define one or more patterns bit masks offsets destination ports packet types and or any other information indicative of a packet that should trigger a wake. Upon determining that the incoming packet matches one or more of the filters and therefore embodies a wake packet the packet filter wake trigger module may trigger and or initiate a wake up process on the host computing device .

As discussed above in some embodiments the host computing device may hold the received packet that triggered the wake process for a reference delay time before releasing the packet for further processing. To facilitate delaying the packet the packet filter wake trigger module may be communicatively coupled with the packet delay module . The packet delay module may delay delivery of an incoming packet to other components of the host computing device for a reference delay time. In such embodiments after receiving the incoming packet from the packet filter wake trigger module the packet delay module may hold and or buffer the packet for a reference amount of time. For example the packet delay module may hold the packet for an amount of time configured to be less than the transmission timeout for the remote computing device . In response to delaying the packet for the configured amount of time the packet delay module may release the packet for further processing by one or more other components of the host computing device .

The packet delay module may be communicatively coupled with the timer module to facilitate holding and or buffering the incoming packet for the reference amount of time. The timer module may keep track of an amount of time that has passed since the communication module received the incoming packet from the remote computing device . To do so the timer module may utilize any number of timers clock signals counters algorithms or any other component of the host computing device suitable for determining the passage of time. In some embodiments the timer module may determine an amount of time that has passed e.g. counting up since the occurrence of a particular event such as for example the receipt of the packet from the remote computing device . In other embodiments the timer module may determine an amount of time remaining e.g. counting down until the occurrence of an event such as for example the expiration of a reference delay timer.

In some embodiments the packet delay module may also be communicatively coupled with the power state determination module to facilitate delaying and releasing the packet. In such embodiments the packet delay module may delay delivery of an incoming packet to other components of the host computing device until notification has been received from the power state determination module . In use the power state determination module monitors the power state of one or more components of the host computing device . In doing so the power state determination module may determine that one or more components of the host computing device has successfully transitioned from a low power state e.g. a sleep state to an operational power state e.g. a state available to process network requests . Of course it should be understood that the power state determination module may also determine that one or more components of the host computing device has transitioned from an operational power state to a low power state. To do so the power state determination module may monitor one or more system firmware system hardware and or software components of the host computing device for transitions in power states. For example the power state determination module may monitor one or more of Basic Input Output System BIOS information Advanced Configuration and Power Interface ACPI information or any component suitable for determining power states of the host computing device . In response to determining that one or more components has successfully transitioned power states e.g. from a low power state to an operational power state the power state determination module may generate a message indicative of such a transition. For example the power state determination module may transmit a message signal or otherwise to notify the packet delay module that one or more components of the host computing device has successfully transitioned to an operational power state and as a result is available to process the delayed packet. It should be understood however that in some embodiments the power state determination module may also monitor any number of ready states e.g. available unavailable limited availability etc. of the host computing device and or the one or more components of the host computing device e.g. firmware hardware software operating systems applications services etc. .

In embodiments wherein notification is received from the power state determination module that one or more components of the host computing device is available the packet delay module may release the delayed packed upon receipt of that notification. Additionally or alternatively it should be understood that in other embodiments the packet delay module may automatically release a delayed packet in the event that a notification has not been received from the power state determination module within a reference amount of time. In such embodiments the packet delay module may automatically release the delayed packet if a notification has not been received from the power state determination module within an amount of time configured to be less than the transmission timeout for the remote computing device . For example in order to beat a 21 second transmission timeout associated with an operating system OS of the remote computing device the packet delay module may automatically release the delayed packet if a notification from the power state determination module has not been received within 18 seconds. Of course it should be understood that any suitable reference delay time or transmission timeout may instead be used based on for example the configuration of the host computing device and or the remote computing device .

Additionally or alternatively the host computing device in some embodiments may buffer an incoming packet to delay processing until one or more components of the host computing device has transitioned to an operational power state and therefore is available to process network requests. It should be understood that although only one incoming packet is described in the illustrative embodiment below any number of incoming packets may be buffered. Once one or more components of the host computing device is available to process network requests the host computing device may inject and or replay the buffered packet to the available component s . It should be appreciated that in such embodiments the time to connect may be reduced and or minimized since the host computing device is not required to wait for the remote computing device to resend the packet which otherwise would have been lost during execution of a wake process.

In embodiments wherein the host computing device buffers and then replays and or injects the received packet e.g. incoming packet the communication module and the packet filter wake trigger module may function in a manner similar to that described above. However to facilitate buffering the received packet the packet filter wake trigger module may additionally or alternatively be communicatively coupled with the packet capture packet buffer module . In such embodiments the packet capture packet buffer module may receive the incoming packet from the packet filter wake trigger module and thereafter buffer or otherwise store such packet. To do so the packet capture packet buffer module may buffer or otherwise store the incoming packet in the data storage or the memory of the host computing device . Of course it should be understood that the packet capture packet buffer module may buffer and or store the incoming packet in any suitable data storage and or memory device e.g. volatile and or non volatile memory devices of the host computing device including data storage and or memory embedded within other components of the host computing device . For example the packet capture packet buffer module may buffer and or store the incoming packet within a data storage and or memory device embedded within the communication circuitry or within the Trusted Execution Environment engine .

To facilitate injecting or replaying the buffered and or stored received packets the packet injection packet replay module may be communicatively coupled with the packet capture packet buffer module and the power state determination module . Similar to the packet delay module the packet injection packet replay module may receive notification e.g. a message signal etc. from the power state determination module that one or more components of the host computing device has successfully transitioned from a low power state e.g. a sleep state to an operational power state e.g. a state available to process network requests . Upon receiving notification from the power state determination module that one or more components of the host computing device is available the packet injection packet replay module may receive or otherwise obtain the buffered and or stored packet from the packet capture packet buffer module . Subsequently the packet injection packet replay module may inject and or replay the packet to the one or more available components of the host computing device for further processing.

Referring now to a method for delaying and releasing an incoming packet that may be executed by the host computing device during a network triggered wake begins with block . In block the host computing device determines whether a new packet has been received from the remote computing device over the network . The host computing device may determine that a new packet has been received from the remote computing device over the network based on communications received by the communication circuitry and or the communication module as discussed above. As discussed above the new packet received from the remote computing device may correspond to a packet for initiating a new connection and or maintaining an existing connection with the host computing device . If the host computing device determines that a new packet has been received from the remote computing device over the network the method advances to block .

In block the host computing device determines whether the newly received packet from the remote computing device corresponds to a wake packet. To determine whether the newly received packet corresponds to a wake packet the host computing device may determine that the packet is of a recognized type targets a specific port or range of ports on the host computing device and or the contents of the packet match a specific pattern. As discussed above the host computing device may utilize one or more rule based filters to facilitate determining whether the newly received packet or the contents thereof are indicative of a wake packet. In such embodiments the newly received packet may represent both a wake packet and a packet to initiate and or maintain a connection. In response to determining that the newly received packet corresponds to a recognizable wake packet the method advances to block . If however the host computing device determines that the newly received packet does not correspond to a recognizable wake packet the method loops back to block to wait for the receipt of a new packet.

In block the host computing device initiates execution of a wake up process. As discussed above during execution of the wake up process one or more components of the host computing device may transition from a low power state e.g. a sleep power state a hibernate power state etc. to an operational power state e.g. a powered on a ready and or a fully operational power state . Upon initiating execution of the wake up process for one or more components of the host computing device the method advances to block .

In block the host computing device delays delivery of the packet while one or more components achieves a fully operational power state or a ready state. To do so the host computing device may hold the packet for a time equal to a configurable reference delay time. After delaying delivery of the packet for the configurable reference delay time the method advances to block in which the host computing device releases the delayed packet to one or more components for further processing.

Additionally or alternatively to facilitate delaying delivery of the packet in block the host computing device in some embodiments may utilize any number of timers clock signals counters algorithms or any other component of the host computing device suitable for determining the passage of time. In such embodiments the method advances to block wherein the host computing device starts a timer upon receiving the packet from the remote computing device . In doing so the host computing device determines how much time has passed since the packet was received and the method advances to block .

In block the host computing device may determine that the amount of time passed is equal to the configurable reference delay time. In response to determining that the amount of time passed matches the amount of time configured for the reference delay time the method advances to block in which the host computing device releases the delayed packet for further processing. It should be appreciated that in such embodiments the overall time to connect may be reduced and or minimized as the host computing device is not required to wait for the remote computing device to resend the initial packet which otherwise would have been lost.

Referring now to a simplified flow diagram of at least one embodiment of a method for delaying and releasing an incoming packet that may be executed by the host computing device during a network triggered wake is shown. In operation a network interface controller NIC of the host computing device may receive a incoming packet from the remote computing device . In some embodiments the NIC may also receive incoming packets which may correspond to retry packets attempted by the remote computing device . In illustrative embodiment the incoming packets may correspond to a specific type of packet e.g. a TCP SYN packet for initiating a new connection and or maintaining an existing connection.

In some embodiments receipt of the initial incoming packet may trigger a wake up process to be initiated for one or more components of the host computing device . Thereafter the NIC may forward the packet to the packet delay module in data transmission . Subsequently the packet delay module may hold and or buffer the packet for a reference amount of time . For example in some embodiments the packet delay module may hold the packet for an amount of time configured to be less than the transmission timeout for the remote computing device . Additionally or alternatively the packet delay module may hold the packet until a notification is received indicating that one or more components of the host computing device is ready to process the packet further.

In embodiments wherein the packet is held for a reference amount of time the packet delay module releases the delayed packet for further processing by one or more components of the host computing device in data transmission . For example in some embodiments the packet delay module may release the delayed packet to a network application executing on the host computing device in data flow . It should be understood however that the packet delay module may instead release the delayed packet to other destinations and or components executing on the host computing device . For example in some embodiments the packet delay module may release the delayed packet to an OS a driver and or any suitable component or application executing on the host computing device .

Referring now to a method for buffering and injecting and or replaying an incoming packet to introduce delay that may be executed by the host computing device during a network triggered wake begins with block . In block the host computing device determines whether a new packet has been received from the remote computing device over the network . The host computing device may determine that a new packet has been received from the remote computing device over the network based on communications received by the communication circuitry and or the communication module as discussed above. If the host computing device determines that a new packet has been received from the remote computing device over the network the method advances to block .

In block the host computing device determines whether the newly received packet from the remote computing device corresponds to a wake packet. To determine whether the newly received packet corresponds to a wake packet the host computing device may determine that the packet is of a recognized type targets a specific port or range of ports on the host computing device and or the contents of the packet match a specific pattern. As discussed above the host computing device may utilize one or more rule based filters to facilitate determining whether the newly received packet or the contents thereof are indicative of a wake packet. In response to determining that the newly received packet corresponds to a recognizable wake packet the method advances to block . In such embodiments the newly received packet may represent both a wake packet and a packet to initiate and or maintain a connection. If however the host computing device determines that the newly received packet does not correspond to a recognizable wake packet the method loops back to block to wait for a new packet to be received.

In block the host computing device initiates execution of a wake up process. As discussed above during execution of the wake up process one or more components of the host computing device transitions from a low power state e.g. a sleep power state a hibernate power state etc. to an operational power state e.g. a powered on a ready and or fully operational power state . Upon initiating execution of the wake up process for one or more components of the host computing device the method advances to block .

In block the host computing device delays delivery of the packet while one or more components achieves a fully operational power state. To do so the host computing device may hold or otherwise delay delivery of the packet until being notified that one or more components are available to process the delayed packet. In doing so the host computing device may improve connection reliability and responsiveness with the remote computing device during all or a portion of the execution of the wake up process. In response to holding the packet the method advances to block .

In block the host computing device determines whether one or more components have successfully transitioned from a low power state e.g. a sleep state to an operational power state e.g. a state ready and or available to process network requests . As discussed above the host computing device may monitor one or more system firmware system hardware and or software components e.g. BIOS ACPI etc. to detect transitions in power states. For example in some embodiments the host computing device may monitor ACPI information for one or more components to detect power state transitions. It should be understood that the host computing device may monitor other power managed states in addition to the sleep and operational e.g. powered on power states. For example the host computing device may additionally or alternatively monitor components for transitions to from a hibernate power state a powered off or otherwise powered down power state or any other power state capable of being monitored by the host computing device . It should be understood however that in some embodiments the host computing device may also monitor any number of ready states e.g. available unavailable limited availability etc. of one or more components e.g. firmware hardware software operating systems applications services etc. .

Referring back to block in embodiments wherein the host computing device determines that one or more components has transitioned from a low power state to an operational power state the host computing device generates a notification e.g. a message signal etc. indicating which components are available to process the delayed packet further. In doing so the method advances to block in which the host computing device injects and or replays the delayed packet to the one or more available components. If however the host computing device determines that no components are available to further process the delayed packet the method loops back to block to wait for one or more components to transition from a low power state to an operational power state.

Referring back to block the host computing device may buffer and or store an incoming packet to facilitate delaying delivery of the packet to one or more components. In doing so the host computing device may improve connection reliability and responsiveness with the remote computing device during all or a portion of the execution of the wake up process. For example in block the host computing device may buffer or otherwise store the incoming packet in the data storage or the memory of the host computing device . As discussed above it should be understood that host computing device may buffer and or store the incoming packet in any suitable data storage and or memory device e.g. volatile and or non volatile memory devices of the host computing device including data storage and or memory embedded within other components of the host computing device . For example the host computing device may buffer and or store the incoming packet within a data storage and or memory device embedded within the communication circuitry or within the Trusted Execution Environment engine . Upon buffering and or storing the incoming packet in the data storage or the memory the method advances to block .

In block the host computing device may reset or otherwise reinitialize the communication circuitry after initiating execution of a wake up process. In some embodiments the reset may comprise a hard reset or a soft reset of the communication circuitry . After resetting or otherwise reinitializing the communication circuitry the method advances to block .

In block the host computing device restores the packet buffered or otherwise stored in the data storage or the memory to the communication circuitry . Once the buffered packet has been restored to the communication circuitry the method advances to blocks and as described above.

Referring now to a simplified flow diagram of at least one embodiment of a method for buffering and injecting and or replaying an incoming packet to introduce delay that may be executed by the host computing device during a network triggered wake is shown. In doing so the host computing device may improve connection reliability and responsiveness with the remote computing device during all or a portion of the execution of a wake up process. In operation a network interface controller NIC of the host computing device may receive a incoming packet from the remote computing device . In some embodiments the NIC may also receive additional incoming packets which may correspond to retried packet attempts by the remote computing device . In the illustrative embodiment the incoming packets may correspond to a specific type of packet e.g. a SYN packet for initiating a new connection and or maintaining an existing connection.

As discussed above receipt of the initial packet may trigger a wake process to be initiated for one or more components of the host computing device in data flow . Thereafter the NIC may buffer the initial packet in the data storage and or the memory of the host computing device in data flow . As discussed above it should be understood that the NIC may buffer the initial packet and or any one of the retry packets in any suitable data storage and or memory device e.g. volatile and or non volatile memory devices of the host computing device including those embedded within other components. For example the NIC may temporarily buffer the initial packet within a data storage and or memory device embedded within the communication circuitry or within the Trusted Execution Environment engine .

After buffering the initial packet in the data storage and or the memory an operating system OS executing on the host computing device may send one or more messages and or commands to a NIC driver associated with the NIC in data transmission . In some embodiments the NIC driver may store or otherwise save the temporarily buffered packet in the data storage and or the memory . It should be understood that the same data storage and or the memory used to temporarily buffer the initial packet may also be used by the NIC driver to save the initial packet .

In response to saving the initial packet in the data storage and or the memory the NIC driver may send a command or otherwise instruct the NIC to reset or otherwise reinitialized in data communication . As discussed above the NIC may perform either hard reset or a soft reset. After being reset or otherwise reinitialized the NIC driver may restore the initial packet stored in the data storage and or the memory .

After restoring the initial packet from the data storage and or the memory the NIC driver may wait for notification that the OS is ready and available to receive network traffic. As such once the OS is ready to further process the initial packet the OS notifies the NIC driver that it is ready to receive network traffic in data transmission .

In some embodiments upon receiving notification that the OS is ready for network traffic the NIC driver may inject and or replay the initial packet to a network filter for further processing in data transmission . Although the NIC driver injects and or replays the initial packet to the network filter it should be understood that the NIC driver may instead inject and or replay the initial packet to the OS and or other components of the host computing device . Additionally or alternatively although the NIC driver injects and or replays the initial packet in the illustrative embodiment it should be appreciated that one or more other components e.g. firmware hardware software operating systems applications services etc. of the host computing device may inject and or replay the initial packet . For example in some embodiments one or more firmware and or hardware components of the NIC a network filter of an OS stack a component of the OS and or any suitable component in the network path may inject or replay the initial packet .

After the NIC driver injects and or replays the initial packet the NIC may generate and transmit an acknowledgement to the remote computing device at data transmission . In some embodiments the acknowledgment transmitted to the remote computing device comprises a message acknowledging receipt of the initial packet . It should be appreciated that in such embodiments the overall time to connect may be reduced and or minimized since the host computing device is not required to wait for the remote computing device to resend the initial packet which otherwise would have been lost during execution of the wake process.

Referring now to a method for enabling and disabling the delay of an incoming packet that may be executed by the host computing device begins with block . In block the host computing device monitors the power state of one or more components. In doing so the host computing device may determine that one or more components has successfully transitioned from one power state to another power state. For example the host computing device may determine that one or more components has transitioned from a low power state e.g. a sleep state hibernate state powered off state etc. to an operational power state e.g. a state ready and or available to process network requests . Of course the host computing device may also determine that one or more components has transitioned from an operational power state to a low power state or any other power managed state suitable for use with the host computing device . To do so the host computing device may monitor one or more device firmware device hardware and or software components for transitions in power states. For example the host computing device may monitor Basic Input Output System BIOS information Advanced Configuration and Power Interface ACPI information or any component suitable for determining power states of the host computing device . Additionally or alternatively in some embodiments the host computing device may also monitor any number of ready states e.g. available unavailable limited availability etc. of one or more components e.g. firmware hardware software operating systems applications services etc. .

To facilitate determining whether the power state of one or more components has transitioned the host computing device may in some embodiments store data indicative of a previous power state for each of the one or more components in the data storage and or the memory . It should be understood that the data indicative of the previous power state for each of the components may be stored in a database a table or any other format suitable for storing a power state for one or more components of the host computing device . In such embodiments the host computing device may compare the previous power state with a current power state for each of the one or more components. If the previous power state of a component is different than the current power state the host computing device may determine that the power state of that component has transitioned.

In some embodiments the host computing device may continuously monitor the one or more firmware hardware and or software components for transitions in power states and or operational states. In other embodiments the host computing device may monitor the one or more firmware hardware and or software components for transitions in power states and or operational states at configurable predefined time intervals. Additionally or alternatively the host computing device may receive a notification from one or more of the firmware hardware and or software components that a power state and or an operational state transition has occurred. Of course it should be understood however that the host computing device may monitor for transitions in power state and or operational state at any suitable interval.

Returning back to block if the host computing device determines that one or more components has transitioned power states and or operational states the method advances to block . However if the host computing device at block determines that no components of the host computing device have transitioned power states and or operational states the method loops back to block to continue monitoring for power state and or operational state transitions. It should be understood that in some embodiments the power state and or operational state of specific components may be monitored by the host computing device . For example the host computing device may determine that the power state of a first component has transitioned from a low power state to an operational power state however the power state of a second component which may be required for further processing of an incoming packet of a particular type has not transitioned power states. As a result the host computing device may continue to monitor for a power state transition by the second component.

In block after determining that one or more components have transitioned power states and or operational states the host computing device determines whether the one or more components have transitioned to a low power state e.g. a sleep state a hibernate state a powered off state etc. . To do so the host computing device may obtain current power state and or operational state information for the one or more components from the one or more firmware hardware and or software components of the host computing device . If at block the host computing device determines that the one or more components have not transitioned to a low power state the method advances to block .

In block the host computing device determines whether the one or more components have instead transitioned to an operational power state e.g. a state available to process network requests . As discussed above the host computing device may obtain current power state and or operational state information for the one or more components from the one or more firmware hardware and or software components of the host computing device . If at block the host computing device determines that the one or more components have instead transitioned to an operational power state the method advances to block . If however the host computing device determines that the one or more components have not transitioned to an operational power state the method loops back to block to continue monitoring for power state transitions.

In block the host computing device disarms a wake trigger for remotely waking one or more components. In some embodiments the host computing device may disarm or otherwise disable one or more filters and or rules used to determine whether incoming packets comprise a wake packet. In doing so the host computing device may not examine incoming packets using the one or more filters and or rules.

Returning back to block if the host computing device determines that the one or more components have transitioned to a low power state the method advances to block in which the host computing device arms or otherwise enables one or more filters and or rules used to determine whether incoming packets comprise a wake packet. In doing so the host computing device may examine incoming packets using the one or more filters and or rules.

While the disclosure has been illustrated and described in detail in the drawings and foregoing description such an illustration and description is to be considered as exemplary and not restrictive in character it being understood that only illustrative embodiments have been shown and described and that all changes and modifications consistent with the disclosure and recited claims are desired to be protected.

Illustrative examples of the devices systems and methods disclosed herein are provided below. An embodiment of the devices systems and methods may include any one or more and any combination of the examples described below.

In one example a computing device for delaying delivery of an incoming packet the computing device may include a communication module a wake trigger module and a packet delay module. In an example the communication module may receive a packet from a remote computing device over a network. In an example the wake trigger module may initiate a transition from a low power power managed state to an operational power managed state in response to the packet received from the remote computing device. In an example the packet delay module may delay delivery of the packet during the transition from the low power power managed state to the operational power managed state.

Additionally in an example the computing device may further include a timer module. In an example the timer module may determine an amount of time passed since receipt of the packet. In an example the packet delay module may delay delivery of the packet for a reference amount of time. Additionally in an example the packet delay module may further release the packet after passage of the reference amount of time. In an example the reference amount of time may include an amount of time less than a transmission timeout of the remote computing device.

Additionally in an example the computing device may further include a power state determination module. In an example the power state determination module may further determine one or more current power managed states. In an example the power state determination module may further generate a notification indicating completion of the transition from the low power power managed state to the operational power managed state.

Additionally in an example the packet delay module may further receive the notification indicating completion of the transition from the low power power managed state to the operational power managed state and release the packet in response to receiving the notification indicating the completion of the transition from the low power power managed state to the operational power managed state.

Additionally in an example the packet may include one of a magic packet a packet of a reference type a packet destined to a reference port or a packet formed from a reference pattern. In an example the wake trigger module may further apply one or more filters to the packet received from the remote computing device and determine whether the packet matches one of a reference type a reference destination port or a reference pattern. Additionally in an example the wake trigger module may initiate a transition from a low power power managed state to an operational power managed state as a function of the packet matching one of the reference type the reference destination port or the reference pattern.

In another example a computing device for delaying delivery of an incoming packet may include a communication module a communication module and a packet buffer module. In an example the communication module may receive a packet from a remote computing device over a network. In an example the wake trigger module may initiate a transition from a low power power managed state to an operational power managed state in response to the packet received from the remote computing device. In an example the packet buffer module may buffer the packet during the transition from the low power power managed state to the operational power managed state.

Additionally in an example the computing device my further include a power state determination module. In an example the power state determination module may determine one or more current power managed states. In an example the power state determination module may further generate a notification indicating completion of the transition from the low power power managed state to the operational power managed state. In an example the computing device may further include a packet injection module. In an example the packet injection module may obtain the packet from the packet buffer module and inject the packet in response to receiving the notification indicating the completion of the transition from the low power power managed state to the operational power managed state. In an example the computing device may further include a packet replay module. In an example the packet replay module may obtain the packet from the packet buffer module and replay the packet in response to receiving the notification indicating the completion of the transition from the low power power managed state to the operational power managed state.

Additionally in an example the packet may include one of a magic packet a packet of a reference type a packet destined to a reference port or a packet formed from a reference pattern. In an example the wake trigger module may further apply one or more filters to the packet received from the remote computing device and determine whether the packet matches one of a reference type a reference destination port or a reference pattern. Additionally in an example the wake trigger module may initiate a transition from a low power power managed state to an operational power managed state as a function of the packet matching one of the reference type the reference destination port or the reference pattern.

In another example a method for delaying delivery of an incoming packet may include receiving by a host computing device a packet from a remote computing device over a network. In an example the method may further include initiating by the host computing device a transition from a low power power managed state to an operational power managed state in response to receiving the packet from the remote computing device. In an example the method may further include delaying by the host computing device delivery of the packet during the transition from the low power power managed state to the operational power managed state.

Additionally in an example the method may further include determining by the host computing device an amount of time passed since receiving the packet from the remote computing device. In an example delaying delivery of the packet may include delaying delivery of the packet for a reference amount of time. Additionally in an example the method may include releasing by the host computing device the packet after passage of the reference amount of time. In an example the reference amount of time may include an amount of time less than a transmission timeout of the remote computing device.

In an example the method may further include determining by the host computing device one or more current power managed states. Additionally in an example the method may further include generating by the host computing device a notification indicating completion of the transition from the low power power managed state to the operational power managed state. In an example the method may include releasing by the host computing device the packet in response to receiving the notification indicating the completion of the transition from the low power power managed state to the operational power managed state.

Additionally in an example the packet may include one of a magic packet a packet of a reference type a packet destined to a reference port or a packet formed from a reference pattern. In an example the method may further include applying by the host computing device one or more filters to the packet received from the remote computing device and determining whether the packet matches one of a reference type a reference destination port or a reference pattern. Additionally in an example initiating a transition from a low power power managed state to an operational power managed state may include initiating a transition from a low power power managed state to an operational power managed state as a function of the packet matching one of the reference type the reference destination port or the reference pattern.

In another example a method for delaying delivery of an incoming packet may include receiving by a host computing device a packet from a remote computing device over a network. In an example the method may further include initiating by the host computing device a transition from a low power power managed state to an operational power managed state in response to receiving the packet from the remote computing device. In an example the method may further include buffering by the host computing device the packet during the transition from the low power power managed state to the operational power managed state.

Additionally in an example the method may include determining by the host computing device one or more current power managed states. In an example the method may further include generating by the host computing device a notification indicating completion of the transition from the low power power managed state to the operational power managed state. Additionally in an example the method may further include injecting by the host computing device the packet in response to receiving the notification indicating the completion of the transition from the low power power managed state to the operational power managed state. Additionally in an example the method may further include replaying by the host computing device the packet in response to receiving the notification indicating the completion of the transition from the low power power managed state to the operational power managed state.

In an example the packet may include one of a magic packet a packet of a reference type a packet destined to a reference port or a packet formed from a reference pattern. Additionally in an example the method may include applying by the host computing device one or more filters to the packet received from the remote computing device and determining whether the packet matches one of a reference type a reference destination port or a reference pattern. Additionally initiating a transition from a low power power managed state to an operational power managed state may include initiating a transition from a low power power managed state to an operational power managed state as a function of the packet matching one of the reference type the reference destination port or the reference pattern.

