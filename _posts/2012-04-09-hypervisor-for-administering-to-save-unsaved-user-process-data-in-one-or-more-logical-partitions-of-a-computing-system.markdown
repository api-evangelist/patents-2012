---

title: Hypervisor for administering to save unsaved user process data in one or more logical partitions of a computing system
abstract: Methods, systems, and products are disclosed for saving unsaved user process data in one or more logical partitions (‘LPARs’) of a computing system, the computing system having installed upon it a hypervisor for administering the LPARs, each LPAR supporting an operating system, each operating system supporting one or more user processes, that include: detecting, by the hypervisor, a predefined event that the hypervisor interprets as an indication that unsaved data of user processes for at least one LPAR should be saved; transmitting, by the hypervisor in response to detecting the predefined event, a save instruction to the operating system supported by the LPAR; and instructing, by the operating system in response to receiving the save instruction, each user process supported by the operating system to save any unsaved data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08881148&OS=08881148&RS=08881148
owner: International Business Machines Coporation
number: 08881148
owner_city: Armonk
owner_country: US
publication_date: 20120409
---
This application is a continuation application of and claims priority from U.S. patent application Ser. No. 12 029 820 filed on Feb. 12 2008.

The field of the invention is data processing or more specifically methods apparatus and products for saving unsaved user process data in one or more logical partitions LPARs of a computing system.

The development of the EDVAC computer system of 1948 is often cited as the beginning of the computer era. Since that time computer systems have evolved into extremely complicated devices. Today s computers are much more sophisticated than early systems such as the EDVAC. Computer systems typically include a combination of hardware and software components application programs operating systems processors buses memory input output devices and so on. As advances in semiconductor processing and computer architecture push the performance of the computer higher and higher more sophisticated computer software has evolved to take advantage of the higher performance of the hardware resulting in computer systems today that are much more powerful than just a few years ago.

One area in which computer software has evolved to take advantage of high performance hardware is a software tool referred to as a hypervisor. A hypervisor is a layer of system software that runs on the computer hardware beneath the operating system layer to allows multiple operating systems to run on a host computer at the same time. Hypervisors were originally developed in the early 1970 s when company cost reductions were forcing multiple scattered departmental computers to be consolidated into a single larger computer the mainframe that would serve multiple departments. By running multiple operating systems simultaneously the hypervisor brought a measure of robustness and stability to the system. Even if one operating system crashed the others would continue working without interruption. Indeed this even allowed beta or experimental versions of the operating system to be deployed and debugged without jeopardizing the stable main production system and without requiring costly second and third systems for developers to work on.

A hypervisor allows multiple operating systems to run on a host computer at the same time by providing each operating system with its own set of computer resources. These computer resources are typically virtualized counterparts to the physical resources of a computing system. A hypervisor allocates these resources to each operating system using logical partitions. A logical partition is a set of data structures and services that enables distribution of computer resources within a single computer to make the computer function as if it were two or more independent computers. Using a logical partition therefore a hypervisor provides a layer of abstraction between a computer hardware layer of a computing system and an operating system layer.

Each logical partition of a computing system typically supports an operating system which in turn supports multiple user processes. In such a manner hundreds of user processes may be supported on the computing system at any given moment. As the computing system executes the user processes data of each user processes is manipulated in volatile computer memory but is not always saved to non volatile computer memory. Occasionally a system event occurs precipitating the need for saving any unsaved user process data such as for example power interruption or partition migration. When these system events occur a system administrator must manually interact with each user process to save any unsaved data. Manually interacting with each user process to save any unsaved data however is inefficient and costly because such manual interaction consumes large amounts of the system administrator s time.

Methods systems and products are disclosed for saving unsaved user process data in one or more logical partitions LPARs of a computing system the computing system having installed upon it a hypervisor for administering the LPARs each LPAR supporting an operating system each operating system supporting one or more user processes that include detecting by the hypervisor a predefined event that the hypervisor interprets as an indication that unsaved data of user processes for at least one LPAR should be saved transmitting by the hypervisor in response to detecting the predefined event a save instruction to the operating system supported by the LPAR and instructing by the operating system in response to receiving the save instruction each user process supported by the operating system to save any unsaved data.

The foregoing and other objects features and advantages of the invention will be apparent from the following more particular descriptions of exemplary embodiments of the invention as illustrated in the accompanying drawings wherein like reference numbers generally represent like parts of exemplary embodiments of the invention.

Exemplary methods apparatus and products for saving unsaved user process data in one or more LPARs of a computing system in accordance with the present invention are described with reference to the accompanying drawings beginning with . sets forth a block diagram of an exemplary computing system for saving unsaved user process data in one or more LPARs of a computing system according to embodiments of the present invention. The exemplary computing system of saves unsaved user process data in one or more LPARs of a computing system as follows The computing system has installed upon it a hypervisor for administering the LPARs . Each LPAR supports an operating system and each operating system supports one or more user processes . The hypervisor detects a predefined event that the hypervisor interprets as an indication that unsaved data of user processes for at least one LPAR should be saved. In response to detecting the predefined event the hypervisor transmits a save instruction to the operating system supported by the LPAR . In response to receiving the save instruction the operating system instructs each user process supported by the operating system to save any unsaved data.

In the example of the computing system includes several logical partitions . Each logical partition provides an execution environment for user processes and an operating system . Each user process is a set of computer program instructions implementing user level data processing. The operating system of is system software that manages the resources allocated to the logical partition by the hypervisor . The operating system performs basic tasks such as for example controlling and allocating virtual memory prioritizing the processing of instructions controlling virtualized input and output devices facilitating networking and managing a virtualized file system.

The hypervisor of is a layer of system software that runs on the computer hardware beneath the operating system layer to allow multiple operating systems to run on a host computer at the same time. The hypervisor provides each operating system with a set of computer resources using the logical partitions . A logical partition LPAR is a set of data structures and services provided to a single operating system that enables the operating system to run concurrently with other operating systems on the same computer hardware. In effect the logical partitions allow the distribution of computer resources within a single computer to make the computer function as if it were two or more independent computers.

The hypervisor of establishes each logical partition using a combination of data structures and services provided by the hypervisor itself along with partition firmware configured for each logical partition . The partition firmware of is system software specific to a particular partition and is often referred to as a dispatchable hypervisor. The partition firmware maintains partition specific data structures and provides partition specific services to the operating system through an application programming interface API . The hypervisor maintains data structures and provides services to the operating systems and partition firmware for each partition through API . Collectively the hypervisor and the partition firmware are often referred to as firmware because both the hypervisor and the partition firmware are typically implemented as firmware. Together the hypervisor and the partition firmware enforce logical partitioning between one or more operating systems by storing state values in various hardware registers and other structures which define the boundaries and behavior of the logical partitions . Using such state data the hypervisor and the partition firmware may allocate memory to logical partitions route input output between input output devices and associated logical partitions provide processor related services to logical partitions and so on. Essentially this state data defines the allocation of resources in logical partitions and the allocation is altered by changes the state data rather than by physical reconfiguration of hardware .

In order to allow multiple operating systems to run at the same time the hypervisor assigns virtual processors to the operating systems running in the logical partitions and schedules virtual processors on one or more physical processors of the computing system . A virtual processor is a subsystem that implements assignment of processor time to a logical partition . A shared pool of physical processors supports the assignment of partial physical processors in time slices to each logical partition . Such partial physical processors shared in time slices are referred to as virtual processors. A thread of execution is said to run on a virtual processor when it is running on the virtual processor s time slice of the physical processors. Sub processor partitions time share a physical processor among a set of virtual processors in a manner that is invisible to an operating system running in a logical partition. Unlike multiprogramming within the operating system where a thread can remain in control of the physical processor by running the physical processor in interrupt disabled mode in sub processor partitions the thread is still pre empted by the hypervisor at the end of its virtual processor s time slice in order to make the physical processor available to a different virtual processor.

In the exemplary computing system of the hypervisor has installed upon it a global save module . The global save module of is a set of computer program instructions for saving unsaved user process data in the LPARs of a computing system according to embodiments of the present invention. The global save module operates generally for saving unsaved user process data in the LPARs of a computing system according to embodiments of the present invention by detecting a predefined event that the hypervisor interprets as an indication that unsaved data of user processes for at least one LPAR should be saved and transmitting in response to detecting the predefined event a save instruction to the operating system supported by the LPAR. Unsaved data refers to data for a user process that is stored in volatile computer memory such as RAM but not stored in non volatile memory such as for example a disk drive or Electrically Erasable Programmable Read Only Memory EEPROM . The predefined event is an event for which a system administrator specifies saving any unsaved user process data upon the event s occurrence. Examples of a predefined event may include a migration event of one partition from one computing system to another low battery event excessive temperature event a backup operation event or simply an instruction from any process to the hypervisor to save any unsaved user process data.

Each operating system of also operates generally for saving unsaved user process data in the LPARs of a computing system according to embodiments of the present invention. Each operating system of operates generally for saving unsaved user process data in the LPARs of a computing system according to embodiments of the present invention by instructing in response to receiving the save instruction each user process supported by the operating system to save any unsaved data. Each operating system may instruct each user process supported by the operating system to save any unsaved data by calling each callback function registered with the operating system . Each user process supported by an operating system may register a callback function with the operating system supporting that user process. The callback function for each user process may be stored by the operating system in a process registration table . Upon receiving a save instructions from the hypervisor the operating system then uses the callback function for each user process to instruct that user process to save any unsaved data. In other embodiments each operating system may instruct each user process supported by the operating system to save any unsaved data by simulating user input that instructs that user process to save any unsaved data. For example the operating system may store an identifier for the Ctrl S keyboard instruction in the input buffer for each user process. The Ctrl S keyboard is a widely utilized user input that instructs user processes supported by Microsoft s Windows family of operating system to save any unsaved data.

The operating system of includes priority data . The priority data of specifies the order in which any unsaved data for each user process supported by a particular operating system should be saved. The priority data of may be configured in each operating system by a system administrator. Each operating system may then instruct each user process supported by the operating system to save any unsaved data in dependence upon priority data associated with each user process. In such a manner unsaved data for user processes deemed more important to the system administrator may be saved before the unsaved data for other user processes deemed less important to the system administrator.

In the example of the exemplary computing system may be implemented as a blade server installed in a computer rack along with other blade servers. Each blade server includes one or more computer processors and computer memory operatively coupled to the computer processors. The blade servers are typically installed in server chassis that is in turn mounted on a computer rack. Readers will note that implementing the computing system as blade server is for explanation and not for limitation. In fact the computing system of may be implemented as a workstation a node of a computer cluster a compute node in a parallel computer or any other implementation as will occur to those of skill in the art.

Saving unsaved user process data in one or more LPARs of a computing system in accordance with the present invention is generally implemented with computers that is with automated computing machinery. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an exemplary computing system useful in saving unsaved user process data in one or more LPARs of a computing system according to embodiments of the present invention. The computing system of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the computing system.

Stored in RAM are logical partitions and a hypervisor that exposes an API . Each logical partition is a set of data structures and services that enables distribution of computer resources within a single computer to make the computer function as if it were two or more independent computers. Each logical partition includes user processes an operating system and partition firmware that exposes an API . Operating systems useful in computing systems according to embodiments of the present invention include UNIX Linux Microsoft Vista IBM s AIX IBM s i5 OS and others as will occur to those of skill in the art.

The hypervisor of operates generally for saving unsaved user process data in one or more LPARs of a computing system according to embodiments of the present invention. The hypervisor of operates generally for saving unsaved user process data in one or more LPARs of a computing system according to embodiments of the present invention by detecting a predefined event that the hypervisor interprets as an indication that unsaved data of user processes for at least one LPAR should be saved and transmitting in response to detecting the predefined event a save instruction to the operating system supported by the LPAR.

The operating system of operates generally for saving unsaved user process data in one or more LPARs of a computing system according to embodiments of the present invention. The operating system of operates generally for saving unsaved user process data in one or more LPARs of a computing system according to embodiments of the present invention by instructing in response to receiving the save instruction each user process supported by the operating system to save any unsaved data.

The hypervisor and the logical partitions including the user processes the operating system the partition firmware illustrated in are software components that is computer program instructions and data structures that operate as described above with reference to . The hypervisor and the logical partitions including memory balancing module applications the operating system the partition firmware in the example of are shown in RAM but many components of such software typically are stored in non volatile computer memory or computer storage .

The exemplary computing system of includes a baseboard management controller BMC . The BMC of is a specialized microcontroller embedded in computing systems that provides an interface between system management software and platform hardware. The BMC monitors and manages the condition of the computer system through signals received from sensors and the other components of the computing system . The BMC of may be used by the hypervisor to detect a predefined event that the hypervisor interprets as an indication that unsaved data of user processes for at least one LPAR should be saved. For example as mentioned above a predefined event may include the occurrence of a low battery condition. In such an example the BMC may receive a signal from the power supply that a low battery condition exists and notify the hypervisor of the low battery condition.

In the example of the BMC connects to the various components of the computing system through an out of band network OOBN . The OOBN of may be implemented as an I2C bus for example a multi master serial computer bus invented by Philips that is used to attach low speed peripherals to a motherboard or an embedded system. I2C is a simple low bandwidth short distance protocol that employs only two bidirectional open drain lines Serial Data SDA and Serial Clock SCL pulled up with resistors. Although the exemplary Computing system may utilize the I2C protocol readers will note this is for explanation and not for limitation. In addition to the I2C protocol the OOBN may be implemented using other technologies as will occur to those of ordinary skill in the art including for example technologies described in the Intelligent Platform Management Interface IPMI specification the System Management Bus SMBus specification the Joint Test Action Group JTAG specification and so on.

The exemplary computing system of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in computing systems useful according to embodiments of the present invention include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in computing systems useful according to embodiments of the present invention may include Peripheral Component Interconnect PCI buses and PCI Express PCIe buses.

Although not depicted in the exemplary computing system of the bus adapter may also include drive electronics for a video bus that supports data communication between a video adapter and the other components of the computing system . does not depict such video components because a computing system is often implemented as a blade server installed in a server chassis or a node in a parallel computer with no dedicated video support. Readers will note however that computing systems useful in embodiments of the present invention may include such video components.

The exemplary computing system of also includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the exemplary computing system . Disk drive adapter connects non volatile data storage to the exemplary computing system in the form of disk drive . Disk drive adapters useful in computing systems include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and others as will occur to those of skill in the art. In the exemplary computing system of non volatile computer memory is connected to the other components of the computing system through the bus adapter . In addition the non volatile computer memory may be implemented for a computing system as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The exemplary computing system of includes one or more input output I O adapters . I O adapters in computing systems implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. Although not depicted in the example of computing systems in other embodiments of the present invention may include a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. A video adapter is typically connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary computing system of includes a communications adapter for data communications with other computing systems and for data communications with a data communications network . Such data communications may be carried out through Ethernet connections through external buses such as a Universal Serial Bus USB through data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computing system sends data communications to another computing system directly or through a data communications network. Examples of communications adapters useful for saving unsaved user process data in one or more LPARs of a computing system according to embodiments of the present invention include modems for wired dial up communications IEEE 802.3 Ethernet adapters for wired data communications network communications and IEEE 802.11b adapters for wireless data communications network communications.

For further explanation sets forth a flow chart illustrating an exemplary method for saving unsaved user process data in one or more LPARs of a computing system according to embodiments of the present invention. The computing system described with reference to has installed upon it a hypervisor for administering the LPARs. Each LPAR supports an operating system and each operating system supports one or more user processes.

The method of includes registering by each user process on the LPAR a callback function with the operating system supporting that user process. The callback function may be used by the operating system to instruct that user process to save any unsaved data. Each user process on the LPAR may register a callback function with the operating system supporting that user process according to the method of by providing the operating system with a pointer to the user process callback function typically by including the pointer as an argument in an operating system function invoked by the user process during initialization. Upon receiving the pointer to the user process callback function the operating system may associate the user process callback pointer with a process identifier for that user process in a process registration table . The process registration table of includes a process identifier field and a callback pointer field for associating a process identifier with a callback pointer.

The method of also includes detecting by the hypervisor a predefined event that the hypervisor interprets as an indication that unsaved data of user processes for at least one LPAR should be saved. The hypervisor may detect a predefined event according to the method of identifying one or more system metrics for the computing system and determining that the system metrics do not satisfy a system condition profile . Each system metric of represents an aspect of a condition of the computing system. For example a system metric may represent the temperature of air surrounding temperature sensitive components of the computing system the power level of the batteries of the computing system the vibration level of system components and so on. The system condition profile of specifies one or more rules for determining whether the computing system is operating within acceptable criteria. For example the system condition profile may specify that the computing system is operating within acceptable criteria when the processor temperature is below 95 degrees Celsius or when the battery power level is above two percent. In such a manner the system condition profile may indicate when the computing system is about to fail due to the computing system s operation outside of acceptable criteria.

The hypervisor may identify one or more system metrics for the computing system according to the method of by receiving system notifications from a baseboard management controller that aggregates diagnostics and system information from various sensors and other components installed in the computing system. The hypervisor may determine that the system metrics do not satisfy a system condition profile according to the method of by applying the rules specified in the system condition profile to the system metrics and determining whether the rules are satisfied by the system metrics . If the rules are satisfied by the system metrics then the system metrics satisfy the system condition profile . If the rules are not satisfied by the system metrics then the system metrics do not satisfy the system condition profile .

Because a predefined event may by implemented in various ways readers will note that detecting a predefined event by identifying one or more system metrics for the computing system and determining that the system metrics do not satisfy a system condition profile is for explanation only and not for limitation. In fact other ways of detecting a predefined event as will occur to those of skill in the art may also be useful in embodiments of the present invention. For example the hypervisor may detect a predefined event by receiving an instruction for a system backup application to save any unsaved user process data before the backup operation is performed. In such an example the predefined event is the receipt of an instruction to save any unsaved user process data before the backup operation is performed. Still further the hypervisor may detect a predefined event by identifying that a logical partition on the computing system needs to be migrated to another computing system. In such an example the predefined event is the identification that a partition migration should occur.

The method of includes transmitting by the hypervisor in response to detecting the predefined event a save instruction to the operating system supported by the LPAR. The save instruction of represents an instruction from the hypervisor to the operating system of a LPAR instructing the operating system to in turn instruct the user processes supported by the operating system to save any unsaved data. The hypervisor may transmit a save instruction to the operating system supported by the LPAR according to the method of by invoking a function in the API of the operating system. Although the description above describes transmitting a save instruction to a single operating system in a single LPAR readers will note that the hypervisor may transmit a save instruction to operating systems in multiple LPARs depending on the predefined event . For example if the predefined event relates to the migration of a single LPAR then the hypervisor may only transmit the save instruction to the operating system on that LPAR. If however the predefined event relates to a low battery condition then the hypervisor may transmit the save instruction to the operating system for each of the LPARs in the computing system.

The method of also includes instructing by the operating system in response to receiving the save instruction each user process supported by the operating system to save any unsaved data. The operating system may instruct each user process to save any unsaved data according to the method of by calling each callback function registered with the operating system. The hypervisor may call each callback function registered with the operating system according to the method of by traversing the process registration table for the operating system and invoking the callback functions specified by callback pointer field in the process registration table .

In the example of the hypervisor directly supports one or more hypervisor processes in a manner similar to the way in which each operating system supports one or more user processes. When a predefined event occurs that precipitate saving all unsaved data in the computing system the hypervisor may also operate according to the present invention to save any unsaved hypervisor process data. The method of therefore includes instructing by the hypervisor in response to detecting the predefined event each hypervisor process to save any unsaved data. The hypervisor may instruct each hypervisor process to save any unsaved data according to the method of in the same manner described above as the operating system instructing each user process to save any unsaved data. For example the hypervisor may instruct each hypervisor process to save any unsaved data according to the method of by traversing a hypervisor process registration table not shown for the hypervisor and invoking the callback functions specified by a callback pointer field in the hypervisor process registration table.

Although the explanation above of how an operating system may instruct each user process supported by that operating system to save any unsaved data includes calling a callback function registered with the operating system readers will note that an operating system may utilize other ways of instructing each user process supported by that operating system to save any unsaved data. For further explanation therefore sets forth a flow chart illustrating a further exemplary method for saving unsaved user process data in one or more LPARs of a computing system according to embodiments of the present invention. The computing system described with reference to has installed upon it a hypervisor for administering the LPARs. Each LPAR supports an operating system and each operating system supports one or more user processes.

The method of is similar to the method of . That is the method of includes detecting by the hypervisor a predefined event that the hypervisor interprets as an indication that unsaved data of user processes for at least one LPAR should be saved transmitting by the hypervisor in response to detecting the predefined event a save instruction to the operating system supported by the LPAR and instructing by the operating system in response to receiving the save instruction each user process supported by the operating system to save any unsaved data.

The method of differs from the method of however in that the operating system instructs each user process supported by the operating system to save any unsaved data according to the method of by simulating for each user process supported by the operating system user input that instructs that user process to save any unsaved data. The operating system may simulate user input that instructs that user process to save any unsaved data according to the method of by looking up the user input code associated with the identifier for each process in a user input table of the operating system and injecting the user input code for a particular user process into the user process input buffer. The user input table of includes a process identifier field and a user input code field for associating user process identifiers with user input codes that instruct the corresponding user processes to save any unsaved data. For example a user input code may be implemented as an identifier for the Ctrl S keyboard instruction for a user process supported by Microsoft s Windows XP operating system. Similarly a user input code may be implemented as an identifier for the Cmd S keyboard instruction for a user process supported by Apple s OS X operating system. The user input codes included in the operating system s user input table may be downloaded from the operating system provider s servers that connect to the computing system through a data communications network. In other embodiments a system administrator may specify each user process user input code for saving unsaved data. Still further other ways of populating the operating system s user input table are also well within the scope of the present invention.

In some embodiments of the present invention a system administrator may prefer that the unsaved data for certain critical user processes be saved before the unsaved data for less critical user processes. For further explanation therefore sets forth a flow chart illustrating a further exemplary method for saving unsaved user process data in one or more LPARs of a computing system according to embodiments of the present invention. The computing system described with reference to has installed upon it a hypervisor for administering the LPARs. Each LPAR supports an operating system and each operating system supports one or more user processes.

The method of is similar to the method of . That is the method of includes detecting by the hypervisor a predefined event that the hypervisor interprets as an indication that unsaved data of user processes for at least one LPAR should be saved transmitting by the hypervisor in response to detecting the predefined event a save instruction to the operating system supported by the LPAR and instructing by the operating system in response to receiving the save instruction each user process supported by the operating system to save any unsaved data.

The method of differs from the method of however in that the operating system instructs each user process supported by the operating system to save any unsaved data according to the method of by instructing each user process supported by the operating system to save any unsaved data in dependence upon priority data associated with each user process. The priority data associated with each user process specifies the order in which the operating system instructs that user process to save any unsaved data in relations to the other processes supported by that operating system. For example the priority data may be implemented as an integer. The operating system may save unsaved data for user processes associated with lower integers before saving unsaved data for user processes associated with higher integers. The operating system may instruct each user process supported by the operating system to save any unsaved data in dependence upon priority data associated with each user process according to the method of by invoking callback functions for user processes associated with the priority data in the order specified by the priority data . For example consider the following exemplary priority table 

Using the exemplary priority table above the operating system may save unsaved data for user processes associated with lower integers before saving unsaved data for user processes associated with higher integers. Based on the exemplary priority table above the operating system invokes callback functions that instruct the user processes to save any unsaved data in the following order the callback function for user process P2 the callback function for user process P1 the callback function for user process P4 the callback function for user process P0 and the callback function for user process P3. Readers will note that the exemplary table above is for explanation only and not for limitation. Readers will also note that implementing priority data as an integer is also for explanation only and not for limitation. In fact priority data may also be implemented as a set of rules used to determine the order in which unsaved user process data for a particular user process should be saved a bit mask or any other implementation as will occur to those of skill in the art.

Exemplary embodiments of the present invention are described largely in the context of a fully functional computer system for saving unsaved user process data in one or more LPARs of a computing system. Readers of skill in the art will recognize however that the present invention also may be embodied in a computer program product disposed on computer readable media for use with any suitable data processing system. Such computer readable media may be transmission media or recordable media for machine readable information including magnetic media optical media or other suitable media. Examples of recordable media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Examples of transmission media include telephone networks for voice communications and digital data communications networks such as for example Ethernets and networks that communicate with the Internet Protocol and the World Wide Web as well as wireless transmission media such as for example networks implemented according to the IEEE 802.11 family of specifications. Persons skilled in the art will immediately recognize that any computer system having suitable programming means will be capable of executing the steps of the method of the invention as embodied in a program product. Persons skilled in the art will recognize immediately that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the present invention.

It will be understood from the foregoing description that modifications and changes may be made in various embodiments of the present invention without departing from its true spirit. The descriptions in this specification are for purposes of illustration only and are not to be construed in a limiting sense. The scope of the present invention is limited only by the language of the following claims.

