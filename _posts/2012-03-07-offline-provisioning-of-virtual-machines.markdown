---

title: Offline provisioning of virtual machines
abstract: An offline provisioning system provides a facility for provisioning a virtual machine without requiring that the virtual machine be launched. The system extends the configuration file or other mechanism used for storing virtual hardware configuration to store provisioning information for software state. The system uses the configuration information for pushing selective contents of the configuration information into the guest virtual machine as it is launched to perform guest provisioning. With these changes in place, a guest virtual machine can be provisioned when the virtual machine image is offline and not running. The system can even perform provisioning before an appropriate host has been identified to launch the guest virtual machine. This allows for much more rapid deployment and provisioning of virtual machines and frees administrative resources for other tasks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09116735&OS=09116735&RS=09116735
owner: Microsoft Technology Licensing, LLC
number: 09116735
owner_city: Redmond
owner_country: US
publication_date: 20120307
---
Virtual machines are software concepts that provide a layer between an operating system and applications and physical computing resources. The software emulates the qualities of a target physical hardware platform so that an operating system and applications running on the virtual machine act as if they are executing on a physical machine with the emulated qualities. The actual physical computing resources may be used to execute many virtual machines at the same time. In many cases a hypervisor is used to manage the resources of the physical machine and to start one or more virtual machines running on the physical machine. Virtual machines can often be paused moved to another physical machine and resumed all with little or no interruption to the operating system and applications running on the virtual machine. Thus virtual machines have become a great tool for datacenters particularly those hosting multiple tenants e.g. application service providers and the like . The manager of the datacenter need only ensure that each virtual machine has the resources that it needs rather than managing the actual software running on the virtual machine.

Appliances especially virtual appliances where a specific application along with the necessary operating environment is packaged as a single deployable image have become a popular distribution format for software vendors. Before this appliance image can be deployed the image needs to be customized and this operation is typically referred to as provisioning. Several aspects of the appliance will typically need to be customized 1 hardware resources to be allocated to the virtual machine and 2 injecting state into the virtual machine to provision the virtual machine. State may include information such as user accounts passwords secure shell SSH keys network configuration e.g. Internet Protocol IP addresses domain name and so on and so forth. Because each virtual machine will use a different IP address host name and so forth simply cloning the virtual machine image is insufficient to provision the virtual machine and prepare it for use.

While the hardware customization can be done without launching the virtual machine most schemes currently in use require the virtual machine to be running to inject state into the virtual machine. For instance MICROSOFT WINDOWS uses a tool called sysprep to automate the customization. Sysprep can only run while the virtual machine is running and thus an administrator first sets up the hardware customization and launches the virtual machine then runs sysprep on each one to complete provisioning. If the administrator is provisioning many e.g. hundreds or thousands of virtual machines then provisioning very quickly becomes a tedious and time consuming task. Other mechanisms in use include first boot configuration . In all these schemes the virtual machine needs to be executing to perform the final provisioning customization.

An offline provisioning system is described herein that provides a facility for provisioning a virtual machine without requiring that the virtual machine be launched just to provision. As noted earlier presently all of the hardware provisioning can be done without launching the virtual machine since the hardware provisioning information is part of the configuration file describing the virtual machine. The offline provisioning system extends the configuration file or other mechanism used for storing virtual hardware configuration to store provisioning information for software state. The offline provisioning system uses the configuration information for pushing selective contents of the configuration information those pertaining to guest provisioning into the guest virtual machine as it is launched to perform guest provisioning. With these changes in place a guest virtual machine can be provisioned when the virtual machine image is offline and not running. Since the provisioning information is added to the virtual machine configuration file the system can even perform provisioning before an appropriate host has been identified to launch the guest virtual machine. This allows for much more rapid deployment and provisioning of virtual machines and frees administrative resources for other tasks. Thus the offline provisioning system simplifies provisioning of virtual machines by allowing the information needed for provisioning to be collected and stored before the virtual machine has been run and then to be applied without administrative oversight upon use of the virtual machine.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

An offline provisioning system is described herein that provides a facility for provisioning a virtual machine without requiring that the virtual machine be launched just to provision. As noted earlier presently all of the hardware provisioning can be done without launching the virtual machine since the hardware provisioning information is part of the configuration file describing the virtual machine. The offline provisioning system extends the configuration file or other mechanism to store provisioning information. Typically the contents of the configuration information will be consumed by the virtualization platform to launch the virtual machine. The offline provisioning system also uses the configuration information for pushing selective contents of the configuration information those pertaining to guest provisioning into the guest virtual machine as it is launched to perform the necessary guest provisioning. With these changes in place a guest virtual machine can be provisioned when the virtual machine image is offline and not running. Since the provisioning information is added to the virtual machine configuration file the system can even perform provisioning before an appropriate host has been identified to launch the guest virtual machine. This allows for much more rapid deployment and provisioning of virtual machines and frees administrative resources for other tasks.

The offline provisioning system can be used in conjunction with any operating system running on the guest virtual machine. In the case of WINDOWS MICROSOFT s virtualization platform has implemented a generic mechanism for exchanging key value tuples with the guest virtual machines hosted on the platform. If the guest is currently not executing the key value tuples will be added to the configuration document associated with the virtual machine and when the virtual machine is launched these cached key value tuples will be injected into the guest. For Linux virtual machines that currently do not have a sysprep like tool for provisioning the offline provisioning system provides a registry like configuration data store infrastructure using the key value pair mechanism. A daemon running in the guest and provided as part of the guest image can extract these key value tuples and perform arbitrary customization of the guest virtual machine when the guest is launched. With this infrastructure the system can perform virtual machine provisioning without having to launch the virtual machine on Linux and other platforms. The key value scheme allows for various customization and exchange of any type of data for provisioning the guest virtual machine. Thus the offline provisioning system simplifies provisioning of virtual machines by allowing the information needed for provisioning to be collected and stored before the virtual machine has been run and then to be applied without administrative oversight upon use of the virtual machine.

The key value tuple mechanism provided by MICROSOFT Hyper V allows a guest operating system to get information from a host operating system running the guest in a virtual machine. This information may include the WINDOWS version real IP addresses processor information memory configuration hardware resources and so forth. A service running on the guest passes key value tuples back and forth using a communication channel e.g. a socket named pipe or other mechanism . In WINDOWS these key value tuples show up as entries in the system registry where applications or other software can access them. The offline provisioning system extends this mechanism to other operating systems such as Linux by providing a kernel driver or a user level daemon running within the Linux guest that opens a similar communication channel receives provisioning information stored in a configuration file or other facility and applies the provisioning information to affect state of the virtual machine and guest. Thus with a single mechanism an administrator can specify provisioning information without the virtual machine running and that provisioning information will be applied to the virtual machine regardless of the particular operating system that the virtual machine is configured to run.

The state capture component receives state information related to the operation of a virtual machine from an administrator to provision the virtual machine for a particular role. The state information may include network configuration user names domain information or any other type of data relevant for preparing the virtual machine for operation in a particular capacity. The state information may include information that is specific to a particular virtual machine such that the information cannot be provided in a cloned virtual machine image used to set up multiple virtual machines. In some cases the state capture component may capture general configuration information for multiple virtual machines and specific configuration information for each virtual machine. The system may provide a user interface or tool for collecting the state information such as a desktop or mobile application web based interface programmatic interface and so forth. The state capture component may leverage existing configuration facilities such as MICROSOFT WINDOWS POWERSHELL by providing an extension module e.g. cmdlets or other software for integrating with the facilities to capture virtual machine state information.

The state storing component stores received state information in the configuration data store . The state storing component may include one or more file system application programming interfaces APIs database APIs network communication channels and so on. In some cases the system may maintain the configuration data store as a repository that is centrally accessible within a datacenter or over a network. The state storing component then communicates captured state information to the repository by a suitable communication channel e.g. Transmission Control Protocol TCP remote storage of a file writing the state information to a database and so forth .

The configuration data store persistently stores state information for one or more virtual machines. The configuration data store may include one or more files file systems hard drives databases storage area networks SANs cloud based storage services or other facilities for storing data over time. In some cases the system may be used in a multi tenant datacenter or cloud computing environment to provision new virtual machines or appliances. In such cases the configuration data store may include a centrally accessible database that virtual machines communicate with to access previously captured and stored provisioning information. The configuration information stored by the configuration data store can be stored on the host where the guest virtual machine will run on a central server that provides a repository of guest provisioning information or in any other location to which the guest will have access to the provisioning information.

The provisioning daemon component operates within a guest virtual machine to retrieve state information captured and stored while the guest virtual machine was not running. The component may continue to monitor or listen for new state information provided after the guest virtual machine is running. The component may operate as a service daemon or other software application that runs early in the boot process of an operating system running on the guest virtual machine and that has suitable access for applying state information to the guest virtual machine. The component may open a communication channel or transport for receiving configuration information related to provisioning and may invoke one or more APIs provided by the host platform for accessing information outside of the guest virtual machine. The hypervisor or other software can provide specific instructions that a guest virtual machine can execute to pierce the veil of the virtual machine to reach data stored by the host such as provisioning data. Because the provisioning data can be stored by an administrator much earlier even before the virtual machine was deployed to a host the provisioning daemon component can operate to apply the provisioning data without direct oversight by the administrator.

The state access component accesses state information previously stored in the configuration data store from a guest virtual machine. The provisioning daemon component invokes the state access component to establish a communication channel suitable for accessing the received state information. The communication channel may access a file stored on the host a file stored on a remote server a database a live channel such as a socket for receiving provisioning information or any other transport over which provisioning data can be provided to the guest virtual machine. The state access component may continue to listen for or to attempt to access new configuration data for as long as the guest virtual machine is in a running state.

The state application component applies accessed state information to provision the guest virtual machine to operate in the particular role specified by the state information. The application of the state information serves to distinguish the virtual machine from other similar virtual machines. For example the state information may assign the virtual machine substantially unique IP address hostname cryptographic keys or other information that allows the virtual machine to operate as a distinguished computing device. Applying state may include invoking APIs of the operating system related to setting configuration settings storing files on the guest virtual machine modifying a configuration database e.g. the WINDOWS registry or other changes to the guest virtual machine to carry out the purpose of the state information. The state application component may receive state information as one or more key value tuples and may look for specific key names to apply the values associated with those names. For example the key value tuples may include a hostname key name that specifies a value for naming the guest virtual machine on a network.

The computing device on which the offline provisioning system is implemented may include a central processing unit memory input devices e.g. keyboard and pointing devices output devices e.g. display devices and storage devices e.g. disk drives or other non volatile storage media . The memory and storage devices are computer readable storage media that may be encoded with computer executable instructions e.g. software that implement or enable the system. In addition the data structures and message structures may be stored on computer readable storage media. Any computer readable media claimed herein include only those media falling within statutorily patentable categories. The system may also include one or more communication links over which data can be transmitted. Various communication links may be used such as the Internet a local area network a wide area network a point to point dial up connection a cell phone network and so on.

Embodiments of the system may be implemented in various operating environments that include personal computers server computers handheld or laptop devices multiprocessor systems microprocessor based systems programmable consumer electronics digital cameras network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices set top boxes systems on a chip SOCs and so on. The computer systems may be cell phones personal digital assistants smart phones personal computers programmable consumer electronics digital cameras and so on.

The system may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures and so on that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Continuing in block the system receives provisioning data via the displayed interface. The system may receive provisioning data by the administrator storing the data to a file by receiving the data locally or remotely over a networking connection e.g. a socket by the administrator invoking a programmatic API of the system and so forth. The provisioning data may be in a particular predetermined format such as key value tuples a hierarchical format e.g. extensible markup language XML or other format for providing provisioning data.

Continuing in block the system opens a configuration data store for persistently storing the received provisioning data. Opening the configuration data store may include opening and or creating one or more configuration data files accessing a configuration database opening a network connection to a local or remote server accessing a cloud based storage service and so forth. In some cases the system may select a file name or other identifier for the configuration data store based on the provisioning data and information related to the virtual machine associated with the configuration data.

Continuing in block the system stores the received provisioning data in the opened configuration data store. If the configuration data store is a file then the system writes the received provisioning data to the file. The system may write the data in any of a variety of formats such as key value tuples hierarchical markup and so on. If the configuration data store is a database then the system writes the received provisioning data to particular tables and rows of the database. So long as the component that will access the provisioning data and the component storing the provisioning data agree on a particular format and location for the configuration data store the provisioning data may be stored at any particular location and any particular format suitable for a particular implementation of the system. In some cases the format and or location are selected that is well suited to a particular guest operating system.

Continuing in block the system associates the stored provisioning data with a particular guest virtual machine. Associating provisioning data may include naming a configuration data file according to a particular convention setting information in a database and so forth. At this point the virtual machine may not yet have been run for the first time and may only exist as a configuration file that specifies particular hardware and other resources that the virtual machine will emulate. The associated provisioning data specifies additional configuration information for the virtual machine that may include hardware software or other state information that provisions the virtual machine to act in a particular role and to have a distinguishable identity from other virtual machines. Upon execution of the virtual machine the system will apply the received provisioning information in a process like that described with reference to . After block these steps conclude.

Continuing in block the system launches a provisioning daemon running within the guest virtual machine that communicates between a configuration data store and the guest virtual machine. The provisioning daemon may run as an operating system service or daemon with low level access to operating system configuration APIs so that received provisioning data can be applied to the guest virtual machine. The provisioning daemon may be provided as a preconfigured component of a virtual machine image such that the daemon is configured to start automatically during initialization of the guest virtual machine and its associated guest operating system.

Continuing in block the system listens for provisioning data on a communication channel opened by the provisioning daemon. The communication channel may include opening a file on the host opening a remote configuration data store opening a network socket or named pipe for accessing configuration information and so forth. The system may immediately receive configuration data via the configuration channel and may listen on a continuous basis while the virtual machine is running to receive any modified provisioning data. The provisioning data configures the guest virtual machine to operate in a particular role and to distinguish the guest virtual machine from other virtual machines e.g. by giving the guest virtual machine a unique host name IP address or other configuration .

Continuing in block the system receives provisioning data via the communication channel that specifies information for configuring the guest virtual machine and at least one information item that distinguishes the guest virtual machine from other virtual machines. The system may receive the provisioning data by accessing one or more files databases cloud based storage services or other facilities for storing data. The provisioning data may be stored in a particular format that is understood by the provisioning daemon such as hierarchically or as a set of key value tuples.

Continuing in block the system applies the received provisioning data to modify a software state of the guest virtual machine. Applying the provisioning data may include invoking one or more configuration APIs of the guest operating system storing the provisioning data in a configuration database where the data can be retrieved by applications or operating system components and so forth. The system may also stop and restart services that are affected by the modified software state to complete the application of the provisioning data.

Continuing in decision block if the virtual machine is still running then the system loops to block to continue listening for provisioning data. Administrators may reconfigure various virtual machines over time and the system provides a mechanism that makes the application of such modifications straightforward. Upon termination of the virtual machine the provisioning daemon is halted along with the guest virtual machine and the process concludes. After block these steps conclude.

In some embodiments the offline provisioning system is used to manage a cloud datacenter. The system allows the storage of a single golden master that represents a common virtual machine image with multiple specific configuration files to configure the golden master to act as any specific instance with particular provisioning information. An administrative tool allows administrators to launch new instances of the virtual machine by selecting and binding a specific configuration file to the golden master.

In some embodiments the offline provisioning system allows for remote application of provisioning data. Due to the nature of the system and the ability to configure a virtual machine at a location that may be far removed from the host that will run the virtual machine it is possible for administrators at one location to configure and manage virtual machines at another location. The administrators can perform provisioning at their own workstations and later transmit the provisioning data they produce to one or more datacenters to be applied to particular virtual machine instances. The administrators can also establish a communication channel with the running virtual machine to later modify configuration parameters of the virtual machine remotely.

In some embodiments the offline provisioning system can be scripted with WINDOWS Management Interface WMI POWERSHELL Orchestrator and other tools or their equivalents on non WINDOWS operating systems to allow provisioning information to be specified programmatically. For example if an administrator wants to create 50 virtual machines each having an IP address in a particular range the administrator could write a script that stores provisioning data for each virtual machine selecting an IP address from the specified range for each virtual machine and storing the unique IP address for each virtual machine in its own provisioning data file.

Following is an example configuration document in XML format that is suitable for communication via MICROSOFT Hyper V to a guest virtual machine. Key value tuples are cached on the Hyper V host side before they are sent to the server.

The following is an example POWERSHELL script that pushes specific key value tuples to a guest virtual machine which are then consumed by an agent running on the guest virtual machine.

From the foregoing it will be appreciated that specific embodiments of the offline provisioning system have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the invention. Accordingly the invention is not limited except as by the appended claims.

