---

title: Managing application log levels in cloud environment
abstract: Applications and their application components run on a cloud platform and an underlying cloud runtime infrastructure. The cloud platform provides a service that exposes an interface to remotely change log levels of logger objects defined in application components. The application logs are generated and stored for the application components on the cloud runtime infrastructure of the cloud platform. Log levels affect the content stored in the application logs. The exposed interface is instantiated to process remote requests for managing application logs and log levels for a specified application component. The application component is deployed on the cloud platform. The requested change in the log levels is performed based on the implementation of the interface. The change in the log levels is performed in the configuration data on the cloud runtime infrastructure provided by the cloud platform.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569328&OS=09569328&RS=09569328
owner: SAP SE
number: 09569328
owner_city: Walldorf
owner_country: DE
publication_date: 20121129
---
Cloud computing refers to the hardware system software and applications delivered as services over the Internet. Cloud computing can be defined as data centers plus a layer of system software services designed to support creating and scalable deployment of application services. The Software as a Service SaaS model represents applications that are accessible from various client devices through a thin client interface such as a web browser. Platform as a Service PaaS is another category of cloud computing solutions that gives developers the tools to build and host web applications. Another level of cloud computing solution is Infrastructure as a Service IaaS which offers web based access to storage and computing power. The consumer does not need to manage or control the underlying cloud infrastructure but has control over the operating system storage and deployed applications. To deliver highly available and flexible services i.e. computation as a service and owing to the maturity of virtual technology Virtual Machines VMs are used as a standard for object deployment in the cloud. When an application is built on top of a PaaS offering the application developers that maintain the application need access to the underlying infrastructure. Direct access to the underlying infrastructure in a PaaS environment is usually given to a defined number of users such as platform operators. Monitoring systems help administrators to identify resource bottlenecks or problems and take the required action.

During the development phase it is a common practice to insert logging statements within the code to produce informative logs at runtime that can be helpful for troubleshooting or for analysis purposes. Logging is a process of creating and storing permanent records of events for a particular system or software application that can be reviewed printed and analyzed. These records can contain short messages the source of the records timestamps of the events log levels specifying the importance of the records etc. Log messages can include a detailed sequence of statements that describe the events happening during an operation as they are executed. Logger objects may have predefined levels that specify the granularity that will be applied when logging messages in log files. A logging configuration can be defined for a particular software application or a component. The logging configuration may define the log levels that will be applied while the software application or component is running.

Since version 1.4 Java itself comes with the capable logging package java.util.logging Java Logging framework which enables a Java Virtual Machine JVM wide logging configuration shared by all applications running in the JVM. The Java logging framework is a logging package for the Java Platform that defines some log levels e.g. fatal error warning info debug trace others. Based on the log level and the events that occur during the execution of the application log messages are generated and stored as logged data e.g. in log files . Log messages can be used not only by application developers but also by the system administrators that identify problems in the system operations.

Logging relevant application details at runtime is a practice that has been followed since the early days of programming It is essential to keep logs during the whole execution of a given software application or a system. Log messages are very helpful during the maintenance process of an application. The log levels defined for logger objects denote the level of importance or relevance of a certain message. This is also applicable to SaaS solutions. To retrieve the logged data for an application deployed on a PaaS solution the underlying cloud infrastructure needs to be accessed. When an event has occurred and troubleshooted is necessary the log messages can be reviewed. If the information received from the log messages is not enough for the troubleshooting tasks the log level for the logger object may be changed accordingly. This way when the event occurs again a large portion of log messages will be logged in the log file with detailed information that can help for the resolution of the issue.

Embodiments of techniques for managing application log levels in cloud environment are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

Monitoring application servers and application components that run on top of an application server is a process that is important for on premise and on demand solutions. When troubleshooting problems e.g. reported by customers application developers need to monitor the behavior of applications and their application components during runtime to effectively manage the performance of the application. Therefore they need access to the stored application logs and the log configuration. However when an application is deployed on a cloud platform the cloud runtime infrastructure may not be directly accessed by the application developer. Access to the logging information should be offered without the assistance of a platform operator. Thus application developers should be enabled to remotely manage relevant application logs and log configuration to easily analyze the behavior of running applications. Developers should be enabled to remotely change the log levels defined for logger objects in the log configuration on the cloud platform. The log configuration can be defined on the runtime environment provided by the cloud platform provider. As a result developers will be able to retrieve log files with different level of details and will be able to manage the logs according to their preference and development needs.

In one embodiment the runtime platform infrastructure may include virtual machines VMs that are used for running the deployed application components. In one embodiment the VMs represent the cloud runtime infrastructure provided by the cloud platform provider to the customers. For example customers may be development organizations that develop and provide software applications to end users. The software applications may be provided as services when defined deployed and started on top of PaaS offerings such as the cloud platform . The VMs can be such as Virtual Machine  Virtual Machine  Virtual Machine N etc. Different applications with their application components can be deployed and started on the VMs. For example Application  includes two components Application Component  and Application Component  . The Application Component  and Application Component  are deployed and started on the Virtual Machine  and the Virtual Machine  . Furthermore there may be an application such as Application K that includes only one application component Application Component N which runs on the Virtual Machine N .

The application components run on servers that are installed on the VMs. In one embodiment the server can be an application server which may be a Java application server for executing Java based applications. Application components such as Application Component  Application Component  Application Component N can be developed in such a manner that they include logging functionality. In the programming code for the application components logger objects may be defined. During the execution of tasks through the application components logger objects may be used to write log messages. The servers may store the log messages in log files. The log messages that are stored may depend on the log levels that are defined for logger object in a log configuration for the application components. The log messages that are stored may also depend on the behavior of the application components while tasks are executed through the application components. The log messages can be monitored to determine critical issues in the execution of an application component. In addition log messages help application developers to distinguish the particular problem that is causing the issues.

When an issue appears the stored logs with the log messages can be displayed and the performance of the software application or components can be analyzed with the assistance of the log messages to specify the problem area in the software application. If the problem area cannot be specified and resolved using the log messages that are stored the log levels for the logger objects may be changed in the log configuration. As a result more log messages can be generated when the problem occurs and these additional log messages may describe better the performance of the application components. The details may be helpful during the resolution steps that have to be performed. If additional data is needed for the resolution of a problem the logging configuration can be changed. Thus after changing the logging configuration and performing a particular task with the software application the recorded logs will contain different amounts of log messages reflecting the new configuration. In one aspect the performed task may be the task that was performed when the issue appeared. This way the problem will be reproduced and new amount of log messages will be stored based on the changed configuration of the log levels.

In one embodiment the request sent from the client can specify which application components are monitored and can request provision of the stored logged data and the defined logger objects for the monitored application components. For example the client can be a web application for providing information about deployed application components on the cloud platform . The client may be provided as a part of the cloud platform . Additionally the client may provide remote management capabilities for the logged data for example changing the log levels defined for logger objects in the application components. Another example of the client can be an Integrated Development Environment IDE that provides the option of a software developer to access the Cloud Platform Monitoring System and deploy application components on top of the provided runtime infrastructure. The IDE can be the Eclipse development environment which could be used to develop applications in various programming languages such as but not limited to Java Perl C C PHP etc. Yet another example of the client may be a command line console client into which a user may enter commands. The command line console client can be designed to communicate with the Cloud Platform Monitoring System . In one embodiment the cloud platform can provide platform accounts to be used by clients such as the client . An account can be a logical entity for separation which a customer may receive and use to authenticate on the cloud platform . Authenticated customers can use a cloud provided space for their own business needs and create different cloud based applications. The cloud provided space may be a repository or storage. One account may use one cloud provided space for a number of applications deployed on the cloud platform.

The request from the client can be received over a remote communication channel . For example the remote communication channel can be based on Hypertext Transfer Protocol HTTP . The Cloud Platform Monitoring System can remotely manage application log levels for requested logger objects defined in a set of application components from the application components deployed and started on VMs Virtual Machine  Virtual Machine  Virtual Machine N and other VMs provided by the cloud platform. In one embodiment the execution of the application components such as Application Component  may record log messages corresponding to defined logger objects in the programming code for the Application Component  . In another embodiment the recorded log messages may be interpreted as logged data describing the behavior of a running software component a software application or a software system. The logged data can be stored on a server running on a VM such as the Virtual Machine  Virtual machine  etc. Logger objects have defined log levels in the configuration data defined for the running Application Component  on the corresponding VM Virtual Machine 1 . After processing a request from the client to change the log levels to requested log levels defined for logger objects in application components the Cloud Platform Monitoring System makes the changes in configuration information for the application components. The change of the log levels may be accomplished in the configuration data stored for the application components on the cloud runtime infrastructure which includes Virtual Machine  Virtual Machine  Virtual Machine N f and other VMs provided by the cloud platform. In one embodiment the configuration data may be stored on an application server installed on the VMs.

The Java Logging framework may define a number of log levels that are arranged in order according to the level of importance or relevance of a certain message stored in the logged data. For example the increasing order of the log levels may be all debug info warn error fatal off. This means that the all log level is with the lowest severity and means that all messages will be stored in the log data regardless of log level. Another example is log level warn . If the log level is warn for a given logger object the log messages that will be stored in the logged data will come from method calls with warn or higher log levels e.g. error and fatal.

In one embodiment the cloud platform can provide a Log Management Service . The Log Management Service can expose an API Application Programming Interface which can be accessed by external units such as a client through communication channel . The API may represent a specification that defines the communication between software components. In one embodiment the API can provide interfaces that allow operations like listing available log files for deployed application components listing of all logger objects for a given application component providing the current log level of a given logger object changing the log level of a given logger object etc. The Log Management Service may communicate with the cloud runtime infrastructure to allow the above mentioned operations that are offered from the API . In one embodiment the Log Management Service communicated with the Virtual Machine  through a communication channel . The management and monitoring of the Application Component can be designed and developed using a Java technology such as Java Management Extensions JMX .

In one embodiment the operations that are allowed from the API may support authentication and authorization features. The Log Management Service may expose the API and instantiate the interfaces that are included in the API . The API may include an interface which can be a programming interface. In one embodiment the API may include one or more interfaces that can serve the requests from the client . The client may request displaying of the logged data stored for a given component for example Application Component . The communication between the client and the Log Management Service can be based on HTTP. Also the client may request displaying the logger objects that are defined in the programming code for the component together with the log levels that are defined for the logger objects. Therefore to serve this request the implementation of the interfaces may request the required information from the underlying cloud runtime infrastructure. For example through the communication channel a second call can be performed to request data regarding the logger objects and the log levels for logger objects for Application Component that are stored in the Log Configuration . In another embodiment the client may request from the Log Management Service to change the log levels for defined logger objects for a specified application component. The implementation of an interface provided by the API may use the communication channel and request changing the log level for the logger object in the Log Configuration . In one embodiment the change in the log levels stored in the Log Configuration is accomplished during runtime. In one embodiment the underlying cloud runtime infrastructure can be designed in such a manner that even if a VM is restarted the last log levels defined for the logger objects for applications running on the VM can be persisted.

In one embodiment the implementation of the interfaces provided by the API exposed by the Log Management Service can be based on Representational State Transfer REST architecture style. REST defines a set of architectural principles by which one can design a service web service that is concentrated on resources that are transferred over HTTP. REST principles can be applied with a wide range of clients written in different programming languages. Web services that are based on the REST architecture style also called RESTful Web services use HTTP method explicitly and in a way consistent with the protocol definition. There is a one to one mapping between CREATE READ UPDATE and DELETE operations and HTTP methods. For example when retrieving a resource a GET method is used. Another example is when an entity is stored on a specified place and a PUT method is used. RESTful Web services expose directly structure like Uniform Resource Identifiers URIs . The Log Management Service can be designed as a REST service. The exposed API API can be used for the purpose of building various clients that can present application logged data defined logger objects in application components defined log levels for the logger objects etc. to end users e.g. application developers . In addition the API may further be operable to apply changes in the log configuration. This functionality may be very useful when troubleshooting the performance of an application or an application component. In one embodiment an end user may request from the cloud platform to display logged data or to list logger objects within a web browser. In another embodiment a web application can be developed to allow end users and application developers to request changes in the log configuration defined for applications deployed and running on a cloud platform. In another embodiment a custom application or a mobile application may be developed in such a manner that they use the logging functionality provided by the Log Management Service and the exposed API .

The API specification may define methods that can be used. If the API is a REST API the REST API specification may provide description of the HTTP methods that are available and a path that can be used for a Uniform Resource Location URL based request. Table 1 presents an example specification for the API which is presented as a REST API. The specification defines the name of the method the request paths that can be used a description of the operation and a possible HTTP response code. In the request path an account is specified together with the name of the application and the application component.

Table 2 presents description of the used parameters in the request path. For example a URL that is used when using the methods presented in Table 1 can be https log api logger .

Table 3 presents a sample output result that can be returned displayed to the client after requesting logger objects from an application component to be displayed by using the GET method and applying it to a provided URL. The request can be made in the following form https log api loggers companyA applicationl web which represents a request for account companyA for application application and for application component web . In one embodiment the output may be provided in Java Script Object Notation JSON format. The output includes the names of the logger objects that are defined in component web in application with their corresponding log levels.

The client may use a user that is member of an account to authenticate into the cloud platform. For a given application there can be a set of users that are allowed to perform certain operations. The implementation of the interface may further verify whether the user is authorized to perform the requested operation. If the client cannot be authenticated or is not authorized the request for changing log levels cannot be handled by the interface. If the client is authenticated and authorized at block then at process step a second request is sent to the runtime infrastructure to change the log levels for the requested application component and specified logger objects. The implementation of the interface may access a location storing the requested application logs and a location storing the defined log configuration for logger objects used in the application component. In one embodiment the log configuration can be stored on the cloud runtime infrastructure. At process step the requested change of the current log levels to the requested log levels is performed and the changes are stored on the runtime infrastructure provided by the cloud platform.

In one embodiment the arguments that are used in a command can be given a default value for example if a component name is not specified in the request it may be supposed that the requested component is web . The end user can change the log level for a given logger object defined in an application component part of an application by using a command C neo sdk 1.5.2 tools bin neo list loggers a sap b logcmd u i012345 h netweaver.ondemand.com . In one embodiment the console client can be used as an alternative to an IDE such as the client in which also provides similar functionality. The result that is accomplished when using both of these clients can be one and the same. A list of the logger objects may be provided within the console client screen for example the list of loggers .

In one embodiment a command can be used to change the log level of a logger object com.mycompany.superapp.ui.Utils for an account sap and an application logcmd to a level INFO . A user i012345 that was used to authenticate may be checked for authorization to perform the requested operation. If the requested operation is successfully finished the log level will be changed. In one embodiment the application logcmd does not need to be stopped during the performance of the request.

In another embodiment the application logcmd does not need to be restarted in order to apply the newly defined log level. After the change to a new log level INFO tasks may be performed with the application and the logged data that is stored for the application and the application components will contain log messages based on the changed log level. The stored logged data after the change may be more detailed and contain sufficient information that can be used by application developer system administrators etc. during the maintenance of the application.

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is located remotely from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. A computer readable storage medium may be a non transitory computer readable storage medium. Examples of non transitory computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

