---

title: Imitation of file embedding in a document
abstract: A container document can include a file node indicating a file and pointing to a location for the file that is separate from the container document on a server. An embedded relationship between the file and the container document can be imitated. The imitation can include responding to user input by performing the update on the file node, and by requesting that the server perform an update on the file that reflects the update performed on the file node. A request for an update to be performed on the file node can be received from a client at the server. In response to the request, the update can be performed on the file node at the server. A corresponding update, which reflects the update performed on the file node, can also be performed on the file at the server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08965940&OS=08965940&RS=08965940
owner: Microsoft Technology Licensing, LLC
number: 08965940
owner_city: Redmond
owner_country: US
publication_date: 20120720
---
Content management systems can host content such as digital documents hereinafter documents . Examples of such documents include word processing documents spreadsheets slide presentations digital notebooks etc. Content management systems have one or more features that interact with content in the documents. For example content management systems may provide browser based document editing applications search indexing versioning property promotion demotion workflow involving the documents document permissions and sharing etc.

Users have been able to embed files into some documents that are managed by the content management systems. Users have also been able to insert file links into managed documents and such links could point to other files that are hosted on the content management system.

Embedding a file in a document hosted by a content management system can make the embedded file opaque to the hosting content management system. This can prevent the content management system from interacting directly with the embedded file to provide features specifically for that file. Also inserting a link into a document and separately uploading the linked file to the content management system can break a containment relationship between the two files. As just one example if someone copies the document that includes the link the linked file may not be automatically copied with the linking document.

The tools and techniques discussed herein relate to imitation of file embedding in a document which may be done without actually embedding the file in the document. Such tools and techniques can allow a file to appear as if it has been embedded in a container document imitating an embedded relationship between the file and the container document i.e. imitating one or more behaviors of embedded files . However the container document and the file can be stored and maintained separately which can allow a content management system to interact with the contained file to provide one or more features for that file.

In one embodiment the tools and techniques can include a client document manager maintaining a container document. The container document can include a file node indicating a file and pointing to a location for the file that is separate from the container document on a remote server though the pointing may be to a location on the remote server and to another location or via another location such as to a location in a local cache . User input requesting an update to be performed on the file node can be received. The user input can be directed at the container document. An embedded relationship between the file and the container document can be imitated. The imitation can include responding to the user input by performing the update on the file node and by requesting that the server perform an update on the file that reflects the update performed on the file node.

In another embodiment of the tools and techniques a content management system can maintain a container document on a server. The container document can include a file node indicating a file and pointing to a location for the file that is separate from the container document on the server. A request for an update to be performed on the file node can be received from a remote client. The request can be directed at the container document. In response to the request the update can be performed on the file node. Additionally a corresponding update can be performed on the file. The corresponding update can reflect the update performed on the file node.

This Summary is provided to introduce a selection of concepts in a simplified form. The concepts are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Similarly the invention is not limited to implementations that address the particular techniques tools environments disadvantages or advantages discussed in the Background the Detailed Description or the attached drawings.

Embodiments described herein are directed to techniques and tools for imitation of file embedding in a digital document. Improvements may result from the use of various techniques and tools separately or in combination.

Such techniques and tools may include maintaining a container document on a client and a server. The container document can include file nodes indicating corresponding files and pointing to locations for the files that are separate from the container document on a remote server. With the files being stored separately from the container document the files can be visible to a content management system running on the server. Thus the content management system can provide features that directly access the files such as file permission and sharing features browser based applications for accessing and editing the files etc. However an access request directed at a file node can result in access to the corresponding file. Also the files and the container document can be managed to imitate more specific functionality that would be present if the files were embedded in the container document even if that functionality would not be present if a mere link to the file were provided in the container document. For example user input requesting deletion of the file node in the container document can also result in deletion of the file. As another example user input requesting synchronization of the container document on the client and server can result in the files corresponding to file nodes in the container document also being synchronized. As yet another example copying a file node and pasting it elsewhere in the container document to yield two file nodes can result in the creation of an additional copy of the corresponding file so that there will be two files with one corresponding to each of the two nodes. As yet another example copying the container document may result in also copying the files referenced by file nodes in the container document. Some of this functionality for the actual files may be done in an asynchronous manner i.e. where control is returned without waiting for performance of the functionality to be completed . For example this may be done to improve performance by allowing lazy operations to be performed on the files or to allow requested actions to be undone e.g. by keeping a file for some period of time after deletion of the corresponding file node has been requested to allow the requested deletion to be efficiently undone .

Accordingly the tools and techniques discussed herein may provide one or more benefits such as providing content management system functionality for files while imitating an embedded relationship by providing functionality that would be present if the files were embedded in the container document. The subject matter defined in the appended claims is not necessarily limited to the benefits described herein. A particular implementation of the invention may provide all some or none of the benefits described herein. Although operations for the various techniques are described herein in a particular sequential order for the sake of presentation it should be understood that this manner of description encompasses rearrangements in the order of operations unless a particular ordering is required. For example operations described sequentially may in some cases be rearranged or performed concurrently. Moreover for the sake of simplicity flowcharts may not show the various ways in which particular techniques can be used in conjunction with other techniques.

Techniques described herein may be used with one or more of the systems described herein and or with one or more other systems. For example the various procedures described herein may be implemented with hardware or software or a combination of both. For example dedicated hardware logic components can be constructed to implement at least a portion of one or more of the techniques described herein. For example and without limitation such hardware logic components may include Field programmable Gate Arrays FPGAs Program specific Integrated Circuits ASICs Program specific Standard Products ASSPs System on a chip systems SOCs Complex Programmable Logic Devices CPLDs etc. Applications that may include the apparatus and systems of various embodiments can broadly include a variety of electronic and computer systems. Techniques may be implemented using two or more specific interconnected hardware modules or devices with related control and data signals that can be communicated between and through the modules or as portions of an application specific integrated circuit. Additionally the techniques described herein may be implemented by software programs executable by a computer system. As an example implementations can include distributed processing component object distributed processing and parallel processing. Moreover virtual computer system processing can be constructed to implement one or more of the techniques or functionality as described herein.

The computing environment is not intended to suggest any limitation as to scope of use or functionality of the invention as the present invention may be implemented in diverse general purpose or special purpose computing environments.

With reference to the computing environment includes at least one processing unit or processor and memory . In this most basic configuration is included within a dashed line. The processing unit executes computer executable instructions and may be a real or a virtual processor. In a multi processing system multiple processing units execute computer executable instructions to increase processing power. The memory may be volatile memory e.g. registers cache RAM non volatile memory e.g. ROM EEPROM flash memory or some combination of the two. The memory stores software implementing imitation of file embedding in a container document. An implementation of imitation of file embedding in a container document may involve all or part of the activities of the processor and memory being embodied in hardware logic as an alternative to or in addition to the software .

Although the various blocks of are shown with lines for the sake of clarity in reality delineating various components is not so clear and metaphorically the lines of and the other figures discussed below would more accurately be grey and blurred. For example one may consider a presentation component such as a display device to be an I O component e.g. if the display device includes a touch screen . Also processors have memory. The inventors hereof recognize that such is the nature of the art and reiterate that the diagram of is merely illustrative of an exemplary computing device that can be used in connection with one or more embodiments of the present invention. Distinction is not made between such categories as workstation server laptop handheld device etc. as all are contemplated within the scope of and reference to computer computing environment or computing device. 

A computing environment may have additional features. In the computing environment includes storage one or more input devices one or more output devices and one or more communication connections . An interconnection mechanism not shown such as a bus controller or network interconnects the components of the computing environment . Typically operating system software not shown provides an operating environment for other software executing in the computing environment and coordinates activities of the components of the computing environment .

The storage may be removable or non removable and may include computer readable storage media such as flash drives magnetic disks magnetic tapes or cassettes CD ROMs CD RWs DVDs or any other medium which can be used to store information and which can be accessed within the computing environment . The storage stores instructions for the software .

The input device s may be one or more of various different input devices. For example the input device s may include a user device such as a mouse keyboard trackball etc. The input device s may implement one or more natural user interface techniques such as speech recognition touch and stylus recognition recognition of gestures in contact with the input device s and adjacent to the input device s recognition of air gestures head and eye tracking voice and speech recognition sensing user brain activity e.g. using EEG and related methods and machine intelligence e.g. using machine intelligence to understand user intentions and goals . As other examples the input device s may include a scanning device a network adapter a CD DVD reader or another device that provides input to the computing environment . The output device s may be a display printer speaker CD DVD writer network adapter or another device that provides output from the computing environment . The input device s and output device s may be incorporated in a single system or device such as a touch screen or a virtual reality system.

The communication connection s enable communication over a communication medium to another computing entity. Additionally functionality of the components of the computing environment may be implemented in a single computing machine or in multiple computing machines that are able to communicate over communication connections. Thus the computing environment may operate in a networked environment using logical connections to one or more remote computing devices such as a handheld computing device a personal computer a server a router a network PC a peer device or another common network node. The communication medium conveys information such as data or computer executable instructions or requests in a modulated data signal. A modulated data signal is a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media include wired or wireless techniques implemented with an electrical optical RF infrared acoustic or other carrier.

The tools and techniques can be described in the general context of computer readable media which may be storage media or communication media. Computer readable storage media are any available storage media that can be accessed within a computing environment but the term computer readable storage media does not refer to propagated signals per se. By way of example and not limitation with the computing environment computer readable storage media include memory storage and combinations of the above.

The tools and techniques can be described in the general context of computer executable instructions such as those included in program modules being executed in a computing environment on a target real or virtual processor. Generally program modules include routines programs libraries objects classes components data structures etc. that perform particular tasks or implement particular abstract data types. The functionality of the program modules may be combined or split between program modules as desired in various embodiments. Computer executable instructions for program modules may be executed within a local or distributed computing environment. In a distributed computing environment program modules may be located in both local and remote computer storage media.

For the sake of presentation the detailed description uses terms like determine choose request maintain perform and imitate to describe computer operations in a computing environment. These and other similar terms are high level abstractions for operations performed by a computer and should not be confused with acts performed by a human being unless performance of an act by a human being such as a user is explicitly noted. The actual computer operations corresponding to these terms vary depending on the implementation.

The server machine can host a content management system which can host digital content. The content management system can include one or more applications. The functionality provided by one or more of the applications in the server machine may be provided by one or more software applications being executed by one or more processors by hardware logic by a combination thereof etc. The content management system can include a document browser application which can provide client machines and with browser based access viewing editing etc. to a container document . For example the container document may be a notebook document a word processing document etc.

The container document may be formatted in one or more of various ways such as a single file multiple files e.g. notes files for a notebook document grouped together such as in one or more folders etc. The container document can include a file list which can indicate files that are referenced by one or more file nodes and in the container document . The file list may also include information about the file nodes and such as the locations of the file nodes in the container document . The container document may also include metadata for the file nodes and . This metadata may be included in the file list and or the file nodes and . For example the metadata may indicate the locations of the file nodes and information about files and referenced by the file nodes and e.g. date created last date modified file type file size etc. and or other information related to the file nodes and . The files and can be any of various different types of files such as word processing files spreadsheets audio and or video files image files etc.

The content management system may include file browser applications and that can provide access and or editing capabilities to clients using browsers e.g. Web browsers . The content management system may also provide other features related to the container document and the files and . The file nodes and can each include a pointer or link to an associated file or on the server machine .

The client machine may include a document manager which can manage a client side version of the container document . As with the version of the container document on the server machine the version of the container document on the client machine can include a file list and file nodes and that can correspond to local files and that can be versions e.g. local cached versions of the files and on the server machine . The container document on the client machine may also include metadata for the file nodes and such as the types of metadata discussed above. The container documents and on the server machine and the client machine may be formatted differently from each other or they may be formatted the same as each other.

The client machine can also host file managers and which can manage files and corresponding to a file node . For example those files and can be cached versions of corresponding files and on the server machine . File managers and on the client machine can provide access and or editing capabilities for the files and . For example the file managers and may be applications that manage the types of files and e.g. word processing application for word processing document files spreadsheet application for spreadsheet document files an application for presentation slide files an application for video files an application for image files an application for audio files etc. .

The client machine can also include at least one file synchronization agent which can manage the synchronization of the versions of the files and on the client machine with the versions of the files and on the server machine . The document manager can also manage synchronization of the container document on the client machine with the container document on the server machine .

The client machine can receive and process user input such as requests to make updates to the container document and or the files and . For example user input may request updating of one or more of the file nodes and or which may result in updating of the files and or . Additionally the container document and the files and can be synchronized with the corresponding container document and files and on the server machine . Accordingly user input at the client machine can result in updates to the versions of the container document and and or to the versions of the files and or . As will be discussed more below the changes to the files and may be made asynchronously with requests for the changes while corresponding changes to the container document e.g. changes to the file nodes and or may be made synchronously with requests for the changes performing the act of updating the file node before returning control in response to the user input .

Another client machine may include a browser but not the document manager and file managers and . The content management system can still allow this client machine to provide access and updating of the container document and the files and in response to user input at the client machine . For example this can be done using the document browser application and or the file browser applications and or . For example the document browser application could allow for viewing of textual element such as notes in the container document viewing of a representation of the file list from which users could go to the locations of the listed file nodes or and viewing of other information from the container document . Selection of a file node or for opening can result in a file browser application or providing views of the associated file or which can be presented at the client machine using the browser . Updates to the container document and the files and or performed in response to user input at the client machine can later be synchronized with the versions of the container document and the files and on the other client machine .

The server machine can provide various services using the content management system . For example as discussed above the server machine can provide viewing and editing capabilities using the document browser application and the file browser applications and . The server machine may also provide versioning services allowing the client machines and or to view version histories and possibly also access previous versions of the container document and or the referenced files and or . The server machine may also manage permissions and sharing within the content management system . For example the content management system could allow personalized permissions and sharing for each file or and for the container document . Accordingly for example one referenced file could be shared with a different set of user objects than another referenced file . Also sharing or providing permissions to a referenced file or could also include sharing or providing permissions to associated content such as surrounding notes about the file or in the container document . The content management system could also allow additional metadata to be added for the files and or such as identifications of responsible user objects for a file and or . The content management system could also provide workflows that involve the container document and or the files and or such as approval workflows for the container document and or the files and or .

The numbers of items discussed herein and illustrated in has been limited for the sake of simplicity. However many different configurations could be used in accordance with the tools and techniques described herein. For example the client server system may include more or fewer client machines than the client machines and illustrated in as well as more or fewer files than the files and illustrated in . Also the content management system may manage more than one container document .

In one example the container document and can be a notebook that includes multiple files in a folder which may include sub folders. For example the files in the folder can include one or more sections of notes with each section being in a separate file. On the server machine the files and referenced by the file nodes and can reside in one folder such as a folder located at a root of the notebook folder. While the referenced files and are not embedded in the files e.g. note files that make up the container document an embedded relationship can be imitated to provide embedded like features from a user s perspective.

Although the files and are stored separately from the container document or referring to them the client server system can imitate an embedded relationship between the files and and their parent container document or and can synchronize the container document on the server machine with the container document on the client machine .

When user input requests insertion of a file or into the container document on the client machine the file node or can be inserted in the container document e.g. into one of the notes files resulting in an icon or other representation of the inserted file in the displayed container document and the file or can be inserted into a local cache. For example the file or may be inserted into a local cache that is dedicated to the type of the file or e.g. to word processing documents to documents in general etc. . Additionally the inserted file or can be replicated from the local cache to the server machine to form a version of the file or on the server machine . Also in response to the user input the inserted file or can be added to the file list 

The user input to insert a file could take any of various forms such as dragging the file onto a page surface of the displayed container document e.g. a displayed notebook page if the container document is a notebook . As another example the user input could select a menu option for attaching a file or creating a file while viewing the displayed container document .

The document manager can update the file list and insert the new file node or synchronously with the user input requesting the insertion. The document manager may allow the corresponding updates to the server machine to be made asynchronously.

The document manager can assure that the inserted file or is replicated to the server machine before writing the corresponding file node to the server. For example the document manager may trigger a synchronization by communicating with the file synchronization agent e.g. using an application programming interface call and then wait for the file synchronization agent to return an indication of success. When the file synchronization agent indicates that the synchronization of the new file or was successful then the document manager can initiate synchronization of the container document including the new file node or and the updated file list .

A file node or may be inserted in the container document on the server machine before it is inserted in the container document on the client machine . For example this may occur if a different client machine e.g. client machine initiates the insertion. In this situation the document manager can synchronize the container document and make the updated container document available before ensuring that the inserted file or has been retrieved from the server machine . Thus the representation of the inserted file node or will be displayed and user input can request that the corresponding file be opened. If this occurs before the inserted file or has been retrieved then the document manager can fetch the corresponding file or and include that file as a file or on the client machine e.g. in a file cache .

The files and can be synchronized based on a background synchronization schedule of one or more of the container documents and or . For example if such background synchronization is initiated according to a schedule that is maintained and used by the document manager on the client machine then the document manager can initiate such background synchronization. When this occurs the document manager can also initiate synchronization of the files and corresponding to the file nodes and in the container document . The document manager may first synchronize the container document on the client machine with the container document on the server machine so that the file nodes and are up to date.

The document manager can retrieve information from the content management system on the current state of the container document and the files and on the server machine . The document manager on the client machine can compare this information to the current state of the files and that are cached on the client machine . This comparison can reveal which if any of the files and or are out of date. For example the comparison may reveal files and or that have been modified either locally on the client machine or on the server machine such as by identifying files with different last modified times since the last synchronization. As another example the comparison may reveal referenced files and or on the server machine that are not yet cached on the client machine . The document manager can initiate synchronization of these identified files and or . For example the document manager may make a call to the file synchronization agent requesting that the file synchronization agent oversee the synchronization of the identified files. As another example the document manager may oversee the synchronization itself communicating with the content management system .

There may be conflicts when the files and or are synchronized. For example corresponding files e.g. and on the sever machine and the client machine may have both been modified since the last synchronization. If this occurs one of various different approaches may be taken to resolve the conflict. For example the two changed files and could be merged and the merged file could be used for the version of the file on the server machine and for the version of the file on the client machine . Alternatively the version of the file on the server machine could be used or the version of the file on the client machine could be used. The approach may be chosen automatically by the client server system or the client machine may provide a prompt on the client machine asking for user input to choose which approach to take in resolving the conflict.

The document manager can also make one or more modifications in metadata for the container document as a result of the synchronization of the files and or . For example for each file that has been synchronized the document manager may mark the file node and or as referencing an unread file and or mark the page where the associated file node and or is located for search re indexing if the document manager provides search indexing of the container document .

When user input directed at the container document selects one of the file nodes or and requests that the associated document be opened the document manager can initiate the opening action. The document manager can respond by checking whether the file or in the content management system that is referenced by the file node or has been synchronized to the client machine . If not then the document manager can fetch the file or such as by making a call to the file synchronization agent or making a call to the content management system . If the file or is already on the client machine or after the file or gets fetched in response to the request then the document manager can proceed with opening the file. For example the document manager may make a call to a file manager or specifying the associated file or that is to be opened. Once opened the file or may be modified by the associated file manager or . If the file manager or modifies a file or the modified file may be synchronized with the associated file or on the server machine as discussed above.

User input at the client machine may request deletion of a file node . For example the user input may request deletion of just the file node or deletion of a page or section that includes the file node or etc. When this occurs the file node or may be synchronously deleted from the display for the container document. However information for the file node or may be retained for some period to allow additional user input to undo the deletion. For example the file node or may be retained until it is selected to be discarded by a garbage collection technique. The document manager can wait until this information for the file node or is discarded before deleting the file or referenced by the deleted file node or . For example the deleted file or can also be discarded as part of the garbage collection technique. Thus if user input requests undoing the deletion then the referenced file or will still be available so long as the file node or is still available.

User input may request that a file node or be cut or copied and then pasted into a new location in the container document . For example the file node or may be pasted into a new location on a page into a new page into a new section etc. When this occurs the pasting of the file node or can be done synchronously with the user input requesting the pasting so that the pasted file node or can be displayed in the new location of the container document on a display of the client machine . The new pasted file node or can also be modified to point to a new file or . This may be done synchronously with the user input requesting the pasting or asynchronously. Then asynchronously with the user input requesting the pasting and possibly in a lazy manner some time later the file can be copied to create a new file or . This new file or and the new file node or can be synchronized with the server machine to produce a corresponding new file node or in the container document on the server machine and a new file or on the server machine . This synchronization may also be done asynchronously with the user input requesting the pasting.

Several techniques for imitation of file embedding in a document will now be discussed. Each of these techniques can be performed in a computing environment. For example each technique may be performed in a computer system that includes at least one processor and memory including instructions stored thereon that when executed by at least one processor cause at least one processor to perform the technique memory stores instructions e.g. object code and when processor s execute s those instructions processor s perform s the technique . Similarly one or more computer readable storage media may have computer executable instructions embodied thereon that when executed by at least one processor cause at least one processor to perform the technique. The techniques may be performed at least in part by hardware logic.

Referring to a technique for imitation of file embedding in a document will be described. The technique can include a client document manager maintaining a container document. The container document can include a file node indicating a file and pointing to a location for the file that is separate from the container document on a remote server. User input can be received . The user input can request an update to be performed on the file node. Also the user input can be directed at the container document. The technique can also include imitating an embedded relationship between the file and the container document. The imitation can include the client document manager performing the update on the file node. The imitation can also include requesting that the server perform an update on the file that reflects the update performed on the file node. Performing and requesting can both be done in response to the user input requesting the update to be performed on the file node.

Performing the update on the file node may be performed synchronously with the user input requesting the update performing the act of updating the file node before returning control in response to the user input . Also requesting that the server perform the update on the file can be performed in a lazy manner asynchronously with the user input requesting the update i.e. returning control in response to the user input without waiting for the act of requesting the update to be performed .

The update on the file node can include deleting the file node and the update on the file can include deleting the file. The file node can be an existing file node and the file can be an existing file. The update on the file node may include copying and pasting the existing file node to create a new file node in the container document in addition to the existing file node. In this situation the update on the file can include copying and pasting the existing file to create a new file. The new file node can indicate the new file and can point to a location for the new file on the remote server. The location for the new file can be separate from the container document and from the existing file.

The client document manager can receive a request to associate the file with the container document. In response to this request the file node can be placed in the container document. Also in response to this request the remote server can be requested to store the file separately from the container document and the remote server can be requested to associate the file with the file node in the container document.

A copy of the file can be maintained in a cache on a client computer system that hosts the client document manager. This copy can be kept in sync with the copy of the file on the server as discussed above. The remote server may also be requested to save a copy of the container document. The update on the file node can include synchronizing the container document with the copy of the container document on the remote server and the update on the file can include synchronizing a copy of the file e.g. a copy of the file in a client cache with the file on the remote server.

The container document may include one or more textual items adjacent to the file node with the one or more textual items referring to the file. For example the container document may be a digital notebook and the textual items may be notes adjacent to the file node and referring to the file.

Referring now to another technique for imitation of file embedding in a document will be described. The technique can include a content management system maintaining a container document on a server. The container document can include a file node indicating a file and pointing to a location for the file that is separate from the container document on the server. A request for an update to be performed on the file node can be received . The request can be directed at the container document e.g. a user input request directed at all or a portion of the container document . The technique can also include performing the update on the file node and performing a corresponding update on the file that reflects the update performed on the file node both in response to the request.

The content management system can provide a computer network browser based application that provides views of the file and that provides editing of the file in response to user input received through the browser based application. The content management system can maintain metadata corresponding to the file node and may provide a view of metadata for the file node. The metadata may include metadata regarding a location of the file node in the container document metadata regarding one or more textual items in the container document that are associated with the file versioning information for the file and or other metadata. The content management system may also maintain other information such as permissions for the file. Also the content management system may provide permission based sharing of the file wherein the file can be shared but the sharing can be limited according to permissions for the file .

Referring now to yet another technique for imitation of file embedding in a document will be described. The technique can include a client document manager receiving a request to associate a file with a container document. In response to the request a file node can be placed in the container document. The file node can indicate the file and can point to a location for the file that is separate from the container document. In response to the request to associate the file the remote server can be requested to store the file separately from the container document e.g. as a separate file in the same folder as one or more files for the container document etc. . In response to the request to associate the file the remote server can also be requested to associate the file with the file node in the container document. The client document manager can maintain the container document. The client document manager may also enter one or more textual items that refer to the file. The one or more textual items can be entered adjacent to the file node in the container document. For example the textual item s can be notes referring to the file.

The document manager can request that the remote server save a copy of the container document. User input can be received where the user input requests an update to be performed on the file node. The user input can be directed at the container document. The technique can further include imitating an embedded relationship between the file and the container document. The imitation can include the client document manager performing the update on the file node in response to user input requesting the update to be performed on the file node. The update on the file node may be performed synchronously with the user input requesting the update. The imitation can also include requesting that the server perform a corresponding update on the file in response to the user input requesting the update to be performed on the file node and updating a local cached copy of the file on a client computer system that hosts the client document manager. The update on the file can reflect the update performed on the file node. Requesting that the server perform the corresponding update on the file can be performed asynchronously with the user input requesting the update.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

