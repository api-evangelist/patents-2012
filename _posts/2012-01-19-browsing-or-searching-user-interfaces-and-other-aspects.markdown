---

title: Browsing or searching user interfaces and other aspects
abstract: This description relates to systems, methods and software architectures for providing previews of files, such as previews of content of the files without launching the applications which created those files. In one embodiment, a method includes receiving a first call, through a first API to obtain a preview of content of a file, the first call being made by a first application program and being received by a preview generator daemon, and generating a request to obtain a first plug-in from a set of plug-ins, the first plug-in being configured to process a file type of the file to produce content in a format which can be displayed by the first application program. Other methods, systems, computer readable media and software architectures are disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08397246&OS=08397246&RS=08397246
owner: Apple Inc.
number: 08397246
owner_city: Cupertino
owner_country: US
publication_date: 20120119
---
This application is a continuation of U.S. application Ser. No. 11 760 760 filed Jun. 9 2007 now U.S. Pat. No. 8 104 048. which is a continuation in part of and claims the benefit of the filing date of co pending U.S. application Ser. No. 11 499 017 filed Aug. 4 2006.

Modern data processing systems such as general purpose computer systems allow the users of such systems to create a variety of different types of data files. For example a typical user of a data processing system may create text files with a word processing program such as Microsoft Word or may create an image file with an image processing program such as Adobe s PhotoShop. Numerous other types of files are capable of being created or modified edited and otherwise used by one or more users for a typical data processing system. The large number of the different types of files that can be created or modified can present a challenge to a typical user who is seeking to find a particular file which has been created.

Modern data processing systems often include a file management system which allows a user to place files in various directories or subdirectories e.g. folders and allows a user to give the file a name. Further these file management systems often allow a user to find a file by searching for the file s name or the date of creation or the date of modification or the type of file. An example of such a file management system is the Finder program which operates on Macintosh computers from Apple Inc. of Cupertino Calif. Another example of a file management system program is the Windows Explorer program which operates on the Windows operating system from Microsoft Corporation of Redmond Wash. Both the Finder program and the Windows Explorer program include a find command which allows a user to search for files by various criteria including a file name or a date of creation or a date of modification or the type of file. However this search capability searches through information which is the same for each file regardless of the type of file. Thus for example the searchable data for a Microsoft Word file is the same as the searchable data for an Adobe PhotoShop file and this data typically includes the file name the type of file the date of creation the date of last modification the size of the file and certain other parameters which may be maintained for the file by the file management system.

Certain presently existing application programs allow a user to maintain data about a particular file. This data about a particular file may be considered metadata because it is data about other data. This metadata for a particular file may include information about the author of a file a summary of the document and various other types of information. A program such as Microsoft Word may automatically create some of this data when a user creates a file and the user may add additional data or edit the data by selecting the property sheet from a menu selection in Microsoft Word. The property sheets in Microsoft Word allow a user to create metadata for a particular file or document. However in existing systems a user is not able to search for metadata across a variety of different applications using one search request from the user. Furthermore existing systems can perform one search for data files but this search does not also include searching through metadata for those files.

Methods for managing data in a data processing system and systems for managing data are described herein.

A method of managing data in one exemplary embodiment includes displaying a first display area for displaying two dimensional 2 D representations of documents matching a search query the first display area configured to display content of the documents which can have a plurality of different types of content including at least one of text based content and a folder and the method further includes displaying a second display area for selecting a selected document to be displayed in the first display area. In at least certain embodiments the content of the selected document can be zoomed from the first display area to display an enlarged view or may be presented as multiple pages which are selectable such that the document can be viewed one page at a time or several pages at a time. In certain embodiments the first display area and the second display area are adjacent each other in the same moveable closeable resizeable and minimizeable window which includes user interface objects to receive user inputs to move the window close the window resize the window maximize the window and minimize the window. Further the window may include various user interface objects which allow the user to pick between different views including a view which includes the first display area and the second display area. In at least certain embodiments the first display area may be referred to as a cover flow view area and the second display area may be referred to as a list display view area. In at least certain embodiments the method may include the performance of a search through metadata for various different kinds of documents as well as an index database which includes a full text inverted database containing the full text of the content of the documents within a data processing system. In certain embodiments the documents may be organized and stored in a hierarchical file system and a user interface program such as the Finder from Apple Inc. of Cupertino Calif. or Windows Explorer from Microsoft of Redmond Wash. may be provided to allow the user to manage the location etc. of the documents and files maintained by the hierarchical filing system HFS .

In at least certain embodiments a user may select a document in the list view and this causes the documents in the cover flow view to scroll in order to show the same document in the selected document position of a cover flow view. In certain embodiments scrolling of the documents in the cover flow view is linked to the scrolling of documents in the list display view area such that scrolling in one area is matched by and coordinated with scrolling in the other area. In at least certain embodiments the list display view area displays at least a portion of the documents matching the search query and the order of the documents in the list view area matches the order of the documents shown in the cover flow view area which also shows documents matching the search query. The cover flow view area typically includes one set of documents on one side of the selected document and another set of documents on the other side of the selected document the spacing between the documents is not uniform. In at least certain embodiments documents on the left side of the selected document appear to be facing towards the right and therefore towards the selected document while documents on the right side of the selected document appear to be facing towards the left side and therefore towards the selected document. The apparent direction each set of documents faces may be achieved by providing a perspective view in which one side of the document is longer than another side of the document even though in fact the underlying document has sides that are equal and parallel.

According to another aspect of the inventions described herein a method of managing data in one exemplary embodiment includes displaying a first display area for displaying two dimensional representations of at least a portion of files and folders in a hierarchical file system the first display area configured to display content of the files in the first display area and displaying a second display area for selecting a selected document to be displayed in the first display area wherein the second display area displays the two dimensional representations of at least a portion of the files and folders in the hierarchical file system. In this method the first display area and the second display area may be a cover flow view area and a list display view area respectively each of which are adjacent to each other in the same window which is moveable resizeable closeable minimizeable and maximizeable. The window may include various user interface objects which allow a user to close minimize maximize resize or move the window. Further the window may include user interface objects which allow a user to input various commands for operating on the files in the hierarchical file system such as commands to move a file in the hierarchical file system HFS or create a copy of the file in the HFS or delete a file or create a new folder in the HFS or move a folder in the HFS or create a copy of the folder or delete the folder or move a file from a first folder to a second folder etc. Each view area such as the cover flow view area and the list display view area may include scroll control user interface objects such as a scroll bar and scroll arrows for allowing the user to scroll the views in each display area. The scrolling may be linked or not linked depending on the implementation.

According to another aspect of the inventions described herein a method of managing data in one exemplary embodiment includes displaying an icon of a folder wherein the icon of the folder is at least partially transparent to show icons at least partially within the folder and displaying a set of icons at least partially within the icon of the folder. In at least certain embodiments the icons may rotate within the icon of the folder to display after a sufficient amount of rotating all viewable files in the folder and wherein the folder represents a subdirectory in a hierarchical file system. In at least certain embodiments the set of icons are animated to display at least a subset of the icons over a period of time. The set of icons may be animated by one of rotating over time the icons in the set of icons or shuffling over time the icons in the set of icons or displaying momentarily and sequentially each of the icons in the set of icons etc. The icons in the set of icons in the folder may be at least one of graphical images or thumbnails of content of files represented by the icons.

Another method of managing data in one exemplary embodiment includes displaying an icon of a folder which includes files represented by the icons the files being in a hierarchical file system and displaying automatically without user interaction with the icon of the folder an animation presenting a content or representation of each of the files wherein a subset of the files is shown after a sufficient period of time. The animation may present the content or representation at least partially within the icon of the folder. The icon of the folder may or may not be transparent and the animation may present the content or representation on the face of the icon of the folder if the folder is not transparent. The animation may be one of rotating over time the content or representation of each of the files or shuffling over time the content or representation of each of the files or other mechanisms for displaying over time the various icons in the file.

According to another aspect of the inventions described herein methods and software architectures provide previews of files such as previews of content of the files without launching the applications which created those files. In one embodiment a method includes receiving a first call through a first application programming interface API to obtain a preview of content of a file the first call being made by a first application program and being received by a preview generator such as a preview generator daemon which is provided by operating system software and the method also includes generating a request which may be a call through a second API to obtain a first software routine such as a first plug in from a set of software routines such as a set of plug ins which may be extensible wherein the first plug in is configured to process a file type of the file to produce content in a format which can be displayed by the first application program. This method allows at least in certain embodiments for previews of content to be provided to the first application program for a wide variety of different file types e.g. PDF HTML Visio AutoCAD PPT DOC text XLS Excel JPG and other file types noted herein etc. without requiring that the applications which created these files be launched in order to view the content. The first application program may be one of a set of programs including at least one user level program which use this method to present previews of content for example the first application program may be a file management software program e.g. the Finder from Apple Inc. or Windows Explorer from Microsoft or a search software program e.g. Spotlight from Apple Inc. or an email software program or a calendar software program or an instant messaging software program or other software programs.

In at least certain embodiments the first application program e.g. the Finder or Spotlight displays an initial preview of the file in a first view which is one of a list view or an icon view or a cover flow view and wherein the initial preview is not configured to be interactive within the first view in response to user inputs and wherein the content produced through the first plug in is configured to interactively display content of the file e.g. page through or scroll through or browse through the content or zoom or resize the content or playback the content such as playback a movie in response to user inputs. This interactive display of content may also occur in the first view or zoom out from the first view or be layered over the first view. The first application program may also display while displaying the initial preview within the first view other initial previews of other files and data e.g. data within a file such as an address information within a contact address book database within the first view. Further the interactive content displayed through the first plug in may be displayed in the first view while the other initial previews are also being displayed within the first view.

In at least certain embodiments a method may further include generating a second call to a file system program to obtain an identifier of the file type of the file and receiving the identifier of the file type in response to the second call wherein the identifier is used to select the first plug in from the set of plug ins.

In at least certain embodiments the content produced through the first plug in is displayable by the first application program without further conversion of data in other embodiments the content produced through the first plug in may be in a standard format e.g. HTML text PDF JPG which can be processed through the first application to generate displayed content.

Software architectures are also described and these may include a preview generator daemon which interfaces with applications e.g. Finder which make calls to the preview generator daemon through a first application programming interface API . The preview generator daemon may in response to those calls request plug ins to provide the content of the files for a preview of that content without launching the applications which created those files.

Other aspects of the present inventions include various data processing systems which perform these methods and machine readable media which cause a data processing system to perform various methods described herein.

The subject invention will be described with reference to numerous details set forth below and the accompanying drawings will illustrate the invention. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of the present invention. However in certain instances well known or conventional details are not described in order to not unnecessarily obscure the present invention in detail.

The present description includes material protected by copyrights such as illustrations of graphical user interface images. The owners of the copyrights including the assignee of the present invention hereby reserve their rights including copyright in these materials. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office file or records but otherwise reserves all copyrights whatsoever. Copyright Apple Inc. 2007.

As shown in the computer system which is a form of a data processing system includes a bus which is coupled to a microprocessor s and a ROM Read Only Memory and volatile RAM and a non volatile memory . The microprocessor may be a microprocessor from Intel or a G3 or G4 microprocessor from Motorola Inc. or one or more G5 microprocessors from IBM. The bus interconnects these various components together and also interconnects these components and to a display controller and display device and to peripheral devices such as input output I O devices which may be mice keyboards modems network interfaces printers and other devices which are well known in the art. Typically the input output devices are coupled to the system through input output controllers . The volatile RAM Random Access Memory is typically implemented as dynamic RAM DRAM which requires power continually in order to refresh or maintain the data in the memory. The mass storage is typically a magnetic hard drive or a magnetic optical drive or an optical drive or a DVD RAM or other types of memory systems which maintain data e.g. large amounts of data even after power is removed from the system. Typically the mass storage will also be a random access memory although this is not required. While shows that the mass storage is a local device coupled directly to the rest of the components in the data processing system it will be appreciated that the present invention may utilize a non volatile memory which is remote from the system such as a network storage device which is coupled to the data processing system through a network interface such as a modem or Ethernet interface. The bus may include one or more buses connected to each other through various bridges controllers and or adapters as is well known in the art. In one embodiment the I O controller includes a USB Universal Serial Bus adapter for controlling USB peripherals and an IEEE 1394 controller for IEEE 1394 compliant peripherals.

It will be apparent from this description that aspects of the present invention may be embodied at least in part in software. That is the techniques may be carried out in a computer system or other data processing system in response to its processor such as a microprocessor executing sequences of instructions contained in a memory such as ROM RAM mass storage or a remote storage device. In various embodiments hardwired circuitry may be used in combination with software instructions to implement the present invention. Thus the techniques are not limited to any specific combination of hardware circuitry and software nor to any particular source for the instructions executed by the data processing system. In addition throughout this description various functions and operations are described as being performed by or caused by software code to simplify description. However those skilled in the art will recognize what is meant by such expressions is that the functions result from execution of the code by a processor such as the microprocessor .

The method of may be implemented for programs which do not store or provide metadata. In this circumstance a portion of the operating system provides for the capture of the metadata from the variety of different programs even though the programs have not been designed to provide or capture metadata. For those programs which do allow a user to create metadata for a particular document certain embodiments of the present invention may allow the exporting back of captured metadata back into data files for applications which maintain metadata about their data files.

The method of allows information about a variety of different files created by a variety of different application programs to be accessible by a system wide searching facility which is similar to the way in which prior art versions of the Finder or Windows Explorer can search for file names dates of creation etc. across a variety of different application programs. Thus the metadata for a variety of different files created by a variety of different application programs can be accessed through an extension of an operating system and an example of such an extension is shown in as a metadata processing software which interacts with other components of the system and will be described further below.

One particular field which may be useful in the various metadata formats would be a field which includes an identifier of a plug in or other software element which may be used to capture metadata from a data file and or export metadata back to the creator application.

Various different software architectures may be used to implement the functions and operations described herein. The following discussion provides one example of such an architecture but it will be understood that alternative architectures may also be employed to achieve the same or similar results. The software architecture shown in is an example which is based upon the Macintosh operating system. The architecture includes a metadata processing software and an operating system OS kernel which is operatively coupled to the metadata processing software for a notification mechanism which is described below. The metadata processing software is also coupled to other software programs such as a file system graphical user interface software which may be the Finder an email software and other applications . These applications are coupled to the metadata processing software through client application program interface which provide a method for transferring data and commands between the metadata processing software and the software and . These commands and data may include search parameters specified by a user as well as commands to perform searches from the user which parameters and commands are passed to the metadata processing software through the interface . The metadata processing software is also coupled to a collection of importers which extract data from various applications. In particular in one exemplary embodiment a text importer is used to extract text and other information from word processing or text processing files created by word processing programs such as Microsoft Word etc. This extracted information is the metadata for a particular file. Other types of importers extract metadata from other types of files such as image files or music files. In this particular embodiment a particular importer is selected based upon the type of file which has been created and modified by an application program. For example if the data file was created by PhotoShop then an image importer for PhotoShop may be used to input the metadata from a PhotoShop data file into the metadata database through the metadata processing software . On the other hand if the data file is a word processing document then an importer designed to extract metadata from a word processing document is called upon to extract the metadata from the word processing data file and place it into the metadata database through the metadata processing software . Typically a plurality of different importers may be required in order to handle the plurality of different application programs which are used in a typical computer system. The importers may optionally include a plurality of exporters which are capable of exporting the extracted metadata for particular types of data files back to property sheets or other data components maintained by certain application programs. For example certain application programs may maintain some metadata for each data file created by the program but this metadata is only a subset of the metadata extracted by an importer from this type of data file. In this instance the exporter may export back additional metadata or may simply insert metadata into blank fields of metadata maintained by the application program.

The software architecture also includes a file system directory for the metadata. This file system directory keeps track of the relationship between the data files and their metadata and keeps track of the location of the metadata object e.g. a metadata file which corresponds to the data file from which it was extracted created by each importer. In one exemplary embodiment the metadata database is maintained as a flat file format as described below and the file system directory maintains this flat file format. One advantage of a flat file format is that the data is laid out on a storage device as a string of data without references between fields from one metadata file corresponding to a particular data file to another metadata file corresponding to another data file . This arrangement of data will often result in faster retrieval of information from the metadata database .

The software architecture of also includes find by content software which is operatively coupled to a database which includes an index of files. The index of files represents at least a subset of the data files in a storage device and may include all of the data files in a particular storage device or several storage devices such as the main hard drive of a computer system. The index of files may be a conventional indexed representation of the content of each document. The find by content software searches for words in that content by searching through the database to see if a particular word exists in any of the data files which have been indexed. The find by content software functionality is available through the metadata processing software which provides the advantage to the user that the user can search concurrently both the index of files in the database for the content within a file as well as the metadata for the various data files being searched. The software architecture shown in may be used to perform the method shown in or alternative architectures may be used to perform the method of .

The method of may begin in operation in which a notification of a change for a file is received. This notification may come from the OS kernel which notifies the metadata processing software that a file has been changed. This notification may come from sniffer software elements which detect new or modified files and deletion of files. This change may be the creation of a new file or the modification of an existing file or the deletion of an existing file. The deletion of an existing file causes a special case of the processing method of and is not shown in . In the case of a deletion the metadata processing software through the use of the file system directory deletes the metadata file in the metadata database which corresponds to the deleted file. The other types of operations such as the creation of a new file or the modification of an existing file causes the processing to proceed from operation to operation in which the type of file which is the subject of the notification is determined. The file may be an Acrobat PDF file or an RTF word processing file or a JPEG image file etc. In any case the type of the file is determined in operation . This may be performed by receiving from the OS kernel the type of file along with the notification or the metadata processing software may request an identification of the type of file from the file system graphical user interface software or similar software which maintains information about the data file such as the creator application or parent application of the data file. It will be understood that in one exemplary embodiment the file system graphical user interface software is the Finder program which operates on the Macintosh operating system. In alternative embodiments the file system graphical user interface system may be Windows Explorer which operates on Microsoft s Windows operating system. After the type of file has been determined in operation the appropriate capture software e.g. one of the importers is activated for the determined file type. The importers may be a plug in for the particular application which created the type of file about which notification is received in operation . Once activated the importer or capture software imports the appropriate metadata for the particular file type into the metadata database such as metadata database as shown in operation . Then in operation the metadata is stored in the database. In one exemplary embodiment it may be stored in a flat file format. Then in operation the metadata processing software receives search parameter inputs and performs a search of the metadata database and optionally also causes a search of non metadata sources such as the index of files and causes the results of the search to be displayed in a user interface. This may be performed by exchanging information between one of the applications such as the software or the software or the other applications and the metadata processing software through the interface . For example the file system software may present a graphical user interface allowing a user to input search parameters and allowing the user to cause a search to be performed. This information is conveyed through the interface to the metadata processing software which causes a search through the metadata database and also may cause a search through the database of the indexed files in order to search for content within each data file which has been indexed. The results from these searches are provided by the metadata processing software to the requesting application which in the example given here was the software but it will be appreciated that other components of software such as the email software may be used to receive the search inputs and to provide a display of the search results. Various examples of the user interface for inputting search requests and for displaying search results are described herein and shown in the accompanying drawings.

It will be appreciated that the notification if done through the OS kernel is a global system wide notification process such that changes to any file will cause a notification to be sent to the metadata processing software. It will also be appreciated that in alternative embodiments each application program may itself generate the necessary metadata and provide the metadata directly to a metadata database without the requirement of a notification from an operating system kernel or from the intervention of importers such as the importers . Alternatively rather than using OS kernel notifications an embodiment may use software calls from each application to a metadata processing software which receives these calls and then imports the metadata from each file in response to the call.

As noted above the metadata database may be stored in a flat file format in order to improve the speed of retrieval of information in most circumstances. The flat file format may be considered to be a non B tree non hash tree format in which data is not attempted to be organized but is rather stored as a stream of data. Each metadata object or metadata file will itself contain fields such as the fields shown in the examples of . However there will typically be no relationship or reference or pointer from one field in one metadata file to the corresponding field or another field in the next metadata file or in another metadata file of the same file type. shows an example of the layout in a flat file format of metadata. The format includes a plurality of metadata files for a corresponding plurality of data files. As shown in metadata file is metadata from file of application A and may be referred to as metadata file A. Similarly metadata file is metadata from file of application B and may be referred to as metadata file B. Each of these metadata files typically would include fields which are not linked to other fields and which do not contain references or pointers to other fields in other metadata files. It can be seen from that the metadata database of includes metadata files from a plurality of different applications applications A B and C and different files created by each of those applications. Metadata files and are additional metadata files created by applications A B and C as shown in .

A flexible query language may be used to search the metadata database in the same way that such query languages are used to search other databases. The data within each metadata file may be packed or even compressed if desirable. As noted above each metadata file in certain embodiments will include a persistent identifier which uniquely identifies its corresponding data file. This identifier remains the same even if the name of the file is changed or the file is modified. This allows for the persistent association between the particular data file and its metadata.

Various different examples of user interfaces for inputting search parameters and for displaying search results are provided herein. It will be understood that some features from certain embodiments may be mixed with other embodiments such that hybrid embodiments may result from these combinations. It will be appreciated that certain features may be removed from each of these embodiments and still provide adequate functionality in many instances.

The combination of text entry region and the search parameter menu bar allow a user to specify a search query or search parameters. Each of the configurable pull down menus presents a user with a list of options to select from when the user activates the pull down menu. As shown in the user has already made a selection from the configurable pull down menu to specify the location of the search which in this case specifies that the search will occur on the local disks of the computer systems. Configurable pull down menu has also been used by the user to specify the kind of document which is to be searched for which in this case is an image document as indicated by the configurable pull down menu which indicates images as the selected configuration of this menu and hence the search parameter which it specifies. The configurable pull down menu as shown in represents an add search parameter pull down menu. This add search parameter pull down menu allows the user to add additional criteria to the search query to further limit the search results. In the embodiment shown in each of the search parameters is logically ANDed in a Boolean manner. Thus the current search parameter specified by the user in the state shown in searches all local disks for all images and the user is in the middle of the process of selecting another search criteria by having selected the add search criteria pull down menu resulting in the display of the pull down menu which has a plurality of options which may be selected by the user.

It will also be appreciated that the various options in the pull down menus may depend upon the fields within a particular type of metadata file. For example the selection of images to be searched may cause the various fields present in the metadata for an image type file to appear in one or more pull down menus allowing the user to search within one or more of those fields for that particular type of file. Other fields which do not apply to images types of files may not appear in these menus in order reduce the complexity of the menus and to prevent user confusion.

Another feature of the present invention is shown in . In particular the side bar region A which is the user configurable portion of the side bar includes a representation of a folder which represents the search results obtained from a particular search which search results may be static or they may be dynamic in that in certain instances the search can be performed again to obtain results based on the current files in the system. The folder in the example shown in represents a search on a local disk for all images done on December 10. By selecting this folder in the side bar region A the user may cause the display in the display region of the results of that search. In this way a user may retrieve a search result automatically by saving the search result into the side bar region A. One mechanism for causing a search result or a search query to be saved into the side bar region A is to select the add folder button which appears in the bottom portion of the window . By selecting this button the current search result or search query is saved as a list of files and other objects retrieved in the current search result. In the case where the search query is saved for later use rather than the saving of a search result then the current search query is saved for re use at a later time in order to find files which match the search query at that later time. The user may select between these two functionalities saving a search result or saving a search query by the selection of a command which is not shown.

The window includes an additional feature which may be very useful while analyzing a search result. A user may select individual files from within the display region and associate them together as one collection. Each file may be individually marked using a specific command e.g. pressing the right button on a mouse and selecting a command from a menu which appears on the screen which command may be add selection to current group or similar such commands. By individually selecting such files or by selecting a group of files at once the user may associate this group of files into a selected group or a marked group and this association may be used to perform a common action on all of the files in the group e.g. print each file or view each file in a viewer window or move each file to a new or existing folder etc. . A representation of this marked group appears as a folder in the user configurable portion A. An example of such a folder is the folder shown in the user configurable portion A. By selecting this folder e.g. by positioning a cursor over the folder and pressing and releasing a mouse button or by pressing another button the user as a result of this selection will cause the display within the display region of the files which have been grouped together or marked. Alternatively a separate window may appear showing only the items which have been marked or grouped. This association or grouping may be merely temporary or it may be made permanent by retaining a list of all the files which have been grouped and by keeping a folder or other representations of the grouping within the user configurable side bar such as the side bar A. Certain embodiments may allow multiple different groupings to exist at the same time and each of these groupings or associations may be merely temporary e.g. they exist only while the search results window is displayed or they may be made permanent by retaining a list of all the files which have been grouped within each separate group. It will be appreciated that the files within each group may have been created from different applications. As noted above one of the groupings may be selected and then a user may select a command which performs a common action e.g. print or view or move or delete on all of the files within the selected group.

The window shown in includes a display region which shows the results of a search these results may be shown dynamically as the user enters search parameters or the results may be shown only after the user has instructed the system to perform the search e.g. by selecting a perform search command . The window includes conventional window controls such as a resizing control a scrolling control a title bar which may be used to move the window a window close button a window minimize button and a window resize button and respectively. The window also includes a user configurable side bar region A and a system specified side bar region B. It can be seen from that a browse mode has been selected as indicated by the highlighted browse icon C in the system specified side bar region B. The window also includes a text entry region which a user may use to enter text for a search and the window also includes view selector buttons .

A column of window allows a user to select various search parameters by selecting one of the options which in turn causes the display of a submenu that corresponds to the selected option. In the case of the user has selected the kind option and then has used the submenu to select the photos option from the submenu resulting in an indicator photos to appear in the column under the kind option as shown in . It can also be seen that the user has previously selected the time option in the column and has selected from a submenu brought up when the time option was selected the past week search parameter. When the user has finished making selections of the various options and suboptions from both the column and any of the corresponding submenus which appear then the display showed in appears. Note that the submenus are no longer present and that the user has completed the selection of the various options and suboptions which specify the search parameters. Column in provides feedback to the user indicating the exact nature of the search query in this case a search for all photos dated in the past week and the results which match the search query are shown in the display region .

The window shown in shows the activation of a menu by selecting the search button A causing a display of a menu having two entries and . Entry displays recently performed searches so that a user may merely recall a prior search by selecting the prior search and cause the prior search to be run again. The menu selection allows the user to clear the list of recent searches in the menu.

The search results user interface shown in presents only a limited number of matches or hits within each category. In the particular example of these figures only the five top most relevant or most highly sorted hits are displayed. This can be seen by noticing the entry at the bottom of each list within a group which specifies how many more hits are within that group these hits can be examined by selecting this indicator such as indicator which causes the display of all of the items in the documents category or kind for the search for button which was entered into the text entry region . Further examples of this behavior are described below and are shown in conjunction with . It will be appreciated that window is a closeable and resizable and moveable window and includes a close button and a resizing control A.

Another aspect of the present inventions relates to previews displayed within search results windows which are at least one of being resizeable zoomable or pageable through. For example a first representation of a first file found by the search may be at least one of being resizeable or zoomable or scrollable or pageable through within a display region such as a window which contains the results of the search. shows an exemplary method for performing at least some of the functionality of this aspect. In operation a user s search input is received by a data processing system which in turn in operation performs the search and then presents the search results based on the user s search input. In addition the results are presented such that for at least one file which was found by the search the file is represented by a preview or other representation of the file where the preview or other representation is either resizeable or zoomable or scrollable or pageable through or a combination of those capabilities. For example if the file which is found is a picture file then a thumbnail of the picture file may be the representation which is resizeable within the search results window such that it can be enlarged in size or decreased in size on the display device within the search results window. Further the picture which is a thumbnail which represents the file may be zoomable in that the content of the representation may be zoomed in e.g. magnified or out e.g. demagnified while maintaining the same area or size of the representation. In addition or alternatively the content in the representation may be pageable in that multiple different pages of the content may be displayed either sequentially over time by paging through the multiple pages in sequence as if one were flipping through pages in a book or multiple pages may be spread out concurrently. One or more of these actions may be possible depending upon the particular type of content. Images will typically be resizeable or zoomable or scrollable and may also be pageable for example. In at least certain embodiments of the present invention as shown in operation the representation within the search results window may be resized or scrolled or zoomed or paged through without having to launch the application which created the content.

A preview at least in certain embodiments can apply to files or other objects e.g. records emails messages vCards etc. . A single page preview can be used for a thumbnail or in any situation where a single image is needed to provide a preview of an item. Multiple items can be previewed at once and compared or viewed in sequence. When multiple items are previewed at once they can be of any file type including many different file types. The previews can be shown in the same window as the search results window or in a separate window or in a layer that is overlaid above the item shown in a search result which is being previewed in the layer above.

A preview may be presented using a variety of different implementations such as a plug in implementation which uses one or more plug ins such as a QuickTime plug in etc. Each of the previews may be formatted in one of several standard data file types such as PDF text HTML JPEG a movie format or a sound music format . The previews may be either generated by the application which created the item or file represented by the preview when the item or file is stored or may be generated dynamically when needed. A dynamically generated preview may be produced by invoking a generator plug in that translates the native format of the item being previewed to one of the standard data file types e.g. PDF text HTML JPEG a standard movie format or a standard sound music format . A preview generator plug in may be loaded in a separate process to protect against failures and or security vulnerabilities. Alternatively a trusted generator plug in e.g. QuickTime or a set of such plug ins may be loaded directly in the process of presenting the search results and such plug ins may be used to present the previews. A preview generator may be capable of handling multiple preview requests concurrently and the preview generator and or the search software controlling the search results window may manage a queue of preview requests and the search software can cancel or reorder the preview requests in the queue.

The following figures show examples of previews or other representations which are resizeable or zoomable or scrollable or pageable through. shows an example of a preview displayed on a display device either within a search result window or as an overlay on the window. The preview is scrollable and resizeable it may be scrolled using any one of the scroll controls and or . It may be resized using the resize control . shows a preview which can display multiple documents or items in a scrollable format. The view shown in of the preview shows only one document and another document can be selected for viewing using interface controls and . The view of preview is scrollable using scroll controls A and or B. The view of preview is also resizeable using resize control . The user can also switch to display multiple documents or items at once in the view of preview by selecting the user interface control which will cause the preview shown in to appear similar to the preview shown in which shows multiple documents concurrently. The preview shown in may also be scrollable.

Previews or other representations which are resizeable or scrollable or zoomable or pageable through may also be provided in other user interfaces which may include alternative types of views such as a cover flow view which is further described below. provides an example of one method of using a cover flow view such as the cover flow view area shown in . In operation a data processing system displays one or more windows containing a user interface of a file system such as a hierarchical file system HFS or a user interface of a search software such as the search software known as Spotlight from Apple Inc. of Cupertino Calif. The window is an example of a window containing a user interface of a file system in this case the file system user interface is the program Finder from Apple Inc. Another example of a user interface for a file system is the user interface provided by the Windows Explorer computer program from Microsoft. An example of a window which contains a user interface of a search software such as the search software Spotlight is the window shown in . These windows may be moveable resizeable closeable and be able to overlap with other windows. For example other windows may partially cover the window displayed in operation or the window displayed in operation may cover other windows. Moreover the window may be moveable around the display device e.g. by positioning a cursor over a portion of the window such as the title bar of the window and by then moving the cursor after the title bar has been selected by a user to thereby move the window and the window may be resizeable by using one or more user interface objects as is known in the art or closeable or minimizeable. In operation the data processing system may display user selectable view options for displaying files and folders. These view options may include an icon view or a list view or a column view or a cover flow view. One or more of these view options may be selected by a user through a user interface object such as the icon view user interface object or the list view user interface object or the column view user interface object or the cover flow view user interface object shown in . These selectable view options may be displayed within the window displayed in operation or in another part of the user interface such as in a menu bar or other selectable menu object or a dock such as dock . In operation the data processing system may display scrolling user interface objects which may include arrow user interface objects such as the up scroll user interface object and the down scroll user interface object shown in . These scrolling user interface objects may allow scrolling of one or more views either concurrently or separately as further described below. Each view may include its own set of scrolling user interface objects or a single set of scrolling user interface objects may be used to scroll both views if the scrolling is concurrent or linked as further described below. In operation the data processing system may receive one or more user commands from the cover flow view area or from other view areas to perform file system operations such as creating a new folder in the HFS and the system responds by performing these operations. Commands may be received through various user interface objects including pull down menus on a menu bar such as the menu bar shown in or a contextual command user interface object such as the contextual command user interface object or through a dragging and dropping manipulation on an icon representing the document or file from one window to another window or within the same window etc. These user interface objects may be in the same window as the window displayed in operation or in different or other portions of the user interface displayed on the display device of the data processing system. In addition to or instead of user commands to perform file system operations the data processing system may receive user commands requesting a zoom or a scroll or a page through or a resizing of content displayed within the cover flow area as further described below. The data processing system may also in operation display user selectable options to sort a list or flow view either concurrently or separately. These user selectable options may include options to sort by the name of a file or the type kind of file or the date last used or other parameters which may be used to sort files in either a list view or other types of views such as an icon view or column view or a cover flow view as described further below.

It will be understood that the method shown in is one general example of a use of a cover flow view to display content within a file system and to receive commands for the file system through the cover flow view such as through direct manipulation of icons representing documents in the cover flow view. Further the method of may also be used in the context of receiving search inputs and providing the search results through software which provides a user interface for searching for files in a file system such as an HFS. It will be appreciated that the operations shown in as in other flow charts described herein may be performed in a different order and may include fewer operations than shown in or may include more operations than shown in .

The window also includes a search input field A into which a user may enter one or more search terms to cause the data processing system to perform a search such as the searches described above through metadata and or one or more indexes of the full content of files such as text files. The user interface may also include a search input menu area B which may be activated by the user e.g. by clicking in the area on an icon in the area to cause the display of another search input field into which a user can enter one or more search terms to cause a search to also be performed as described above. The window may also include one or more icons which a user can select to select one or more views within the window . Examples of such icons are the icons and shown in the upper portion of the window . In particular the icon view interface object may be selected by a user to cause the display of files within a particular folder or group of folders in an icon view manner as is known in the art. The selection of the list view user interface object will cause the display of files in a list such as in a manner which is similar to the list display view area this list will typically include one or more columns such as name kind and last used date as shown in which can be used to sort the list in a variety of different ways as is described further below in conjunction with for example . The column view user interface object may be selected by the user to cause a column view as is known in the art. Lastly the cover flow view user interface object may be selected to cause a cover flow view which may be a view of the cover flow view area by itself or a view with the cover flow view area and the list display view area such as the list display view area as shown in . The window may also include a close window user interface object and a maximize window user interface object which operate to close and maximize the window respectively as is known in the art. The window may also include a back control user interface object and a forward control user interface object which operate to toggle the contents of the window back or forward through a history list of the window s previous displays as is known in the art. The window may also include a contextual command user interface object which when activated or selected presents a menu of options such as the menu shown as menu or other menus from which a user can choose one or more commands depending on the context of the system. These commands may be commands to perform file system operations such as moving or copying files or creating a folder or other operations including search operations. The window may also include one or more scroll control user interface objects for the side bar region such as the scroll control user interface objects which may be used to scroll up and down the side bar region . The window may also include a resize control user interface object which may be selected by a user and then dragged by the user to resize the window as is known in the art.

The window may have two sets of scroll control user interface objects. One set may control scrolling within the cover flow view area and the other set may control scrolling within the list display view area. The scrolling of one view area may be linked to the scrolling of the other view area such that activation of a scroll control in one of the sets to cause scrolling in one view area will also cause a corresponding scrolling in the other view area. In alternative embodiments the scrolling may not be linked such that one area can be scrolled independently of the other area for example scrolling the list display view area does not cause scrolling in the cover flow view area in this alternative embodiment. The scroll controls for the cover flow view area include the scroll bar control object which may be dragged or moved by a user and it further includes the left scroll user interface object which acts like a left scroll arrow and the right scroll user interface object which acts as a right scroll arrow. Together these three objects are part of the scroll control user interface object . The scroll controls for the list display view area include a scroll bar control object and an up scroll user interface object and a down scroll user interface object to cause scrolling in a known manner. The cover flow view area includes a set of documents on one side of the selected document in the cover flow view area and another set of documents or files on the other side of the selected document . In particular document and another document are on the left side of the selected document and the documents and are on the right side of the selected document . As can be seen from the density of documents on either side of the selected document is higher than the density of documents between the rightmost edge of document and the leftmost edge of document . In other words the selected document in the cover flow view is spaced apart from the collection of documents on either side of it. Furthermore in the cover flow view the documents on either side of the selected document are shown in perspective view such that the documents on the left side appear to face the selected document while the documents on the right side appear to face the selected document. Also when several documents are on one side of the selected document at least some of the documents are covered by other documents on that side in other words on that side the documents are arranged in an overlapping manner. Further when a document moves from one side of the selected document to the other side of the selected document its content will appear to change the direction in which it faces. This can be seen by comparing document in with document in . In the case of the document appears to face towards the right side which is towards the selected document while in the document appears to face towards the left which is also towards the selected document in . As the document moves across the selected document position in the middle of the cover flow area the direction of its content appears to switch. This may again be due to the perspective view in which the document appears to be angled. This may also be due to the use of different lengths of sides for two parallel sides of a thumbnail or icon in the cover flow view. For example document appears to have two parallel sides which are vertical but which do not have an equal length even if the document represented by document in fact has two such sides which are of equal length. This can also be seen by comparing the two vertical sides of the thumbnail in .

It will be appreciated that the files and items displayed in the cover flow view and in the list view and respectively may include a variety of different documents of a variety of different types such as text files PDF files picture files such as JPG files web page e.g. HTML files Microsoft Word or Excel files movie files other files and other file types noted herein and folders or subdirectories as is commonly found in file management software such as the Finder or Windows Explorer. These folders may be containers for other documents in a hierarchical file system as is known in the art.

In addition to the use of a cover flow view for a view of files and folders in either or both of a file management software program such as the Finder or a search software program such as Spotlight a cover flow view may also be provided in open or save as windows which are presented displayed to a user to allow the user to open an existing file from within an application such as a word processing or image processing or web browsing application or to save a file from within such application.

The user interface shown in shows how the user or the system can change the selected document within the list display view area and thereby cause the change in the selected document shown in the cover flow view area. In the case of the user or the system has selected as the selected document the document entitled Sales Help thereby causing this document to also appear as the selected document in the cover flow view area . In the case of the user interface shown in the user or the system has selected the document MaxServ as the selected document which has in turn caused the selected document to appear as document in the cover flow view area . In some embodiments the selected document may be selected by selecting a document e.g. document in the cover flow view to change the selected document in both views.

An example of the use of the manipulation of a document or file from within the cover flow view area will now be provided relative to the method shown in in conjunction with C D E F G H and I. The method shown in may begin in operation in which a window is displayed by the data processing system. The window may have a user interface of a cover flow view and optionally may also display a list view within the same window. An example of this operation is shown in in which the window includes a cover flow view area and a list display view area in the same window . In operation the data processing system receives a user s command to zoom or page through or scroll through a document shown in or selected from the cover flow view area. This command may be through the user s selection of a user interface object or a direct manipulation or a variety of other techniques described herein. For example the user may desire to page through a multiple page document by selecting arrow icons such as the arrow icons or . In other embodiments the user command may be the selection of a scroll control such as one or more of the scroll controls or or shown in in order to cause scrolling through the document. In other embodiments the user interface object may when selected cause zooming of the object from one size to another size such as the zooming shown in or the zoomed view shown in or F. The system in operation responds to the user s command to zoom or page through or scroll through the document in or selected from the cover flow view area. Examples of the response of such a system are shown in and E and I for example.

As described above these previews or thumbnails may be shown by a set of software routines such as a set of plug ins which are separate from a file management software program such as the Finder or Windows Explorer. This separation between the plug ins which renders the content and the Finder or other file management software provides security and stability because for example if the plug in crashes the Finder will not. These plug ins may be a standard set of plug ins that translate the native format of an item being previewed into one of a standard data file type such as PDF text HTML JPG a standard movie format or a standard sound music format or into fully rendered content e.g. a bit map . The set of plug ins may be an extensible set of plug ins and may interact with the file management software such as the Finder or Windows Explorer through a set of APIs in which the file management software makes a call to a plug in management daemon which receives the call or API from the file management software or other software program and which in turn asks for the file type e.g. UTI from a file system kernel and matches one of the plug ins in the standard set of plug ins which may be extensible with the file type and which then calls the matched plug in to cause the plug in to load and return the content of the file either in an immediately displayable form or in a standard format as a preview to the file management software which in turn causes the preview to be displayed in for example the cover flow view area. This may occur in response to merely browsing the files through the use of the file management software such as the Finder or through the use of a search software program such as Spotlight to find files and then display previews or thumbnails of files retrieved by the search. As noted above the preview or thumbnail may be generated dynamically upon request rather than when the item or file is stored or created by the application. This dynamic generation may be through an API. It will be understood that a dynamic generation of a preview or thumbnail may be provided without invoking or launching the application which created the file or document. Examples of software architectures to dynamically generate previews are discussed in conjunction with . In addition to a file management software program or a search software program such as Spotlight other software application programs may provide or use application programming interfaces API to request the preview generator or preview daemon to provide a preview or thumbnail of the content of a document within their windows. For example an email program or a calendar program or a video conferencing application or an instant messaging application program or other application programs may also make a call to the preview generator or preview generator daemon to provide the content of a particular file in the manner described herein. In response to the call through an API from the email program or the calendar program or other program the preview generator or preview generator daemon asks the file system for the file type and matches the file type with a plug in having an ability to process that file type and causes that plug in to be loaded for example by calling the plug in through another optional API . The plug in in turn processes the content of the file to generate the preview or thumbnail and provides that content to the original application which requested the content such as the email program or a calendar program or as noted above a file management software. A preview or thumbnail may be provided in an inline preview manner in the cover flow view area or in an icon view or in an inline preview manner within a list view such as the list view shown in which includes a preview or thumbnail view or in a get information or properties panel or window or in other uses.

Another aspect of the inventions described herein relates to the use of animation to display the contents of a folder. This aspect will be shown through the examples given in . shows an example of a method according to one embodiment which uses animations to display at least a subset of icons representing files within a folder. In operation a data processing system displays an icon of a folder the icon being at least partially transparent. shows an example of a folder icon which is at least partially transparent and shows an example of a folder icon which is also partially transparent. In operation the data processing system displays a set of icons at least partially within the icon of the folder. shows an example of icons such as icons and at least partially within the folder icon . shows another example of a set of icons which are at least partially within the folder icon in this case the icons are thumbnails or previews of the documents within the folder. In particular the thumbnails or previews and are shown at least partially within the transparent folder icon . These previews or thumbnails may be generated dynamically and stored temporarily in a cache for the animation as described above to show the actual content of each file represented by the thumbnail or preview such as thumbnail . In alternative embodiments the thumbnail or preview may be generated by the application and stored in the file system as a preview for the particular file and retrieved and used to provide the preview such as the thumbnail . Referring back to operation involves the display by the data processing system of an animation of the set of icons to display at least a subset of the icons over a period of time. The animation may occur automatically without user interaction with the icon of the folder such as the folder icon or may occur in response to user activity such as the selection of a command or in response to the user moving a cursor over the icon of the folder such as the folder icon etc. The animation may involve one or more of a set of changing user interfaces over time. For example the animation may include rotating over time the icons in the set of icons or shuffling over time the icons in the set of icons or displaying momentarily and sequentially each of the icons in the set of icons or displaying momentarily and sequentially a group of the icons in the set of icons or rearranging over time the icons in the set of icons. After a sufficient period of time all of the icons within the folder can be displayed such that a user can by watching the animation determine which files are within the folder. It will be understood that the folder may be a directory or folder in a hierarchical file system HFS which is maintained by file system software and which interacts with file management software such as the Finder or Windows Explorer. The shuffling of icons may be similar to the shuffling of cards in a deck of cards this shuffling animation is shown in the sequence of images provided by D E F and G. In these figures the icons and appear to shuffle one over the other in a manner which is similar to cards in a deck of playing cards. In at least certain embodiments the icons may be displayed within the folder such as folder icon or folder icon at different angles and different orientations as shown in and . This may improve the visibility of the various icons such that more than one icon can be seen within the folder such as the folder icon or . The sequence of the shuffling of the icons may be random or may be in the order selected by a current sorting criteria such as the name of the file or the date last used etc. In certain embodiments the folder icon such as folder icon or may be displayed in any one of an icon view selected through activation of the icon view user interface object or a list view selected through activation of the list view user interface object or a column view selected by activation of the column view user interface object or even a cover flow view activated by selection of the cover flow view user interface object . Hence for example the animation within the folder icon or the folder icon may appear in the cover flow view area to provide the user with an indication of the files and documents within a folder without even requiring the user to open the folder into another view or window.

In the foregoing specification the invention has been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

