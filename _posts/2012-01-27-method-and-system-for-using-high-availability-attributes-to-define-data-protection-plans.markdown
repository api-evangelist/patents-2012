---

title: Method and system for using high availability attributes to define data protection plans
abstract: A data protection agent or server running on a computing device receives a cluster configuration of a high availability cluster. The data protection agent or server identifies highly available data of an application running on the high availability cluster based on the clustering. The data protection agent or server then implements a data protection policy that backs up the highly available data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09275060&OS=09275060&RS=09275060
owner: Symantec Corporation
number: 09275060
owner_city: Mountain View
owner_country: US
publication_date: 20120127
---
Embodiments of the invention relate to the field of data backup and more particularly to using cluster configuration data from a high availability cluster to set backup policies.

Many enterprises have important data that should be backed up for business reasons and or compliance reasons. For example there are compliance guidelines under the Health Insurance Portability and Accountability Act HIPAA to preserve records of complaint for 6 years to preserve certain billing records for 6 years to retain medical records for 5 years and so forth. To back up and protect such data enterprises typically deploy enterprise data protection systems. These systems periodically generate backup copies of specified data and write the backup copies to backup storage devices.

Data protection systems are typically set up and maintained by information technology IT administrators often called backup administrators . Such IT administrators do not typically have detailed knowledge about the systems for which they are to backup data. Accordingly it can be difficult and time consuming for an IT administrator to set up protection policies to backup data for enterprise systems. Often the IT administrator will need to coordinate with a system administrator who manages the system that is to be backed up to determine what data from the system to protect. This can further consume enterprise resources and slow down the process of setting up protection policies. Moreover this can result in backup policies that do not protect sensitive data. Additionally enterprise systems are dynamic in nature. Therefore even if an IT administrator sets up a data protection policy correctly that data protection policy may stop protecting important data in the future unless the IT administrator correctly modifies the policy.

In one embodiment a data protection agent or server running on a computing device receives a cluster configuration of a high availability cluster. The data protection agent or server identifies highly available data of an application running on the high availability cluster based on the cluster configuration. The data protection agent or server then implements a data protection policy to back up the highly available data. In one embodiment the computing device is a node in the high availability cluster and the data protection agent or server backs up the highly available data to a storage device at a time specified in the data protection policy.

In one embodiment the application is a multi tiered application having at least a first tier and a second tier that is depended on by the first tier and the data protection agent or server quiets the first tier and second tier before backing up the highly available data. Quieting the first tier may comprise blocking access to the first tier and performing at least one of writing contents of a first memory at the first tier to a first permanent storage or sending the contents of the first memory to the second tier. Quieting the second tier may comprise writing contents of a second memory at the second tier to at least one of the first permanent storage or a second permanent storage. In one embodiment the multi tiered application comprises a web server tier corresponding to the first tier an application server tier corresponding to the second tier and a database tier.

In one embodiment the highly available data is for a multi tiered application having at least a first tier and a second tier that is depended on by the first tier. In such an embodiment the backup agent or backup server may identify a first subset of the highly available data associated with the first tier and a second subset of the highly available data associated with the second tier. The backup agent or server may record in metadata that the first subset is associated with the first tier and that the second subset is associated with the second tier. The backup agent or server may additionally store the first subset the second subset and the metadata in a backup storage device. In one embodiment the backup agent or server recovers the application the recovery comprising recovering the second tier based on the second subset and subsequently recovering the first tier based on the first subset.

In one embodiment the backup agent or server identifies based on the cluster configuration a primary server and a standby server of the highly available cluster. The backup agent or server then backs up the highly available data from the standby server without interrupting operations of the primary server. In one embodiment backing up the highly available data from the standby server comprises determining that the standby server has received a point in time image from the primary server the point in time image containing the highly available data and generating a backup of the point in time image. In one embodiment the backup agent or server queries the high availability cluster for the cluster configuration via at least one of a command line interface of the high availability cluster a web service of the high availability cluster or an application programming interface of the high availability cluster.

In additional embodiments methods for performing the operations of the above described embodiments are also implemented. Additionally in embodiments of the present invention a computer readable storage media stores methods for performing the operations of the above described embodiments.

A method and apparatus for setting up and implementing data protection policies also referred to herein as backup policies based on cluster configuration data for a high availability cluster are described. A backup agent or backup server receives a cluster configuration determines highly available data from the cluster configuration and generates a backup policy that protects the highly available data. As used herein highly available data is data that is stored on a data store that is highly available and that will be available even if a primary node fails or becomes unresponsive. Such a data store may be a shared data store that is shared between nodes in a cluster and or may be a replicated data store of which multiple nodes have a copy. The backup agent or server then backs up the highly available data according to the backup policy.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

Some portions of the detailed description that follows are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as receiving identifying implementing quieting recording storing or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage devices.

The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

Embodiments of the present invention can automatically identify enterprise assets such as data to protect based on a cluster configuration. The cluster configuration may be provided by a high availability cluster agent or service. Data that is made highly available via the high availability cluster may be identified as important data. Accordingly a backup agent or server may set up a data protection policy to backup such highly available data. Thus embodiments of the present invention can either automatically set up backup policies or provide a backup administrator with information that enables him to set up backup policies. Embodiments of the present invention may simplify and speed up the process of setting up backup policies.

The high availability cluster includes multiple machines which may be classified as primary machines and as standby machines . Primary machines and standby machines may include one or more computing devices such as for example a desktop computer laptop computer server computer etc. configured to perform designated tasks. Primary machines and standby machines may include one or more processing devices memory data stores etc. In one embodiment primary machines and or standby machines are virtual machines that run on top of hosts executing hypervisors. In one embodiment the high availability cluster executes inside a cloud managed by a cloud provider system not shown . In such an embodiment the standby machines and primary machines may be virtual machines hosted on physical machines provided by the cloud provider.

The high availability cluster may include one or multiple active primary machines that may receive requests from clients process the requests and or perform other operations. The high availability cluster may also include one or more standby machines . The standby machines may have a system state that is synchronized with a system state of the primary machine or machines but may not perform any work. Standby machines and primary machines may be virtually identical except that the primary machine is active while the standby machines are in a standby state. The standby machines may be ready to assume work performed by the primary machine at any time. For example if the primary machine crashes or becomes unreachable e.g. due to a network partition then the high availability cluster may fail over to a standby machine .

Primary machines and standby machines may host copies of an enterprise application that provides services to clients on network . Examples of enterprise application include storage applications that provide network storage email applications that handle incoming and outgoing email traffic web applications databases and so forth. The enterprise application may generate and use data that may be important to the enterprise. The data may include for example emails transaction information patient information web server data such as web pages customer information etc.

In one embodiment each machine includes a high availability agent that performs operations with regards to load balancing synchronizing a state between machines and so forth. The high availability HA agents may communicate with each other and or with high availability server to maintain the high availability cluster . In one embodiment the high availability agents maintain the cluster based on a cluster configuration . The cluster configuration may specify what data to replicate between the primary machine and standby machines how and when to failover from the primary machine to a standby machine how many primary machines and how many standby machines to maintain and so forth.

In one embodiment high availability server manages the high availability cluster . HA server may include one or more computing devices such as for example a desktop computer laptop computer server computer etc. configured to perform designated tasks. HA server may include one or more processing devices memory data stores etc. HA server may generate the cluster configuration instantiate the primary and standby machines and perform other management tasks. Alternatively management of the high availability cluster may be performed through consensus by high availability agents running on the machines in the high availability cluster . Accordingly in some embodiments high availability server may not be present.

In one embodiment standby machines and or primary machines include backup agents . Backup agents may facilitate and or perform the backup of high availability data or other data to backup data store . Backup data store may be or include hard disk drives e.g. arranged in a storage area network SAN or network attached storage NAS tape backup a cloud data store etc. Backup agents may coordinate with backup server to backup data.

Backup server may be an enterprise class online backup system such as provided by Barracuda Networks IronMountain CoreVault Rackspace Amazon Simple Storage Service S3 and so on. Alternatively the backup server may be a corporate managed backup system that backs up data items to backup data store controlled by the corporation whose data is being protected. Examples of such corporate backup systems include Symantec Backup Exec Symantec NetBackup EMC Networker IBM Tivoli Storage Manager and so on. Backup server may include one or more computing devices such as for example a desktop computer laptop computer server computer etc. configured to perform designated tasks. Backup server may include one or more processing devices memory data stores etc.

Different corporate backup systems may use various combinations of backup agents backup server network appliances and so forth. Backup agents and or backup server backup high availability data according to a backup policy . In one embodiment the backup policy is generated by backup server and transmitted to backup agents . Alternatively the backup policy may be generated by a backup agent and sent to other backup agents . In one embodiment the backup server and or backup agent generates the backup policy based on information from the cluster configuration . The cluster configuration may identify what data used by the high availability cluster is made highly available. For example the cluster configuration may show that a shared disk or file system is used to store data for the high availability cluster . The backup policy may backup data stored to the shared disk or file system. In another example an Oracle server may have multiple database instances running and only one of those database instances may be made highly available. The backup policy may backup data stored at the highly available Oracle database instance but not data stored at the other Oracle database instances. Alternatively the backup policy may backup all of the database instances but give higher priority to the database instance that is made highly available. The backup policy may backup the high availability data to a faster backup store may maintain a higher retention level for the high availability data may create more backup copies of high availability data and or may use a higher backup job priority for high availability data. In another example a file server may have a C drive a D drive and an E drive and the clustering configuration may show that just the D drive is highly available e.g. that the D drive is replicated to standby machines . The backup policy may backup data stored at the D drive but not data stored at the C and E drives. Alternatively the backup policy may backup data stored at the C D and E drives but may assign a higher priority to the D drive maintain high redundancy for backup data from the D drive may backup the D drive more quickly and or more frequently etc.

In one embodiment the backup server and or backup agent generates a backup policy that protects highly available data . Highly available data also referred to herein as availability data may be any data that an administrator has determined to be important enough to make highly available. Possible examples of such high availability data include email data customer data patient data transaction data web site data etc.

In one embodiment backup agents and or the backup server backup high availability data from a standby machine without interrupting operations of the primary machine . Since the standby machines are synchronized to the primary machine backing up from a standby machine provides a consistent copy of a state of the application and or of the high availability data . In one embodiment the HA agent on the primary machine periodically takes a snapshot a point in time image of the state of the application at the primary machine including the state of the high availability data and sends this snapshot to the high availability agents on the standby machines . In response to a standby machine receiving the snapshot the backup agent or the backup server may backup a copy of the snapshot or a portion of the snapshot to backup data store . To enable such a backup policy that takes advantage of synchronization between the primary machine and the standby machines the backup agents and or backup server should have information identifying the primary machine and the standby machines . Specifically backup agents and or backup server may have information about storage devices used to store primary data and also other storage devices that host replicated data. For a backup policy to take advantage of such an architecture knowledge of both these storage devices may help the generation of the policy. This information may be included in and or derived from the cluster configuration .

In one embodiment backup agents running on standby machines and or primary machines perform backup independent of backup server or any remote backup system. In such an embodiment backup agents may backup data to backup data store without communicating with backup server . In another embodiment backup is performed without use of backup agents . For example backup server may access high availability data on standby machines and or primary machines without use of a backup agent .

Clients may be laptop computers desktop computers mobile phones personal digital assistants PDAs notebook computers tablet computers server computers or other computing devices connected to network . Clients include applications not shown that access request operations from and or query machines of high availability cluster . Examples of applications include an email application e.g. Microsoft Outlook Mozilla Thunderbird Apple Mail etc. an instant messaging application e.g. Yahoo Instant Messenger Windows Live Messenger ICQ etc. a web browser e.g. Google Chrome Microsoft Internet Explorer Apple Safari etc. and so on.

The multi tiered application cluster is a cluster of clusters that is maintained by high availability agents and or a high availability server . The high available agents and or high availability server may be for example components of Symantec s Virtual Business Service VBS cluster system or another clustering solution that allows for multi tiered clustering. Each of the clusters may correspond to a different tier or layer of a multi layer application. Most web applications typically implement multiple layers or tiers of functionality to operate. For example a common web application may use a database tier an application server tier and the actual web server tier. Components within each of these tiers may have their own resource preferences dependencies and so forth. Additionally these components may operate on a single machine or may operate on different machines. Accordingly in one embodiment the multi tiered application cluster includes a web server tier cluster an application server tier cluster and a database tier cluster . Each of these clusters may include a different collection of machines that provide a particular service or functionality. Note that in alternative embodiments other multi tiered application clusters may be used which may have more fewer or different tiers than those illustrated.

Web server tier cluster may include a collection of linked virtual machines or physical machines each of which may include a copy of a web server configured to serve files such as web pages to clients . Application server tier cluster may include a collection of linked virtual machines or physical machines each of which may include software that provides services for developing deploying and or managing applications in a distributed manner. The application servers may also include application code for executing business logic for services such as email searching electronic commerce etc. Database tier cluster may include a collection of linked virtual machines or physical machines each of which may include a copy of a database and or a database server.

High availability agents running on virtual machines may communicate with other high availability agents running on virtual machines in the same tier cluster and or with high availability agents running on virtual machines in other tier clusters. A cluster configuration may identify the relationships and dependencies between the different tier clusters as well as relationships within tier clusters. For example the cluster configuration may indicate that the web server tier cluster depends on the application server tier cluster and that the application server tier cluster depends on the database tier cluster . The cluster configuration may therefore provide a topology of multi tiered assets which may be defined as multiple different clusters and which together form a larger cluster.

Conventional data backup systems do not protect multi tiered applications as a single asset. For example conventional data backup systems would create separate backups of data from the web server tier from the application server tier and from the database tier without any information on how these backups relate to one another. It can therefore be difficult for a backup administrator to reconstruct a multi tiered application during recovery of a multi tiered application.

In contrast embodiments of the present invention provide a backup system e.g. backup agents and or backup server that can protect the multi tiered application as a single asset. Backup agents running on the virtual machines and or a backup server may generate and implement a backup policy that protects highly available data from some or all of the tier clusters and that maintains relationships between these tiers. For example a backup policy may be set up that protects highly available data from the web server tier that protects highly available data from the application server tier and that protects highly available data from the database tier . Backup agents and or backup server may backup data from multiple tiers as a single image or as separate and distinct images. Backed up data may include metadata that identifies which tier the backup data is associated with and or how the backup data relates to backup data from other tiers. For example the metadata may identify associations and or dependencies between the backup data from the different tiers of a multi tier application. Accordingly the backup agents and or backup server may restore a complex multi tiered application from the backed up data.

In one embodiment in order to generate a consistent backup for the different tiers the backup system e.g. backup agents and or backup server performs a multi step backup. Initially the backup system may quiet also referred to as quiesce the web server tier or other top level tier that is not depended upon by any other tier . Quieting or quiescing the web server tier may include processing all pending requests to the web server tier and blocking any additional accesses and or requests to the web server tier e.g. by clients . Quieting the web server tier may further include writing a memory of the web server tier to permanent storage to a memory of the application server tier and or to a memory of the database tier. Once the web server tier is quieted the backup system may quiet the application server tier or a next tier that the previously quieted tier depends on . Quieting the application server tier may include writing contents of the application server tier s memory to permanent storage and or to a memory of the database tier. Once the application server tier is quieted the backup system may quiet the database tier. Quieting the database tier may include writing data from the database tier s memory to permanent storage. Once all tiers have been quieted the backup system may write web server tier data from permanent storage of the web server tier to the backup data store application server tier data from permanent storage of the application server tier to backup data store and or database tier data from permanent storage of the database tier to backup data store . Note that in many cases there will be no data to back up from the web server tier.

High availability cluster querying module queries a high availability cluster for a cluster configuration . High availability cluster querying module may query a high availability agent or a high availability server via a command line interface a web service and or an application programming interface API of the high availability agent or high availability server to obtain the cluster configuration.

Cluster configuration parser parses the received cluster configuration to determine what data is made highly available by the cluster configuration . The cluster configuration may provide a topology of a high availability cluster including numbers of active and standby servers fault tolerance policies failover policies load balancing policies and so forth. The cluster configuration may further identify data that is made highly available. If the cluster configuration is for a multi tiered application cluster then the cluster configuration may also indicate relationships and dependencies between the different tiers start order for the different tiers stop order for the different tiers etc.

Backup policy generator generates a backup policy to protect the identified highly available data. Backup policy generator may automatically set up a backup policy based on the information from the cluster configuration without receiving any user input. Alternatively backup policy generator may identify highly available data to a backup administrator to enable the backup administrator to set up a backup policy . In such an instance the backup policy may be generated based on user input.

Backup administrators typically know where to back up data to and when to back up data but typically do not know what data to back up. For example in a system with multiple different database instances running a backup administrator does not typically know what is inside of the different databases and therefore does not know which of the database instances to back up. However the backup policy generator can provide such information to the backup administrator or can automatically set up backup policies for the backup administrator that backup highly available data. A backup policy may include information specifying where to backup data to e.g. to a disk drive NAS SAN tape backup cloud storage etc. when to backup data e.g. a backup schedule such as every 10 minutes every night at midnight on weekends etc. and what data to backup e.g. data from a particular share drive database file folder storage device etc. .

Backup module performs backups of highly available data in accordance with the backup policy . At specified times e.g. every hour backup module generates a copy of the highly available data and writes this copy to a backup data store. In one embodiment the copy of the highly available data is a snapshot or point in time image. In one embodiment the copy is recorded as a delta from a previous copy of the highly available data.

Restore module restores an application to a previous state based on a previously generated backup. In one embodiment the previously generated backup is for a multi tiered application and the backup data includes data from multiple tiers. In such an embodiment restore module may restore data for the different tiers in an appropriate order to maintain consistency. In one embodiment restore module first restores a database server tier or other tier that does not depend on any other tier . Restore module may then restore an application server tier or other tier that depends on the already restored tier . Restore module may then restore a web server tier or other tier that depends on the second restored tier . At this stage the multi tiered application may be fully restored. Note that the multi tier application may include more or fewer than three tiers. A three tiered application is merely a common example of a multi tiered application that is provided herein.

In one embodiment backup agent includes a user interface . The user interface may be a graphical user interface command line user interface or other user interface that enables a user to configure the backup policy. Users may for example adjust backup policies control the format of backup data adjust the location to which data will be backed up and so on.

At block processing logic identifies high availability data of an application running on the high availability cluster based on the cluster configuration. The high availability data may be data at a data source that has high availability such as a shared storage or shared file system or a storage area that is replicated between nodes of the high availability cluster for example.

At block processing logic implements a data protection policy to backup up the high availability data. This may include generating a backup policy based on the received cluster configuration. The backup policy may specify data sources to back up a backup schedule and a backup data store or data stores to backup the highly available data to.

At block processing logic initiates a backup according to the backup policy. At block processing logic determines whether the application whose data is to be backed up is a multi tiered application. If the application is not a multi tiered application then the method proceeds to block and processing logic backs up highly available data from a data source specified in the backup policy. If the application is a multi tiered application then processing logic may perform a multi step backup process to ensure that backed up copy is consistent. Accordingly in such an instance the method continues to block .

At block processing logic quiets a first tier of the multi tier application. The first tier may be a tier that no other tiers depend on. A common first tier is a web server tier. Quieting the first tier may include blocking all requests queries accesses etc. to the first tier and flushing contents of the first tier s memory to permanent storage and or to other tiers. Blocked requests accesses queries etc. may be stored in a queue and may be processed by the first tier after the backup is complete.

At block after the first tier is quiet processing logic quiets a second tier. The second tier may be a tier that is depended upon by the first tier. A common second tier is an application server tier. Quieting the second tier may include flushing contents of the second tier s memory to permanent storage and or to a subsequent tier.

At block after the second tier is quiet processing logic quiets a third tier. The third tier may be a tier that is depended upon by the second tier and or the first tier. One common third tier is a database server tier. Note that more or fewer than three tiers may also be used. Three tiers are merely provided herein as an example. Quieting the third tier may include flushing contents of the third tier s memory to permanent storage.

At block after all tiers have been quieted processing logic backs up data from the first tier second tier and or third tier to a backup data store. At block after the data has been backed up processing logic resumes operations of the first tier second tier and third tier. This may include sending any requests access attempts queries etc. sent to the first tier while the backup was being performed which may be stored in a queue. The method then ends.

At block processing logic receives a point in time image that has been sent from the primary server to a standby server. At block processing logic generates a backup of the point in time image based on the backup policy. Processing logic may run on the same machine as a standby server and may retrieve a copy of the point in time image from the standby server. Accordingly processing logic may generate the backup without interrupting operations of the primary server.

At block processing logic prompts a user to select one or more recovery options. The user may select to recover just one tier particular data from a single tier multiple tiers all tiers specific data from multiple tiers etc. Alternatively blocks and may be skipped and processing logic may automatically recover the entire multi tiered application or part of the multi tiered application e.g. just a database server . At block processing logic determines whether a full recovery or a partial recovery is to be performed. If a partial recovery is to be performed the method proceeds to block and processing logic recovers one or more specified tiers. If a full recovery is to be performed the method continues to block .

At block processing logic determines dependencies between the tiers. This information may be included in the application topology information stored in metadata. At block processing logic recovers a third tier a tier that does not depend on any other tiers . One example of the third tier is a database tier. At block processing logic recovers a second tier which depends on the third tier. one example of a second tier is an application server tier. At block processing logic recovers a first tier which depends on the second tier. one example of the first tier is a web server tier. Note that more or fewer than three nodes may be recovered depending on the topology of the multi tiered application. At block processing logic resumes operations of the first second and third tiers. The method then ends.

The exemplary computer system includes a processing device processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processor is configured to execute instructions for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer readable storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting computer readable storage media. The instructions may further be transmitted or received over a network via the network interface device .

In one embodiment the instructions include instructions for a backup agent and or backup server such as backup agent or server of and or a software library containing methods that call a backup agent or backup server. While the computer readable storage medium is shown in an exemplary embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

While the computer readable storage medium may be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description.

