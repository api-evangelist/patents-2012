---

title: Creating, updating, saving, and propagating customized views of table and grid information
abstract: Systems, methods, and computer products that create, update, save, and propagate customized views of table and grid information, including spreadsheets. The embodiment of the invention comprises associating at least one column as a first view of the table, associating at least one column as a second view of the table; and combining the first view with the second view, thereby efficiently creating a third view. Further, the combining includes dragging the second view; and dropping the dragged second view into the first view. The combining also includes creating a thumbnail image representing the first view or the second view. It also comprises updating columns that are shared between views. Additionally, the views may be stored, and new views may be propagated from the stored views.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09053081&OS=09053081&RS=09053081
owner: International Business Machines Corporation
number: 09053081
owner_city: Armonk
owner_country: US
publication_date: 20120224
---
This application is a continuation of and claims the benefit of CREATING UPDATING SAVING and PROPAGATING CUSTOMIZED VIEWS of TABLE AND GRID INFORMATION having application Ser No. 12 553 211 filed Sep. 3 2009 the entire contents of which is incorporated herein by reference.

The present invention is directed to the field of computer based representation of table or data grid information. It is more particularly directed to efficiently creating updating saving and propagating customized views of table and grid information including spreadsheets.

Many businesses store data in formats such as data tables data grids and spreadsheets. A table typically consists of columns that represent attribute types and records that represent specific instances of data that is associated with attribute instances identified in columns.

Large data grids and tables can be difficult to view. This is especially true for grids that contain a large number of columns and require horizontal scrolling across multiple viewing screens. Also existing tables and data grids do not adequately address the issue of viewing multiple columns that are physically separate from each other. Current means of hiding or collapsing columns allow this and allow revealing of particular columns but require extensive time and effort to collapse or reveal columns. They do not allow the user to easily view the desired content in a timely fashion.

In the past spreadsheet technology offered additional solutions to help in viewing data in a large data grid such as locking particular header sections of tables or data grids to allow vertical scrolling in context. Filtering and searching are also methods that enable customized viewing of data in spreadsheets. These methods are typically not efficient to use.

From the foregoing it will be apparent that there is still a need to improve creating updating saving and propagating of customized views of table and grid information including spreadsheets on a computer system.

An embodiment of the present invention relates to systems methods and computer products that efficiently create update save and propagate customized views of table and grid information including spreadsheets. More particularly the present invention enables user friendly easy manipulation of data in a table or grid so that the data can be presented in different views while still maintaining the master view of the data in the table or grid and enabling editing of the data. An embodiment of the present invention for efficiently creating views from the columns of a table comprises associating at least one column as a first view of the table associating at least one column as a second view of the table and combining the first view with the second view thereby efficiently creating a third view. Further the combining may include dragging the second view and dropping the dragged second view into the first view. The combining also may include creating a thumbnail image representing one view dragging the thumbnail image to another view and dropping the thumbnail image into the other view. One embodiment also comprises updating at least one of the columns in the first view or the second view wherein the updated column is automatically updated in the third view. Also the first view may include the original table.

Additionally an embodiment of the present invention comprises associating at least one column in the third view that is also associated with the first view updating that column in the third view and thereby automatically updating the associated column in the first view. Further the third view may be stored and a new view may be propagated from the stored third view.

Other aspects and advantages of the present invention will become apparent from the following detailed description taken in conjunction with the accompanying drawings illustrating by way of example the principles of the invention.

As shown in the drawings and for purposes of illustration an embodiment of the present invention novelly creates updates saves and propagates customized views of table and grid information including spreadsheets. Existing computer systems have not been able to efficiently and adequately create a user friendly way of viewing and propagating updates and changes of selected data in a table and grid including spreadsheets.

The present invention provides a mechanism for creating views from the columns of a table. More particularly the present invention enables user friendly easy manipulation of data in a table or grid so that the data can be presented in different views while still maintaining the master view of the data in the table or grid and enabling editing of the data. Embodiments of this invention aid the user in reviewing or working with data in a table or grid and aid the user in accessing and manipulating data stored in a table. It will be understood by those skilled in the art that a view is a visual representation of one or more rows and one or more columns of a table and may be represented in a graphical user interface GUI .

The present invention novelly enables a user friendly mechanism to create views and persist or save data in various views. The saved data may then be propagated to new views. Further the present invention enables a user friendly mechanism for updating views of the table either the original table view or subsequent table views and thereby propagating the updated data to other views of the table that include the updated data.

It will be understood by those skilled in the existing art that a header in a spreadsheet is used to identify a column in a spreadsheet. It is possible with enough effort by a user to hide particular columns in a spreadsheet report. This may be accomplished by selecting specified columns by the associated header information and identifying those selected columns to be hidden from the current spreadsheet view.

Another existing way of simplifying the view in a spreadsheet is to freeze or lock particular columns or rows. In this manner key columns such as a column having names identifying each entry in a particular row can be locked. Then as a user scrolls across a spreadsheet with a large number of columns the identified column will be retained in the current view while unidentified columns will be scrolled.

Yet another existing way of simplifying the view in a spreadsheet is to filter data. For instance a user can identify a particular entry in a column and execute a command so that the view of the spreadsheet is reduced to just those rows that contain the identified entry in the specified column. This provides a limited view of the table data and the rows associated with the filtered data.

An embodiment of the present invention efficiently creates views of specified columns of a table by associating columns into a first view and associating other columns into a second view. Then the columns identified in the second view can be associated with the first view by data manipulation techniques such as dragging and dropping the columns of the second view into the first view or by highlighting a thumbnail version of the columns in the second view and moving them to the first view. The columns of the second view now associated with the first view are combined to create a third view.

As shown in and in element an embodiment of the present invention may operate in a client server computer system configuration. Therefore a client computer system may communicate with a server computer system during the operation of the present invention. The grid viewing module operates in either the client or the server to perform an embodiment of the present invention. For example information may be communicated to either the server or the client via the user interface or via a network . Data is stored in a table and is used to create views by the grid viewing module . Data may be obtained from a data provider . A data provider is populated with actual data and the actual data may be stored in a storage media . A database is one implementation of a data provider. It will be understood that a view can be stored on a storage media such as the disk as illustrated herein or may be stored in memory as described in or it may be presented to the user without access to storage. The user interface may communicate with an embodiment of the present invention either via batch input or user input .

Further the grid viewing module may be configured in the memory of either the client or the server . Alternatively the grid viewing module may be configured in computer storage such as that of a disk . In an embodiment of the present invention the grid viewing module is configured in computer storage of a disk associated with a client .

The user has also created the following thumbnail portions of the table View Columns as shown in element View Columns as shown in element and View Columns as shown in element . These subset views were selected to illustrate information of particular interest to the user. Elements and are described with reference to . 

While illustrations shown herein use drag and drop and thumbnail technology it will be understood that other alternatives such as those meeting accessibility requirements e.g. voice activated choice of views and the like may be employed.

Each column of Table 1 is associated by name with an actual column of the data provider which identifies the data that is shown in a particular column of Table 1. The combination of a particular row and column in the table identifies a particular value that represents data from the data provider. For example Column Row identifies one particular cell in Table 1 which shows a unique data value of the data provider here having the value . Further illustrating the invention if the user changes any value in a view of Table 1 the change is propagated to the underlying data provider by identifying the cell which changed by its row identifier and column identifier and updating the corresponding row in the data provider accordingly. Likewise if any data changes in the underlying data provider for example because data has changed in the storage media the change is propagated back to Table 1 which may be represented by a view . By means of example and in the embodiment of the present invention repopulating the data in Table 1 with the current data from the data provider may be triggered by an event which is dispatched when data has been updated in the data provider. It will be understood by those skilled in the art that rows may be referred to as records .

Referring now to a first view is identified as shown in element . In an embodiment of the present invention a view is represented herein by the tables described with reference to . In one embodiment of the present invention the following information about the table will be stored name of the view name of the table for which data is displayed and list of the column identifiers which are shown in the view . By means of example the list is called columnList. The data provider such as a database that holds the actual data from the storage media is accessed to populate the table that is used to create the view .

By means of example and referring now to Table 2 Column and Column are selected from Table 1. As shown in which is an example of creating a view the name of the view here View is determined as shown in element . Table 2 illustrates View in the present example. The column names here Column and Column are added into the list columnList as shown in element . Also the data provider is identified from information about Table 1 and is associated with View as shown in element . By using the same data provider as was used for Table 1 it is guaranteed that View is operating on the same set of data as Table 1. Creating View with only the columns that are in columnList results in showing a subset of the columns from the underlying data provider in View .

Referring back to a second view View is identified and created as shown in element . By means of example View may be created in the same way that View is created. In the present example View is shown in Table 3. Referring to View is created by determining the name for the view here View as shown in element . The column names here Column and Column are added into the list columnList of View as shown in element . The data provider is set to the data provider from Table 1 as shown in element . It will be understood that other embodiments of the present invention can operate in a different order such as naming the view after associating the column and creating a new view.

Referring now back to View and View are combined as shown in element . As further shown in element and by means of example dragging and dropping View into View efficiently creates a third view View as shown in Table 4. Referring now to using a mouse or other device to operate the user can drag View into View to create View as shown in element . More particularly and by means of example the user drags View on top of View and drops View on top of View . The act of dragging and dropping is also shown in element . The user creates a new combined view that includes View and View . It will be understood that element is a specific example of the operation described in element . The name of the combined view is set to View herein shown as Table 4 and in element of .

Continuing to refer to the columns of View are used to populate the columnList of View as shown in element . Then each item in columnList of View is checked to determine if the column identifier e.g. column n where n equals 1 to the number of column identifiers already exists in columnList of View as shown in element . If the column identifier doesn t exist as shown in the test of element then it is added to the columnList of View as shown in element . If the column identifier already exists as shown in the test of element the column from View can be ignored as it was shown in both View and View and was already added to View via the use of View as shown in element . When all the column identifiers for View are checked the data provider from either View or View is set as the data provider for View as it is the same data provider. View is created with only the columns from the list columnList of View as shown in element

Referring again to the act of dragging and dropping a second view into a first view as shown in element can be implemented in many ways such as by the use of thumbnails. By means of example and as discussed with respect to and element where the name of View is determined it can be rendered in a thumbnail image that represents View . In one implementation an image in Java technology called BufferedImage is an object which includes the width and height properties for the image and by using different Java application programming interfaces APIs to render images the view may be rendered into the image. The image itself may be held in memory as shown in or alternatively it may be written to a permanent storage media . By means of example a thumbnail of a table may be created by specifying an object as output. The object may be rendered by techniques well know to those skilled in the art such as by painting the object to the application. That is the paint method will write to the canvas of an application the identified object. In this example the identified object is a static in memory image of the table . An example of a thumbnail is shown in element of .

As known to those skilled in the art when the image is resized the values for width and height of the image are changed and the image is rendered based on the new values for width and height. The height and width values for an image may be considered metadata associated with the image. This resizing scales the content of the image accordingly. For example by reducing the width and height by 80 an appropriate thumbnail of the table image can be rendered. The metadata associated with a thumbnail image may also include information about the name of the thumbnail such as View . In one embodiment of the present invention the metadata may be stored in a property list associated with the thumbnail.

Referring now to one embodiment of the present invention creates thumbnails of view objects. Here references related to some of the existing views View and View are stored in a list such as existingViewsList as shown in element . A visual representation herein called a static image such as a view of a table is created to represent the columns of View as shown in element . The static image is resized to a smaller size to create a thumbnail static image of View as shown in element . The static image of View here the thumbnail image may be associated with the name of View by setting the view name property to the name of View so that the data associated with View may be manipulated and later retrieved as shown in element . Using a mouse or other device to operate the user can drag the thumbnail of View into View to create a new View thereby combining both sets of columns of View and View as shown in element .

More particularly and by means of example element may include the steps of dragging the thumbnail of View . There may be a propertyList associated with each thumbnail. The propertyList may include the view name and optional information about the thumbnail. The thumbnail of View is moved on top of View and dropped on top of View . When the thumbnail is dropped the actual view object for View is retrieved by referencing the view name from the propertyList. Then the information about the view is obtained from the existingViewsList. Each item in the existingViewsList is examined and the view name of the thumbnail is compared to the names in the existingViewsList. When the view name match is found the view object is retrieved from the existingViewsList and the searching is stopped.

By means of example and when implementing drag and drop techniques those skilled in the art will understand that there are multiple elements involved. By means of example a drag source which is an object that is eligible for a drag and drop operation will be identified. A drag proxy image which is a placeholder image of the drag source may be created. This drag proxy image is moved until it is dropped onto a valid drop target location. When the drag and drop operation is finished the proxy image is destroyed.

By means of further illustration and referring back to and element the thumbnail of View is identified as a drag source and the propertyList of the thumbnail is updated to indicate that this object is eligible as a source for a drag and drop operation. As shown in element when the user presses the mouse button on top of the thumbnail of View the propertyList is checked to determine if the thumbnail has the property set to be a drag source. Since the property is set the drag operation is started. A static image of the thumbnail of View is created as a copy of the drag source as shown in element . This is the drag proxy image which is moved around while the user is moving the mouse cursor. The mouse movements are captured and the location of the drag proxy image is updated on the screen to follow the mouse cursor. The user moves the mouse cursor on top of View and releases the mouse button as shown in element View is checked to see if it is a valid drop target. Since View is a drop target the drag and drop operation is completed and the proxy image of the thumbnail of View is destroyed.

As illustrated in Table 5 and as taught by the present invention a column in a view may be updated and the modified data value may also be updated in any other view that represents the same data value. More particularly and by means of example updating the data element in Table 5 Column and Row from the value to will result in a change in the data value in all views that obtain that data element from the same data provider. Recall that each view is associated with a data provider that stores the actual data which is displayed in the view . In an embodiment of the present invention when additional views are created the view is associated with the same data provider as the data provider for the initial table to ensure that all views are operating on the same set of data as the original table .

Referring now to an event subscription for a view is added to a data change event which is dispatched by the data provider as shown in element . The event is called herein DataChangeEvent. The DataChangeEvent is dispatched when any data in the data provider has been changed. The DataChangeEvent can contain additional detailed information to identify the data that has changed e.g. sets of row or record identifiers and column identifiers and the new value for a particular cell in the table . An embodiment of the present invention can check whether the data change is relevant to the data that is being displayed as shown in element . Alternatively the DataChangeEvent can be dispatched without providing more detailed information about which specific field has changed. This approach will force all views which subscribe to the DataChangeEvent to update their displayed data as shown in element .

Referring now to Table 5 that illustrates an updated View and by means of example the value of the cell Column and Row is changed to . Each row in the data provider is accessed to determine if the data is associated with Column and Row . When the proper location is identified the data is updated. It will be understood by those skilled in the art that in one embodiment of the present invention the proper location may be identified by first locating the proper row that matches the element identifier. Then the proper column identifier is matched with the column identifier in the columnList.

A DataChangeEvent is dispatched on the data provider to indicate that data has been updated in the data provider. The detail information about the changed data is added to the DataChangeEvent by setting the attributes for the column and row to Column and Row and setting the new value attribute to . Referring back to the present example illustrates changing data that may be checked as described in element . Alternatively the changed data may be identified by use of a general event as described in element .

Referring now to Table 6 and as described with respect to element View is illustrated and uses the same underlying data provider as View and View . Further View is also subscribed to the DataChangeEvent. Therefore View receives the DataChangeEvent which was dispatched in the previous step with respect to Table 5. The detailed information about the data which has changed i.e. in this example Column and Row with new value is retrieved for View . More particularly the columnList of View is examined and each column identifier is compared with the column identifier of the DataChangeEvent to determine whether there is a match. If a match is identified a change of the appropriate data in the proper row is made in View . Here the data in Column and Row is changed to the same changed value in View Column and Row .

Referring now to Table 7 which illustrates updating a value in View the data value in Column and Row is changed from to . The steps for changing the data value in Column and Row described with respect to and to Table 5 are similar to the process of changing the data element in Column and Row .

Table 8 illustrates View after View has been updated as described with respect to Table 5 and after View has been updated as described with respect to Table 7. Since the data element in Column and Row and the data element in Column and Row have both been changed the updated data elements are shown in the updated View illustrated in Table 8. It will be appreciated that updating data elements in View may be completed in the manner described with respect to .

Table 9 illustrates updating the initial view that was described with respect to Table 1. More particularly the data provider may dispatch a data change event called DataChangeEvent when any of the data in the view of Table 1 is changed. Since the data in the view of Table 1 uses the same data provider as View View and View the implementation is similar to the steps described to change a data value in View View or View . More particularly and by means of example the data value in Column and Row of Table 1 is changed to and the data value in Column and Row of the view of Table 1 is changed to . Then an event subscription is added for the DataChangeEvent to View View and View . Two DataChangeEvents are dispatched on the data provider one for the change in Column and Row and one for the change in Column and Row . The detailed information for the changed values is added in each event by setting the attributes for the row identifier the column identifier and the new value. This process is also described with respect to .

Given the change to data that was described with respect to Table 9 any other views that include the same data will be updated. By means of example and as described with respect to Table 10 View will be updated. In one embodiment of the present invention View receives the DataChangeEvent for the data value change in Column and Row . View also receives the DataChangeEvent for the change in Column and Row . Similar to the description of updating a data value in element the columnList of View is traversed and the information is compared to the column identifier of the DataChangeEvent to determine whether there is a match. Alternatively the row identifier is initially checked for a match. Then if a match is found the column identifier is checked for a match. Since there is only a match with Column the data value for Column and Row will be updated as shown in Table 9. Table illustrates an updated View that reflects the change in data value to match the data value in Column and Row of Table 9.

Given the change to data that was described with respect to Table 9 any other views that include the same data will be updated. By means of example and as described with respect to Table 11 View will also be updated. In one embodiment of the present invention View receives the DataChangeEvent for the data value change in Column and Row . View also receives the DataChangeEvent for the change in Column and Row . Similar to the description of updating a data value in element the columnList of View is traversed and the information is compared with the column identifier initially to check for a match. It will be appreciated that the search for a match to Column will fail. So View will not be updated with the change to Column and Row . But the search for a match to Column will succeed. Therefore the data value in Column and Row will be updated to match the data value of Table 9 for Column and Row . Table 11 illustrates an updated View that reflects the change in data value that is illustrated in Table 9.

Table 12 illustrates the updated View that matches the update to View as shown in Table 10 and the update to View as shown in Table 11. The process for updating the data value for View and herein shown in Table 12 is similar to that described with respect to Table 10 and Table 11. In this case the search for a match to Column will succeed and the search for a match to Column will succeed. So the data value in Column and Row will be changed and the data value in Column and Row will be updated to match the respective data values of Table 9.

In a manner similar to changing data values in the original table and propagating the changed data values to the other views having the same data values changes in the views are also propagated back into the original table. More particularly and as described with respect to Table 13 changing a data element in View such as changing Column and Row to will be reflected in the initial view that was described with respect to Table 1. By means of example and in one embodiment of the present invention an event subscription is added for the DataChangeEvent for Table 1. Then the data value in View Column and Row is changed to . A DataChangeEvent is dispatched in the data provider to indicate that data value has been updated in the data provider . Additional information is updated by setting the attributes column identifier to Column and the row identifier to Row and the new value to .

After the updating process for View as described with respect to Table 13 is completed the initial table described with respect to Table 1 is updated. The updated data value is illustrated in Table 14. Since the initial table described with respect to Table 1 uses the same underlying data provider as View View and View and is subscribed to the DataChangeEvent of the data provider the initial table receives the DataChangeEvent which was dispatched for the change to View as described with respect to Table 13. Because the initial table as described with respect to Table 1 shows all the columns of the underlying data provider it is not necessary to check whether the DataChangeEvent is relevant to the particular changed data . Therefore the changed data value information is retrieved. In the present example the changed value for Column and Row is retrieved. The appropriate data value in the view of the initial table here Column and Row data value is updated to . Therefore as shown in Table 14 the data value in Column and Row is updated to . View and View also receive the DataChangeEvent which is dispatched after changing the data in View . Since only View contains Column and Row View will be updated as well.

In addition to data changes propagated from the existing View and View into the newly created View also changes in View will be propagated back into View or View as appropriate. By means of example and as shown in Table 15 an event subscription for the DataChangeEvent is added to View . In View the data value for Column and Row is changed to . A DataChangeEvent is dispatched on the data provider to indicate that data value has been updated in the data provider. The information about the changed data value is provided by setting the attributes for Column Row and the new value .

As a result of the change in data value described with respect to Table 15 View is updated. View receives a DataChangeEvent for the change in Column and Row . After the update operation View is changed as illustrated in Table 16.

By means of example and as illustrated in Table 17 View may be stored and a new view may be propagated from the stored view. That is not only the initial table as described with respect to Table 1 can be used as source to create a new view also any existing or newly created view which may only show a subset of the columns of the initial table may be used as a source to create a new view . For example Column in View may be selected. Then a new view name is set such as View . The Column identifier is added to the columnList of View . The data provider from the View is identified for View . By using the same data provider as View all other views and the initial table it is guaranteed that View is operating on the same set of data as the initial table as described with respect to Table 1. A view may be created with only the columns from the list columnList of View as shown in Table 17.

The RAM the data storage device and the ROM are memory components that store data and instructions for controlling the operation of processor which may be configured as a single processor or as a plurality of processors. The processor executes a program to perform the methods of the present invention as described herein. In one embodiment of the present invention the grid viewing module is a component of the program .

While the program is indicated as loaded into memory such as the RAM or ROM it may be configured for subsequent loading into the data storage device the ROM the RAM or the like via an appropriate storage media interface . While memory is shown as a single entity it may also comprise a plurality of modules. Storage media can be any conventional storage media such as a magnetic tape data storage device an optical storage media a compact disk or a floppy disk. Alternatively storage media can be a random access memory or other type of electronic storage located on a remote storage system and may be connected to a network .

The computer is generally under the control of an operating system that typically supports the functions disclosed herein. Generally the computer programs and operating systems are all tangibly embodied in a computer readable device or media such as the memory the data storage device or the data transmission device thereby making an article of manufacture such as a computer program product according to the invention. As such the terms computer program product as used herein are intended to encompass a computer program accessible from any computer readable device or media.

Moreover the computer programs and operating systems are comprised of instructions which when read and executed by the computer system the server computer system and the client computer system cause the computer system the server computer system and the client computer system to perform the steps necessary to implement and use the present invention. Under control of the operating system the computer programs may be loaded from the memory the data storage device or the data transmission devices into the memories of the computer system the server computer system and the client computer system for use during actual operations. Those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope of the present invention.

The user interface is an input device that interfaces with the user input device to communicate information and command selections to the processor . The user can observe information generated by the system via the display or the printer . The user input device is a device such as a keyboard keypad light pen touch screen track ball audio video player speech recognition subsystem joy stick or the like which allows the user to manipulate a cursor on the display for communicating additional information and command selections to the processor .

When operating in accordance with one embodiment of the present invention the system creates updates saves and propagates data in user defined views of grid information typically by use of the grid viewing module . The processor and the program collectively operate as a module for operating on one embodiment of the present invention. The present invention is typically implemented using one or more computer programs each of which executes under the control of an operating system and causes the computer system the server computer system and the client computer system to perform the desired functions as described herein. The programs may include the grid viewing module in one embodiment of the present invention. Thus using the present specification the invention may be implemented as a machine process method system or article of manufacture by using standard programming and engineering techniques to produce software firmware hardware or any combination thereof. It will be appreciated that the present invention offers many advantages over prior art techniques.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

It should be understood that various alternatives and modifications can be devised by those skilled in the art. However these should not be viewed as limitations upon the practice of these teachings as those skilled in the art when guided by the foregoing teachings may derive other suitable characteristics of a similar or different nature.

The present invention is intended to embrace all such alternatives modifications and variances that fall within the scope of the appended claims

IBM is a trademark or registered trademark of International Business Machines Corporation in the United States and other countries. Java and all Java based trademarks and logos are trademarks of Sun Microsystems Inc. in the United States other countries or both.

