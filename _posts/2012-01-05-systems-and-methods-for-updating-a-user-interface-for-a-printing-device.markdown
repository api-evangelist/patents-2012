---

title: Systems and methods for updating a user interface for a printing device
abstract: Systems and methods for updating a user interface that indicates printing capabilities for a printing device read one or more first printing capabilities from first printing capabilities data, generate a user interface that includes a plurality of interface elements, read one or more second printing capabilities from second printing capabilities data, the one or more second printing capabilities including at least one printing capability different from the one or more first printing capabilities, generate delta printing capabilities data indicating changed printing capabilities based on the one or more first printing capabilities and the one or more second printing capabilities, wherein the delta printing capabilities data includes the at least one printing capability different from the one or more first printing capabilities, and update one or more interface elements associated with the changed printing capabilities indicated by the delta printing capabilities data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141314&OS=09141314&RS=09141314
owner: Canon Kabushiki Kaisha
number: 09141314
owner_city: Tokyo
owner_country: JP
publication_date: 20120105
---
This application is a continuation in part of U.S. application Ser. No. 13 010 460 filed on Jan. 20 2011 which is incorporated by reference in its entirety.

In the field of print processing it is a challenging task for Independent Software Vendors also referred to herein as ISVs to provide a consistent user interface for receiving a desired print intent from a user while supporting private settings for the printers of multiple Independent Hardware Vendors also referred to herein as IHVs . The communication between the Windows print sub system an IHV s plug in driver and an ISV s application causes part of the difficulties because the communication is done thru indexed based binary DevMode and binary DevCaps.

Microsoft introduced a new XML based print schema to address the problems associated with communication between the print subsystem and external applications. The print schema technology uses an XML based public schema to describe printer capabilities device configuration and job formatting settings. Applications can use the XML based schema to provide print dialogs to change print settings. Whenever a user changes a selected option for a setting the changed setting and the respective option is added to a delta also referred to herein as PrintTicket and merged and validated with a specified base PrintTicket to produce a resulting PrintTicket which is used to get a corresponding resulting PrintCapabilities document. The resulting PrintCapabilities document is then used to re populate the user interface also referred to herein as a UI .

In one embodiment a method for updating a user interface that indicates printing capabilities for a printing device comprises reading one or more first printing capabilities from first printing capabilities data generating a user interface including a plurality of interface elements wherein one or more interface elements of the plurality of interface elements are associated with the one or more first printing capabilities reading one or more second printing capabilities from second printing capabilities data the one or more second printing capabilities including at least one printing capability different from the one or more first printing capabilities generating delta printing capabilities data indicating changed printing capabilities based on the one or more first printing capabilities and the one or more second printing capabilities wherein the delta printing capabilities data includes the at least one printing capability different from the one or more first printing capabilities and updating the one or more interface elements associated with the changed printing capabilities indicated by the delta printing capabilities data including the at least one printing capability different from the one or more first printing capabilities wherein at least one interface element is independent from the changed printing capabilities.

In one embodiment a device for updating a user interface that indicates print capabilities for a printing device comprises a computer readable storage device an output interface configured to communicate with a printing device a display interface configured to communicate with a display device and one or more processors configured to execute one or more modules. The device further comprises a print capabilities module configured to read one or more first print capabilities of an associated printing device from first print capabilities data generate a user interface including a plurality of interface elements wherein one or more interface elements of the plurality of interface elements are associated with the one or more first print capabilities read one or more second print capabilities from second print capabilities data the one or more second print capabilities comprising at least one print capability different from the one or more first print capabilities generate delta print capabilities data indicating changed print capabilities based on the first print capabilities and the second print capabilities wherein the delta print capabilities data includes the at least one print capability different from the one or more first print capabilities and update the one or more interface elements associated with the changed print capabilities indicated by the delta print capabilities data including the at least one print capability different from the one or more first print capabilities.

In one embodiment a computer readable storage medium stores instructions that when executed by one or more computing devices cause the one or more computing devices to perform operations comprising reading base print capabilities from base print capabilities data generating a print dialogue interface including one or more fields associated with respective print capabilities wherein the respective print capabilities are set to the base print capabilities reading one or more updated print capabilities from updated print capabilities data and determining different print capabilities based on the base print capabilities and the updated print capabilities. The operations further comprise updating one or more fields in the print dialogue interface that are associated with the different print capabilities and maintaining one or more fields in the print dialogue interface that are not associated with the different print capabilities.

Though the following description is of certain illustrative embodiments alternatives equivalents and modifications are included within the scope of the claims. Additionally the illustrative embodiments may include several novel features and a particular feature may not be essential to practice the systems and methods described herein.

A user and the printing device communicate via the printing user interface device . Information is presented to the user via the display device including information sent by the printing device . The printing user interface device receives user provided information e.g. user selections and relays the information to the printing device .

The printing user interface device includes a print dialogue application and a printer driver . The print dialogue application generates a user interface that presents information to the user and that receives information from the user. The user interface may present the information in the form of a graphical interface that shows printer settings and capabilities and that receives user selections such as selections of an option for a respective setting. The information may also be presented in any other manner that allows a user to view the information and or select one or more options. The display device presents the user interface to the user.

The printer driver receives information performs requested operations and returns requested information if any . For example the print dialogue application invokes the functionality of the printer driver via a function call passes information to the printer driver in the form of parameters of the function call and receives the information returned by the printer driver . The interaction between the print dialogue application and the printer driver may conform to an application programming interface.

The printer driver may convert received information into a format readable by the printing device . For example the printer driver may receive a print job from a software application convert the print job into PDL data for the printing device and transmit the PDL data to the printing device . The printer driver also communicates with the printing device about the status of the printing device e.g. paper level ink level toner level errors selected paper size colors .

The printer driver also adjusts the configuration of the settings of the printing device and tracks the capabilities of the settings. Settings include but are not limited to media size borderless printing duplexing media type resolution colors orientation copying collating media quality print quality and margins. An option defines a configuration for a setting e.g. gray scale is an option for color letter size is an option for media size landscape is an option for orientation and a set of some or all of the available options for a setting are the capabilities of the respective setting.

The printer driver may be configured with the relationships between the settings capabilities and the selected settings options of the printing device . Thus the printer driver can determine which print capabilities are or are not available based on the selected options of one or more settings and determine which setting options are constrained based on the selected options of one or more other settings.

For example the printing driver may be configured with the priorities of different settings and adjust printer capabilities according to selected options for the settings. Thus if the selected option of a lower priority setting is changed the printer driver does not change the capabilities of the higher priority settings. However if the selected option of a higher priority setting is changed the printer driver adjusts the capabilities of the lower priority settings if necessary.

Following the above example a printer driver may be configured to assign the medium size setting a lower priority than the medium type setting or the borderless printing setting. Thus if the selected option for the medium size setting is changed the capabilities for the medium type or borderless printing settings will not be changed because they are a higher priority. However if the option selected for the medium type setting or the borderless printing setting is changed then the capabilities for the medium size and other lower priority settings will be changed if necessary.

The printing user interface device includes one or more processors also referred to herein as CPU which may be a conventional or customized microprocessor s . The CPU is configured to read and execute computer readable instructions and the CPU may command and or control other components of the printing user interface device .

The printing user interface device also includes I O interfaces which provide communication interfaces to other devices including a keyboard a display device a mouse a printing device a touch screen a light pen an optical storage device a scanner a microphone a camera etc. The printing user interface device also includes memory which may be volatile or non volatile such as ROM RAM and flash memory. The printing user interface device further includes a network interface that allows the printing user interface device to communicate with the network . The storage device stores data or modules and may include for example a hard drive an optical storage device a diskette and or a solid state drive. The components of the printing user interface device are connected via a bus. The printing user interface device includes an operating system which manages the hardware the processes the interrupts the memory and or the file system of the printing user interface device .

The printing user interface device also includes a user interface module a printer driver and lookup table s . A module may be executed by the printing user interface device to cause the printing user interface device to perform certain operations though for ease of description a module may be described as performing the operations. Modules may include logic and or computer readable instructions and may be implemented in software firmware and or hardware. In other embodiments the printing user interface device may include more or less modules the modules may be combined into fewer modules or the modules may be divided into more modules.

The user interface module includes instructions that when executed cause the printing user interface device to generate a user interface that includes printing information such as printing device settings and capabilities. The user interface may include any combination of text and graphics and may receive data from a user such as via a text field or by user selection of a control on the interface e.g. a menu a button a check box . As discussed above the printer driver communicates with a printing device e.g. printing device . The user interface module may implement the print dialogue application as discussed above. In the embodiment shown in the printing user interface device also includes lookup table s . The lookup table s includes information about printing device settings and the printing user interface device may use the lookup table s to determine changes to the capabilities of one or more settings in response to a change in the selected option of one or more settings of the printing device .

For example the lookup table s may map selected print options to print capabilities e.g. map a PrintTicket to a PrintCapabilities . The lookup table s may include a column for each setting e.g. media size media type color duplexing stapling font and each capability and row for each permutation of setting options and a row of the lookup table may indicate the printing capabilities for a printing device when the printing device is set to the settings options indicated in the respective row. In other embodiments the printing user interface device determines changes in print capabilities by other means including logic data trees etc.

Beginning in block base print capabilities are obtained for example from a printer driver. The base print capabilities may be associated with base print settings options. Additionally the base print capabilities may be received from a printer driver such as in response to providing print settings data e.g. an object a file a pointer a data structure which defines one or more base print settings options to a printer driver. The print settings data may be provided to the printer driver in the form of markup language data and in some embodiments the data is a PrintTicket. The base print capabilities may be obtained from the driver in the form of markup language data and may be in the form of a PrintCapabilities.

Next in block a user interface is generated based on the base print capabilities and when displayed the user interface presents one or more of the base print capabilities to the user. The selected options for one or more print settings may also be displayed. The method proceeds to block where updated print capabilities are obtained such as after one or more of the selected options for the print settings are changed. For example the updated print capabilities may be received from the printer driver such as in response to calling the printer driver and passing the printer driver data that includes the updated selected options for the print settings. In one embodiment the data that includes the updated selected options for the print settings is a PrintTicket e.g. a delta PrintTicket . The printer driver may return data that includes only updated print capabilities and or that identifies the updated print capabilities for example by tagging the updated print capabilities or storing the updated print capabilities in a predetermined location in the data.

Once the updated print capabilities are obtained in block print capabilities are generated that indicate the differences between the base print capabilities and the updated print capabilities such as by comparing the base print capabilities with the updated print capabilities. The print capabilities for specific updated print settings options e.g. a PrintTicket may be generated using lookup tables hash tables document object models grammars DevCaps structures DevMode structures etc. and the generation may involve parsing text comparison binary comparison hashing etc.

Finally in block one or more portions of the user interface that are associated with the print capabilities are updated and the other portions of the user interface may be maintained. Thus only part of the user interface may be updated in response to a change in print capabilities in particular the part of the user interface that displays the changed print capabilities. Furthermore if there are no changes to the print capabilities then there may be no updates to the user interface.

In this illustrative embodiment the base print settings data is a base PrintTicket base PT . Also by way of illustration and not limitation in this embodiment other print settings data are PrintTickets and other print capabilities data are PrintCapabilities though other embodiments of this method may not include PrintTickets and PrintCapabilities. The base PT is used to obtain the base PrintCapabilities base PC . For example the base PT may be passed to a printer driver and the printer driver may return the base PC . Next in block an initial user interface is generated. The initial user interface may include one or more of the print settings and respective selected options in the base PT and respective one or more of the base print capabilities in the base PC . A user may change one or more selected options of the print settings via the user interface and the selected options may be added to a delta PrintTicket PT .

Proceeding to block the base PT is merged and validated with the PT to generate a resulting PrintTicket resulting PT . Thus the resulting PT integrates the changed settings with the base settings. Next in block the resulting PT is used to obtain the resulting PrintCapabilities resulting PC . The resulting PC indicates the print capabilities that are available while the associated printing device is configured according to the selected options in the resulting PT .

Moving to block a delta print capabilities PC is generated based on the resulting PC and the base PC . The resulting PC may be compared with the base PC to determine the changes in print capabilities and the changed capabilities are added to the PC . The PC may indicate no changes one change or a plurality of changes depending at least in part on the changes to the selected options for the print settings in the PT and on the printing device. In block the parts of the user interface that are associated with the changed print capabilities in the PC are accordingly updated. The parts of the user interface that are not associated with the changed print capabilities may be maintained in their current state thus avoiding unnecessary changes to the user interface which may save time and computing resources.

Proceeding to block resulting PC data is parsed. In block a PC is generated. To generate the PC in one embodiment upon receiving the start indicator of each markup element from the parser a markup element name and stream pointer to the markup element are retrieved and pushed onto a stack. When an end markup element indicator is received the markup element name and stream pointer are popped from the stack and the corresponding node if any is found in the base PC lookup table. The XML string of the base PC element node is then compared with the XML string of the resulting PC element node. If a difference is found the element node is added to a PC DOM and the entry is removed from the base PC lookup table. If no difference is found then the entry is removed from the base PC lookup table and the markup element node is not added to the PC DOM. This proceeds until the end document indicator is reached and PC is generated using the PC DOM.

Also in block a resulting PC lookup table is generated. Block is performed by building a resulting PC DOM upon receiving each event from the parser and building a lookup table that refers to the resulting PC DOM. Blocks and may be performed during a single parsing of the resulting PC and thus may be performed substantially simultaneously. Finally in block the resulting PC lookup table is identified as the base PC lookup table. Thus if another resulting PC is received flow returns to block and the resulting print capabilities from the previous iteration are used as the base print capabilities when generating a PC for the next iteration.

In stage the print dialogue application passes a PT to the printer driver . The printer driver merges the PT with the base PT validates the merged PT and base PT and in stage returns the resulting PT . The print dialogue application then passes the resulting PT to the printer driver in stage for example in a function call to get updated printing capabilities. The printer driver determines the resulting PC and in stage passes the resulting PC back to the print dialogue application . In Stage the print dialogue application generates a PC from the base PC and the resulting PC . Using the PC the print dialogue application then modifies the parts of the UI that correspond to the print capabilities in the PC to generate a resulting UI . Finally in stage the print dialogue application passes the resulting UI to the display device .

In some embodiments the print dialogue application operates on a local computing device and the printer driver operates on a remote distributed computing service e.g. a Cloud . The data in stages and is transmitted between the print dialogue application and the printer driver via one or more networks.

Therefore in this embodiment if the base print settings data e.g. Base PT indicates that the initially selected option for borderless printing is off the base print capabilities data e.g. Base PC generated based on the base printing settings data e.g. Base PT will indicate that the capabilities for the paper size setting are Letter Legal A5 A4 B5 L 89 127 mm 2L 127 178 mm Hagaki 100 148 mm Hagaki 2 200 148 mm Choukei 3 120 235 mm Choukei 4 90 205 mm Youkei 4 105 235 mm Youkei 6 98 190 mm Credit Card 2.13 3.39 in 54 86 mm Card 2.16 3.58 in 55 91 mm CD R tray B and Custom. If a user sets borderless printing to on via the user interface delta print setting data e.g. PT is generated that indicates that the option for borderless printing is changed to on. The delta print setting data e.g. PT is sent to the printer driver which returns updated print settings data e.g. Resulting PT . The updated print settings data e.g. Resulting PT is then sent to the printer driver with a request for updated print capabilities data. The print driver generates the corresponding updated print capabilities data e.g. resulting PC which indicates that the print capabilities for the paper size are letter A4 L 89 127 mm 2L 127 178 mm Hagaki 100 148 mm Credit Card 2.13 3.39 in 54 86 mm and Card 2.16 3.58 in 55 91 mm.

The print dialogue application then generates delta print capabilities data e.g. PC based on the base print capabilities data e.g. Base PC and the updated print capabilities data e.g. Resulting PC . The delta print capabilities data e.g. PC indicates that the print capabilities for the paper size setting have changed to no longer include Legal A5 B5 Hagaki 2 200 148 mm Choukei 3 120 235 mm Choukei 4 90 205 mm Youkei 4 105 235 mm Youkei 6 98 190 mm CD R tray B and Custom. A resulting user interface e.g. resulting UI may then be generated that changes substantially only the portions of the user interface corresponding to the modified print capabilities e.g. removes the paper size options that are no longer available and any modifications to the selected options e.g. shows borderless printing is set to on and maintains the remainder of the user interface.

The above described systems and methods can be achieved by supplying a storage medium having computer executable instructions for realizing the above described operations to one or more computing devices e.g. CPU MPU that may read the computer executable instructions stored in the storage medium and execute them.

In this case the computer executable instructions when read from the storage medium and performed by the one or more computing devices execute the operations of the above described embodiments. Thus the computer executable instructions or the storage medium storing the computer executable instructions therein constitute an embodiment.

Any applicable computer readable storage medium e.g. a floppy disk a hard disk an optical disk a magneto optical disk a CD ROM a CD R a magnetic tape a non volatile memory card a ROM can be employed as a storage medium for supplying the computer executable instructions.

The computer executable instructions may be stored in a memory provided on a function extension board inserted into the computing device or on a function extension unit connected to the computing device and a CPU provided on the function extension board or unit may carry out part or all of the actual processing that realizes the operations of the above described embodiments. Furthermore when the computer executable instructions are executed by the one or more computing devices an operating system working on the computing system may carry out part or all of the actual processing that realizes the operations of the above described embodiments.

While the above disclosure describes illustrative embodiments it is to be understood that the invention is not limited to the above disclosure. To the contrary the invention covers various modifications and equivalent arrangements within the spirit and scope of the appended claims.

