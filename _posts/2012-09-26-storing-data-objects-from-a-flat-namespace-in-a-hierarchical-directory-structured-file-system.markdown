---

title: Storing data objects from a flat namespace in a hierarchical directory structured file system
abstract: Storing and retrieving user data files includes, in a file storing operation, applying a first mapping (e.g. hash function) to a file identifier to originate a content address in a flat content address space; applying a second mapping (e.g., grouping of digits/characters) to the content address to originate a multi-level directory name usable in a file system; invoking the file system to store the user data file in the named directory. A file retrieving operation includes applying the first mapping to the file identifier to regenerate the content address; applying the second mapping to the regenerated content address to regenerate the directory name; invoking the file system using the regenerated directory name to retrieve the user data file. The method enables a general-purpose network attached storage (NAS) system to store files organized according to a legacy content-addressed storage (CAS) model of existing applications.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08977662&OS=08977662&RS=08977662
owner: EMC Corporation
number: 08977662
owner_city: Hopkinton
owner_country: US
publication_date: 20120926
---
Data storage systems of a type referred to as content addressed storage or CAS are known. A CAS storage system may be used for bulk storage of a large number of files or similar data objects that may be relatively fixed i.e. not subject to frequent or any change. One aspect of CAS storage is so called content addressing which refers to the association of each stored data object with a unique identifier that is generally calculated from the contents of the data object for example by a hash function applied to the entire contents of a data file. A client of a CAS storage system can submit files for storage without any knowledge of how the storage system actually stores them. The CAS storage calculates the content address CA of each data object and stores it in association with the data object as well as returning it to the client. When the client wishes to read the data object it provides the CA to the CAS system which then performs an associative lookup to retrieve the associated data object and return it to the client.

While CAS storage systems provide very useful functionality for applications needing access to large sets of fixed data objects there are important drawbacks to the deployment of CAS storage systems. In general they have tended to be specialized hardware and software platforms optimized for CAS storage in order to provide the best performance. Because of the small demand for CAS systems in relation to more generally usable storage systems such as so called network attached storage or NAS for example they do not benefit from certain economies of scale most notably the economy of amortizing ongoing development costs across a large number of sold products. It may be difficult to incorporate new advances in storage technology into CAS systems because the cost is not justified by sufficiently increased revenue. Thus uses of CAS systems obtain the specialized CAS functionality at the cost of keeping pace with other technology advances.

One theoretically possible way to implement a CAS data model using a file oriented NAS system might be to simply store all the data objects in one single directory and use the content address as the file name. Such an approach would have several problems running up against practical limits of real NAS file systems that are designed based on certain assumptions that such an organization might violate.

The present disclosure is directed to methods and apparatus by which a CAS oriented model of data storage is provided to applications using general purpose storage hardware such as NAS systems along with client side software that performs a translation between a legacy CAS application programming interface API and a file oriented interface provided by the NAS systems. The disclosed technique is consistent with the assumptions of real file systems and it enables the continued use of CAS dependent applications with the ability to exploit contemporary and future technology developments that become incorporated into the general purpose storage systems.

In particular a method is disclosed for storing and retrieving user data files in a storage device where the user data files are identified by corresponding file identifiers such as file names. In a file storing operation for a user data file a series of operations are performed including 1 applying a first mapping to the file identifier to originate a corresponding content address in a flat content address space 2 applying a second mapping to the content address to originate a corresponding multi level directory name usable to identify a subdirectory in a hierarchical directory structure of a file system of the storage device and 3 invoking the file system to store the user data file in the subdirectory identified by the multi level directory name. In one embodiment the first mapping may be a hash function or similar high entropy function that distributes the content addressed uniformly in the flat address space. The second mapping may take the form of dividing out groups of digits or characters of the content address and interpreting them as parts of a multi level directory name. For example three sets of characters may be selected and interpreted as directory names at first through third levels of a hierarchical directory structure. The file is stored in the subdirectory identified by the multi level directory name.

In a subsequent file retrieving operation initiated with the file identifier a series of operations are performed which include 4 applying the first mapping to the file identifier to regenerate the content address 5 applying the second mapping to the regenerated content address to regenerate the multi level directory name and 6 invoking the file system using the regenerated multi level directory name to retrieve the user data file from the subdirectory identified by the regenerated multi level directory name.

The application can continue to use a legacy CAS API reflecting a flat space CAS model of data organization supplying only the object to be stored e.g. file in a storing operation and supplying only the content address in the retrieving operation. A client side library performs the translation and interfaces to the NAS system where the data objects are stored hiding the details of the NAS file system from the application. This provides for desirable backward compatibility while still permitting the users of CAS storage to participate in the evolution of storage technology.

The client is typically a server type of computer hosting one or more application programs providing services to users who may be part of a single organization such as a company that owns the server or members of the public subscribed or not accessing the services over a public network. In particular the client executes one or more applications of a type that benefit from content addressed storage such as provided by the CAS system . Specific examples are provided below.

The NAS system is a storage system device that includes one or more file systems and presents a file system interface to its external clients such as client . It may support well known distributed file system protocols such as NFS or CIFS for example. As generally known in the art a file system typically employs a hierarchical directory paradigm for organizing the data objects files that it contains. The underlying storage media in the NAS system such as magnetic disk devices FLASH memory etc. stores user and system data files as collections of fixed size blocks of data and also stores directory files including pointers to the user system data files as well as to other directory files. This structure enables a user or system to organize data in the well known top down nested fashion. For example a top level may have directories for different functions or departments of a company while subdirectories may have divisions for different users applications geographies or date ranges etc.

In general NAS systems are well suited for data access patterns that may be relatively random and may be intensive in terms of update frequency. Applications have knowledge of the directory structure and can make pinpoint requests for reading writing files with an expectation of fast response time and acceptably high throughput. The hierarchical directory paradigm helps support this workload by its divide and conquer aspect files can be located using only a small number of directory lookups. Techniques such as caching can be used to enhance random access performance accommodating the latency limitations of mechanical data access devices such as disk drives. One benefit of the use of a NAS system is its ubiquity in modern systems. Because of wide deployment NAS technology and products enjoy benefits such as low cost excellent performance in a variety of applications an ongoing advancement through the investments of NAS system manufacturers.

The CAS system is a specialized storage system or device that is optimized to provide storage and access for large collections of relatively fixed data objects such as libraries of documents images backed up files etc. These change infrequently or never but they must be available for use by application programs applications hosted by the client . An example might be a library of fingerprint images used as part of a fingerprint based identification system. An application on the client may provide a service of comparing sample fingerprints with fingerprints stored in the CAS system to identify an individual. This type of storage may be referred to as write once read many or WORM storage.

In the present case an important aspect of the CAS system is the use of a content addressing scheme in contrast to the more conventional directory based organization schemes employed by file systems such as provided by the NAS system . While more details are provided below one aspect of content addressing is its use of a flat address space also referred to as a name space herein. Flat refers to the lack of inherent hierarchy. For example a content addressing scheme may utilize a hash function or similar high entropy function that associates each file or data object with a corresponding n digit number or address. Hash algorithms generating 256 bit hash values for example are currently in use. Each hash value can be interpreted as a single point in a linear array of 2points. Two data objects that may be very similar such as different versions of the same spreadsheet for example might hash to widely separated points in this space. Thus the hash value or more generally content address generally contains no organization information such as is inherent in a directory based organization scheme.

The term legacy with respect to the CAS system refers to its preexistence at a time of a migration of its data to the NAS system as described in more detail herein. The CAS system is used with a client side software library that presents a CAS specific application programming interface API termed a legacy API herein to applications executing on the client . One feature of the presently disclosed system is a client based data migration technique that transfers data from the CAS system to the NAS system without requiring modification of existing client applications using the legacy API as also described in more detail below.

A migration manager node is a specialized client system used primarily or exclusively for migrating data from the CAS system to the NAS system . It is shown as optional because the primary migration method described herein is based on functionality in the client which performs data migration as part of its normal processing of application data. The migration manager if present may be used in a more dedicated manner programmed as a background or demon type of process to read data from the CAS and write it to the NAS . The data may be accessed in a linear fashion for example starting at one end of the CAS address space and proceeding to the other end. It may be desirable to perform the transfers in batches or chunks of successive data objects. It will be appreciated that if a migration manager is used migration of a large data set can generally be achieved in substantially less time than if all migration is done by the client itself.

At its interface to the application the library provides the above discussed legacy API as shown. Facing the network and storage devices of the library supports both a CAS protocol and a NAS protocol . The CAS protocol is based on a CAS model of the data storage as shown on the left which is a collection of elements each having a data object and an associated content address CA . The data objects correspond to files as known to the application as described more below. The NAS protocol is based on a file based model of the data storage as shown on the right which is a hierarchical directory based file system such as discussed above. This file system is not necessarily visible to the application and in fact it is assumed herein that the application is a legacy application having the CAS model view of its stored data. The file system of the NAS system is used as the underlying storage structure for an emulation of the CAS model which is provided by the library . The NAS protocol preferably employs the preferred read write access method of the NAS system such as HTTP NFS CIFS etc.

Referring to the CAS model again each data object typically includes a corresponding data file known to the application and may include file related metadata as well e.g. file name data of creation modification owner etc. . Each content address is an address value generally unique to the corresponding data object . When a file is initially transferred from the application to the CAS system for storage it is provided without any specification of a location or address where it should be stored. The CAS system performs a hash or similar function using the contents and perhaps metadata of the file to generate the file specific CA and this value is returned to the application for use in subsequent read operations directed to the same file. During a read the application provides a CA and this CA is compared with stored CAs . If a matching CA is found then the associated object is returned to the application in satisfaction of the read request.

Referring briefly to the file based model as known in the art each application access to a user file is accompanied by a path name or other specification of a directory in which the file resides. The file system uses the directory information in the request to locate a directory file for the directory where the file resides then uses information in that directory file to locate the user file that is the target of the operation. It will be appreciated that without some kind of intervening translation a directory based file system does not lend itself to supporting the CAS model. This partly explains the existence of specialized CAS systems which can employ data organizations specifically tailored for efficient storing and retrieving of content addressed data objects.

As described in more detail below the library performs operations involving both the CAS system and the NAS system in response to operations of the application . When interacting with the CAS system the library uses the CAS protocol and its underlying data model as described above. These operations have a somewhat pass through nature meaning that functions and data defined at the legacy API have direct counterparts in the CAS protocol . This is not the case when the library interacts with the NAS system which has no understanding of the CAS protocol or the CAS model of data organization as described above. Thus in these operations the library performs a translation between functions and data of the legacy CAS API and the functions and data of the NAS protocol and the file system provided by the NAS system .

1 Applying a first mapping to a file identifier for the file to originate a corresponding content address in a flat content address space. An example of a file identifier is a file name as known to the application but other types of identifiers may be used. The first mapping may be a hash function as described above but other mappings may also be used.

2 Applying a second mapping to the content address to originate a corresponding multi level directory name usable to identify a subdirectory in a hierarchical directory structure of a file system of the file based storage system e.g. NAS system . The second mapping may be a function as described above i.e. dividing some or all of the content address into ordered groups of digits or characters and then interpreting each group as a directory name at a corresponding level of the directory hierarchy.

3 Invoking the file system to store the user data file in the subdirectory identified by the multi level directory name.

Step shows actions taken as part of a subsequent file retrieving operation for the user data file as may be initiated by the application using the same file identifier . It includes the following 

5 Applying the second mapping to the regenerated content address to regenerate the multi level directory name.

6 Invoking the file system using the regenerated multi level directory name to retrieve the user data file from the subdirectory identified by the directory name.

Also shown in is a second hash function applied to the first CA to originate the 2CA of . From this point the scheme is as discussed above i.e. the 2CA is mapped 2map of to a directory name which is used to identify a subdirectory in the file system of the NAS system where the data object is to be stored and retrieved from. It will be appreciated that when the application first writes the user data file all the operations depicted in are performed. During subsequent reads of the user data file the application provides the object identifier and operation is as described above with respect to .

The application never knows where the data object is actually stored. The object identifier may have no state information about the location of the data object. The library may be configured for reading and or writing to CAS system and or NAS according to an explicit scheme. In general configuration options could be represented conceptually by a table as follows 

If writing data is enabled for both CAS and NAS then the library is configured for mirroring of data between the CAS system and the NAS system .

If writing data is only enabled on the NAS system then the user feels confident about the overall solution and is comfortable having newer data available only on the NAS system .

If writing data is only enabled for the CAS system then the user probably went from a mirrored configuration to one where the user wants to revert to a CAS only solution.

If reading data is enabled for both CAS and NAS then the library can apply one of several techniques depending on desired behavior and depending on the relative performance of the NAS system versus the CAS system . The library can attempt to read data from one of the systems or and if found then return it to the user and if not found then try the other system. If the data is found on the second system then it is returned to the user and if not found on the second system then a failure to locate message may be returned. There may be a configuration of which system to check first which could be determined based on relative speed percentage completion of the migration job affects probability of finding data on one system versus the other load difference on the storage systems or other specific criteria. Alternatively the library could query both storage systems at the same time leveraging the parallel execution for faster response time.

If reading data is enabled for only the CAS system then the user probably went from a mirrored configuration to one where the user wants to revert to a CAS only solution.

If reading data is enabled for only the NAS system then the user is probably preparing to switch to a NAS only solution.

The object identifier e.g. CA returned to the application is opaque to the application meaning the application does not interpret it. The library as an intermediate layer between the application and the storage systems does understand the format of the object identifier. The library may place a hint in the object identifier of newly written data which can help the library determine the location of the data object in a subsequent access. In one embodiment such a hint may always be included whereas in other embodiments any use of such a hint may be used in some conditional manner depending on any of a variety of criteria known to the library . Such alternatives also apply to any other state and information that might be stored in the object identifier for later use in an interaction with the application .

Referring again to as indicated at the writes may be mirrored or duplicated to the CAS system so that its contents remain current. This might be done to enable the migration operation to be aborted if necessary or desired without losing any data newly stored during the migration operation. The use of mirroring to the CAS can also provide increased confidence in case of concerns about the robustness of the migration operation migration can proceed knowing that it will be possible to revert to operation with the CAS if any problems develop. This possibility exists until the mirroring is stopped which may occur when there is sufficient confidence in the integrity and operation of the NAS to commit to NAS only operation going forward.

As shown at the library performs a retrieve operation read from the CAS system . The request from the application includes an object identifier previously returned to the application when the file was initially given to the library for storing. The read includes this object identifier. The CAS system uses an associative lookup to obtain the corresponding data object e.g. data object and returns it to the library which extracts the user data file e.g. user data file from the data object and returns it to the application in satisfaction of the request. Additionally the library generates a write to store the data object in the NAS achieving the migration of that particular data object from the CAS to the NAS . Subsequent reads for this data object are satisfied from the NAS rather than from the CAS . If the system is not keeping the CAS system up to date e.g. by using mirroring then at this point the data object may be deleted from the CAS .

Step is performed for each of a plurality of file storing operations for respective user data files. It includes generating a data object and an object identifier where the data object contains the user data file being stored and the object identifier uniquely identifies the data object. The object identifier is returned to an application program e.g. application for subsequent use in retrieving the user data file being stored. Secondly a mapping function is performed on the object identifier to originate a subdirectory name of a subdirectory of the hierarchical directory structure of the second remote data store. Thirdly write request is sent to the file system of the second remote data store. The write request includes the data object the subdirectory name and a command to create a subdirectory having the subdirectory name and store the data object in the subdirectory. As mentioned above this write may also be mirrored to the first remote data store for the above discussed purposes.

Step is performed for each of a plurality of file retrieving operations directed to user data files contained in respective data objects stored in the first remote data store wherein each file retrieving operation is initiated with a respective object identifier in the flat linear namespace uniquely identifying a data object containing a user data file being retrieved. This step includes 4 sending a read request including the object identifier to the first remote data store 5 upon receiving a data object from the first remote data store in satisfaction of the read request extracting a user data file and returning the extracted user data file to the application 6 performing the mapping function on the object identifier to originate a subdirectory name of a subdirectory of the hierarchical directory structure and 7 sending a write request to the file system of the second remote data store the write file request including the received data object the subdirectory name and a command to create a subdirectory having the subdirectory name and store the data object in the subdirectory. Parts 6 and 7 correspond to the writes of .

As mentioned above the migration performed by the writes and operations can be augmented by additional operations generated by a dedicated migration manager which may be desirable if it is desired to complete migration quickly and or when the application is not guaranteed to read every data object stored on the legacy CAS system .

While various embodiments of the invention have been particularly shown and described it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the invention as defined by the appended claims.

