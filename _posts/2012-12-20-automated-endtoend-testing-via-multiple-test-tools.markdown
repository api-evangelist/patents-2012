---

title: Automated end-to-end testing via multiple test tools
abstract: The development of automated tests that span end-to-end business processes, such as may be executed in part by each of multiple Enterprise Resource Planning systems, is a very complex activity. Beside expert know-how of various tools, such end-to-end business process testing requires various test automation tools to cover complex business processes to provide automated tests. Various embodiments herein are built on an approach for building and connecting automated end-to-end tests that combines test scripts from multiple test tools. These embodiments include functionality to assemble test scripts from multiple test tools into a single, composite test script that allows passing of information between the test scripts during performance of an end-to-end automated process test. These and other embodiments are illustrated and described herein.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09092578&OS=09092578&RS=09092578
owner: SAP SE
number: 09092578
owner_city: Walldorf
owner_country: DE
publication_date: 20121220
---
Testing software systems following implementation of the system itself or modifying a portion thereof creates risk exposure. To mitigate such risks organizations often perform testing on systems once the changes are made. However depending on the size of the system testing can be laborious expensive and lengthy. Testing is therefore often skipped limited or performed using an automated test tool that executes test scripts.

When an automated test tool is utilized a single automated test tool is used to test a particular system. However in a typical modern organization that has integrated software systems that are built and exist on different computing platforms and are acquired from different software systems developers and developed organically by or for the organization a single automated testing tool is generally not able to test all of the different integrated software systems. As a result testing of processes that exist in part on more than one of the integrated systems if performed on each of the integrated systems is performed in a piecemeal manner according to multiple test scripts triggered independently.

Many organizations today utilize a variety of different systems in an integrated manner to perform data processing activities. Multiple of such systems are often involved in processing data of a single transaction such as receiving fulfilling and shipping functions associated with a single product order. Such processing can generally be considered a single ordering process although subprocess thereof are executed and performed in different distinct software systems. For example one software system may receive the order another software system may be involved in processing and fulfilling the order and a further software system involved in the shipping of the order. Each of these systems may exist within and execute on a distinct computing platform and have been developed by a different software company. However the processes of each system are but single components of a larger ordering process within the organization. To fully test the larger ordering process such as to verify an update to one of the single components testing just a single modified component is not sufficient to mitigate all risk exposure as that one component or data processed or output thereby interfaces with at least one other component. Thus to mitigate all or at least more risk associated with such modifications performance of an end to end test of the example ordering process should be performed.

However as each of the single components of the larger example ordering process is distinct in nature different automated testing tools are often needed to perform such testing. Further the testing output of one of the components may be needed as input for testing a next component in the ordering process. To facilitate such end to end testing of such processes that span a plurality of software systems various embodiments herein include at least one of systems methods and software to generate and execute cross test tool test plans and scripts that leverage test scripts of other testing tools in a centralized manner to provide end to end process testing capabilities.

The development of automated tests that span end to end business processes such as may be executed in part by each of multiple Enterprise Resource Planning systems is a very complex activity. Besides expert know how of various tools such end to end business process testing requires various test automation tools to cover complex business processes to provide automated tests.

Various embodiments herein are built on an approach for building and connecting automated end to end tests that combines test scripts from multiple test tools. These embodiments include functionality to assemble test scripts from multiple test tools into a single composite test script that allows passing of information between the test scripts during performance of an end to end automated process test. These and other embodiments are illustrated and described herein.

In the following detailed description reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration specific embodiments in which the inventive subject matter may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice them and it is to be understood that other embodiments may be utilized and that structural logical and electrical changes may be made without departing from the scope of the inventive subject matter. Such embodiments of the inventive subject matter may be referred to individually and or collectively herein by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed.

The following description is therefore not to be taken in a limited sense and the scope of the inventive subject matter is defined by the appended claims.

The functions or algorithms described herein are implemented in hardware software or a combination of software and hardware in one embodiment. The software comprises computer executable instructions stored on computer readable media such as memory or other type of storage devices. Further described functions may correspond to modules which may be software hardware firmware or any combination thereof. Multiple functions are performed in one or more modules as desired and the embodiments described are merely examples. The software is executed on a digital signal processor ASIC microprocessor or other type of processor operating on a system such as a personal computer server a router or other device capable of processing data including network interconnection devices.

Some embodiments implement the functions in two or more specific interconnected hardware modules or devices with related control and data signals communicated between and through the modules or as portions of an application specific integrated circuit. Thus the exemplary process flow is applicable to software firmware and hardware implementations.

The system further includes a primary testing tool and a secondary testing tool . The primary testing tool is typically a testing tool that is compatible with at least one of the software systems to perform automated testing according to test cases scripts defined therein and stored in and retrievable from a database . Note that references to test cases and test scripts herein are used synonymously unless stated otherwise . For example when the software system is a software system available from SAP AG of Waldorf Germany the primary testing tool may be the SAP Solution Manager tool. The secondary testing tool may be virtually any other automated software testing tool such as the HP QuickTest Professional also known as HP QTP or just simply QTP automated testing tool available from Hewlett Packard Development Company L.P. of Palo Alto Calif. The software system is not illustrated as having a dedicated secondary testing tool associated therewith. However the software system may have such as secondary testing tool in some embodiments while in other embodiments the primary testing tool or the secondary testing tool may be dedicated to servicing automated testing functions therefore.

Each of the primary testing tool and the secondary testing tool provide users abilities to author test cases that can be executed in an automated fashion. Such test cases are generally for testing smaller siloed portions of a software system such as a user interface a path through a series of user interfaces a process or string of processes that execute only within the bounds of a single software system under test. These test cases and any specific test data that may be needed to execute a particular test case are stored by the primary testing tool and the secondary testing tool in their own repositories such as a primary testing tool database and a secondary testing tool database .

The primary testing tool of the system includes an ability to communicate with other testing tools such as the secondary testing tool . Communication between the primary testing tool and other testing tools may be direct according to a communication protocol shared by the primary testing tool and one or more other testing tools or indirect. Indirect communication between the primary testing tool and one or more other testing tools may be conducted via an application programming interface API such as test APT of the secondary testing tool an intermediary interface such as test interface or other data communication interface operable to connect the primary testing tool with one or more other testing tools or software systems.

The primary testing tool in some embodiments includes functionality to natively author and store test cases with regard to software systems with which it is integrated such as software system . The primary testing tool is also able to import and store data representative of test cases defined in and stored by other testing tools such as the secondary testing tool . The imported data of test cases of other testing tools may include data identifying test cases test data associated or otherwise associable with those test cases attributes and properties of the test cases metadata of the test cases such as may provide information about which software system s and functionality thereof are tested by the test cases and the like. The imported data of test cases is stored by the primary testing tool in database which operates as a test case repository. Test cases natively authored within the primary testing tool and test cases imported from the other test tools are viewable and selectable within the primary testing tool . Further some embodiments include abilities to modify test cases imported from other testing tools either within the primary testing tool with changes stored back to the testing tool from which the test case was imported or by launching an application of the secondary testing tool through which test cases of the secondary testing tool are authored.

The primary testing tool includes further functionality to create composite test cases. A composite test case is a test case that includes multiple other test cases that are stored or represented in the test case repository resident in the database . For example a composite test case may include one or more test cases natively authored within the primary testing tool and one or more test cases imported from one or more other software testing tools such as the secondary testing tool . A composite test case author may search the test case repository for test cases select test cases to add to the composite test case and set an execution order of the test cases added to the composite test case. The execution order of test cases will typically be set to order test cases associated with process steps according to order of steps in a process to be tested by the composite test case. In some instances an output of one test case is an input for one or more other test cases. Such data relations between test cases can be specified in a composite test case authored with the primary testing tool . Further in some embodiments when setting an execution order of the test cases within a composite test case test cases may be designated as executable in parallel with one another such as when a process includes portions that execute within two or more different software systems or where a single software system allows for parallel execution of test cases.

Additionally some test cases defined within testing tools may include test data attributes and parameters that are utilized during execution to feed the test case or a portion of a software system being tested with information needed for execution. However one or more of the test data attributes and parameters of a particular test case may not comport with a composite test case being authored. In such embodiments the test case may be inherited and certain things overridden in an object oriented programming type manner. For example a copy of a test case may be created and certain elements instructions test data attributes and properties may be overridden. The copy of the test case and the modifications thereto will be stored at least in part in the test case repository of the database . However when a test case is from another testing tool the test case copy may be generated within a test case repository of the other testing tool such as within the secondary testing tool database .

The primary testing tool is also able to execute composite test cases. A trigger input may be received with regard to a particular composite test case. The primary testing tool may then retrieve data with regard to the particular composite test case and issue commands which may also include arguments to one or more of the software systems directly or via another testing tool such as the secondary testing tool to cause the other testing tool to execute particular test cases included in the composite test case being executed. By executing a composite test case the primary testing tool is able to cross system boundaries that exist in processes many modern organizations to provide end to end processing testing capabilities.

Further composite test cases being modular in nature provide for streamlined maintenance and development. First if a portion of one or more of the software systems is modified only the test cases that test the modified portions need to be updated. If the modifications do not affect other portions of a process tested by a composite test case no other test case changes need to be made. Instead a composite test case that encompasses a test case of a modified system portion is typically able to just utilize the updated test case. An exception to that may be where a test case copy has been taken as described above. However such test cases can easily be identified within the test case repository in the primary testing tool database and test case repositories of other testing tools such as the secondary testing tool database such as through application of simple compare functions. With regard to newly developed or expanded portions of a process that is a subject of a composite test case a new composite test case need not be created. Instead test cases can be created for the newly developed or expanded portions of the process and added to the existing composite test case. Thus not only do the system and the composite test cases provide end to end process testing abilities across technical and system boundaries the system and composite test cases provide a highly flexible easily maintainable solution.

In some further embodiments the primary testing tool rather than being a testing tool within which standard non composite test cases are authored such as SAP Solution Manager and HP QTP is instead an add on module to such testing tools or a standalone software program that provides the end to end composite test case authoring and execution capabilities. As an add on module or standalone program in such embodiments the primary testing tool is able to communicate with one or more secondary testing tools to import test case data and guide execution of test cases therein.

In some embodiments the testing tool program includes three modules. The three modules include a test case composition module a test case import module and a test case execution module .

The test case composition module provides interfaces through which a user may view test cases in various forms. In some embodiments the views include one or more of a test case listing a test case detail view a composite test case view among others. Some such allow users to author including modifying test cases including composite test cases. In the instance of viewing an imported test case certain portions of the data may not be editable such as portions that are only editable within a different testing tool in which the imported test case was authored. Some such views however may include a user interface control that can be selected when viewing an imported test case to view an interface in which the imported test case can be modified. In various embodiments this interface may be an interface of the testing tool program or an interface of the testing tool in which the imported test case was authored.

A composite test case view may be presented in several ways in different embodiments or according to user preferences. For example some embodiments may include spatial representations of test cases included within a composite test case such as in an expandable and collapsible tree view. Other embodiments may include graphical workflow type presentations. Yet others may simply include a listing of test cases included in a composite test case sortable by different data elements included in the test cases. The composite test case view may also include a search utility to search a test case repository for test cases to add to a composite test case. Test cases may be selected in such a utility for addition to a composite test case. Once test cases are added to a composite test case an order can be assigned or modified. Such an order may be made in a drag and drop manner but other mechanisms may also or alternatively be provided such as a simple numbering and the like as would be readily apparent to a user interface developer of ordinary skill.

The composite test case view in some embodiments also provide user interface controls to associate output of one test case or a portion of a software system tested by a test case to be associated with input of another test case. In addition a composite test case view may provide an option to associate a test dataset with the composite test case or one or more specific test cases included therein. Such a test dataset would be instantiated within a particular database or other data store as part of executing the composite test case or included test case.

Some further composite test case views may include an ability to associate attributes and parameters with a composite test case or one or more test cases included therein. Such attributes and parameters may include security credentials a number of records to be retrieved system under test options user interface preferences and the like. Some embodiments allow for such attributes and parameters to be specified in the composite test case even when they already exist in an included test case. In such an instance the attribute or parameter specified in the composite test case will take precedence.

In some embodiments the composite test case view may also allow for an associating with one or more test configurations. A test configuration is generally a data structure that will be consumed when a composite test case is executed. The data structure of a test configuration may identify application instances within one or more software systems the test cases of a composite test case is to execute against security credentials for connecting to such software systems and the like.

The test case import module includes a utility for use in importing test cases from one or more other test tools. The test case import module may provide a test tool browser view to allow a user to locate a test tool from which to view available test cases for import. The test case import module may then allow importation of data representative of all test cases in a selected test tool or allow a user to view test cases available for import and to select which test cases to import. The test case import module may then retrieve data representative of the test cases to be imported and store that data in a test case repository of the testing tool program .

The test case execution module is operable to receive input to trigger execution of a test case or a composite test case including execution of the test cases included within the composite test case. The test execution module in such instances may retrieve the data of the composite test case to be executed the test cases included therein and other data associated with the composite test case such as a test configuration and test data. The test case execution module will then set environmental variables for the composite test case to execute such as loading test data in one or more software systems to be tested and then begin issuing commands to the various software systems to be tested according to an order of the test cases. As test cases complete execution a log of test case execution results may be stored such as in the test case repository or a log file stored elsewhere.

The method further includes receiving input within the editable view of the composite test case. The received input may associate an output of the process portion tested by the first test case in the first system to an input of the process portion tested by the second test case in the second system. The composite test case may then be stored on a data storage device within a test case repository of the first test tool.

In some embodiments upon completion of execution of the first test case in the first system and according to the input received within the editable view of the composite test case data output by the process portion tested by the first test case is captured. Subsequently during execution of the composite test case when issuing a command to the second system to cause the second system to test the portion of the process tested by the second test case the captured data output by the process portion tested by the first test case is provided as input to the second test case.

Some embodiments of the method further include importing data representative of the second test case from the second test tool into the first test tool. The data representative of the second test case may then be stored on the data storage device within the test case repository of the first test tool. This importing of data representative of the second test case is performed prior to adding the second test case to the composite test case.

Once a composite test case is authored and stored the composite test case can be executed. provides an example of a method that may be performed to execute a composite test case.

In some embodiments upon completion of execution of all the test cases of the composite test case the method includes evaluating a result of the tested process in view of an expected result. The expected result in some embodiments may be defined within either the composite test case or a last executed test case of the composite test case and output data indicating a result of the composite test case. In other embodiments a result of the composite test case and test cases included therein may be written to a log and compared with expected results either defined within the test cases or presented to a user for review and manual determination.

In some embodiments of the method prior to issuing commands to cause test cases to be executed a test configuration is retrieved. Such a test configuration includes at least one of data identifying instances of each of the plurality of software systems to be tested and security credentials to access the instances of the plurality of software systems to be tested. In some such embodiments the test configuration to retrieve is identified in an argument received with the command to execute the composite test case. Once retrieved the method utilizes the test configuration to identify and set a state of the software systems against which the test cases of a composite test case are to execute.

In some embodiments prior to issuing commands to software systems to execute test cases the commands are first encoded according to a unique application programming interface standard of the software system to which the commands are to be sent. This may include the testing tool performing the encoding but may alternatively include interface objects that operate to translate commands from a protocol of the testing tool to a particular protocol or the unique application programming interface standard as need to communicate with a particular software system or testing tool associated therewith.

Computer readable instructions stored on a computer readable medium are executable by the processing unit of the computer . A hard drive CD ROM and RAM are some examples of articles including a non transitory computer readable medium. For example a computer program capable of performing one or more of the methods or portions thereof as illustrated and described herein such as the primary testing tool of of .

It will be readily understood to those skilled in the art that various other changes in the details material and arrangements of the parts and method stages which have been described and illustrated in order to explain the nature of the inventive subject matter may be made without departing from the principles and scope of the inventive subject matter as expressed in the subjoined claims.

