---

title: Interpreted language translation system and method
abstract: A computer-implemented method of processing an interpreted language element for execution on a mobile communication device including receiving at a server system a request from a remote device for a first electronic document that includes an interpreted language element, executing the interpreted language element using an interpreter, creating a context for the interpreted language element, generating a second electronic document based on a result of the execution, and transmitting the second electronic document to the remote device for display. In one implementation, executing the interpreted language element may include performing an action specified by the interpreted language element. In another implementation, the executing may include embedding the interpreted language element in a markup link that contains an address corresponding to the server system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09311303&OS=09311303&RS=09311303
owner: Google Inc.
number: 09311303
owner_city: Mountain View
owner_country: US
publication_date: 20120130
---
This application is a continuation of and claims priority under 35 U.S.C. 120 to U.S. patent application Ser. No. 11 233 722 filed on Sep. 23 2005 the entire contents of which are hereby incorporated by reference.

As computers and computer networks become more and more able to access a variety of dynamic web based content people are demanding more ways to obtain that content. Specifically people now expect to have access on the road in the home or in the office to dynamic content previously available only from a permanently connected personal computer hooked to an appropriately provisioned network. They want to view web pages with dynamically loaded navigation menus from their cell phones track purchases in an online shopping cart from their personal digital assistants PDAs and validate entered information in online forms from their palm tops. They also want all of this dynamic content when traveling whether locally domestically or internationally in an easy to use portable device.

Portability generally requires a device small in size which in turn limits the space available for memory and processing elements. This limitation may prevent portable devices from executing dynamic content because the devices lack the necessary memory and processing requirements.

Many web pages may include dynamic content that will not display correctly on portable devices. This may significantly reduce the type and number of web pages a portable device user may view. For example if a web page is requested that contains dynamically generated content the user will not be able to view this content and may receive an error message associated with the entire web page. The user may be frustrated or confused if portions or the entire web page does not display correctly.

This document discloses methods and systems for processing an interpreted language for execution by a wireless device.

In accordance with one aspect a computer implemented method of processing an interpreted language element for execution on a mobile communication device is disclosed. The method includes receiving at a server system a request from a remote device for a first electronic document that comprises an interpreted language element executing the interpreted language element using an interpreter creating a context for the interpreted language element generating a second electronic document based on a result of the execution and transmitting the second electronic document to the remote device for display.

In one implementation the executing includes performing an action specified by the interpreted language element. Alternatively the executing may comprises embedding the interpreted language element in a markup link that contains an address corresponding to the server system. The method may include receiving a second request to execute an action specified by the interpreted language element where the second request is generated by a client executing the markup link. The method may also include generating and transmitting a third document based on results of the execution of the action specified by the interpreted language element. The context may include document elements from the first electronic document and may be used in the execution of the action specified by the interpreted language element. Additionally the static language element may include a unique identifier. The method may disambiguate with the unique identifier which static language element generated the second request.

Also generating the second electronic document may include modifying the first electronic document by replacing the interpreted language element with a static language element. The static language element may include the interpreted language element and an address corresponding to the server system.

In another implementation the document comprises more than one frame. The requested document may also be retrieved from a remote web server. The selecting may include parsing contents of the electronic document into a document object model tree and traversing the tree to locate the interpreted language element. The context may include document objects that form nodes of the document object model tree. A second interpreted language element may be transmitted in the second electronic document for execution on a client. Also a request may be received from the client to execute a portion of the second interpreted language element.

In yet another implementation the interpreted language element may be selected from a group consisting of a JavaScript element a Visual Basic Script element a Perl element and a Tool Command Language element. The static language element may be selected from a group consisting of a Hyper Text Markup Language element an Extensible Markup Language element and a Wireless Markup Language element. Additionally the second electronic document may be stored in a database and transmitted in response to future requests for the first electronic document. The executing may occur after the request is received from the remote device.

In accordance with another aspect a computer implemented system for processing an interpreted language element for execution on a mobile communication device is disclosed. The system includes a parser to select an interpreted language element from a first electronic document means for executing the interpreted language element and for generating a second electronic document based on results associated with the executed interpreted language element and an interface to transmit the second electronic document to a remote device.

In accordance with still another aspect a translation system is disclosed. The translation system includes a parser to organize elements in a first electronic document and to select an interpreted language element from the organized elements an interpreter to execute the selected interpreted language element and to output a static language element executable on a remote device a context repository containing at least a portion of the organized elements in a format accessible by the interpreter and a document generator to produce a second electronic document comprising the static language element.

The systems and techniques described here may provide one or more of the following advantages. A system may provide access to dynamic content and may permit viewing of an interpreted language element without the need for an interpreter on the viewing device. Also a system may enable a user to interact with a variety of content even if the user s device can not execute or interpret that content. Such a system may permit efficient partial execution of interpreted language elements at a remote device while still permitting additional execution of the elements at a server system. Additionally the system can be implemented on portable systems such as cellular telephones having limited resources such as memory and processing power.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

For example a user of the remote device may view a list of web page links retrieved from a web search performed by the server system . The list may include a web page link specifying a web page at the remote web server such as 

Here www.google.com is the network address of the server system . The u www.remotewebserver.com first document.html parameter in the URL directs the server system to request from the remote web server the first document located at www.remotewebserver.com firstdocument.html. 

The server system may include a transcoder for processing the ILE contained in the first document . The transcoder may create a context in which the ILE may execute. For example the first document may be a web page containing a web form and the context may include information such as the structure of the web page and data that a user has entered in the web form.

The ILE may contain one or more markup language tags that define the ILE . For example HTML uses the tag to identify interpreted language element s such as a JavaScript element and a Visual Basic Script element. The ILE may include other language elements such as a Perl. For example the HTML tag includes a Perl script called img counter.pl and is located in a directory called cgi bin. The tag may contain attributes such as a type attribute specifying the type of script language used and a src attribute indicating an external document that contains the script to be executed. For example the HTML tag specifies the Tcl scripting language is used and the Tcl file to be executed is located at www.google.com. 

The transcoder may execute the ILE using the context. For example the ILE may rely on information in the context such as the data entered by the user or the structure of the web page in order to execute. The execution of the ILE may include performing actions specified by the ILE that modify the context such as by generating or modifying web page elements or changing data within a web page element. The actions may include animating an image processing a form validating data entry restricting data entry and navigating within or outside of the web page. For example the ILE may create a web element such as in the script document.write Hello World or the ILE may set an available tag in a tag such as in the script document.form name.select name.options 0 New Option Apple where form name corresponds to the name attribute of a element and select name corresponds to the name attribute of a element. The transcoder may execute the ILE after receiving the request for the first document from the remote device . Alternatively the transcoder may execute the ILE in the first document before receiving a request for the first document from the remote device . For example the server system may store frequently requested documents and process them prior to requests from the remote device .

The transcoder may use the results of the ILE execution to generate a second electronic document . The second document may be based on changes made to the context by the ILE . The second document may include a static language element such as an element created by a JavaScript document.write function call in the ILE . The second document and the static language element may be in a web accessible format such as HTML Extensible Markup Language XML and Wireless Markup Language WML .

As shown the server system transmits the second document to the remote device. as represented by the arrow . The remote device may then display the second document to the user.

In some implementations the transcoder may not completely execute the ILE due to a portion of the ILE being dependent on actions performed by the user at the remote device . If a portion of the ILE relies on an interaction the user makes in the second document the second document may include the static language element that is associated with the ILE or a portion of the ILE . In one implementation the static language element is a markup link . The markup link is capable of communicating the user interaction back to the server system so that the portion of the ILE relying on the user interaction may execute. The markup link may include an address of the server system . If the user selects the markup link the address directs the results of the selection to the server system . The markup link may also include an embedded ILE . The server system may store in the second document a portion of the ILE in the embedded ILE . If the user selects the markup link including the embedded ILE the server system may execute the embedded ILE upon receiving the request from the selection of the markup link .

For example a document may contain two tags. The tags in the second tag may be based on which is selected in the first tag. The ILE may perform the actions of setting the available options in the second tag as shown above. In order to communicate the selection of an option in the first tag the tag in the first tag may be replaced with the markup link .

The server system is provided with an interface to allow communications with a network such as the Internet. The server system may communicate with various devices such as the remote device and the remote web server . The communication flow for any device may be bidirectional so that the server system may receive information such as commands from the devices and may also send information to the devices.

Commands and requests received from devices may be provided to a request processor which may interpret a request associate it with predefined acceptable requests and pass it on such as in the form of a command to another component of the server system to perform a particular action. For example in an implementation where the server system is part of the Internet search provider s general system the request may include a search request. The request processor may cause a search engine to generate search results corresponding to the search request. The search engine may use data retrieval and search techniques like those used by the Google PageRank system. The results generated by the search engine may then be provided back to the original requester using a response formatter which carries out necessary formatting on the results.

The search engine may rely on a number of other components for its proper operation. For example the search engine may refer to an index of web sites instead of searching the web sites themselves each time a request is made so as to make the searching much more efficient. The index may be populated using information collected and formatted by a web crawler which may continuously scan potential information sources for changing information.

The transcoder may access a system storage . The system storage may be one or more storage locations for files needed to operate the system such as applications maintenance routines and management and reporting software. In some implementations the transcoder may store the second document in the system storage . The server system may transmit the stored second electronic document in response to future requests for the first document .

The transcoder may include several components used to process the first document and the ILE . A parser may select the ILE from the first document . The parser may decode the entire first document using an application programming interface API to access the content of the first document . For example if the first document is a web page the parser may access the elements or document objects of the web page using a document object model DOM API. Using the DOM API the parser may load the document objects from the first document into memory using a data structure such as a tree. The DOM may allow the document objects to be accessed randomly or in an order different from the order in which they are specified in the first document . Alternatively the parser may input the first document as a series of characters or character strings. The characters or strings may be serially compared with a set of predefined identifiers that specify the existence of an ILE such as the tag in the case of HTML. The DOM may form a context A in which the server system will execute the ILE . In another implementation the parser may create the context A separate from any DOM created. The context A may be stored in a context repository B.

In some implementations the parser or the transcoder may determine whether to process the first document . For example the transcoder may contain a list of web sites that have contracted the server system to process their web pages. The parser may choose to process only those web pages that belong to web sites included in the list. In another implementation the transcoder may only process a portion of the first document . For example the first document may be a web site www.website.com. The web site may contain advertising content generated by JavaScript where the first advertiser is cheapcars.com and the second advertiser is expensivecars.com. Expensivecars.com may pay a fee to have its advertisements processed by the transcoder . An identifier associated with expensivecars.com may be recorded in an index that is accessed to determine whether a particular ILE should be processed. The transcoder may parse the ILE to determine if it contains an identifier that matches an identifier in the index. If a match is found the ILE may be processed. Here the identifier may be expensivecars.com. The transcoder may examine the ILE and determine that it retrieves content from expensivecars.com s web server. The ILE is executed because expensivcars.com is included in the index. The ILE that retrieves content from the cheapcars.com web site however would not be processed because no matching entry is present in the index.

The transcoder may include an interpreter capable of executing the ILE . The interpreter may select from several different engines which may be specific to the language used in the ILE . The ILE may contain an element such as the type attribute in HTML that specifies the language used in the ILE . The interpreter utilizes the context which represents the state of the document. In one implementation the context includes the elements of a web page and data entered in fields on the web page in the form of a DOM tree. The interpreter executes the ILE which may perform actions that modify the context such as creating or modifying an element in the web page or modifying data in the web page.

The transcoder may also include a document generator . In one implementation the document generator creates the second document using the context modified by the interpreter and content from the first document . Additionally the document generator may modify hyperlinks to other web pages in the second document so that they are first directed to the server system for processing. For example an element within the first document may have an associated HTML attribute specifying a hyperlink to another web page. The web page may be located at a second remote web server . The document generator may add a clickable link to the second document corresponding to the hyperlink in the first document . The clickable link within the second document may contain the network address of the server system . In a manner similar to the search list described above the hyperlink first directs the web page request to the server system where the server system will retrieve the web page and forward it to the remote device after processing the web page. For example the first document may contain the following hyperlink to another document at the second remote web server 

In some implementations a web page element containing the markup link may be in the form of an advertisement banner image. The advertisement banner may have an associated ILE for example that determines a particular advertisement from a list of advertisements to display. Here a unique identifier may be included in the markup link to indicate that the server system provided access to the advertisement banner. Alternatively the unique identifier may be in another form such as an HTML id attribute. The unique identifier may be added to the markup link indicating the HTML element selected on the second document . For example the unique identifier may be passed to the server system when the markup link is selected by a user. In this implementation the unique identifiers can be used to track user actions when visiting a web site.

In step a server system receives the request for the first document from the remote device. For example the server system may receive the request for the first document from the remote device.

In optional step the server system may make a request to a remote web server for the first document. In optional steps and the remote web server may receive the request for the first document and send a response including the first document to the server system respectively. For example the server system may request from the remote web server the first document and the remote web server may send a response including the first document .

In step the server system selects an interpreted language element from the first document. For example the server system includes the parser which is capable of parsing the first document to locate the ILE .

In step the server system creates a context for the ILE. For example the parser loads the first document into a DOM tree creating the context A consisting of HTML elements. The context A may be stored in the context repository B for future access by actions in the ILE .

In step an interpreter in the server system executes the ILE. For example the interpreter executes actions in the ILE using the context A.

In optional step the server system may replace the ILE with a static language element. For example the document generator may replace the ILE in the first document with the static language element based on the results of executing the ILE .

In optional step the server system embeds the ILE in a markup link that contains an address of the server system. For example in the document generator generates the second document including the markup link that contains the address and the embedded ILE .

In step the server system transmits the second document to the remote device. For example the server system may transmit the second document to the remote device over the network using the interface .

In step the remote device displays the second document. The second document may contain one or more markup links. In optional step if the user does not select the markup link the operations terminate. Otherwise if the user selects a markup link the operations return to step where the ILE stored in the context may be executed again or an ILE embedded in the markup link may be executed using the stored context. A third electronic document may then be sent to the remote device based on the results from the execution of the ILE or the embedded ILE. The following figures illustrate an example where a markup link executed by the user initiates the generation of a third document at the server system.

In the example of the DOM tree contains an node a node and a node representing an tag a tag and a tag respectively in the first document . The node has a child node and the node has a child node . The node corresponding to the ILE of may specify actions to be performed when the user makes an input in the node .

The node has a first node that may include text such as Choose a food category describing a first input node . The node also has a second node that may include text such as Choose a specific food item describing a second input node . The first node has a first child node and a second child node . The second node also has several nodes A C.

The node may include data entry validation actions. The actions may restrict the nodes A C available to the user in the second node based on the user s selection in the first node .

For example the node may correspond to a Fruits selection and the node may correspond to a Vegetables selection that the user can make in the node . Selecting the Fruits node may cause the actions specified in the node to change the available selections in the nodes A C to Apple Banana Grape Kiwi and Orange. Accordingly selecting the Vegetables node may cause the actions specified in the node to change the available selections in the nodes A C to Carrot Cucumber Lettuce Spinach and Tomato. 

The server system may use unique identifiers A B to determine which option has been selected in the markup links that replaced the selection control . The context A may be updated based on the option selected by the user. The server system then extracts and executes the embedded ILE . During execution the context A may be needed to complete the processing of the ILE . Additionally executing the ILE may produce additional or modified elements which may add to or replace existing elements in the context A.

In some implementations the ILE may be partially executed on the remote device . For example the remote device may have support for interpretation of particular actions in the ILE . The remote device may include browser capability information in a request to the server system for the first document . The browser capability information may indicate to the server system which actions specified by the ILE the remote device is capable of executing. The transcoder processes the first document and generates the second document . The second document may include the static language element and the markup link . The second document may also include a second ILE where a portion of the second ILE may be executed at the remote device . This execution is as represented by arrow in .

For example the remote device may be capable of executing the JavaScript document.write function. In this example the server system may include an action such as the ILE of including document.write Hello Worldk p in the second document to be executed on the remote device . However the server system may continue to process other actions such as the ILE of .

In some implementations the second ILE may contain actions that the remote device is unable to execute. The remote device may send a request as represented by arrow to the server system to execute the actions that the remote device was unable to perform. The server system may then send another document as represented by arrow including any changes resulting from executing the actions that the remote device indicated it was unable to execute. In one implementation the remote device sends each request for execution of an action as actions are encountered that it is unable to execute. In another implementation the remote device sends all of the actions it is unable to execute in one request to the server system .

The system includes a processor a memory a storage device and an input output device . Each of the components and are interconnected using a system bus . The processor is capable of processing instructions for execution within the system . In one implementation the processor is a single threaded processor. In another implementation the processor is a multi threaded processor. The processor is capable of processing instructions stored in the memory or on the storage device to display graphical information for a user interface on the input output device .

The memory stores information within the system . In one implementation the memory is a computer readable medium. In one implementation the memory is a volatile memory unit. In another implementation the memory is a non volatile memory unit.

The storage device is capable of providing mass storage for the system . In one implementation the storage device is a computer readable medium. In various different implementations the storage device may be a floppy disk device a hard disk device an optical disk device or a tape device.

The input output device provides input output operations for the system . In one implementation the input output device includes a keyboard and or pointing device. In another implementation the input output device includes a display unit for displaying graphical user interfaces.

The features described can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by a programmable processor and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer will also include or be operatively coupled to communicate with one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the features can be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard or keypad and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.

The features can be implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include e.g. a LAN a WAN and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Although a few implementations have been described in detail above other modifications are possible. Portions of this disclosure discuss the electronic documents including HTML but any number of formats may be processed by the described system including XML Extensible Markup Language WML Wireless Markup Language PDF Portable Document Format word processing formats and image formats. Also the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. Also other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

