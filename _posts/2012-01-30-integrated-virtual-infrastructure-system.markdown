---

title: Integrated virtual infrastructure system
abstract: A technique is provided for creating virtual units in a computing environment. A virtual system definition is received by a processor that is utilized to create the virtual units for a virtual system. Relationship constraints between the virtual units in the virtual system are received by the processor. The relationship constraints between the virtual units include a communication link requirement between the virtual units and/or a location requirement between the virtual units. The virtual units in the virtual system are deployed by the processor according to the relationship constraints between virtual units.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09038065&OS=09038065&RS=09038065
owner: International Business Machines Corporation
number: 09038065
owner_city: Armonk
owner_country: US
publication_date: 20120130
---
Exemplary embodiments relate to virtual units and more specifically relationships among virtual units in a cloud computing environment.

Utility cloud computing delivers compute and storage resources to applications as an on demand utility similar to an electricity grid. The utility computing model is enabled by distributed collection of compute and storage resources spread over a local or a wide area network i.e. networked utilities. Examples include scientific workflows running on computational grids and multi tier web services e.g. an e commerce website operating in data centers. The utility setting offers several benefits for applications reduced infrastructure and management costs higher resource utilization and the ability to allocate resources on demand to support dynamically changing demands which results in reduced capital expenditure costs.

Virtual machine VM technology offers powerful mechanisms for efficient management of networked utilities. After a decade of advances in VMs robust and efficient VM systems are widely available and are fast becoming ubiquitous. The leading VM systems support live migration checkpoint restart and fine grained allocation of server resources as a measured and metered quantity. These capabilities create a rich decision space for utility resource management such as how an intelligent infrastructure should turn the knobs to map workload and resource requests onto a server network.

Intelligent provisioning of VMs is necessary to meet system performance goals such as meeting application Service Level Agreements SLAs optimizing application execution time and maximizing overall resource usage. However provisioning VMs to meet such goals may be considered involved because application behavior is dictated by the interaction of several factors such as Resources The number of VMs assigned to the application and the properties of the underlying resources bound to each VM e.g. CPU memory storage and network resources. Data The characteristics of the data that the application processes such as the input data size and its layout and partitioning on the storage server. Workload The characteristics of the workload seen by the application e.g. the request arrival rate and the service demand of each request.

According to an exemplary embodiment a method for creating virtual units in a computing environment is provided. A processor receives a virtual system definition that is utilized to create the virtual units for a virtual system and receives relationship constraints between the virtual units in the virtual system. The relationship constraints between the virtual units include a communication link requirement between the virtual units and or a location requirement between the virtual units. The processor deploys the virtual units in the virtual system according to the relationship constraints between virtual units.

According to an exemplary embodiment a system for creating virtual units in a computing environment is provided. The system includes memory for storing a program. The system includes a processor functionally coupled to the memory and responsive to computer executable instructions contained in the program. The processor receives a virtual system definition that is utilized to create the virtual units for a virtual system and receives relationship constraints between the virtual units in the virtual system. The relationship constraints between the virtual units include a communication link requirement between the virtual units and or a location requirement between the virtual units. The processor deploys the virtual units in the virtual system according to the relationship constraints between virtual units.

According to an exemplary embodiment a computer program product for creating virtual units in a computing environment is provided. The computer program product includes a computer readable storage medium having computer readable program code embodied therewith. The computer readable program code includes receiving by a processor a virtual system definition that is utilized to create the virtual units for a virtual system and receiving by the processor relationship constraints between the virtual units in the virtual system. The relationship constraints between the virtual units include a communication link requirement between the virtual units and or a location requirement between the virtual units. The computer readable program code includes deploying by the processor the virtual units in the virtual system according to the relationship constraints between virtual units.

According to an exemplary embodiment a method for creating virtual units in a computing environment is provided. A processor receives a virtual system definition that is utilized to create at least one virtual unit for a virtual system. The processor receives relationship constraints between the one or more virtual unit and at least one of another virtual unit of another virtual system and a component of the computing environment. The relationship constraints include at least one of a communication link requirement and a location requirement. The processor deploys the one or more virtual unit in the virtual system according to the relationship constraints.

Additional features are realized through the techniques of the present disclosure. Other systems methods apparatus and or computer program products according to other embodiments are described in detail herein and are considered a part of the claimed invention. For a better understanding of exemplary embodiments and features refer to the description and to the drawings.

Exemplary embodiments are configured to 1 design an integrated virtual infrastructure system made from virtual units and their relationships 2 provide a method for the operation and management of such a virtual system that is available to a cloud user through e.g. an application programming interface API and 3 provide a method for mapping such an integrated virtual infrastructure system onto the physical infrastructure.

In cloud computing a cloud provider makes virtual units available to cloud users to deploy and run their applications. Such virtual units include virtual machines virtual stores storage virtual images and virtual networks. These virtual units are provided through a virtualization layer on top of the actual physical resource units such as physical servers storage servers communication links and routers. Through an interface to this virtualization layer a cloud user requests virtual units and connects them to create an infrastructure where she can run her application. Specific application solutions may be provided by a cloud platform service provider as a service. An issue that a cloud user may face is that the cloud user obtains individual virtual units without being able to specify requirements on the collection of virtual units that the cloud user is requesting. Examples of such requirements are communication bandwidths among virtual machines availability needs for virtual machines and specific topological requirements for the collection of virtual units when deployed in the physical infrastructure.

The burden is put on the cloud user to create a virtual infrastructure built from individual virtual units. Existing solutions in the state of the art is for some cloud providers to make some pre built virtual infrastructures available to cloud users with the promise of a faster deployment. Such pre built virtual infrastructures may not meet the user s requirements. Exemplary embodiments provide a seamless solution where the requirements about the virtual infrastructure such as resource demands inter unit communications demands location relationships and high availability are automatically translated into an integrated virtual infrastructure.

It is understood in advance that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed. Further information regarding cloud computing may be found in the Draft NIST Working Definition of Cloud Computing by Peter Mell and Tim Grance 7 Oct. 2009 which is herein incorporated by reference in its entirety.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models which are discussed below.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based email .

The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications.

The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.

Referring now to there is illustrated a schematic of an example of a cloud computing node. Cloud computing node is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless cloud computing node is capable of being implemented and or performing any of the functionality set forth herein above and below.

In cloud computing node there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients handheld or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in the cloud computing node is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processing units .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

Referring now to there is illustrated a cloud computing environment . As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example personal digital assistant PDA or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. Cloud computing nodes may communicate with one another. They may be grouped not shown physically or virtually in one or more networks such as Private Community Public or Hybrid clouds as described hereinabove or a combination thereof. This allows cloud computing environment to offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A N shown in are intended to be illustrative only and that computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser . The computing nodes may include multiple computing systems servers operatively connected to function and operate in the cloud computer environment .

Referring now to there is illustrated a set of functional abstraction layers provided by cloud computing environment shown in . It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes in one example IBM zSeries systems RISC Reduced Instruction Set Computer architecture based servers in one example IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices networks and networking components. Examples of software components include network application server software in one example IBM WebSphere application server software and database software in one example IBM DB2 database software. IBM zSeries pSeries xSeries BladeCenter WebSphere and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide .

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual operating systems and virtual clients.

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provide pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA. The management layer also includes a forecasting based service assignment module.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing and transaction processing. Further other types of workloads may also include web service workloads enterprise applications such as billing and customer relationship management various banking and finance applications etc.

A software application comprises one or more algorithms to implement exemplary embodiments. The software application may be representative of one or more software applications configured to working together e.g. over a distributed computing network. The software application may be coupled to and or reside in the memory of computer system server . The software application may comprise one or more program modules of the program utility . Also the software application may be part of the management layer and may be run on hardware in the hardware and software layer . Also the software application is configured to implement one or more application programming interfaces API .

The virtual system may include a set of related virtual units. The virtual units may be virtual machines VM virtual images virtual networks and virtual storage volumes. In the virtual units include virtual machines collectively referred to as each having its own virtual image collectively referred to as . A virtual image may be the operating system software applications etc. running on the virtual machine. Each virtual machine may be operatively connected to its virtual storage collectively referred to as through respective virtual communication network links collectively referred to as . The virtual machines may be operatively connected through virtual communication network links collectively referred to as . The virtual system may be derived from metadata of a middleware pattern.

Reference will be made to . is a block diagram of an expanded view of the advanced IaaS layer of the software application in the logical cloud architecture according to an exemplary embodiment. The advanced IaaS layer can include the functionality of a standard IaaS layer. Although not shown in for conciseness the application management SaaS layer middleware management PaaS layer and hardware management layer are part of and function in the block diagram as understood by one skilled in the art. Initially the cloud user on computer may specify requirements for the virtual system in the graphical user interface and or to an administrator of the cloud computing environment along with relationship constraints . The software application may provide be integrated with and or communicate with the graphical user interface via the middleware management layer to receive specifications for the virtual system . The middleware management e.g. one or more software applications running on the computer system server may be configured to determine and create the pattern definition for the virtual system of the cloud user based on the user s specifications requirements. The software application utilizes the user s specifications requirements to create and deploy virtual machines virtual images virtual storages virtual communication network links and virtual communication network links .

When implementing the advanced IaaS the software application may include a virtual management system module a virtual system placement module a virtual system orchestration module and a virtual system monitoring module . Also the advanced IaaS may include a state and configuration database in which the software application communicates with.

The virtual system management module knows the structure of the virtual system that is needed for the cloud user and maintains this structure in the state and configuration database . The virtual system placement module maps the virtual units and of the virtual system to the physical hardware and software resources in the cloud computing environment according to the relationship constraints among the virtual units. The virtual system orchestration module interacts with the bottom layer to create modify and destroy virtual units in the physical hardware and software resources in the computing environment. The virtual system orchestration module stores the configuration of the virtual units in the state and configuration database .

Referring back to the software application is configured to receive the specifications i.e. demand from the user on computer which may include features of computer system server as understood by one skilled in the art for creating the virtual system and the software application is configured create and deploy the virtual system . Each virtual machine may include its own computer processing unit capability e.g. such as a processing speed random access memory RAM size input output I O size etc. based on the demand specified from the user. The virtual images may be the operating system software applications computer processes etc. that are respectively run on the virtual machines based on the specifications of the user.

Unlike state of the art systems in a cloud computing environment the user on computer can specify requirements i.e. relationship constraints between each virtual machine and its virtual storage . For example between VM and virtual storage the user can specify and the software application creates the virtual communication network link with a particular bandwidth and or bit rate e.g. such as 1 gigabit second. Similarly the software application is configured to provide and meet specified bandwidth bit rate requirements on virtual communication network links operatively connecting VM and their respective virtual storages 

Additionally the user can specify and the software application creates the virtual communication network link with a particular bandwidth and or bit rate e.g. such as 1 megabit second between VM and VM and or with a latency of no more than 5 milliseconds for transmitting X amount e.g. 100 packets between VM and VM . Likewise the software application is configured to provide and meet the specified bandwidth bit rate and latency requirements between any two VM operatively connected by their virtual communication network links based on the relationship constraints specified by the user on the computer via the graphical user interface .

Also the user on computer can specify requirements i.e. relationship constraints between each virtual machine and another virtual machine . In this case between any virtual machines the user can specify anti collocation and or collocation constraints along with bandwidth and latency constraints on the virtual communication network links and . For example the user on computer can specify that VM and VM are to be anti collocated e.g. in different zones within the virtual system . Upon receiving this relationship constraint between VM and VM the software application is configured to place deploy VM in a separate and distinct zone from VM within the virtual system . Zones in the cloud computing environment can be a rack and or set of racks of hardware equipment such as servers and storage equipment at different locations in the cloud computing environment . The software application is configured to place deploy the VM in one zone e.g. a rack and or set of racks on one side of the cloud computing environment in a building and place deploy the VM in a different zone e.g. another rack and or set of racks on another side of the cloud computing environment e.g. another side of the building . Additionally zones in the cloud computing environment can be distinct geographical locations such as different buildings such as datacenters server farms etc. housing the hardware and software equipment different cities different states different countries etc. that are separate from one another. Accordingly the software application is configured to place deploy the VM in one zone at a geographical location e.g. one datacenter city and or state in the cloud computing environment and place deploy the VM in another zone at a different geographical location e.g. different datacenter city and or state in the cloud computing environment based on receiving the anti collocation relationship constraint between VM and VM from the user. The software application is configured to determine the proper zones for each VM in order to deploy each VM based on anti collocation and or collocation relationship constraints between any virtual machine as specified by the user on computer . Additionally the cloud user may specify a high availability constraint for certain virtual machines and the software application receives and is configured to translate the high availability constraint for the specified virtual machines into an anti collocation relationship constraint between the virtual machines. As such to meet a high availability relationship constraint between VM and VM the software application automatically deploys these two virtual machines and in different zones which can ensure their availability if one zone becomes inoperable in the cloud computing environment .

As another example the user on computer can specify that VM and VM are to be collocated e.g. in the same zone or may be adjacent zones within the virtual system . Upon receiving this relationship constraint between VM and VM the software application is configured to place deploy VM in the same zone as VM within the virtual system . In one case the software application is configured to place deploy the VM and VM in the same zone e.g. the same rack and or same set of racks in the cloud computing environment which may be the same side of a building in the cloud computing environment . Additionally the software application is configured to place deploy the VM and VM in the same zone which can be the same geographical location e.g. the same datacenter city and or state in the cloud computing environment based on receiving the collocation relationship constraint between VM and VM

Also the user of the computer may include a licensing constraint requirement which can be accounted for and satisfied by the software application when building the virtual system . The licensing requirement may cause the software application to place virtual images and on two separate virtual machines and respectively. Additionally the software application may translate the licensing requirement as an anti collocation requirement such that the virtual images and are deployed in separate zones as discussed above .

Although examples are provided herein with virtual machines relationship constraints can be applied by the software application for any combination of the virtual units. For example relationship constraints may be applied between two or more virtual images between a virtual image and virtual storage between a virtual machine and virtual storage and between any of the virtual units in any combination of two or more virtual units .

Further in reference to the relationship communication constraints between a pair of virtual units in a virtual system two types of examples have been mentioned namely bandwidth or capacity and delay or latency . More generally there may be other encompassing communication network performance metrics such as e.g. measures related to probability distributions of delay and or link capacity these measures can also be defined as relationship constraints. In one case delay and bandwidth can refer to the average of such probability distributions. Measures defining percentiles of delay and capacity and or standard deviations of delay and capacity such as related to jitter would be derived from probability distribution metrics these measures can also be utilized to define relationship constraints. Although examples of relationship constraints are provided to ease understanding the disclosure is not meant to be limited.

In addition to fulfilling resource requirements for hardware and software to instantiate virtual units and in the virtual system the software application is configured to simultaneously meet multiple relationship constraints requirements between each virtual unit within the virtual system deployed in the cloud computing environment .

The graphical user interface for entering specifications and relationship constraints may be provided to the computer by the software application alone and or in cooperation with additional layers such as application management SaaS layer and middleware management PaaS layer .

The software application e.g. on the computer system server may represent one or more APIs that interact with and or provide the graphical user interface utilized by the user on the computer . The software application is the mechanism which can be via the graphical user interface that allows the cloud user to create a virtual system definition which is utilized as the pattern for the virtual system . For example the software application is configured to allow the following to be requested by the user on computer which is translated and implemented by the software application into the virtual system 

 1 Create the virtual system definition. For example the user can provide the specifications and relationship constraints for the virtual units in the virtual system .

 2 Modify the virtual system definition which includes adding removing and or modifying virtual units and policies governing relationships i.e. relationship constraints among the virtual units. The cloud user can also modify add and or remove one or more of the relationship constraints without affecting other relationship constraints .

 3 Destroy the virtual system definition For example the user can remove the virtual system from the cloud computing environment .

 4 Join and split the virtual system definition. To be executed by the software application the user can combine multiple virtual system definitions such as combine the virtual system definition for building the virtual system with another virtual system definition and or create multiple sub virtual systems by e.g. splitting the virtual system into smaller interconnected multiple virtual systems. Also the user can create client service relationships e.g. client server relationships between virtual machines and peer to peer relationships among the virtual units in the virtual system .

The software application in conjunction with standard functionality of the IaaS layer deploys instances of the virtual units and in the virtual system according to the request which includes the relationship constraints of the cloud user. The software application e.g. via one or more APIs on the computer system server can interact with and or provide the graphical user interface so that the cloud user on the computer can manage instances of the virtual system . For example the software application is configured to manage the virtual system that has already be built and allow the following to be requested by the user on computer which is translated and implemented by the software application 

 1 Deploy virtual system instance. The software application in conjunction with standard functionality of the IaaS layer takes the virtual system definition of the virtual system and instantiates the virtual units of the virtual system on the virtual resources e.g. onto the hardware and software components of hardware and software layer . The software application makes the virtual system definitions available to the cloud user publicly or privately via standard publishing mechanisms.

 2 Modify virtual system instance. The software application e.g. by request of the cloud user can change the virtual system by adding removing and or modifying the virtual units and policies governing relationship among virtual units.

 4 Join and or split virtual system instance. The software application can join the virtual system with another virtual system like virtual system . Also the software application can split the virtual system into smaller virtual systems.

Referring to the virtual system monitor of the software application is configured to provide runtime placement adjustment to ensure that relationships constraints between virtual units are satisfied. The virtual system monitor monitors data so that the software application and or an administrator on the computer system server can make changes to the virtual system to accommodate changes in the workload.

The management layer and or the software application may be configured for performance management in the cloud computing environment to prevent hotspots in the physical machines hardware and network by using migration. The management layer e.g. one or more software applications can migrate and recommend migration of virtual units from one or more computer systems servers to other computer systems servers to improve performance of the virtual units and or to continuously satisfy relationship constraints . Also the management layer is configured for power management in the cloud computing environment . The management layer can utilize past history of hardware in the cloud computing environment to determine the cost of turning on a machine such as one of the computer systems servers . The management layer may be configured to power on and power off hardware to relieve heating.

The software application on the computer system server is configured to receive a virtual system definition that is utilized to create the virtual units for a virtual system such as the virtual system at block . Also the software application is configured to receive relationship constraints between the virtual units such as between virtual units and in any varied combination in the virtual system at block . The relationship constraints between the virtual units can include a communication link requirement between the virtual units and or a location requirement between the virtual units. At block the software application is configured to deploy the virtual units in the virtual system according to the relationship constraints between virtual units as specified by the cloud user on the computer .

Further deploying the virtual units in the virtual system according to the communication link requirement between the virtual units may comprise the software application satisfying a communication bandwidth requirement between the virtual units and or satisfying a latency requirement between the virtual units. Satisfying the communication bandwidth requirement between the virtual units and the latency requirement between the virtual units only applies within the cloud computing environment . That is the communication bandwidth requirement of the relationship constraint is within the virtual system itself and does not apply to e.g. the outside communication link between the user s computer and software application on the computing system server . Also the communication bandwidth requirement may not apply between the computer and its communication link to the computing environment .

Deploying the virtual units in the virtual system according to the location requirement between the virtual units can include the software application satisfying a collocation requirement between two or more virtual units and or satisfying an anti collocation requirement between two or more virtual units. The collocation requirement causes the two or more virtual units to be instantiated in the same zone and the anti collocation requirement causes the two or more virtual units to be instantiated in separates zones. The software application is configured to provide a mechanism for a user to specify the virtual system definition that is utilized to create the virtual units and the mechanism for the user to specify each of the relationship constraints between the virtual units in the virtual system. The software application is configured to migrate move the virtual units in the virtual system from one machine e.g. the computer system server to another machine e.g. a different computer system server in the cloud computing environment to meet performance requirements.

Although examples have been described relationship constraints between virtual units within the same virtual system e.g. between virtual units in the virtual system these examples are provided for explanation purpose and the disclosure is not meant to be limited. There can be more general relationship constraints with virtual units outside of the virtual system .

These virtual units outside of the virtual system may be e.g. 1 virtual units already deployed stand alone and or part of other virtual systems and or 2 non virtual units accessible within the cloud computer environment such as components and or services defined by the cloud provider and directly accessible by cloud users where deployment satisfies the relationship constraints as well. An example is provided in . is a block diagram of the virtual system having its respective virtual units discussed above another virtual system which can have similar virtual units as discussed above for the virtual system and components services provided by the cloud provider of the cloud computer environment . The components services may include various hardware components such as servers storages devices processors etc. in the cloud computer environment . Also the components services may include various services offered by the cloud provider cloud administrator such as look up services etc. Relationship constraint is between any one or more virtual units in virtual system and any virtual units in the other virtual system . Relationship constraint is between any one or more virtual units and the components services . The relationship constraints and may include any of the types of relationship constraints e.g. relationship constraints discussed herein. Although not shown for the sake of conciseness various virtual and physical communication links can connect the virtual system the other virtual system and the components services as understood by one skilled in the art and as discussed herein.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one ore more other features integers steps operations element components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated

The flow diagrams depicted herein are just one example. There may be many variations to this diagram or the steps or operations described therein without departing from the spirit of the invention. For instance the steps may be performed in a differing order or steps may be added deleted or modified. All of these variations are considered a part of the claimed invention.

While the exemplary embodiments of the invention have been described it will be understood that those skilled in the art both now and in the future may make various improvements and enhancements which fall within the scope of the claims which follow. These claims should be construed to maintain the proper protection for the invention first described.

