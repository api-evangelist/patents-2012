---

title: Security protection domain-based testing framework
abstract: Methods and apparatus for security protection domain-based testing. A testing framework enables the same certification tests to be run across different protection domains or operation modes, and on different platforms or devices. The testing framework may, for example, be directed to testing implementations of the Java Platform, Micro Edition (Java ME®) using Connected Device Configuration (CDC) or Connected Limited Device Configuration (CLDC) as the configuration layer and Mobile Information Device Profile (MIDP) as the profile layer. Different Mobile Information Device Profile (MIDP) specifications (e.g., MIDP 2.x and MIDP 3.x specifications) may be supported. The testing framework may be deployed in the context of compatibility testing and technology compatibility kits (TCKs). The testing framework may, for example, be applied in compatibility testing for Java ME® platform technology implementations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08959485&OS=08959485&RS=08959485
owner: Oracle International Corporation
number: 08959485
owner_city: Redwood City
owner_country: US
publication_date: 20120625
---
This application claims benefit of priority of Russian Patent Application Serial No. 2012110523 entitled Security Protection Domain Based Testing Framework filed Mar. 20 2012 the content of which is incorporated by reference herein in its entirety.

Java Platform Micro Edition Java ME is a Java platform primarily targeted to relatively limited mobile and or embedded devices including but not limited to mobile cell phones smart phones tablet or pad device Personal Digital Assistants PDAs cameras control devices set top boxes game consoles home appliances and so on. Java and Java ME are trademarks or registered trademarks of Oracle Inc. and or its affiliates in the United States and other countries.

As an example of a profile Mobile Information Device Profile MIDP is a specification published for the use of Java on relatively limited mobile and or embedded devices. The MIDP specification defines a platform for dynamically and securely deploying optimized graphical networked applications . Note that an application that conforms to MIDP may be referred to as an MIDP applet or MIDlet. MIDP is part of the Java ME framework and is layered on top of a configuration that provides a set of lower level APIs. Examples of other profiles that may be used in some platform stack implementations include but are not limited to Personal Basis Profile PBP and Personal Profile PP . Examples of configurations include Connected Device Configuration CDC and Connected Limited Device Configuration CLDC . When combined with CDC or CLDC MIDP provides a standard Java runtime environment for relatively limited mobile and or embedded devices. The configuration e.g. CDC or CLDC and profile s e.g. MIDP 2.x or 3.x together provide the core application functionality required by applications on the target devices such as mobile applications in the form of a standardized Java runtime environment and a set of Java APIs. Using MIDP or other profiles in some implementations developers can develop applications once and deploy the applications quickly to a wide variety of devices.

Different versions of MIDP for example MIDP 2.x and MIDP 3.x may be used in various Java ME platforms on a variety of devices. In addition the MIDP specification defines several security protection domains which may be referred to as protection domains for simplicity . A protection domain may be defined as a set of permissions that controls which protected APIs an applet can use. For example MIDP 2.x and or MIDP3.x may support the following protection domains as defined by the respective specification Operator Manufacturer Identified 3rd Party Unidentified 3rd Party and Custom.

Depending on the profile specification a protection domain may expose different behaviors and requirements for security sensitive APIs. In other words the protection domains may be viewed as operation modes. Implementations of the Java ME platform being developed for deployment may need to be tested under these different operation modes in order to validate behavior to determine if the Java ME platform implementations conform to the protection domains as defined by the profile specifications. In addition to testing across the different protection domains the testing may need to be performed for different versions of the profile specification for example MIDP 2.x and MIDP 3.x specifications. In addition the testing may need to be performed on different devices for example mobile and or embedded devices from different vendors or manufacturers or different versions of mobile and or embedded devices from the same vendor or manufacturer.

However conventional testing frameworks for Java ME platform implementations do not readily support testing across different protection domains profile specification versions and devices. Conventional test suites run tests only in one protection domain or operation mode. Conventionally to test in the different protection domains or operation modes according to the different versions of the MIDP specification and to test on different platforms different tests have to be developed and run.

Embodiments of methods and apparatus for security protection domain based testing are described. A testing framework is described that enables the same certification tests to be run across different protection domains or operation modes and on different platforms or devices. For each protection domain to be tested the testing framework automatically selects the appropriate tests that have the correct permissions. Embodiments of the testing framework may for example be directed to testing implementations of the Java Platform Micro Edition Java ME using Connected Device Configuration CDC or Connected Limited Device Configuration CLDC as the configuration layer and Mobile Information Device Profile MIDP as the profile layer. Different Mobile Information Device Profile MIDP specifications e.g. MIDP 2.x and MIDP 3.x specifications may be supported.

Embodiments of the testing framework may be deployed in the context of compatibility testing and technology compatibility kits TCKs . Embodiments of the testing framework may for example be applied in compatibility testing for Java ME platform technology implementations. Compatibility testing may be defined as the process of testing an implementation to make sure it is compatible with a corresponding Java technology specification e.g. a Java Specification Request JSR . A suite of tests contained in a technology compatibility kit TCK may be used to test that the implementation meets and passes all of the compatibility rules of that JSR. The implementation under test may be on a separate device the unit under test than the testing device that implements the TCK including the testing framework.

A method for applying the security protection domain based testing framework in a certification process for certifying various Java ME platform implementations may include a configuration phase and a test execution phase. In the configuration phase a security mode may be selected in which the test s are to be run. For example either MIDP 2.x or MIDP 3.x may be selected. Permissions for the selected security mode may be created. A mapping of the permissions between security modes may be performed. For example the permissions may be mapped from MIDP 2.x to MIDP 3.x or vice versa. Protection domain editing and validation may then be performed. As part of the configuration process all protection domains to be considered may be described as part of the runtime testing framework description for example using a domain editor component of the testing framework. During the process of describing the protection domains the testing framework validates the protection domain descriptions against test suite security assumptions and may only allow the configuration to be completed if all of the test suite security assumptions are met for all of the protection domain descriptions.

In the test execution phase test s are evaluated and executed on the unit under test for each protection domain in which the test s are to be run. In at least some embodiments in an outer loop the protection domains are iterated and in an inner loop each of the tests are evaluated for the current protection domain according to one or more criteria and if the evaluation determines that the test is to be run for this protection domain the test is queued for execution. Otherwise the test is not performed for the current protection domain.

After the tests are executed on the unit under test results of the tests are evaluated. If all the tests passed then certification of this implementation is done. Otherwise if any test does not pass then the test failure s may be evaluated and the Java ME platform implementation may be modified accordingly to fix any problems that were identified. The certification process may then be performed again for the implementation.

While the system is described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that the system is not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit the system to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present system as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limiting to.

Embodiments of methods and apparatus for security protection domain based testing are described. A testing framework is described that enables the same certification tests to be run across different protection domains or operation modes and on different platforms or devices. A certification process using the testing framework is also described. The certification process includes a configuration setup phase and a test execution phase. During the configuration setup phase a security mode may be specified a set of permissions are determined for the current security mode mappings of permissions between security modes are generated according to a set of mapping rules results of the mapping are added to the set of permissions protection domain descriptions are edited according to the set of permissions and the protection domains are validated. During the test execution phase for each protection domain to be tested the testing framework automatically selects the appropriate tests that have the correct permissions for the current protection domain and queues the selected tests for execution. Once all queued tests are executed results may be reviewed and if one or more tests have failed the implementation under test may be modified accordingly and the testing process may be repeated.

Embodiments of the testing framework may be directed to testing implementations of the Java Platform Micro Edition Java ME using Connected Device Configuration CDC or Connected Limited Device Configuration CLDC as the configuration layer and Mobile Information Device Profile MIDP as the profile layer. Different Mobile Information Device Profile MIDP specifications e.g. MIDP 2.x and MIDP 3.x specifications may be supported. The MIDP specification defines several security protection domains which may be referred to as protection domains for simplicity . A protection domain may be defined as a set of permissions that controls which protected APIs an applet can use. For example MIDP 2.x and or MIDP3.x may support the following protection domains as defined by the respective specification Operator Manufacturer Identified 3rd Party Unidentified 3rd Party and Custom. Embodiments of the testing framework enable the same certification tests to be run on the different protection domains and on different platforms or devices for both MIDP 2.x and MIDP3.x implementations.

Embodiments of the testing framework may be used for MIDP3.x CLDC and MIDP3.x CDC security tests. The security sensitive tests may be reused for testing in different security protection domain modes. Embodiments of the testing framework may provide a unified approach for protection domain based testing suitable for many or all MIDP and CDC CLDC test suites and may provide the ability to design tests in a platform security agnostic manner. At least some embodiments may provide a method to annotate the tests in MIDP 3.x security terms to thus maximize specification and functional coverage of MIDP 3.s security.

Embodiments of the testing framework may reuse existing tests for security sensitive APIs developed for conventional technology compatibility kits TCKs e.g. conventional MIDP CLDC TCKs . The existing tests may be reused in the testing framework with relatively few modifications and with little or no loss of specification and functional coverage.

Embodiments of the testing framework provide the ability to test specification assertions corresponding to concrete protection domains. The following is an example of such an assertion and is not intended to be limiting 

Embodiments of the testing framework may test all available protection domains defined by the specification under test. Embodiments of the testing framework may minimize the changes necessary in protection domains on production devices to enable the testing. Embodiments of the testing framework may allow tests and test suites to be designed that will function on compatible conforming with specification requirements devices with minimal security assumptions. Embodiments of the testing framework may provide the same or similar user experience for all TCKs e.g. CDC J2ME . Embodiments of the testing framework may guarantee the presence and correct configuration of all specified protection domains upon successful certification with the technology compatibility kit TCK . Embodiments of the testing framework unify different TCK test types from the viewpoint of test selection i.e. Over the Air OTA tests from the viewpoint of test operator are selected and run by the same rules as automated tests. This may make certification rules easier to understand and remember and may reduce the amount of documentation that is required. Embodiments of the testing framework may maximize security testing coverage with minimal investment. Embodiments may thus reduce test development time and cost.

While embodiments are primarily described herein in the context of the Java ME platform CDC CLDC and MIDP e.g. MIDP 2.x and MIDP 3.x note that embodiments of the testing framework may be adapted for use in other similar testing environments and may be adapted for use in for use with other configurations and or profiles in the Java ME platform.

In at least some implementations the testing device and unit under test are separate devices. The testing device may include tests testing framework test monitor and server . illustrates an example computer system that may be used as a testing device. The unit under test may be but is not necessarily a relatively limited mobile and or embedded device such as a mobile cell phone smart phone tablet or pad device Personal Digital Assistant PDA camera control device set top box game console home appliance and so on.

In at least some embodiments a test may include the source code and any accompanying information that exercise a particular feature or part of a feature of a Java technology implementation to make sure that the feature complies with the Java specification s compatibility rules. A single test may contain multiple test cases. Accompanying information can include test documentation auxiliary data files or other resources used by the source code. In at least some embodiments tests correspond to assertions of the Java specification.

In at least some embodiments server is a relatively lightweight server that functions to connect to and communicate with forward data to and receive data from the client on unit under test . Generally server contains no internal test related logic.

Test monitor may be used to synchronize and monitor testing and test agent activity. Test monitor may provide a user interface that for example displays the test agent pool tests queued for execution and the test agents currently in use and may also display test results or other information.

Testing framework may act as a test provider to the server . Testing framework may provide test data to server to be passed on to client on the unit under test . Server may in turn pass data received from the client to testing framework . Additional functionality of testing framework is further described later in this document.

Unit under test may include the Java ME platform implementation to be tested. Unit under test may include client and one or more test agents . A function of client is to receive test data from server and return test results to server . A test agent is an application e.g. a MIDlet suite that receives tests from the testing device via client runs the test on the Java ME platform implementation being tested unit under test and reports the results to the testing device via client .

Embodiments of the testing framework may employ a test format for tests that provides more flexibility than conventional approaches for example flexibility to support tests that are MIDP 3.x or profile agnostic e.g. applicable to both MIDP 2.x 3.x . Embodiments of the testing framework and test format enable tests to be developed that are MIDP version agnostic and thus may enable a test designed and developed for MIDP 2.x to be successfully run on MIDP 3.x implementations and vice versa.

In at least some embodiments a test description s grant deny attributes values may be extended to include the list of permissions of both MIDP 2.x and 3.x types. For example a test whose grant and deny attribute values are 

During test execution all three permissions from the grant attribute value may be requested in the test MIDlet suite manifest and will be granted to the test application code during runtime. However the permissions from the deny attribute values will not be requested in the test MIDlet suite manifest and as a consequence will be denied to the test.

When the test description is expressed in terms of MIDP 2.x security i.e. the grant attribute value may only contain MIDP 2.x named permissions or when the testing is done on an MIDP 2.x implementation this call is performed from the MIDP 2.x MIDlet suite and may result in 

In other words all permissions for access to HTTP are either granted or denied at the schema level i.e. it is not possible to deny HTTP access to particular hosts ports.

MIDP 3.x permissions provide more flexibility in security management than do MIDP 2.x permissions which in turn results in different requirements for test design in the MIDP 3.x case. Consider the following example using the above test description. A call to 

Existing tests including one or more calls to security sensitive APIs may contain lists of necessary permissions in their descriptions e.g. javax.microedition.io.file.read javax.microedition.apdu.sat or MIDP 3.x permissions . In at least some embodiments these values are placed into to a Java Archive JAR file manifest Java Application Descriptor JAD permission request with the test via the MIDP 2.x manifest attribute MIDlet Permissions or MIDP 3.x manifest attribute MIDlet Permission if needed according to the specification requirements.

In at least some embodiments to extend this approach to MIDP 3.x the list of MIDP permissions may be converted to corresponding MIDP 3.x permissions. More precise attribute definitions may be made according to the protection domain and specification requirements. The same test code may be executed in the preconfigured security environment.

Embodiments of the testing framework described herein correctly execute security sensitive tests on for example MIDP3.x CLDC and MIDP3.x CDC stacks. Components of the test suite may include a runtime test execution framework the testing framework and the tests to be executed. Functions of the testing framework may include but are not limited to the following 

Tests are described by property tables referred to as test descriptions and include information used by the testing framework to perform its functions. The following sections further describe the tests and the testing framework according to embodiments.

Table 1 shown in lists several test description attributes that may be used in the security testing approach implemented by the testing framework according to at least some embodiments. Table 1 provides the attribute names in the left column with a description of the respective attribute and its provided in the right column.

The test description attribute suitableForDomains specifies a list of protection domains in which the test is to be executed. If the test description includes the attributes grant and or deny all of the listed protection domains must allow these attributes requirements to be followed.

The test description attribute doubleDutySecurity yes specifies that during runtime the test description will be duplicated to all protection domains that do not contradict the test description s grant and deny attributes. If the original test description does not include the attribute suitebleForDomains the duplicates will include the attribute suitableForDomains ID for all protection domains defined in the test framework. Otherwise the duplicates will include all protection domains mentioned in suitebleForDomains in the original test description.

The test description attribute grant specifies that the test may only be run in protection domains where all permissions from are either Allowed or User.

The test description attribute deny specifies that the test may only be run in protection domains where all permissions from will be denied during the test run.

Components of the testing framework include but are not limited to one or more executable modules and a runtime testing framework description. In at least some embodiments the runtime testing framework description may include mappings from MIDP 2.x to MIDP 3.x and vice versa for all permissions mentioned by the set of test descriptions.

In at least some embodiments the runtime testing framework description may include definitions and descriptions for all protection domains considered in the test suite in general of all protection domains mentioned by the specification under test . In at least some embodiments a protection domain description may split all permissions referenced by the test descriptions into three groups Allowed User and Not Permitted .

In at least some embodiments the testing framework may provide one or more methods for editing the protection domain descriptions. This may be referred to as a protection domain editor feature.

In at least some embodiments the testing framework may validate the protection domain descriptions to ensure that certification can be performed using the protection domain descriptions as described. In at least some embodiments validation involves ensuring that a protection domain description does not contradict the test suite s security assumptions. Test suite security assumptions may include but are not limited to the following 

To certify the Java ME platform implementation under test with the technology compatibility kit TCK all tests selected by the certification filter should be selected and executed according to the runtime testing framework description. is a high level flowchart of a method for performing certification testing using a TCK that implements the testing framework described herein according to at least some embodiments.

As indicated at the TCK is configured. As part of TCK configuration all protection domains to be considered by the TCK should be described as part of the runtime testing framework description see above . During the process of describing the protection domains the testing framework validates the protection domain descriptions against the test suite security assumptions see Table 1 and may only allow the TCK configuration to be completed if all of the test suite security assumptions are met for all of the protection domain descriptions.

As indicated at security policy on the unit under test may be configured to comply with the protection domain descriptions as specified during TCK configuration.

As indicated at all tests selected by the certification filter may then be run. In at least some embodiments to run the tests for each described protection domain the following are performed until all tests are run 

The following describes automated tests and over the air tests using embodiments of the testing framework implanted in a technology compatibility kit TCK .

During a test run automated tests may be packaged into MIDlet suites. According to the information provided in the test descriptions permission requests may be added following the rules as illustrated in Table 2 which is shown in . Table 2 shows how Grant and Deny permissions are present in the test description in the left column and shows the respective permission modes in the current protection domain in the other three columns Allowed User or Not Permitted . As shown in Table 2 if the permission in the test description is Grant . . . P . . . 

Table 3 in shows rules for mapping permissions between MIDP versions MIDP 2.x and MIDP 3.x according to at least some embodiments. Depending on the MIDP version under test a mandatory permission request for permission P mentioned in the test is evaluated according to the rules in Table 3. As shown in Table 3 if P MIDP 2.x permission then P goes into the permission request if MIDP 2.x implementation is tested. If MIDP 3.x implementation is tested then the result of lookup MIDP 3.x permission goes into the permission request. If P MIDP 3.x permission then the result of lookup MIDP 2.x permission goes into the permission request if MIDP 2.x implementation is tested. If MIDP 3.x implementation is tested then P goes into the permission request.

is Allowed in the current protection domain so P is requested in the mandatory permission request i.e. the manifest will include an attribute 

are Not Permitted in the current protection domain and the manifest will not include a permission request attribute with this permission in the request. As a consequence of this rule test descriptions should not include grant P and deny P where P implies P or where P implies P.

In at least some embodiments when an automated test is bundled the following rule is applied. If two test descriptions that are selected to be run one by one include different values of Grant and or Deny attributes the tests will not be packaged into the same MIDlet suite.

In at least some embodiments during a test execution the user may be required to answer Yes to security prompts.

In at least some embodiments Over the Air OTA tests may include pre packaged MIDlet suite Java Archive JAR files with ready manifests which are not expected to be modified during the test run. As a consequence these tests may not be MIDP version agnostic. In addition existing tests may require permissions. For example to communicate to the server in the testing framework an OTA test s MIDlet suite may need HTTP protocol permission to a concrete port on a concrete machine but the machine name and port may not be known until testing framework TF configuration .

In at least some embodiments to minimize security requirements for OTA tests the following may be implemented 

In at least some embodiments during a test execution the user may be required to answer Yes to security prompts unless the user is asked explicitly to deny a particular permission in the OTA test prompt.

As indicated at after the configuration is complete the tests may be run. describes element of in more detail.

As indicated at the method may get a next protection domain under which the tests are to be run on the unit under test. Note that the protection domains may be processed in any order. Also note that all or a subset of the protection domains may be tested for a given implementation.

As indicated at the next test for the current protection domain may be obtained from the suite of tests to be applied to this implementation. Note that the tests may be processed in any order. An example test format for the tests is described in the section titled Test Format. As indicated at the test may be evaluated according to one or more criteria to determine whether the test is to be executed. See for more details of test evaluation.

At if the evaluation determines that the test is to be executed the test is queued for execution on the unit under test as indicated at . If the evaluation determines that the test is not to be executed the test is not queued for execution. At if there are more tests to be evaluated for the current protection domain then the method returns to element . If all the tests have been evaluated for the current protection domain then at if there are more protection domains to be tested the method returns to element to get the next protection domain. Otherwise the method is complete. Note that test s may still be running on the unit under test and results of tests may still be received at the testing device from the unit under test.

As indicated at a current security mode may be selected. For example either MIDP 2.x or MIDP 3.x may be selected.

As indicated at a set of all permissions to be used in the current security mode may be created. See e.g. Tables 1 and 2. In addition mapping of the permissions between security modes may be performed. For example the permissions may be mapped from MIDP 2.x to MIDP 3.x or vice versa. See e.g. Table 3 which shows rules for mapping permissions between MIDP versions MIDP 2.x and MIDP 3.x according to at least some embodiments. The MIDP 2.x MIDP 3.x mapping results for all considered permissions are added to the permission set.

Elements through expand on element performing protection domain description editing and validation of . As part of the configuration process all protection domains to be considered may be described as part of the runtime testing framework description for example using a domain editor component of the testing framework. During and or after the process of describing the protection domains the testing framework validates the protection domain descriptions against the test suite security assumptions see Table 1 and may only allow the configuration to be completed if all of the test suite security assumptions are met for all of the protection domain descriptions.

At of a first protection domain is obtained. At editing and validation of the current protection domain begins. At if the current protection domain is not implemented on the Java ME platform implementation to be tested then the method returns to to get the next protection domain if any. If the current protection domain is implemented then at editing of the current protection domain description is performed. During editing for every permission in the permission set the permission is marked as Allowed User or Not Permitted in the current protection domain description. In at least some embodiments a user interface may be provided that includes one or more user interface elements that allow a user to perform the editing of the protection domain descriptions.

During and or after protection domain description editing validation of the current protection domain is performed. In at least some embodiments the validation may include technology compatibility kit TCK level validation and specification level validation. As shown at and if either the TCK level validation or the specification level validation fails the method returns to so that the current protection domain description can be re edited to overcome the failure s . If both the TCK level validation and the specification level validation pass and if there are more protection domains to be edited and validated then the method returns to to get the next protection domain. If both the TCK level validation and the specification level validation pass and if there are no more protection domains to be edited and validated then the test run is ready to begin. continues the flowchart and illustrates the test execution process .

As indicated at the method may get a next protection domain domain j under which the tests are to be run on the unit under test. Note that the protection domains may be processed in any order. Also note that all or a subset of the protection domains may be tested for a given implementation. Domains that are not implemented on the implementation under test are not tested.

As indicated at the next test test k for domain j may be obtained from the suite of tests to be applied to this implementation. Note that the tests may be processed in any order. An example test format for the tests is described in the section titled Test Format.

At if test k is not applicable to the platform implementation under test then the method jumps to element . No further evaluation of test k is performed and test k is not queued for execution. If test k is applicable to the platform implementation under test then the method proceeds to element .

At if the test description for test k does not match the current protection domain domain j then the method jumps to element . In at least some embodiments this involves comparing permissions specified by test k s test description to permissions specified by the protection domain description corresponding to domain j . If the test description does not match the current protection domain no further evaluation of test k is performed and test k is not queued for execution. If the test description for test k does match the current protection domain then the method proceeds to element .

At if the test description for test k does not include the doubleDutySecurity yes attribute see e.g. Table 1 then the method jumps to element and test k is queued for execution. If the test description for test k does include the doubleDutySecurity yes attribute then the method proceeds to element .

At if the evaluation has determined that the test is to be executed the test is queued for execution on the unit under test.

At if there are more tests to be evaluated for domain j then the method returns to element . If all the tests have been evaluated for domain j then at if there are more protection domains to be tested the method returns to element to get the next protection domain.

At as or after the tests are executed on the unit under test results of the tests are evaluated. If all the tests passed then certification is done. Otherwise if any test does not pass then at the test failure s may be evaluated and the Java ME platform implementation may be modified accordingly to fix any problems that were identified. The certification process may then be performed again. In at least some embodiments one or more of the elements in may not need to be performed on subsequent certification runs on the same Java ME platform implementation.

Various components of embodiments of the methods for security protection domain based testing as described herein may be executed on one or more computer systems which may interact with various other devices. One such computer system is illustrated by . In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface and one or more input output devices such as cursor control device keyboard audio device and display s . In some embodiments it is contemplated that embodiments may be implemented using a single instance of computer system while in other embodiments multiple such systems or multiple nodes making up computer system may be configured to host different portions components or instances of embodiments. For example in one embodiment some elements may be implemented via one or more nodes of computer system that are distinct from those nodes implementing other elements.

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processor capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

In some embodiments at least one processor may be a graphics processing unit. A graphics processing unit or GPU may be considered a dedicated graphics rendering device for a personal computer workstation game console or other computer system. Modern GPUs may be very efficient at manipulating and displaying computer graphics and their highly parallel structure may make them more effective than typical CPUs for a range of graphical algorithms. For example a graphics processor may implement a number of graphics primitive operations in a way that makes executing them much faster than drawing directly to the screen with a host central processing unit CPU . The GPU s may implement one or more application programmer interfaces APIs that permit programmers to invoke the functionality of the GPU s . Suitable GPUs may be commercially available from vendors such as NVIDIA Corporation ATI Technologies and others.

System memory may be configured to store program instructions and or data accessible by processor . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing desired functions such as those described above for various embodiments of a method for security protection domain based testing are shown stored within system memory as program instructions and data storage respectively. In other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media or on similar media separate from system memory or computer system . Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or CD DVD ROM coupled to computer system via I O interface . Program instructions and data stored via a computer accessible medium may be transmitted by transmission media or signals such as electrical electromagnetic or digital signals which may be conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces such as input output devices . In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. In addition in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network such as other computer systems or between nodes of computer system . In various embodiments network interface may support communication via wired or wireless general data networks such as any suitable type of Ethernet network for example via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

Input output devices may in some embodiments include one or more display terminals keyboards keypads touchpads scanning devices voice or optical recognition devices or any other devices suitable for entering or retrieving data by one or more computer system . Multiple input output devices may be present in computer system or may be distributed on various nodes of computer system . In some embodiments similar input output devices may be separate from computer system and may interact with one or more nodes of computer system through a wired or wireless connection such as over network interface .

As shown in memory may include program instructions configured to implement embodiments of the method for security protection domain based testing and data storage comprising various data accessible by program instructions . In one embodiment program instructions may include software elements of embodiments of a method for security protection domain based testing as illustrated in the above Figures. Data storage may include data that may be used in embodiments. In other embodiments other or different software elements and data may be included.

Those skilled in the art will appreciate that computer system is merely illustrative and is not intended to limit the scope of a method for security protection domain based testing as described herein. In particular the computer system and devices may include any combination of hardware or software that can perform the indicated functions including computers network devices internet appliances PDAs wireless phones pagers etc. Computer system may also be connected to other devices that are not illustrated or instead may operate as a stand alone system. In addition the functionality provided by the illustrated components may in some embodiments be combined in fewer components or distributed in additional components. Similarly in some embodiments the functionality of some of the illustrated components may not be provided and or other additional functionality may be available.

Those skilled in the art will also appreciate that while various items are illustrated as being stored in memory or on storage while being used these items or portions of them may be transferred between memory and other storage devices for purposes of memory management and data integrity. Alternatively in other embodiments some or all of the software components may execute in memory on another device and communicate with the illustrated computer system via inter computer communication. Some or all of the system components or data structures may also be stored e.g. as instructions or structured data on a computer accessible medium or a portable article to be read by an appropriate drive various examples of which are described above. In some embodiments instructions stored on a computer accessible medium separate from computer system may be transmitted to computer system via transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link. Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Accordingly the present invention may be practiced with other computer system configurations.

Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc. as well as transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

The various methods as illustrated in the Figures and described herein represent examples of embodiments of methods. The methods may be implemented in software hardware or a combination thereof. The order of method may be changed and various elements may be added reordered combined omitted modified etc.

Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended that the invention embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

