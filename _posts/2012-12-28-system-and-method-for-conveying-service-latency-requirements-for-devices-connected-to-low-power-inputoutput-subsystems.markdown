---

title: System and method for conveying service latency requirements for devices connected to low power input/output sub-systems
abstract: In at least one embodiment described herein, an apparatus is provided that can include means for communicating a latency tolerance value for a device connected to a platform from a software latency register if a software latency tolerance register mode is active. The apparatus may also include means for communicating the latency tolerance value from a hardware latency register if a host controller is active. The latency tolerance value can be sent to a power management controller. More specific examples can include means for communicating a latency tolerance value from the software latency register if the software latency tolerance register mode is not active and the host controller is not active. The apparatus can also include means for mapping a resource space in the software latency register for the device using a BIOS/platform driver. The mapping can be achieved using an advanced configuration and power interface device description.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09158357&OS=09158357&RS=09158357
owner: Intel Corporation
number: 09158357
owner_city: Santa Clara
owner_country: US
publication_date: 20121228
---
Embodiments described herein generally relate to providing for power savings in a processor environment.

As electronic devices become more complex and more ubiquitous in the everyday lives of users more and more diverse requirements are placed upon them. For example many electronic devices can operate on battery power thus allowing users to operate these devices in many different circumstances. In addition as capabilities of electronic devices become more extensive many users may become reliant on the enhanced performance such capabilities provide. As these aspects of electronic devices have evolved there has become an increasing need for power optimization so that users may enjoy longer battery life. However under many circumstances power optimization may sacrifice performance. Therefore it will be highly beneficial for a user to be able to have the desired performance when it matters the most to them and to have power optimization during circumstances where performance may be less important to them.

The FIGURES of the drawings are not necessarily drawn to scale or proportion as their dimensions arrangements and specifications can be varied considerably without departing from the scope of the present disclosure.

The following detailed description sets forth example embodiments of apparatuses methods and systems relating to providing a power savings in a processor environment. Features such as structure s function s and or characteristic s for example are described with reference to one embodiment as a matter of convenience various embodiments may be implemented with any suitable one or more of the described features.

In at least one example embodiment electronic device comprises device hardware platform hardware an operating system drivers interconnects and buses and power management controller . Device hardware includes device configuration registers . Platform hardware includes software latency registers hardware latency registers and a host controller . Drivers include controller drivers transport drivers function drivers and Basic Input and Output System BIOS Platform drivers . BIOS Platform drivers include advanced configuration and power interface ACPI device description and a host controller ACPI device description . Note that the present disclosure can be applicable to ACPI Revision 5.0 released in November 2011. Additionally the present disclosure is applicable to any other version of the ACPI Specification. ACPI includes device configuration device resources and software latency tolerance registers . Host controller ACPI includes host controller registers and device resources . Interconnects and buses include a universal asynchronous receiver transmitter UART controller and a secure digital input output SD I O controller .

System power may be managed by placing the system and or one or more parts of the system into power states that influence the operation of the system such that the power consumption of the system differs across different power states. There may be a tradeoff associated with each power state between performance and power savings. For example higher power saving power states may be associated with a longer delay in placing the system and or one or more parts of the system into a state that allows for execution of instructions.

For purposes of illustrating certain example techniques of electronic device it is important to understand that current platform level power management is based on some heuristics collected on the platform and some guidance given by an operating system. As such processor utilization is often used as a rough estimate of platform activity. When there is heavy input output I O activity and light processor utilization however the platform can be put into lower power states impacting I O performance. Indeed as a platform goes into deeper power states its response latency to break events like direct memory access DMA accesses and interrupts increases. Although many I O devices are designed to tolerate some fixed minimum response latency from the platform this can effectively limit the depth of power states which the platform may enter. The platform could compromise functionality and or performance if the platform entered a deeper power state that increased its response latency beyond the fixed minimum an I O device could tolerate.

Platform manufacturers have to work closely to qualify devices and further have a prior knowledge on whether a device is able to be consistent with the latency requirements for the platform. For devices that are connected to buses that support latency tolerance messaging the devices can use the mechanisms defined in the Specification to indicate their latency requirements. For devices that are connected to buses that do not support latency tolerance messaging SDIO UART Inter Integrated Circuit I2C etc. since there is no dynamic mechanism for latency indication often platform components are kept in a high power state to provide the required performance. As a result these platforms are unable to enter deeper low power states.

Particular embodiments described herein allow for device driver software e.g. BIOS Platform drivers of connected peripherals to dynamically update hardware registers e.g. hardware latency registers in a platform address space assigned to the connected peripherals on activity levels. Updates to the hardware register can trigger a latency tolerance message to be sent to a platform power management controller e.g. power management controller which may forward the message to ACPI device description . Device driver software e.g. device configuration is able to convey the requirements of a specific device s latency based on activity levels. The device driver software can indicate larger latency tolerance when idle thereby allowing the platform e.g. electronic device to go into deeper high latency low power states. When the latency is lower based on device buffering and other performance requirements the platform may go into a low latency high power state.

Hardware latency registers in the platform e.g. platform hardware are accessible within the platform address space by host controller registers . Devices can write to the hardware registers and trigger latency tolerance messages to be sent to a platform power management controller e.g. power management controller . BIOS or a platform driver e.g. BIOS Platform drivers can configure latency registers e.g. software latency registers in platform e.g. platform hardware accessible to the device driver. The mechanism used to make the hardware registers accessible can vary and may depend on the platform implementation.

In an embodiment the mechanism may include a BIOS change to map latency registers in the platform e.g. platform hardware to allocate resource space e.g. in software latency registers and allow the device driver to access the latency registers via memory mapped I O registers e.g. software latency tolerance registers . In another embodiment the mechanism may include a platform driver from BIOS platform drivers which can directly read or write to a device configuration register e.g. device configuration registers and expose an application programming interface API e.g. function driver or transport driver to device driver e.g. software latency tolerance registers for accessing software latency registers . In another embodiment a host controller driver can directly read or write to software latency registers and expose API interface to device driver e.g. function driver or transport driver for accessing the software latency tolerance register .

Turning to is a simplified flowchart illustrating one potential operation associated with the present disclosure. At a device is working and connected to a platform . The device may be any device that has latency requirements. At the device driver updates latency tolerance register requirements based on activity levels e.g. the device can have a large latency tolerance value when idle and a smaller latency tolerance value when active . At the system determines if the device is entering an ACPI D2 or D3 state. If the device is not entering an ACPI D2 or D3 state then the device driver updates latency tolerance register requirements based on activity levels as in . If the device is entering an ACPI D2 or D3 state then the device driver updates the latency tolerance register requirement e.g. as a no tolerance requirement or NO REQ as in . At the device moves to an active state and returns to where the device driver is working and the device driver updates latency tolerance register requirements based on activity levels as in .

Even though sleep power states described herein relate to ACPI it should be understood that ACPI is merely an example of a power management scheme that may be utilized to manage power in a processor or a system. Therefore direct references to specific elements of the ACPI do not limit the claims unless such specific elements are expressly incorporated into the claims. Device power states under the example ACPI standard used herein may be referred to as D level states. Power state D0 is associated with the device being fully on and in an operating state. Power state D0 may be associated with absence of power or thermal savings and may be referred to as an operation mode.

Power states D1 and D2 may be associated with intermediate power states whose definition varies by device. Device power state D1 is the highest powered device low power state. The power consumption in a D1 state is less than in the D0 state but greater than or equal to that in the D2 state. Frequently D1 is a clock gated state in which the device receives just enough power to preserve the device s hardware context. Typically the Specification for a bus or device class that supports D1 describes this state in more detail. Generally the device context is preserved by the hardware and need not be restored by the driver. The Specification for a bus or device class that supports D1 typically provides detailed requirements for preserving this context. The device driver behavior should save and restore or reinitialize any context lost by the hardware. Typically however devices lose little context upon entering this state. The restore time the time required to restore the device to D0 from D1 should be less than restoration from D2 to D0. Typically devices that use D1 do so because resuming from this state does not require the driver to restore the device s full hardware context.

Power state D2 is an intermediate device low power state where power consumption is less than or equal to that in the D1 state. In general most device context is lost by the hardware when in a D2 state. Frequently the state preserves the part of the context that is used to signal wake events. The Specification for a bus or device class that supports D2 typically provides detailed requirements for preserving this context. A typical device generally loses the most context when it enters D2 and therefore device drivers should save and restore or reinitialize any context lost by the hardware. The restore time from D2 to D0 takes at least as long as restoring the device from D1 to D0. Typically drivers that support D2 do so because their devices cannot support a wake from D3. For these devices power consumption in the D2 state drops to the lowest level from which the device can recover in response to a wake signal. In contrast to the D1 state which is implemented to reduce the delay perceived by the user the goal in implementing the D2 state is to conserve power. As a result the restore time from D2 to D0 typically exceeds that from D1 to D0. In the D2 state for example reduced power on the bus might cause a device to turn off some of its functionality thus requiring additional time to restart and restore the device. Many classes of device do not define a D2 state.

Power State D3 has the device powered off and unresponsive to its bus. The D3 state may be referred to as a sleep state. The D3 state can be further divided into two sub states D3 hot and D3 cold. When a device is in a D3 hot state the device has auxiliary power. When the device is in a D3 cold state the device does not have any or little power provided. A device in D3 hot can assert power management requests to transition to higher power states.

In at least one example embodiment electronic device includes software latency register hardware latency register first logic gate and second logic gate . The hardware latency register is applicable only if the software latency tolerance register mode is not enabled. In this case if the host controller active signal is active i.e. the host controller is active then the value in the hardware latency register is used. If the host controller is in a D3 state or is otherwise not moving data then host controller active signal is not active. When a software latency tolerance LTR mode signal is active then the value in the software latency register is used. Software LTR mode signal is a static bit that can be enabled by BIOS platform drivers .

Turning to is a simplified flowchart illustrating one potential operation associated with the present disclosure. At the system determines if the software LTR mode is active. If the software LTR mode is active then the value in the software latency register is sent to the power management controller as in . If the software latency tolerance register mode is not active then the system determines if the host controller is active as in . If the host controller is active then the value in the hardware latency register is sent to the power management controller as in . If the host controller is not active then the value in the software latency register is sent to the power management controller as in .

Turning to is a simplified flowchart illustrating one potential operation associated with the present disclosure. At the system determines if the host controller is active. If the host controller is not active then the value in the software latency register is sent to the power management controller as in . If the host controller is active then the value in the software latency register is compared to the value in the hardware latency register as in . At the system determines if the value in the software latency register is lower than the value in the hardware latency register. If the value in the software latency register is not lower than the value in the hardware latency register then the value in the hardware latency register is sent to the power management controller as in . If the value in the software latency register is lower than the value in the hardware latency register then the value in the software latency register is sent to the power management controller as in .

In at least one example embodiment electronic device includes platform hardware operating system drivers and interconnects and buses . Platform hardware includes software latency registers host controller and hardware latency registers . Drivers contain a Bluetooth stack core driver controller drivers transport drivers and BIOS platform drivers . Note that the present disclosure can be applicable to Bluetooth Core Specification version 4.0 adopted 30 Jun. 2010. Additionally the present disclosure is applicable to any other version of the Bluetooth Specification. Transport drivers include a Bluetooth UART transport driver . Controller drivers include a UART controller driver . Interconnects and buses include UART controller and a Bluetooth controller .

BIOS platform driver can map the software latency registers in platform hardware to a resource space in software latency registers for a Bluetooth device . The mapping may be as described in an ACPI device description for Bluetooth device . During a resource enumeration boot by OS OS can convert memory mapped IO MMIO descriptors e.g. software latency tolerance registers in ACPI device description for software latency registers that have been included in Bluetooth device s ACPI device description into memory resource descriptors. The memory resource descriptors can be conveyed to Bluetooth UART transport driver during driver initialization. Bluetooth UART transport driver can map the physical address for the MMIO range for software latency registers provided as memory resource descriptor by OS . Once these MMIOs are mapped Bluetooth UART transport driver is able to access software latency registers .

While Bluetooth device is in an ACPI D0 state and actively transmitting or receiving data Bluetooth UART transport driver is responsible for updating software latency register as often as needed to reflect the current latency requirements of Bluetooth device . If Bluetooth device is transitioning to an idle or low power device state exiting D0 and transitioning to either a D2 or D3 power state Bluetooth transport driver can update software latency registers with value NO REQ No requirement prior to exiting the D0 state. Bluetooth UART transport driver should only promote a latency value associated with active traffic when Bluetooth device is active and in a D0 state.

In this example of ARM ecosystem SOC may include multiple cores an L2 cache control a bus interface unit an L2 cache a graphics processing unit GPU an interconnect a video codec and a liquid crystal display LCD I F which may be associated with mobile industry processor interface MIPI high definition multimedia interface HDMI links that couple to an LDC.

ARM ecosystem SOC may also include a subscriber identity module SIM I F a boot read only memory ROM a synchronous dynamic random access memory SDRAM controller a flash controller a serial peripheral interface SPI master a suitable power control a dynamic RAM DRAM and flash . In addition one or more example embodiment include one or more communication capabilities interfaces and features such as instances of Bluetooth a 3G modem a global positioning system GPS and an 802.11 WiFi .

In operation the example of can offer processing capabilities along with relatively low power consumption to enable computing of various types e.g. mobile computing high end digital home servers wireless infrastructure etc. . In addition such an architecture can enable any number of software applications e.g. Android Adobe Flash Player Java Platform Standard Edition Java SE JavaFX Linux Microsoft Windows Embedded Symbian and Ubuntu etc. . In at least one example embodiment the core processor may implement an out of order superscalar pipeline with a coupled low latency level 2 cache.

System control logic in at least one embodiment includes any suitable interface controllers to provide for any suitable interface to at least one processor and or to any suitable device or component in communication with system control logic . System control logic in at least one example embodiment includes one or more memory controllers to provide an interface to system memory . System memory may be used to load and store data and or instructions for example for system . System memory in at least one example embodiment includes any suitable volatile memory such as suitable dynamic random access memory DRAM for example. System control logic in at least one example embodiment includes one or more input output I O controllers to provide an interface to a display device touch controller and non volatile memory and or storage device s .

Non volatile memory and or storage device s may be used to store data and or instructions for example within software . Non volatile memory and or storage device s may include any suitable non volatile memory such as flash memory for example and or may include any suitable non volatile storage device s such as one or more hard disc drives HDDs one or more compact disc CD drives and or one or more digital versatile disc DVD drives for example.

Power management controller may include power management logic configured to control various power management and or power saving functions disclosed herein or any part thereof. In at least one example embodiment power management controller is configured to reduce the power consumption of components or devices of system that may either be operated at reduced power or turned off when the electronic device is in the closed configuration. For example in at least one example embodiment when the electronic device is in a closed configuration power management controller performs one or more of the following power down the unused portion of a display and or any backlight associated therewith allow one or more of processor s to go to a lower power state if less computing power is required in the closed configuration and shutdown any devices and or components such as a keyboard that are unused when an electronic device is in the closed configuration.

Communications interface s may provide an interface for system to communicate over one or more networks and or with any other suitable device. Communications interface s may include any suitable hardware and or firmware. Communications interface s in at least one example embodiment may include for example a network adapter a wireless network adapter a telephone modem and or a wireless modem.

System control logic in at least one example embodiment includes one or more input output I O controllers to provide an interface to any suitable input output device s such as for example an audio device to help convert sound into corresponding digital signals and or to help convert digital signals into corresponding sound a camera a camcorder a printer and or a scanner.

For at least one example embodiment at least one processor may be packaged together with logic for one or more controllers of system control logic . In at least one example embodiment at least one processor may be packaged together with logic for one or more controllers of system control logic to form a System in Package SiP . In at least one example embodiment at least one processor may be integrated on the same die with logic for one or more controllers of system control logic . For at least one example embodiment at least one processor may be integrated on the same die with logic for one or more controllers of system control logic to form a System on Chip SoC .

For touch control touch controller may include touch sensor interface circuitry and touch control logic . Touch sensor interface circuitry may be coupled to detect touch input over a first touch surface layer and a second touch surface layer of a display i.e. display device . Touch sensor interface circuitry may include any suitable circuitry that may depend for example at least in part on the touch sensitive technology used for a touch input device. Touch sensor interface circuitry in one embodiment may support any suitable multi touch technology. Touch sensor interface circuitry in at least one embodiment includes any suitable circuitry to convert analog signals corresponding to a first touch surface layer and a second surface layer into any suitable digital touch input data. Suitable digital touch input data for one embodiment may include for example touch location or coordinate data.

Touch control logic may be coupled to help control touch sensor interface circuitry in any suitable manner to detect touch input over a first touch surface layer and a second touch surface layer. Touch control logic for at least one example embodiment may also be coupled to output in any suitable manner digital touch input data corresponding to touch input detected by touch sensor interface circuitry . Touch control logic may be implemented using any suitable logic including any suitable hardware firmware and or software logic e.g. non transitory tangible media that may depend for example at least in part on the circuitry used for touch sensor interface circuitry . Touch control logic for one embodiment may support any suitable multi touch technology.

Touch control logic may be coupled to output digital touch input data to system control logic and or at least one processor for processing. At least one processor for one embodiment may execute any suitable software to process digital touch input data output from touch control logic . Suitable software may include for example any suitable driver software and or any suitable application software. As illustrated in system memory may store suitable software and or non volatile memory and or storage device s .

Note that in some example implementations the functions outlined herein may be implemented in conjunction with logic that is encoded in one or more tangible non transitory media e.g. embedded logic provided in an application specific integrated circuit ASIC in digital signal processor DSP instructions software potentially inclusive of object code and source code to be executed by a processor or other similar machine etc. . In some of these instances memory elements can store data used for the operations described herein. This includes the memory elements being able to store software logic code or processor instructions that are executed to carry out the activities described herein. A processor can execute any type of instructions associated with the data to achieve the operations detailed herein. In one example the processors could transform an element or an article e.g. data from one state or thing to another state or thing. In another example the activities outlined herein may be implemented with fixed logic or programmable logic e.g. software computer instructions executed by a processor and the elements identified herein could be some type of a programmable processor programmable digital logic e.g. a field programmable gate array FPGA a DSP an erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM or an ASIC that includes digital logic software code electronic instructions or any suitable combination thereof.

Note that with the examples provided above as well as numerous other examples provided herein interaction may be described in terms of layers protocols interfaces spaces and environments more generally. However this has been done for purposes of clarity and example only. In certain cases it may be easier to describe one or more of the functionalities of a given set of flows by only referencing a limited number of components. It should be appreciated that the architectures discussed herein and its teachings are readily scalable and can accommodate a large number of components as well as more complicated sophisticated arrangements and configurations. Accordingly the examples provided should not limit the scope or inhibit the broad teachings of the present disclosure as potentially applied to a myriad of other architectures.

It is also important to note that the blocks in the flow diagrams illustrate only some of the possible signaling scenarios and patterns that may be executed by or within the circuits discussed herein. Some of these blocks may be deleted or removed where appropriate or these steps may be modified or changed considerably without departing from the scope of teachings provided herein. In addition a number of these operations have been described as being executed concurrently with or in parallel to one or more additional operations. However the timing of these operations may be altered considerably. The preceding operational flows have been offered for purposes of example and discussion. Substantial flexibility is provided by the present disclosure in that any suitable arrangements chronologies configurations and timing mechanisms may be provided without departing from the teachings provided herein.

It is also imperative to note that all of the Specifications protocols and relationships outlined herein e.g. specific commands timing intervals supporting ancillary components etc. have only been offered for purposes of example and teaching only. Each of these data may be varied considerably without departing from the spirit of the present disclosure or the scope of the appended claims. The specifications apply to many varying and non limiting examples and accordingly they should be construed as such. In the foregoing description example embodiments have been described. Various modifications and changes may be made to such embodiments without departing from the scope of the appended claims. The description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

Numerous other changes substitutions variations alterations and modifications may be ascertained to one skilled in the art and it is intended that the present disclosure encompass all such changes substitutions variations alterations and modifications as falling within the scope of the appended claims. In order to assist the United States Patent and Trademark Office USPTO and additionally any readers of any patent issued on this application in interpreting the claims appended hereto Applicant wishes to note that the Applicant a does not intend any of the appended claims to invoke paragraph six 6 of 35 U.S.C. section 112 as it exists on the date of the filing hereof unless the words means for or step for are specifically used in the particular claims and b does not intend by any statement in the Specification to limit this disclosure in any way that is not otherwise reflected in the appended claims.

In at least one embodiment described herein an apparatus is provided that can include means for communicating e.g. over any suitable interface link bus communication pathway processor software circuitry a hub a controller etc. a latency tolerance value for a device connected to a platform from a software latency register if a software latency tolerance register mode is active. The apparatus may also include means for communicating e.g. over any suitable interface link bus communication pathway processor software circuitry a hub a controller etc. the latency tolerance value from a hardware latency register if a host controller is active. The latency tolerance value can be sent to a power management controller. More specific examples can include means for communicating e.g. over any suitable interface link bus communication pathway processor software circuitry a hub a controller etc. a latency tolerance value from the software latency register if the software latency tolerance register mode is not active and the host controller is not active. The apparatus can also include means for mapping a resource space in the software latency register for the device using a BIOS platform driver. The mapping can be achieved using an advanced configuration and power interface device description for the device.

