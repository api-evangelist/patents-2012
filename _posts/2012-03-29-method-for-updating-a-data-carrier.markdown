---

title: Method for updating a data carrier
abstract: The invention provides a method for updating a data carrier inserted in a telecommunication end device with regard to a data-carrier application executable in the data carrier, comprising the steps of: making updating data available to a security application installed in the data carrier; updating the data carrier according to the updating data, the updating of the data carrier comprising the steps of: transferring at least a part of the updating data from the security application to a programming interface installed in the telecommunication end device and adapted for communication between the telecommunication end device and the data carrier; onward transferring the transferred updating data from the programming interface to a data-carrier management of the data carrier installed in the data carrier; updating the data carrier according to the onward transferred updating data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09173102&OS=09173102&RS=09173102
owner: GIESECKE & DEVRIENT GMBH
number: 09173102
owner_city: Munich
owner_country: DE
publication_date: 20120329
---
This invention relates to a method for updating a data carrier with regard to a data carrier application executable in the data carrier with the data carrier being inserted in a telecommunication end device to an accordingly adapted data carrier and to an accordingly adapted telecommunication end device.

Nowadays telecommunication end devices equipped with powerful processors and many kinds of applications so called smartphones have become very popular. The telecommunication connection or mobile radio connection required therefore and or the secure memory space required for the diverse uses that frequently also process confidential data is made available by secure data carriers which are insertable into the respective telecommunication end device e.g. by U SIM mobile radio cards smart cards Secure Digital SD memory cards or the like. Such secure data carriers normally also comprise a processor and applications executable thereon. Two different kinds of applications can be distinguished here namely the end device applications installed on the telecommunication end device also referred to as apps with some smartphones and the data carrier applications executable on the data carrier also referred to as applets with some data carriers.

While diverse uses are made available on the telecommunication end device with the end device applications e.g. apps the data carrier applications e.g. applets frequently relate to uses in connection with security aspects of the telecommunication end device e.g. the telecommunication connection or mobile radio connection the identity of a user monetary transactions or other data that are confidential or worthy of protection. The data carriers thus have special security functionalities in particular a secure memory.

End device applications executed on the telecommunication end device frequently require access to data carrier applications in the secure data carrier. To prevent abuse of the security relevant functionalities of the data carrier applications and of the confidential data stored there one can provide e.g. an access rights management which allows an end device application to access a data carrier application only if it has corresponding access rights. However such a mechanism relates only to the access rights of those end device applications that were already known and could be taken into consideration upon the manufacture of the data carrier e.g. upon its initialization or personalization. End device applications that are later installed on a telecommunication end device are therefore not known to the access rights management and accordingly have no access to installed data carrier applications. It is even more of a problem to access those data carrier applications that have yet to be installed on the data carrier. Updating access rights later or actually installing new data carrier applications later on an already delivered data carrier is undesirable if not impossible in this connection in particular for security reasons.

Because telecommunication end devices usually have only one data carrier slot it is also impossible to make changed access rights or new data carrier applications available on a second secure data carrier. One might consider making available a replacement data carrier accordingly updated by the provider but this is not especially advantageous because it would lose important user data that are impossible or difficult to procure again e.g. digital certificates licenses or rights.

In this connection EP 1 361 527 A1 proposes updating the data stock of a delivered mobile radio card by means of a contactless data communication via an air or OTA over the air interface. However other data carriers insertable into telecommunication end devices e.g. SD cards or the like frequently do not make available the technical infrastructure this requires. Furthermore users of a secure data carrier with confidential user data would be shaken in their trust in the data security because contactless data transfers frequently and with reason trigger fears about data security and data abuse.

To enable an external device e.g. a telecommunication device to have programming access to a data carrier it is customary to install in the device a programming interface of the data carrier in which there are declared e.g. the data carrier s requirements in terms of data formats and the like which must be taken into consideration when programming data into the data carrier. Such a programming interface can be implemented for example as an operating system enhancement or operating system extension of an operating system installed in the device for controlling the device. By means of the programming interface of the data carrier the device is able to program data into the data carrier without itself having to know details about data formats required for the data carrier. Such a programming interface is frequently referred to as an Application Programming Interface API .

In an unpublished in house prior art from the applicant which is described in a patent application submitted on the same day as the present patent application there is stated a method for updating a data carrier which is inserted into a telecommunication end device with regard to end device applications apps to be newly installed in the telecommunication end device. For updating the data carrier there are employed configuration data with which access rights of the new end device application app to data carrier applications applets installed in the data carrier are updated. Optionally upon the updating of the data carrier there is moreover loaded into the data carrier a new data carrier application applet whose functionalities are required by the new end device application. An updating of access rights by means of configuration data is frequently likewise required here. In this method the configuration data and optionally the data carrier application are first loaded into the telecommunication end device together with the end device application to be newly installed. The end device application is installed in the telecommunication end device. The configuration data are passed on to a security application installed in the data carrier. The security application is updated with the configuration data.

A data carrier application available upon the security application cannot be installed in the data carrier directly through the security application. For the security application is adapted for managing access rights between end device applications and data carrier applications and can receive configuration data and use the configuration data to update access rights implemented within the security application. However the security application is not adapted and not able to carry out an installation of data carrier applications outside the security application without further measures. An installation of data carrier applications can be carried out exclusively through a data carrier management of the data carrier. A direct communication between the security application and the data carrier management is not possible.

Allowing a direct loading of data carrier applications into the data carrier while circumventing the security application e.g. directly by means of the data carrier management is disadvantageous because this would involve the danger of software from an unknown source passing into the data carrier unchecked. Harmful software could thereby also pass into the data carrier.

The invention is based on the object of providing a secure and versatile method for updating a data carrier with regard to a data carrier application executable in the data carrier in particular a method making it possible to install updating data to be installed outside a security application of the data carrier such as for example data carrier applications in the data carrier in a secure manner.

This object is achieved by a method according to claim . Advantageous embodiments of the invention are stated in the dependent claims.

The method according to claim is adapted for updating a data carrier with regard to a data carrier application executable on the data carrier with the data carrier being inserted in a telecommunication end device.

Updating data to be loaded into the data carrier are always loaded into the data carrier in a secure manner with involvement of the security application and are thus subject to the control mechanisms of the security application. For at least a part of the updating data the possibility is made available to transmit the updating data from the security application to the programming interface and from there to the data carrier management. The programming interface is thus employed as a proxy server between the security application and the data carrier management and as such enables a communication between the two entities security application and data carrier management which are provided spatially within the data carrier but mutually separated in terms of communication technology. As a result updating data that are to be installed outside the security application can also be taken into consideration in a secure manner.

Hence there is provided according to claim a secure and versatile method for updating a data carrier with regard to a data carrier application executable in the data carrier.

In particular updating data that are to be installed outside the security application such as e.g. data carrier applications to be newly added to the data carrier can be brought into the data carrier and installed there securely via the programming interface utilized as a proxy server by the method according to the invention.

The updating data are preferably made available to the data carrier through the telecommunication end device in particular through the programming interface. The programming interface is installed in the telecommunication end device is associated with the data carrier and is adapted for communication between the telecommunication end device and the data carrier such as for example a smart card API Application Programming Interface .

Electively the updating data comprise the data carrier application in which case the transferring comprises a transferring of the data carrier application the onward transferring comprises an onward transferring of the data carrier application and the updating of the data carrier comprises an installing of the data carrier application in the data carrier carried out e.g. through the data carrier management.

The updating data electively comprise configuration data in which case the updating of the data carrier comprises a configuring of the data carrier in particular of the security application by means of the configuration data. The configuration data can be installed directly in the security application without the indirect route via the programming interface utilized as a proxy server because their installation is effected within the security application.

The configuration data can comprise in particular updating data for the security application. Electively the security application comprises a certificate list and at least one access rights list. The certificate list comprises data carrier application certificates of data carrier applications installed in the data carrier. The at least one access rights list states access rights of end device applications installed in the telecommunication end device to data carrier applications installed in the data carrier. Upon the configuring of the data carrier the certificate list and the at least one access rights list are updated according to the updating data more precisely according to the configuration data.

The configuration data electively comprise a data carrier application certificate which contains a public key of a provider of the data carrier application. The configuring of the data carrier in particular of the security application comprises in this case an entering through the security application of the data carrier application certificate in the certificate list. With the public key of the provider of the data carrier application it is possible to verify signatures created by the provider of the data carrier application with the matching secret key. It can thereby be verified that a data carrier application to be loaded into the data carrier is actually created or at least authorized by the provider of the data carrier application.

Electively a signature linked in particular with the updating data is verified through the programming interface or through the security application before the data carrier is updated according to the updating data.

The signature is electively created by means of a secret key of a provider of the data carrier application or has been thus created. The signature is then electively verified with the above mentioned public key which has been brought into the data carrier e.g. with the data carrier application certificate as mentioned above.

A data carrier according to the invention is insertable or inserted into a telecommunication end device and comprises data carrier applications installed in the data carrier. According to the invention the data carrier moreover comprises a security application installed in the data carrier which is adapted to receive and transfer updating data and update the data carrier with the updating data according to a method according to the invention. In particular the security application and a data carrier management of the data carrier are thus able to exchange data with a programming interface belonging to the data carrier and installed in the telecommunication end device said interface being utilized according to claim i.e. utilized as a proxy server.

The data carrier is for example a U SIM mobile radio card or a secure digital memory card or secure multimedia card e.g. SD or SD card i.e. in particular a data carrier insertable into the telecommunication end device and removable from the telecommunication end device. Alternatively the data carrier is a data carrier adapted for firm implementation into a telecommunication end device e.g. an Embedded Secure Element or Embedded Smart Card Chip for firm implementation into a telecommunication end device and is inserted and firmly implemented into a telecommunication end device e.g. by the end device manufacturer so that it is not or at least not without destruction removable from the end device by a user in particular a NFC chip for a NFC capable telecommunication end device. An operating system of the data carrier is electively a Java based and or Global Platform compliant operating system and or the data carrier applications and the security application are electively Java applets.

A telecommunication end device according to the invention has an interface e.g. a card slot so that a data carrier is insertable in the telecommunication end device. Alternatively a data carrier e.g. an Embedded Secure Element or Embedded Smart Card Chip for firm implementation into a telecommunication end device in particular also an NFC chip is firmly inserted i.e. implemented into the telecommunication end device. The telecommunication end device has end device applications installed therein. According to the invention the telecommunication end device moreover has installed therein a programming interface of the data carrier said interface being adapted to receive and onward transfer updating data according to a method according to the invention and optionally make them available according to claim . The programming interface is thus adapted to act as a proxy server vis vis the data carrier in particular to act as a proxy server between a security application of the data carrier and a data carrier management of the data carrier. Electively the telecommunication end device is a smartphone with an Android operating system and as applications so called Android apps that are run capable thereon. The invention is likewise suitable for other operating systems however.

Hereinafter the updating of the SD card according to the method steps S to S will be explained in connection with . The inventive processing and installation of a data carrier application newly added to the data carrier according to the step sequence S to S Sto S S with the API as a proxy according to step sequence will be explained in connection with

The data carrier is a Secure Element for operation in a telecommunication end device in the form of a modern smartphone on which the minicomputer operating system Android from the company Google is installed e.g. a U SIM card or a Secure MicroSD card employed as a U SIM card for such an end device. The invention is of course also expediently applicable to other computer formats with other operating systems and implementable thereon e.g. to personal digital assistants PDAs laptops notebooks tablet PCs and other portable minicomputers which frequently also provide telecommunication functionalities or mobile radio functionalities.

The end device applications that are run capable on the Android smartphone are so called apps App App App i.e. applications specifically adapted to the resources areas of use and uses of smartphones which apps can e.g. be downloaded from the Android Marketplace and installed on the smartphone . Besides the Android operating system with the Android apps running thereunder there also exist further smartphone operating systems with specialized smartphone applications on which the present invention can also be implemented. However Android is well suited for the following exemplary explanation of the invention on account of its open source concept.

Involved in the method is besides the smartphone a secure digital data carrier in the form of an SD card SDC which inserted into a specially provided slot of the smartphone represents a secure memory or a secure memory extension of the smartphone . The SD card preferably comprises a Java based operating system e.g. Java Card or the like so that the data carrier applications Apl Apl Apl Apl installed on the SD card are applets or Java applets. Other kinds of data carrier with a processor and further computing resources that are insertable in a smartphone are of course also suitable as secure data carriers according to the present invention for example U SIM mobile radio cards microSD cards secure multimedia cards and the like. Also these data carriers can be equipped with arbitrary smart card or memory card operating systems and applications that are run capable thereon.

A special applet installed on the SD card is the so called security applet SecApl which performs security and control functions in connection with the access of an app to an applet and with the updating of an applet .

The security applet manages a security structure comprising a certificate list CL in which different data carrier application certificates in the form of applet certificates AplCert to AplCert are deposited. Further the security applet also manages one or several access rights lists which are associated with the certificates of the certificate list via an applet identification AID to AID . The access rights lists in turn specifies app identifications HashAppCert to HashAppCert which respectively address a list of access rights AC AC AC access condition which state the access rights of the app designated by the app ID to that applet whose applet ID points to the relevant access rights list .

If an app must access an applet the security applet can check via the respective applet ID whether the relevant app possesses the necessary access rights . The access rights associated with the app via the access rights list are identified through the app ID which corresponds to a hash value of the app certificate which value is formed anew upon each check of the access rights .

In case an app requires an access to an applet whose access rights do not allow it or that is not yet installed as an applet on the SD card a corresponding updating of the applet can be effected i.e. a configuration of the applet through an updating of the access rights between the applet and other applets and or the installation of the applet by the updating data required therefore being brought into an end device application certificate in the form of an app certificate AppCert according to the method of and being passed on to the security applet on the SD card in a manner transparent to the Android operating system so that a configuration of the applet that corresponds to the updating data can be effected there.

Hereinafter the step sequence S S will be considered in connection with . The employment of the API as a proxy server according to the invention is not required here. For an app App newly loaded into the end device and requiring access to an applet Apl already present in the data carrier the updating of the access rights between the newly loaded app App and the applet Apl is performed as follows.

In a step S install Apl the applet Apl is or was installed on the SD card by the applet provider AplProv or at least at his instigation for example within the framework of a manufacturing process of the SD card e.g. upon its initialization or personalization. In so doing the access rights of different apps App App to said applet Apl which rights are known at this time are also deposited in the security applet of the SD card .

The steps S to S relate to the installation of the app App to be newly installed in the end device and to the updating of the access rights of the app App to the already installed applet Apl . For this purpose there is installed in the smartphone as an enhancement or extension of the Android operating system a programming interface API for standardized access to the SD card . The API cooperates with the security applet to implement a secure procedure for later updating the applet . In the case of already installed applets Apl Apl Apl the API can check in cooperation with the security applet the access rights of an app accessing an applet .

The starting point of the access right updating is the app certificate which besides the app itself is part of the installation package of the app to be newly installed and is issued by a trustworthy authority for the public key of the app provider AppProv of the app . Besides the app certificate there also exists in the installation package of the app the signature AppSig of the app with which the app provider guarantees the authenticity of the app with the help of his secret key .

In the step S write UpdtDat the applet provider integrates the updating data which have the form of access rights here i.e. are configuration data into the app certificate to provide the security applet in this way with the access rights made available by the applet provider and required by the app for accordingly configuring the data carrier with regard to the applet .

In the step S sign AppCert the provider of the applet to be updated issues with the help of his secret key a signature AplSig of the app certificate supplemented by the updating data which signature is connected with the app e.g. by the signature being brought into an installation package of the app .

The mechanism of the extension fields is utilized to bring the updating data into the app certificate such that they are transparent to the smartphone and its functions and software components possibly with the exception of the API which is a programming interface of the SD card . The app certificate thus represents a container data format which can transport data in the extension fields from outside the smartphone e.g. from the applet provider transparently through the smartphone into the SD card or its security applet . The updating data deposited in the extension fields of the app certificate are therefore left out of consideration by the smartphone .

The signature of the applet provider is a cipher of the app certificate encrypted with the secret key of the applet provider and can be present separately in the installation package of the app cf. . The signature can be brought into the signature field for example according to the X.509 standard. The app certificate can take up in the extension fields further information items of the applet provider that relate to the applet for example the applet certificate with the public key of the applet provider or not shown in cf. and text below the byte code of the total applet . Likewise the unique app ID can also be present as an extension in the app certificate besides the access rights AC .

The thus equipped app is then offered by the applet provider in the step S deploy App at a public app market for example at so called Google Market Place to potential users for installation on their smartphones. From there the app is downloaded in the step S install App and installed in the smartphone under the Android operating system .

Because the app offered at the Market Place or another public platform carries the signature of the applet provider which is formed over the total app certificate together with the access rights the signature represents an authorization of the access of the app to the applet through the applet provider .

In the step S the app is installed under the Android operating system by means of a special installation routine package installer by the installation routine first checking the signature of the app provider . For this purpose the signature is decrypted with the public key of the app provider and compared with the signed plain text of the app . The installation routine obtains the public key from the app certificate attached to the app which certificate guarantees the trustworthiness of the public key .

In the step S start App the installed app is started by a user of the smartphone and said app then attempts to access the applet Apl in a step S access Apl . However the app App at first does not yet have access rights for this purpose in the access rights list of the security applet . The required access rights are hitherto present only in the app certificate .

Subsequently in the step S verify AppCert the app certificate is verified by the API by the signature being decrypted with the public key of the applet provider and compared with the plain text of the app certificate . Departing therefrom the verification of the app certificate and the subsequent updating of the access rights list can also be effected directly after or even upon the installation of the app in step S. The verification of the step S can in a preferred embodiment variant also be performed by the security applet in the secure environment of the SD card . In this case the app certificate is passed through from the programming interface to the security applet .

Upon the verification of the signature the API or the security application obtains the public key of the applet provider from the certificate list in which the applet certificate was deposited upon the installation of the applet in the SD card carried out in step S. If the verification of the signature is successful the updating data stated in the extension field of the app certificate i.e. at least the access rights are extracted by the API and transmitted to the security applet in step S transmit UpdtDat to SecApl for configuring the applet . If the verification in step S is carried out through the security applet the latter informs the API upon successful verification that the updating data can be extracted from the app certificate . Alternatively the security applet can also extract the updating data from the app certificate . Upon or after the extracting of the updating data their integrity does not have to be checked further however because it was already checked through the verification of the signature of the applet provider in step S.

In the step S update CL the security applet finally configures the SD card with regard to the applet by the access rights list being updated with the updating data in the form of the access rights of the app to the applet . For this purpose the relevant access rights list is ascertained via the applet ID . Thereafter the app ID is created in the form of a SHA 1 hash value of the app certificate and compared with the app IDs already specified in the access rights list or is newly entered there with the corresponding access rights . Upon a later access of the app to the applet the security applet can check any time via the applet ID and the app ID whether the required access rights are present. Finally the security application grants access to the applet through the app in step S grant access .

Hereinafter the step sequence S to S Sto Sand S will be considered in connection with including the employment of the API as a proxy server according to the invention. The step is replaced by the step sequence in accordance with the installation of a new applet in the SD card via the API as a proxy server. According to the embodiment of the invention from there is made available to the security applet by means of the container data structure of the app certificate an applet hitherto not installed on the SD card . The updating of the SD card with regard to the applet comprises here the installation of the applet on the SD card and the setting up of the corresponding access rights . Upon the installation of the applet in the SD card the programming interface API implemented in the smartphone is employed as a proxy server between the security applet and a data carrier management of the SD card in order to be able to install in the SD card the applet extracted from the app certificate and received by the security applet . The further flow of this embodiment results from the sequence of the steps S to S Sto Sand S of through an interaction comparable to the first embodiment between the API on the smartphone and the security applet on the SD card .

The step S of early installation of the applet is omitted here because it is precisely the subject matter of the invention to install updating data here the applet later. Further in this embodiment the configuration step S is omitted instead the applet is configured and installed by means of the steps Sto S

In step S the applet provider integrates not only access rights of the app to the applet into the app certificate as described in connection with but also the applet itself or its byte code as well as the applet certificate with the public key of the applet provider . In step S the applet provider signs the app certificate with the total updating data with his secret key and forms the signature . The installation package of the app comprises besides the signatures and an app certificate according to comprising extension fields according to the X.509 standard with access rights the byte code of the applet to be installed and the applet certificate .

Thus after the step S there is located at the Market Place or on another public download platform an app which also comprises in the form of a data container an applet to be installed on the SD card authorized by the applet provider by means of the signature over the total app certificate .

To ensure the integrity of the updating data in the extension in particular of the byte code of the applet an end to end encryption is provided between the applet provider and the SD card or its security applet . Said encryption can be realized for example by a symmetric AES encryption with the common secret key being available only to the applet provider and the security applet .

The further flow of the steps S to S is then analogous to that described with reference to . The only important point here is that in the step S the app certificate and its extensions are checked by the signature being verified with the public key of the applet provider whose applet certificate is not yet present in the certificate list but rather in an extension field of the app certificate . The verification step S is preferably carried out by the security applet so that the verification can take place in the secure environment of the SD card .

After successful verification of the signature of the applet provider the API in step S extracts the updating data i.e. the access rights the applet and the applet certificate from the app certificate and passes them on to the security applet . As in the first embodiment the updating data can also be extracted directly by the security applet however.

In a manner comparable to the step S the access rights are then in step S update CL AC deposited in the corresponding access rights list identified by the hash value of the app certificate as app ID . In so doing the applet ID is then also deposited in the security applet and the applet certificate extracted from the extension of the app certificate with the public key of the applet provider is deposited in the certificate list . Thus starting out from the applet ID there is created a totally new access rights list in which the new access rights of the app to the applet are deposited addressed by the app ID in the form of a hash value of the app certificate .

In step S decode Apl from UpdtDat the extracted byte code of the applet which is still available to the security applet in the form as encrypted or encoded by the applet provider is decoded and or decrypted in the secure environment of the security applet . In step Sall further required operations for preparing the installation of the applet are also carried out.

The byte code of the applet is subsequently not installed directly by the security applet . According to the Global Platform standard relevant in the smartphone area at least in the future cf. www.globalplatform.org such a direct installation is not provided. Instead the installation of an applet is to be performed via the smartphone or its API . Thus the API acts in the remaining steps Sto Sas a mediator unit or proxy unit between the security applet and the card manager SDCMngr of the SD card which constitutes the central management unit of the SD card and is as such responsible for the installation of new applets .

To guarantee the data integrity of the byte code of the applet a further encryption of the applet can be carried out in step S because the applet is leaving the secure environment of the security applet again and being made available to the card manager via the potentially insecure API . Thus there is either provided a further end to end encryption between the security applet and the card manager or the byte code of the applet is not already decrypted in step Sin the security applet but only in the step Sin the card manager within the framework of the installation of the applet . In the latter case there is an end to end encryption between the applet provider and the card manager with the required keys being securely kept in the SD card or the security applet and or in the card manager .

In the steps Sand S in accordance with the Global Platform standard the applet is then transferred from the security applet to the API and passed on from the latter to the card manager to be ultimately installed. The API thus acts towards the card manager as a host unit which for its part receives the data to be made available namely the applet from the security applet of the SD card .

