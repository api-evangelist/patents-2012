---

title: Method and apparatus for a multiplexed active data window in a near real-time business intelligence system
abstract: Optimizing a set of graphical display elements on a client device. A first set of graphical display elements may be transmitted from a first server to a client device. A second set of graphical display elements may be generated on a second server. The second set of graphical display elements may be transmitted from the second server to the client device. A third set of graphical display elements may be created in a first window including the first set of graphical display elements and the second set of graphical display elements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09094258&OS=09094258&RS=09094258
owner: Oracle International Corporation
number: 09094258
owner_city: Redwood Shores
owner_country: US
publication_date: 20120809
---
This application is a continuation of U.S. patent application Ser. No. 10 452 665 filed May 30 2003 entitled METHOD AND APPARATUS FOR A MULTIPLEXED ACTIVE DATA WINDOW IN A NEAR REAL TIME BUSINESS INTELLIGENCE SYSTEM which claims the benefit under 35 USC 119 e of U.S. Provisional Application No. 60 410 989 filed Sep. 16 2002 entitled Business Intelligent System by inventors Powers and Gardner and under 35 USC 120 of a commonly assigned U.S. patent application Ser. No. 10 237 559 filed Sep. 6 2002 entitled ENTERPRISE LINK FOR A SOFTWARE DATABASE by inventors Powers and Gardner the disclosures of which are incorporated by reference.

The present invention relates in general to enterprise information systems. More particularly the present invention relates to methods and apparatus for optimizing the delivery of data to a device.

Timely intelligence is critical to proper business decision making. Collecting and quickly analyzing information however is often difficult. In a dynamic marketplace delayed delivery of intelligence can reduce both its reliability and relevancy. Substantial delays can even make the information often acquired at considerable cost completely worthless.

Intelligence is often extracted from OLTP applications and from specialized databases called operational data stores. OLTP online transaction processing applications are those enterprise systems that manage a company s basic transactions such as order entry and billing systems. Since they are commonly optimized for reading and writing and not for querying extracting information from an OLTP application can be sufficiently complex to require additional user training. Furthermore while operational data stores generally archive OLTP information in a format for querying they also generally do not maintain important historical information. For instance an operational data store may store a current checking account balance but not the individual daily balances over the previous month.

In addition the queries themselves often take substantial time to execute producing only static snapshots of the information. Observing the dynamic aspect of changing information is therefore difficult. A possible solution may be to sequentially execute and aggregate a series of queries. However this solution can be both inefficient and ineffective since manual manipulation still often delays the information delivery. That is these queries must be first manually aggregated and summarized before intelligence reports can be generated and delivered.

ETL extraction transformation and loading systems help by extracting transforming and aggregating the information. But latency inherently found in most distributed networks coupled with considerable manual intervention that ETL systems often require mean that critical information can still be received late.

Automatic notification is a possible solution. Many analytical products such as business intelligence BI and online analytical processing OLAP systems are capable of monitoring scheduling and broadcasting alerts via email or pager. These systems however cannot generally assure that the intended recipient promptly receives and reads the message. This presents a significant problem for time sensitive information where minutes or even seconds can make a difference.

To facilitate discussion shows a simplified functional diagram of distributed information architecture. The diagram can be divided into an enterprise data layer and a client layer . Enterprise data layer comprises elements that are primarily focused on accumulating processing and transforming operational data. Client layer comprises elements that are primarily focused on rendering the processed data for a user.

OLTP online transaction processing applications are commonly coupled to each other as well as to other enterprise applications through a dedicated messaging and queuing application MQ such as IBM s MQSeries. MQ provides an efficient communication channel for these applications by storing and forwarding data messages in a manner that is similar to email.

Commonly coupled to each OLTP application is operational data store such as an Oracle database. Through an API application programming interface transactional data can be transferred between the OLTP application and the database. Operational data store consolidates that data from multiple sources and provides a near real time integrated view of volatile current data. Since its purpose is to provide integrated data for operational purposes operational data store primarily has add change and delete functionality.

In order to conduct meaningful analysis this information is often further placed in a more stable environment optimized for random querying. ETL system extracts the information from the appropriate data store transforms and combines the data based on pre defined constraints and subsequently loads the data into data warehouse . A popular ETL technique developed by Sagent is the use of data flows.

Data flows are a series of rule enabled transformations that are connected in data pipelines. They handle the tasks of joining merging comparing and splitting data and permit the separation of data into different logic paths each of which can be further combined and split off to create more complex transformation sequences.

ETL data extractions often occur by either a bulk or a trickle method. In the bulk method periodic snap shots of data in operational data store are extracted and uploaded into data warehouse . This commonly occurs as a large batch file scheduled during a low system utilization period. In the trickle method changes in operational data store are continuously uploaded or trickled into data warehouse . These updates are therefore frequent smaller and more current than in the bulk method. As in the case of OLTP systems ETL can also use the MQ for data extraction.

Once the data is in data warehouse it is available for OLAP online analytical processing . OLAP enables trained users to perform ad hoc analysis of data in multiple dimensions such as with an OLAP cube. OLAP cubes provide multi dimensional views of data querying and analytical capabilities. Furthermore many OLAP products can schedule run publish and broadcast reports alerts and responses over the network email or personal digital assistant. Users often access OLAP by thin client . Thin clients are applications that generally are integrated into the underlying client device and generally require minimal modification. For instance a thin client can be browser with a Macromedia Flash module installed.

Although OLAP analysis can provide valuable insight about business operations critical information is often received late even with automated reporting. Automated OLAP reporting often only has access to the information within data warehouse which can be several processing stages behind OLTP . This delay can be substantial reducing the information s value. Furthermore these reports are often only static snapshots of information in data warehouse .

For example a NASDAQ broker places an order into an OLTP application called an electronic communications network or ECN. The ECN matches customer buy and sell orders directly through the computer. In this case an order to buy 100 shares of ABC at 18.75 was entered. This open order is stored in the ECN operational data store subsequently extracted by ETL and analyzed by OLAP . If the buy order amount is the then highest in the ECN OLAP forwards the information to thin client NASDAQ quote montage where it is immediately displayed on the familiar stock market ticker tape. And although this system delivers stock information to individual brokers with reasonably small latency it is also not easily modified. The NASDAQ application is custom designed for the specific purpose of enabling stock trading. As such it would be difficult to display additional data on the stock ticker such as non financial information without substantial additional programming.

In view of the foregoing there is desired a method and apparatus for optimizing the delivery of data to a device in which relevant information is received in a timely manner and in which that data is rendered in a dynamic format.

The invention relates in one embodiment to a method of optimizing a first set of graphical display elements on a client device. The method also includes coupling a first server to the client device by a first connection coupling a second server to the client device by a second connection and generating the first set of graphical display elements on a first server wherein the first set of graphical display elements further comprises a first graphical display element and a second graphical display element. The method further includes generating a second set of graphical display elements on a second server transmitting the first set of graphical display elements from the first server to the client device and transmitting the second set of graphical display elements from the second server to the client device wherein a third set of graphical display elements is created in a first window comprising the first set of graphical display elements and the second set of graphical display elements. The method also includes generating a set of data stream elements on the first server and further comprising a first data stream element and a second data stream element wherein the first data stream element is associated with the first graphical display element and the second data stream element is associated with the second graphical display element and creating a second window on the client device wherein the first set of graphical display elements is coupled to the second window and the second server is coupled to the second window and wherein the first graphical display element retrieves and renders the first data stream and the second graphical display element retrieves and renders the second data stream.

The invention relates in another embodiment to an apparatus for optimizing a first set of graphical display elements on a client device. The apparatus also includes a means of coupling a first server to the client device by a first connection a means of coupling a second server to the client device by a second connection and a means of generating the first set of graphical display elements on a first server wherein the first set of graphical display elements further comprises a first graphical display element and a second graphical display element. The apparatus further includes a means of generating a second set of graphical display elements on a second server a means of transmitting the first set of graphical display elements from the first server to the client device and a means of transmitting the second set of graphical display elements from the second server to the client device wherein a third set of graphical display elements is created in a first window comprising the first set of graphical display elements and the second set of graphical display elements. The apparatus further includes a means of generating a set of data stream elements on the first server and further comprising a first data stream element and a second data stream element wherein the first data stream element is associated with the first graphical display element and the second data stream element is associated with the second graphical display element a means of creating a second window on the client device wherein the first set of graphical display elements is coupled to the second window and the second server is also coupled to the second window wherein the first graphical display element retrieves and renders the first data stream and the second graphical display element retrieves and renders the second data stream.

These and other features of the present invention will be described in more detail below in the detailed description of the invention and in conjunction with the following figures.

The present invention will now be described in detail with reference to a few preferred embodiments thereof as illustrated in the accompanying drawings. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without some or all of these specific details. In other instances well known process steps and or structures have not been described in detail in order to not unnecessarily obscure the present invention. The features and advantages of the present invention may be better understood with reference to the drawings and discussions that follow.

In accordance with one embodiment of the present invention an active data architecture is advantageously employed to facilitate the presence aware delivery of timely data. That is determining the type of device available to the user and delivering the information in a format within the device s capabilities. In accordance with another embodiment of the present invention information can be continuously extracted from data sources without the need for manual queries or additional user training. In accordance with another embodiment of the present invention information may be dynamically delivered in order to render streaming real time or near real time data and or analytical results whether graphically textually audibly or otherwise.

Referring now to a simplified functional diagram of an active data platform is illustrated. Active data platform comprises a suite of applications that allow a user to actively monitor continuously changing information throughout enterprise data layer according to a pre defined set of rules. A rule may be a pre defined procedure comprising the events to be monitored and the subsequent action or transformation that may be required. These rules enable active data platform to extract combine and transform data from various systems as well as the MQ messages transferred among the applications in a substantially contemporaneous manner. This processed information can then be transmitted in substantially near real time to devices in client layer . For example processed information can arrive at a client layer device within 2 10 seconds of an event or transaction or even sooner. Depending on the type of client device this processed information can be received as a continuous data stream a static report or an alert. The processed information can also be stored in a data warehouse and compared with future information.

As in OLTP generates transactional information. Operational data store consolidates that data from multiple sources and provides a near real time integrated continuously updated view of data. ETL system extracts the information from the appropriate data store transforms and combines the data based on pre defined constraints and subsequently loads the data into data warehouse that is optimized for querying or random data retrieval. The ETL extraction can occur in either a bulk or a trickle method. Once the data is in data warehouse it is available for OLAP or online analytical processing applications. OLAP enables trained users to perform ad hoc analysis of data in multiple dimensions such as with an OLAP cube.

Through the use of browser technology such as DHTML thin client and a rich client provide the user with enhanced visualization functionality such as the capability to graphically render streaming data. Thin client in one embodiment is called active viewer and comprises a browser. Rich client in another embodiment is called active viewer pro and comprises a browser with additionally installed software. DHTML is a combination of HTML style sheets and scripts and allows web pages to be animated. In addition rich client further allows for enhanced functionality such as pen based user input secure instant messaging robust printing capability and the use of skins. Skins are configuration files that allow modification of the browser appearance. Messaging client such as a SMS cell phone or an instant messaging program such as Yahoo Messenger or Windows Messenger provides alert capability. These alerts as well as static reports can also be received through thin client such as a browser. Other represents those enterprise applications that have been programmatically coupled to active data platform as a client.

In one embodiment client applications in client layer can reside on a Tablet PC. The Tablet PC represents the evolution of the business notebook personal computer. It marks a new direction for notebook PCs adding pen based technologies to existing notebook functionality and enabling Windows XP compatible applications to take advantage of various input modes such as pen and voice based data. The Table PC will be among the most versatile PCs ever made with high powered and efficient processors lightweight designs and for man built in wireless capability. All Tablet PCs will have keyboards some permanently attached and others detachable. But the Tablet PC is more than just a great notebook. The real value of the Table PC is that it makes it possible for information workers to bring he power of their business PC into more places than ever before and they can do it with the same software they use on their office PC or notebook today.

For example betting transactions would be normally stored in a casino s game transaction system. Wanting to be extra attentive to high rollers a casino would configure the active data platform to observe for any customer whose betting exceeds a specified threshold upon which an alert would be sent to the closest pit boss. The pit boss would locate these customers and personally oversee that exceptional customer service was provided.

Active data cache is the core repository for the active data platform. Unlike traditional databases such as operational data store and data warehouse active data cache stores data in a de normalized format. Normalization is the practice of optimizing the database structure into multiple tables eliminating data redundancy and improving scalability and maintainability.

Since active data cache is primarily focused on automatic reporting and not on querying it generates substantially de normalized tables representing each report or data stream. By logically placing these de normalized tables near client layer in a non obvious fashion fewer processing stages are required and latency is substantially reduced.

Database tables are not commonly de normalized since data is duplicated. In general duplicated data tends to increase the likelihood of data corruption during updates. That is multiple separate entries no longer match each other. Furthermore de normalized tables tend to be more difficult to query than normalized tables since each individual data record may be substantially larger and hence take longer to search. This is even more so if the table is not properly indexed. However since ad hoc querying is not a substantial requirement and table joins are not necessary normalization enables database tables within active data cache to be optimized for the efficient creation of pre defined reports and alerts. In one embodiment a single de normalized table is the source for each report.

Active design process is powerful intuitive suite of applications that allow a user to create rules map onto message queues manage security define data objects and configure enterprise link processes and sources based on simple drag and drop operations for the data streams reports and alerts. In addition to active design process in active data layer there is a corresponding active design process client in client layer such as a web browser. In one embodiment active design process comprises an application entitled architect. Unlike traditional real time business intelligence applications active design process allows a user to dynamically add new data sources or create new transformations and reports without changing the system as a whole. That is unlike the NASDAQ stock trading example previously shown which is not easily modified active design process can easily tailor the active data platform to new applications and changing corporate infrastructures.

Active report engine converts the raw information in active data cache into charts tables and graphs for display on a device in the client layer . Active studio is a presentation editor that allows a user to easily create and format specific graphical and textual active views of data based on pre defined templates. Common views are tables pie graphs bar graphs line graphs scatter graphs columnar reports form reports geographic map views crosstabs and Excel integration. For instance a user can create an hourly report in which gambling customers are aggregated into different groups based on the value of their accumulated betting that day. The user selects a bar graph for the report and changes the fill color and font type to the user s preference. These views can be substantially active changing in near real time as the underlying data changes or the can be static like a printed report.

Event engine monitors the information in active data cache for pre determined changes or events. Once an event occurs such as a rising temperature in a chemical processing plant message center is notified subsequently forwarding the appropriate message to messaging client thin client or rich client .

In one embodiment message center tracks the presence of client devices as well as the status of users themselves in order to substantially assure message delivery. This is in contrast to traditional messaging systems that cannot determine if messages are in fact delivered to intended recipients. Presence determines if the device is available on the network. Status determines if the intended recipient is available to read and respond to the instant message. Common status categories include descriptive information such as out to lunch busy away from desk important meeting etc. For instance the device may be turned on and available but the intended recipient is in an important meeting and does not wish to be disturbed. The intended recipient sets the status to important meeting in order to notify message center as well as any other subscribed user that he will probably not respond to the alert until after the meeting. Message center would then choose an alternative available recipient based on an established notification rule.

For example a casino s active data platform attempts to notify the nearest pit boss of a particularly prolific gaming customer. However since the pit boss has a busy status the casino manager is alerted instead and subsequently walks over to greet the customer.

Enterprise security system represents a company s existing security infrastructure such as Steel Belted Radius by Funk Software. Since operational information may be sensitive active data cache can be integrated into enterprise security system . In this way users are authenticated before information is transmitted to client layer devices.

Event engine is further comprised of four logical components event generator manager rules manager accountability manager and actions manager . Event generator manager maintains the state information of monitored events for rules manager . Rules manager is the primary event handler for the active data platform. Accountability manager monitors the delivery status of all reports and alerts. And actions manager initiates actions based on input from the actions module of the rules manager .

Event generator manager maintains state information of monitored events for rules manager . Constraint module specifies the parameters that must be satisfied before evaluating an event and or a condition and or before applying the rule. Conditions module maintains information for the corresponding conditions module in rules manager . It further specifies attributes relevant to the specific event other than constraints which must be satisfied before the action associated with the rule may be taken. Events module maintains event information for the corresponding events module in rules manager .

Rules manager further includes three components in order to manage active data an events module a conditions module and an actions module . Events module monitors all generated events within the active data platform. Conditions module filters out non relevant events and forwards the information to actions module which in turn initiates new system events based on criteria within rule sets . For example all betting transactions are sent as events to event generator manager which in turn sends the information to the events module of rules manager . The conditions module is configured to subsequently filter out all but the blackjack events. The actions module based on rules then creates an internal system event to instruct the active reports engine as shown in to create a report for all blackjack transactions above a threshold as described in rules .

Accountability manager monitors the delivery status of all reports and alerts. It further includes an unaccounted notifies module and a report engine tie module . The unaccounted notifies module maintains the status of undelivered alerts and reports. That is unaccounted notifies module determines if a recipient cannot be reached subsequently forwards a delivery incomplete message to rules manager . Report engine tie monitors for successfully received reports and alerts and subsequently forwards a delivery complete message to rules manager . For example a receipt notification status message is received in accountability manager which is subsequently processed. If the receipt notification status message comprises an acknowledgment report engine tie module further processes the message and forwards the information to rules manager . However if an acknowledgment is not received unaccounted notifies module processes the message and forwards the information to rules manager which in turn allows active data cache to escalate alerts and reports to alternate recipients based on status and presence should the original recipient be unavailable.

Actions manager initiates events and actions based upon input from the actions module . It further includes a notification module a generate event module a run a plan module a web service MQ module and an others module . Notification module forwards any report and alert non delivery messages to unaccounted notifies module . Generate event module generates system events initiated by actions module in rules manager . Run a plan module executes script based on rules . Web service MQ module provides an interface to third party web services based on WSDL web service description language as well as message queue applications. Others module is an API that allows additional modules to be later added.

Rich client is comprised of a main application a rendered reports component and a re notify applet component. Main application provides the core environment for client interface to the active data cache . It comprises several functional components that can dynamically render incoming data streams from active data cache and locally create reports such as report builder . Rendered reports functions as a viewer to display reports from active data cache which already have been assembled. Re notify applet displays notification messages to the user.

In a non obvious fashion rich client substantially maintains an open TCP IP connection to active data cache through the execution of blocking HTTP request in a second open browser window. Internet browsers normally implement HTTP an asynchronous protocol that uses multiple short lived synchronous TCP IP connections to render the objects on a web page. For instance a connection is opened a picture is rendered and the connection is closed. However in the current invention a web server periodically sends keep alive messages to the second open browser window in order to prevent a TCP IP connection timeout. Through the use of this code a TCP IP connection is kept open allowing data to be sent in a substantially continuous way to rich client without having first to refresh the browser window. Thus the dynamic rendering process in the primary browser window is more readily controlled. For example the following JavaScript code may be executed by the second browser window 

viewsetID indicates the viewset to which the active data applies whereas strXML refers to an XML document describing new data. Line 1 indicates to the browser that the following section need not be rendered since it is a script section. The execution of line 2 causes the report in the main application active studio or active viewer browser to change. The execution of line 3 removes the script from the page. And line 4 indicates to the browser that the script section has ended.

Active data cache further comprises functional components that facilitate the generation of a report. These are a report execution component a view execution component a report builder component a rule builder component a modifier builder component data object builder component a structured data supplier component and a message center gateway .

Report execution creates caches and then forwards specific reports based on configuration to either rendered reports for report builder . View execution likewise creates and forwards views to report builder . Views are data objects that may be filtered. Report builder pre processes extracted information from multiple sources and transforms the aggregated data into a format optimized for use in multiple reports. Rule builder pre processes stored rules from multiple rule caches for use in the generation of multiple reports. Modifier builder pre processes intermediate information transformations such as additional metrics that the user wishes calculated and reported. Data object builder pre processes data objects into optimized formats for report execution component . Structured data supplier forwards external pre processed data to report builder .

API layer provides a uniform application interface for system generated events such as notification request administration request and presence request . Presence and notify component provides the main messaging infrastructure for the active data platform. It insures that the reports and alerts are properly routed to intended recipients. Local user information maintains a local cache of user profile information such as names passwords and delivery preferences.

Rich client interface is further coupled to rich client which provides the user with enhanced visualization functionality such as the capability to graphically render streaming data. Thin client interface is coupled to thin client which further comprises agent application . Since thin client is commonly a browser without presence functionality agent notifies presence and notify component that a given report or alert is being viewed. Agent is commonly an Active X component or a java applet. Email interface is further coupled to email server such as an SMTP server which forwards messages to email client . IM interface is further coupled to IM client manager which sends a notification request to IM client . Instant messaging IM is a means for sending small simple messages that are delivered immediately to online users. It differs from email primarily in that its primary focus is immediate end user delivery. Through an IM client application a user can discover and immediately begin a text conversation or chat session. Common public instant message systems include AOL Instant Messenger MSN Messenger Yahoo Messenger Microsoft Exchange 2000 IM and Lotus Sametime.

For example a casino s active data cache identifies particularly prolific gaming customer. The active data cache forwards a notification request to message center . The presence notify module then determines if the intended user s device is present and the user is available. If so message center forwards an alert through IM interface to IM server and finally to IM client .

Unlike like the prior art the active data platform is general purpose and is substantially customizable by entering new parameters in active design process and the active studio as shown is . Furthermore enterprise links also shown in allows active data platform to quickly adapt enterprise data sources to changing near real time BI needs.

Referring now to an exemplary active studio screen display is shown according to an embodiment of the invention. This display is used by a user in order to easily manage the generation and secure delivery of data streams reports and alerts without substantial additional computer programming.

The display is divided into three sections a tab pane a function pane and a display pane . Tab pane further allows the user to select one of various functional displays within active studio such as home my reports shared reports personalize and alerts . Home comprises a summarized view of the user s most recent activities. My reports comprises a summarized list of the user s created reports. Shared reports comprises a summarized list of third party reports to which the user has subscribed. Personalize comprises administrative components that can allow the user to modify report delivery and display parameters. And alerts comprises a summarized list of a user s active alerts.

Function pane displays several functional list boxes within home tab such as recent list box new list box list toolbox and actions list box . Recent list box displays the user s most recently accessed reports. The new list box displays the user s new reports. The alerts list box displays the user s currently active alerts. And the actions list box allows the user to create and edit reports. Display pane displays the corresponding result of the chose function of function pane . In this case a dynamic financial report comprising a cost bar graph and a percentage change line graph. For example if a user where to select intraday sales by region in the new list box the corresponding dynamic intraday sales report would be displayed in display pane . As sales are booked through out the day the sales chart would dynamically change as well.

Referring now to an exemplary report viewer screen is depicted according to an embodiment of the invention. There are three functions available from this view launch active studio email and print . Display pane allows the user to view the selected report in this case a Q1 sales report. Launch active studio allows the user to open the viewed report in the Iteration Active Studio. Email allows the user to mail the viewed report to an email recipient. Print allows the user to print out the viewed report on an attached printer.

Referring now to the exemplary active studio screen display of is shown with the components of my reports tab . Function pane further displays two sub tabs a task bar tab and a folders tab . Task bar tab allows the user to select various functions related to the current view in this case a report summary view. Folders tab allows the user to organize created or stored reports in an hierarchical format. Two components within the task bar tab are report creation and guide . Report creation allows the user to create new active data. Guide provides a source of online help to the user.

Referring now to the exemplary active studio screen display of is shown with additional components of the my reports tab such as the report creation toolbox the report properties toolbox and the guide window . The report creation toolbox further comprises functions to easily create specific graphical views of data based on pre defined templates. Common views are tables pie graphs bar graphs line graphs scatter graphs columnar reports form reports geographic map views crosstabs and Excel integration. These views can be further modified in the report properties toolbox . For instance a user can create an hourly report in which gambling customers are aggregated into different groups based on the value of their accumulated betting that day. The user selects a bar graph for the report and changes the fill dolor and font type to the user s preference.

Referring now to the exemplary active studio screen display of is shown with an additional example of the my bar graph function window which allows the user to further customize the selected report with specific data objects and files. In general three types of attributes can be customized views data and properties . Views allows a user to modify the types of graphical displays available in which to view the current data such as a bar graph line graph etc. Data allows a user to select the specific data fields to be used in views . Properties allows a user to modify other attributes such as language number formats etc. In this case the user has selected a bar graph template for the report and has added four fields.

In another aspect of the invention an Iteration instant messaging collaboration server is advantageously employed to enable rich secure graphical collaboration in an instant messaging environment. Instant messaging systems commonly monitor the presence of devices and availability state of users. Presence determines if the IM device is coupled to the given IM network or at least reachable from the client. Status determines if the intended recipient is available to read and respond to the instant message. Common status categories also include descriptive information such as out to lunch busy away from desk important meeting etc. For instance the IM device may be turned on and available but the user is in an important meeting and does not wish to be disturbed. The user would set the status to important meeting in order to notify other subscribed IM users that he will probably not respond to a text message until after the meeting.

These IM systems however commonly lack the capability for graphical peer to peer or multi party collaboration. That is while short text messages can be sent back and forth in an online chat meeting there is no comparable means for sharing a graph or report. This would normally have to be compressed and transmitted ahead of time to each recipient who would each then download de compress and locally store the file. In situations where the underlying data is continuously changing as temperatures would be in a chemical plant and impromptu collaboration is desired pre mailing a graph would be very impractical inefficient and of marginal use to the problem at hand.

Furthermore public IM systems are not particularly secure. They were originally designed for rapid information text conversations called chat. IM protocols emerged and were established primarily without supervision from any standard bodies such as the Internet Engineering Task Force. Subsequently security was never originally considered and common instant messaging traffic is essentially unencrypted. Just about anyone on the network can secretly monitor a chat conversation.

User manager manages user profile information. Users create profiles based on rules in which they describe events of which they want to be notified. Should such an event occur user manager notifies message center which in turn contacts the user. Furthermore user manager selects alternative recipients if the primary recipient is unavailable based on user preference and availability status. For instance user has configured user manger for notification of a specific event for example a temperature change beyond a certain range. Furthermore user also wants user to be notified should user be unavailable. Once the event occurs if user is unavailable message center attempts to notify user . Presence manager monitors for the availability of user devices on the network. For instance in the previous example user has a wireless PDA and a SMS phone. If the event occurs and the PDA is turned off an alert is sent to the SMS phone instead.

IIM Iteration instant messenger interface provides an interface to the IIM client an enhanced IM application that allows secure concurrent graphical collaboration and pen based user input. In general it is sometimes desirable to implement private instant messaging systems having enhanced capability including different protocols encryption capabilities graphical processing display capabilities I O capabilities and or the like compared to public messaging systems such as those available from Yahoo AOL and the like . DM client is an example of a client in such a private instant messaging system.

IIM client commonly connect through active collaboration server which marshals collaboration request from multiple IIM clients and combines connections whenever possible to improve overall system performance and scalability. Furthermore active collaboration server synchronizes the text and graphical portions of the IIM session to insure that all users view the same information at substantially the same time.

Active collaboration server further enforces security protocols as implemented by the IIM client in order to prevent unauthorized interception of the collaboration session. In one embodiment IIM client implements a Triple DES security protocol to protect the collaboration session and insure message integrity. Triple DES is an encryption algorithm whose security is based on a single secret key. Each key is generated selected at random from all possible keys for each particular collaboration session.

In another embodiment only one user in an IIM collaboration session needs authorization to access a given alert or report. By virtue of being authenticated to the session all other users will receive the alert or report with the security privileges of authorized user for as long as these users participate in the session.

In addition to IIM interface there is SMTP interface and other IM interface . SMTP or simple mail transfer protocol is the most common protocol for sending email message on the internet. Through SMTP interface message center can forward email notifications with the event information to email server . Unlike IIM client however notification is not automatic. The user must first log onto mail server with a SMTP client such as MS Outlook and download the messages. Likewise other IM interface represents traditional IM interfaces to currently available IM systems such as AOL Instant Messenger MSN Messenger Yahoo Messenger Microsoft Exchange 2000 IM and Lotus Sametime. In contrast to SMTP notification can be automatic although communication is generally insecure. Furthermore graphical collaboration is difficult.

For example user is a chemical engineer at a petroleum processing plant. He created a profile in user manager in which he wants to be notified of specific event such as a change in a process temperature beyond a certain range. The event occurs. Message center forwards the notification to active collaboration server through TIM interface . Seeing the temperature dynamically change on his device user realizes that he wants additional advice from user his manager. Through his IIM device he instructs message center to initiate a request for collaboration with user . Receiving a collaboration request from his subordinate user accepts the connection. User s display is immediately rendered on User s device upon which they collaborate on the matter at hand.

Referring to IIM client and active collaboration server as shown in are described in greater detail. The user interface of IIM client is comprises of four panes a graphical display pane a chat text display pane a pen entry pane and a chat text entry pane . Graphical display pane is the main rendering window for IIM client . It allows a user to make better sense of large amounts of dynamic data presenting changing information in an easily accessible graphical visual representation. Chat text display pane displays IM messages in a formatted way using a choice of colors and styles. Pen entry pane allows the IM device to recognize a user s handwriting. Chat text entry pane allows the user to enter text through a keyboard.

For example user is a network systems engineer monitoring traffic at a company s e commerce web site. When network congestion reaches a certain point active report engine generates a report and forwards it to user . Realizing that customers are starting to have difficulty placing online orders user initiates a connection with user the web site manager and user the customer service manager. Once both accept user s display is immediately rendered on the other devices upon which all can collaborate on the mater at hand.

In another embodiment an instant messaging manager is advantageously employed to rapidly alert intended recipients of data events. Referring to a simplified functional diagram is shown of a rules based monitoring engine with alert capability such as in a BI or OLAP application. Enterprise systems comprise the series of applications commonly used to run and manage a business such as OLTP data warehouse and OLAP. OLTP online transaction processing applications are those enterprise systems that manage a company s basic transactions such as order entry and billing systems. In order to conduct meaningful analysis this information is often further placed in a more stable environment optimized for random querying such as a data warehouse. OLAP enables trained users to perform sophisticated ad hoc analysis of data stored in a data warehouse.

Rules based monitoring engine monitors the applications in enterprise systems for pre defined events. A rule is s pre defined procedure comprising the event s to be monitored and the subsequent action or transformation that is required. For example the event can be a specific transaction a change in a file size the publishing of a report etc. Rules U I is typically graphical application that allows a user to create sophisticated and complex rules as well as store the rules in the rules db for use by rules based monitoring engine . In this case the subsequent action is an alert.

When a specific event occurs rules based monitoring engine forwards an alert to notification engine which properly formats the alert and transmits it via email system pager system or another system through proprietary API . Alerts sent to email system can further contain an embedded link to a report generated by active reports engine as shown if .

For example betting transactions would be normally stored in a casino s game transaction system. Wanting to be extra attentive to high rollers a casino would configure the rules based monitoring engine to observe for any customer whose betting exceeds a specified threshold upon which an alert would be sent to the closest pit boss with an embedded link to the customer record.

As in there is shown a simplified functional diagram of a rules based monitoring engine with alert capability such as in a BI or OLAP application. Rules based monitoring engine monitors the applications in enterprise systems for pre defined events. Rules U I is typically graphical application that allows a user to create sophisticated and complex rules as well as store the rules in the rules db for use by rules based monitoring engine . In this case the subsequent action is an alert.

Instant messaging manager properly formats the alert as an instant message and transmits to the intended recipient through on of the various instant message systems . Unlike notification engine however instant messaging manager also monitors the various instant message systems for changes in state for any subscribed users. State is comprises of presence and status. Presence determines if the IM device is coupled to the given IM network or at least reachable from the client. The given instant message system normally determines the presence of individual IM clients and broadcast the information to interested parties such as the instant messaging manager . Status determines if the intended recipient is able to read and respond to the instant message. Normally whether a recipient is available or not is a true or false question. However it is common for recipients to customize the unavailable status with further descriptive information such as out to lunch busy away from desk important meeting etc.

For instance the IM device can be turned on and available but the user is in an important meeting and does not wish to be disturbed. The user can set the status to important meeting notifying any other subscribed users that he will probably not be able to respond to the instant message until after the meeting. The rules based monitoring engine realizing that the user will not immediately read the instant message will choose an alternative present and available user based on a pre determined notification rule. Rules based monitoring engine can forward an alert to instant messaging manager for immediate delivery to the intended recipient.

Referring now to simplified pseudo code is illustrated as would be used by IM client manager as shown in to notify running processes of user status changes. In procedure ProcessMessagesFromServer with a message argument IM client manager receives a message from an instant message system. It then determines whether it is a user status in procedure case UserStatuses. If so then procedure is called Process User status messages with an userStatusObjects collection argument. It then updates the user data structure at procedure HashOfUserObjects.update and subsequently notifies any active processes running on the active server platform of this status change.

In another embodiment an event engine is advantageously employed to substantially assure the examination of a report by a user. Many analytical products such as business intelligence BI and online analytical processing OLAP systems are capable of monitoring scheduling and broadcasting alerts via email or pager. These systems however cannot generally assure that the intended recipient promptly receives and reads the message. This presents a significant problem for time sensitive information where minutes or even seconds can make a difference.

In the current invention the event engine monitors the state of transmitted alerts in an escalation table. Upon receipt of an alert the user reviews the received report. This is commonly done by manually browsing for the report or by clicking an embedded URL contained within the alert. If the user does not review the report within a specified time the escalation table can further escalate the alert to another user based upon predefined rules. For instance the alert is transmitted to the user s manager.

Referring to a simplified functional diagram displaying the active data platform is shown with elements of the notification and escalation process. Advantages include substantially improving alert accountability in business intelligence applications. That is enabling the right person to receive critical information at the right time and if not escalating the information to the appropriate person.

Enterprise data comprises those enterprise systems that manage a company s basic transactions such as order entry and billing systems. Active data cache monitors transaction data packets generated by enterprise data . Active data cache further comprises user data manager which describes user event interest and monitoring rule manager that analyzes data packet for specific events.

Should an event of interest occur monitoring rule manager forwards a rule fired message to the rules list manager of event engine . Rules list manager further comprises the subsequent actions required for the fired rule such as the transmission of a notification message to a user the execution of a subsequent rule or the generation of an accountability escalation event. In this case notification message is forwarded to message center . Rules list manager also places an entry into escalation table describing notification message the intended recipient and the time the message was sent. If a report viewed message is not received within a pre determined amount of time a timeout occurs and escalation table notifies escalation manager which in turn executes pre configured escalation rules such as notification of a different person or entity or the calling of a web service.

Upon receiving notification message user address manager attempts to find a device address at which the user is currently available. Message center further embeds a link in notification message through which the user can review the corresponding report from active reports engine .

The user subsequently receives notification message on his device in this case through a browser. If not already viewing the report the user can either locate the report by manually entering information such as a URL or can also simply click on an embedded link to the report.

Upon receiving a request report supplier of report engine generates the report from information in the active reports table and forwards it to user device . A report viewed message is also generated and forwarded to escalation table which in turn deactivates the previous notification message entry.

For example a large multi site manufacturing organization such as Ford Motor Company would configure the active data platform to monitor manufacturing processing information such as increasing part reject rates or outright machine failures. Should a machine failure actually occur an alert is forwarded to the appropriate manufacturing process engineer. The alert would contain an embedded link to the specific machine s status report as generated by active reports engine . If the process engineer did not review the report within a few minutes or any time period specified a new alert would be immediately forwarded to the local plant manager for immediate action.

Referring to a simplified diagram of a common instant messaging client displaying notification message is shown in . In this case an alert message with a link to the budgetbuster report is shown. Upon clicking link a report would open in a new browser window. Furthermore a report viewed message would be generated and forwarded to escalation table as shown in .

In accordance with one aspect of the present invention rule evaluation is advantageously distributed in order to improve efficiency. To further elaborate a rule often comprises multiple interdependent components i.e. event constraint condition and action that must be evaluated and acted upon.

The first component of a rule is the event which specifies the event of interest. An example of an event is when the sales volume exceeds 5 000 units. If the sales volume exceeds 5 000 units the event component is satisfied.

The second component of a rule is the constraint which specifies the parameters that must be satisfied before evaluating an event and or a condition and or before applying the rule. A constraint is usually provided for efficiency reason and commonly comprises dates times and or frequencies. For instance if the specific event described in the event clause e.g. sales volume in the previous example does not need to be monitored over the weekend or between certain times or more often than a given frequency then the constraint clause would instruct the event engine to that effect. Typically a constraint is evaluated to be either true or false. In one embodiment if the constraint is evaluated to be false by the event engine the satellite evaluation engine is informed accordingly and does not even need to spend its resources evaluating the event. Advantageously efficiency is improved.

The third component of a rule is the condition which further specifies other attributes relevant to the specific event which attributes must be satisfied before the action associated with the rule may be taken. In the previous example the condition may be to take action only if the sales volume that fires the event is achieved without any special promotion in place. Generally speaking all conditions may be thought of as events but not all events are conditions.

The fourth component of a rule is the action which determines the course of action taken should the event constraint and or condition components are satisfied. For instance the sending of a notification to a specific person may be an action that needs to be taken if as in the previous example during a weekday constraint satisfied the sales volume exceeds 5 000 units event satisfied and the sales volume is achieved without any special promotion in place condition satisfied .

It should be noted that a rule typically includes an action but a rule does not require all three other components i.e. event condition and constraint. A rule may have one two or three of these components as desired by the rule designer. Furthermore each of the event condition constraint and action components may be a complex Boolean operation comprising multiple sub components. A preferred embodiment however is a single event component per rule.

For example an event may be satisfied if sales volume is greater than 5 000 and the total revenue is greater than 10 000 a Boolean operation of two sub events .

In order to reduce design complexity a common solution has been to evaluate and execute these rules in a centralized event engine. It is found however that the information that needs to be monitored and evaluated can be found anywhere on the enterprise network. It is often the case that the information that must be monitored and evaluated e.g. the event or condition may be distributed in one or more machines such as servers remote from the computer executing the centralized event engine. In some cases only 5 of the information may be relevant to a particular rule. Yet when the rule evaluation is centralized all the data that needs to be monitored and evaluated must be transmitted across machine and or process boundaries for the centralized event engine to perform its rule evaluation task. In a networked environment the remaining 95 of the information that is needlessly sent represents an inefficient use of scarce network resources and bandwidth as well as a detriment to performance.

In accordance with one embodiment of the invention rule evaluation is distributed in one or more satellite evaluation engines local to or closer to the origin of the monitored information. The evaluation is distributed in satellite evaluation engines that are in communication with an event engine. Distributed rule evaluation allows the evaluation of a rule to take place with reduced bandwidth usage and delay. Since active data and the timely report notification responsive to active data are important aspects of the active data platform minimizing delay is an important consideration and the distributed evaluation mechanism substantially furthers that goal.

To facilitate the implementation of distributed rule evaluation it is highly preferable that a universal rule syntax be developed that allows the event engine to analyze any given rule and decides which portion of the rule should be distributed and which portion of the rule should be processed by the centralized event engine.

In accordance with one embodiment of the invention a rule syntax is developed in which the four components of a rule event constraint condition action are specified as clauses in a specific order to facilitate parsing.

Clause 1 describes the event to be executed by the satellite evaluation engine in this case the viewset application. The event is a change to QTD Sales information. Clause 2 comprises the constraint clause. It describes that the event will only be monitored from Monday to Friday. Clause 3 comprises the condition further qualifying the situation that occasions the firing of the action. In this case if the time was between 9 00 a.m. and 5 00 p.m. i.e. 1700 hrs and if the date corresponds to the end of the quarter. Clause 4 describes the action. In this case the action is to send an email to user named Joe if the event constraint and condition are satisfied. Of course these four components may be ordered in a different order if another syntax construct so dictates.

In accordance with one embodiment of the present invention a rule is parsed to one or more core events which are then distributed to one or more appropriate satellite evaluation engines to facilitate evaluation of the distributed event s . In the previous example the rule may be parsed and the event pertaining to the sales volume may be distributed to for example the satellite evaluation engine associated with the active data cache. The satellite evaluation engine then evaluates the monitored data sales volume in this example and communicates the result which may be simply true false or may include pertinent sales volume data back to the event engine. Meanwhile the event engine is offloaded from the task of handling that rule until the event is satisfied.

To further improve efficiency the centralized event engine may not even parse all components of a rule until the event is satisfied. Thus if an event is never satisfied no resource has been wasted parsing the entire rule and preparing the centralized event engine and or the satellite evaluation engine s to handle the other components which may never need to be handled if the event is never satisfied . Further the satellite evaluation engine may only send information back to the event engine if the event evaluates to be true. Thus if the sales volume is below 5 000 in the previous example no message is sent from the satellite evaluation engine to advantageously avoid wasting bandwidth. Of course as mentioned earlier the evaluation of an event may be held off by the satellite evaluation engine to further avoid wasting resource unless the constraint is evaluated to be true by the centralized event monitor.

If the event is evaluated to be true at the satellite evaluation engine and assuming any applicable constraint is also evaluated to be true the satellite evaluation engine informs the centralized event engine which may then evaluate the condition using either the same or another satellite evaluation engine or using the centralized resource. If the same or a different satellite evaluation engine is also used to evaluate a condition the event monitor may send out the parsed condition and ask for the result of the evaluation of the condition. As the exemplary syntax above indicates each of the event constraint condition and action may be but not required in all cases implemented as a function. Distributing rule evaluation thus may comprise using the appropriate satellite evaluation engine to make the required function call.

Referring to in accordance with one embodiment of the present invention a simplified functional diagram illustrating the more relevant components of an exemplary active data platform in which distributed rule evaluation is implemented. Event engine employs a satellite evaluation engine manager to distribute and manage the evaluation of certain components of a rule in one or more event satellite evaluation engines. The distributed evaluation results are then received by monitor manager for use by event engine .

Satellite evaluation engines are some exemplary satellite evaluation engines employed by the active data platform of . Viewset satellite evaluation engine observes changes to database data objects such as the modification of a database filter or certain change in the data in the active data cache. Presence satellite evaluation engine observes changes to the availability of devices and the status of users. Time satellite evaluation engine observes time changes. Date satellite evaluation engine observes dates changes. System satellite evaluation engine observes changes to the underlying operating systems or applications for instance a change in the virtual memory or a cache miss. File satellite evaluation engine observes changes to a given file as stored in a file system. External satellite evaluation engine observes externally generated events through an API. These external events can be used for integration with other applications.

Other satellite evaluation engine represents additional events that can be programmatically monitored by event engine .

In accordance with another embodiment of the present invention there is provided a universal function call syntax to facilitate the task of distributing certain aspects of rule evaluation to one or more satellite evaluation engines. As discussed above the rule syntax allows an event a constraint a condition or an action to be specified as a function. Thus the function call syntax may have the following construct 

By creating a universal function call syntax the invention substantially simplifies the task of specifying that a particular satellite evaluation engine should handle a particular event or condition. Furthermore the function syntax improves scalability in that when a new satellite evaluation engine is added to the system only the satellite evaluation engine name needs to be changed and the remainder of the syntax may be reused. Also if a new event or condition is specified vis vis an existing satellite evaluation engine only the function name needs to be changed.

In one embodiment a rule template library may be provided to allow users to leverage on work done by others. A rule template is simply a rule with certain argument s not completely specified. For example a rule template may specify that if the sales volume exceeds 5 000 on a weekday and no special promotion is involved then notify person X. In this case person X represents the argument that remains to be filled out to turn the rule template into a rule instance. In this example the filling out of the person may be automatically accomplished by filling in the missing argument with the identity of the user accessing the rule template. In other cases the missing arguments may be filled out by the user wishing to employ the rule template.

Of course the user can always edit existing rules i.e. complete rule instances to fit his needs. For example the user can access an existing report and edit the rules therein to modify the arguments related to the event condition constraint and or action so that the newly created report would contain the information needed. The universal rule syntax renders it simple to implement rule templates and makes it easy for users to convert a rule template to a rule instance or to modify an existing rule to fit his needs.

In another aspect of the current invention an active data architecture is advantageously employed to maintain application execution over an intermittent network connection. In one embodiment the intermittent network connection is a wireless network such as 802.11b. In another embodiment the intermittent network connection is a wired network such as Ethernet. In another embodiment the data transmitted on the intermittent network connection is XML. In another embodiment the data transmitted on the intermittent network connection is DHTML.

Modern data networks such as the Internet allow packets to arrive at their destination by multiple paths. However since different portions of the network may be congested to different degrees transmitted packets can sporadically arrive. Should the arrival delay between successive packets become sufficiently long an intermittent connection results. Furthermore in wireless networks an intermittent network connection may also be caused by ambient radio interference or by dead pockets caused by multi path. Multi path is interference caused when signals bounce around between obstructions creating multiple reflections of the same signal. Small changes in the spatial relationship between the transmitter and the receiver i.e. by walking around can substantially alter the extent of multi path interference and the subsequent degree of network connection intermittence.

For many applications such as static web pages an intermittent network connection is tolerable. Though potentially bothersome to a user the utility of the web page is generally not diminished by the waiting a few minutes. For others such as streaming applications an intermittent network connection is problematic. These applications may require a continuous supply of packets in order to properly function since they are generally designed to receive buffer render and discard packets over a period of time. And although buffering a surplus of packets may improve perceived latency upon depletion the streaming application can freeze and even drop the connection altogether. Since this often requires the connection to be actively reestablished should a user be subsequently preoccupied reestablishment of the connection could be substantially delayed. Furthermore in situations where the streaming information may be both urgent and dynamic such as with active data an opportunity for the user to react may be entirely lost.

A more optimum solution may be to provide functionality that allows the streaming application to temporarily pause and passively re establish the connection for the user. In one embodiment the streaming application comprises a communications browser window coupled to a rendering browser window wherein the communications browser window maintains the connection and the rendering browser window renders the received data stream. In yet another embodiment this coupling is established through Microsoft JScript. In yet another embodiment this coupling is established through Javascript. In yet another embodiment the data stream is comprised of a set of event notifications. In yet another embodiment the last rendered display is statically maintained during the reconnection period. In yet another embodiment the user is notified that the connecting was lost.

Active studio is further comprised of communications browser window coupled to a rendering browser window wherein the communications browser window maintains the connection and the rendering browser window renders the received data stream. In one embodiment of the present invention a first rendering browser window establishes the connection by rendering an initial web page. The rendering browser window in turn instantiates a second communications browser window to receive and then forward updates to the rendering browser window. However unlike in a common web page the communications browser window maintains an open connection never fully receiving the web page from the web server e.g. since periodic active data updates are being received . Should the connection be interrupted generating a JScript offload event the communications browser may automatically attempt to reestablish the connection and reload the web page again.

The functional components shown in are presented horizontally for the purposes of illustration i.e. active studio active reports server report cache and active data cache . Once the connection has been initialized active studio requests a segment of data or a chunk from active reports server at step GetChangeList Viewset ID chunk index 0 . Since in this example it is the initial chunk the chunk index number is 0. Active reports server in turn forwards the request at step to report cache . Report cache then determines if it contains the requested segment of data at step Check if cache . Since it is the first request the segment is not available. Report cache in turn forwards the request at step to active data cache . Active data cache generates the chunk and forwards it back to report cache at step Active Data XML Chunk . Report cache forwards the chunk to active reports server at step as well as maintaining a local cached copy at step Persist . Active Reports server in turn forwards the chunk to active studio at step .

The process would again be repeated for the next chunk of data. That is active studio requests the next segment of data or a chunk from active reports server at step GetChangeList Viewset ID chunk index 1 . Active reports server in turn forwards the request at step to report cache . Report cache then determines if it contains the requested chunk of data at step Check if cache . Chunk is not available in the cache since it is the first time that the chunk has been requested. Report cache in turn forwards the request at step to active data cache . Active data cache generates the chunk and forwards it back to report cache at step Active Data XML Chunk . Report cache forwards the chunk to active reports server at step as well as maintaining a local cached copy at step Persist . Active Reports server in turn forwards the chunk to active studio at step . The process would again be repeated for the next chunk of data.

At this point however the connection is interrupted and subsequently reestablished at step . The last chunk that was received is once again requested at step GetChangeList Viewset ID chunk index 0 . Active reports server in turn forwards the request at step to report cache . Report cache then determines if it contains the requested segment of data at step Check if cache . In this instance since the chunk bad previously been requested a copy has been cached. Report cache in turn resends the chunk to active reports server at step . Active Reports server in turn forwards the chunk to active studio at step passively completing the request.

In another aspect of the current invention a browser can natively print a report in a substantially WSYIWIG format. The pervasiveness of browser technology has simplified the deployment enterprise software applications. Instead of mandating the installation of proprietary clients which often can be costly to implement and frustrating to use users can access the same enterprise applications through common Internet browsers such as Netscape Navigator or Microsoft Internet Explorer. And in the case of Explorer the browser is further integrated into the underlying operating system requiring no additional installation.

Web page functionality was further enhanced with the introduction of embedded scripting languages such as Microsoft JScript and Netscape Javascript. These scripting language instructions embedded in the HTML page can be subsequently interpreted and executed on the client browser producing results that the user sees i.e. drop down boxes enhanced menus popup windows etc. .

Traditionally web pages were designed to be viewed on many different platforms from text only terminals to Macintoshes to handheld computers. Since there was no way to know how the web page would be displayed i.e. availability of fonts ability to render images etc. the browser was designed to optimize the web page structure into a format that its host computer is equipped to display. In practice it was therefore entirely possible for the web page to render differently on the screen of its reader than it did on the screen of its author. Furthermore since the browser was primarily concerned with rendering the web page and not in printing it browser printed output was often problematic. For simple or small web pages this was not necessarily a problem since the entire rendered web page could be printed on a single printed page. However the columnar or tabular reports generated by enterprise applications often would often span multiple printed pages.

Unlike modern word processors such as Microsoft Word browsers do not generally print WYSIWYG What You See Is What You Get . That is web pages may be rendered without respect to the selected printer. Printing a web page generally causes the appropriate printer driver to map the rendered web page display to each printed page. However the appearance of the printed page is generally dependent on client configuration i.e. screen resolution margin settings paper size paper orientation type of printer etc. . Since the web page was not originally rendered with the printer limitations in mind as would be the case with a word processor portions of the web page may be unexpectedly chopped off.

Furthermore since printer drivers generally understand only the displayed screen pixels and not data objects such as text or figures portions of the rendered web page will either be lost if they exceed the page s printable width or printed on the following page if they exceed the page s printable length . The result is text or figures that are split across a printed page boundary. And unlike a word processor navigation bars and sidebars will be printed as well. Any page breaks and frame boundaries created by the web page designer will also cause the print driver to forward subsequent pixels to the following page.

A possible solution is to copy the rendered data into a WYSIWYG application like Microsoft Word and then print. Simply copying however is problematic since it can be both time consuming and error prone. In the process of pasting data from the browser into the application original formatting may be lost. And although text in paragraph form will simply wrap remaining readable tables and columns may transfer misaligned causing information from one column or cell to appear to be in another. Careful error checking may therefore be required to insure data integrity. For particularly large reports this may require several hours of work creating a printing disincentive and hence reducing the effectiveness of the enterprise application as a whole.

Another possible solution is for the web server to generate the web page in a proprietary WYSIWYG format such as in Microsoft Word or Adobe Acrobat. This too can be problematic since it requires the installation of a third party application which may further increase cost and complexity or may not be available for a given client device. The browser in essence again becomes a proprietary client. Furthermore the use of a proprietary format may also produce large documents substantially increasing download latency.

Yet a third solution may be for the web server to provide a link for a separate printer friendly web page. Such a page would leave out navigation bars and sidebar information. A single web page however can be very large again increasing download latency. Furthermore printer friendly usually refers to the web page s printable width and not its printable length. Since there is generally no way for the web server to discover the local client s configuration settings figures and text may still be split across two printed page boundaries.

A more optimum solution may be to provide functionality that allows the browser to natively print active reports in a substantially WSYIWIG format. The active data architecture comprises two general types of reports continuous columnar and tiled. Continuous columnar reports are comparable to common accounting spreadsheets in that they usually have column and report titles as well as aggregate cells i.e. subtotals sums etc. . These reports generally summarize or analyze some aspect of the underlying data and are generally intended to be printed out in total. Tiled reports by comparison are more comparable to Microsoft PowerPoint slides. They can simultaneously comprise both lists i.e. a sequential list of text and numbers without aggregates and graphical display objects i.e. charts graphs office web components etc. . Furthermore the tiled reports are optimized to allow the user to select and print just the relevant portion of the list.

Referring now to the of the active studio screen display of is shown in which continuous columnar report is shown in browser in display pane according to one embodiment of the invention. shows a simplified example of the generic schematic of continuous columnar report whereas shows a simplified example of the rendered continuous columnar report.

Since transferring large web pages can be slow the current invention transmits the continuous columnar report to the client browser in a series of smaller frames each optimized to reduce latency. These frames are then rendered in separate independent browser windows which are contiguously positioned without frame borders to give the impression of a single large web page. The first frame slightly larger than the display window would generally render relatively quickly creating the perception that the entire web page has arrived since the hourglass is no longer visible although subsequent frames may still be rendering. However once the user manually scrolls down from the first frame subsequent frames should have substantially rendered.

In this example two frames are displayed a first frame and a second frame . The first frame has thirty lines F L to F L while the second frame also has thirty lines although only two lines beginning at F L are displayed for purposes of illustration. The each line is further comprised of cells which may further include display elements i.e. active data elements aggregate elements report titles header text footer text etc. contiguously arranged. Since the first frame is larger than display pane both vertically and horizontally a user would subsequently need to use the scroll bars to see the hidden portions of the frame.

Active reports unlike normally rendered web pages can further be manipulated and customized by the users when in edit or print preview mode. For instance columns can be re sized both width and height re positioned swapping one column with another and re formatted font type font size line borders background color etc . Function pane further displays several functional list boxes within home tab such as actions list box which further comprises a print function which allows the user to print the rendered report and a print boundaries function .

In traditional browser printing printer output can be previewed by using the browser s print preview function. This function takes computer and printer configuration information i.e. such as page size orientation margins etc. calculates the total amount of screen pixels that can fit on a printed page and renders a static picture of that page in a new print preview window. As previous discussed portions of the web page beyond the print boundaries will be chopped off. Any portion of the web page exceeding the printed page width will be completely lost while any portion exceeding the printed height will be printed on the next page potentially splitting text and figures between two contiguous pages. Furthermore since the print preview window is essentially a static snapshot the user is generally unable to manipulate elements on the page to fit within the displayed print boundaries.

In a non obvious fashion print boundaries function superimposes a set of non printable guides identifying the printable areas of the columnar report as rendered in display pane . Vertical row positioning can be further optimized to insuring that a page break does not occur in the middle of a row. Furthermore unlike the traditional static print preview window the user can manipulate the rendered report to fit within the displayed guides allowing the active report to be printed in a substantially WYSIWYG manner. That is users can both re sized and re positioned columns as well as re formatted font types and sizes.

Referring now to the of the active studio screen display of is shown in which a titled report is being rendered according to one embodiment of the invention. In this example a single list is displayed in display pane . Like the previously described continuous columnar report as shown in user perceived performance is also optimized through the transmission of a series of smaller frames. The parent frame loading first comprises many key frame elements and is further responsible for loading subsequent pages. However unlike the continuous columnar report titled reports do not display print boundaries. Instead the user selects print preview which opens a modified print preview window with the previously received frames as shown in . shows a simplified example of the generic schematic of list report whereas shows a simplified example of the rendered list report. Lists displayed within the print preview window allow the user to select a portion to print in contrast to the columnar report in which the entire report is printed.

Referring to two frames are displayed a first frame and a second frame . The first frame has thirty lines F L to F L while the second frame also has thirty lines F L to F L . The each line is further comprised of cells contiguously arranged in columns such as active data elements report titles. The printable area is automatically determined based on client configuration as previously described. The user can scroll up or down to find the relevant portion to print. In a non obvious fashion unlike a traditional browser s print preview function lists within the titled report can be further manipulated and customized by the users in edit or print preview mode. For instance columns can be re sized both width and height re positioned swapping one column with another and re formatted font type font size line borders background color etc . Furthermore unlike the columnar report the titled report attempts to fit the entire report within the print boundaries. Once the user selects the appropriate information the titled report can be printed by selecting print button .

Depending on the set of rows selected there are four possible situations that must be addressed. The first test determines if the FVR and the LVR are both within the parent frame at step . If so the rows above the FVR and below the LVR in the parent frame are hidden at step . If not a second test determines if the FVR is in the parent frame and the LVR is in a child frame step . If so the rows above the FVR in the parent frame and the rows below the LVR in the child frame are hidden at step . If not a third test determines if the FVR and the LVR are in the same child frame at step . If so the rows above the FVR and below the LVR are hidden in the child frame at step . If not a final test determines if the FVR is in a first child frame and the LVR is in a second child frame at step . If so the rows above the FVR in the first child frame and the rows below the LVR in the second child frame are hidden at step . At this stage the remaining frames are hidden at step . Since the remaining visible rows fit within the printed page the vertical scroll bar also disappears. The titled report is forwarded to the printer at step . At this point all rows that were previously hidden are made visible returning the vertical scroll bar at step .

Referring now to the of the active studio screen display of is shown in which another titled report is being rendered according to one embodiment of the invention. In this example the titled report is a composite of multiple elements a set of lists as displayed in and a set of graphical display objects . As described previously users can manipulate and customize the lists by re sizing re positioning and re formatting columns. Graphical display objects can also be further customized by changing chart type fill color and font size and style. In general graphical display objects are automatically resized to fit on the printed page.

Referring now to the active studio screen display of is shown further showing the personalize tab . Here the user configures printer information such as orientation and paper size . This is in addition to the regular browser printer configuration information since browser scripting languages i.e. JScript Javascript etc. generally cannot access this information directly.

In another aspect of the current invention a user s rich client interface can automatically be optimized according to a set of characteristics. In one embodiment the set of characteristics includes screen resolution. In another embodiment the set of characteristics includes orientation. In yet another embodiment the set of characteristics includes a specific open window. In yet another embodiment the set of characteristics includes a specific task.

Client devices are becoming smaller faster mobile and more ubiquitous. Mobile handheld computers computing appliances and smart telephones allow computer support to be built into task situations. Such situations include new physical environments where computers have been impractical up to now and also new social environments where previously computers imposed a formidable barrier to social interaction.

Many of these devices include displays that are substantially similar to traditional computer monitors. It is not uncommon for these devices to have both a portrait mode and landscape mode depending on user preferences and application context. For instance in a smart phone with a relatively small display a contact list may be shown in a portrait mode to maximize the number of viewable entries while a web browser would be displayed in a landscape mode to maximize the display width.

Many devices also have sophisticated graphical operating systems that can simultaneously run multiple applications. These applications often allow users to customize their working environment often called a workspace in order to work more efficiently. A workspace configuration commonly comprises a set of customized application and display settings. Common application settings include printing preferences visual style mouse interaction and keyboard shortcuts. Whereas display settings include rearranging relocating and resizing movable elements such as toolbars and windows. These settings can often be saved and displayed again in subsequent sessions. In some applications such as Adobe Illustrator the settings are saved upon exiting the application. In others such as Netscape Navigator the settings must be saved by the user.

However applications generally do not automatically optimize the user s workspace based on a change between portrait mode and landscape mode. Some applications simply relocate windows that would otherwise be outside the display boundary. The result may be a workspace that appears overly cluttered with overlapping windows. Other applications both relocate and proportionately resize windows. Although reducing clutter the result also minimizes the effective work area. That is if the change is from portrait to landscape mode the display areas on the sides are not used. And if the change is from landscape to portrait mode display areas at the top and bottom are not used. Still others do nothing allowing windows to fall outside the display area. The result is that in many of these applications the user must manually rearrange resize and relocate workspace elements in order to effectively user the application in the changed mode.

In a non obvious fashion the current invention allows an application to select a workspace configuration from a set of default or user defined workspace configurations based on a set of characteristics. In one embodiment the set of characteristics includes resolution. In another embodiment the set of characteristics includes orientation. In yet another embodiment the set of characteristics includes a current user task. In yet another embodiment the set of characteristics includes time. In yet another embodiment the workspace configuration is stored on a device other than the client device i.e. the active data cache . In yet another embodiment the workspace configuration can be retrieved to an alternate client device.

Referring now to in accordance with one embodiment of the present invention a flow chart is displayed showing steps for changing a user s workspace configuration. Initially the user may determine an optimal workspace configuration at step . This may include the size and location of windows on the display desktop as well as the position of menus. It may also include user defined short cut keys and printing preferences e.g. such as the default printer . The workspace configuration is then saved at step . In one embodiment the workspace configuration is automatically saved upon exiting the application. In another embodiment the workspace configuration is manually saved by the user.

The characteristics are then checked at step . For example has the screen resolution changed from 800 600 to 1024 768 or has the orientation changed from portrait to landscape. At step if at least one characteristic has changed the application determines if a saved workspace configuration exists which comprises the changed characteristics at step . If at step no characteristics have changed the characteristics are then again checked at step .

If at step a saved configuration is found which comprises the changed characteristic it is used at step . The characteristics are then again checked at step . If at step a saved configuration is not found a default workspace configuration is used at step . This default configuration is not optimized for any specific user but rather includes generally accepted user preference. For instance if possible windows should not overlap. The characteristics are then again checked at step .

Referring now to screen displays are shown for a device that can be used in both a portrait and landscape mode according to one embodiment of the invention. Referring to the device is shown in portrait mode i.e. the display height is proportionately greater than the display width . The display comprises three regular windows and a menu bar . As the user changes the orientation as shown if the elements have repositioned themselves based on the user s workspace configuration. For example windows and overlapped in the portrait orientation of but do not in the landscape orientation of . Furthermore the menu bar has also repositioned itself from the bottom of the display in to the right side of the screen in .

Referring now to screen displays are shown for a device that can be used in both a portrait and landscape mode in which the screen resolution has changed according to one embodiment of the invention. Referring to the device is shown in portrait mode. The display comprises three regular windows and a menu bar . As the user changes the orientation as shown if the user also changes screen resolution. As in the elements have repositioned themselves based on the user s workspace configuration. But the elements also appear smaller because the screen resolution has changed e.g. from 800 600 in to 768 1024 in . Furthermore the menu bar has also repositioned itself from the bottom of the display in to the left side of the screen in .

In accordance with another aspect of the present invention there are provided innovative methods and arrangements for efficiently displaying cross tab data. As the term is employed herein cross tab data refers to aggregate data displayed in a cell of a table which aggregate data is a mathematical function of other data items associated with other cells in the same table 123 Equation 1 

Depending on the type of cross tab analysis desired the mathematical function f in Equation 1 above may represent any desired mathematical and or statistical function. Da represents the aggregate data displayed in an aggregate data cell in the table and D Dn represent data items displayed in other cells of the same table.

Generally speaking the cells that contain values D Dn are cells that are disposed in the same row or in the same column with the aggregate data cell. With reference to aggregate data cell containing the value 408 132.00 displays the value that is the sum of the three cells above cell in the same column i.e. the cells that contain values 185 621.00 66 624.00 and 155 887.00 . Aggregate data cell also displays the value that is the sum of the four cells to the left of cell in the same row i.e. the cells that contain values 109 679.00 109 097.00 105 436.00 and 83 920.00 .

With reference to both the column function reference number and the row function reference number are identical i.e. each is a sum function. In this case the value in aggregate data cell is the same irrespective of whether the column function or the row function is employed to calculate the value in aggregate data cell .

A situation arises when the column function differs from the row function. Suppose for example that the column function is a sum function while the row function is an average function. In this case the value in the aggregate data cell differs depending on whether the row function or the column function is employed to calculate the value in data cell . The difficulty lies in deciding which value to display in aggregate data cell .

One possible solution is to furnish an extra cell to facilitate the display of the aggregate data for both the column function and the row function i.e. showing both the sum of the three cells above aggregate data cell and the average of the four cells to the left of aggregate data cell . However this approach doubles the space requirement for displaying aggregate data thereby disadvantageously reducing the space available to display other data. Further the simultaneous display of two aggregate data cells one for each of the column function and the row function may confuse users who are already familiar with the paradigm of viewing a single aggregate data cell at each intersection of a row and a column.

In accordance with one aspect of the present invention there is provided a user selectable function selector for determining whether the aggregate data cell disposed at the intersection of a row and a column would display the result calculated in accordance with the row function or with the column function. shows one implementation wherein the user selectable function selector is implemented as a choice in a drop down list that the user can select. The drop down list is but one way to facilitate user selection and other conventional techniques for facilitating user selection may also be employed.

In the example of the user has selected to employ the row function to calculate the data to be displayed in the aggregate data cells of the table such as aggregate cell . In this case aggregate data cell shows the total count of the count values of the four cells to the left of aggregate data cell i.e. of the cells containing values 3 3 3 and 3 .

Note that it is not required that the value in the aggregate data cell must represent an aggregate of the values in the cells immediately adjacent to the aggregate data cell in the same row or the same column. For example aggregate data cell is an aggregate of other aggregate data cells and which are not adjacent in the same column. As mentioned the column function is employed since the user has selected in user selectable function selector that the column function be employed to calculate the aggregate data value. It should be kept in mind that although the sum function is employed as an exemplary aggregate function in the aggregate function may well be any desired mathematical statistical function e.g. average mean min max count and the like. Further the column function and the row function in the table e.g. the table of may be user selectable if desired.

As can be appreciated from the foregoing the provision of the user selectable function selector advantageously allows the user to select whether the row function or the column function will be employed to calculate the aggregate value displayed in an aggregate data cell at the intersection of a row and a column of a cross tab table. Furthermore the provision of the user selectable function selector does not require the use of additional aggregate data cells to display aggregate data and or require user to become familiarized with another way of displaying cross tab data. With the present invention only a single aggregate data cell with a single aggregate data value is provided at the intersection of a row and a column which aggregate data value changes according to the selection made by the user selectable function selector. Accordingly efficient space utilization and user friendliness are preserved while furnishing the user with a way to access both the row function aggregate data and the column function aggregate data.

In another aspect of the current invention a report cache is advantageously employed in order to optimize network performance and scalability. In one embodiment the report cache stores sets of data in memory. In another embodiment the report cache stores sets of data on a hard drive. In yet another embodiment the report cache stores sets of data as sets of memory mapped files.

Modern enterprise architectures often comprise distributed application elements connected across a data network and optimized for task and usage. A common reason is scalability since different portions of the enterprise architecture can be expanded without disruption to other elements. In the current invention active data cache is coupled to various enterprise data sources and subsequently offloads the caching of viewsets to a report cache. Active report server in turn requests and subsequently formats portions of the cached viewsets for proper rendering in active studio i.e. transformation from XML to HTML which may be located on the client device. A single client device can also comprise multiple simultaneously opened viewsets. Hence the active data cache may scale with the volume of enterprise data the report cache may scale with the number of opened viewsets and the active reports server may scale with the number of users.

The active data cache is generally optimized for sequential access. That is it receives transforms forwards and subsequently discards active data. In one embodiment this is done through the use of a forward moving cursor a variable that runs through a stored database table in one direction . While accessing data through a forward moving cursor can make the active data cache very fast is can also make other forms of access very inefficient or practically impossible i.e. random access .

In a non obvious fashion a report cache is advantageously employed in order to optimize network performance and scalability by offloading the caching of viewsets from the active data cache memory. A viewset static de normalized representations of information in active data cache often comprises an initial large recordset of data and a series of smaller changelists that represent subsequent changes to the recordset. Since browsers are often incapable of rendering a web page beyond a certain size e.g. usually several megabytes the client browser through active studio may request a much smaller subset of the recordset. However since there is no guarantee that subsequent user requests will be sequential the report cache is optimized for random access. For example a recordset of over 1 million rows is forwarded from the active data cache to the report cache along with a steady stream of changelists. Rows are in turn forwarded to active studio on the user s device. The user then scrolls down or moves to another page and wishes to receive rows followed by and then . Without the use of a report cache the active data cache would have to provide the rows. However since active data cache is optimized for a forward moving cursor and not random access non sequential row requests would be inefficient or impossible. Instead the active data cache would have to keep all produced viewsets in memory to allow random access to them potentially overwhelming the limited storage capability of the active data cache and its ability to process new active data.

The report cache is further optimized through the use of memory mapped files. In one embodiment memory mapped files allow the report cache to map and access smaller portions of the recordset into memory as needed without having to read the entire file into memory first. That is when the report cache needs to access a set of rows in a recordset a specific range of memory addresses are requested from the operating system similar to accessing a byte array in memory. The operating system in turn automatically brings the appropriate pages from the hard drive and maps them onto its memory space for efficient and rapid access by the report cache.

In another embodiment asynchronous I O is used for hard drive access. In common synchronous I O a process thread within an application must wait until a hard drive access is completed in order to be informed of the success or failure of the operation. The execution of the process is blocked while it waits to be notified by the operating system. In a non obvious fashion processes within the report cache can initiate transfers to the hard drive using asynchronous I O and still continue to execute. Instead of being blocked the operating system notifies report cache once the transfer is complete. Non blocking operations allow the report cache to continue to process other reads and writes to other memory mapped files further optimizing performance. Referring now to a simplified UML class diagram is shown of software classes that comprise the report cache application according to one embodiment of the invention.

In another embodiment the file management system combines read and writes in order to reduce disk access overhead which can be substantial e.g. a single hard drive access can be over a million times slower than access to memory . In another embodiment the physical files are of a fixed size. As active data is discarded and replaced the same physical files are used subsequently reducing external fragmentation on the hard drive. That is the data would be stored in a substantially contiguous sequence of bits on the hard drive instead of a set of non contiguous linked fragments. Fragmentation can slow data access over time as each fragment of a file must be accessed for the entire file to be read in.

In another embodiment a set of active data reports is advantageously multiplexed in a client server application providing simultaneous views of multiple sources of active data. In one example the source of the rendered active data reports is different from the source of the remaining displayed window elements. For instance a web page would be generated by a web server but would contain active data reports generated by another web server.

Each active data report further comprises one or more viewsets as shown in . Subsequent periodic active data updates to the viewsets are called changelists as shown in and are generated by active data cache . In one embodiment the changelists are forwarded directly to a server such as a web server. In another embodiment the changelists are directly forwarded to a client such as the browser. In yet another embodiment the changelists are pushed from the active data cache and cached at the report cache and then subsequently pushed to a web server via web services that in turn pushes it to the client.

Referring now to an exemplary web page comprising active data reports is shown according to one embodiment of the invention. In this example nine active data reports are shown although substantially more can be included. Each active data report can be further optimized by function tabs that are generated by the Internet application. For example an online brokerage company like Fidelity Investments may wish to create a web page on its web site comprising several active data reports simultaneously showing the fluctuating price of different stocks. The online brokerage company has further enhanced the web page by adding buttons to each report allowing each report to provide daily weekly monthly or yearly data.

In a common non multiplexed implementation of active studio as shown in a communications browser window also called an active data window is coupled to a rendering browser window wherein the communications browser window maintains the connection and the rendering browser window renders the active data report. The active data window maintains an open connection never fully receiving the web page e.g. since periodic active data updates are being received . Should the connection be interrupted generating a JScript onload event the active data window may automatically attempt to reestablish the connection and reload the web page again if the viewset has expired. Otherwise the changelists will continue from the point of interruption.

In the present multiplexed application each active data report is also displayed in an individual rendering browser window within the multiplexed active data window. Without further enhancement each would also generate and display its own active data window on the client. In addition to creating unnecessary screen clutter each active data window would attempt to create a separate connection to the active data source. However in many HTTP implementations such as in Microsoft Internet Explorer only two HTTP connections are allowed to a given source. The result would therefore be to limit the total number of rendered active data reports to just two.

In a non obvious fashion the multiplexed active data report has been further optimized to consolidate communication requests with other co located active data reports through a single instantiated active data window. The first active report to initiate rendering will generate an active data window and subsequently set a cookie on the client containing a generated active data session ID. This active data session ID is a substantially unique identifier identifying a specific set of active data reports on a specific machine used by a specific user and for a specific period of time. In one embodiment the active data session ID comprises a timestamp. Subsequently other active data windows will check for the existence of a valid cookie and if so will not create an additional active data window but rather refer to the existing one.

Referring now to a simplified flow chart describing the initialization of each multiplexed active data report is shown according to one embodiment of the invention. Initially at Init each active data report initializes itself by positioning all the views and by further initiating the active data mechanism. The active data report then calls a function to obtain the cookie at step g IsFirstReport InitFirstReportByCookie . The cookie is returned at step GetCookie . If the cookie is null at step strCookie null then the active data report is the first report to begin rendering and there is no available active data window in which an active data session ID is generated and set in the cookie at step strcookie SetCookie . All active data reports then retrieve the active data session ID from the cookie and place it in a local variable called m strActiveDataSessionID at step m strActiveDataSessionID strCookie . At this point each active data report sets the name of its containing window frame to a unique ActiveReportID generated on the server and loaded with the report. window.name g strActiveReportID .

Referring now to a simplified flow chart describing the process for opening the active data window is shown according to one embodiment. After the initialization process is substantially complete as shown in the initial viewset is loaded into each active data report at step OnViewsetLoaded . Since each active report is effectively unaware of the others each will attempt to open a new active data window at step OpenActiveDataWindow . The first active report will open the active data window to a new window while the rest will open to a hidden frame.

If the active data report is determined to be first at step g bIsFirstReport it assigns c strWinDataName as the active data target at step formActiveData.Target c strWinDataName . c strWinDataName is a constant string used by the active data window to set itself as the feeding active data window to all of the active reports. If the active data report is not first at step the active target is a hidden frame at step formActiveData.target reportActiveDataFrame  strActiveReportID . All subsequent communication for the set of active data reports will now be channeled thorough the single active data window generated at step .

The active data window is then assigned both the value of the active session ID at step formActiveData.strActiveDataSessionID.value g strActiveDataSessionID and the report ID at step formActiveData.strActiveReportID.value gstrActiveReportID . The value of g bIsFirstReport is then assigned to the active data report at step formActiveData.bOsForstReport.value g bIsFirstReport . As previously described the first active report is true and all others are false.

If the report is first it is allowed to open the active data window at step window..open c strWinDataName strFeatures . At this point each active data window whether opened as a new window or a hidden frame will submit a request for the change lists of its viewsets.

Referring now to a simplified flow chart describing the initialization of the active data is shown according to one embodiment of the invention. Init is called when the active data window is fully loaded. If the active report is first at step the cookie synchronization process is started at step . The cookie is set to expire and be updated by the first active data window after a fixed period of time for example 2 seconds. That active data window will continue to update set and reset the cookie expiration time until it is closed. For instance if the connection is interrupted and subsequently reestablished with a new active data session ID the last changelist that had not arrived is generated on the server side and pushed down to the active data window.

If the interruption exceeds the timeout period established in the active data platform i.e. 3 minutes the viewset will expire in the active report cache. The active report server once notified of the viewset expiration will cause the active data window to refresh all of the opened reports close itself and subsequently remove the cookie. The first active data report to finish refreshing will again generate a new active data window and subsequently set a new cookie on the client containing a new generated active data session ID thereby starting the process again.

The reports hash table is then initialized at step . This hash table allows the active data window to quickly discover a reference to target active data report by its name. All active data reports then enable the pause button at step EnablePauseActiveDataButton enables pausing and resuming the active data stream for a given report. The active data is then retrieved at step StartActiveData which submits a form to a hidden frame within the ActiveData that subsequently receives the JScript events and never fully loads.

Referring now to a simplified flow chart describing the processing active data is shown according to one embodiment of the invention. Initially a hidden frame within the active data window calls its parent i.e. the active data window in order to process the active data of a specific viewset identified in the report by strViewSetID for a specific report identified in the active data window by strActiveReportID at step ProcessActiveData strActiveReportID strViewsetID strViewsetId iIndex strXml .

If the report has already been closed at step IsReportClosed strActiveReportID then there is nothing further to do at step Do nothing . Else a reference to the report is obtained using the strActiveReportID at step GetReport strActiveReportID .

AddReport is then called with this ID at step AddReport strActiveReportID . If the active report ID is not contained within the hash table at step IsReportAddded strActiveReportID the window reference is obtained by asking the browser to open its window. Since the window should already be opened and initialized its reference is returned in step Open window by strActiveReportID name to get a reference to the report s window .

This window reference is then set as the oActiveDataFeed window in the report window at step . The report is then retrieved from the report s window and added it to the g oReports hashtable at . All active data windows then return the report from the g oReports hashtable at . And finally the report s method to process active data is invoked through the obtained reference at step oReport.ProcessActiveData strViewsetId iIndex strXml .

Referring now to a simplified UML diagram is shown of the active data server according to one embodiment of the invention. ActiveDataManager is a singleton that holds references to each ActiveDataUser . ActiveDataUser represents a user on a specific machine i.e. specific IP address or machine name that has one or more open ActiveDataReports . ActiveDataReport represents an open report that has one or more open and active viewsets. ActiveDataReader reads the viewset s active data from the report cache formats it and send it down to the browser using IActiveData . IActiveData is an interface that breaks a circular dependency between the Shared.ActiveData and the Iteration.ReportServer packages. ActiveData is instantiated for every report.

The first report opens it as a new window that holds an open connection to the client. All of the ActiveDataReaders will get a reference to the first ActiveData object that has the connection to the client and will use it to stream the JScript event down to their ViewSets. This connection is used to stream the Jscript events down to the browser. WebPage profiles a reference to the Context.Response Object that is used to send the Jscript events. ActiveDataScripter creates the scripts to be sent down to the browser. DataFormatter formats ActiveData . DataManager is a singleton that reads ActiveData from the report cache. ReportCacheClient is a singleton that connects the report server to the report cache.

While this invention has been described in terms of several preferred embodiments there are alterations permutations and equivalents which fall within the scope of this invention. For example although reference is given to Sagent Business Intelligence Solutions it should be understood that the invention can also integrate with other business intelligence and ETL solutions. It should also be noted that there are many alternative ways of implementing the apparatuses of the present invention. It is therefore intended that the following appended claims be interpreted as including all such alterations permutations and equivalents as fall within the true spirit and scope of the present invention.

Advantages of the invention include optimizing the presence aware delivery of relevant information a device in a timely manner and rendered in a dynamic format and the continuous extraction of information from data sources without the need for manual queries or the need of additional user training. Other advantages include synchronizing and validating a session by the use of cookies and obtaining a reference to a second browser window from a first browser window using the window.open function by name.

Having disclosed exemplary embodiments and the best mode modifications and variations may be made to the disclosed embodiments while remaining within the subject and spirit of the invention as defined by the following claims.

