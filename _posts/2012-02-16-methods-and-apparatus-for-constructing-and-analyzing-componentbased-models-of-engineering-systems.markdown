---

title: Methods and apparatus for constructing and analyzing component-based models of engineering systems
abstract: Systems, methods, and apparatus for modeling and analyzing a physical system comprising a plurality of components. In some embodiments, a component type of a component of the plurality of components may be used to access a dataset from a plurality of datasets. The dataset may include a representation of at least one partial differential equation. A model of the component may be constructed based at least in part on the accessed dataset and at least one parameter relating to a physical characteristic of the component, and may be used to compute at least one output value based on at least one input value.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09213788&OS=09213788&RS=09213788
owner: Massachusetts Institute of Technology
number: 09213788
owner_city: Cambridge
owner_country: US
publication_date: 20120216
---
This application claims the benefit of Provisional Application Ser. No. 61 551 401 filed on Oct. 25 2011 which is incorporated herein by reference in its entirety.

This invention was made with government support under Grant No. FA9550 09 1 0613 awarded by the U.S. Air Force Aerospace Research Office of Scientific Research. The government has certain rights in this invention.

Computer simulations are one of the most useful tools in modern engineering. To evaluate a proposed solution to a complex engineering problem an engineer typically uses a Finite Element Analysis FEA software tool to construct a mathematical model of the proposed solution and to run FEA simulations based on the mathematical model. For instance when designing a bridge a structural engineer can use an FEA tool to construct a model of a proposed design and to run simulations to determine whether any stress hot spots exist under various loading conditions.

FEA refers generally to a class of numerical analysis techniques for approximating solutions of partial differential equations. These techniques attempt to break down a complex physical system into simpler subsystems that are analyzed locally. For instance in the example of the proposed bridge design a mathematical domain representing the structure of the bridge can be divided into a set of disjoint subdomains each representing a portion of the structure. An unknown function of interest e.g. displacement or stress can then be approximated locally over each subdomain.

Several FEA tools are available commercially such as MSC Nastran by MSC.Software Corporation COMSOL Multiphysics by COMSOL AB SAP 2000 by Computers and Structures Inc. and ANSYS by ANSYS Inc.

Systems methods and apparatus for modeling and analyzing a physical system comprising a plurality of components.

In some embodiments a method is provided comprising acts of accessing based at least in part on a component type of a component of the plurality of components a dataset from a plurality of datasets the dataset comprising a representation of at least one partial differential equation constructing a model of the component based at least in part on the accessed dataset and at least one parameter relating to a physical characteristic of the component and using the model of the component to compute at least one output value based on at least one input value.

In some further embodiments a system is provided comprising at least one processor programmed to access based at least in part on a component type of a component of the plurality of components a dataset from a plurality of datasets the dataset comprising a representation of at least one partial differential equation construct a model of the component based at least in part on the accessed dataset and at least one parameter relating to a physical characteristic of the component and use the model of the component to compute at least one output value based on at least one input value.

In yet some further embodiments at least one computer readable medium is provided having encoded thereon instructions that when executed by at least one processor implement a method for modeling and analyzing a physical system comprising a plurality of components the method comprising acts of accessing based at least in part on a component type of a component of the plurality of components a dataset from a plurality of datasets the dataset comprising a representation of at least one partial differential equation constructing a model of the component based at least in part on the accessed dataset and at least one parameter relating to a physical characteristic of the component and using the model of the component to compute at least one output value based on at least one input value.

It should be appreciated that all combinations of the foregoing concepts and additional concepts discussed in greater detail below provided such concepts are not mutually inconsistent are contemplated as being part of the inventive subject matter disclosed herein. In particular all combinations of claimed subject matter appearing at the end of this disclosure are contemplated as being part of the inventive subject matter disclosed herein.

The inventors have recognized and appreciated a number of disadvantages of conventional simulation techniques.

First conventional FEA tools require users to go through extensive training to learn how to construct and analyze three dimensional 3D models. Even with adequate training the model construction process tends to be complex and time consuming. As a result engineers are discouraged from verifying their designs using full scale 3D simulations. Instead engineers often rely on more limited modeling techniques such as those based on one dimensional 1D stick models. Such techniques may lead to oversimplification of complex physical systems and hence may be less effective in uncovering design flaws. Therefore a need exists for a simulation tool that allows users to construct and analyze 3D models in a simple and intuitive manner.

Second while some conventional FEA tools allow users to construct 3D models and perform full scale simulations such simulations are computationally intensive and require powerful hardware infrastructure. Typically to simulate a real world problem such as a design of a bridge each simulation run that corresponds to a particular set of loading conditions can take an hour or more to complete. Even with supercomputers which are costly to acquire and maintain engineers often need to wait more than a day to obtain simulation results on all loading conditions of interest. Therefore a need exists for a simulation tool that can deliver results in real time e.g. in about one minute thirty seconds fifteen seconds five seconds two seconds one second or less without expensive hardware.

Third conventional FEA tools do not provide efficient mechanisms for fine tuning system designs. For example whenever a user modifies any aspect of a design a conventional FEA tool re computes a full FEA solution on the entire physical system. As a result conventional FEA tools are unable to deliver updated simulation results in real time even for minor modifications. Therefore a need exists for a simulation tool that provides convenient mechanisms for modifying system designs and efficiently computes updated simulation results.

Fourth conventional FEA tools offer few opportunities for reusing existing work. A user typically constructs a new FEA model for each new physical system to be analyzed and a full FEA solution is computed based on the new model even if the new physical system shares similar components with physical systems previously analyzed. Therefore a need exists for a simulation tool that provides convenient mechanisms for managing and reusing previously computed data which may significantly shorten the amount of time needed to build a computational model and perform a simulation.

Accordingly in some embodiments systems methods and apparatus are provided for constructing and analyzing component based models of engineering systems.

In accordance with some embodiments an improved simulation tool is provided that allows a user to construct a model for a physical system in a bottom up fashion by creating models for components in the physical system and specifying how the components are interconnected. For instance each component in the physical system may have one or more ports for connecting to one or more other components so that the user may specify a connection between a first component and a second component by simply selecting a first port of the first component and a second port of the second component and indicating that the first and second ports are to be connected.

The inventors have recognized and appreciated that it may be beneficial to provide parametrizable components. For example in one implementation a library of reference components is provided where each reference component may conceptually represent a component type such as a component with one or more parameters unspecified. In such an embodiment a user may create a component model simply by selecting a reference component from the library of reference components and then specifying one or more parameters to be used to instantiate the selected reference component.

In accordance with some further embodiments an improved simulation tool is provided that is capable of delivering FEA simulation results in real time using only commonly available hardware such as hardware on a desktop computer a laptop computer a smartphone or some other suitable user device. In some implementations a static condensation procedure may be used to eliminate one or more degrees of freedom internal to at least one component in the physical system and a reduced basis RB approximation technique may be applied to reduce the computational complexity associated with the static condensation procedure. For example rather than computing an exact solution for a so called bubble function as done in a conventional static condensation procedure an RB approximation of the bubble function may be computed which may lead to significant computational savings.

The inventors have further recognized and appreciated that it may be beneficial to decompose an RB computation into two steps Construction and Evaluation such that the Construction step may be computationally expensive but may result in readily reusable data while the Evaluation step may be computationally inexpensive. For example in an embodiment with parametrizable components a Construction step may produce data corresponding to a reference component which may mathematically correspond to a family of components that differ only in one or more parameters and an Evaluation step may use the data produced by the Construction step to construct and analyze a component model corresponding to an instance of the reference component e.g. with specified parameter values . As a more specific example the Construction step may involve solving one or more instances of at least one partial differential equation where each instance may correspond to a different set of one or more parameters for the partial differential equation. The data thus generated may be used during the Evaluation step to solve any new instance of the partial different equation corresponding to any set of parameters drawn from selected parameter ranges. In this manner the cost incurred during the Construction step for a reference component may be amortized over multiple instantiations of the reference component. Furthermore in some embodiments the Construction step may be performed offline e.g. before actual parameters are determined for a specific problem so that only the relatively inexpensive Evaluation step is performed online.

In accordance with some further embodiments an improved simulation tool is provided that allows a user to modify one or more aspects of a physical system and obtain updated simulation results in real time. For instance user interface functions may be provided for the user to perform various modifications including but not limited to modifying one or more parameters of a component adding a component e.g. by cloning an existing component removing a component disconnecting previously connected components moving a component from one part of the physical system to another part of the physical system and rotating a component. In response to such changes requested by the user the simulation tool may be able to quickly deliver updated simulation results by leveraging previously computed data. For example in some implementations the simulation tool may update certain computations relating to components whose parameters and or connections are changed but may reuse previously computed data for components that are not directly affected by the changes.

In accordance with some further embodiments an improved simulation tool may perform one or more consistency checks to determine whether changes requested by a user are compatible with other aspects of a physical system. The simulation tool may alert the user if any incompatibility is detected. Additionally or alternatively the simulation tool may propose further changes to the physical system to remove one or more incompatibilities introduced by the user requested changes.

In accordance with some further embodiments an improved simulation tool is provided that automatically computes an error associated with a simulation result. In some implementations an error may be a rigorously computed error bound such as a maximum possible difference between the simulation result and a result that would have been obtained had a full FEA solution been computed. For example in an embodiment in which RB approximations are computed for bubble functions a local error bound may be computed for each bubble function where the local error bound indicates a difference between a reduced order model computed for the bubble function and a corresponding full FEA solution. Such local error bounds may then be combined to obtain an overall error bound for an entire physical system or a portion thereof. In other implementations an error may be an error estimate that can be computed in less time compared to a rigorous error bound. In yet some other implementations a user may choose which type of error e.g. rigorous error bound or error estimate is to be computed by the simulation tool. Following below are more detailed descriptions of various concepts related to and embodiments of inventive systems methods and apparatus for constructing and analyzing component based models of engineering systems. It should be appreciated that various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways as the disclosed concepts are not limited to any particular manner of implementation. For instance the present disclosure is not limited to the particular arrangements of components shown in the various figures as other arrangements may also be suitable. Such examples of specific implementations and applications are provided solely for illustrative purposes.

In the example shown in the illustrative simulation tool includes a user interface through which a user may interact with the simulation tool . For instance the user interface may allow the user to construct a model for a physical system by specifying one or more aspects of the physical system such as geometry material and or any other suitable physical characteristics. Once such a model is constructed the user may again via the user interface direct the simulation tool to perform a simulation based on the model to predict how the physical system may behave under one or more selected conditions. Results of the simulation may be delivered to the user via the user interface in any suitable manner such as by visually rendering one or more output values of the simulation.

In some embodiments the simulation tool may allow the user to construct a model in a bottom up fashion by creating models for components in the physical system and specifying how the components are interconnected. For instance the simulation tool may allow the user to create a model for a component by browsing through a library of reference components. As discussed above a reference component may conceptually represent a component with one or more parameters unspecified or a component type. The user may select from the library a reference component having one or more desired characteristics such as geometry material and or any other suitable physical characteristics and specify one or more parameters to be used by the simulation tool to instantiate the selected reference component. Furthermore the simulation tool may allow the user to specify how the component is to be docked within the physical system for example by specifying one or more ports of the component and one or more corresponding ports of the physical system and indicating that the component is to be connected to the physical system at the specified ports.

In the example shown in the simulation tool includes a component instantiation module adapted to use the component parameters specified by the user to instantiate the reference component selected by the user . For instance the component instantiation module may be adapted to access a reference component library that stores a plurality of datasets e.g. datasets . . . N as shown in corresponding respectively to a plurality of reference components. The component instantiation module may access a dataset corresponding to the reference component selected by the user and may use the component parameters specified by the user and the accessed dataset to create a component model. For example in some embodiments the component instantiation module may use the component parameters specified by the user and the dataset accessed from the library to derive one or more partial differential equations that represent the component. As a more specific example the component instantiation module may use the component parameters specified by the user and the dataset accessed from the library to compute a so called local stiffness matrix and a so called local load vector that represent the component.

In various embodiments pre computed reference component datasets may be made available to users via different channels. For example an educational institution an engineering firm an equipment manufacturer or some other suitable entity may develop and maintain a library of pre computed reference component datasets for internal use. As another example a group of entities may enter into an agreement to jointly develop and maintain a shared library of pre computed reference component datasets. As yet another example a component manufacturer may make pre computed reference component datasets available to component purchasers either with the purchase of corresponding components or as an additional service. As yet another example a library of pre computed reference component datasets may be maintained by a private or governmental entity where public access may be allowed either at no charge or under some suitable billing arrangement. For instance a user may pay a fee to subscribe to the library. Additionally or alternatively a user may pay a fee for each dataset accessed from the library. The fee may vary depending on a number of factors such as a subscription package paid for by the user whether the accessed dataset belongs to a pool of premium content and or whether a contributor of the dataset receives compensation for allowing access to the dataset. Other ways of developing maintaining and or distributing pre computed reference component datasets may also be possible as aspects of the present disclosure are not so limited.

Returning to the example shown in the simulation tool further includes a system assembly module adapted to construct a model for the overall physical system based on component models created by the component instantiation module and information provided by the user regarding how the components are to be connected. For instance in an embodiment in which the components are connected at ports specified by the user the component models created by the component instantiation module may contain information relating to the ports and the system assembly module may use the information relating to the ports to combine the component models into a system model. For example in some embodiments the system model may include one or more partial differential equations representing the overall physical system and the system assembly module may derive the partial differential equations representing the overall physical system using partial differential equations representing individual components. As a more specific example the system assembly module may use local stiffness matrices and local load vectors associated with the components to compute a global stiffness matrix and a global load vector for the overall physical system.

In the example shown in the simulation tool further includes a system evaluation module adapted to compute one or more output values of interest based on one or more input values provided by the user . Such input values may represent loading and or boundary conditions for the physical system being analyzed. For instance in an example in which the physical system is a bridge the user may specify a location at which a load is to be applied to the bridge and a size of the load which may be used by the system evaluation module as loading conditions. The user may further specify that the bottom of each pillar of the bridge is to have zero displacement which may be used by the system evaluation module as boundary conditions. The system evaluation module may then apply such loading and or boundary conditions to the system model constructed by the system assembly module to compute one or more output values of interest such as displacement and or stress at various parts of the bridge. Such output values may be delivered to the user via the user interface in any suitable manner for example by visually displaying one or more graphs charts and or other suitable representations of the output values. Additionally or alternatively the output values may be stored in some suitable storage device for future access.

While various illustrative features of a simulation tool are discussed above it should be appreciated that aspects of the present disclosure are not limited to any specific feature or combination of features. Nor are aspects of the present disclosure limited to the illustrative arrangement of modules shown in . Rather a simulation tool may include fewer modules more modules or different modules and each module may perform any suitable functionality or combination of functionalities. Furthermore the modules may be arranged in any suitable manner. For example in some embodiments one or more modules may be located remotely from other modules and the modules may communicate with each other using any suitable networking technologies. Further still some of the computations performed by a module may be distributed across different computers for example to deliver simulation results in less time.

At act the simulation tool may receive an identification of a first reference component to be used to create a model of a first component of the physical system being analyzed. For instance as discussed above in connection with the simulation tool may present to the user a plurality of reference components such as reference components for which pre computed datasets are available from one or more libraries e.g. the reference component library in the example of . The user may browse through the reference components and select one or more of them for use in constructing a model of the physical system being analyzed. Alternatively the user may obtain identification information regarding a desired reference component in some other suitable manner such as by looking up a directory of reference components for which pre computed datasets are available.

At act the simulation tool may receive one or more parameters for the reference component identified at act . Such parameters may relate to one or more physical characteristic of the component being modeled such as geometric and material characteristics. However it should be appreciated that some reference components may not be parameterized so that no parameters may be received for such reference components.

Referring to an illustrative graphical user interface GUI A is shown in which a user selects a reference component corresponding to a keystone to create a component in accordance with some embodiments. In this example the component has four ports and for connecting to other components. The user may specify the geometry of the keystone for example by specifying a width of the keystone a height of the keystone and or a size for each of the four ports and . Alternatively one or more suitable geometric relationships may be assumed so that some measurements may be inferred from other measurements. For example the port may by definition have the same dimensions as the port . As yet another alternative the user may specify an angle of the arch in combination with other dimensions such as the width and height of the keystone.

Although the illustrative GUI A shown in displays a two dimensional 2D representation of the component it should be appreciated that the simulation tool may create and manipulate a 2D or 3D mathematical model of the component . For example the component may be assumed to have a uniform depth which may be specified by the user. In alternative embodiments a 3D representation of the component may be displayed and the user may specify depth information using any suitable input method for example by clicking and dragging points of interest using a mouse or by entering depth information into a dialog box.

Returning to the simulation tool may receive an identification of a second reference component at act and may receive at act one or more parameters for the second reference component identified at act . The acts and may be similar to respectively the acts and described above.

At act the simulation tool may receive an indication that the first and second components specified at acts and are to be connected. For example with reference to showing an illustrative GUI B the user may create a component corresponding to a pillar and having ports and and may indicate that the port of the component is to be connected to the port of the component .

At act the simulation tool may receive an indication that a subsystem including the first and second components specified at acts and are to be cloned. For example with reference to showing an illustrative GUI C the user may select the component and the component to form a subsystem for cloning and may specify that a cloned subsystem is to be connected to the original subsystem at the port of the component .

Returning to the simulation tool may at act receive one or more loading and or boundary conditions. For instance in the example of the arch structure discussed above a loading condition may specify a location a magnitude and a direction of a force to be applied to the arch structure whereas a boundary condition may specify how the arch structure is expected to behave at a port that is not connected to any other component in the arch structure. As a more specific example shows an illustrative GUI E displaying the arch structure having the components and where the user specifies that the port of the component and a port of the component are to have zero displacement.

Returning to the simulation tool may at act obtain simulation results based on information received from the user and or other sources. For instance in some embodiments the simulation tool may use the identifying information received at acts and to access pre computed reference component datasets for the first and second reference components. The simulation tool may then use the component parameters received at acts and and the accessed datasets to construct component models for the first and second components. A component model for a cloned component e.g. the component in the example of may be constructed based on the component model for the corresponding original component e.g. the component in the example of for instance by applying appropriate translational and or rotational transformations. The simulation tool may then assemble the component models into a system model and compute one or more output values of interest for example by solving one or more partial differential equations.

It should be appreciated that any of the processing tasks associated with the act may be performed by one or more computers different from a computer on which the simulation tool is running. For instance in some alternative embodiments the simulation tool may request that a simulation be performed by a server located remotely from the simulation tool and may send relevant information e.g. identification of reference components component parameters and or information regarding how various components are connected to the server and receive simulation results from the server. As another alternative the simulation tool may request component models from a server e.g. by providing identification of reference components and or component parameters but may perform other tasks locally such as those tasks related to cloning assembly and solving partial differential equations. Other ways of distributing the processing tasks may also be suitable as aspects of the present disclosure are not so limited.

At act the simulation tool may display the simulation results obtained at act to the user. For instance with reference to the arch structure example discussed above the simulation results may include predictions regarding how the arch structure would behave under specified loading and or boundary conditions. One example of such a prediction is the expected deformation or displacement of the arch structure which is displayed in an illustrative GUI F shown in . In this example deformation is expected at various locations such as vertical displacement of the keystones e.g. at location as shown in and bending of the pillars e.g. at location shown in .

In some embodiments the simulation tool may provide an error bound associated with a simulation result. For instance in the example shown in the simulation tool indicates that an error associated with the displacement prediction is no more than 0.0053571 at any location within the arch structure. This error may indicate a difference between the output of the simulation tool and an output that would have been obtained had a full FEA solution been computed e.g. according to some suitable FEA technique . As discussed in greater detail below such a full FEA solution may be used as a reference model in an offline stage of computation. Such an error bound may be derived in a rigorous and verifiable manner so that engineers may rely on the results of the simulation tool with confidence.

It should be appreciated that the simulation results produced by the simulation tool may include other information in addition to or instead of displacement of a structure. Depending on the particular engineering problem at hand any suitable output of interest may be computed. For example in an illustrative GUI G shown in a user may choose from a number of different displays . . . which may show respectively the expected displacement and three principal stresses within the arch structure all of which may be included in the simulation results obtained by the simulation tool. The user may also return to a display showing the proposed arch structure edit simulation parameters via a display or interact with another software e.g. a software for solving partial differential equations via a display . Other types of displays providing other functionalities may also be provided as aspects of the present disclosure are not limited in this manner.

In addition to visually displaying simulation results such as displacement of a structure the simulation tool may in some embodiments allow the user to drill down to more detailed results. For example in an illustrative GUI H shown in the simulation tool may allow the user to select the connection between port of the component and port of the component to see an estimate for the displacement values at that connection. This estimate may be computed in any suitable manner for example by taking an average or an upperbound along the connection. A rigorously computed error bound may also be provided for this estimate.

While illustrative examples relating to an arch structure are discussed above in connection with and it should be appreciated that various inventive concepts disclosed herein can also be used to analyze other types of structures and other types of engineering problems e.g. heat transfer acoustics fluid mechanics etc. . Also aspects of the present disclosure are not limited to any particular number or arrangement of components. For example as shown in an illustrative GUI I of the cloning feature of the simulation tool may allow a user to rapidly construct a model for a complex structure with many components by taking advantage of repetitions in the complex structure. The simulation tool may provide a rigorously computed error bound for the entire structure for example as shown in an illustrative GUI J of to assist an engineer in managing the risk of error accumulation in a repeated structure.

In some embodiments a simulation tool may allow a user to make modifications to a system after a model has been constructed. In response to such modifications the simulation tool may construct an updated model and obtain updated simulation results using the updated model. shows an illustrative process that may be performed by a simulation tool to process one or more modifications to a component based model of a physical system in accordance with some embodiments. For purposes of illustration various acts of the process will be explained with reference to which show an example of a series of user interactions relating to modifying an arch structure and analyzing the modified arch structure.

At act the simulation tool may receive an input specifying one or more modifications to a model of a physical system e.g. a component based model as described above in connection with the illustrative process shown in . For instance as shown in an illustrative GUI A of the simulation tool may allow the user to modify angles of keystone components and in an arch structure. In this example a dialog box is provided to allow the user to enter the desired angles. However it should be appreciated that other input methods may also be suitable for example by allowing the user to use a pointing device e.g. a mouse to select and move one or more lines forming an angle to be changed.

Returning to the example of the simulation tool may at act automatically perform one or more compatibility checks response to a modification requested by the user. For example if the user attempts to change a geometry parameter of a component the simulation tool may automatically check whether the modified component is still compatible with the physical system. As a more specific example if a user attempts to change a width or height of a keystone in an arch structure the simulation tool may automatically check whether the modified keystone would still fit into the arch structure which may depend on whether and how the modified keystone is connected to other components in the arch structure such as other keystones and or pillars. However it should be appreciated that other types of incompatibilities may also be checked by the simulation tool including but not limited to connecting two components via ports that do not match e.g. ports that have different sizes and or shapes connecting two component in such a way that corresponding interface functions are not oriented consistently and connecting two components in such a way that the two components occupy a common region in space which may be impossible in real life .

In the example of the simulation tool may at act attempt to make changes to the physical system other than those requested by the user for example to preserve consistency of the physical system. This may be done with or without user approval. For instance in the example of the simulation tool may attempt to move a pillar connected to the keystone if the user requests to increase the width of the keystone so that the pillar remains centered relative to the keystone . If the pillar is connected to another component not shown the simulation tool may perform another compatibility check to determine whether moving the pillar should trigger yet another change to the physical system. This process may repeat until all compatibility requirements are satisfied or until some stopping condition is reached such as the discovery of an incompatibility that the simulation tool does not have sufficient information to resolve. In this manner changes may be propagating throughout the physical system automatically which may significantly improve user experience and productivity. However it should be appreciated that automatic propagation of changes is not required and the simulation tool may simply alert the user when an incompatibility is detected and allow the user to make further changes.

Once the proposed changes are confirmed by the simulation tool and or the user the simulation tool may process the proposed changes to obtain updated simulation results. For instance returning to the example of the simulation tool may obtain updated simulation results at act and display the updated simulation results at act . In some embodiments the processing tasks performed at acts and may be similar to those performed at acts and of . However in an embodiment in which a system model is obtained based on multiple component models some computational savings may be possible. For example some speedup e.g. five ten or fifteen percent may be achieved by reusing previously computed data relating to component models that are not directly affected by any modifications such as component models with no changes to either parameters or connections.

An example of such updated simulation results is displayed in an illustrative GUI C shown in . In this example significant deformation is expected at various locations such as vertical displacement of the keystones e.g. at location as shown in and bending of the pillars e.g. at location as shown in .

Returning to the example of the simulation tool may at act determine whether further modifications to the physical system may be desired. For example based on the results obtained at act and displayed at an engineer may decide to add to the arch structure shown in one or more reinforcing features such as flying buttresses not shown . As another example the engineer may decide to make further changes to parameters of one or more components. If such modifications are desired the simulation tool may return to act to receive instructions from the engineer to further modify the physical system. For example the simulation tool may readily construct models for additional components using pre computed reference component datasets that may be available for the additional components. If on the other hand no other modifications are desired the process may end.

While specific examples of modifications are discussed above in connection with FIGS. B and A C it should be appreciated that aspects of the present disclosure are not limited to any particular types of modifications. For instance modifications relating loading and or boundary conditions may be made in addition to or instead of modifications relating to component parameters 

In some further embodiments a simulation tool may be used to analyze various types of failures such as a brittle failure in a structure. shows an illustrative GUI A displaying an arch structure in which a pillar has been removed at location so as to analyze how the remaining structure may behave. The simulation tool may construct an updated model for example by simply omitting a component model corresponding to the missing pillar during an assembly procedure. The updated model may be analyzed as before and an example of an updated result is shown in an illustrative GUI B of . In this example significant deformation is expected at various locations above the missing pillar such as vertical displacement of the keystones at locations and as shown in .

As discussed above and in greater detail below in connection with a simulation tool may be able to construct update models and obtain updated simulation results in an efficient manner due to the use of pre computed reference component datasets. However it should be appreciated that aspects of the present disclosure is not limited to such use. For example pre computed data of some other form or no pre computed data at all may be used by a simulation tool in accordance with alternative embodiments.

As discussed above a reference component may conceptually represent a component type such as a component with one or more parameters unspecified. For purposes of illustration the process is described below with reference to a pillar with unspecified length and width as an example of a reference component. However it should be appreciated that the illustrative process may be performed to prepare evaluation datasets for other reference components as aspects of the present disclosure are not limited in this respect.

At act one or more interface functions may be computed on a port of a reference component. In the example of a pillar there may be two ports one at each end of the pillar for connecting to other components such as keystone components or other pillar components. If the pillar is modeled as a 3D object a port may be a 2D surface.

At act an interface function computed at act may be lifted into the interior of the reference component in any suitable fashion. For instance with reference again to the example of a 3D pillar an interface function computed on a 2D port may be extended to an interface function defined in 3D space so that the 3D interface function may take on the same value which may be non zero as the 2D interface function anywhere on the port while diminishing into the interior of the pillar in a smooth fashion and becoming zero at any other port. Once an interface function has been lifted into the interior of a component the interface function can be used to indicate some quantity of interest e.g. displacement in a structural analysis problem or temperature in a heat transfer problem in the component. It should be appreciated that components and ports may have other dimensionalities as aspects of the present disclosure are not limited to models of any particular dimensionality. Furthermore any suitable number of interface functions may be computed for each port of the reference components. For example in some embodiment more interface functions may be computed to reduce error even though having more interface functions may lead to a higher computational load.

At act a reduced basis technique may be applied to form one or more RB bubble spaces associated with an interface function computed at act . In some embodiments an RB bubble space may have as elements linear combinations of one or more basis functions so that forming an RB bubble space may include identifying the one or more basis functions. As discussed in greater detail below in connection with an RB bubble space associated with an interface function may be used to approximate a bubble function associated with the interface function where both the bubble function and the interface function may be used in computing a local stiffness matrix and a local load vector of a component.

In one implementation a basis function for forming an RB bubble space may be obtained by randomly selecting a set of one or more parameters for the reference component e.g. a length and a width for the pillar solving one or more partial differential equations corresponding to the selected set of parameters and using the solution to obtain the basis function. In an alternative implementation basis functions may be obtained using an iterative greedy algorithm. For example an iterative greedy algorithm may be initialized by selecting a training set of parameters for a reference component e.g. multiple combinations of lengths and widths for the pillar . At each iteration of the algorithm an error estimate based on a current set of basis functions may be evaluated for some or all of the parameters in the training set and a set of one or more parameters at which the error estimate is maximized may be selected. A solution corresponding to the selected set of one or more parameters may then be used to obtain a basis function. This new basis function may be added to the set of basis functions and the algorithm may proceed to the next iteration. The algorithm may terminate when some desired number of basis functions is reached or when an error tolerance over the training set is satisfied.

While random selection and greedy selection are described above as alternative techniques for identifying a basis function it should be appreciated that other techniques for identifying a basis function may also be possible as aspects of the present disclosure are not limited in this respect. Furthermore as described above in the example of a greedy algorithm a process for selecting a basis function may be performed any suitable number of times to obtain any suitable number of basis functions for example based on a desired tradeoff between accuracy and computational efficiency. As a more specific example an error tolerance may be used so that more basis functions may be added until an estimated error is below the selected error tolerance.

At act a source RB bubble space may be formed using any of the techniques described above or any other suitable technique. As discussed in greater detail below in connection with a source RB bubble space may be used to approximate a source bubble function which may in turn be used in computing a local load vector of a component. Such a source bubble function may represent an input to a physical system being analyzed such as a heat source in a heat transfer application or a force or load in a solid mechanics application.

At act certain parameter independent data may be computed which may be used during an online stage to analyze a physical system that includes an instance of the reference component with all parameters specified. In some embodiments parameter independent data computed at act may include one or more inner products of functions that are independent of those parameters that are not yet specified during an offline stage. Computing such parameter independent data ahead of time may speed up the online stage significantly so that simulation results may be delivered to a user in real time.

Act some or all of the data computed at acts and may be organized into a dataset and stored in such a manner that the dataset may be later retrieved by identifying the associated reference component e.g. the pillar . As discussed before computing and storing such a dataset ahead of time may speed up the online stage significantly and may allow the computational overhead to be amortized over multiple instantiations of a reference component.

Although specific examples are described above for data that may be included in a reference component dataset and for techniques that may be used to prepare such data it should be appreciated that aspects of the present disclosure are not limited to any particular type of data to be included in a reference component dataset nor to any particular technique for computing such data. For instance where multiple interface functions are computed a single RB bubble space may be used for all of the interface functions. Alternatively a different RB bubble space or set of RB bubble spaces may be computed for each interface function. A combination of these two approaches may also be possible for example by having some but not all of the interface functions share an RB bubble space or set of RB bubble spaces. Furthermore any suitable software may be used to solve partial differential equations for example in a process for selecting basis functions at act .

At act an approximation may be computed for each source bubble function and each bubble function associated with each interface function for each component in the physical system using a reference component dataset corresponding to the component. In some embodiments such an approximation may be computed as a suitable linear combination of basis functions from a corresponding RB bubble space. For instance a so called Galerkin method may be used to select coefficients for scaling the basis functions based on the particular set of one or more parameters specified for the reference component. Additionally an error estimate may be computed that is indicative of a difference between each true bubble function and the corresponding approximation.

At act a local stiffness matrix and a local load vector may be computed for each component in the physical system. The local stiffness matrix and the local load vector may define one or more partial differential equations that predict how a component may behave given some particular set of parameters boundary conditions and or loading conditions. In some embodiments the local stiffness matrix and the local load vector may be computed using both a corresponding reference component dataset and data computed based on the particular set of parameters boundary conditions and or loading conditions that may not have been specified until the online stage of computation.

At act the local stiffness matrices computed for various components at act may be assembled into a global stiffness matrix for the entire physical system and likewise for a global load vector. In some embodiments the assembly process may include at each connection between two components adding contributions from both components at the corresponding ports.

At act error bounds computed at act may be accumulated to obtain one or more error bounds for the entire physical system or a portion thereof. For instance in some embodiments a global error bound may be obtained by adding error bounds corresponding to all bubble function approximations used for all components. A local error bound for an individual component may then be obtained by post processing the global error bound.

At act a system of one or more equations specified by the global stiffness matrix and the global load vector which may provide an approximation to a system of one or more partial differential equations associated with the entire physical system may be solved to predict how the physical system may behave given the particular set of parameters boundary conditions and or loading conditions. For instance in the example of an arch structure a system of one or more equations corresponding to a global stiffness matrix and a global load vector may be solved to predict how much deformation or stress may be experienced at various points in the arch structure.

Again it should be appreciated that the various techniques described above in connection with are merely illustrative as aspects of the present disclosure are not limited to any particular techniques for defining and solving partial differential equations for predicting system behavior. For instance once a system of one or more equations corresponding to a global stiffness matrix and a global load vector is specified any suitable software may be used to solve such a system. Thus act of the process may include preparing a representation of the system of one or more partial differential equations that is compatible with a desired software for solving partial differential equations running the software with that representation as input and receiving results from the software.

Following below are detailed mathematical formulations and proofs for a static condensation reduced basis element method in accordance with some embodiments of the present disclosure. It should be appreciated that such examples of specific implementations and applications are provided solely for purposes of illustration and that the various inventive concepts presented herein are not limited to any particular implementation or application as other implementations and applications may also be suitable.

We first introduce an abstract model problem to illustrate a system level formulation in accordance with some embodiments. In this example the model problem relates to a symmetric coercive partial differential equation. However it should be appreciated that various inventive techniques described herein may also be applied to other types of partial differential equations as aspects of the present disclosure are not limited to any particular application.

We suppose that we are given an open domain d 1 2 or 3 with boundary . We then let Xdenote the Hilbert space 0 

where a is the portion of the boundary on which we enforce Dirichlet boundary conditions. For purposes of illustration we consider only homogeneous Dirichlet conditions but inhomogeneous conditions are readily treated by appropriate lifting functions. We suppose that Xis endowed with an inner product and induced norm .

Given a parameter where is our compact system parameter domain of dimension P we look for a field u Xwhich satisfies the weak form . 1 

For any X X is a continuous coercive symmetric bilinear form associated with a second order spatial partial differential operator over the system domain f X is a continuous linear functional which represents inhomogeneities and l X is a continuous linear output functional. We note that is a reference domain and does not depend on all geometry variation is accommodated by transformations to and hence appears as coefficients in a f and l . 

It follows from coercivity of a that there exists 0 such that for all . Also let denote the continuity constant 

To develop a high fidelity approximation of u we introduce a truth finite element space X where dim 1. Then the truth approximation satisfies 5 

Such an RBE approximation may provide a rapid and accurate approximation of this truth for any . We may measure the error in the RBE approximation with respect to the truth.

We now move to the component level. We suppose that the system introduced above is naturally decomposable into a set of interconnected parametrized components. Each component COM is associated with a subdomain where

For any given COM we let denote the boundary of and a respectively f denote the restriction of a respectively f to .Also we let and denote the restriction of the Xinner product and norm to . Analogous to the system level treatment of geometric parametrizations the are parameter independent reference domains. Geometric variation may be accommodated by COM local transformations to and hence may appear as coefficients in the weak forms. 

To minimize cumbersome notation shall refer to both system and component level parameters the precise meaning will be evident from the context. The component parameters may be related to the environment boundary conditions and sources material and constitutive properties and geometry as regards the latter most geometric parameters may be internal to the component however some geometric parameters such as translations and rotations serve to dock the component compatibly within the system. Note also that topology variation may be addressed at the supra component system assembly level and not within the individual components.

We now introduce a domain decomposition approach which is based upon the component structure introduced above in accordance with some embodiments. We begin with some notation. Recall that denotes the set of components drawn from some given library to ensure compatibility associated with our particular system. Each component COM may contain local ports at least one L P ort these local ports may in turn be associated to unique global ports G P ort . Let L P COM refer to a specific port in and let denote the portion of associated with L P COM. Similarly let denote the domain associated with global port G P. The mapping from L P COM to G P determines the particular system configuration. We suppose that maps at most two distinct L P COM to each a component has at most one neighbor on each port. Also we assume that is either empty or furthermore we define to be the set of ports for which .

For given COM let denote the component bubble space the restriction of to COM with homogeneous Dirichlet boundary conditions on each L P v V v 0 L P . Note for purposes of illustration we suppose that triangulation over which is defined honors the domain decomposition induced by the components contains only entire edges on d 2 or faces on d 3 of elements. Also let denote the coercivity constant for aon the space 

We express the degrees of freedom on in terms of an eigenfunction expansion in native to the port. Let denote the space of restrictions of functions in to and let n dim . We then introduce the complete set of eigenvectors 1 k n associated with the discrete generalized eigenvalue problem 8 1 9 here the denote real positive eigenvalues ordered such that 

The port eigenmodes are then elliptically lifted to the interior of neighboring components. We shall denote these lifted G P functions and we let denote the patch of components over which has support. Also the restriction of to a constituent component COM shall be denoted . We construct such that it satisfies the Laplace equation on the component interior coincides with on and vanishes on the remaining ports 0 11 on 12 0 on 13 

In 13 L P L P refers to the set of all ports of COM except L P. We have employed the Laplacian in 11 but of course other inner products are also possible.

For purposes of illustration we consider a component 0 0.4 0 0.4 0 3 meshed with 4 4 30Q d 3 elements the component has two square ports 0 0.4 0 0.4 0 and 0 0.4 0 0.4 3 perforce each meshed with uniform 4 4Q1 d 2 elements. shows an example of the first four eigenmodes for shows the result of lifting these four port eigenmodes to the interior of the parallelepiped component in accordance with some embodiments. illustrates the first four modes of the eigenproblem 8 9 for a square port 0 0.4 with a uniform 4 4Q1 d 2 mesh. illustrates the elliptically lifeted interface functions 11 13 corresponding to the modes in on a stem component 0 0.4 0 3 with two square ports.

We now discuss a static condensation procedure that we employ to eliminate the degrees of freedom internal to each component in accordance with some embodiments. First it is clear that we can express in terms of bubble and interface contributions as 14 

where Xfor each COM and the U 1 k n G P are interface function coefficients. Here we implicitly assume that functions in are extended by zero over and we assume an analogous extension for the outside the patch .

Now since functions in and do not share support we can eliminate bubble functions from 5 in favor of global port degrees of freedom. To with we substitute 14 into 5 and test on the COM bubble space to obtain 15 

for each COM in . The existence and uniqueness of from 16 is guaranteed due to coercivity and continuity of a on X.

From 16 and linearity we can reconstruct as L P COM 17 where satisfies 18 and the are defined by the set of n subproblems 19 Both 18 and 19 are well posed again thanks to coercivity and continuity of aover .

Here denotes the inverse map from G P to L P COM on COM recall that denotes the patch of components on which has support. Also we define the space span 1 21 and we endow with the inner product and norm and 22 for any v w .

It then follows from 24 and 20 that the global solution can be expressed as . 25 We now insert 25 into 5 and restrict the test space to to arrive at

In particular we test in 26 on for 1 k n G P to obtain the static condensation system of dimension n n 27 for the vector of coefficients U . We may also express our system output 6 as

The matrix and vector are defined as 28 and 29 respectively for 1 k n G P and 1 k n G P from 28 it is clear that is symmetric. The output vectors and are given by

Note that in the case in which we a Dirichlet condition is satisfied on a port Algorithm 1 may be slightly modified once the assembly is complete we eliminate the Dirichlet port degrees of freedom from the system since Dirichlet G P s are not included in .

We obtain a result which confirms well posedness of the square system 27 and which will later serve to demonstrate well posedness of our RB approximation.

Proof. From Lemma 3.1 in S. C. Brenner The Condition Number of the Schur Complement in Domain Decomposition 83 187 203 1999 we obtain 33 for C 0 since is compact we can further conclude 34 for a constant C 0. Next for any v w expressed in terms of the basis 1 k n G P with coefficient vectors we obtain from 10 35 and from 28 . 36 

The static condensation procedure described above may be computationally expensive due to the many bubble solves required on each component. However we now introduce a reduced basis RB approximation in particular we follow exactly the same procedure as above except now we introduce RB approximations for the bubble functions . As we will demonstrate the resulting numerical approach may offer considerable computational savings.

To begin from 18 for each COM we define the RB approximation tilde over b tilde over X a 38 where the RB space tilde over X is constructed for each component COM from a greedy algorithm. Note that there is one RB bubble approximation tilde over b for each component COM. Next from 19 for each COM we define the RB approximations tilde over b tilde over X v tilde over X 39 where tilde over X is an RB approximation space a different RB approximation space for each k L P COM obtained by a greedy procedure. The problems 38 39 are well posed due to our coercivity assumption. Note that thanks to our eigenfunction port representation the higher mode larger k bubble functions may vanish rapidly into the interior of COM as seen in for example and thus in many cases these higher modes will depend relatively weakly on the parameter. Therefore we expect that for most of the bubble degrees of freedom a small RB space will suffice.

We endow tilde over X with the same inner product and norm as . From 25 26 it is then natural to define as tilde over 42 where the coefficients satisfy

We now identify the linear algebraic structure associated with 43 . In particular we test in 43 on tilde over for 1 k n G P to obtain our RB static condensation system of dimension n 44 for the vector sc of coefficients . Note that the RB system 44 is the same size as the truth system 27 a priori there is no reduction of the truth port degrees of freedom. Furthermore our RBE system output can be expressed as . 45 

We now define these RBE static condensation quantities more explicitly. The matrix and vector are defined as tilde over tilde over 46 tilde over tilde over 47 respectively for 1 k n G P and 1 k n G P from 46 it is clear that is symmetric. The output vector is defined in 30 and the output vector is given by 48 for 1 k n G P .

We now introduce the reduced basis versions of the local stiffness matrix and local load vector for each COM from 40 49 50 for 1 k n L P and 1 k L P . Algorithm 2 then defines the assembly procedure by which we construct 46 47 from 49 50 . As in the truth case minor post processing may be added in the case of Dirichlet boundary conditions.

Finally 51 follows from 34 and 54 . Note that is finite thanks to boundedness of f continuity of a and well posedness of 38 .

Proposition 2 implies that the static condensation RBE approximation is well posed in the limit that the errors in the RB bubble approximations tend to zero the proposition furthermore establishes stability of the approximation.

We now develop a bound for the error in the system level approximation. Our approach exploits RB a posteriori error estimators at the component level to develop a bound for we then apply matrix perturbation analysis at the system level to arrive at an a posteriori bound for and S tilde over s .

For 1 k n all L P and each COM the residual r for 38 is given by 55 similarly the residual r for 39 is given by 56 

Note the dual norms are defined with respect to the truth bubble spaces as our RBE error is defined relative to the truth FE.

The a posteriori error bounds for the bubble approximations may then be expressed in terms of these residuals as demonstrated in the following lemma.

A proof of Lemma 3 may be found in G. Rozza et al. Reduced Basis Approximation and a posteriori Error Estimation for Affinely Parametrized Elliptic Coercive Partial Differential Equations 15 3 229 275 September 2008. Note that may be evaluated via the min approach or by the Successive Constraint Method both of which are described in G. Rozza et al.

We first derive bounds for the perturbation error in the statically condensed system matrix and load vector in the following lemma.

Lemma 4 For any and . Here denotes the matrix Frobenius norm and 2 62 2 63 where square root over 64 square root over 65 for satisfying 61 .

Proof. The proofs for 62 and 63 are similar and we thus restrict attention to the more involved case 63 . To derive a bound for we start with a component level bound for . For the error in a single entry on a component COM we have

Finally we recall that we suppose that each entry of and is assembled from a sum of terms from at most two different local stiffness matrices thus 63 follows from 71 and the inequality a b 2 a b . 

We note that the proof of Lemma 4 uses the symmetry of the a the proof can be generalized to the non symmetric case with a primal dual RB formulation described in G. Rozza et al. We now bound the solution error in the following proposition.

 Note if 44 is solved exactly then the last term on the right hand side of 74 vanishes however we retain the term to accommodate for example iterative solution error. We pre multiply by and divide by to obtain

It follows from Proposition 5 that as our RB bubble approximations converge then the system level RBE approximation also converges 

We may invoke the error bound of Proposition 5 since the different contributions to the error bound 73 are readily identified. However it is possible to develop a sharper bound as demonstrated in the following corollary.

We now recall the assumption that a component has at most one neighbor per port hence with the inequality a b 2 a b we can accumulate 82 over all COM to obtain . 83 

We note that outputs that satisfy 84 are common in applications and in particular many outputs are further defined only over ports on . Common outputs of interest are defined by average quantities over ports in which case all but a few terms in the sum l in 85 will vanish.

We now discuss computational issues that may be relevant to efficient implementation of the static condensation RBE method. Computational efficiency of the static condensation RBE method may come from the Construction Evaluation C E decomposition of a standard RB method for example as described in G. Rozza et al. We shall develop the C E decomposition for reference components in a Library. Ultimately each component COM of an assembly may be an instance of a reference component from our Library.

A reference component is defined by a spatial domain a parameter domain parametrized bilinear and linear forms and a collection of ports and port domains . We presume that is symmetric continuous over H and coercive over v H 0 we further assume that f is continuous over H . The truth discretization of the reference component can be decomposed into port and bubble degrees of freedom. We denote by the number of interface functions on we further define and thus represents the total number of port degrees of freedom in . Also we let m .

For any given in the Library and 1 k satisfy hatted 38 and hatted 39 respectively. Here the adjective hatted shall refer to a version of an equation earlier defined for a particular instance COM we thus avoid much repetition. The contribution of these RB bubble functions to the approximate Schur complement and load vector are then given by hatted 49 and hatted 50 respectively. The corresponding a posteriori error bound for is given from 70 by for defined in hatted 65 . Similarly the a posteriori error bound for is given by .

The C E decomposition effects the computation of and 1 k in two steps The first Construction step is performed only once this step is expensive and in particular the cost may depend on dim the truth bubble space. The second Evaluation step is performed many times for each new parameter of interest in this step is inexpensive and in particular the cost shall be independent of dim . We now describe the C E steps in more detail we focus on and the associated error bounds 1 k .

We first introduce an additional critical enabling hypothesis on the bilinear and linear forms. In particular we suppose that for each Library and are affine in functions of the parameter for any 87 88 where are parameter dependent functions and are parameter independent forms. This hypothesis can be relaxed via the Empirical Interpolation Method EIM described in M. Barrault et al An Empirical Interpolation Method Application to Efficient Reduced Basis Discretization of Partial Differential Equations 339 9 667 672 2004 which enables us to recover an approximate affine decomposition. However very often 87 88 is exactly satisfied.

We first discuss the Construction step. We consider a given Library a given and for that port a given mode k 1 . . . . We then apply a greedy procedure to form 1 N we note that . . . constitutes a set of hierarchical RB approximation spaces. We may then choose for each k 

In actual practice may be selected in the Evaluation step considerably less than N for many k and hence our estimates are perforce pessimistic. Also some Library may not be invoked in any particular system.

We first consider the computation of the RB bubbles. We consider a particular k Given any we use O QN O N FLOPs to obtain or more precisely to obtain the coefficients of the reduced basis expansion for we will then additionally use O QN FLOPs to obtain our a posteriori bound for the error in relative to . The Evaluation storage is O QN . If we now sum over all port degrees of freedom in we use O QN N FLOPs in addition we contribute O QN storage to the Evaluation Dataset.

We next consider the operation count to evaluate the RB contributions to in terms of the now known RB bubble functions basis coefficients . We first consider a particular k and k Given any of 49 may be evaluated in O QN operations. Note we may think of as a joint Schur entry output associated with and . If we now sum over all port degrees of freedom in we use O QN FLOPs we also contribute O QN storage to the Evaluation Dataset.

The static condensation RBE method may proceed in two stages. In the Offline stage for each Library we perform the Construction step to obtain the Evaluation Dataset. In the Online stage we assemble a system of components COM as instances of Library and we then invoke Evaluation to compute tilde over s . Note that the Offline stage involves both Construction and in the Greeedy procedure Evaluation however the Online stage involves only Evaluation.

2. For each k 1 . . . we compute the elliptically lifted interface functions from hatted 11 12 and 13 .

The computational burden of this construction procedure can be significant. We note that the or 1 if 0 invocations of the greedy algorithm may be independent and may therefore be straightforwardly parallelized.

The Online stage comprises two substages the assembly of the system the parametric analysis of the system. To assemble the system we first define a collection of components in which each COM is an instantiation of a Library we shall denote by the number of components in the system. Note that many COM may be instantiated from a single reference component . We next define the local port to global port mapping which provides component connectivity information and indeed is the image of we may then impose Dirichlet boundary conditions on selected ports to identify which we assume yields a well posed problem over . Finally we provide the system parameter domain . Note that remain reference elements from a geometric perspective and a final affine map may be used to realize the physical domain.

We recall that and hence COM is defined over a domain which is independent of dependent geometric variations are implicit through transformations reflected in the coefficients of a f. The actual physical domain associated with a component COM is given by for where is a piecewise affine mapping the system physical domain is thus given by

In the simplest case may be dictated solely by translation and rotation docking parameters for isotropic homogeneous operators our forms aand fmay be independent of these docking parameters. On the other hand a fwill of course depend on geometric parameters that represent dilations and other more general affine transformations.

In some embodiments we may not have complete freedom in imposing component connections. For example two connectivity constraints must be honored. We consider two components COM COM which are connected in the sense that L P and L P such that L P COM L P COM . First for such connected components the associated truth trace spaces over the shared port must be identical . This constraint imposes a condition on the set of possible connections and hence possible mappings . Second for connected components must coincide with . This constraint imposes a condition on in particular on the allowable domains for those parameters related to geometry and hence on which will depend .

We now consider the steps and associated operation counts and storage required to evaluate tilde over s . Typically we expect that a system defined by will be analyzed for many though of course only a single evaluation is also permitted the advantage of the RBE approach amortization of the Offline stage by many appeals to the Online stage can be realized either over many parameters for a particular system or over many systems or both .

1. We Evaluate the set of m or m 1 if f 0 RB bubble approximations coefficients and associated error bounds for each COM the total cost over all components is O m N QN QN FLOPs and the total storage is O m QNQN . The complexity scales with even if Library since is potentially different for different instances COM of any particular reference component .

2. We Evaluate the local stiffness matrices and local load vectors for each COM and then assemble of 44 according to Algorithm 2 at total cost O mQN . The complexity again scales with because different instances of a reference component may potentially correspond to different parameter values the complexity scales with msince has entries for each pair L P COM L P COM .

3. We accumulate the error bound terms for and of Proposition 5 and of Corollary 7 at total cost O m .

5. We compute tilde over and evaluate the system field and output a posteriori error bounds of 72 and of 85 at total cost O nm .

We may solve for by LU factorization though for larger statically condensed systems it may be desirable to employ iterative methods for example given moderate condition number of and evaluate tilde over by inverse iteration or for large systems a Lanczos algorithm . The computational costs in Online 4 and Online 5 assume that is a block sparse matrix with bandwidth m we further assume that evaluation of tilde over goes through O 1 iterations.

We may also visualize the field computed as described above. For instance we may visualize over selected regions or surfaces of S. If these selected regions coincide with ports then no additional cost may be incurred. If however these selected regions include parts of or which do not coincide with ports then additional operations and storage may be used O N V where V is the set of points in at which may be evaluated in order to render the solution over S.

As used herein a mobile device may be any computing device that is sufficiently small so that it may be carried by a user e.g. held in a hand of the user . Examples of mobile devices include but are not limited to mobile phones pagers portable media players e book readers handheld game consoles personal digital assistants PDAs and tablet computers. In some instances the weight of a mobile device may be at most one pound one and a half pounds or two pounds and or the largest dimension of a mobile device may be at most six inches nine inches or one foot. Additionally a mobile device may include features that enable the user to use the device at diverse locations. For example a mobile device may include a power storage e.g. battery so that it may be used for some duration without being plugged into a power outlet. As another example a mobile device may include a wireless network interface configured to provide a network connection without being physically connected to a network connection point.

In the embodiment shown in the computer includes a processing unit that includes one or more processors and a non transitory computer readable storage medium that may include for example volatile and or non volatile memory. The computer may also include other types of non transitory computer readable medium such as storage e.g. one or more disk drives in addition to the system memory . The memory may store one or more instructions to program the processing unit to perform any of the functions described herein. The memory may also store one or more application programs and or Application Programming Interface API functions.

The computer may have one or more input devices and or output devices such as devices and illustrated in . These devices can be used among other things to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface include keyboards and pointing devices such as mice touch pads and digitizing tablets. As another example the input devices may include a microphone for capturing audio signals and the output devices may include a display screen for visually rendering and or a speaker for audibly rendering recognized text.

As shown in the computer may also include one or more network interfaces e.g. the network interface to enable communication via various networks e.g. the network . Examples of networks include a local area network or a wide area network such as an enterprise network or the Internet. Such networks may be based on any suitable technology and may operate according to any suitable protocol and may include wireless networks wired networks or fiber optic networks.

Having thus described several aspects of at least one embodiment of this invention it is to be appreciated that various alterations modifications and improvements will readily occur to those skilled in the art. Such alterations modifications and improvements are intended to be within the spirit and scope of the invention. Accordingly the foregoing description and drawings are by way of example only.

The above described embodiments of the present invention can be implemented in any of numerous ways. For example the embodiments may be implemented using hardware software or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

Also the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or programming or scripting tools and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine.

In this respect the invention may be embodied as a non transitory computer readable medium or multiple computer readable media e.g. a computer memory one or more floppy discs compact discs optical discs magnetic tapes flash memories circuit configurations in Field Programmable Gate Arrays or other semiconductor devices or other non transitory tangible computer storage medium encoded with one or more programs that when executed on one or more computers or other processors perform methods that implement the various embodiments of the invention discussed above. The computer readable medium or media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. Additionally it should be appreciated that according to one aspect of this embodiment one or more computer programs that when executed perform methods of the present invention need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Also data structures may be stored in computer readable media in any suitable form. For simplicity of illustration data structures may be shown to have fields that are related through location in the data structure. Such relationships may likewise be achieved by assigning storage for the fields with locations in a computer readable medium that conveys relationship between the fields. However any suitable mechanism may be used to establish a relationship between information in fields of a data structure including through the use of pointers tags or other mechanisms that establish relationship between data elements.

Various features and aspects of the present invention may be used alone in any combination of two or more or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example aspects described in one embodiment may be combined in any manner with aspects described in other embodiments.

Also the invention may be embodied as a method of which an example has been provided. The acts performed as part of the method may be ordered in any suitable way. Accordingly embodiments may be constructed in which acts are performed in an order different than illustrated which may include performing some acts simultaneously even though shown as sequential acts in illustrative embodiments.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

