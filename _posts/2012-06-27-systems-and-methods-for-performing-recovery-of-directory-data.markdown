---

title: Systems and methods for performing recovery of directory data
abstract: Systems and methods are disclosed for recovering data following a directory service malfunction, such as a forest-wide disaster in MicrosoftÂ® Active Directory. In certain examples, a single management console can be used for remotely recovering selected domain controllers in the forest without necessitating direct operator intervention. Multiple domain controllers can be concurrently restored from one or more backup files. Configurations of the system can advantageously eliminate manual intervention with each domain controller, thereby saving significant amounts of recovery time and effort. Also, certain systems and methods can be used to automatically and remotely quarantine corrupt domain controllers so that those individual domain controllers do not replicate with the newly restored environment, while allowing the domain controllers to remain online and in communication with the attached network. Certain disclosed methods further modify recovery procedures based at least in part on the type, and availability of, one or more DNS servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08688644&OS=08688644&RS=08688644
owner: Dell Software Inc.
number: 08688644
owner_city: Aliso Viejo
owner_country: US
publication_date: 20120627
---
This application is a continuation of U.S. patent application Ser. No. 11 951 008 now U.S. Pat. No. 8 234 253 filed on Dec. 5 2007. U.S. patent application Ser. No. 11 951 008 claims priority from U.S. Provisional Patent Application No. 60 873 621 filed on Dec. 6 2006. U.S. patent application Ser. No. 11 951 008 and U.S. Provisional Patent Application No. 60 873 621 are hereby incorporated herein by reference in their entirety.

Embodiments of the invention relate to disaster recovery of directory services and in particular to systems and methods for providing a full forest recovery of an Active Directory forest.

With today s increasing reliance on technology it is crucial for a modern business to maintain the availability of its network computer environment. Unplanned downtime caused by a disastrous event can severely disrupt the operation of and be extremely costly to a business. Such is especially true when dealing with disasters relating to directory services that manage information regarding various network resources and settings across a domain.

Disaster recovery which remains a major challenge in the software industry can address a wide variety of directory service malfunctions. For instance disasters related to Microsoft s Active Directory AD a distributed directory service system can be grouped into three general categories physical disasters granular disasters and corruption of the entire AD database.

Physical disasters generally involve the physical failure of one or more domain controllers in the AD system. Most of the AD service however remains operational. Granular disasters occur when some data within an AD database is deleted or inadvertently modified. Such granular disasters can occur frequently and be caused by for example human error e.g. an administrator accidentally deleting a number of user objects malicious activity viruses and or software failures. Granular disasters can often be remedied in a matter of minutes after the problem has been detected thereby limiting business losses.

On the other hand there is the possibility for a much greater logical disaster or corruption that can result in the entire AD forest becoming non functional. Such forest wide disasters necessitate recovery of the entire AD forest and often result in considerable user and system downtime and potentially very high business losses.

For example one current solution to forest wide disaster recovery in AD involves a manual time intensive process that requires restoration of a single domain controller from backup. The solution further involves physical isolation of each domain controller from others in the forest in order to rebuild the corrected forest environment one stage at a time. Such isolation however can present a considerable problem because it involves physical access to each domain controller which is not always possible. This solution also requires numerous manual steps repeated on each domain controller in the forest and results in a relatively slow and tedious recovery which is prone to human error. Moreover the physical isolation of domain controllers results in the domain controllers being offline e.g. disconnected from the network during the recovery process.

Given the aforementioned issues and challenges a significant need exists for devising and implementing systems and methods for facilitating the recovery of an entire AD forest following a forest wide disaster. For example a need exists for intelligent systems and methods for restoring an AD forest such that automation of forest recovery tasks can be executed from a single user friendly control console.

In view of the foregoing certain embodiments of the invention provide for systems and methods for recovering directory data while maintaining each of the domain controllers online and in communication with a central control system. For example recovery methods and systems disclosed herein are capable of electronically isolating domain controllers in a forest to prevent unwanted replication without disconnecting the domain controllers from the network such as when a domain controller is operating in the Directory Services Restore Mode DSRM . Such embodiments advantageously allow for the restoration of an AD forest from a centralized location thereby eliminating or substantially reducing the need to manually interface with each domain controller separately.

In certain embodiments of the invention a forest recovery software program utilizes a process that orchestrates the restoration procedures on all the domain controllers. Depending on the AD forest configuration the sequence of restoring the domain controllers can vary. Also the Domain Naming Services DNS configuration of the forest can influence the program execution flow. For example before performing certain parts of the recovery process it can be advantageous to wait until the domain controllers serving as DNS servers are fully restored.

In certain embodiments a computer executable method is disclosed for performing disaster recovery of directory data. The method comprises identifying computing devices associated with a first domain and communicatively coupled together through a network each of the computing devices storing a copy of a directory database. The method further includes receiving a selection of one of the computing devices to be recovered restoring a backup copy of the directory database to the selected computing device and remotely disabling replication to the restored directory database on the selected computing device without disconnecting the selected computing device from the network. The method also comprises recovering the remaining computing devices by restoring backup copies of the directory database to each of the remaining computing devices and re enabling replication to the restored directory database on the selected computing device.

In certain embodiments a system is disclosed for recovering data following a directory service malfunction. The system comprises recovery agent modules a recovery manager and a management console. Each recovery agent module is installed on a respective domain controller of a plurality of domain controllers communicatively coupled through a network in a first domain. The recovery manager module is installed on an application server and is in communication with each of the recovery agent modules the recovery manager module being located remotely with respect to at least one of the plurality of domain controllers. The management console is in communication with the recovery manager module and is configured to receive a selection of one of the plurality of domain controllers to be recovered. Furthermore the recovery manager module is configured to issue one or more control signals to the recovery agent module of the selected domain controller to restore a backup copy of a directory database to the selected domain controller and disable replication to the restored directory database on the selected domain controller without removing the selected domain controller from communication with the network.

In certain embodiments a system is disclosed for performing disaster recovery of directory data. The system comprises means for identifying computing devices associated with a first domain and communicatively coupled through a network each of the computing devices storing a copy of a directory database means for receiving a selection of one of the computing devices to be recovered means for restoring a backup copy of the directory database to the selected computing device means for remotely disabling replication to the restored directory database on the selected computing device without disconnecting the selected computing device from the network means for recovering the remaining computing devices by restoring backup copies of the directory database to each of the remaining computing devices and means for re enabling replication to the restored directory database on the selected computing device.

For purposes of summarizing the disclosure certain aspects advantages and novel features of the inventions have been described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment of the invention. Thus the invention may be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.

Embodiments of the invention disclosed herein are designed to address shortcomings of existing disaster recovery systems. In particular certain disclosed inventive systems and methods allow for the remote management and or automation of disaster recovery tasks in a Microsoft AD forest. Moreover certain embodiments provide for a single console for managing the recovery effort which enables a user to conduct domain controller selection progress tracking and or remote concurrent restoration of multiple domain controllers in a forest.

AD domain controllers each contain a replica of database data. One characteristic of AD is that generally each domain controller contains a writable copy of the database. This configuration introduces a need for replication to ensure that data is consistent between all domain controllers. Replication however can be a significant problem while trying to recover from a forest wide AD disaster. Because the disaster is forest wide it is possible that corrupted data has already spread across multiple or all domain controllers. This in turn leads to a potential problem that newly restored domain controllers can receive corrupted data again via the replication process.

Thus disasters in an AD forest can result in considerable user and system downtime and potentially very high business losses. Some examples of forest wide failures include 

In certain embodiments of the invention systems and methods are disclosed for restoring and recovering a Microsoft AD forest after a disaster. Certain embodiments of the invention also provide for automation of disaster recovery tasks in an AD environment. For example a single management console can be used for remotely recovering select or all domain controllers in the forest without necessitating direct operator intervention. Such a design allows for multiple domain controllers in a forest to be restored concurrently or substantially concurrently from a centralized location from one or more backup files. Such embodiments can advantageously eliminate the need to manually interface with each domain controller separately saving a significant amount of time and effort. Also such automation can expedite the overall recovery process reduce potential for human error and or substantially reduce user interaction with complex command line utilities.

In addition certain embodiments of the invention advantageously provide for backup selection capabilities to ensure that a consistent unaffected set of backups is chosen for all domains. Also embodiments of the invention provide assurance that affected copies of AD are properly quarantined such that corruption cannot propagate to a newly restored environment. That is in certain embodiments disclosed systems and methods can be used to automatically and remotely quarantine corrupt domain controllers so that those individual domain controllers do not replicate with the newly restored environment which allows the domain controllers to remain online.

The features of the systems and methods will now be described with reference to the drawings summarized above. Throughout the drawings reference numbers are re used to indicate correspondence between referenced elements. The drawings associated descriptions and specific implementation are provided to illustrate embodiments of the inventions and not to limit the scope of the disclosure.

In addition methods and processes described herein are not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state.

The main physical component of AD is the domain controller which is a computing device where the AD database resides. Because AD is a distributed directory service there are typically multiple domain controllers that contain a copy of the AD database. One or more domain controllers can be grouped together in a domain which represents a logical collection of objects such as user accounts groups computers and other resources. An AD forest represents a collection of one or more domains.

The illustrated recovery system comprises a plurality of computing devices communicatively coupled through a network. In particular the recovery system includes a forest having a plurality of domain controllers and for maintaining and executing a directory service. As shown domain controllers and are part of a first domain in the forest while domain controllers and make up a second domain . Although not specifically depicted in one or more of the domain controllers in the forest can be configured to communicate with any of the other domain controllers in the forest.

The recovery system also comprises an application server which includes a recovery manager . In certain embodiments the recovery manager is configured to coordinate and or control recovery of the forest of domain controllers in response to a forest wide disaster. For instance the recovery manager can execute one or more methods disclosed herein to perform remote and or centralized recovery of multiple domain controllers.

As shown the recovery manager communicates with recovery agents and installed on the respective domain controllers . The recovery agents in certain embodiments comprise software modules programmed to recover a particular domain controller. For instance the recovery agents can be configured to locate one or more backups associated with the corresponding domain controller. In yet other embodiments the recovery agents and or separate backup agents can also direct the backup of the appropriate domain controller during normal operation and or record appropriate information on such backups e.g. time and or location of backup . In certain embodiments the recovery agents must be installed on the respective domain controllers prior to a disaster in order for the recovery system to recover the particular domain controllers.

The recovery system also includes a management console which provides a user interface for directing a disaster recovery process and or for observing the progress or state of the system during recovery. In certain embodiments the user interface contains a list of domain controllers and associated settings such as for example the credentials that the recovery manager uses to access the domain controllers pertinent backups the status of recovery combinations of the same or the like. In certain embodiments the management console comprises a workstation a server a personal computer a software application combinations of the same or the like.

Although the management console is illustrated as being separate from the application server it will be understood that the management console can be integrated with the recovery manager and or the application server . For example the management console can comprise a snap in module of the application server .

The recovery method begins with Block by generating initial forest recovery data. In certain embodiments such a process includes preparing a list of the domain controllers to be restored. The process can also include generating a series of passwords such as for example 1 the krbtgt account password i.e. an account and password that form part of the Kerberos authentication process implemented in AD to allow domain controllers to securely authenticate communicate and or replicate data with each other 2 the computer account password and or 3 the trust password i.e. the password that allows one AD domain to share information and resources with another AD domain .

In certain embodiments generating the recovery data includes creating a topology map of the AD forest. Such a map can specify pertinent details about domain controllers in the forest such as for example the domain controller names Flexible Single Master Operation FSMO roles and backup status trust relationships combinations of the same and the like.

Following Block the recovery method performs an initial restore process Block . In certain embodiments the initial restore process is substantially the same for all domain controllers in a forest and generally comprises restoring the AD database from backup. For example in certain embodiments the initial restore process for multiple domain controllers can advantageously be performed in parallel to expedite recovery speed. Moreover multiple domain controllers can each be restored from different backups taken at similar points in time followed by a reconciliation of the databases. In other embodiments multiple domain controllers can be restored from the same backup or copies thereof. Additional details with respect to the initial restore process are described herein with reference to .

Next at Block the recovery method performs a final restore process. The final restore process generally involves one or more actions that may or may not require that certain domain controllers already be restored. For instance the final restore process ensures that restored domain controllers do not replicate with corrupt domain controllers when replication is enabled between domain controllers. Moreover the final restore process can include performance of tasks following the loading of an AD database backup onto the domain controller. Additional details with respect to the initial restore process are described herein with reference to .

Finally the recovery process promotes additional domain controllers Block . Promotion of additional domain controllers in certain embodiments involves two main steps. First the recovery process identifies one or more domain controllers that were not or could not be restored from backup and uninstalls AD from those domain controllers i.e. demotion of the domain controller . The second step involves reinstalling AD on the domain controllers. In other embodiments Block further includes promoting new domain controllers that were not originally part of the AD at the time of the disaster.

Although the recovery process has been described with reference to particular embodiments additional states or acts may be performed in other embodiments of the invention. For example following the final restore process of a domain controller one or more of the following tasks can be performed i enabling the domain controller as a global catalog if the domain controller was a global catalog before the restoration procedure and ii clean up of directory metadata associated with domain controllers that were not restored during the forest recovery restoration procedure or for which restoration failed.

The initial restore process begins with Block by verifying that a recovery agent e.g. one of recovery agents exists on each target domain controller to be restored. At Block the initial restore process reloads the target domain controllers into the DSRM mode which causes the AD database Ntds.dit to go offline.

At Block the initial restore process restores for each domain controller the AD database from a backup file. In order to obtain a good or trusted backup in certain embodiments a backup file is advantageously selected that was taken a certain amount of time e.g. a few days before the disaster. For instance in selecting an appropriate backup a balance may need to be made between the recentness of the backup and the reliability of the restored data. In many situations restoring the domain controller can involve the loss of certain AD data including but not limited to the following actions occurring after the time of the backup addition of new objects updates made to existing objects or changes made to the configuration partition or the schema partition in AD.

At Block the initial restore process disables replication by the domain controllers such that communication between domain controllers is temporarily halted while the domain controllers remain online. In certain embodiments commands for disabling replication are issued from a single location remote from the domain controllers. This is especially advantageous in an environment in which several e.g. hundreds of domain controllers in an AD forest are located across a large geographic area.

At Block the target domain controllers are reloaded into normal mode. At the end of the process a notification is transmitted e.g. to the recovery manager that indicates the completion of the initial restore process . For instance in certain embodiments the recovery agent for each domain controller notifies the recovery manager when the respective domain controller has been restored.

Although the initial restore process has been described with reference to particular embodiments it will be apparent from the disclosure herein that alternative embodiments of the process can be performed. For instance in certain embodiments the domain controller can be physically quarantined to prevent communication such as by unplugging the domain controller s network cable or the like.

The final restore process begins with Block by disabling the global catalogs in the AD forest. Although typical domain controllers contain information only on objects that exist in the same domain certain domain controllers store a global catalog that serves as a special copy of the AD database that contains information on objects that exist in the multiple domains of the AD forest. Disabling the global catalog results in a domain controller losing partial replicas or partitions and or prevents the occurrence of lingering objects. Also when the global catalogs are disabled the Administrator account is the only account that can be used to log on to a domain controller.

At Block the final restore process includes raising the relative identifier RID pool a particular amount. In general the RID pool is retained on a domain controller responsible for assigning a unique identifier or security identifier e.g. a numeric value for every object e.g. user group computer that is created in a particular domain. In order to avoid duplication of identifiers following recovery such as may be caused when identifiers are issued to objects between the time of the latest backup and the time of the recovery the current value of the RID pool is increased by a large number e.g. by 100 000 .

At Block the final restore process includes resetting passwords in order to further isolate the domain controllers from replication partners. For instance in certain embodiments Block is performed prior to re enabling replication which was disabled in Block of the initial restore process so that only recovered domain controllers can communicate with one another in the new AD environment. Such passwords can include for example computer account passwords in AD local computer account passwords trusts passwords krbtgt passwords combinations of the same and the like. In certain embodiments one or more of the passwords is reset twice so as to remove any original pre disaster password from the password history.

After resetting the passwords the final restore process terminates at Block by transmitting a notification that the process is complete. For instance in certain embodiments the recovery agent for each domain controller notifies the recovery manager when the final restore process is complete. This block can also include for example re enabling replication between two or more domain controllers of the AD forest.

Although the initial restore process of and the final restore process of have been described as separate processes in other embodiments blocks or states described in these two process can be performed substantially concurrently performed in a different order and or optionally removed. For instance in certain embodiments the reloading of a domain controller into its normal mode Block can be performed during the final restore process e.g. following the resetting of passwords in Block .

Moreover because the domain controller remains online and functioning the isolation process can be performed remotely rather than requiring an individual to manually and physically isolate the domain controller by disconnecting the domain controller from the network e.g. by unplugging a network cable . Such an automated process helps alleviate concerns that can arise in the manual process e.g. confidence that every domain controller in a forest has been physically turned off .

In addition unlike conventional methods of disabling replication the isolation process presumes that AD is not actively running on the domain controller. As a result the isolation process can be advantageously used in a forest recovery scenario because the isolation process can ensure directory data will not be replicated before the domain controller is restored to its desired state.

The isolation process begins at Block by verifying that the particular domain controller to be isolated is in the DSRM mode. This mode ensures that the AD database is not running on the particular domain controller. Once the domain controller is loaded in the DSRM mode and restored from backup the isolation process proceeds to electronically quarantine the domain controller.

For example the AD database resides in a physical file ntds.dit in an extensible storage engine ESE database. In order to disable AD replication when the AD service is not running the isolation process calls the ESE application programming interface API Block . The ESE API is then used to set particular attributes of the NTDS Settings object to disable replication for the particular domain controller. In certain embodiments the attributes of the NTDS Settings object include data representing how the domain controller is identified with respect to its replication partners the naming contexts that are maintained on the domain controller whether or not the domain controller is a global catalog server and or a default query policy.

In particular the NTDS Settings object includes an options attribute wherein bits 2 and 4 are flags for inbound and outbound replication. Thus in certain embodiments isolation of the domain controller is achieved via setting the bit flags in this options attribute using the ESE API. In this manner replication will not take place when the domain controller is rebooted into a normal operational mode e.g. when AD is running .

Although the isolation process has been described with reference to particular embodiments other means and or methods can be used to electronically disable replication while a domain controller remains online. For example the isolation process can configure a firewall module to filter out certain types of data and or cut replication traffic to and or from a domain controller. In other embodiments the internet protocol security IPsec can be configured to limit and or prevent communication between domain controllers in a domain or forest.

In yet other embodiments the isolation process can temporarily disable network adapters or utilize a customized driver to intercept replication traffic. In yet other embodiments the isolation process can temporarily remove replication links and disable the knowledge consistency checker KCC or other like module that generates and maintains the domain or forest replication topology.

DNS availability in certain circumstances can be critical to AD functionality and communication between computing devices in AD. In certain embodiments two types of DNS servers exist with respect to an AD forest external and internal DNS servers. An external DNS server is supplied by a user and is not located on any forest domain controllers. An internal DNS server on the other hand is located on one of the forest domain controllers.

As illustrated the restoration process begins by performing an initial restore process on one or more domain controllers Block . For instance this block can include restoring backup files to one or more selected domain controllers. As discussed above in certain embodiments the initial restore process can comprise one or more acts described with reference to Block of the recovery method and or the initial restore process of .

At Block prior to continuing with final restoration actions see e.g. the final restore process of the restoration process determines if the DNS server used by the subject domain controller s has already been restored. For example the restoration process can check the IP address of each of the already restored domain controllers to determine if the IP address of the restored domain controller matches that of the appropriate DNS server.

If the appropriate DNS server has been restored the restoration process continues with the final restore process on the domain controller Block . However if the DNS server has not yet been restored the restoration process proceeds with Block to determine if the DNS server used by the subject domain controller has failed. If the DNS server has failed the restoration process reconfigures the subject domain controller to use another DNS server Block . After reconfiguring the domain controller the restoration process returns to Block to determine if the other DNS server has been restored.

If at Block the DNS server used by the subject domain controller has not failed the restoration process proceeds with Block to determine if the DNS server is external to the forest. If the DNS server is external the restoration process proceeds with Block .

If the DNS controller is hosted internally the restoration process waits for availability of the internal DNS server Block and restoration of the DNS server Block before proceeding with the final restore process of the subject domain controller s . Once the internal DNS server is restored the restoration process proceeds with Block .

Following Block the restoration process transmits a notification that the final restore process has been completed Block . For instance in certain embodiments the recovery agent for each domain controller notifies the recovery manager when the final restore process is complete.

In certain embodiments of the invention the restoration process and the isolation process are performed substantially concurrently to recover an AD forest. For instance during Blocks the domain controller s can be electronically isolated to prevent replication see . In particular as discussed in more detail above replication can be disabled through the NTDS Settings object during or following Block and re enabled during or following Block .

In particular illustrates a screen display of a new forest recovery report having a plurality of sections. A command menu allows a user to manage a plurality of aspects of a recovery project. For instance the command menu can provide a user with options to open save finalize abort or close a recovery project execute a recovery project in a test mode view a report on the current recovery or test operation combinations of the same or the like.

A project summary section summarizes information about the forest to be recovered. For example the project summary section identifies the forest to be recovered i.e. dom1.forest1 and the number of domains and or domain controllers to be processed.

A project settings section provides a list of domain controllers in the subject forest. The list can comprise information such as for example a domain controller DNS name a recover command option a name of the domain and or site to which the domain controller belongs date s and time s of backups combinations of the same or the like. In certain embodiments the project settings section can include a plurality of views e.g. plain view domain view site view for organizing the domain controller information.

A recovery settings section comprises an information pane for a domain controller selected from the project settings section . In particular the recovery settings section allows a user to specify recovery settings applied to the selected domain controller. For instance a user can specify logon information view or modify DNS settings select backups or the like.

The third forest recovery report also includes a recovery progress section that displays the progress or test process for a domain controller selected from the project settings section . In particular the recovery progress section lists different recovery actions and their respective times for the domain controller dom1 dc9.dom1.forest1. 

Each of the processes components and algorithms described above may be embodied in and fully automated by code modules executed by one or more computers or computer processors. The code modules may be stored on any type of computer readable medium or computer storage device. The processes and algorithms may also be implemented partially or wholly in application specific circuitry. The results of the disclosed processes and process steps may be stored persistently or otherwise in any type of computer storage. In one embodiment the code modules may advantageously be configured to execute on one or more processors. In addition the code modules may comprise but are not limited to any of the following software or hardware components such as software object oriented software components class components and task components processes methods functions attributes procedures subroutines segments of program code drivers firmware microcode circuitry data databases data structures tables arrays variables or the like.

While certain embodiments of the inventions have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the disclosure. For example the description of Microsoft Active Directory service relates only to a description of some embodiments of the invention. Other embodiments of the system may be directed to non Microsoft directory services. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the disclosure. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the disclosure.

