---

title: Autocomplete searching with security filtering and ranking
abstract: A system that provides secure autocomplete searching receives an autocomplete query from a user, the autocomplete query including a prefix of a search phrase, and retrieves security information of the user. The system searches one or more prefix indexes to find a set of matching objects, where the matching objects each include associated object security information. The system excludes matching objects that the user is not authorized to access from the set of matching objects based on the object security information and the user security information. The system then returns the set of matching objects to the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09613165&OS=09613165&RS=09613165
owner: ORACLE INTERNATIONAL CORPORATION
number: 09613165
owner_city: Redwood Shores
owner_country: US
publication_date: 20121113
---
One embodiment is directed generally to computer based text searching and in particular to computer based text searching that includes autocomplete.

Autocomplete and instant search have become increasingly common with text entry and online search engines. Autocomplete is a computerized scheme for predicting and providing a complete word or search phrase that a user wants to type based on a few letters of the word or phrases that are typed in by the user. Autocomplete functionality is commonly implemented in web browsers e mail programs search engine interfaces source code editors database query tools word processors command line interpreters etc. Instant search refers to a computerized scheme for displaying search results of a search phrase while the user types the search phrase.

Online search services often offer both autocomplete and instant search functionalities. Autocomplete and instant search are often used together and online search services strive to more quickly provide more accurate autocomplete suggestions and instant search results. Autocomplete and instant search in general are considered instant because they provide responses after each entered character.

One embodiment is a system that provides secure autocomplete searching. The system receives an autocomplete query from a user the autocomplete query including a prefix of a search phrase and retrieves security information of the user. The system searches one or more prefix indexes to find a set of matching objects where the matching objects each include associated object security information. The system excludes matching objects that the user is not authorized to access from the set of matching objects based on the object security information and the user security information. The system then returns the set of matching objects to the user.

One embodiment provides secure autocomplete services. When one or more letters of a complete search phrase are received from a user indexes are searched to find objects that match the letters. Then the matching objects are checked to see if they include a secured object that the user is not authorized to see. If such secured object is included in the matching objects the secured object is excluded from the matching objects which are then returned to the user. Therefore it is possible to provide autocomplete services to the user without revealing any sensitive information that the user is not authorized to see.

System further includes a communication device such as a network interface card to provide access to a network. Therefore a user may interface with system directly or remotely through a network or any other method.

Processor may be further coupled via bus to a display e.g. a Liquid Crystal Display LCD etc. for displaying information to the user. A keyboard and a cursor control device e.g. computer mouse is further coupled to bus to enable the user to interface with system .

In one embodiment local storage stores software modules that can provide functionality when executed by processor . The modules include an operating system OS that can provide OS functionality for system . The modules also include modules related to secure autocomplete instant search functionality including secure autocomplete module one or more autocomplete indexes and security information as disclosed in more detail below. System can be part of a larger system such as a computer network system shown in . System can include one or more additional functional modules to include additional functionality such as enterprise resource planning ERP applications. System can be connected to database that provide centralized storage for the content of autocomplete indexes and security information to carry out secure autocomplete services which are described below in detail. Database may be local to system or accessed through a network.

According to an embodiment central server web server and or any of the UEs shown in are implemented with at least a portion of computer system shown in . Some elements of system may not be included or needed in some embodiments. For example a server will likely not need and may not have a cursor control device keyboard or display or any other elements that are more suited for an end user. As noted above local storage of system for web server stores one or more autocomplete indexes . In an embodiment each of autocomplete indexes is implemented with a ternary search tree TST which has a specialized structure for storing character strings to enable rapid searching by prefix and to facilitate the rapid searching indexes are stored and maintained in high speed memory such as RAM rather than slower memory such as disks. A TST is a ternary tree where the nodes are in order with respect to the search keys. A TST has at most three children per parent node. If the search keys are strings each node stores a single character and searching for a string consists of a series of ternary searches one for each character in the string with specific rules. To query a search phrase a prefix of the search phrase is walked through the nodes. Once the end of the search prefix node is found all of the nodes below the search prefix node are returned.

The TST can be used to index the content or metadata associated with searchable objects in the system. The TST may contain multiple entries for each such object e.g. first name last name . Each entry corresponds to a searchable string and contains directly or by reference additional object meta data which can be returned when the entry is matched e.g. icon description etc. . Since the TST may contain more than one entry for the same system object one embodiment externalizes the object metadata in a separate in memory data structure to optimize searching. In this case each TST end node contains a reference to an entry in the object metadata list.

As shown in in an embodiment of the present invention secure autocomplete module includes a number of modules for secure autocomplete instant search functionality depending on whether module is located on a web server the central server or a UE. For example central server includes autocomplete engine autocomplete provider and rankings autocomplete provider . Any of web servers or include autocomplete instant search query API user security info provider and autocomplete Representational State Transfer REST API . Also each index is comprised of a TST and is stored locally on the web server after being generated by the central server.

Autocomplete engine runs pluggable providers which convert raw data into autocomplete data used to create indexes . Autocomplete provider queries a search engine and indexes for object information including security metadata and rank that is provided into the indexes. In one embodiment the search engine is an enterprise search engine for searching enterprise data such as ERP data that includes secure data and documents. Secure data and documents are data and documents that should only be shown to users authorized to view the data such as users on an access control list that may be based on the role of the user. Rankings autocomplete provider queries databases including a ranking database for information that is not stored in the search engine such as search phrases. The ranking database gathers data from a variety of sources and runs calculations on the gathered data to determine the importance of objects documents people etc. .

Autocomplete instant search query API is used to retrieve results from TST . Autocomplete instant search query API also handles ordering results by rank and security filtering. Upon starting up or being instructed to reload autocomplete instant search query API loads indexes from the results generated by autocomplete engine . In one embodiment indexes are loaded it into the local memory space of the web server. Indexes are constructed as relatively small indexes with the most relevant content in order to make maximal use of high speed storage i.e. RAM of the web server as opposed to search structures in slower speed storage as is done by traditional search engines. User security info provider retrieves security information for the current user to be used in filtering query results. REST API provides access to autocomplete query API from user interface UI components e.g. AJAX UI etc. of user equipment e.g. UE . Autocomplete REST API is exposed from each consuming application. TST implements indexes stored in local storage . TST is produced by engine and is queried for search results including results filtered by rank and security.

The user equipment e.g. UE implements an autocomplete search box UI autocomplete UI REST integration etc. In an embodiment autocomplete search box UI is an AJAX JavaScript widget that is integrated into a client application and customized to display autocomplete instant search results. In an embodiment autocomplete search box UI uses an external UI component. Autocomplete UI REST integration allows a browser of UE to call autocomplete REST API and format the results for use in autocomplete search box UI .

Referring again to in one embodiment the TST index is constructed generated by autocomplete engine and stored in central server and then retrieved by each web server when completed. Each web server will check if a new index is ready by for example checking for a ready flag and then loads the new index in its local memory. The TST will be persisted to the database as a binary large object BLOB once it is prepared by autocomplete engine . Autocomplete query API will load the TST into the local memory space of the web server from the database on initialization. The TST needs to be reloaded into local memory every time the TST is reconstructed and persisted in the database. In one embodiment the TST will be persisted with timestamp information. Autocomplete provider will compare the timestamp of the in memory tree to the database periodically to determine if the TST needs to be refreshed. Therefore embodiments of the present invention build the index in one server side process by calling a registered set of providers and accesses it in a different server side process i.e. the web server .

In operation autocomplete provider pulls event data and ranks into TST and then outputs the event data and ranks to database as a BLOB. Autocomplete instant search query API is then initialized and pulls in the BLOB from database and converts the BLOB into in memory TST . Autocomplete search box UI and autocomplete UI REST integration are initialized in response to user actions and in response to text entries starts querying autocomplete REST API which calls autocomplete instant search query API for autocomplete and instant search matches. Autocomplete instant search query API searches for the typed letter in TST and returns possible completions and instant search results. Autocomplete query instant search API orders the possible completions and instant search results by rank and filters for security and or scope. Autocomplete REST API decorates the results with appropriate data and links for the consuming application if necessary. The user then selects an autocomplete or instant search suggestion which either runs the search on the selected string takes the user to the object page fills out a form field or executes an additional command depending on the UI integration.

In an embodiment secure autocomplete module and indexes use externally calculated relevance ranking and static activity based ranks to return the most important results. When a result is stored as a node in index the node contains the static activity based rank for the result. When the index for the result is queried the query algorithm first locates the node for the query prefix and then creates a list of all possible result nodes stored under the query prefix node. This list is then sorted by static activity based ranks and the result nodes with the highest rank are returned as the results. Also secure autocomplete module can use static activity based ranks to preferentially use high ranking results when building indexes that are limited in size. When a result is stored as a node in an index that node contains the static activity based rank for the result. Activity ranks can be determined using known activity ranks methods for example as disclosed in U.S. Pat. Pub. No. 2008 0016052 entitled Using Connections Between Users and Documents to Rank Documents in an Enterprise Search System or U.S. Pat. Pub. No. 2011 0087644 entitled Enterprise Node Rank Engine . Because the rank is stored in the end node embodiments use the ranks after the search is complete for sorting purposes etc.

In one embodiment when an index reaches a predetermined maximum memory limit additional results are added to the index only when the additional results can replace the existing lower ranked results in the index. This can be accomplished by searching the index for low ranking results maintaining a list of the lowest ranked results or by maintaining a metadata list external to the index that is sorted or indexed by rank. Also indexes are configured to have an adjustable maximum size limit in order to keep indexes from using up too much storage space of local storage . When this limit is reached autocomplete engine starts ignoring lower ranked results in favor of higher ranked results when indexes are being built which is referred to as pruning. 

Although elements and are all shown in as part of a single secure autocomplete module in other embodiments each of these elements can be separated from the other elements and executed by separate computers servers than the other elements. For example in one embodiment Autocomplete Engine Autocomplete Provider and Rankings Autocomplete Provider are part of a separate module such as a Secure Autocomplete Engine Module and are executed on a different server than the remaining elements of module . In this embodiment Secure Autocomplete Engine Module runs on the separate server e.g. central server of and generates the indexes which are then pushed out to the web servers e.g. web servers and of .

At web server receives an autocomplete query from a user of UE . The user can send an autocomplete query by typing one or more letters and or characters which is referred to as a prefix of a search phrase on a web browser.

In one embodiment objects are stored in autocomplete indexes with a list of security information stored under a security key. The security information can be in the form of access control lists acl in an enterprise system. For example a security key doc acl admin moderator Vicki indicates roles e.g. admin and moderator and a user e.g. Vicki that have permission to view the particular object. Objects may have multiple security keys. In one embodiment where the searching is done within an enterprise system the matching objects may include one or more objects that the particular user is not authorized to see which is referred to as secured objects. To prevent a secured object from being returned to the user autocomplete module runs a security check on each matching object to determine whether the user is authorized to see the particular matching object. Therefore at user security info provider retrieves security information e.g. acl of the user.

At secure autocomplete module searches indexes to find indexes that contain matching objects with security information. As noted above the objects can be autocomplete phrases for online searches. The objects can also be topics documents people appointments etc. In an embodiment the objects of different categories are stored in different indexes to enable a scoped search as described in detail below.

At user security information is matched to object security information to exclude objects whose security attributes do not match the user security information. For example only objects that have security information that indicate that the object is accessible by the user will be retained and the remaining unmatched objects are excluded from the set of matched objects at from the index search.

At the objects from are optionally ranked. As disclosed above in one embodiment static activity based ranking is used to rank the results

At the matching objects are returned to the user as suggestions for autocomplete or instant search. The matching objects can be ranked and exclude security mismatches i.e. objects that have security information that does not match the user s security information . Therefore according to embodiments of the present invention it is possible to provide autocomplete suggestions to users without revealing any non authorized information for that user.

In an embodiment an object s security attribute is stored as a security key. For example a security key doc acl admin Vicki indicates the user s roles that can fulfill the document access control list security check. If an object s security key contains no data the object is treated as having public visibility. If a user s security key contains no data the user is only allowed to see objects that have public visibility. If both security keys of a user and an object have lists there may be at least one match between both lists. For example an object s security key admin Vicki matches a user s security key Vicki moderator . If an object has multiple security keys the value list for each security key may have a match for a user to see the object i.e. must have matches for both container id and acl security keys . Matches between values in the two lists are configurable to be exact or prefix matches e.g. vicki matches vicki vs. vicki matches vicki the great .

According to an embodiment secure autocomplete module can also be configured to provide scoped instant search. For example objects are stored in indexes with a list of scope metadata information which can be stored as key value pairs. For example a key value pair folder my folder your folder specifies that the object is stored in the listed path. An object can have multiple scope metadata pairs. When a user queries for scoped objects the API passes in a list of scope metadata key value pairs. For each possible matching object the query runs a scope check. If an object does not have all of the scope metadata values specified in the query the object will not be returned. Matches between the query and object values are configurable to be exact or prefix matches e.g. my folder matches my folder vs. my folder matches my folder your folder .

Indexes use a small amount of memory per result. However instant search results can use more memory especially if search results are secured or setup for scoped instant search. In order to keep in memory indexes from using up too much memory indexes can have a configurable maximum size limit. When this limit is reached secure autocomplete module starts ignoring lower ranked results in favor of higher ranked ones when building autocomplete indexes which is referred to as pruning. 

At static activity based ranks are optionally used to prune low ranking results from the ternary search tree to limit the index size.

At the new indexes are retrieved by the web servers that provide search function to the client computers such as web servers and of .

At each web server stores the new TST indexes in high speed memory such as RAM. The indexes provide search functionality for the client computers such as query results while remaining in the high speed memory.

In one embodiment scoped search can be implemented by passing in metadata as disclosed above. In another embodiment scoped search can be achieved by searching separate indexes. For example a bottom portion of menu shows scoped search results. More specifically the search prefix ge is used to find objects in different indexes for example Topic index Document index and People index. The matching objects from each index are displayed next to topics documents and people headers. When a user clicks the header a full text scoped search can be performed on the corresponding index only. Non name attributes e.g. tags only appear if they match the search phrase. Items containing tags that the user added appears at the top of their categories if the tags match the search phrase entered by the user.

Therefore according to the present application an index is implemented with a ternary search tree and stored in a local storage. Also security attributes which can be stored in result nodes of a ternary search tree are used to return only the objects that a particular user is authorized to see. Further autocomplete suggestions and instant results are ordered based on static activity based ranks which can also be used to prune low ranking results from the ternary search tree to limit the index size.

Further an off line process on a remote server is implemented which calls registered providers to gather the data to be indexed builds the data structure and serializes it to a database. Applications then query the database periodically to see when a new index is ready. When one is ready the application loads the TST into local memory. Security attributes are stored in the result nodes of the TST and are used to return only the results the end user is authorized to see. Static activity based ranks are incorporated into the ordering of search suggestions and instant search results. Static ranks are used to prune low ranking results from the tree when the amount of memory the indexes can use is limited.

Several embodiments are specifically illustrated and or described herein. However it will be appreciated that modifications and variations of the disclosed embodiments are covered by the above teaching and within the purview of the appended claims without departing from the spirit and intended scope of the invention.

