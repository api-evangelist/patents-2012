---

title: Authenticating third-party programs for platforms
abstract: In one example, a platform device includes a control unit configured to receive a first software package signed by a first software development entity with a first certificate of a first certificate hierarchy associated with the first software development entity, execute the first software package only after determining that a root of the first certificate hierarchy corresponds to a certificate authority of a developer of the platform device, receive a second software package signed by a second software development entity with a second certificate of a second certificate hierarchy associated with the second software development entity, wherein the second certificate hierarchy is different than the first certificate hierarchy, and execute the second software package only after determining that a root of the second certificate hierarchy corresponds to the certificate authority of the developer of the platform device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08954732&OS=08954732&RS=08954732
owner: Juniper Networks, Inc.
number: 08954732
owner_city: Sunnyvale
owner_country: US
publication_date: 20120627
---
This disclosure relates to authenticating software as originating from a trusted source and in particular to techniques for managing authentication credentials.

In general computer based devices include hardware elements and software elements. The hardware elements and certain software elements may be collectively referred to as a platform and include elements such as processors memory interfaces such as network interfaces and display interfaces and other such hardware elements as well as certain software elements such as an operating system. The software elements are used to cause the hardware elements to perform various functions. In some cases separate entities create a platform and software for the platform. For example an entity that creates a platform referred to as a platform developer or a platform producer may provide a software development kit SDK to entities that develop software for that platform. The entities that develop the software may further distribute the software to customers who purchase the platform and the software.

In some cases the entity that created the platform may require that software developed by third parties be authenticated prior to being executed by the platform. Digital signatures and digital certificates are two mechanisms commonly used for purposes of authentication and verification within a computing environment. A digital signature is a processed version of a message that has been signed using encryption and decryption techniques including the use of a private key of a sending device. To verify the digital signature a receiving device applies a public key of the sending device. The receiving device may retrieve the public key directly from the sending device in the form of a certificate or from a trusted third party. A digital signature created with the private key of a mutually trusted third party that is a certification authority ensures the integrity of the sending device s certificate.

In this manner customers who purchase and deploy the platform can be assured that they are utilizing software from a legitimate source. Typically the platform will be designed to ensure that software is signed by a trusted entity before installing and executing the software. The platform may for example authenticate the software using a chain of trust leading up to the certificate authority associated with the platform producer. That is all software that is to be executed on the platform must conform to this requirement that the software can be authenticated up through the chain of trust back to a certificate authority for the platform producer. To accelerate authentication a platform often maintains an internal trust store that lists the certification authorities trusted by the platform. For example a platform may utilize the internal trust store to authenticate a software package prior to installing the software package to ensure that the software package originates from a trustworthy source and has not been altered.

Certain conventional techniques for signing software include issuing a certificate including a code signing key from the certificate authority of the platform provider to each software developer. Actors within the software development entity i.e. the third party software developer sometimes freely share the code signing key using the shared certificate to sign software created for the platform. Allowing a code signing key to be shared among different actors however is a violation of security best practices.

Other conventional techniques include having the platform producer or a certificate authority associated with the platform producer issue multiple code signing keys to the software developer one for each actor within the 3party software develop. However these techniques place a heavy burden on the certificate authority. Moreover certificate authorities often charge for the service of issuing a certificate meaning that these techniques lead to increased costs for the software developer.

Still other conventional techniques include the platform developer setting up and maintaining a local signing server on site within the software developer s enterprise. That is a single certificate may be issued to the software developer which may set up a dedicated server for signing software using that certificate. However in order to satisfy security best practices such a server should be a stand alone machine that is dedicated only to the task of signing software with the certificate which can lead to increased capital expenses. Likewise the server must be maintained which can lead to increased operational expenses.

Yet other conventional techniques include sending the software to a remote signing server such as a server managed by the platform producer. However these techniques may consume a tremendous amount of bandwidth in that the entire software package may need to be transmitted to the remote signing server repeatedly throughout the software development cycle. When network throughput is not high enough this may also lead to increases in latency. Moreover these techniques may be vulnerable to entropy attacks initiated by malicious users which may be used to maliciously obtain the private key.

In general this disclosure describes techniques for simply and efficiently authenticating software developed by a third party for a platform. In general it is assumed that the platform producer requires that the software be authenticated e.g. signed using a certificate in order to run on the platform. In accordance with the techniques of this disclosure a software development entity for a platform receives a certificate from an entity that developed the platform. Using this certificate the software development entity develops their own certificate infrastructure allowing individual actors to generate their own private keys and request certificate signing for those keys.

For example the software development entity may be structured as a set of departments each of the departments including individual actors. The certificate from the platform producer can be used to sign department level certificates granting those certificates the ability to sign sub certificates. However the sub certificates may be prevented from signing further certificates. The department level certificates can be set to expire after a relatively long time while actor level certificates can be set to expire after a relatively short time. Different software development entities can set up individual certificate authority hierarchies that are appropriate for the respective software development entities.

In this manner the techniques of this disclosure avoid key sharing among various entities which preserves security best practices. Moreover these techniques can be used to construct a chain of trust from the platform producer to a software development entity and all the way down to individual actors within the software development entity. Thus individual actors can sign their own work product assuming those actors are trusted and provided with a valid certificate. Accordingly the work product e.g. software modules object code executable files or the like can be signed as authentic without needing to be transmitted over a network and without the use of a dedicated signing server device. Therefore these techniques can be used to efficiently authenticate third party software for a platform without incurring significant expenses.

In one example a method includes receiving by a platform device a first software package signed by a first software development entity with a first certificate of a first certificate hierarchy associated with the first software development entity wherein the first certificate hierarchy conforms to a first hierarchical structure of the first software entity executing by a control unit of the platform device the first software package only after determining that a root of the first certificate hierarchy corresponds to a certificate authority of a developer of the platform device receiving by the platform device a second software package signed by a second software development entity with a second certificate of a second certificate hierarchy associated with the second software development entity wherein the second certificate hierarchy conforms to a second hierarchical structure of the second software entity and wherein the second certificate hierarchy is different than the first certificate hierarchy and executing by the control unit of the platform device the second software package only after determining that a root of the second certificate hierarchy corresponds to the certificate authority of the developer of the platform device.

In another example a platform device includes a control unit configured to receive a first software package signed by a first software development entity with a first certificate of a first certificate hierarchy associated with the first software development entity wherein the first certificate hierarchy conforms to a first hierarchical structure of the first software entity execute the first software package only after determining that a root of the first certificate hierarchy corresponds to a certificate authority of a developer of the platform device receive a second software package signed by a second software development entity with a second certificate of a second certificate hierarchy associated with the second software development entity wherein the second certificate hierarchy conforms to a second hierarchical structure of the second software entity and wherein the second certificate hierarchy is different than the first certificate hierarchy and execute the second software package only after determining that a root of the second certificate hierarchy corresponds to the certificate authority of the developer of the platform device.

In another example a computer readable storage medium includes e.g. is encoded with instructions that upon execution cause a processor to receive a first software package signed by a first software development entity with a first certificate of a first certificate hierarchy associated with the first software development entity wherein the first certificate hierarchy conforms to a first hierarchical structure of the first software entity execute the first software package only after determining that a root of the first certificate hierarchy corresponds to a certificate authority of a developer of the platform device receive a second software package signed by a second software development entity with a second certificate of a second certificate hierarchy associated with the second software development entity wherein the second certificate hierarchy conforms to a second hierarchical structure of the second software entity and wherein the second certificate hierarchy is different than the first certificate hierarchy and execute the second software package only after determining that a root of the second certificate hierarchy corresponds to the certificate authority of the developer of the platform device.

In another example a method includes receiving a certificate from a certificate authority associated with a developer of a type of platform device constructing a certificate hierarchy including a plurality of hierarchically arranged certificates including as a root of the certificate hierarchy the certificate from the certificate authority associated with the developer of the platform device signing data of a software package developed for the type of platform device using one or more certificates of the certificate hierarchy and providing the signed software package and data for the certificate hierarchy to one or more platform devices of the type of platform device developed by the developer.

The details of one or more examples are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

It is assumed in this example that software developers represent separate entities from platform producer . As such software developers may be considered third parties relative to platform producer . Platform producer requires that third party software be authenticated before the third party software is executed by a platform produced by platform producer . In particular customers purchase the platform from platform producer or an intermediate entity and the platform produced by platform producer is ultimately sent to customers as shown in . Likewise customers receive data A N data from software developers where data represents software developed for the platform. In this manner data defines third party software for the platform.

As noted above platform producer requires that such third party software be authenticated before being executed and in some cases even installed. In accordance with the techniques of this disclosure platform producer includes certificate authority . Certificate authority grants a unique certificate to each of software developers . In general the certificate represents an authentication for the party granted the certificate. In this manner as shown in platform producer may send data A N data including both an SDK for developing software for the platform and a unique certificate to each of software developers . Although described as one set of data including both the SDK and the certificate in practice the data for the SDK and the certificate may be sent separately.

Certificates are used in public key cryptography in which two keys a public key and a private key are used to encrypt decrypt sign and or verify data. In particular to ensure that only one party can read data the public key of that party can be used to encrypt that data such that only the party s private key can be used to decrypt the data. Conversely to ensure that data can be authenticated as having originated from a particular party that party can use its private key to perform an encryption decryption process on the data typically referred to as signing the data and its public key can be used as part of an encryption decryption process to verify the data. For purposes of explanation this disclosure refers to signing data as performing an encryption decryption process on the data with a private key. However it should be understood that to sign a set of data a fingerprint of the data may be signed using the private key where the fingerprint is generally substantially smaller than the data itself. The fingerprint may correspond to a hash of the data itself such as an MD5 Message Digest 5 hash or a SHA 1 secure hash algorithm 1 hash of the data. Certificate authority signs certificates issued to software developers e.g. by encrypting data for the certificates with a private key associated with certificate authority . In this manner entities attempting to verify that the certificate was signed by certificate authority can verify the certificate using the public key associated with certificate authority .

As one example signing a set of data may include calculating a hash of the data producing a fingerprint of the data then applying a decryption process using a private key to the fingerprint of the data to produce a signature. Verification of the signed data may include determining whether a hash of the data that is the fingerprint is equal to the result of encrypting the signature using the public key paired with the private key. These processes represent examples of encryption decryption processes for signing and or verifying data using public key cryptography.

In accordance with the techniques of this disclosure the certificates sent to software developers allow software developers to create their own local certificate authority infrastructure. In particular the certificates granted to software developers are configured to allow signing of sub certificates within the respective entities. For example using the certificate received from certificate authority of platform producer a security officer of one of software developers may sign certificates for individual departments within the corresponding software developer and allow these department level certificates to sign further sub certificates e.g. of individual programmers within the respective department. As another example a different one of software developers may create only a two level hierarchy including the certificate from certificate authority and certificates for individual programmers. An example certificate authority hierarchy is illustrated and described in greater detail with respect to .

By allowing each of software developers to develop their own unique certificate authority hierarchies each of software developers can ensure that individual actors have their own unique private keys. For example individual actors can generate their own public key private key pairs and generate a certificate signing request for the public key private key pair to request a certificate signed using the certificate received from certificate authority or a sub certificate thereof. Accordingly because each actor has their own private key private keys need not be shared among actors of software developers . In this manner these techniques allow software developers to conform with security best practices of not sharing private keys among different actors while still establishing a chain of trust to certificate authority of platform producer .

Moreover because each actor has a respective private key certificate revocation and expiration can be performed on a fine grain basis. For example if an individual actor leaves the software development entity the software developer can revoke that actor s certificate individually without concern that other actors keys will be compromised. Likewise if certificate authority determines that one of software developers is not in compliance with requirements for retaining the certificate from certificate authority certificate authority can simply revoke the one certificate associated with the one of software developers . In effect this causes all certificates issued by the one of software developers to be revoked as well because the chain of trust can no longer be traced back to certificate authority .

Moreover end of life EOL policies for certificates can be established uniquely for each of software developers e.g. by security officers of software developers . Certificates at different levels of the certificate authority hierarchy of respective software developers can be assigned different expiration dates. For example certificates used exclusively for signing sub certificates may be relatively long lived e.g. having a twenty year expiration . Such certificates may be stored on a computing device that is not connected to a network and that is only turned on when a sub certificate needs to be signed. Build servers on the other hand may receive a certificate that expires in a shorter period of time e.g. three years but receive periodic renewals e.g. each month . In this manner a particular software build would need to be installed at most three years after the software was built by the build server or else the software could not be installed and executed.

As still another example individual actors such as programmers can be issued certificates that are rendered useless for production use but are instead useful only during software development. For example their certificates can be set to expire six months after signing. Moreover certificates assigned to individual actors may include personal information such as the individual s name such that the individual actors do not want to distribute anything signed with that certificate outside of the software developer. Thus certificates assigned to individual actors can be configured with a relatively small exposure window and without anonymity which encourages the individual actors to provide their software contributions to the build server and discourages the individual actors from disseminating their software outside of the respective one of software developers . In this manner rather than having individual actors sign their contributions to a software package the actors can submit their contributions to a build server which has its own certificate and the build server can build the software package and sign the package with its own certificate. The build server can use signed contributions from individual actors to ensure that the software contributions originate from authorized actors.

In this manner software developers can construct their own certificate hierarchies that are specific to their companies. Whereas smaller software development entities may only require a few certificates larger software development entities may require a relatively large multi tiered certificate hierarchy. Certificate authority of platform producer issues one certificate to each of software developers which includes permissions to sign sub certificates. In this manner software developers can use the certificate from certificate authority to sign sub certificates which may be in turn used to sign further sub certificates. Sub certificates may be issued and authorized recursively in this manner down to individual actors. Sub certificates at a lowest level of the hierarchy may be restricted from signing further sub certificates.

Using these techniques allows flexibility for constructing certificate hierarchies within each of software developers while also preserving security best practices. Moreover data for a software package need not be sent outside of the one of software developers that developed the software package for signing but can instead be signed by a certificate of the certificate hierarchy having a root at the certificate associated with certificate authority of the one of software developers that developed the software package.

In accordance with the techniques of this disclosure platform devices purchased by customers may be configured to receive a first software package such as data A signed by a first software developer that is a first one of software developers with a first certificate of a first certificate hierarchy associated with the first software developer. The platform devices execute the first software package only after determining that a root of the first certificate hierarchy corresponds to a certificate associated with certificate authority of platform producer . Certificates associated with certificate authority are considered self signed in that platform producer is implicitly trusted by platform devices produced by platform producer .

Likewise the platform devices may receive a second software package signed by a second software developer that is a different one of software developers with a second certificate of a second certificate hierarchy associated with the second software developer. The second certificate hierarchy may be different than the first certificate hierarchy because the techniques of this disclosure allow each of software developers to develop their own unique certificate hierarchies. The platform devices execute the second software package only after determining that a root of the second certificate hierarchy corresponds to a certificate associated with certificate authority of platform producer .

In this example software developer is divided into departments A M departments . Departments represent any of a variety of departments involved in software development such as for example a core system department a database department a networking department a user interface department a human interface device HID department a testing and debugging department and the like. Each of departments includes a number of department actors . For example department A includes department actors A while department M includes department actors M. Department actors generally represent individual actors involved in software development such as programmers managers testers and the like. Department actors work together and individually to develop features of a software package related to their respective department.

It is assumed that software developer has its organizational structure in place prior to utilization of the techniques of this disclosure. However it is also possible that the techniques of this disclosure may be used in conjunction with developing an organizational structure for a software developer or during reorganization of a software developer. In any case a member of software developer such as a security specialist ensures that each of department actors maintains their own public key and private key pair. The security specialist may initially issue a certificate request to certificate authority . In response the security specialist may receive developer certificate . Developer certificate generally includes a public key for software developer certificates in a certificate chain for platform producer e.g. one or more certificates associated with certificate authority and a signature produced by one of the certificates of the certificate chain for platform producer .

Based on the organizational structure of software developer the security specialist may determine that each of departments receives its own department certificate such as one of department certificates A M department certificates . Department certificates are signed by developer certificate . That is a member of each of departments such as a department manager may issue certificate requests to the security specialist who may use developer certificate to sign department certificates to respective departments represented by dashed lines A M.

Moreover each of department actors can issue certificate requests for their public key and private key pair to e.g. the department manager of the respective one of departments . In response department actors may be issued individual actor certificates such as actor certificates A M actor certificates . Actor certificates are signed by respective department certificates represented by dashed lines A M.

Furthermore in this example software developer includes build server . Build server includes compilation unit and server certificate . Server certificate is signed by developer certificate represented by dashed line N. In other examples server certificate may be signed by a different certificate e.g. one of department certificates . In any case in this example department actors provide code elements signed by respective actor certificates to build server for inclusion within a software package. Build server authenticates the code elements by ensuring that they are signed using a valid one of actor certificates .

In general to sign data such as a code element an actor performs an encryption decryption process on the data using the actor s private key. To authenticate or verify the data that is ensure that the data originated from the actor another actor can perform an encryption decryption process on the data using the actor s public key. The encryption decryption process is not used to secure the data because the actor s public key is generally publicly available but instead is used to authenticate the origins of the data. That is because the actor is the only one with access to the private key used to sign the data data that can be properly verified using the actor s public key can be verified as originating from that actor. Build server authenticates code elements in this manner and moreover ensures that the certificates associated with the public key can be traced back to developer certificate . That is build server recursively checks the certificate used to sign each certificate until reaching developer certificate . For example build server may determine that one of actor certificates is signed by one of department certificates and that the one of department certificates is signed by developer certificate . In this manner build server may walk the chain of trust from the actor up to developer certificate .

In this manner illustrates an example certificate hierarchy for an example software developer . In this example a root of the certificate hierarchy corresponds to developer certificate . The root could also be described as level 1 of the hierarchy. Developer certificate is used to sign department certificates and server certificate . Therefore department certificates and server certificate represent certificates at level 2 of the hierarchy. Actor certificates are signed by respective department certificates and therefore represent certificates at level 3 of the hierarchy.

Accordingly a certificate hierarchy may be described as a tree of nodes the nodes corresponding to certificates where each node has exactly one parent node and zero or more child nodes. The root of the tree corresponds to developer certificate received from certificate authority in this example and exists at level 1 of the hierarchy. Each node at level N where N is greater than 1 represents a certificate signed by a parent node at level N 1. Thus a certificate at level N where N 1 is signed by at least one certificate at level N 1 in this example. By verifying this property of the certificate hierarchy starting with the certificate used to sign a code element the code element can be authenticated.

After receiving and authenticating each code element for a software package compilation unit of build server compiles the various code elements to form the software package. In various examples the code elements may include source code object code executable files configuration data or other such elements used in producing a software package. Build server may then sign the software package using server certificate .

Build server or another entity of software developer may also make the software package available to platforms of the type for which the software package was created e.g. platforms corresponding to a software development kit SDK received from platform producer . Build server may for example provide the software package directly to consumers in the form of instructions stored on a computer readable medium or via network transmission or may send data for the software package to an online repository such as an application marketplace.

In addition to the software package build server may also provide certificates of the certificate hierarchy for software developer to the platforms. In this manner the platforms can use the certificates of the certificate hierarchy to authenticate the software package. That is the platforms may authenticate the software as originating from a trusted software developer in a manner similar to build server . With respect to the example of the platforms may determine that the software package was signed by server certificate that server certificate was signed by developer certificate and that developer certificate was signed by certificate authority . In other words the platforms may ensure that the certificate used to sign the software package exists within the certificate hierarchy that level 1 of the certificate hierarchy that is the root of the certificate hierarchy is a certificate associated with certificate authority and for each certificate at level N where N 1 along a path from the root node to the certificate used to sign the software package the certificate at level N is signed by a certificate at level N 1 along that path.

Thus because the platforms are configured to trust certificate authority and determine that the certificate hierarchy has a root corresponding to certificate authority namely developer certificate signed by certificate authority the platforms can install and execute the software package. On the other hand if a software package cannot be authenticated as originating from a trusted source the platforms may delete data for the software package without installing the software package.

The organizational structure of software developer of is merely one example organizational structure. It should be understood that the techniques of this disclosure allow for creation of a certificate hierarchy for software development entities such as software developers of for any sort of organizational structure. In particular each actor of the software developer creates their own public key and private key pairs and issues certificate requests for the pairs. The software developer receives a certificate from certificate authority which permits signing of sub certificates. Thus the software developer signs the certificate requests from the individual actors using either the certificate received from certificate authority or a sub certificate thereof. A sub certificate of the certificate received from certificate authority is a certificate either signed by the certificate received from certificate authority or a certificate that was signed by another sub certificate of the certificate received from certificate authority .

The software developer may use some certificates only for signing other certificate requests. In the example of department certificates are only used for signing sub certificates that is actor certificates . Such certificates used only for signing sub certificates may be stored on a computing device that is not connected to a network of the software developer and only powered on when a certificate signing request needs to be acted upon that is when a sub certificate needs to be signed. The software developer may create an end of life EOL policy for the certificates at various levels of the certificate authority hierarchy based on for example who the certificates belong to how they are used e.g. for signing sub certificates data associated with a software package or internal authentication only . For example department certificates may be long lived certificates having a 20 year expiration server certificate may have a 3 year expiration and actor certificates may have a 6 month expiration.

For example an individual actor may use workstation device to create a public key and a private key pair. This public key and private key pair is used to digitally encrypt decrypt sign and or verify or authenticate data. For example other entities may encrypt data using the public key such that only workstation device is able to decrypt the data using the private key. Likewise workstation device may sign data using the private key such that other entities are able to verify the data using the public key indicating that the origin of the data must have been workstation device because only workstation device has access to the private key.

Workstation device includes request generation unit and request interface . Request generation unit is configured to generate a certificate signing request for the public key and private key pair. The certificate signing request generally includes data for the public key and a request for a certificate signed by the entity to whom the certificate signing request is issued e.g. signing device . The certificate after being issued indicates that the public key does indeed belong to the requesting entity e.g. workstation device or a user thereof . Request generation unit provides the data for the certificate signing request to request interface .

Request interface represents an interface for outputting the certificate signing request represented by arrow . As an example request interface may represent a universal serial bus USB interface for storing the data for the certificate signing request to a USB based flash drive. Thus to output the certificate signing request request interface may store the data for the certificate signing request to the USB flash drive. A user such as the individual actor associated with workstation device a supervisor thereof or a security officer may then take the USB flash drive to signing device . Typically to enhance security signing device would not be connected to a network to prevent unauthorized access. Likewise signing device may be kept off until a certificate needed to be signed. However in some examples signing device may be kept powered on and available via a network. In such examples request interface may comprise a network interface such as an Ethernet based network interface card NIC or other wired or wireless interface.

Signing device in this example includes signing certificate signing unit and request interface . Request interface generally corresponds to an interface substantially similar to request interface . For example when request interface comprises a USB interface request interface also comprises a USB interface. In this example request interface receives the data for the certificate signing request represented by arrow from workstation device . Request interface passes the certificate signing request to signing unit .

In this example as noted above signing device includes signing certificate . Signing certificate may represent a certificate signed by certificate authority that is a certificate signed by a separate entity or a sub certificate thereof. For example signing certificate may represent developer certificate or one of department certificates of . Signing unit uses data of signing certificate to sign the certificate of the certificate signing request from workstation device . In some cases signing unit may require separate authentication of a user processing the certificate signing request such as a login identifier and a password.

More particularly signing certificate is associated with a public key and private key pair of signing device . Signing certificate is signed by another entity such as another entity within the software developer including signing device and workstation device or by certificate authority . Thus signing certificate forms part of a certificate hierarchy for the software developer. That is signing certificate is signed by either a certificate signed by certificate authority or a sub certificate thereof and therefore is treated as a sub certificate of certificate authority . Signing certificate indicates that the public key for signing device can be trusted as being associated with signing device . Signing unit uses the paired private key of signing device to sign the certificate for the certificate signing request issued by workstation device . Signing unit then provides data for signing certificate including other certificates and corresponding public keys in the certificate hierarchy to request interface .

Request interface in turn outputs data representative of the signed certificate e.g. to the USB flash drive including the certificate signing request. This data is then provided back to workstation device as represented by arrow . Request interface receives the data corresponding to the signed certificate and provides this data to request generation unit . Request generation unit in turn stores the data for the signed certificate in the form of actor certificate . Because signing certificate can be traced back along the certificate hierarchy to certificate authority and because signing certificate was used to authenticate actor certificate actor certificate can likewise be traced back along the certificate hierarchy to certificate authority .

Workstation device also includes user interfaces software development kit SDK and network interface . The individual actor associated with workstation device such as a programmer uses user interfaces to interact with workstation device . User interfaces may include for example a keyboard a mouse a monitor speakers a microphone a camera a webcam a touchscreen or the like. In this manner workstation device receives input from and provides output to the individual actor via user interfaces .

SDK represents an SDK from platform producer . Although shown as an individual element it should be understood that SDK may be incorporated into a software development suite such as an integrated development environment IDE or generally used in conjunction with other elements. For example a control unit of workstation may execute the SDK as an application along with other applications. The SDK may be executed over an operating system of workstation device . The control unit may comprise one or more hardware based processing units such as one or more microprocessors and memory for storing instructions for the SDK and other applications.

In accordance with the techniques of this disclosure the individual actor associated with workstation device uses SDK to develop software elements for a particular platform. The software elements correspond to a portion of a software package developed for the platform. The SDK provides tools for building such software elements such as dynamically linked libraries DLLs provided by the platform application programming interfaces APIs provided by the platform emulation of platform software and or hardware elements or other such tools. In this manner the individual actor can produce software elements designed for the corresponding platform.

After developing such software elements workstation device signs data for the software elements such as source or object code using actor certificate . That is workstation device uses the private key of the public key and private key pair associated with actor certificate to sign the data for the software elements. This allows workstation device to test these software elements on a test kit including a test platform device not shown . The test platform device is configured in a manner that conforms substantially to the platform produced by platform producer such that the test platform device only executes authentic signed software. After testing the software elements to ensure that the software elements work properly workstation device provides data for the software elements to build server . For example workstation device may check in the software elements using a software version control system such as CVS concurrent version system .

As explained above build server receives such software elements from other actors involved in the development of a software package for the platform in addition to the actor associated with workstation device . Compilation unit of build server generates the software package using these software elements and signs data for the software package e.g. all or a portion of the software package using the private key associated with server certificate to sign the software package. Then build server can provide the signed software package along with data for the certificate hierarchy to platform devices of the type of platform device corresponding to SDK .

In this example platform device includes control unit and interfaces A N interfaces . Interfaces may comprise user interfaces system interfaces network interfaces or the like for receiving input and or providing output to an external entity. Control unit may comprise one or more hardware based processing units such as one or more microprocessors and memory for storing instructions such that the processing units execute the instructions stored in the memory. In this example control unit includes third party software modules A N 3party software modules trust store verification module and operating system . Thus as noted above a memory of control unit may store instructions for third party software modules verification module and operating system as well as data for trust store such that the processing units can execute the instructions.

Platform device represents a platform that can execute software developed using the SDK provided by platform producer . In particular third party software modules represent software packages developed by third party software developers such as software developers . In accordance with the techniques of this disclosure platform device is configured to authenticate third party software packages prior to installing and or executing the third party software packages. For example trust store stores trusted certificates e.g. one or more certificates associated with a developer of the platform e.g. certificate authority .

For example trust store may include a root certificate or a chain of certificates associated with certificate authority . In general verification module ensures that third party software packages are signed using a certificate that can be traced back to certificate authority of platform producer . Because platform device is configured to trust certificate authority in that certificate authority corresponds to platform producer which developed platform device platform device is also configured to determine that certificates and sub certificates of a software developer that are signed by certificates signed by certificate authority are valid for the purpose of authenticating software developed by the software developer. For example verification module may verify a certificate that has a chain of trust leading back to a certificate associated with certificate authority . Trust store need not store all certificates associated with certificate authority so long as a chain of certificates has a root corresponding to a certificate associated with certificate authority and the root is stored in trust store . Of course trust store may store additional certificates associated with certificate authority or other trusted entities.

In particular as discussed above each of software developers can develop its own certificate hierarchy. Thus platform device need not be configured to determine whether a software package is signed using a certificate signed by certificate authority . Instead platform device can be configured to determine whether a software package is signed using a sub certificate that can be traced back to a certificate signed by certificate authority .

In accordance with the techniques of this disclosure verification module recursively checks each certificate in a certificate hierarchy to determine whether the certificate is a certificate associated with certificate authority or whether the certificate is signed by another certificate in the certificate hierarchy. If the root of the certificate hierarchy corresponds to a certificate associated with certificate authority verification module determines that the software package is authentic and can be installed. On the other hand if the root of the certificate hierarchy does not correspond to a certificate associated with certificate authority verification module determines that the software package cannot be authenticated and causes the software package to be deleted.

Verification module may also check whether the certificates of the certificate hierarchy have expired and if so determines that the software package cannot be authenticated. Similarly verification module may check whether any of the certificates of the certificate hierarchy have been revoked in which case verification module determines that the software package cannot be authenticated.

As an example an image of a software package may include data for a signature a certificate used to sign the software package and an intermediate certificate chain. Verification module may then ensure that the signature is signed by the signing certificate and that the intermediate certificate chain can be traced back to the certificate associated with certificate authority .

In this manner platform device can execute third party software modules from different software developers each of which may have an arbitrary certificate hierarchy structure. Trust store may store a certificate associated with platform producer such that certificate hierarchies for each of the software developers associated with third party software modules can be traced back to the certificate associated with platform producer . As long as a software package has a valid chain of trust from the certificate used to sign the software package to a certificate associated with certificate authority verification module can determine that the software package is authentic that is that the software package originates from a software developer trusted by platform producer . Accordingly software developers using an SDK for platforms of the type to which platform device corresponds can implement arbitrary internal certificate hierarchies because platform device need only determine that there exists a valid chain of trust leading to certificate authority .

Platform device represents an example of a platform device including a control unit configured to receive a first software package signed by a first software developer with a first certificate of a first certificate hierarchy associated with the first software developer execute the first software package only after determining that a root of the first certificate hierarchy corresponds to a certificate authority of a developer of the platform device receive a second software package signed by a second software developer with a second certificate of a second certificate hierarchy associated with the second software developer wherein the second certificate hierarchy is different than the first certificate hierarchy and execute the second software package only after determining that a root of the second certificate hierarchy corresponds to the certificate authority of the developer of the platform device.

As discussed above software developer is an entity that is separate from platform producer . Therefore software developed by software developer is considered third party software relative to platform device which is produced by platform producer . For example a software package developed by software developer may correspond to one of third party software modules .

In the example of platform producer develops a platform of a particular type . For example platform producer may design hardware elements of the platform application programming interfaces APIs for the platform an operating system for the platform and the like. In this example platform producer also develops a software development kit SDK for the platform . The SDK allows third party software developers such as software developer to develop software for the platform. Specifically the SDK allows third party software developers to develop software for the type of platform developed by platform producer . That is the software may be executable by all platforms of that particular type and not specifically intended for one instance of the platform device.

In this example software developer requests a developer certificate from platform producer . Specifically software developer creates a public key and private key pair and submits a certificate signing request associated with the public key to certificate authority of platform producer . Certificate authority of platform producer authenticates platform producer e.g. by independently verifying that the certificate signing request originated from software developer . Assuming that software developer is properly authenticated and that platform producer determines that software developer is trustworthy platform producer sends data for the SDK and a signed certificate to software developer . It should be understood that the signed certificate includes a certificate chain to a root node of a chain of certificates for platform producer . This chain may include one or more certificates. As discussed with respect to the sending of the SDK and the signed certificate is represented by arrows . Of course data for the SDK and data for the signed certificate may be sent in separate communication sessions and need not be provided together. The certificate from certificate authority of platform producer includes permissions that allow software developer to sign sub certificates.

After receiving the SDK and the certificate software developer creates a developer certificate hierarchy . That is in accordance with the techniques of this disclosure software developer namely one or more security personnel of software developer such as a security officer ensures that each individual actor within software developer has a unique public key and private key pair and that private keys are not shared among actors. The certificate hierarchy may include certificates at various levels for different types of actors such as IT personnel managers programmers and the like. As discussed above some public key and private key pairs may be maintained strictly for the purpose of signing sub certificates. Department certificates represent examples of certificates for such public key and private key pairs. The developer certificate hierarchy may be considered a sub hierarchy of a full certificate hierarchy that includes the certificate chain for platform producer in addition to the developer certificate hierarchy.

In any case software developer ensures that each public key and private key pair is associated with a certificate that can be traced back to the certificate received from certificate authority of platform producer . That is each of the certificates is signed by the certificate received from certificate authority or a sub certificate thereof. In this manner software developer creates a certificate hierarchy having a root node corresponding to the certificate associated with certificate authority of platform producer .

Software developer also develops a software package using the SDK received from platform producer . In general individual actors of software developer contribute software elements to the software package e.g. using workstations similar to workstation device of . The individual actors then sign their software elements for purposes of testing on a test platform device and provide the tested software elements to build server . Build server in turn compiles the software elements received from the various actors and builds the final software package. Build server then signs the software package using its certificate of the certificate hierarchy . The signed software package includes data for the certificate hierarchy of software developer and the certificate chain for platform producer as well.

Subsequently software developer provides the signed software package to platforms of the type produced by platform producer . For example software developer may transmit the signed software package directly to a requesting platform to a software repository such as an online marketplace store data for the signed software package on a computer readable storage medium or otherwise make the software package available to the platforms.

Accordingly platform device receives the signed software package after the software package has been made available. Starting with the certificate used to sign the software package e.g. server certificate of build server platform device traces the certificate hierarchy to the root certificate of the certificate hierarchy . That is for each certificate platform device determines whether the certificate is expired whether the certificate has been revoked and whether the certificate is a root of the certificate hierarchy. This process continues until the root is discovered or platform device determines that a certificate in the certificate hierarchy is revoked or expired. If a certificate in the certificate hierarchy is revoked or expired platform device may delete the software package. If the certificate was merely expired platform device may request an updated version of the software package that was signed within an expiration date for the corresponding certificate.

After reaching the root certificate platform device determines whether the root certificate corresponds to a certificate of certificate authority of platform producer . For example the certificate of certificate authority is paired with a public key of certificate authority . Platform device may therefore verify the certificate at the root of the certificate hierarchy using the public key associated with the certificate from certificate authority to determine whether the certificate at the root of the certificate hierarchy is associated with certificate authority . If the data is correctly verified platform device determines that the certificate at the root of the certificate hierarchy is associated with certificate authority YES branch of and may therefore install and execute the software package . On the other hand if the data cannot be correctly verified e.g. if the data resulting from an encryption decryption process using the public key cannot be interpreted platform device determines that the certificate at the root of the certificate hierarchy is not associated with certificate authority NO branch of in which case platform device deletes the data of the software package .

It should be understood that steps of the method of may be performed by multiple different software developers each of which may create their own unique certificate hierarchies. In this manner the method of represents an example of a method including receiving by a platform device a first software package signed by a first software developer with a first certificate of a first certificate hierarchy associated with the first software developer executing by a control unit of the platform device the first software package only after determining that a root of the first certificate hierarchy corresponds to a certificate authority of a developer of the platform device receiving by the platform device a second software package signed by a second software developer with a second certificate of a second certificate hierarchy associated with the second software developer wherein the second certificate hierarchy is different than the first certificate hierarchy and executing by the control unit of the platform device the second software package only after determining that a root of the second certificate hierarchy corresponds to the certificate authority of the developer of the platform device.

Likewise the method of represents an example of a method including receiving a certificate from a certificate authority associated with a developer of a type of platform device constructing a certificate hierarchy including a plurality of hierarchically arranged certificates including as a root of the certificate hierarchy the certificate from the certificate authority associated with the developer of the platform device signing data of a software package developed for the type of platform device using one or more certificates of the certificate hierarchy and providing the signed software package and data for the certificate hierarchy to one or more platform devices of the type of platform device developed by the developer.

The techniques described in this disclosure may be implemented at least in part in hardware software firmware or any combination thereof. For example various aspects of the described techniques may be implemented within one or more processors including one or more microprocessors digital signal processors DSPs application specific integrated circuits ASICs field programmable gate arrays FPGAs or any other equivalent integrated or discrete logic circuitry as well as any combinations of such components. The term processor or processing circuitry may generally refer to any of the foregoing logic circuitry alone or in combination with other logic circuitry or any other equivalent circuitry. A control unit comprising hardware may also perform one or more of the techniques of this disclosure.

Such hardware software and firmware may be implemented within the same device or within separate devices to support the various operations and functions described in this disclosure. In addition any of the described units modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate hardware or software components. Rather functionality associated with one or more modules or units may be performed by separate hardware or software components or integrated within common or separate hardware or software components.

The techniques described in this disclosure may also be embodied or encoded in a computer readable medium such as a computer readable storage medium containing instructions. Instructions embedded or encoded in a computer readable medium may cause a programmable processor or other processor to perform the method e.g. when the instructions are executed. Computer readable media may include non transitory computer readable storage media and transient communication media. Computer readable storage media which is tangible and non transitory may include random access memory RAM read only memory ROM programmable read only memory PROM erasable programmable read only memory EPROM electronically erasable programmable read only memory EEPROM flash memory a hard disk a CD ROM a floppy disk a cassette magnetic media optical media or other computer readable storage media. It should be understood that the term computer readable storage media refers to physical storage media and not signals carrier waves or other transient media.

Various examples have been described. These and other examples are within the scope of the following claims.

