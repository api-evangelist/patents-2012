---

title: Cache conflict detection
abstract: Methods, systems, and computer program products for cache conflict detection are provided. A computer-implemented method may include providing a partial graph of data to an application executing on a mobile device where the partial graph is derived from a document comprising a graph of data having a plurality of nodes, receiving a modified partial graph from the application where the modified partial graph includes one or more changes to the partial graph, and determining a document version used to derive the partial graph is no longer a most recent version of the document.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09110807&OS=09110807&RS=09110807
owner: Sybase, Inc.
number: 09110807
owner_city: Dublin
owner_country: US
publication_date: 20120523
---
Data owners are often concerned about shielding their data sources from unwanted or unexpected data requests. In particular a data source that services a mobile application should not be exposed to an unpredictable amount of data requests from the mobile application.

Conventionally mobile applications directly access data sources e.g. enterprise data sources to retrieve data. Because a plurality of mobile applications can make concurrent requests for data at different times it often leads to an unexpected load on the data sources. Furthermore because enterprise data typically exists in disparate formats at geographically distributed locations servicing data requests received from the mobile applications can be a resource intensive process.

Accordingly systems methods and computer program products are needed that efficiently respond to mobile application data requests and maintain the consistency and validity of data while shielding data sources from being negatively impacted by such requests.

Embodiments relate to cache conflict detection. In one embodiment a computer implemented method for cache conflict detection includes providing a partial graph of data to an application executing on a mobile device where the partial graph is derived from a document comprising a graph of data having a plurality of nodes receiving a modified partial graph from the application where the modified partial graph includes one or more changes to the partial graph and determining a document version used to derive the partial graph is no longer a most recent version of the document.

In another embodiment a server based system for cache conflict detection includes a caching module configured to provide a partial graph of data to an application executing on a mobile device where the partial graph is derived from a document comprising a graph of data having a plurality of nodes receive a modified partial graph from the application where the modified partial graph includes one or more changes to the partial graph and determine the document version used to derive the partial graph is no longer a most recent version of the document.

In an additional embodiment a computer readable storage device has control logic recorded thereon that when executed by a processor causes the processor to perform cache conflict detection. The control logic includes computer readable program code to cause the processor to provide a partial graph of data to an application executing on a mobile device where the partial graph is derived from a document comprising a graph of data having a plurality of nodes receive a modified partial graph from the application where the modified partial graph includes one or more changes to the partial graph and determine the document version used to derive the partial graph is no longer a most recent version of the document.

Further embodiments features and advantages of the invention as well as the structure and operation of the various embodiments of the invention are described in detail below with reference to accompanying drawings.

The features and advantages of embodiments will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

While the present invention is described herein with reference to illustrative embodiments for particular applications it should be understood that the invention is not limited thereto. Those skilled in the art with access to the teachings provided herein will recognize additional modifications applications and embodiments within the scope thereof and additional fields in which embodiments of the invention would be of significant utility.

It is noted that references in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it would be within the knowledge of one skilled in the art to incorporate such a feature structure or characteristic with other embodiments whether or not explicitly described.

Various embodiments include methods systems and computer program products for detecting conflicts between cached data residing on a mobile device and more recently updated data in other systems. Embodiments may for example be incorporated as features in systems providing data caching for mobile devices and applications. An example system includes concurrently filed U.S. patent application Ser. No. 13 478 185 filed on May 23 2012 entitled Composite Graph Cache Management which is incorporated by reference herein in its entirety although the invention is not limited to these teachings.

Mobile clients request and use information from a variety of enterprise data sources. Mobile applications enable mobile clients to create modify and otherwise access enterprise data which may be stored within documents objects or other data structures. Data created or updated by a mobile client whether connected or offline needs to be synchronized with the system of record. However data cached on a mobile device can become outdated when source data is updated. The embodiments described herein provide ways to identify and resolve cache conflicts occurring when data held by an offline mobile device is changed in another system.

For example in an embodiment a mobile client requests data from an enterprise data source using a mobile application. The request is received by middleware configured to communicate partial or full documents and change sets with mobile clients while providing full document support for enterprise data sources. The middleware is also configured to cache full documents and other data structures locally. The centrally cached documents may be used to service requests for data from other mobile clients and to help reduce the overall number of requests made to enterprise data sources.

Next in an embodiment the middleware searches its local cache for a copy of the document containing the requested data. The middleware then queries the enterprise data source when the data is not available in its local cache. The middleware requests the full document e.g. XML JSON iDoc etc. containing the enterprise data requested by the mobile client. However even though the backend system of record e.g. SAP DBMS etc. manages the information as a business document business object or other unit of work the mobile client may only need a subset or partial set of this data.

In an embodiment the middleware prepares and returns a full or partial set of data to the mobile client in response to the initial request. The mobile application is then used to create new data and modify data in the partial dataset. Such updates may occur whether the mobile device is online or offline. However the data held by the mobile device may have already changed in the system of record before the updates are received by the middleware for processing.

For example in an embodiment a different mobile device may update some or all of the same data using the same middleware resulting in a new version of the data in both the system of record and in middleware cache. In addition the system of record may also receive direct updates or updates from other systems. Thus conflicting versions of data may exist on a mobile device and in other systems. These conflicts need to be identified and resolved to ensure the consistency and validity of data throughout an enterprise.

For example according to an embodiment mobile device may be any computing device designed for personal use by a user or integrated with other computer systems or computing devices for use by an end user. For example mobile device may include any computing device such as a desktop computer laptop tablet smartphone gaming system navigation device portable media player mobile device electronic device and computing devices embedded into other systems including for example automobiles and appliances. Mobile device may also include any other type of computer system having at least one processor and memory.

Network can be any network or combination of networks that can carry data communications. Such a network can include but is not limited to a wired e.g. Ethernet or a wireless e.g. Wi Fi and 4G network. In addition the network may include but is not limited to a local area network and or wide area network such as the Internet. The network can support protocols and technology including but not limited to Internet or World Wide Web protocols and or services. Intermediate network routers gateways or servers may be provided between servers and clients depending upon a particular application or environment.

Server and any combination of its components may be part of or may be implemented using one or more computing devices. Such server based computing devices may include but are not limited to one or more standalone servers distributed computing systems clustered computer systems cloud computing systems and grid computing systems.

Mobile application accesses data from enterprise data source by making calls to an API or other interface provided by middleware in accordance with an embodiment of the present invention. In accordance with an embodiment of the present invention middleware is the iAnywhere Mobilink iMO and SUP middleware provided by Sybase Inc. of Dublin Calif. One skilled in the relevant arts will appreciate that enterprise data source may be any number of types of data sources including for example a relational database or a remote procedure. Middleware facilitates communications through the use of its API by an application to one or more data sources such as enterprise data source .

Document is a representation of data in any form and type contained in enterprise data source in accordance with an embodiment of the present invention. For example many data sources enterprise applications and systems of record have the ability to manage data as a graph an XML document a JSON document an iDoc or another specific representation of data. For example a system of record may contain an order having specific line items which reference product information. Such information can be represented as a graph of data with a plurality of nodes and may be contained within a single business document.

According to an embodiment document may represent multiple data sources e.g. document may comprise subsets of data from multiple data sources . According to another embodiment document may include metadata which may be interpreted by the software of mobile application to facilitate access of the data from enterprise data source through middleware .

In an embodiment not intended to limit the invention enterprise data source provides access to enterprise resources As an example enterprise resources ERs include but are not limited to database management systems DBMS SAP enterprise systems web services data files hypertext transfer protocol HTTP systems and even spreadsheets. In addition and according to another embodiment third parties e.g. customers software vendors etc. may extend functionality of enterprise data source to include for example integration with additional data sources not shown .

According to an embodiment mobile device is an occasionally connected computing device that executes at least one mobile application . Additionally mobile device includes mobile cache . In an embodiment mobile cache may be used to receive and store numerous sets of data some or all of them being partial sets of data which mobile device receives from middleware . Further mobile cache may store modified versions of datasets full or partial created by an offline mobile device that middleware will later use to update enterprise data source .

According to another embodiment the modified versions of datasets may be stored in mobile cache while mobile device is not connected to a network. Mobile application may be configured to synchronize one or more versions of the datasets with middleware when mobile device reconnects to a network. In an alternative embodiment one or more modified version of enterprise data may be pushed to middleware or pulled by middleware on a scheduled or unscheduled basis.

Middleware includes caching module and cache . In an embodiment middleware acts as an interface between mobile application and enterprise data source . For example middleware may be configured to allow clients to access enterprise data in partial datasets without having to transport an entire document or dataset between mobile device and enterprise data server . Thus middleware may manage the state of the document or full dataset on behalf of mobile device which may only be concerned with partial sets of data.

In another embodiment middleware reduces unwanted or unexpected loads e.g. unpredictable data requests on enterprise data source using caching module and cache . In particular according to an embodiment middleware services mobile application data requests using caching module and cache . Thus at times mobile application need not invoke direct requests on enterprise data source or any other backend enterprise information systems. In this way embodiments of the present invention efficiently service mobile application data requests while shielding data sources from being negatively impacted or overloaded by the requests.

Enterprise data source includes document . Enterprise data source may represent one or more data sources that exist within an enterprise environment. For example enterprise data source may include but is not limited to database management systems DBMS data warehouses SAP enterprise systems custom software applications web services data files hypertext transfer protocol HTTP systems and also spreadsheets. In an embodiment enterprise data source manages data using one or more of a graph an XML document a JSON document an iDoc or other types of data collections.

Document generally represents a collection of data or objects. In another embodiment mobile application requests data from enterprise data source . Caching module receives the request and makes a corresponding request to enterprise data source on behalf of mobile device . Enterprise data source provides document to caching module which then places document in cache . Caching module identifies the partial set of data requested by mobile application existing in document . Caching module then responds to mobile application by providing the partial dataset.

In a further embodiment mobile application creates a new version of the partial dataset while mobile device is offline. The modified version of the partial dataset is then stored in mobile cache until mobile device is able to provide the update to middleware for processing.

However some or all of the data included in the original partial dataset used by mobile device already may have been updated by another system application or device. For example mobile device may receive a full or partial dataset and then go offline for several hours. During this time one or more updates to the original data may have occurred. Therefore caching module is configured to identify when an update has been requested based on an outdated version of data. Further caching module also may perform cache conflict resolution if needed.

For example in an environment where all updates to enterprise data source pass through middleware caching module may perform cache conflict detection using its own cached copy of document . In environments where updates to enterprise data source occur directly or using at least one system other than middleware caching module may check with enterprise data source to determine whether source document already has been updated. Once a cache conflict has been identified the conflict is further analyzed and one or more forms of cache conflict resolution may be performed. Cache conflict identification and resolution is discussed in greater detail below with respect to and .

Method begins at step when a request for data is received from an application executing on an occasionally connected mobile device. According to an embodiment mobile application requests data from an enterprise data source which has the ability to manage data as a document capable of being represented as a graph having a plurality of nodes.

In an embodiment mobile application is configured to send requests for enterprise data to middleware . For example mobile application may be configured to send data requests to caching module using an Application Programming Interface API which may include a REST based or other type of web service.

In an embodiment caching module receives a request from mobile application for data residing on enterprise data source . Caching module may first search cache to determine whether the requested data is available locally. For example caching module may have stored data previously requested by or more mobile clients in cache . Caching module may then service the request using a cached version of the data available in cache instead of requesting the data from enterprise data source .

In some embodiments clients and systems may access enterprise data source either directly or using one or more systems other than middleware . In these scenarios a version of a document stored in cache could become stale. Thus caching module may also be configured to synchronize a version of a document in local cache with a newer version from enterprise data source to avoid providing mobile device with outdated data. For example caching module may perform a check periodically or based on a request to determine whether a newer version of a cached document is available from enterprise data source .

In another embodiment caching module determines that the data requested by mobile application is not available in cache . Caching module then requests and receives the data from enterprise data source . For example the requested data may include document .

According to an embodiment caching module may persist for some time period data result sets objects and documents such as document in cache . Thus a subsequent requestor either the same or another mobile device can benefit from data previously stored within cache helping to reduce the overall number of requests made to enterprise data source .

At step a partial graph including at least the requested data is provided to mobile application . In an embodiment caching module provides mobile application with a partial set of data from a larger dataset that originated from enterprise data source .

For example a mobile application may request data associated with a single service ticket. However enterprise data source may store or provide the requested service ticket data with other information such as related service tickets by date or by user. Caching module is configured to provide a partial dataset that includes the requested data to mobile application .

According to another embodiment mobile application receives the partial dataset and may store its own local copy in mobile cache . Mobile application then modifies the partial dataset while mobile device is either online or offline. For example when mobile device is offline one or more modified versions of the partial dataset may be stored in mobile cache until mobile device is able to reconnect to middleware .

At step a modified version of the partial graph is received from the mobile application. In an embodiment caching module receives one or more modified versions of the partial graph stored in mobile cache .

According to an embodiment mobile application may be used to create update and delete data associated with a partial dataset thus creating a modified version of the partial dataset. One or more modified versions of the partial dataset then may be stored in mobile cache and then later communicated to middleware for graph merge processing with an associated dataset.

However partial datasets stored in mobile cache may become outdated based on one or more updates made by other mobile devices through middleware Further an enterprise data source may be configured to receive updates either directly or using other applications systems and middleware. In some embodiments as described in greater detail with respect to and below cache conflict detection is performed by caching module after receiving the partial data set and before providing the data to an enterprise data source.

At step the operations that were performed to produce the modified version of the partial graph are determined. According to an embodiment caching module determines one or more operations that were performed on the partial dataset by mobile application . For example caching module can derive the delta or the operations performed against the partial dataset by comparing the modified version of the dataset with an earlier version of the partial dataset or the full version of the document from which the partial dataset originated.

At step a locally cached version of the graph is modified based on the determined operations that were performed on the partial graph thus producing a new version of the document. In an embodiment caching module modifies a cached version of document available in cache based on the one or more operations that were determined to create the modified partial dataset. Thus caching module synchronizes document with the changes that were made to the corresponding partial dataset producing a new version of document .

According to an embodiment caching module provides the new version of document to enterprise data source . Thus caching module completes the changes made to the partial dataset by providing a full new version of document to enterprise data source .

In the above flow diagram was described with reference to partial datasets for illustrative purposes. However embodiments are applicable to full datasets.

For example in some embodiments enterprise source system is configured only to receive updates from caching module . Therefore enterprise source system. will not be updated directly or via any external mechanism that does not utilize middleware . When all updates to enterprise source system must flow through caching module middleware can assume that any document available in cache is the latest version. Thus middleware need not perform an additional check for the latest version on enterprise source system .

In another embodiment one or more specific collections or subsets of data available on enterprise source system may only he updated using middleware . Thus updates to these collections and subsets of data may utilize cache conflict detection without system validation even though other parts of enterprise source system may possibly receive updates directly or from sources other than middleware .

At step a partial graph of data derived from a document is provided to a mobile application. In an embodiment caching module provides a partial graph of data derived from document to mobile application .

At step a modified version of the partial graph is received from the mobile application. In one embodiment caching module receives a modified version of the partial graph from mobile application which introduces one Or more changes to the partial graph originally derived from document .

At step a determination is made that the document version used to derive the partial graph is no longer the latest version of the document. In an embodiment caching module determines that an update has been made to document since the time the partial graph was provided to mobile application . For example caching module may compare information or data from a document in cache to information available in one or more of the modified partial graph and middleware to make the determination.

At step one or more cache conflict resolutions are provided. In an embodiment caching module further determines whether changes introduced by the modified partial dataset conflict with the latest version of document . Cache conflict resolution may include but is not limited to automatic cache conflict resolution and manual cache conflict resolution.

In an embodiment caching module may automatically resolve cache conflicts. Automatic cache conflict resolution may occur based on one or more configurable system settings on middleware and one or more configurable user settings on mobile application . Thus caching module may be configured to automatically merge one or more portions a modified partial dataset with the latest version document .

For example an updated service ticket document may include a new status while a subsequently submitted modified partial dataset provides updated user contact information. Caching module may automatically merge these changes into a new version of the document based one or more system or application settings allowing automatic merging of non conflicting updates. In other embodiments automatic merging of changes may occur based on one or more of business rules user identity user priority update type field type and document type.

In an alternative embodiment caching module may request one or more manual merge instructions from application which may be provided to a user of mobile application for resolution. For example manual merging may occur when automatic resolution of conflicting updates is not possible or is not desired in a particular situation. Further manual merging may be performed based one or more of a system setting a mobile application setting or by default.

Additional embodiments may include the combination of one or more types of cache conflict resolutions. For example it is possible to automatically merge non conflicting fields while then performing manual merging of conflicting updates. Other embodiments may involve full datasets.

In an embodiment enterprise source system also receives updates directly or using at least one system not involving middleware . For example one or more users and systems may have the ability to directly update enterprise source system . In addition one or more other applications may modify data held by enterprise source system or use other non related middleware and services to perform updates. As a result middleware cannot automatically assume that a document stored in cache is the latest version because a newer version may have been created on enterprise source system .

At step information about the most recent version of the document is requested. In an embodiment caching module requests information about document from enterprise data source . The requested information may include one or more of a document number version number timestamp and other information that can be used to determine whether a new version of document has been created.

In an alternative embodiment steps may be skipped by directly requesting document from enterprise data source . For example the requested document may be compared to a related cached version of the document when determining the latest version.

At step information about the most recent version of the document is received based on the request made in step . In an embodiment caching module receives the requested information about the most recent version of document from enterprise data source .

At step a determination is made that the document used to derive the partial graph is no longer the most recent version. In an embodiment caching module compares one or more aspects of the information received about a version of document on enterprise data source with available information about a version of document most recently utilized by middleware .

At step the most recent version of the document is requested. In an embodiment caching module requests and receives the most recent version of the document from enterprise data source . Caching module performs the request based on the determination made in step that a cached document is not the latest version.

At step the most recent version of the document is received based on the request made in step . In an embodiment caching module receives the latest version of document from enterprise data source .

At step a determination is made that a conflict exists between a modified portion of the most recent version of the document and a change introduced by the modified partial dataset. For example when a cache conflict occurs one or more changes introduced in an updated dataset may conflict with changes that were made to a source document. Thus in one embodiment caching module may determine that a modified partial dataset seeks to update data which no longer exists in the latest version of document . Different types of conflicts existing between updated data can be addressed using various forms of cache conflict resolution.

At step one or more cache conflict resolutions are provided. In an embodiment both conflicting and non conflicting data changes may be merged both automatically or manually by caching module when producing a new document. Further one or more system application and user settings may be used to determine how the merging of data updates will be resolved.

For example one or more non conflicting updates may be merged automatically based on a system or application setting. Such conflicts also may be resolved based on user instructions received from mobile application . Also for example one or more conflicting updates perhaps to the same field may be resolved based on settings business rules or user intervention.

In an embodiment middleware alerts mobile application that a conflict was detected and may or may not request further instruction for resolving the conflict. In another embodiment middleware may provide a revised partial dataset based on the latest version of the document to mobile application so that a user can perform a manual merge if desired based on the latest version of the document. Other embodiments may involve full datasets.

In additional embodiments caching module merges changes into a new document using one or more cache conflict resolution techniques. Caching module then provides the new document to enterprise data source to update the source system.

In an embodiment the system and components of embodiments described herein are implemented using well known computers such as example computer system shown in .

Computer system includes one or more processors also called central processing units or CPUs such as a processor . Processor is connected to a communication infrastructure .

Computer system also includes a main or primary memory such as random access memory RAM . Main memory has stored control logic computer software and data.

Computer system may also include one or more secondary storage devices . Secondary storage device includes for example a hard disk drive and or a removable storage device or drive as well as other types of storage devices such as memory cards and memory sticks. Removable storage drive represents a floppy disk drive a magnetic tape drive a compact disk drive an optical storage device tape backup etc.

Removable storage drive may interact with a removable storage unit . Removable storage unit includes a computer usable or readable storage device having stored thereon computer software control logic and or data. Removable storage unit represents a floppy disk magnetic tape compact disk DVD optical storage disk or any other computer data storage device. Removable storage drive may read from and or write to removable storage unit in a well known manner.

In alternative implementations secondary memory may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include for example a removable storage unit and an interface . Examples of such means may include a program cartridge and cartridge interface such as that found in video game devices a removable memory chip such as an EPROM or PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer system .

Computer system also includes input output display devices such as monitors keyboards pointing devices etc. which communicate with communication infrastructure through a display interface .

Computer system further includes a communication or network interface . Communication interface may enable computer system to communicate with remote devices. For example communication interface may allow computer system to communicate over communications path such as LANs WANs the Internet etc. Communications interface may interface with remote sites or networks via wired or wireless connections.

Any tangible apparatus or article of manufacture comprising a computer useable or readable medium having control logic software stored thereon is referred to herein as a computer program product or program storage device. This includes but is not limited to computer system main memory secondary storage device and removable storage unit . Such computer program products having control logic stored thereon that when executed by one or more data processing devices causes such data processing devices to operate as described herein represent embodiments of the invention.

Embodiments can work with software hardware and or operating system implementations other than those described herein. Any software hardware and operating system implementations suitable for performing the functions described herein can be used. Embodiments are applicable to both a client and to a server or a combination of both.

It is to be appreciated that the Detailed Description section and not the Summary and Abstract sections is intended to be used to interpret the claims. The Summary and Abstract sections may set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor s and thus are not intended to limit the present invention and the appended claims in any way.

Embodiments have been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein. for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed. The breadth and scope of the present invention should not be limited by any of the above described embodiments.

In addition the foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can by applying knowledge within the skill of the art readily modify and or adapt for various applications such specific embodiments without undue experimentation without departing from the general concept of the present invention. Therefore such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation such that the terminology or phraseology of the present specification is to he interpreted by the skilled artisan in light of the teachings and guidance.

The breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

