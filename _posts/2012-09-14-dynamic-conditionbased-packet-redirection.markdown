---

title: Dynamic, condition-based packet redirection
abstract: In one embodiment, at a packet-forwarding engine for receiving packet flows and conditionally routing packets in the packet flows to one or more applications, a method includes receiving from a particular one of the applications a request that requests the packet-forwarding engine not to route the particular one of the packet flows to the particular one of the applications and identifies one or more conditions for routing particular ones of the packets in the particular one of the packet flows to the particular one of the applications. The method further includes, receiving a particular packet in the particular one of the packet flows, determining whether one or more of the conditions for routing the particular packet to the particular one of the applications are met, and routing or not routing the particular packet to the particular one of the applications based on the determination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08842669&OS=08842669&RS=08842669
owner: Cisco Technology, Inc.
number: 08842669
owner_city: San Jose
owner_country: US
publication_date: 20120914
---
This application is a continuation of U.S. application Ser. No. 12 698 382 filed Feb. 2 2010 and entitled Dynamic Condition Based Packet Redirection .

Packet based communication networks transmit data encapsulated in packets. To facilitate the delivery of rich services to clients or end users a packet based network system may utilize service engines to provide certain network services not included in the standard Internet Protocol IP . These services may be implemented as applications running on the service engines which may be implemented in integrated service blades or external network appliances. Conventionally a network administrator or end user must specify static rules that govern which packet flows or packets are routed to a particular application for processing. Such static rules or instructions may be defined for each application or service engine. All traffic that matches a specified set of static rules is re routed by the forwarding engine to a particular application for processing. By way of example a user may specify a rule that a particular virtual local area network VLAN be routed and processed by a particular application. However if the traffic routed to an application is more than the service engine can process the service engine can become a bottleneck as the data throughput of each service engine may be significantly below that of the switch.

In one embodiment at a packet forwarding engine for receiving packet flows and conditionally routing packets in the packet flows to one or more applications a method includes receiving from a particular one of the applications a request that requests the packet forwarding engine not to route the particular one of the packet flows to the particular one of the applications and identifies one or more conditions for routing particular ones of the packets in the particular one of the packet flows to the particular one of the applications. The method further includes receiving a particular packet in the particular one of the packet flows determining whether one or more of the conditions for routing the particular packet to the particular one of the applications are met and routing or not routing the particular packet to the particular one of the applications based on the determination.

In particular embodiments switch includes a hardware or software element or a combination of two or more such elements providing switching functionality. Reference to switching may encompass routing and vice versa where appropriate. Switch may include one or more switches . As an example and not by way of limitation switch may include one or more CISCO CATALYST 6500 series switches. Switch may include one or more CISCO 7600 series routers. In particular embodiments switch is a NETFLOW enabled router or switch. Switch may include two or more devices coupled to each other that collective provide switching functionality. As an example and not by way of limitation switch may include a switching platform that includes one or more integrated service blades or is coupled to one or more external appliances to deliver one or more services such as for example firewall or other security services Network Address Translation NAT application visibility and monitoring AVM statistics gathering load balancing proxying VPN termination or traffic shaping. Herein reference to a service or network service may encompass a function or combination of functions that directly operates on a packet or stream of packets or operates on information determined from a packet or stream of packets where appropriate. Although the present disclosure describes and illustrates particular services the present disclosure contemplates any suitable services. A service may include one or more rich services where appropriate.

Switch includes a forwarding engine or packet forwarding engine that is configured to receive packets make packet forwarding decisions and transmit the packets according to the forwarding decisions. Forwarding engine may also identify or classify one or more packet flows or traffic or data flows through switch and monitor those packet flows. As an example and not by way of limitation for each packet flow received by forwarding engine forwarding engine may inspect one or more transport headers of the packets in the packet flow generate or update one or more metrics for the packet flow access one or more instructions corresponding to the packet flow and make routing decisions based on the inspections metrics or instructions.

In particular embodiments to facilitate the delivery of services to clients in networks or forwarding engine is configured to conditionally route or re route or direct redirect or divert particular packet flows or one or more packets in a particular packet flow to one or more applications . An application may include a hardware or software element or a combination of two or more such elements for providing one or more services as described above. An application may run on one or more service engines or service nodes which may be internal or external to switch . In particular embodiments one or more integrated service blades or blade servers or server blades or external network appliances may embody or implement one or more applications . By way of example a service node may be directly connected on one of the ports of switch while a service node such as an external appliance may be logically connected via the Shared Internet Access SIA standard feature set to switch .

In particular embodiments forwarding engine is configured to inspect packets in packet flows classify the packet flows apply one or more policies to the packet flows and route the packet flows or individual packets in the packet flows to one or more applications for further processing to implement specific services as described above or to networks or without additional processing by applications . In particular embodiments applying one or more policies to a packet flow may include updating one or more metrics associated with the flow determining if one or more conditions are met based on the metrics and routing the packet flow based on the determination of whether the one or more conditions are met satisfied .

Forwarding engine may define a packet flow in one or more ways. As an example and not by limitation forwarding engine may define a packet flow using a 7 tuple key where a packet flow is defined as a unidirectional sequence of packets all sharing the following seven values 1 source IP address 2 destination IP address 3 source port 4 destination port 5 IP protocol 6 ingress interface and 7 IP type of service.

In particular embodiments to provide a service to a packet flow one or more applications need not access or process all the packets in the packet flow. As an example and not by way of limitation an application may need to scan only the first N packets or bytes in a packet flow to provide a service to the packet flow. Hence further processing of the packet flow may by unnecessary at least for a period of time. A service blade may be allowed to add shortcuts to the forwarding plane of forwarding engine which may be responsible for the actual process of sending a packet received on a logical interface to an outbound logical interface so that forwarding engine does not divert to application packet flows that do not require further processing by application .

Such a shortcut may be implemented as a result of a request sent by application to forwarding engine that specifies specific tuples such as for example 5 tuples for packets or flows that application does not need to process further. This technique known as trusted flow acceleration TFA may help reduce the load on application . TFA may enable the creation of shortcuts in NETFLOW so that a particular packet flow is not redirected to application . Particular embodiments may be used conjunction with the Service Insertion Architecture SIA model to extend the flow acceleration capability to data center or other applications .

Beyond various simple cases there is a large class of use cases for services that may not benefit from TFA techniques. In particular embodiments for such applications it may be desirable to not only suspend the processing of a particular flow by an application but also to dynamically resume the processing of the flow by application at a later time. More specifically it may be desirable for an application to occasionally or periodically inspect a particular flow for which re routing to the corresponding service engine has been halted. Additionally it may be desirable or necessary to resume re routing of the previously halted packet flow to the application for processing. By way of example it may be desirable to resume re routing of the packet flow to the application when there are changes in the traffic pattern of the flow.

In particular embodiments various applications running on corresponding service engines are configured with the ability to request to forwarding engine the suspension of the re routing of packets flows to the respective applications while also being configured to specify conditions under which forwarding engine must resume re routing of the flows or specific packets therein to the respective applications for further processing. In particular embodiments such functionality may be realized using a new class of shortcuts referred to herein as Erasable Flow Acceleration EFA shortcuts hereinafter also referred to as EFAs and a new protocol that enables network administrators or applications to initiate such shortcuts.

In particular embodiments EFAs enable a network administrator or user administering or managing an application running on a service engine to specify that a packet flow should not be re routed to the service engine as well as conditions under which the forwarding engine should resume redirecting the flow or specific packets therein to the application for further processing and in particular embodiments conditions under which the EFA should be erased.

In particular embodiments the application requesting the EFA shortcut sends an EFA request to forwarding engine e.g. in the form of an XML file or via an internal protocol which then installs or otherwise saves the EFA shortcut. By way of example in particular embodiments forwarding engine saves the EFA shortcut with a corresponding packet flow entry in EFA data . In particular embodiments the EFA request sent by the requesting application to forwarding engine may specify one or more conditions each based on one or more predicates or metrics hereinafter predicates and metrics may be used interchangably as well as the action to be taken e.g. resume redirecting the flow to the corresponding service engine or redirect the current packet to the corresponding service engine when the condition is satisfied. As an example packet forwarding engine may update one or more metrics for a particular flow based on the packets received in the flow.

In particular embodiments an application may automatically install an EFA shortcut at forwarding engine using an application programming interface API . Particular embodiments may do this without any human intervention. In particular embodiments installing an EFA shortcut at forwarding engine involves storing the EFA shortcut as EFA data . In some situations a network administrator may not know a priori what conditions an EFA shortcut may include for a particular flow. As an example because packet flows may differ from each other and the types of analysis that an application may perform may vary widely application may determine at run time one or more particular condition for suspension or resumption of the re direction of a particular packet flow to application . In particular embodiments application may automatically install an EFA shortcut at forwarding engine at run time to specify these conditions.

In a particular embodiment one of the metrics may track a number of packets in a particular one of the packet flows received at forwarding engine and one of the conditions that an EFA shortcut may include may specify that packets in the particular one of the packet flows are to be routed to the application that made the EFA request when the number of packets exceeds a predetermined value. In a particular embodiment one of the metrics may track a number of packets in a particular one of the packet flows received at forwarding engine and one of the conditions that an EFA shortcut may include may specify that packets in the particular one of the packet flows are to be routed to the application when the number of packets equals one of one or more predetermined values. In a particular embodiment one of the metrics may track an actual sequencing of packets in a particular one of the packet flows received at forwarding engine and one of the conditions that an EFA shortcut may include may specify that packets in the particular one of the packet flows are to be routed to the application when the actual sequencing differs from a predetermined sequencing. In a particular embodiment one of the conditions that an EFA shortcut may include may specify that packets in a particular one of the packet flows are to be routed to the application after a predetermined time interval has lapsed. In a particular embodiment one of the conditions that an EFA shortcut may include may specify that packets in a particular one of the packet flows are to be routed to the application when the packets individually or collectively comprise an abnormal combination of one or more TCP flags. In a particular embodiment one of the conditions that an EFA shortcut may include may specify that packets in a particular one of the packet flows are to be routed to the application when the packets individually or collectively comprise a particular TCP flag e.g. SYN . In a particular embodiment one of the conditions that an EFA shortcut may include may specify that packets in a particular one of the packet flows are to be routed to the application when a change that exceeds a predetermined value occurs in a TCP window size in the particular one of the packet flows. In a particular embodiment one of the conditions that an EFA shortcut may include may specify that packets in a particular one of the packet flows are to be routed to the application when a time interval between packets in the particular one of the packet flows exceeds a predetermined value. In a particular embodiment one of the conditions that an EFA shortcut may include may specify that the request not to route a particular one of the packet flows to the application is to be terminated if a predetermined event occurs e.g. when one of one or more other conditions are met . In a particular embodiment an EFA shortcut may include any suitable combination of two or more of these or other conditions.

Upon satisfying one or more of the specified conditions forwarding engine performs the action specified by the application in the corresponding EFA. More particularly if the action is to resume redirecting the corresponding flow to the requesting application then forwarding engine resumes redirecting the flow to the service engine for processing by the application. In particular embodiments in such case the action may in essence be realized by erasing the particular EFA. Alternately if the specified action is to re route the current packet then forwarding engine routes the current packet to the corresponding application for processing by the application.

Furthermore in particular embodiments an application may send a new EFA request for a particular flow to forwarding engine at anytime to update or change the conditions associated with the flow stored in EFA data . In particular embodiments an application may also send to forwarding engine an explicit erase command that causes the forwarding engine to erase the EFA entry for a particular flow at anytime. Sending an explicit erase command for a particular flow essentially removes the flow entry stored by forwarding engine causing the forwarding engine to resume redirecting the flow to the application .

Additionally or alternately in some embodiments an application may send an EFA request to forwarding engine that may request the forwarding engine to route a particular one of the packet flows to the corresponding service engine for processing by the application and identify one or more conditions for not routing particular ones of the packets in the particular one of the packet flows to the service engine. By way of example in a particular embodiment one of the metrics may track a number of packets in the particular one of the packet flows routed to the service engine and one of the conditions that an EFA shortcut may include may specify that packets in the particular one of the packet flows are not to be routed to the application when the number of packets exceeds a predetermined value. In a particular embodiment one of the metrics may track a number of bits in the packets in the particular one of the packet flows routed to the application and one of the conditions that an EFA shortcut may include may specify that packets in the particular one of the packet flows are not to be routed to the application when the number of bits exceeds a predetermined value. In a particular embodiment one of the conditions that an EFA shortcut may include may specify that packets in the particular one of the packet flows are not to be routed to the application after a predetermined time interval has lapsed.

Although the present disclosure describes and illustrates particular components carrying out particular steps of the methods of the present disclosure contemplates any suitable combination of any suitable components carrying out any suitable steps of the methods of .

Particular embodiments of switch or any of its components may be implemented as hardware software or a combination of hardware and software. As an example and not by way of limitation one or more computer systems may execute particular logic or software to perform one or more steps of one or more processes described or illustrated herein. One or more of the computer systems may be unitary or distributed spanning multiple computer systems or multiple datacenters where appropriate. The present disclosure contemplates any suitable computer system. In particular embodiments performing one or more steps of one or more processes described or illustrated herein need not necessarily be limited to one or more particular geographic locations and need not necessarily have temporal limitations. As an example and not by way of limitation one or more computer systems may carry out their functions in real time offline in batch mode otherwise or in a suitable combination of the foregoing where appropriate. One or more of the computer systems may carry out one or more portions of their functions at different times at different locations using different processing where appropriate. Herein reference to logic may encompass software and vice versa where appropriate. Reference to software may encompass one or more computer programs and vice versa where appropriate. Reference to software may encompass data instructions or both and vice versa where appropriate. Similarly reference to data may encompass instructions and vice versa where appropriate.

One or more computer readable tangible storage media may store or otherwise embody software implementing particular embodiments. A computer readable medium may be any medium capable of carrying communicating containing holding maintaining propagating retaining storing transmitting transporting or otherwise embodying software where appropriate. A computer readable medium may be a biological chemical electronic electromagnetic infrared magnetic optical quantum or other suitable medium or a combination of two or more such media where appropriate. A computer readable medium may include one or more nanometer scale components or otherwise embody nanometer scale design or fabrication. Example computer readable storage media include but are not limited to compact discs CDs field programmable gate arrays FPGAs floppy disks floptical disks hard disks holographic storage devices integrated circuits ICs such as application specific integrated circuits ASICs magnetic tape caches programmable logic devices PLDs random access memory RAM devices read only memory ROM devices semiconductor memory devices and other suitable computer readable storage media.

Software implementing particular embodiments may be written in any suitable programming language which may be procedural or object oriented or combination of programming languages where appropriate. Any suitable type of computer system such as a single or multiple processor computer system or systems may execute software implementing particular embodiments where appropriate. A general purpose computer system may execute software implementing particular embodiments where appropriate.

For example illustrates an example computer system suitable for implementing one or more portions of particular embodiments. Although the present disclosure describes and illustrates a particular computer system having particular components in a particular configuration the present disclosure contemplates any suitable computer system having any suitable components in any suitable configuration. Moreover computer system may have take any suitable physical form such as for example one or more integrated circuit ICs one or more printed circuit boards PCBs one or more handheld or other devices such as mobile telephones or PDAs one or more personal computers or one or more super computers.

Computer system may have one or more input devices which may include a keypad keyboard mouse stylus etc. one or more output devices which may include one or more displays one or more speakers etc. one or more storage devices and one or more storage media . An input device may be external or internal to computer system . An output device may be external or internal to computer system . A storage device may be external or internal to computer system . A storage medium may be external or internal to computer system .

System bus couples subsystems of computer system to each other. Herein reference to a bus encompasses one or more digital signal lines serving a common function. The present disclosure contemplates any suitable system bus including any suitable bus structures such as one or more memory buses one or more peripheral buses one or more a local buses or a combination of the foregoing having any suitable bus architectures. Example bus architectures include but are not limited to Industry Standard Architecture ISA bus Enhanced ISA EISA bus Micro Channel Architecture MCA bus Video Electronics Standards Association local VLB bus Peripheral Component Interconnect PCI bus PCI Express bus PCI X and Accelerated Graphics Port AGP bus.

Computer system includes one or more processors or central processing units CPUs . A processor may contain a cache memory unit for temporary local storage of instructions data or computer addresses. Processors are coupled to one or more storage devices including memory . Memory may include random access memory RAM and read only memory ROM . Data and instructions may transfer bidirectionally between processors and RAM . Data and instructions may transfer unidirectionally to processors from ROM . RAM and ROM may include any suitable computer readable storage media.

Computer system includes fixed storage coupled bi directionally to processors . Fixed storage may be coupled to processors via storage control unit . Fixed storage may provide additional data storage capacity and may include any suitable computer readable storage media. Fixed storage may store an operating system OS one or more executables EXECs one or more applications or programs data and the like. Fixed storage is typically a secondary storage medium such as a hard disk that is slower than primary storage. In appropriate cases the information stored by fixed storage may be incorporated as virtual memory into memory .

Processors may be coupled to a variety of interfaces such as for example graphics control video interface input interface output interface and storage interface which in turn may be respectively coupled to appropriate devices. Example input or output devices include but are not limited to video displays track balls mice keyboards microphones touch sensitive displays transducer card readers magnetic or paper tape readers tablets styli voice or handwriting recognizers biometrics readers or computer systems. Network interface may couple processors to another computer system or to network . With network interface processors may receive or send information from or to network in the course of performing steps of particular embodiments. Particular embodiments may execute solely on processors . Particular embodiments may execute on processors and on one or more remote processors operating together.

In a network environment where computer system is connected to network computer system may communicate with other devices connected to network . Computer system may communicate with network via network interface . For example computer system may receive information such as a request or a response from another device from network in the form of one or more incoming packets at network interface and memory may store the incoming packets for subsequent processing. Computer system may send information such as a request or a response to another device to network in the form of one or more outgoing packets from network interface which memory may store prior to being sent. Processors may access an incoming or outgoing packet in memory to process it according to particular needs.

Particular embodiments involve one or more computer storage products that include one or more computer readable storage media that embody software for performing one or more steps of one or more processes described or illustrated herein. In particular embodiments one or more portions of the media the software or both may be designed and manufactured specifically to perform one or more steps of one or more processes described or illustrated herein. In addition or as an alternative in particular embodiments one or more portions of the media the software or both may be generally available without design or manufacture specific to processes described or illustrated herein. Example computer readable storage media include but are not limited to CDs such as CD ROMs FPGAs floppy disks floptical disks hard disks holographic storage devices ICs such as ASICs magnetic tape caches PLDs RAM devices ROM devices semiconductor memory devices and other suitable computer readable storage media. In particular embodiments software may be machine code which a compiler may generate or one or more files containing higher level code which a computer may execute using an interpreter.

As an example and not by way of limitation memory may include one or more computer readable storage media embodying software and computer system may provide particular functionality described or illustrated herein as a result of processors executing the software. Memory may store and processors may execute the software. Memory may read the software from the computer readable storage media in mass storage device embodying the software or from one or more other sources via network interface . When executing the software processors may perform one or more steps of one or more processes described or illustrated herein which may include defining one or more data structures for storage in memory and modifying one or more of the data structures as directed by one or more portions the software according to particular needs. In addition or as an alternative computer system may provide particular functionality described or illustrated herein as a result of logic hardwired or otherwise embodied in a circuit which may operate in place of or together with software to perform one or more steps of one or more processes described or illustrated herein. The present disclosure encompasses any suitable combination of hardware and software according to particular needs.

Although the present disclosure describes or illustrates particular operations as occurring in a particular order the present disclosure contemplates any suitable operations occurring in any suitable order. Moreover the present disclosure contemplates any suitable operations being repeated one or more times in any suitable order. Although the present disclosure describes or illustrates particular operations as occurring in sequence the present disclosure contemplates any suitable operations occurring at substantially the same time where appropriate. Any suitable operation or sequence of operations described or illustrated herein may be interrupted suspended or otherwise controlled by another process such as an operating system or kernel where appropriate. The acts can operate in an operating system environment or as stand alone routines occupying all or a substantial part of the system processing.

Herein reference to a computer readable storage medium encompasses one or more non transitory tangible computer readable storage media possessing structure. As an example and not by way of limitation a computer readable storage medium may include a semiconductor based or other integrated circuit IC such as for example a field programmable gate array FPGA or an application specific IC ASIC a hard disk an HDD a hybrid hard drive HHD an optical disc an optical disc drive ODD a magneto optical disc a magneto optical drive a floppy disk a floppy disk drive FDD magnetic tape a holographic storage medium a solid state drive SSD a RAM drive a SECURE DIGITAL card a SECURE DIGITAL drive or another suitable computer readable storage medium or a combination of two or more of these where appropriate. Herein reference to a computer readable storage medium excludes any medium that is not eligible for patent protection under 35 U.S.C. 101. Herein reference to a computer readable storage medium excludes transitory forms of signal transmission such as a propagating electrical or electromagnetic signal per se to the extent that they are not eligible for patent protection under 35 U.S.C. 101.

The present disclosure encompasses all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend. Similarly where appropriate the appended claims encompass all changes substitutions variations alterations and modifications to the example embodiments herein that a person having ordinary skill in the art would comprehend.

