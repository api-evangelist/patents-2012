---

title: Method and apparatus for command abstraction
abstract: Methods and apparatus to provide command abstraction. In one embodiment, a method includes obtaining information on commands for a plurality of devices including devices of the same type having different command structures, receiving a generic command from a user directed to one of the devices of the same type, determining, using a computer processor, whether the generic command is supported, extracting parameters from the generic command, and generating from the extracted parameters and the generic command a device-specific command for execution by the one of the devices of the same type.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09268727&OS=09268727&RS=09268727
owner: EMC Company
number: 09268727
owner_city: Hopkinton
owner_country: US
publication_date: 20120628
---
As is known in the art storage systems such as cloud storage systems contain a relatively large number of hardware devices and components and software applications modules and components. With many different infrastructure devices in the cloud storage system it can be challenging to deal with constantly changing syntax for the commands and APIs application programming interfaces of individual devices. This can be especially true when the storage or SAN storage area network administrator wants to run the command over a CLI command line interface for debugging or troubleshooting a particular infrastructure device such as a SAN switch or a storage array. Also using the various element management systems with their own unique user interfaces is virtually impossible as it requires one to keep up with the ever changing cloud vendor providers. This creates personnel silos of tribal knowledge in the cloud management organizations since SAN and Storage administrators typically manually log in to the CLIs or element managers of individual infrastructure components attempt to remember the exact command syntax and then run the commands to debug component issues.

Exemplary method and apparatus embodiments of the invention abstract the underlying complexity of CLI protocols and or command syntaxes to individual infrastructure components and present to the end user an inventive interface that can send commands to various devices having different protocol syntax without the need to access individual CLIs and or remember device credentials. Exemplary commands include create zone create storage volume and the like. The results can then be used to validate health of the individual cloud components.

In one aspect of the invention a method comprises obtaining information on commands for a plurality of devices including devices of the same type having different command structures receiving a generic command from a user directed to one of the devices of the same type determining using a computer processor whether the generic command is supported extracting parameters from the generic command and generating from the extracted parameters and the generic command a device specific command for execution by the one of the devices of the same type.

The method can further include one or more of the following features providing a single user interface to obtain information from the user for the generic command that can be used for any one of the devices of the same type having different command structures a first device type includes storage devices a second device type includes blades a third device type includes SAN devices and a fourth device type includes switches the first device type includes storage devices from different vendors the second device type includes switches from different vendors the third device type includes SAN devices from different vendors and or the fourth device type includes switches from different vendors.

In another aspect of the invention an article comprises a computer readable medium containing non transitory stored instructions that enable a machine to perform obtaining information on commands for a plurality of devices including devices of the same type having different command structures receiving a generic command from a user directed to one of the devices of the same type determining using a computer processor whether the generic command is supported extracting parameters from the generic command and generating from the extracted parameters and the generic command a device specific command for execution by the one of the devices of the same type.

The article can further include one or more of the following features providing a single user interface to obtain information from the user for the generic command that can be used for any one of the devices of the same type having different command structures a first device type includes storage devices a second device type includes blades a third device type includes SAN devices and a fourth device type includes switches the first device type includes storage devices from different vendors the second device type includes blades from different vendors the third device type includes SAN devices from different vendors the fourth device type includes switches from different vendors.

In a further aspect of the invention a system comprises a command abstraction module comprising a user interface to receive generic commands from a user a command processor module to receive the generic command and confirm the generic command is supported a parameter extraction module to extract parameters from the generic command a command generator module to create a device specific command from the extracted parameters and the generic command the device specific command having a syntax specific to particular device type wherein the command abstraction module can generate device specific commands for a plurality of device types from the generic command.

The system can further include one or more of the following features the plurality of device types includes components from different vendors the system comprises a cloud storage system comprising a compute layer a storage layer a network layer coupled between the compute and storage layer and a management layer to control the system wherein the plurality of device types include storage components having different command line interfaces CLIs and or the plurality of device types include a first device type including storage devices a second device type including blades a third device type including SAN devices and a fourth device type including switches.

The compute domain comprises components such as blade servers chassis and fabric interconnects that provide the computing power for the platform. The storage domain comprises the storage components for the platform. The network domain comprises the components that provide switching and routing between the compute and storage domains within and between platforms and to the client or customer network.

The management domain can include a number of applications to perform various functions for overall control configuration etc of the various platform components. For example management applications can include a virtualization function such as VSPHERE VCENTER by VMware of Palto Alto Calif. A further management application can be provided as the Unified Computing System UCS by Cisco. It is understood that the blade chassis and fabric interconnection can be considered part of the UCS. Another management application can include a management interface such as EMC UNISPHERE to provide a flexible integrated experience for managing existing storage systems such as CLARHON and CELERRA storage devices from EMC. A further management application includes a platform element manager such as Unified Infrastructure Manager UIM by EMC for managing the configuration provisioning and compliance of the platform.

It is understand that these management interfaces are native element managers. Exemplary embodiments of the invention may not rely on the element manager GUI interfaces but rather the native command line and or API based interfaces to communicate with the cloud components.

The unified infrastructure manager further includes a change and configuration management module a policy based compliance and analysis module a unified infrastructure provisioning module a consolidation topology and event service module and an operational awareness module . The various modules interact with platform elements such as devices in compute network and storage domains and other management applications.

In one aspect of the invention a uniform infrastructure management module includes a command abstraction module to receive generic user commands and process the commands for various types of physical infrastructure logical services virtual applications and tenant organizations.

It is understood that various vendor specific terminology product name jargon etc. may be used herein. It is further understood that such vendor specific information is used to facilitate an understanding of embodiments of the invention and should not limit the invention in any way. Any specific vendor information should be construed to mean a generic product function or module.

Some exemplary items are set forth below. It is understood that one of ordinary skill in the art is familiar with the generic architecture and functionality of a vendor specific terms.

UIM Provisioning or UIM P EMC Unified Infrastructure Management Provisioning that provides simplified management for VCE VBLOCK by managing the components of VBLOCK platforms as a single entity and easily define and create infrastructure service profiles to match business requirements.

VBLOCK A pre architected and pre qualified environment for virtualization at scale storage fabric compute hypervisor management and security.

Model Service Adapter A service that uses the RESTful interface to expose the types of resources and instances of the data sources.

In an exemplary embodiment the command abstraction module forms part of the management domain for the cloud storage system. In an alternative embodiment the command abstraction module forms a part of the management domain for a particular domain such as the management module for the storage domain. It is understood that the command abstraction module can be located in any suitable location within the cloud system in which the module can interact with the user and the resources of interest.

The command abstraction module includes a user interface to enable interaction with the user such as to receive user commands. A command processor module receives generic commands from the user and processes the commands for the target resource. A parameter extraction module extracts parameters from the generic command generated by the user for insertion into the resource specific command. A native component command generator module receives parameter information from the parameter extraction module and formats information from the command processor module to generate the resource specific command in the format for the target resource as explained more fully below. In an exemplary embodiment a user command can be processed for any one of a first second or third device all of which have different command interfaces.

A command and result collection module collects and stores command information from the various devices. The system executes the native command structures on the devices using remote communication channels then collects the results by reading the API or command output. In case of raw command line interfaces the output may be collected using terminal scraping techniques for example. The system then validate and transforms the results into the normalized model using data transformation techniques such as regex XML XSD and or XSLT. In general raw configuration data is extracted parsed and normalized into a generic model for a particular type of resource. The resource model is persisted as cloud component state in a relational database. The simplified commands then act on the normalized data so user does not need to know cloud component specific attributes or command parameters. Essentially this abstracts cloud component complexities behavior and provides end users a simplified interface.

A SYMMETRIX storage device and a CLARIION device are system resources to which the user can provide commands via the command abstraction module. Illustrative CLI commands are shown for the SYMMETRIX device.

The thin pool ID field is the identifier of the storage pool as identified by the generic model which can uniquely translate this to an actual storage pool array entity. The size field is the size of the required storage volume to be created. The RAID field defines the protection level for the volume. The volume name list field includes the user assigned names for the storage volumes. The number of volumes field list includes the number of volumes to create so a bulk operation can be performed. The Symmetrix specific commands are stringed together by the underlying abstraction layers to do the task on symmetrix and similarly for the Clariion commands .

Note that for SYMMETRIX all volumes are created together and then named separately while on cCLARIION each volume is created separately and named during creation. This illustrates how the command behavior and syntax is abstracted.

Command syntax and other intelligence on how to execute the commands is programmed into modules that are customizable and pluggable so support for new devices command syntaxes can easily be added. Models are domain specific so that for example a SAN model is different from a storage model. With this arrangement cloud components from various vendors providing functions in a particular domain can be served by the same generic model.

In step a user command is received and inspected in step . In step it is determined whether the command is supported. If not processing terminates if there are no generic commands supported for a device. In one embodiment this is determined statically via declarative means in the system. If so in step parameters see e.g. in the user command are extracted. In step the user input is accepted. In step the input is validated against the device model state. For example if the user wants to create a zone member in a particular san zone the system can validate if the supplied zone name is in the persisted data model before attempting to create a zone member. This helps to indicate errors early.

In step it is determined whether the input has been validated against the model. If not processing terminates. If so in step a device specific command is created containing the parameters provided by the user command and formatted for the syntax required for the target device. The device mediation software layer transforms generic methods to device specific methods and device specific output to a generic model. Device mediation also encapsulates device specific functions and behavior so that a common generic interface can be presented to the end user. In step a connection is made with the target device and the command is executed by the target device in step . In step the command results are collected and or displayed for the user.

In a command abstraction module obtains command information for resources in a cloud storage system. In one embodiment devices in the cloud system expose via a user interface layer their operation command structure to the command abstraction module. Exemplary operations having specific commands include create zone delete zone create volume delete volume etc. In the user command is processed in a processing layer to extract parameters and format a device specific command in the form of an XML command payload for example for the target device. In a device mediation layer interprets command wrappers and invokes device specific modules. The mediation layer formats a command for the target device such as a CISCO BROCADE or other SAN module a CISCO HP or other blade module or an EMC SYMMETRIX EMC VNX or other storage module. The device specific command is then sent in to the cloud infrastructure device.

As discussed above pluggable software modules are programmed to understand the generic model and parameters of generic commands. These modules have the intelligence to extract the individual parameters and generate the device specific command syntax. For example for creation of a storage volume see e.g. the required size raid level etc. are provided by the user and the modules extract the individual values of the size raid level and other parameters and programmatically build the command syntax by stringing together these values in the order and syntax that is supported for the particular device.

In an exemplary screen display includes fields into which the user can enter information for the create zone command. Exemplary fields include a VSAN ID field a Zoneset Name field a Zone Name field an optional Zone Member List field and a Re activate Zoneset field

Processing is not limited to use with the hardware and software described herein and may find applicability in any computing or processing environment and with any type of machine or set of machines that is capable of running a computer program. Processing may be implemented in hardware software or a combination of the two. Processing may be implemented in computer programs executed on programmable computers machines that each includes a processor a storage medium or other article of manufacture that is readable by the processor including volatile and non volatile memory and or storage elements at least one input device and one or more output devices. Programs may be implemented in a high level procedural or object oriented programming language to communicate with a computer system. However the programs may be implemented in assembly or machine language. The language may be a compiled or an interpreted language and it may be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network. A computer program may be stored on a storage medium or device e.g. CD ROM hard disk or magnetic diskette that is readable by a general or special purpose programmable computer for configuring and operating the computer when the storage medium or device is read by the computer to perform processing.

One skilled in the art will appreciate further features and advantages of the invention based on the above described embodiments. Accordingly the invention is not to be limited by what has been particularly shown and described except as indicated by the appended claims. All publications and references cited herein are expressly incorporated herein by reference in their entirety.

