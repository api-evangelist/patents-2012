---

title: Securing execution of customer-supplied network page generation code
abstract: Disclosed are various embodiments for securing execution of page generation code supplied by customers. The page generation code may be instrumented with code that facilitates monitoring of one or more resources consumed by the page generation code. Various compile-time checks relating, for example, to code size and whether exception-handling code is present may be performed. The page generation code is executed to generate a network page in response to a request obtained from a client. One or more resource consumption limits are enforced upon the page generation code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08874688&OS=08874688&RS=08874688
owner: Amazon Technologies, Inc.
number: 08874688
owner_city: Reno
owner_country: US
publication_date: 20120111
---
Compliance with Payment Card Industry Data Security Standards PCI DSS and or other security standards may present challenges for online merchants. For this and other reasons online merchants may elect to have their electronic commerce platform managed by a third party electronic commerce hosting provider who ensures compliance with the security standards. However merchants may lose flexibility in customizing or configuring their network sites when using such a hosted solution as compared with a self managed solution.

The present disclosure relates to securing execution of customer supplied network page generation code on a hosted network page server platform. Merchants and other owners of network page sites may contract with hosting providers to generate and serve up their network sites in a managed environment. For example a hosting provider may offer an end to end hosted electronic commerce platform that maintains an item catalog generates detail pages for items facilitates searching for items facilitates browsing for items by way of a taxonomy or by way of suggested items allows for customer reviews of items and so on. Such a hosted electronic commerce platform may include functionality relating to shopping carts order placement order management and fulfillment and or other functionality. Such a platform offers merchants many advantages over self managed solutions.

Merchants may wish to retain stylistic and content control over their online presence even if it leverages an end to end hosted electronic platform. However the hosting provider may be reluctant to grant the merchant access to execute arbitrary page generation code due to security concerns and compliance requirements for Payment Card Industry Data Security Standards PCI DSS and or other security standards. Various embodiments of the present disclosure facilitate customer control over network page generation with a hosted network site. As used herein the term customer may also include developers acting on behalf of customers of the hosting provider.

In various embodiments a merchant or other customer of the hosting provider is able to upload page generation code for execution server side. Data aggregation may be performed on behalf of the page generation code so that the page generation code does not contact data sources directly. Various compile time restrictions may be placed on the page generation code. Also various run time restrictions on resource consumption by the page generation code may be implemented by instrumenting the page generation code and or the environment that executes the page generation code. Consequently computing resources of the hosting provider are protected against accidental or intentional misuse. Although the present application refers to network pages and page generation it is understood that the principles herein may be extended to data that is generated in a managed environment. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments relating to customer supplied page generation code. The networked environment includes a computing environment in data communication with one or more clients by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. The computing environment may be operated by a hosting provider to host network sites for various customers.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed by the computing environment for example include a plurality of data sources . . . N a data aggregation service a network page generation environment a network page server application a network site configuration application and other applications services processes systems engines or functionality not discussed in detail herein. The data sources are executed to provide various data used in generating network pages for network sites of customers of the hosting provider. Where the customers are merchants the data provided by the data sources may relate to electronic commerce data such as for example item catalog data item suggestions data shopping cart data checkout data order data and so on. In one embodiment the data sources may comprise web services. In another embodiment the data sources may comprise files or other forms of data stores.

The data aggregation service is executed to aggregate data from the data sources for use in generation of network pages . The data aggregation service may employ parallel fetching to reduce latency when data is aggregated from multiple data sources .

The network page generation environment is executed to generate the network pages in response to page requests obtained from clients . The network pages may correspond to web pages gopher pages mobile application screens and or other forms of network content. Where the customer is a merchant the network pages may correspond to home pages catalog pages item detail pages shopping cart pages checkout pages order confirmation pages and so on. Such network pages may facilitate selecting items for purchase rental download lease or other form of consumption. In addition where the customer is a merchant the network page generation environment may include or be in communication with an electronic commerce system that performs various backend functions in order to facilitate the online purchase of items.

The network page generation environment may execute page generation code in order to generate the network pages . The page generation code may correspond to a default version supplied by the hosting provider or may correspond to a customized version supplied by the customer. In some cases the page generation code may be transformed or compiled from one code format to another and or may be interpreted. As a non limiting example the page generation code may correspond to JavaServer Pages JSPs which may be compiled into Java servlets which in turn may be compiled into bytecode which may be executable by the network page generation environment .

To this end the network page generation environment may include a Java Virtual Machine JVM and a servlet container such as Apache Tomcat or another servlet container. In one embodiment the page generation code may be instrumented in order to facilitate monitoring of one or more resources consumed by the page generation code . Such resources may correspond to execution time processor time memory allocation data written to an output stream and so on. In various embodiments the network page generation environment may include one or more tag factories . Such a tag factory may correspond to a JSP tag factory a JSP tag library or other similar components. For example the page generation code may be configured to call the tag factory in order to invoke particular functionality. In one embodiment the tag factory may be instrumented in order to enforce one or more resource consumption limits on the execution of the page generation code .

The network page generation environment may be configured to obtain aggregated data from the data aggregation service and to provide the aggregated data to the page generation code for example as a set of predefined implicit variables or by another approach. The network page generation environment may act as a sandbox for the page generation code to enforce restrictions on application programming interface API calls access to the data source and or other resources in the computing environment . As a non limiting example where the network page generation environment includes a JVM a security manager may be installed in the JVM to deny access by the page generation code to system data data of other customers and so on.

The network page server application is configured to obtain the page requests from the client over the network to generate network pages in response to the page requests using the network page generation environment and to return the network pages to the client by way of the network . The network page server application may correspond to a commercially available hypertext transfer protocol HTTP server such as for example Apache HTTP Server Apache Tomcat Microsoft Internet Information Services IIS and or other servers.

The network site configuration application is executed to facilitate customer configuration of network sites. To this end the network site configuration application may enable uploading and configuration of the page generation code configuration of various parameters associated with the operation of the network site order fulfillment management item catalog management and or other functionality. The network site configuration application may implement an HTTP server a web based distributed authoring and versioning WebDAV server a file transfer protocol FTP server and or other servers. The network site configuration application may include various components and or may invoke various components of the network page generation environment to enforce compile time restrictions on the page generation code .

The data stored in the data store includes for example network site data network site configuration data customized page generation code default page generation code a page generation resource consumption data page generation restrictions monitoring code enforcement code and potentially other data. The network site data corresponds to data used in the generation of the network pages for the hosted network sites of the merchants or other customers. Such data may include for example templates hypertext markup language HTML text extensible markup language XML cascading style sheets CSS images audio video animations and or other data.

The network site configuration data may store parameters and or other data for controlling the operation and appearance of the hosted network site. Such data may control various electronic commerce functionality such as for example item catalogs item taxonomies item searching item recommendations shopping carts checkout order fulfillment and or other functionality. The customized page generation code corresponds to page generation code which is created or customized by merchants or other customers. The default page generation code may correspond to a default set of page generation code for a merchant or other customer to use for a base functionality for a network site. The default page generation code may generate network pages having for example a default appearance and behavior for a generic electronic commerce site.

The page generation resource consumption data may indicate the computing resources consumed by the page generation code and or the network page generation environment in generating network pages for customer network sites. The page generation resource consumption data may include statistics such as average execution time memory consumption data written and so on for many different instances of page generation code for many different customers of the hosting provider. The page generation restrictions may configure various restrictions to be placed on the page generation code by the network page generation environment . As a non limiting example where the page generation code corresponds to JSP code the network page generation environment may restrict the JSP code from including scriptlets and or various API calls. Various functionalities may be whitelisted or blacklisted as the case may be. Such restrictions may be configured by way of parameters in the page generation restrictions .

The monitoring code may correspond to various code segments that are configured to facilitate monitoring of the resource consumption of the page generation code when executed by the network page generation environment . The enforcement code may correspond to various code segments that are configured to facilitate enforcement of resource consumption limits and or other restrictions for the page generation code when executed by the network page generation environment . The network page generation code the tag factory and or the network page generation environment may be instrumented with the monitoring code and or the enforcement code .

The client is representative of a plurality of client devices that may be coupled to the network . The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client may include a display . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc.

The client may be configured to execute various applications such as a browser and or other applications. The browser may be executed in a client for example to access and render network pages served up by the computing environment and or other servers thereby generating a rendered network page on the display . The client may be configured to execute applications beyond the browser such as for example code development applications file transfer applications mobile applications email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin a merchant or other customer of a hosting provider associated with the computing environment configures a network site to be hosted through the computing environment . The network site may have a common domain that is shared by multiple customers of the hosting provider or the network site may correspond to a unique domain for each customer. The merchant or other customer may adopt default page generation code for various network pages accessible through the network site. Alternatively or additionally the merchant or other customer may create customized page generation code for generating some or all of the network pages accessible through the network site.

The merchant or other customer may interact with the network site configuration application to customize or make changes to the network site. In various cases the customer may edit the page generation code directly through the network site configuration application or the customer may upload replacement page generation code . Through this system customers are able to control generation of network pages for their network sites despite using a hosted infrastructure and potentially a hosted electronic commerce platform.

When a customer uploads or edits page generation code the network site configuration application and or the network page generation environment may perform various verifications on the static code. Such verifications may be referred to as compile time checks but need not occur at the same time the page generation code is compiled and in some cases the page generation code may be interpreted rather than compiled. Such verifications may be performed as configured by the page generation restrictions .

Some non examples of the static code verifications will now be discussed. The data size of the page generation code may be compared with a maximum size threshold to determine whether the page generation code meets the maximum size threshold. That is to say it is determined whether the page generation code is unacceptably large which may be a security risk.

Also the page generation code may be examined to determine whether it contains any exception handling code. In one embodiment runtime enforcement of security restrictions may be made by throwing exceptions and exception handling code such as try and catch blocks may therefore interfere with such enforcement. Further the page generation code may be examined to determine whether it includes scriptlets restricted API calls restricted data accesses and so on. If the page generation code fails these compile time checks the page generation code may be rejected i.e. not accepted and not used in production for generation of network pages . If the page generation code is not rejected it may then be ready to be compiled if applicable.

The page generation code is able to access the aggregated data generated by the data aggregation service . In some cases the page generation code may declare various data that it accesses which is then aggregated by the data aggregation service . In other cases the data aggregation service may provide a standard set of data from the data sources . The set of data may depend on the type of network page e.g. whether the network page is a checkout page catalog page order confirmation page and so on. In one example the aggregated data may be associated with the hosted electronic commerce platform provided by the hosting provider. The aggregated data may be provided to the page generation code by way of implicit variables or other variables that are available in the scope of the page generation code . The page generation code may be configured to use all of the predefined variables or a subset of the predefined variables. The page generation code may be restricted from accessing the data sources directly. For example a JVM in the network page generation environment may be configured to deny access by the page generation code to system variables other than certain implicit variables.

In operation the client sends a page request to the network page server application for some network page from a network site of a customer. The network site is hosted on behalf of the customer by the hosting provider who operates the computing environment . Where the customer is a merchant the hosting provider may operate a hosted electronic commerce platform in conjunction with the computing environment . The page request is provided to the network page generation environment which then obtains the aggregated data from the data aggregation service . The aggregation may be performed automatically in response to the page request or in advance of the page request . The data aggregation service fetches the aggregated data from one or more data sources .

The page generation code for the requested network page is executed by the network page generation environment . The network page generation environment facilitates access to the aggregated data by the page generation code . The page generation code generates the network page and the network page server application serves up the network page to the client in response to the page request .

In some embodiments the page generation code is restricted from accessing one or more of the data sources . The customer supplied page generation code may be isolated from one or more of the data sources for purposes of complying with PCI DSS and or other security standards. Consequently the data from the data sources may be accessible only as aggregated data provided by the data aggregation service . It is noted that the data aggregation service may generate the aggregated data in response to the page request in response to other events or at other times as desired.

The page generation code may be analyzed for compliance with one or more policies according to the page generation restrictions at runtime. Although compile time checks may be performed compile time checks may be insufficient to evaluate the compliance of the page generation code fully. Where the page generation code corresponds to a Turing complete programming language it may be impossible or impractical to assess when the page generation code will finish which may necessitate various runtime compliance verifications. Runtime verifications may include acceptable content of the network page API usage usage of scriptlets or other disallowed language features and so on. If the page generation code is determined to be non compliant the page generation code may be unexecuted terminated if already executing replaced with default page generation code or another action may be taken.

In particular the page generation code as it is executed may be evaluated for compliance with one or more resource consumption limits. Such limits may pertain to memory allocation processor usage execution time data written to an output data stream i.e. the network page or a portion thereof and or other resources. If page generation code runs excessively long uses excessive memory writes excessive data and or otherwise excessively consumes resources the performance of other page generation code in the computing environment may be impacted. Such excessive resource consumption may result from coding defects compromised code and or other intentional or inadvertent causes. Where data is provided by the data aggregation service it may be relatively simple to place broad restrictions on the page generation code to assure compliance with security policies and resource consumption limits. Also where the data is provided by the data aggregation service processor usage and execution time of the page generation code may be considered roughly equivalent due to lack of blocking for input output operations.

It may be difficult to assess resource consumption of particular page generation code through native facilities of a JVM or an operating system. Thus the page generation code the tag factory the JVM and or other components in the network page generation environment may be instrumented to monitor resource consumption of the page generation code . For example monitoring code and or enforcement code may be added to the source code of the page generation code before it is compiled or interpreted to the page generation code as it is being interpreted or executed to compiled bytecode of the page generation code with bytecode weaving to classes of the JVM to classes of the tag factory and so on.

In one embodiment whenever the page generation code invokes particular functionality that is known or assumed to have a particular resource consumption the particular resource consumption may be recorded or reported. The resource consumption may be then compared with various resource consumption limits. The resource consumption may be actual or estimated. As a non limiting example a particular functionality may be associated with three memory units. When the functionality is invoked by the page generation code three memory units may be added to the total for the page generation code . The total may then be compared with some limit for memory allocation to assess compliance with the limit. Such resource consumption may be in actual units e.g. bytes seconds etc. or in a relative measurement unit such as normalized or approximate units to facilitate relative consumption comparison.

In some situations a resource consumption limit may be dynamically determined. As an example a resource consumption limit may be dynamically determined relative to the available resources in the computing environment . As another example a resource consumption limit may be dynamically determined with respect to some statistical measure of resource consumption determined from monitoring execution of multiple instances of page generation code of multiple customers. Such information may be stored and available from the page generation resource consumption data . Accordingly in one case current resource consumption may be compared to average resource consumption to determine whether the current resource consumption is significantly above average e.g. meeting some relative threshold .

In one embodiment the page generation code may be executed in an elastic computing resource which can expand and contract with respect to computing capacity in response to demand for the capacity by the page generation code . Such usage may be monitored or metered for billing and or other purposes. To this end the elastic computing resource usage may be recorded in the page generation resource consumption data . This recognizes that page generation code for some customers may be more computing resource intensive than page generation code for other customers. Accordingly an elastic amount of resources may be provided such that the customer is billed for what is used in terms of machine instances memory processor time disk space and or other resources that are allocated for the customer.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the network site configuration application according to the embodiments discussed in connection with . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network site configuration application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the network site configuration application obtains page generation code from a customer whose network site is hosted by the hosting provider who operates the computing environment . The network site configuration application may be configured to authenticate a client associated with the customer. In box the network site configuration application determines whether the page generation code is valid. In various examples validity may depend on compliance with security policies and other restrictions that may be evaluated at or before compile time. If the page generation code is not valid the network site configuration application rejects the page generation code in box . An error may be presented to the customer. Thereafter the portion of the network site configuration application ends.

If the page generation code is valid the network site configuration application proceeds from box to box . Even assuming that the page generation code is determined to be valid by the network site configuration application validity checks may still need to be performed by the network page generation environment at runtime. In box the network site configuration application compiles the page generation code . For example the network site configuration application may compile the page generation code from a JSP into a servlet. The resulting servlet code may also be compiled into bytecode for execution by a Java Virtual Machine JVM or directly by a processor circuit of the computing environment . In some embodiments the page generation code may be interpreted rather than compiled. Also in some embodiments the page generation code may be instrumented with monitoring code and or enforcement code to facilitate runtime compliance evaluation and enforcement.

In box the network site configuration application configures the network page generation environment to execute the compiled page generation code for one or more network pages for the network site of the customer. In box the network site configuration application may store configuration data that configures the data aggregation service to provide a set of aggregated data to the page generation code . Thereafter the portion of the network site configuration application ends.

Continuing on to shown is a flowchart that provides one example of the operation of a portion of the network page generation environment according to the embodiments discussed in connection with . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network page generation environment as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the network page generation environment obtains a page request from the client by way of a network page server application . The page request indicates a network page from a network site of a customer. The network site is hosted by the hosting provider who operates the computing environment . In box the network page generation environment obtains or fetches page generation code corresponding to the requested network page . In box the network page generation environment aggregates various data pertaining to the customer from one or more data sources by way of the data aggregation service .

In box the network page generation environment executes the page generation code . In doing so the network page generation environment may perform various runtime checks to ensure that the page generation code does not include any impermissible code or content. In box the network page generation environment provides the aggregated data to the page generation code as predefined implicit or environment variables.

In box the network page generation environment assembles the network page using the output of the page generation code and potentially other data. In box the network page generation environment sends the generated network page to the client in response to the page request . Thereafter the portion of the network page generation environment ends.

Moving on to shown is a flowchart that provides one example of the operation of another portion of the network page generation environment according to the embodiments discussed in connection with . In particular the flowchart of corresponds to the portion of the network page generation environment represented in box of the flowchart of . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the other portion of the network page generation environment as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the network page generation environment determines various static and dynamic resource consumption limits for the page generation code . For example one or more resource consumption limits may be statically configured in the page generation restrictions . In addition one or more resource consumption limits may be dynamically determined based at least in part on system state and or averages or other statistical measures of resource consumption of other page generation code .

In box the network page generation environment begins execution of the page generation code . Such execution may relate to execution of bytecode or source code as the case may be. In box a compliance check is invoked. Such a compliance check may be invoked for example in response to the page generation code invoking functionality from the tag factory periodically or at some other time. In box the network page generation environment assesses whether the resource consumption of the page generation code meets or exceeds established thresholds or limits.

If the network page generation environment determines that the page generation code meets or exceeds established limits the network page generation environment determines in box whether execution of the page generation code is to be terminated. If execution is to be terminated the network page generation environment terminates execution of the page generation code in box . An error may be generated and sent to the client . Thereafter the portion of the network page generation environment ends. If execution is not to be terminated the network page generation environment may allow a specific memory allocation to fail throttle resources provided to the page generation code and or take another action to reduce resource consumption. Thereafter the network page generation environment continues to box .

If the resource consumption of the page generation code complies with the limits the network page generation environment moves from box to box . In box the network page generation environment allows continued execution of the page generation code . Next the network page generation environment moves to box and determines whether another compliance check is invoked. If another compliance check is invoked the network page generation environment returns to box . If another compliance check is not invoked the execution of the page generation code finishes normally in box . Thereafter the portion of the network page generation environment ends.

With reference to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device corresponds to a representative computing device which may be employed in the computing environment . The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the data aggregation service the data sources the network page generation environment the network page server application the network site configuration application and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the data aggregation service the data sources the network page generation environment the network page server application the network site configuration application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the network site configuration application and the network page generation environment . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the data aggregation service the data sources the network page generation environment the network page server application and the network site configuration application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media.

More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

