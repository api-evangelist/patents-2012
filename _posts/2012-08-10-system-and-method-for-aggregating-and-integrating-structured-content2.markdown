---

title: System and method for aggregating and integrating structured content
abstract: The present invention provides a centralized system and method for accessing, organizing, personalizing, and managing structured content located in disparate structured content systems. Structured content embedded within a particular system may be organized with structured content from other structured content systems. A processing module accesses the structured content located in the structured content systems using a conduit application programming interface. The processing module uses a display application programming interface to communicate with requesting systems. Metadata regarding the structured content is stored in a repository and the structured content may be used and viewed on a plurality of requesting systems.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09594805&OS=09594805&RS=09594805
owner: Teradata US, Inc.
number: 09594805
owner_city: Dayton
owner_country: US
publication_date: 20120810
---
This application is a divisional application of U.S. patent application Ser. No. 10 462 872 entitled SYSTEM AND METHOD FOR AGGREGATING AND INTEGRATING STRUCTURED CONTENT by David Corlene George Hitchcock Mike Klinkenberg Randy Matthews and Eric Felice filed on Jun. 17 2003 now abandoned.

The present invention is generally directed to aggregating and integrating structured content as defined and generated by structured content systems. More particularly the present invention is directed to aggregating and integrating structured content that is embedded in multiple disparate structured content systems to provide the enterprise or business organization with a combined view of structured content available across a plurality of structured content systems.

The advent of the information age has resulted in systems of automation and a variety of software applications for major business functions such as accounting payroll sales manufacturing logistics and so on. Over time each of these applications generates a tremendous amount of data information and content within the business context of the particular application. The content within each of these applications may be classified as unstructured and structured content.

Unstructured content is essentially data or files without an organizational structure that defines the content. Common examples of unstructured content include text documents images presentation materials drawings email video and audio files.

Structured content is data transformed through a series of business rules programming logic and organizational constructs as defined by an authoring application. Structured content is often a virtual logical representation of content that is not physically stored on a network but rather instantiated by an application upon request. While unstructured content is typically exposed and registered in file directories for users and applications to search and access structured content is typically embedded within an application lying behind proprietary application specific schemes and mechanisms for defining accessing organizing and displaying content. Because structured content is embedded within each corresponding application it is difficult to list organize and access structured content in a combined view. Examples of applications generating structured content include customer relationship management CRM software enterprise resource planning software supply chain management software general ledger financial software human resources software and reporting software.

A specific class of applications devoted to creation and management of structured content are business intelligence systems. Business intelligence systems represents a class of software products that transform data into structured content to assist individuals such as employees in the discovery of trends patterns and associations to better understand operations opportunities and market trends. Business intelligence software products currently utilize different architectures application logic business rules and security mechanisms for generating structured content.

Because different structured content applications have different features and functionality many enterprises deploy a best of breed approach by installing specialized applications that handle a specific group of business processes.

However current structured content systems utilize a unique proprietary security and access mechanism and generate structured content according to the unique business rules features and data available in the context of the application. The learning curve required to proficiently utilize each system can be high. This often results in an inability or reluctance by the knowledge workers to utilize the full data resources within the enterprise.

Enterprises have therefore become frustrated with the inability to locate access and align structured content to business processes and analytic thought processes necessary to work more effectively and efficiently. For example sales information may be available within application A inventory information is only available in application B and costs may be accessible only in application C. In essence each application has imposed an architectural and contextual boundary to the structured content offered. Therefore an employee needing all three types of structured content must know where to find each application remember multiple passwords locate the appropriate structured content within the application and switch between the different application interfaces to use the content. Furthermore if an employee intends to integrate the information into one report or view the employee would have to export the information out of each system and bring it into some common format e.g. a spreadsheet and then generate rules to integrate the information e.g. formulas in a spreadsheet .

The present invention provides a system and method for aggregating and integrating structured content. In one embodiment of the invention for aggregating structured content one of a plurality of structured content systems is accessed using a conversion module. Structured content contained in at least one of the plurality of structured content systems is selected and data elements within the at least one of the plurality of structured content systems are identified. A hierarchy of the data elements is identified and parameters that define the selected structured content are retrieved. The data elements the hierarchy and parameters that define the selected structured content are retrieved and the parameters are stored in a metadata repository.

In another embodiment for aggregating structured content navigation commands are received from a requesting system and system access parameters for accessing at least one of the plurality of structured content systems are retrieved. At least one of the plurality of structured content systems is navigated based on the navigation commands and one of a plurality of structured content systems is accessed using a conversion module. Structured content contained in at least one of the plurality of structured content systems is selected and data elements within the at least one of the plurality of structured content systems are identified. A hierarchy of the data elements is identified and parameters that define the selected structured content are retrieved. The data elements the hierarchy and parameters that define the selected structured content are retrieved and the parameters are stored in a metadata repository. Each of the foregoing is repeated for a plurality of structured content contained in the plurality of structured content systems.

In a further embodiment for accessing structured content a request for structured content is received from one of a plurality of requesting systems. A first plurality of structured content parameters are obtained from a metadata repository wherein the first plurality of structured content parameters define structured content in a first one of a plurality of structured content systems and wherein the metadata repository contains a second plurality of structured parameters that define structured content contained in a second one of the plurality of structured content systems. The structured content parameters are submitted through an API to a communications driver in communication with one of the plurality of structured content systems and structured content output is received based on the submitted structured content parameters.

In another embodiment for integrating structured content a list of data elements from at least one of a plurality of structured content systems is generated. A transformation index is generated based on the data elements and a list of hierarchies is generated based on the data elements that span one or more structured content systems.

In an additional embodiment a system for processing structured content in a plurality of structured content systems comprises an access driver in communication with at least one requesting system. A content driver is in communication with one of the plurality of structured content systems and a processing module in communication with the access driver and the content driver for identifying data elements within one of the plurality of structured content systems and identifying at least one hierarchy of the data elements. A first conversion module is in communication with the access driver and the processing module and converts information sent to and from the access driver and the processing module. A second conversion module is in communication with the processing module and the content driver and converts information sent to and from the processing module and the content driver. A metadata repository stores a plurality of metadata objects created by the processing module.

The following disclosure provides many different embodiments or examples for implementing different features of a system and method aggregating and integrating structured content. Specific examples of components processes and implementations are described to help clarify the invention. These are of course merely examples and are not intended to limit the invention from that described in the claims. Well known elements are presented without detailed description in order not to obscure the present invention in unnecessary detail. For the most part details unnecessary to obtain a complete understanding of the present invention have been omitted inasmuch as such details are within the skills of persons of ordinary skill in the relevant art.

Referring to one embodiment of the system for aggregating and integrating structured content is shown. The structured content systems are accessible to the system and may provide its own respective independent method or methods of navigating through the structured content. Some structured content systems create structured content from raw data while other structured content systems serves as repositories of structured content created by other systems or applications. Structured content systems generally comprise three categories business intelligence systems packaged analytic systems and custom or legacy applications that provide reporting functionality. In this embodiment one structured content system for each category is shown. However it is understood that any combination of structured content systems or other forms of content systems could be used in the present invention.

The first structured content system in this embodiment is a business intelligence system . The business intelligence system is a structured content system that transforms data into structured content that may be business views to assist individuals such as employees in the discovery of trends patterns and associations to analyze operations opportunities and market trends. Certain business intelligence systems allow companies to gain access to data stored across multiple data sources. Business intelligence software products currently utilize different architectures and approaches for defining information storing combined views of the business accessing the raw data and administering security. Examples of business intelligence systems might include software systems from Cognos Business Objects SAS and Hyperion.

The second structured content system in this embodiment is a packaged analytic system . The packaged analytic system is a reporting architecture created for active reporting of data within specific applications and their business function domain. Packaged analytics often serve as the reporting and analysis components to broad reaching business software suites such as customer relationship management software CRM software enterprise resource planning ERP software supply chain management software general ledger financial software and human resources software. Packaged analytics also produce structured content for data within their application s business function domain. Examples of packaged analytic systems might include software systems from PeopleSoft SAP and Siebel.

The third structured content system in this embodiment is a custom or legacy application that provides reporting functionality . Examples of applications that provide reporting functionality include a custom written inventory application or a mainframe customer call tracking application. In addition the system could also access unstructured content which might include files created or usable by Microsoft Excel Microsoft Word Adobe Acrobat as well as unstructured information such as text files email audio video web links and other forms of electronic information. In some embodiments the unstructured content may be managed by an unstructured content management system such as a document management software program .

Each structured content system is in communication with a content driver and . In certain embodiments a content driver may be integrated into a structured content system . The content drivers are in communication with the processing module via the conduit application programming interface conduit API . The content drivers serve as a translation layer between the communication conventions used by the applicable structured content systems and the convention used by the conduit API . Typically there exists a unique structured content access driver for each specific structured content system however if multiple structured content systems utilize the same communication convention a single content driver could be used for those structured content systems.

The conduit API is in communication with the processing module and facilitates two way communication between the processing module and the content drivers for the structured content systems . This conduit API uses series of standardized procedures thus providing a single framework that any content driver can use to communicate with the processing module . This enables additional structured content systems to be added to the system without modifying the processing module .

The processing module processes the requests from users and acts as the interface between the requesting system the metadata repository and the structured content systems and facilitates accessing aggregating and integrating structured content. The processing module may also handle actions such as searching security management session management transaction governing usage tracking administration caching and alert monitoring as well as associating disparate structured content managing requests to and from the structured content and generating presentation output. Aggregation of structured content as more fully described herein may identify and map granular information from each structured content system and compile it into a common view that is organized and displayed independent of the underlying systems. As an example structured content system A might arrange a list of financial reports alphabetically and structured content system B might arrange financial reports by geographic region. Aggregation allows a user to access a single common interface and open a folder e.g. Finance . Within the Finance folder the user may then review a General Ledger Report which originates from system A and a Profit and Loss Report which originates from System B. In this manner knowledge workers would be able to efficiently and easily obtain such access to structured content from multiple structured content systems.

The metadata repository is a database platform that contains information and parameters for use by the processing module . The metadata repository contains metadata that represents the connection and communication parameters to be used to initiate requests into the structured content systems and the connection and communication parameters to be used to respond to requests from the requesting systems . The metadata repository may also contain the user security information and other settings necessary for the operation of the processing module and may also contain parameters with respect to unstructured content. Examples of metadata may include structured content location such as a particular computer server and its network address report names e.g. Corporate Budget 2003 report descriptions e.g. A detailed analysis of the expected expenditures during fiscal year 2003 report display properties e.g. grid or graph display mode as well as user names and user access privileges for any or all of the structured content systems . The processing module may access the metadata repository via database connectivity.

The display application programming interface display API communicates with the processing module and facilitates communication between the processing module and the requesting systems . This display API uses series of standardized procedures thus providing a single framework that any access driver can use to communicate with the processing module . This enables additional requesting systems to be added to the system without modifying the processing module .

The access drivers allow each requesting system to communicate with the display API . Each access driver acts as a translation layer between a corresponding requesting system s communication conventions and the convention used by the display API . Typically there exists a unique access driver for each requesting system . Often an access driver may be integrated into a requesting system .

The requesting systems are the systems with which the individual or individuals request reports information and data. However it is possible that a requesting system may be automated or function with batch processing to create requests. Requesting systems generally comprise three categories. In this embodiment one requesting system for each category is shown. However it is understand that any combination of requesting systems could be used in the present invention.

The first requesting system in this embodiment is an enterprise portal . The enterprise portal is a requesting system that allows individuals to access information necessary regardless of where the underlying data is located or the type of system that is housing the data. In one embodiment the enterprise portal is browser based and could be implemented on any node such as a personal computer personal digital assistant mobile phone or any similar device.

The second requesting system in this embodiment is a business intelligence portal . The business intelligence portal is a requesting system that has the ability to support analytics unstructured information and rudimentary portal functionality.

The third requesting system in this embodiment is a custom developed portal or application . The custom developed portal or application is a requesting system that was created to enable an individual or company to consolidate information into a single point of access or generate a custom application to support a user s needs. In either case it may include functionality from multiple types of requesting systems.

Referring to an example embodiment of the processing module is shown. In this embodiment the processing module is comprised of a caching module a report execution module an analytic module a logging module an external source browsing module and a security module .

The caching module is used to cache metadata objects and structured content objects that result from user requests and is often used to enhance the performance and functionality of the system. Frequently requested metadata or structured content or a logical pointer to such information could be located in the caching module . In one embodiment the caching module is a file based repository to improve performance for highly iterative transactions. The caching module can be configurable and may be tuned for different degrees of metadata caching Some of the configurations options available for metadata caching are duration amount of memory allotted for cache number of nodes of a hierarchy to store in cache and number of object parameters to cache. In addition to metadata the caching module may be a repository of structured content output in the form of results e.g. data and their corresponding structures e.g. metadata . This structured result is used for functionality such as pre cached structured content access multi report result merging search alerting and interrelating cached results. In a further embodiment the processing module may send alerts to a requesting system based on metrics within structured content cached results. The processing module analyzes the caching module and compares specific metric values to user defined thresholds that are stored in metadata repository . Different alerts may be made available based on the type of data contained in the structured content systems.

The report execution module manages the submission and management of accessing structured content objects through the system. A structured content object is a specific structured content item e.g. a sales report. The report execution module manages a connection to the metadata in the metadata repository and or caching module to retrieve all pertinent parameters necessary to execute a structured content object. The report execution module manages the process of either executing the necessary commands against the underlying structured content system to retrieve the structured content object or accessing a pre cached structured content object from the caching module. The report execution module also manages the communication with the caching module and logging module . Results can also be generated based on search parameters. The searching aspect of the processing module enables a user to search for structured content across multiple structured content systems .

The analytic module primarily manages integration functionality for the processing module . The analytic module receives input from both administrators and users to map structured content objects across structured content systems e.g. Y in a first structured content system is equivalent to YR in a second structured system which is treated as Year by the processing module to edit hierarchies e.g. Year is a parent of Month in a first and second structured content system but in a third structured content system there is no Month to generate rules e.g. in a first structured content system the Year starts two months later than the Year in a second structured content system because of fiscal year considerations . The analytic module may also receive input to combine data attributes e.g. year region item with metrics e.g. sales inventory and generate a new report as well as input to link from one report to another report based on underlying established hierarchies. For example a user may be viewing a report contained in a first structured system that has Year Region and Sales. The user chooses to view more information on a particular Year. If the first structured system cannot support the request the analytic module may request a report from a second structured content system that has Month Region and Sales.

The logging module allows the system to track user activity and errors. Logging may be written to either a relational database or a file based repository. The logging module may be a stand alone separate process server that receives requests from the processing module and then processes the request based on the type of request. There are many types of requests for the logging module including critical error logging configurable tracing usage tracking and history tracking. Critical error logging is when a component of the processing module or other module fails to operate as designed. Configurable tracing allows a user to log the processes that take place during operation and may allow a user to configure the degree or granularity of the processes that are traced. Usage tracking tracks usage of the system such as usage analysis user and user group analysis administrative activity usage trends as well as other statistics that are readily known to those skilled in the art. History tracking is short term usage logging that allows for historical reference by a user to keep track of what actions that user has undertaken in the system.

The external source browsing module communicates with the structured content systems and facilitates navigation of the navigable structures available within a structured content system. In one embodiment this module allows a user to navigate and define external structured content to the processing module . As an example an administrator may want to add report a from structured content system for display to an end user. Through an administrative user interface the administrator would choose structured content system from the list of available structured content systems. The administrator would then be allowed to navigate structured content system through a user interface that is the same for all structured content systems and when the administrator selects report a the metadata for that report is stored in the metadata repository .

The security module allows administrators to manage users and user groups and their authentication and security profiles within the system. An administrator may create and import users map users to groups assign logon credentials applicable to each structured content system and define what privileges that user has on various functionality and structured content objects within the metadata repository.

Referring to an example embodiment of the analytic module is shown. In this embodiment the analytic module contains integrated structured content container module foreign application level structure module report level structure module and cross system level structure module .

The integrated structured content container module generates structured content objects that are comprised of data components from underlying structured content objects. As discussed above the analytic module receives input from a user to create a new report based on underlying data structures and structured content objects within the defined structured content systems. After receiving that input the integrated structured content container module sends the structured content container to the metadata repository for storage. When the analytic module receives a request to access an integrated structured content container the integrated structured content container module determines the underlying structured content objects that must be retrieved from the structured content systems . The integrated structured content container module may parse together a new result set based on the structure of the integrated structured content container.

The foreign application level structures module generates the metadata that represents hierarchical relationships between attributes within a single structured content system . For example a first structured content system may have the relationship Year is a parent of Month which is a parent of Day and this relationship is used across all structured content contained in that structured content system. The foreign application level structures module stores the metadata representing those hierarchical relationships of the structured content systems in the metadata repository .

The report level structures module generates the metadata that represents hierarchical relationships between attributes within a single structured content object e.g. a report . For example a report in a first structured content system may enforce the relationship Year is a parent of Month which is a parent of Day. The report level structures module stores the metadata representing that hierarchical relationship for that report in the metadata repository .

The cross system level structures module generates the metadata that represents hierarchical relationships between attributes across multiple structured content systems. For example a first structured content system and a second structured content system may both use the hierarchical relationship Year is a parent of Month which is a parent of Day. Since this hierarchical relationship is used across all reports within both structured content systems the cross system level structures module generates metadata to represent that hierarchical relationship and that it is used in those particular structured content systems and stores that metadata in the metadata repository .

Referring to an illustrative node for implementing an embodiment of the method is depicted. Node includes a microprocessor an input device a storage device a video controller a system memory and a display and a communication device all interconnected by one or more buses . The storage device could be a floppy drive hard drive CD ROM optical drive or any other form of storage device. In addition the storage device may be capable of receiving a floppy disk CD ROM DVD ROM or any other form of computer readable medium that may contain computer executable instructions. Further communication device could be a modem network card or any other device to enable the node to communicate with other nodes. In certain embodiments a node could be used by a requesting system processing module or structured content systems to run the disclosed system and method. It is understood that any node could represent a plurality of interconnected whether by intranet or Internet computer systems including without limitation personal computers mainframes PDAs and cell phones.

Referring now to an example of the operation of an embodiment of the invention for navigation of structured content within structured content systems in order to aggregate the structured content is shown. In step a user makes a navigation request using a display environment. For example a user might select a folder in which he wants to browse a particular set of reports. At step the navigation request from the user is converted into commands to be executed by the processing module. In this embodiment the conversion is executed by an access driver in communication with a display API. At step an access driver in communication with the requesting system converts the navigation request into the conventions for a display API. In step the display API creates a series of commands based on the request and sends those commands to the processing module. It is understood that other methods of converting the request into commands for the processing module could be used. In other embodiments the requesting system could communicate directly with the processing module with no conversion required.

At step the processing module based on the commands received communicates with the metadata repository to retrieve the connection properties and system access parameters to connect to the external structured content system dictated by the user s selection. Connection properties might include server name port number and administrative credentials as well as other properties that might be used to connect with a particular structured content system. System access parameters typically include information necessary to create a session with a system and examples might include user credentials and user timeout values. It is understood that for this step as well as others throughout this invention these properties may be retrieved from a location other than the metadata repository such as from a file from a hard coded reference in the code base or as a pass through parameter from another system. Additionally in other embodiments the connection properties and system access parameters may be hard coded into the system.

At step the connection properties and system access parameters are used to create commands to be executed by a structured content system. In this embodiment this conversion commences at step where a conduit API retrieves systems access parameters for accessing a structured content system from the processing module. At step the conduit API requests a communication session with a structured content driver in communication with the structured content system. At step the conduit API submits a request containing the system access command e.g. open folder and return list of reports and connection properties to the structured content driver. At step the structured content driver converts the system access command and connection properties into a set of commands that conform to the conventions of the structured content system. In one embodiment the structured content driver may retain the parameters used to communicate with the underlying structured content system. It is understood that other methods of converting the properties and parameters for the structured content system could be used. In other embodiments the processing module could communicate directly with the structured content system with no conversion required.

At step the converted commands are submitted to the structured content system. At step the structured content system performs the commands and generates the results e.g. a list of available reports . At step the results are converted and sent to the processing module. In this embodiment at step the structured content driver converts the results into the format required by the conduit API. At step the conduit API receives the results from the structured content driver and sends those results to the processing module. At step the processing module receives the results.

At step the results are converted into the conventions for the requesting system. In this embodiment at step the results are converted by the display API into a format usable by the access driver. At step the access driver converts the results into the convention used by the requesting system. At step the requesting system displays the results of the navigation request.

At step the processing module retrieves the connection properties and system access parameters from the metadata repository for the structured content system containing the structured content selected by the user. At step the connection properties and system access parameters are converted into commands to be executed by a structured content system. In this embodiment this conversion commences at step where a conduit API retrieves system access parameters for accessing a structured content system from the processing module. At step the conduit API requests a communication session with a structured content driver that is in communication with the structured content system. At step the conduit API submits a request containing the connection properties as well as an object identifier to the structured content driver. At step the structured content driver converts the connection properties and object identifier into a set of commands that conform to the conventions of the structured content system. It is understood that other methods of converting the properties and parameters for the structured content system could be used. In other embodiments the processing module could communicate directly with the structured content system with no conversion required.

At step the converted commands are submitted to the structured content system e.g. retrieve the particular parameters for a report . An object identifier may be submitted to the structured content system to identify the structured content object. At step the structured content system performs the commands and generates the results object parameters . Object parameters might include report name or identification report display mode such as if the report is a grid or a graph prompt values timeout display interface full screen frame or other parameters that may be associated with a report or other structured content.

At step the object parameters are converted and sent to the processing module. In this embodiment at step the structured content driver converts the object parameters into the format required by the conduit API. At step the conduit API receives the results from the structured content driver and sends those object parameters to the processing module. At step the processing module receives the results and writes the object parameters to the metadata repository for the selected object. In another embodiment the processing module also updates the metadata object cache to reference the specified object returned in the results.

In this embodiment a user is able to request additional structured content objects from a multitude of structured content systems thereby generating aggregated reports e.g. a centralized virtual location for reports or other structured content contained in the multiple structured content systems. However while a human user has been discussed as providing inputs to the system the system may also use spiders or bots modules or other methods of automation to navigate through the structured content systems and check for new structured content or for structured content that has been modified. Modified structured content might include structured content that was updated moved or altered.

Referring now to an example of the operation of an embodiment of the invention for accessing structured content is shown. At step a user requests structured content in the system display. At step the structured content request from the user is converted into commands to be executed by the processing module. In this embodiment the request conversion is executed by an access driver in communication with a display API. At step an access driver in communication with the requesting system converts the access request into the conventions for a display API. In step the display API creates a series of commands based on the request and sends those commands to the processing module. It is understood that other methods of converting the request into commands for the processing module could be used. In other embodiments the requesting system could communicate directly with the processing module with no conversion required.

At step the processing module based on the commands received communicates with the metadata repository to retrieve connection properties the system access parameters and object parameters for the requested object. In another embodiment the processing module may check for a valid metadata object cache for the specified object. If no such cache exists the processing module may connect to the metadata repository and retrieve the object parameters from the metadata repository to generate a cache. In a further embodiment the processing module may check if there is a valid result cache for the specified object. If there were a result cache for the specified object the processing module need not communicate with the structured content system and could proceed to step otherwise the method would proceed to step .

At step the connection properties system access parameters and object parameters are converted into commands to be executed by a structured content system. In this embodiment this conversion commences at step where a conduit API retrieves system access parameters for accessing a structured content system from the processing module. At step the conduit API requests a communication session with a structured content driver in communication with the structured content system. At step the conduit API submits a request containing the system access parameters and connection properties to the structured content driver. At step the structured content driver converts the system access parameters and connection properties into a set of commands that conform to the conventions of the structured content system. It is understood that other methods of converting the properties and parameters for the structured content system could be used. In other embodiments the processing module could communicate directly with the structured content system with no conversion required.

At step the converted commands are submitted to the structured content system. At step the structured content system performs the commands and generates the results. At step the results are converted and sent to the processing module. In this embodiment at step the structured content driver converts the results into the format required by the conduit API. At step the conduit API receives the results from the structured content driver and sends those results to the processing module. At step the processing module receives the results e.g. a report .

At step the results are converted into the conventions for the requesting system. In this embodiment at step the results are converted by the display API into a format usable by the access driver. At step the access driver converts the results into the convention used by the requesting system. At step the requesting system displays the results of the navigation request.

In one embodiment a user might use a requesting system and when the user logs in via the requesting system the user name and password are sent to the access driver. The access driver converts the user name and password into the user name and password convention used by the display API. The display API passes the modified user name and password to the processing module. The processing module requests user privilege information from the metadata repository. In this particular example the user has administrator access. The user then generates a folder or directory and names it Financial Reports . The user then requests the financial report from a software package that provides business intelligence functionality e.g. a report on the company s budget trends over the past five years . The processing module accesses the metadata repository to determine which structured content system contains the requested report and the necessary connection and communication parameters to retrieve the report from the appropriate structured content system. The processing module sends those parameters to the conduit API. The conduit API executes the appropriate function call to request a report which in this example is GetReport . The GetReport function call sends the parameters to the content driver which converts the GetReport function call into the function call understood by the business intelligence system that contains the requested report. In this example that business intelligence system uses the function call GenerateResults . The content driver sends the parameters to the business intelligence system which then processes the GenerateResults function call with the passed parameters. That results in the business intelligence system creating the requested report e.g. 5 Year Budget Trend .

The generated report is sent to the content driver. The content driver passes the report output to the conduit API using for example a ReceiveReport function call. The conduit API then passes the report to the processing module. The processing module places a pointer to the report into the metadata repository under the folder for Financial Reports. The processing module may also place a pointer to the report into the result cache. The report is then to the display API which converts the report into the convention used by the access driver. The access driver then provides the report to the requesting system which may display the 5 Year Budget Trend report to the user.

Referring now to an example of the operation of an embodiment of the invention for registering a structured content system is shown. In this embodiment a structured content system is registered retrieving data elements metrics and hierarchy information for a structured content system. Some example data elements might be a structured content system and or structured content in that structured content system e.g. Report A contains data elements for Year Month Region Territory Product Category item SKU. Some example metric information might be structured content system and or structured content in that structured content system e.g. Report A contains metrics for Total Sales New Sales Total Inventory and Customer Count. An example of hierarchy information might be a structured content system and or structured content in that structured content system e.g. Report A contains a relationship where Year is a parent of Month e.g. the year 1999 has the month January 1999 as one of its elements Region is a parent of Territory and Product Category is a parent of Item SKU.

In operation at step a user makes a registration request in the system display. At step the structured content request from the user is converted into commands to be executed by the processing module. In this embodiment the conversion is executed by an access driver in communication with a display API. At step an access driver in communication with the requesting system converts the registration request into the conventions for a display API. In step the display API creates a series of commands based on the request and sends those commands to the processing module. It is understood that other methods of converting the request into commands for the processing module could be used. In other embodiments the requesting system could communicate directly with the processing module with no conversion required.

At step the processing module based on the commands received communicates with the metadata repository to retrieve the connection properties and system access parameters for the structured content system referenced in the commands. At step the connection properties are converted into commands to be executed by a structured content system in order to request the structured content driver to retrieve a list of available data elements measures and hierarchies. In this embodiment this operation commences at step where a conduit API retrieves system access parameters for accessing a structured content system from the processing module. At step the conduit API requests a communication session with a structured content driver in communication with the structured content system. At step the conduit API submits a request to the structured content driver to retrieve a list of available data elements measures and hierarchies. At step the structured content driver converts the system access parameters and connection properties into a set of commands that conform to the conventions of the structured content system. It is understood that other methods of converting the properties and parameters for the structured content system could be used. In other embodiments the processing module could communicate directly with the structured content system with no conversion required.

At step the converted commands are submitted to the structured content system. At step the structured content system performs the commands and generates a list of data elements metrics and hierarchies for the structured content system and the structured content objects within the structured content system. At step the results e.g. the list of data elements metrics and hierarchies are converted and sent to the processing module. In this embodiment at step the structured content driver converts the results into the format required by the conduit API. At step the conduit API receives the results from the structured content driver and sends those results to the processing module. At step the processing module receives the results.

At step the processing module receives the results and writes the parameters to the metadata repository for the selected structured content system and or structured content object. When the parameters are associated with a specific structured content system it is stored in the metadata repository that these parameters are associated with that structured content system. When the parameters are associated with a specific structured content object it is stored in the metadata repository that these parameters are associated with that structured content object. This allows subsequent processes to identify the granularity that a report contains e.g. whether a report has month item sales or year item sales .

Referring now to an example of the operation of an embodiment of the invention for transforming structured content is shown. Transforming structured content generates a nomenclature that allows common data elements across the various systems to be referenced. For example yr may be used in one system y in another and both of these are referred to as year within the processing module. At step a user makes a transformation request in the requesting system. At step the transformation request from the user is converted into commands to be executed by the processing module. In this embodiment the conversion is executed by an access driver in communication with a display API. At step an access driver in communication with the requesting system converts the transformation request into the conventions for a display API. In step the display API creates a series of commands based on the request and sends those commands to the processing module. It is understood that other methods of converting the request into commands for the processing module could be used. In other embodiments the requesting system could communicate directly with the processing module with no conversion required.

At step the processing module based on the commands received communicates with the metadata repository to retrieve a list of available data elements for the structured content referenced in the commands. Some examples of categories are year and region. At step the processing module compiles a list of data elements across the structured content system based on the retrieved results of step . At step the processing module generates an output list based on the list of data elements.

At the output list is converted into the conventions for the requesting system. In this embodiment at step the output list is converted by the display API into a format usable by the access driver. At step the access driver converts the output list into the convention used by the requesting system. At step the requesting system displays the output list.

At step the user cross references the data elements associated with multiple structured content systems to each other and those data elements are mapped to a common naming convention. For example Y in one structured system is mapped to Yr in a second structured content system and both are cross referenced to Year for use by the processing module. In one embodiment a rule may be applied to normalize characteristics between data elements from different structured content systems. For example a rule may be applied to normalize Fiscal Year in a first structured content system to Calendar Year in a second structured content system by subtracting a month from the second structured content system. At step the mapped elements are converted into commands to be executed by the processing module. In this embodiment the conversion is executed by an access driver in communication with a display API. At step an access driver in communication with the requesting system converts the mapped elements into the conventions for the display API. In step the display API creates a series of commands based on the mapped elements and sends those commands to the processing module. It is understood that other methods of converting the request into commands for the processing module could be used. In other embodiments the requesting system could communicate directly with the processing module with no conversion required.

Referring now to an example of the operation of an embodiment of the invention for creating hierarchies is shown. At step a user makes a hierarchy creation request in the requesting system. At step the create hierarchy request from the user is converted into commands to be executed by the processing module. In this embodiment the conversion is executed by an access driver in communication with a display API. At step an access driver in communication with the requesting system converts the navigation request into the conventions for a display API. In step the display API creates a series of commands based on the request and sends those commands to the processing module. It is understood that other methods of converting the request into commands for the processing module could be used. In other embodiments the requesting system could communicate directly with the processing module with no conversion required.

At step the processing module based on the commands received communicates with the metadata repository to retrieve a list of available data elements for the structured content system s referenced in the commands. Some examples of data elements are year and region. 

At step the processing module connects to the metadata repository and retrieves a list of hierarchies. This list of hierarchies applies to the data elements retrieved in step . As an example a first structured content system has both year and month data elements defined to it. In this instance the list of hierarchies would show that in the first structured content system a year is a parent of month e.g. the month January 1999 is one of many elements in the year 1999 . At step the processing module retrieves the transformation map index from the metadata repository. The transformation map index indicates the nomenclature used by individual structured content systems. For example Y in system equates to Year for the processing module.

At step the processing module compiles a list of data elements and existing hierarchies across the systems using the nomenclature as defined in the transformation index. At step the processing module generates an output list based on the compiled list of attributes and hierarchies.

At the output list is converted into the display conventions for the requesting system. In this embodiment the conversion is executed by a display API and access driver in communication with the display API. At step the output list is converted by the display API into a format usable by the access driver. At step the access driver converts the output list into the convention used by the requesting system. At step the requesting system displays the output list for the user.

At step the user may edit the existing hierarchies and create new hierarchies across structured content systems through the display system. At step the new hierarchies are converted into commands to be executed by the processing module. In this embodiment the conversion is executed by an access driver in communication with the display API. At step an access driver in communication with the requesting system converts the new hierarchies into the conventions for a display API. In step the display API creates a series of commands based on the new hierarchies and sends those commands to the processing module. It is understood that other methods of converting the hierarchies into commands for the processing module could be used. In other embodiments the requesting system could communicate directly with the processing module with no conversion required.

Referring now to an example of the operation of an embodiment of the invention for integrating structured content is shown. This allows a user to create unions between multiple information sources apply formulas rules and mathematical functions to information sources to conduct advanced searches across multiple data sources create cross application hierarchies and drill paths and to generate balanced scorecards. An example use for this embodiment involves a first structured content system that contains a sales report involving the attributes year geographic region and sales and a second structured content system that contains a sales report involving the attributes month geographic region and inventory. By merging these two results the new integrated structured content object would contain year geographic region sales and inventory. This process may not only involve identifying the commonality of data elements but also relationships between data elements. The processing module would identify that month in the second structured content system may be aggregated to produce a year value for inventory . Once this is accomplished the result may be merged with the output from the first structured content system to produce the desired output.

At step a user makes an integrated structured content creation request in the display environment e.g. create a sales report . At step the integrated structured content creation request is converted into commands to be executed by the processing module. In this embodiment the conversion is executed by an access driver in communication with a display API. At step an access driver in communication with the requesting system converts the navigation request into the conventions for a display API. In step the display API creates a series of commands based on the request and sends those commands to the processing module. It is understood that other methods of converting the request into commands for the processing module could be used. In other embodiments the requesting system could communicate directly with the processing module with no conversion required.

At step the processing module connects to the metadata repository and retrieves a list of available data elements and metrics. At the list is converted into the conventions for the requesting system. In this embodiment the conversion is executed by a display APT and access driver in communication with the display API. At step the list is converted by the display API into a format usable by the access driver. At step the access driver converts the list into the convention used by the requesting system. At step the requesting system displays the list.

At step the user selects the attributes and categories for inclusion in the integrated structured content e.g. a report covering year geographic region inventory and sales . At step the selected attributes and categories are converted into commands to be executed by the processing module. In this embodiment the conversion is executed by an access driver in communication with a display API. At step an access driver in communication with the requesting system converts the navigation request into the conventions for a display API. In step the display API creates a series of commands based on the request and sends those commands to the processing module. It is understood that other methods of converting the request into commands for the processing module could be used. In other embodiments the requesting system could communicate directly with the processing module with no conversion required.

At step the processing module connects to the metadata repository and iterates through the transformation index and determines which structured content objects may satisfy the selections made by the user. At step the processing module determines whether the user s selections are met by a single structured content object or multiple structured objects based on the results of the iteration through the transformation. If the object or objects can meet the user s selections the method proceeds to step . If the user s selections cannot be met by a single structured content object or a multiple structured object then method proceeds to step .

At step the processing module determines the applicable hierarchies of the user s selection and iterates through the transformation index to determine which structured content objects may satisfy the hierarchies applicable to the user s selection e.g. a first structured content system may contain month geographic region sales and inventory but months have been mapped to correspond to year within that system . At step the processing module on the basis of the iteration through the transformation index determines whether a single structured content object or multiple structured content objects can satisfy the user s selection. If so the system proceeds to step . If no the system proceeds to step . At step the system informs the user that the integration request cannot be performed.

At step the processing module retrieves a list of structured content objects necessary to complete the request from the processing module. These will later be used as a template to integrate the structured content within the processing module. At step the processing module retrieves the connection properties and access parameters from the metadata repository necessary to retrieve the structured content objects identified in step . At step the processing module execution command is converted into commands to be executed by a single structured content system in order to request the structured content driver to retrieve the applicable structured content. In this embodiment this operation commences at step where a conduit API retrieves system access parameters for accessing a structured content system from the processing module. At step the conduit API requests a communication session with a structured content driver in communication with the structured content system. At step the conduit API submits a request containing the system access parameters and connection properties to a single structured content driver. At step the structured content driver converts the system access parameters and connection properties into a set of commands that conform to the conventions of the structured content system. It is understood that other methods of converting the properties and parameters for the structured content system could be used. In other embodiments the processing module could communicate directly with the structured content system with no conversion required.

At step the converted commands are submitted to the structured content system. At step the structured content system performs the commands and generates the results. At step the results are converted and sent to the processing module. In this embodiment at step the structured content driver converts the results into the format required by the conduit API. At step the conduit API receives the results from the structured content driver and sends those results to the processing module. At step the processing module receives the results and if additional structured content objects are required the method returns to step as needed.

At step the processing module creates the integrated structured content by combining the results from the structured content objects based on the hierarchies and transformation index.

At the integrated results are converted into the conventions for the requesting system. In this embodiment the conversion is executed by a display API and access driver in communication with the display API. At step the list is converted by the display API into a format usable by the access driver. At step the access driver converts the list into the convention used by the requesting system. At step the requesting system displays the list.

For any of the foregoing a plurality of remote accessing systems may be used to submit the identified requests whether the requests are automated or from a user. For example the functionality described may be accessed from a corporate portal or a custom application.

In some embodiments of the invention the results of any request with respect to the structured content systems are returned in a parseable format such as XML. In this embodiment the processing module parses the incoming report and is able to aggregate and manipulate the content of the structured content to generate new structured content.

In an additional embodiment a report may be created by a requesting system and using the techniques described herein the report may be inserted into a structured content system.

While the invention has been particularly shown and described with reference to the preferred embodiment thereof it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

