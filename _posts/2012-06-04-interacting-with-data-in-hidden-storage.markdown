---

title: Interacting with data in hidden storage
abstract: Unused storage space within a data storage is utilized to store data while effectively making it appear to the operating system, other programs, and the user that the space is still available or unused. The space used to store the hidden data remains available for use by the operating system, other programs and uses upon a request. File system requests are monitored such that the hidden storage area remains hidden from unauthorized processes as well as to restrict operations within the hidden storage area that are attempted by unauthorized processes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08838926&OS=08838926&RS=08838926
owner: 
number: 08838926
owner_city: 
owner_country: 
publication_date: 20120604
---
The present application is a continuation of U.S. application Ser. No. 12 579 301 filed Oct. 14 2009 entitled INTERACTING WITH DATA IN HIDDEN STORAGE indicated to be granted as U.S. Pat. No. 8 200 930 on Jun. 12 2012 which is continuation in part of U.S. patent application Ser. No. 12 579 208 filed Oct. 14 2009 entitled SYSTEMS AND METHODS FOR A DATA MANAGEMENT AND RECOVERY IN A PEER TO PEER NETWORK which is the non provisional application of U.S. Provisional Patent Application No. 61 105 371 filed Oct. 14 2008 which are incorporated herein in their entirety by reference and claims the benefit of the effective filing date under 35 U.S.C. 120.

Computers use file systems to store and organize data on computer readable media such as on hard drives flash drives optical drives CDs and DVDs. Generally the operating system controls access to the file system and is responsible for managing the stored data. Most operating systems provide an interface that is located between the programs and the file system that is used in interacting with the stored data.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Unused space within a data storage device is utilized to store data such that it is hidden from unauthorized processes. These unauthorized processes may include the operating system as well as other programs processes. The space used to store the hidden data remains available for use by any process. File system requests are monitored such that the hidden storage area remains hidden from unauthorized processes as well as to restrict operations within the hidden storage area that are attempted by unauthorized processes. For example a request by an unauthorized program asking for the amount of available space on a storage device is intercepted and a value for the available space is returned to the unauthorized process that includes the size of the hidden storage and a size of the available space on the storage device. Similarly other requests such as a directory request a write request a volume request a create request and the like made by unauthorized processes may be restricted or results modified when they involve access to the hidden storage.

Referring now to the drawings in which like numerals represent like elements various embodiment will be described. In particular and the corresponding discussion are intended to provide a brief general description of a suitable computing environment in which embodiments may be implemented.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Other computer system configurations may also be used including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like. Distributed computing environments may also be used where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Referring now to a computing device for interacting with data in a hidden storage is illustrated. The computing device may include many more components than those shown in . As shown in computing device is connected to a network such as the Internet via communication connection s . The communication connection s may be wired and or wireless.

Computing device also includes processing unit system memory operating system drivers programs hidden storage manager removable storage non removable storage and input output interface .

The system memory generally includes RAM ROM and one or more permanent mass storage devices such as removable storage and or non removable storage . The system memory stores operating system for controlling the operation of computing device . The operating system may comprise a general purpose operating system such as the MICROSOFT XP MICROSOFT VISTA MICROSOFT 7 UNIX operating systems or some other operating system that is used in storing and interacting with files on a computing device. The memory as described above illustrates a computer readable storage media that may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Examples of computer storage mediums include RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a computing device.

The system memory also stores programs drivers and hidden storage manager for providing functionality. Computing device also comprises input output interface for communicating with external devices such as a mouse keyboard scanner or other input devices not shown in . Removable storage and non removable storage may be utilized by computing device to store among other things programs databases and program data used by computing device .

Data storage devices such as a hard disc or memory drive are generally managed by operating system which manages access to the storage device and reports used and unused space on the device to the programs running on the device.

Hidden storage manager is directed at using a portion of the unused space on one or more storage devices while effectively making it appear to the operating system and other programs that the space is still available i.e. unused . When the programs or operating systems request to use the space on the storage device that is being used as hidden storage a portion of the hidden storage space is automatically released by hidden storage manager to the program or operating system while tracking the unavailability of the hidden data stored within the storage device. Generally the use of the hidden data storage is obscured from the operating system other processes programs and the user. From the operating system running other processes programs and user s point of view the hidden space remains available for use. Anytime space is needed and space is being utilized within the hidden storage enough space to satisfy the request is released for use. According to one embodiment a performance margin is set and automatically maintained that keeps a buffer of empty space on the storage device such that requests for additional space may be satisfied without the need to first erase space being used in the hidden storage. Hidden storage manager manages utilization of the available hidden storage space. According to one embodiment access to the storage space is prioritized such that the operating system other processes and programs currently executing have the highest priority to the storage space whereas the hidden storage is at the lowest priority level. In other words any data that is stored in the hidden storage may be erased to make room for other data storage needs. Many types of prioritization schemes may be configured. For example an operating system may be given the highest priority to the storage core programs a second priority level user programs a third level priority and the like. The hidden storage may be used for many different purposes. For example the hidden storage may be used to store backup data from other computer devices attached via one or more networks. The hidden storage may be used to increase the performance of a program another computer on a network may temporarily store data on the computer s hidden storage and the like.

Referring now to a system for interacting with hidden storage is described. As illustrated hidden storage system comprises hidden storage manager operating system operating system intercept storage that includes hidden storage calling program and program .

As discussed above hidden storage manager provides functionality for interacting with storage space including hidden storage . According to one embodiment operating system intercept is utilized to intercept information requests and commands by programs users and the operating system to interact with data storage such as storage . Intercepting some of the file system requests using OS intercept hidden storage manager alters the amount of available space reported by the operating system before it is returned to the calling program . Additionally hidden storage manager maintains information regarding the reported available space and the actual available space. As can be seen when storage includes hidden storage then the reported available space is larger then the actual available space.

According to one embodiment under the Microsoft Windows operating system Windows XP and later an Installable File System Driver operating system intercept generally implemented in a File System Minifilter Driver the Hidden Storage Manager is used to intercept file system calls made to operating system . Generally other methods of intercepting file system requests may be utilized. The operating system intercept is configured to intercept calls made to the file system such as the low level functions referred to as the I O Request Packet IRP functions and pass them to hidden storage manager for processing.

When started by the operating system the hidden storage manager registers Preoperation and or Postoperation callbacks with the driver filter manager that is associated with operating system intercept and operating system . These callback functions provide hidden storage manager the opportunity to monitor change and report on actions which are relevant to the hidden storage. According to one embodiment the hidden storage manager register callbacks for a limited number of the I O Request Packet IRP functions as discussed below.

When a program or process initiates a call for a file system operation the operating system resolves the request to one of a number of defined IRP functions. In operation the operating system maintains a stack of the file system filters and drivers that are called depending on the IRP function. The operating system initiates a Preoperation call to each of the drivers in order which are in the stack prior to performing the actual requested operation. After the operating system has performed all the Preoperation calls to all the drivers in the stack and assuming that all the Preoperation calls have indicated that they approve of continuing the operation the operating system carries out the requested operation. Once the requested operation is completed the operating system begins to call each registered Postoperation callback in the stack of drivers in a similar fashion to the Preoperation callback routines.

Many of the IRP callback functions supported by the Installable File System Driver are a matter of software housekeeping and are not addressed here. These IRP functions handle matters such as shutting down the driver querying the status of an individual file reading from a file changing the attributes of a file and so forth. According to one embodiment the IRP s monitored by hidden storage manager include IRP MJ CREATE for creating a file IRP MJ DIRECTORY CONTROL for interacting with directories IRP MJ QUERY VOLUME INFORMATION for determining disk space and or file type and IRP MJ WRITE for writing a file. Generally hidden storage manager is configured to intercept file system requests made by programs to determine available used storage space as well as requests to interact create hidden storage within available storage space.

The hidden storage manager provides an interface to application programs the host operating system and other processes on the host computer. According to one embodiment the hidden storage manager creates this interface by utilizing the FltCreateCommunicationPort . . . API within the Installable File System Driver Interface. This API provides a means through which other processes i.e. program can communicate directly with the hidden storage manager . A function of this API is to allow processes programs to register with the hidden storage manager .

By registering the program is informing the hidden storage manager that the program is aware of the hiding functionality of the hidden storage manager and the hidden storage manager should provide special services to the programs that have registered registered programs .

Referring now to a program such as program process registers by calling the API created by operating system when the hidden storage manager is loaded. When the program calls the API to register the hidden storage manager performs operation and obtains the current process ID for the caller. The process moves to operation where a determination is made as to whether program has already registered. When program has not already registered the process moves to operation where the process ID is stored in the list of registered programs see registered programs in .

Returning to after registration the hidden storage manager allows the registered program to examine and utilize the entire volume s storage space including the hidden storage areas. The hidden storage manager does not hide the hidden space from the registered programs and the registered programs can create files create directories write to files delete files delete directories and in general use the hidden space as if the space within the hidden storage area was regular non hidden space. Since no obscuring of the hidden files occur no modification of the available space occurs and the calling program can be written using standard operating system API calls to manipulate the hidden storage area and can rely on the reported space available as the true and actual space which includes the hidden storage space.

According to one embodiment hidden storage manager is configured to set a performance margin that provides a buffer space for the programs and operating system to continue to expand before impacting the hidden storage. The use of the performance margin is directed at avoiding the repetitious cycle of delaying requests for use of storage erasing hidden storage and notifying programs which are using the hidden storage of the erasure. For example without the use of the performance margin the very first request by a user program or operating system for additional space would result in some need to erase or free up some of the hidden storage area if the hidden storage utilized all of the available space on the storage device. The calculation of the performance margin may utilize many different factors such as the total size of the storage the performance of the host computer the existing file sizes the predictability of the host computer to require additional storage and the like. This performance margin may be preset and or configured through an API to hidden storage manager .

Hidden storage manager is also configured to set the amount of storage space that may be used as hidden storage. For example the amount of storage space that may be used as hidden storage may be all of the available space on a device the available space on the device minus the size of the performance margin or some other determined size. According to one embodiment the size of the storage device that may be used as hidden storage depends on a size of the storage device. According to one embodiment the larger the storage space of the storage device the higher percentage of the available storage space may be used as hidden storage. Generally the size of the hidden storage space that may be used is set such that the operating system non registered programs and users have enough available space without having to impact the space set aside as the hidden storage space.

The following examples are provided for illustration purposes only and are intended to be non limiting.

In a first example assume that a computing device includes a storage having the following attributes 1 terra byte of total storage 400 GB of consumed storage and 600 GB of free storage. In this example a performance margin is set to 15 of the total storage or 20 of the free storage whichever result is larger. In this case since 15 of total storage 150 GB is larger then 20 of the free storage 120 GB the performance margin is set to 150 GB. In this example the hidden storage manager provides the use of approximately 450 GB of hidden storage space.

In another example assume that a computing device includes a storage of the following attributes 100 GB of total storage 65 GB of consumed storage and 35 GB of free storage. In this example the performance margin is set at either 25 of total storage or 30 of the free storage whichever is larger. Since 25 of the total storage 25 GB is larger then 30 of free storage 10.5 GB the performance margin is set to 25 GB. In this example the hidden storage manager provides the use of approximately 10 GB of hidden storage space.

In these two examples the size of the storage device and the available free space are primary factors used in establishing the performance margin. Other factors may also be utilized such as rate of use of space within drive average file size within storage type of primary use a speed of the network connection performance of the computing device storage and the like. Generally the hidden storage space and performance margin is set such that the requests for the freeing of the hidden storage space is minimized

Referring now to hidden storage manager is configured to hide files and directories from view by the non registered programs users and the operating system. Hidden storage manager monitors and denies requests to access a path to files and directories that are used to store files within the hidden storage area when the request is from a non registered programs. According to one embodiment the IRP MJ DIRECTORY CONTROL and IRP MJ QUERY VOLUME INFORMATION are monitored by operating system intercept and passed to hidden storage manager .

As discussed above hidden storage manager utilizes a Preoperation callback to monitor the calls. Upon the call into the Preoperation callback for the IRP MJ DIRECTORY CONTROL hidden storage manager moves to decision operation and determines if the calling process has been previously registered with the hidden storage manager by checking the registered programs . If the process is registered with the hidden storage manager then the process is entitled to see all of the directory information and the hidden storage manager returns from the Preoperation callback indicating FLT PREOP SUCCESS NO CALLBACK. This return value informs the operating system intercept that the hidden storage manager is finished with this operation and does not require any more callbacks related to this function. In essence the handling of the IRP MJ DIRECTORY CONTROL in this manner with a registered process serves to allow the registered process full access to the hidden storage.

When the hidden storage manager determines that the process is not registered it moves to operation and begins the process of constructing the information to fulfill the IRP MJ DIRECTORY CONTROL request. The hidden storage manager utilizes functions API s provided by the operating system to enumerate the directory and file information on the desired volume while constructing the proper data structures for returning to the calling process. During this enumeration of the files and directories the hidden storage manager examines each to determine if any of the files or directories are contained within the hidden data storage area. If the hidden storage manager discovers files or directories which reside within the hidden data storage area the process moves to operation where the hidden storage manager removes or omits this information from the data being assembled for return to the calling process. Upon completion of the data assembly the hidden storage manager returns from the Preoperation callback indicating FLT PREOP COMPLETE. This return value informs the operating system intercept that the hidden storage manager has completed the operation and the operating system is not to call any of the remaining filters in the filter stack and will not call the file system.

When returned to the unregistered calling application or program the results of the IRP MG DIRECTORY CONTROL request do not contain information referencing the hidden directories or files.

Turning now to a process for intercepting volume queries is described. Operating system is configured to intercept volume query requests and pass them to hidden storage manager . Upon the call into the Preoperation callback for the IRP MJ VOLUME INFORMATION hidden storage manager moves to operation and determines if the calling process has been previously registered with the hidden storage manager . If the process is registered with the hidden storage manager then the process is entitled to see all of the directory information and the hidden storage manager returns from the Preoperation callback indicating FLT PREOP SUCCESS NO CALLBACK. This return value informs the operating system intercept that the hidden storage manager is finished with this operation and does not require any more callbacks related to this function. In essence the handling of the IRP MJ VOLUME INFORMATION in this manner with a registered process serves to allow the registered process full access to the hidden storage.

When the hidden storage manager determines that the process is not registered the process moves to operation where a determination is made as to whether the request is either a FileFSFullSizelnformation request or a FileFSSizeInformation request. These sub function operations request specific size information about directories and files within the volume.

If the hidden storage manager determines the sub function request is not one of the above calls it returns from the Preoperation callback indicating FLT PREOP SUCCESS NO CALLBACK. If the sub function request is one of the above calls the hidden storage manager utilizes functions API s provided by the operating system to construct the proper data structures for returning to the calling process. Once the proper data structures have been assembled the hidden storage manager moves to operation and modifies the available space values being returned to exclude the space currently used by the hidden storage area. Upon completion of the data assembly and the modification of the available space values the hidden storage manager returns from the Preoperation callback indicating FLT PREOP COMPLETE. This return value informs the operating system intercept that the hidden storage manager has completed the operation and the Filter Manager is not to call any of the remaining filters in the filter stack and will not call the file system.

Referring to a process for intercepting create file requests is described. Operating system is configured to intercept creates requests and pass them to hidden storage manager . According to one embodiment hidden storage manager monitors for the IRP MJ CREATE function. Upon the call into the Preoperation callback for the IRP MJ CREATE the hidden storage manager determines at operation if the calling process has been previously registered with the hidden storage manager . If the process is registered with the hidden storage manager then the process is entitled to full access to the volume and the hidden storage manager returns from the Preoperation callback indicating FLT PREOP SUCCESS NO CALLBACK. This return value informs the operating system intercept that the Driver is finished with this operation and does not require any more callbacks related to this function. In essence the handling of the IRP MJ CREATE in this manner with a registered process serves to allow the registered process full access to the hidden storage.

When the hidden storage manager determines that the process is not registered the hidden storage manager moves to operation and further determines if the creation of the file or directory is targeted for the hidden storage area on the volume. If the creation is requested to occur within the hidden storage area the process moves to operation where hidden storage manager denies access to the request by returning a STATUS OBJECT NAME NOT FOUND status within the return value.

When the hidden storage manager has determined the request to create a file or directory is not within the hidden storage area and the application or program is not registered the process moves to operation where the hidden storage manager further determines if the requested size of the creation will cause the available space excluding the hidden space to be less than the performance margin. When the requested creation size does cause the available space excluding the hidden space to be less than the performance margin then the process moves to operation where the hidden storage manager erases enough files within the hidden storage area to satisfy the creation request and maintain the performance margin. The hidden storage manager then returns to the calling process a return code of FLT PREOP SUCCESS NO CALLBACK. According to one embodiment a list of the erased files data are communicated back to the registered processes that are utilizing the hidden storage space. According to one embodiment when the performance margin can not be maintained due to not enough storage space the performance margin may be reduced or eliminated. Different methods may be used in reducing the performance margin. For example the performance margin may be reduced some predetermined percentage i.e. 5 10 15 20 . . . . The performance margin may be eliminated when it is below a threshold i.e. 50 . According to one embodiment the hidden storage may also be eliminated when the available space on the device is below some predetermined threshold.

When the hidden storage manager has determined the application or program is not registered the process moves to operation and the hidden storage manager further determines if the requested size of the write operation will cause the available space excluding the hidden space to be less than the performance margin. If the available space will be less than the performance margin the process moves to operation and the hidden storage manager erases enough files within the hidden storage area to satisfy the write operation request and maintain the performance margin. The hidden data manager returns to the calling process a return code of FLT PREOP SUCCESS NO CALLBACK. As discussed above a list of the erased files data may also be communicated back to the registered processes that are utilizing the hidden storage space.

In order to further improve the performance of the use of hidden storage an optional component can be utilized by hidden storage manager . A performance bottleneck is potentially created by synchronously interlocking the maintenance of the performance margin with the requests to create files directories IRP MJ CREATE and the request to write to files IRP MJ WRITE . The applications or programs initiating the call to the operating system to create or write to a file may experience long wait times if the hidden storage manager erases files to satisfy the requests.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims hereinafter appended.

