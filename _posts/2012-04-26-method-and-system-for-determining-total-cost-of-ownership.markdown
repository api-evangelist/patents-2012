---

title: Method and system for determining total cost of ownership
abstract: Embodiments of the present invention are directed to a total cost of ownership method and system for technology components, applications or business units. The system provides financial reporting costs in information technology terms in order to build a bridge between technology and finance organizations. The method and system utilize data from systems of record for assets and charges, extract this data and deliver output reports and visualizations on the data processing and analysis in order to drive a Total Cost of Ownership for technology components, applications or business units. The method includes bringing data from disparate sources into the computer processor accessing at least one storage medium, validating the data by a Data Quality Engine, processing the data by matching the at least one charge to the at least one asset and performing data analytics and reporting on the Total Cost of Ownership.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08538792&OS=08538792&RS=08538792
owner: JPMorgan Chase Bank, N.A.
number: 08538792
owner_city: New York
owner_country: US
publication_date: 20120426
---
Embodiments of the invention are related generally to systems and methods for determining the Total Cost of Ownership by automating the delivery of charges matched to assets and allocated to a quality technology component using available data sources.

Total Cost of Ownership TCO is an estimate whose purpose is to help consumers and enterprise managers determine direct and indirect charges of a product or system. A TCO analysis identifies total charges of an asset used by an application and allocates charges to customers who use the application. An example of TCO analysis is identification of total costs of technology used by Investment Management in order to charge back the identified cost for that technology to customers implementing the technology. TCO analysis is used to support acquisition and planning decisions for a wide range of assets that bring significant maintenance or operating costs across a long usable life.

Although few processes and systems are available for providing financial reporting costs in information technology terms the existing art is deficient because current cost allocation systems fail to facilitate proper communication between for instance a finance department and a technology team thus failing to provide an efficient bridge between technology and finance organizations. This process is complicated by financial staff communicating in non technical financial terms and technical staff communicating in non financial technical terms. With the current state of the cost allocation systems it is time consuming and burdensome to collect and process the charge and asset data for determining the total cost of ownership. Furthermore such computations are typically only performed on a quarterly basis even though data may be available to perform this process more frequently such as once per month. Moreover current systems take more than three full business days to compile the charge and asset data and the process is laborious and manually intensive. The current systems are also subject to human error and prone to inaccuracies because of manual data entry steps. Current systems are also unable to process disparate data that is data in different formats and from varied sources such as that from database tables XML files TXT files etc. Therefore since a subset of data elements is used full asset and application details are not available under the current systems.

Accordingly a solution is needed for determining the total cost of ownership that utilizes data from systems of record for information technology assets and financial charges extracts and processes this data to deliver output reports and visualizations on the data processing and analysis. The solution should automate the delivery and interpretation of the asset and charge data and determine the appropriate weighted charge for the appropriate application s associated with the asset. The weighted charge may represent the shared ownership for the applications associated with the asset.

In accordance with exemplary embodiments of the present invention there is provided a total cost of ownership reporting system that operates over a telecommunications network. In one aspect of the invention a flexible processing system is provided for determining the total cost of ownership by utilizing data from systems of record for assets and charges. The system implements a computer processor accessing at least one storage medium and comprises interfaces for gathering validating processing analyzing and visualizing information pertaining to assets and charges. The functionality of the TCO system is broken down into four major modules or components 1 an Extract Transform and Load ETL Engine 2 a Data Quality Engine 3 a Charge Processing Engine and 4 an Analytics Reporting and Data Visualization Engine. After relevant asset and charge data is extracted from system s of record using the ETL Engine the Data Quality Engine interprets asset information and combines it with charge information in order to validate and import appropriate data fields. The Charge Processing Engine then matches asset and charge data in order to interpret appropriate weighted charge for an appropriate configuration item. Configuration items may be Information Technology IT assets such as Applications Operating Systems Physical Servers Virtual Hosts Virtual Machines VM Databases Web Instances Java or other Application Virtual Machines or other IT assets. Configuration items may also be business assets such as Lines of Business Business Units distribution equity retail etc. Regions Americas Europe Middle East Africa Asia Pacific etc. Divisions Departments Teams Managers Individuals employee staff member and or or any other custom configurable items. The Visualization Engine may then subsequently deliver output reports and visualizations on the data processing and analysis in order to drive a TCO analysis for the assets for example technology components applications or business units.

In a further aspect of the invention a computer implemented method is provided for determining the Total Cost of Ownership implementing a computer processor accessing at least one storage medium. The method comprises gathering and extracting asset and charge data from system s of record the data being from disparate data sources and in varied formats. The method further includes validating the data and performing analysis data munging and data improvement activities on it. The method also includes matching the asset and charge data in order to interpret the appropriate weighted charges for the appropriate configuration item. Configuration items may be IT assets such as Applications Operating Systems Physical Servers Virtual Hosts Virtual Machines Databases Web Instances Java or other Application Virtual Machines or other IT assets. Configuration items may also be business assets such as Lines of Business Business Units distribution equity retail etc. Regions Americas Europe Middle East Africa Asia Pacific etc. Divisions Departments Teams Managers Individuals employee staff member and or or any other custom configurable items. The method further includes delivering output reports and visualizations on the data processing and analysis in order to drive a TCO analysis for the assets for example technology components applications or business units.

Embodiments of the present invention are directed to a total cost of ownership method and system for technology components applications or business units. The system provides financial reporting costs in information technology terms in order to build a bridge between technology and finance organizations. Embodiments of the system utilize data from systems of record for information technology assets and financial charges extract and process this data to deliver output reports and data visualizations on the data processing and analysis in order to drive a Total Cost of Ownership for assets for example technology components applications or business units.

The Configuration Management System s may provide data for IT assets such as Applications Operating Systems Physical Servers Virtual Hosts Virtual Machines Databases Web Instances Java or other Application Virtual Machines or business assets such as Lines of Business Business Units distribution equity retail etc. Regions Americas Europe Middle East Africa Asia Pacific etc. Divisions Departments Teams Managers Individuals employee staff member and or or any other custom configurable items. The Financial System s may provide charges and charges details data such as dollar amounts that reflect the cost incurred by an asset.

The TCO Application includes a Data Mart an Extract Transform and Load Engine a Data Quality Engine a Charge Processing Engine an Analytics Reporting and Data Visualization Engine and a TCO User Interface . The TCO Application may bring data from the Configuration Management System s and the Financial System s using the Extract Transform and Load Engine in the form of data feeds. The data may then be uploaded in the Data Mart . The Data Mart may not be the system of record for the data brought from the Configuration Management System s and the Financial System s . In an embodiment of the invention the Data Mart may be a database that is local to the TCO System and that stores data to be used by the TCO Application to perform the TCO analysis. Once the data feeds are configured or data is uploaded the ETL Engine may identify data formatting in the source data by performing initial asynchronous scans of the data. The Data Quality Engine may then analyze and perform data munging and data improvement activities to aid in the identification of data fields that should be imported. As the ETL Engine continues to scan deeper into the data the Data Quality Engine may learn and improve its recommendation of the data fields suitable for import. The Charge Processing Engine may then process charge and asset data by matching the assets to charges using a hierarchical matching criteria. The results of processing of the charge and asset data may be stored in the Data Mart . Once the assets and charges have been matched the Analytics Reporting and Data Visualization Engine may then operate similarly to the Data Quality Engine to asynchronously scan the data in the Data Mart for reporting and output. Embodiments may also include standard reporting features available through a TCO User Interface that may allow users to choose out of the box reports or create ad hoc reports.

The ETL Engine is flexible enough to handle most data formats that are fed into it. Examples for data formats include but are not limited to database tables XML TXT CSV etc. Once the data feeds are configured or data is uploaded the ETL Engine may identify data formatting in the source data by performing initial asynchronous scans of the data. The operation of the ETL Engine is described in greater detail below with reference to .

Another component of the system the Data Quality Engine is a data validation interface that may be configured to identify variances in the data feeds compared to previous executions of the Data Quality Engine . The Data Quality Engine may analyze and perform data munging and data improvement activities to aid the developer in defining which fields of data should be imported. Examples of data fields marked for import include but are not limited to asset identifier asset location asset usage amount user identifier user group etc. In one embodiment of the invention all the data records in the data feed are marked for import. Embodiments of the invention may also include marking a subset of the data records in the data feed for import.

The Date Quality Engine may also be able to for instance identify faulty records. Faulty records are records that have failed to map on the system and records that are faulty or improper for some other reason. The Data Quality Engine may have a job failure management mechanism that will allow jobs and data sets to be marked as faulty and allow them to be taken out of the data import process. A job may be defined as a task for importing one or more datasets from a data source. In one embodiment of the invention the Data Quality Engine may adopt a data learning process that may utilize not only column header information but also column format information to aid in data import. As the ETL Engine continues to scan deeper into the data source the Data Quality Engine may learn and improve its recommendation of the data fields suitable for import. Typically the more data that is fed into the system and the more time that is spent analyzing the data the higher quality recommendations the Data Quality Engine may be able to make. In one embodiment of the invention the Data Quality Engine may perform in an entirely automated manner without requiring user intervention. Embodiments may also include the Data Quality Engine performing in a quasi automated manner with requiring some user intervention. Embodiments may also include the Data Quality Engine performing recommendation of the source data in an entirely manual manner with the user specifying which data fields to import.

An additional system component the Charge Processing Engine may process charge and asset data. In the Charge Processing Engine charges may be matched to assets using a hierarchical matching criteria. Examples of type of charges include but are not limited to financial charges resource utilization charges and charges that reflect the benefit associated with an asset. In one embodiment of the invention the financial charges are in U.S. Dollar amounts. Embodiments of the invention may also include configuring the currency unit of the financial charge to handle various currency types including but not limited to Canadian Dollar Euro Indian Rupee etc. Embodiments may also include the handling of currency fluctuations and processing of charges based on multiple currency types.

Embodiments of the invention include a hierarchical matching criteria list containing the following IT assets to be matched to charges Applications Operating Systems Physical Servers Virtual Hosts Virtual Machines Databases Web Instances Java or other Application Virtual Machines or any other custom configurable asset. An embodiment of a hierarchical matching criteria list is described in greater detail with reference to below. The Charge Processing Engine may also allocate charges to assets in a hierarchical matching criteria list containing the following business assets Lines of Business Business Units distribution equity retail etc. Regions Americas Europe Middle East Africa Asia Pacific etc. Divisions Departments Teams Managers Individuals employee staff member and or other custom designations or groupings specific to the business. An embodiment of a hierarchical matching criteria list is described in greater detail with reference to below. Embodiments of the invention may also include the Charge Processing Engine allocating the charge to an asset based on regulatory rules and procedures. The Charge Processing Engine may operate by traversing the entire asset hierarchy that is walking up and down the asset metadata from server all the way up to the application level and performing data analysis and charge splitting at each layer. The goal may be to find the true allocated charge for the highest quality asset that is most closely aligned with the business in order to obtain a true cost of ownership. An embodiment of a method performed by the Charge Processing Engine is described in greater detail with reference to below.

An additional module the Analytics Reporting and Data Visualization Engine may operate similarly to the Data Quality Engine to asynchronously scan the data being imported into the TCO Application for reporting and output. The Analytics Reporting and Data Visualization Engine may allow for canned or customized reporting. In an embodiment the reporting may include the following statistical analyses trending and predictive modeling financial trajectory plots scatter plots and amalgamated life cycle reporting for lines of business departments or other logical business unit groupings. Embodiments may also include standard reporting features available through a user interface that allows users to choose out of the box reports or create ad hoc reports. In this manner the users may be able to sort filter sum average or perform other operations on the TCO output. Embodiments may also include standard reports for TCO such as Application Cost Reports Staff Reports and department or any logic business unit summary or detailed reports. Embodiments may also include providing methods to interface with and report to external reporting solutions including but not limited to Cognos Business Objects or any other third party reporting solution. Embodiments may also include data visualization with a portal like solution where authorized users may utilize data analytics techniques like tree maps heat maps scatter plot diagrams pie charts or line graphs to view the TCO output. Embodiments of the Analytics Reporting and Data Visualization Engine are described in greater detail with respect to .

In embodiments of the present invention the TCO system and method may be used to perform trend analysis based on data for a historical period of time. The TCO system and method may also be used to perform sensitivity analysis. Examples of such sensitivity analysis scenarios include but are not limited to variations in charges and variations in circumstances. In embodiments of the invention the TCO system and method may also be used to perform cost benefit analysis to determine for example the feasibility of acquiring an asset modifying the charge allocation structure modifying the application weights etc.

Generally it should be noted that the components depicted and described herein above may be or include a computer or multiple computers. Although the components are shown as discrete units all components may be interconnected or combined. The components may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types.

Furthermore the ETL Engine may contain one or more Configuration Management System connectors to connect to one or more Configuration Management Systems CMS or Configuration Management Databases CMDB . Examples of CMS CMDB include but are not limited to BMC Atrium CMDB HP Universal CMDB ProcessWorx IBM Tivoli Configuration and Change Management Database LiveTime CMDB CMDBBuild or a home grown CMS CMDB. A custom CMDB configuration portal may provide authorized users with the ability to configure various features of the CMDB system including the ability to define the fields utilized from the CMDB. The ETL Engine may also contain one or more IT Asset Management System connectors to connect to one or more IT Asset Management Systems. Examples of the IT Asset Management Systems include but are not limited to IBM Tivoli Maximo Asset Management SysAid Asset Management and Express Software Manager .

Additionally the ETL Engine may also include a User Interface that may be used to configure the ETL Engine . Embodiments of the invention include a web based user interface. The user interface may provide users the ability to select a data field from a data source to utilize for ETL. The user interface may also contain one or more movable portal components applets or shuttle controls to provide the ability to customize the fields for ETL by adding or removing single field selections or all fields selections. The User Interface may also allow the designation of constraints on the data fields. Examples of such constraints include but are not limited to primary keys and foreign keys. If no field constraints are specified the ETL Engine may attempt to extrapolate and match column headers of two or more data source tables by name in order to identify primary and foreign key fields.

The ETL Engine may also include a Data Archiving Processor that may have the ability to dynamically move data to archive tables. The data archiving process may be managed using a configuration user interface. Data may be archived based on a data retention policy that may be subject to change based on system performance the needs of the finance teams or other criteria. Furthermore the ETL Engine may also include a Job Scheduler that may provide the ability to manage jobs schedules and statuses. Finally the ETL Engine may also include a Data Metric Processor that may gather data metrics for data import jobs row counts sums averages and variances for key fields and data sets.

Embodiments of the invention include a hierarchical matching criteria list containing the following IT assets to be matched to charges Applications Operating Systems Physical Servers Virtual Hosts Virtual Machines Databases Web Instances Java or other Application Virtual Machines or any other custom configurable asset. An embodiment of a hierarchical matching criteria list is described in greater detail with reference to below. The Charge Processing Engine can also allocate charges to assets in a hierarchical matching criteria list containing the following business assets Line of Business Business Unit distribution equity retail etc. Region Americas Europe Middle East Africa Asia Pacific etc. Division Department Team Manager Individual employee staff member and or other custom designation or grouping specific to the business. An embodiment of a hierarchical matching criteria list is described in greater detail with reference to below. Embodiments of the invention may also include the Charge Processing Engine allocating the charge to an asset based on regulatory rules and procedures.

The process begins in S by matching the charge to the first asset in the hierarchical matching criteria list. If the charge is matched to an asset in S the system obtains the matched charge and asset details in S. If a charge is not matched to an asset in S the system checks in S to see if there are any subsequent assets in the hierarchical matching criteria list that are yet to be compared with the charge. If all the assets have been compared to the charge and a match between the charge and an asset is not obtained in S the charge is allocated to the entire organization for example Investment Management. However if in S there are subsequent assets in the hierarchical matching criteria list that have not been compared with the charge then in S the next asset is obtained to match with the charge. Thus if a charge fails to be matched to a given asset level then an attempt may be made to match it to a subsequent asset level in order until no match between the charge and an asset can be obtained.

If a match between the charge and an asset is obtained in S and the matched charge and asset details are gathered in S the system determines if for example the charges are matched to an IT asset in S. In an embodiment of the invention if the asset hierarchy consists of both IT and business assets and the charges are matched to an IT asset the charges may be allocated to the matched IT asset in S. However if instead the charges are not matched to an IT asset in S the system determines the number of applications listed for the asset in . If there is only one application associated with the asset then the charge is allocated to the matched application in . However if there are multiple applications listed for the asset then in the system determines if weight factors are specified for the multiple applications associated with the asset. If no weight factors are listed in the inventory for the multiple applications associated with the asset then in the charge may be allocated based on default weight factors. In one embodiment the default weight factors may be designed to allocate equal weight across all applications. On the other hand if weight factors are listed for the applications then in the charge is allocated based on the weight factors for each application. In one embodiment of the invention weight factors may be represented in the form of percentages. Embodiments of the invention also include weight factors that represent maximum charge amounts that can be allocated to an application. For example each application may have a maximum dollar amount that may be allocated to it and once that dollar amount has been allocated to the application the remaining dollar amount may be allocated to the entire organization.

As described above embodiments of the system of the invention and various processes of embodiments are described. The system of the invention or portions of the system of the invention may be in the form of a processing machine i.e. a tangibly embodied machine such as a general purpose computer or a special purpose computer for example. As used herein the term processing machine is to be understood to include at least one processor that uses at least one memory. The at least one memory stores a set of instructions. The instructions may be either permanently or temporarily stored in the memory or memories of the processing machine. The processor executes the instructions that are stored in the memory or memories in order to process data. The set of instructions may include various instructions that perform a particular task or tasks such as any of the processing as described herein. Such a set of instructions for performing a particular task may be characterized as a program software program or simply software.

As noted above the processing machine which may be constituted for example by the particular system and or systems described above executes the instructions that are stored in the memory or memories to process data. This processing of data may be in response to commands by a user or users of the processing machine in response to previous processing in response to a request by another processing machine and or any other input for example.

As noted above the processing machine used to implement the invention may be a general purpose computer. However the processing machine described above may also utilize or be in the form of any of a wide variety of other technologies including a special purpose computer a computer system including a microcomputer mini computer or mainframe for example a programmed microprocessor a micro controller a peripheral integrated circuit element a CSIC Consumer Specific Integrated Circuit or ASIC Application Specific Integrated Circuit or other integrated circuit a logic circuit a digital signal processor a programmable logic device such as a FPGA PLD PLA or PAL or any other device or arrangement of devices that is capable of implementing the steps of the processes of the invention.

The processing machine used to implement the invention may utilize a suitable operating system. Thus embodiments of the invention may include a processing machine running the Microsoft Windows Vista operating system the Microsoft Windows XP operating system the Microsoft Windows NT operating system the Windows 2000 operating system the Unix operating system the Linux operating system the Xenix operating system the IBM AIX operating system the Hewlett Packard UX operating system the Novell Netware operating system the Sun Microsystems Solaris operating system the OS 2 operating system the BeOS operating system the Macintosh operating system the Apache operating system an OpenStep operating system or another operating system or platform.

It is appreciated that in order to practice the method of the invention as described above it is not necessary that the processors and or the memories of the processing machine be physically located in the same geographical place. That is each of the processors and the memories used by the processing machine may be located in geographically distinct locations and connected so as to communicate in any suitable manner. Additionally it is appreciated that each of the processor and or the memory may be composed of different physical pieces of equipment. Accordingly it is not necessary that the processor be one single piece of equipment in one location and that the memory be another single piece of equipment in another location. That is it is contemplated that the processor may be two pieces of equipment in two different physical locations. The two distinct pieces of equipment may be connected in any suitable manner. Additionally the memory may include two or more portions of memory in two or more physical locations.

To explain further processing as described above is performed by various components and various memories. However it is appreciated that the processing performed by two distinct components as described above may in accordance with a further embodiment of the invention be performed by a single component. Further the processing performed by one distinct component as described above may be performed by two distinct components. In a similar manner the memory storage performed by two distinct memory portions as described above may in accordance with a further embodiment of the invention be performed by a single memory portion. Further the memory storage performed by one distinct memory portion as described above may be performed by two memory portions.

Further various technologies may be used to provide communication between the various processors and or memories as well as to allow the processors and or the memories of the invention to communicate with any other entity i.e. so as to obtain further instructions or to access and use remote memory stores for example. Such technologies used to provide such communication might include a network the Internet Intranet Extranet LAN an Ethernet or any client server system that provides communication for example. Such communications technologies may use any suitable protocol such as TCP IP UDP or OSI for example.

As described above a set of instructions is used in the processing of the invention. The set of instructions may be in the form of a program or software. The software may be in the form of system software or application software for example. The software might also be in the form of a collection of separate programs a program module within a larger program or a portion of a program module for example. The software used might also include modular programming in the form of object oriented programming. The software tells the processing machine what to do with the data being processed.

Further it is appreciated that the instructions or set of instructions used in the implementation and operation of the invention may be in a suitable form such that the processing machine may read the instructions. For example the instructions that form a program may be in the form of a suitable programming language which is converted to machine language or object code to allow the processor or processors to read the instructions. That is written lines of programming code or source code in a particular programming language are converted to machine language using a compiler assembler or interpreter. The machine language is binary coded machine instructions that are specific to a particular type of processing machine i.e. to a particular type of computer for example. The computer understands the machine language.

Any suitable programming language may be used in accordance with the various embodiments of the invention. Illustratively the programming language used may include assembly language Ada APL Basic C C COBOL dBase Forth Fortran Java Modula 2 Pascal Prolog REXX Visual Basic and or JavaScript for example. Further it is not necessary that a single type of instructions or single programming language be utilized in conjunction with the operation of the system and method of the invention. Rather any number of different programming languages may be utilized as is necessary or desirable.

Also the instructions and or data used in the practice of the invention may utilize any compression or encryption technique or algorithm as may be desired. An encryption module might be used to encrypt data. Further files or other data may be decrypted using a suitable decryption module for example.

As described above the invention may illustratively be embodied in the form of a processing machine including a computer or computer system for example that includes at least one memory. It is to be appreciated that the set of instructions i.e. the software for example that enables the computer operating system to perform the operations described above may be contained on any of a wide variety of media or medium as desired. Further the data that is processed by the set of instructions might also be contained on any of a wide variety of media or medium. That is the particular medium i.e. the memory in the processing machine utilized to hold the set of instructions and or the data used in the invention may take on any of a variety of physical forms or transmissions for example. Illustratively the medium may be in the form of paper paper transparencies a compact disk a DVD an integrated circuit a hard disk a floppy disk an optical disk a magnetic tape a RAM a ROM a PROM a EPROM a wire a cable a fiber communications channel a satellite transmissions or other remote transmission as well as any other medium or source of data that may be read by the processors of the invention.

Further the memory or memories used in the processing machine that implements the invention may be in any of a wide variety of forms to allow the memory to hold instructions data or other information as is desired. Thus the memory might be in the form of a database to hold data. The database might use any desired arrangement of files such as a flat file arrangement or a relational database arrangement for example.

In the system and method of the invention a variety of user interfaces may be utilized to allow a user to interface with the processing machine or machines that are used to implement the invention. As used herein a user interface includes any hardware software or combination of hardware and software used by the processing machine that allows a user to interact with the processing machine. A user interface may be in the form of a dialogue screen for example. A user interface may also include any of a mouse touch screen keyboard voice reader voice recognizer dialogue screen menu box list checkbox toggle switch a pushbutton or any other device that allows a user to receive information regarding the operation of the processing machine as it processes a set of instructions and or provide the processing machine with information. Accordingly the user interface is any device that provides communication between a user and a processing machine. The information provided by the user to the processing machine through the user interface may be in the form of a command a selection of data or some other input for example.

As discussed above a user interface is utilized by the processing machine that performs a set of instructions such that the processing machine processes data for a user. The user interface is typically used by the processing machine for interacting with a user either to convey information or receive information from the user. However it should be appreciated that in accordance with some embodiments of the system and method of the invention it is not necessary that a human user actually interact with a user interface used by the processing machine of the invention. Rather it is also contemplated that the user interface of the invention might interact i.e. convey and receive information with another processing machine rather than a human user. Accordingly the other processing machine might be characterized as a user. Further it is contemplated that a user interface utilized in the system and method of the invention may interact partially with another processing machine or processing machines while also interacting partially with a human user.

It will be readily understood by those persons skilled in the art that the present invention is susceptible to broad utility and application. Many embodiments and adaptations of the present invention other than those herein described as well as many variations modifications and equivalent arrangements will be apparent from or reasonably suggested by the present invention and foregoing description thereof without departing from the substance or scope of the invention.

Accordingly while the present invention has been described here in detail in relation to its exemplary embodiments it is to be understood that this disclosure is only illustrative and exemplary of the present invention and is made to provide an enabling disclosure of the invention. Accordingly the foregoing disclosure is not intended to be construed or to limit the present invention or otherwise to exclude any other such embodiments adaptations variations modifications and equivalent arrangements.

