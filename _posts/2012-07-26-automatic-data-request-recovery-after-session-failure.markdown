---

title: Automatic data request recovery after session failure
abstract: Techniques for recovering from session failures between clients and database servers are described herein. A session may be established between a client and a first database server to handle a database query for the client. A command of the session may be received by the first database server from the client. Data requested by the command may be retrieved. Prior to responding to the command, the data is spooled to a session state stored in a repository of the first database server, and the session state is replicated to one or more additional database servers. The session state stored in the repository of the first database server enables the first database server and client to recover from a failure of the session. The replicated session state enables the additional database server(s) to reestablish the session and respond to the command, instead of the first database server, if the session fails.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09251194&OS=09251194&RS=09251194
owner: Microsoft Technology Licensing, LLC
number: 09251194
owner_city: Redmond
owner_country: US
publication_date: 20120726
---
A database server is a product that provides database services to computer applications in response to requests received therefrom. Such database services may include but are not limited to storing retrieving analyzing or manipulating database data. Depending upon the implementation the applications may be running on the same machine on which the database server is running or may be running on other machines that are connected to the machine on which the database server is running via one or more networks. To send requests to the database server an application connects to the database server and establishes therewith what is referred to as a session. A session represents an ongoing interactive information exchange between the application and the database server. A session is set up or established at a certain point in time and then torn down at a later point in time. An established session often involves the sending of more than one message from the application to the database server and from the database server to the application.

After an application has initiated a session with a database server it may send a command to the database server for execution within the context of the session. For example a command may be sent to the database server to retrieve rows from a database table. At some point in time the connection that was established between the application and the database server may fail. For example in a scenario in which the application and the database server are running on different machines the connection may fail if the machine on which the database server is running is shut down or crashes or if there is a problem with a network that connects the different machines. If the connection fails the session itself fails and a command currently being processed by the database server fails. This results in the application having to implement retry logic to reattempt the command. However retry logic is complex to implement in an application. Furthermore when such an application is moved to a cloud environment the application will need additional modifications to handle the more frequent database access failures that occur on lower cost commodity hardware.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Methods systems and computer program products are provided for recovering from session failures between clients and database servers and enabling commands that were in process during a session failure to be completed in an efficient manner. A session may be established between a client and a first database server to handle a database query for the client. A command of the session may be received by the first database server from the client. Data requested in the command may be retrieved from a database associated with the first database server. Prior to responding to the command the data is spooled to a session state stored in a repository of the first database server and the session state is replicated to one or more additional database servers. The session state stored in the repository of the first database server enables the first database server and client to recover from a failure of the session and to complete the command without having to re retrieve the data from the database. Furthermore the replicated session state enables the additional database server s to reestablish the session and respond to the command without having to re retrieve the data from the database instead of the first database server if the session fails.

Computer program products containing computer readable storage media are also described herein that store computer code instructions for enabling recovery from session failures and enabling completion of commands that were in process during a session failure as well as enabling additional embodiments described herein.

Further features and advantages of the invention as well as the structure and operation of various embodiments of the invention are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments of the present invention. However the scope of the present invention is not limited to these embodiments but is instead defined by the appended claims. Thus embodiments beyond those shown in the accompanying drawings such as modified versions of the illustrated embodiments may nevertheless be encompassed by the present invention.

References in the specification to one embodiment an embodiment an example embodiment or the like indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Furthermore when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of persons skilled in the relevant art s to implement such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Embodiments described herein facilitate recovery from session failures between a client and a database server and enable the efficient completion of commands that were in process during such failed sessions. Section II describes example embodiments for conducting database queries in a manner that enables recovery from session failures. Section III describes example embodiments in which a client and a first database server recover from a session failure. Section IV describes example embodiments in which a session failure between the first database server and the client is recovered between the client and a second database server. Section V describes an example processor based computer system that may be used to implement various embodiments described herein. Finally Section VI provides some concluding remarks.

Although the embodiments described herein are implemented in systems that include database servers persons skilled in the relevant art s will readily appreciate that the concepts described herein can easily be extended to any system in which sessions are established between a first entity to a second entity for execution of data requests and wherein recovery from session failures is desired. Such systems may include but are not limited to any of a wide variety of client server systems peer to peer systems or the like.

Numerous exemplary embodiments of the present invention are described as follows. It is noted that any section subsection headings provided herein are not intended to be limiting. Embodiments are described throughout this document and any type of embodiment may be included under any section subsection.

II. Example Embodiments for Conducting a Session between a Client and a Database Server in a Manner that Enables Recovery

As shown in system includes a client that is communicatively connected to a first database server via a communication channel and is communicatively connected to a second database server via a communication channel . Database servers and are intended to represent entities that perform operations with respect to data stored in one or more databases that are accessible thereto in response to receiving commands generated by clients such as client via communication channels and . The operations performed by each of database servers and may include for example storing retrieving analyzing and or manipulating database data. Database servers and may each be implemented as computer programs executing on a single machine or across multiple machines. As will be appreciated by persons skilled in the relevant art s such machines may comprise physical machines or virtual machines. In one embodiment database servers and may each be an instance of MICROSOFT SQL SERVER published by Microsoft Corporation of Redmond Wash. However this is an example only and is not intended to be limiting.

In one embodiment database servers and each comprise a standalone database server configured to execute commands received from one or more clients such as client . In an alternate embodiment database server and may be included in a plurality of database server instances running on a cluster of machines and employed to service requests from a plurality of clients such as client in a manner that allows for failover and high availability. In a further embodiment database servers and may each comprise one of a plurality of database server instances used to implement a cloud database service such as but not limited to MICROSOFT WINDOWS AZURE SQL hereinafter SQL Database offered by Microsoft Corporation of Redmond Wash. In embodiments any number of database servers similar to database servers and may be present including tens hundreds and even greater numbers of database servers.

Client is intended to represent an entity that generates and sends commands to database servers and for execution thereby. Such commands may include for example commands to store retrieve analyze and or manipulate database data. Client may be implemented as one or more computer programs executing on one or more machines. For instance client may be implemented in any type of stationary or mobile computing device including a desktop computer e.g. a personal computer etc. a mobile computer or computing device e.g. a Palm device a RIM Blackberry device a personal digital assistant PDA a laptop computer a notebook computer a tablet computer e.g. an Apple iPad a netbook etc. a mobile phone e.g. a cell phone a smart phone such as an Apple iPhone a Google Android phone a Microsoft Windows phone etc. or other type of stationary or mobile device

Client and database servers and may each be executed by different machines that are connected to each other via a particular communication infrastructure. In further accordance with such an implementation communication channels and may be established in a manner that corresponds to the particular communication infrastructure. For example in an embodiment in which the communication infrastructure comprises a network such as a local area network LAN a wide area network WAN or a combination of networks such as the Internet well known networking protocols may be used to establish communication channels and between the client and database servers and . As another example in an embodiment in which database servers and are included in a cloud database service communication channels and may be established via a gateway machine that acts as an intermediary between the machine on which client is running and the machines on which database servers and are running. Such gateway device when present may enable communications between client and one of database servers and at a particular time. Still other communication infrastructures and associated methods for establishing communication channels and are possible.

It is also possible that client and one or both of database servers and may be executing on the same machine. In accordance with such an implementation one or both of communication channels and may comprise a channel that is internal to the machine upon which both entities are executing.

Generally speaking communication channel and are used to transport commands generated by client to database servers and respectively so that database servers and may execute such commands. Database servers and may also return requested data error messages or other information to client via communication channels and . In accordance with certain embodiments the manner in which information is exchanged between client and database servers and is governed by a standard application layer protocol that is supported by both entities. For example in a particular embodiment the application layer protocol comprises the Tabular Data Stream MS TDS protocol as defined in Version 20120328 of the Tabular Data Stream Protocol Specification published by Microsoft Corporation of Redmond Wash. However this is only an example and other protocols may be used.

In accordance with certain embodiments to interact with database servers and for the purpose of invoking the database services thereof client connects to one of database servers or and establishes therewith what is referred to herein as a session. For instance client may connect with database server to establish a session. The session represents an ongoing interactive information exchange between client and database server . A session may be set up or established at a certain point in time and then ended at a later point in time. During an established session client may send database server any number of commands and database server may return to client results error codes or other information in response to executing or attempting to execute such commands client may alternatively interact with database server in a similar manner when a session is established between them . For instance client may transmit an SQL structured query language command to database server such as a SELECT query or other command. A SELECT query may be used to retrieve data e.g. one or more rows and or columns from one or more database tables managed by a databases server.

As shown in database server includes a response spooler and database server includes a response spooler . Response spoolers and function similarly for their respective database servers. Furthermore additional database servers may be present that also include respective response spoolers similar to response spoolers and . For purposes of brevity response spooler is described as follows and this description is intended to be representative of the functionality of response spooler and of further response spoolers that may be present in other database servers .

Response spooler is configured to generate a session state . Session state contains information representing a state of the session between database server and client at any particular time. As such session state may be used to recover from a session failure between client and database server . Session state may include various types of state information. For instance response spooler may store a session identifier e.g. a virtual session identifier for the established session between client and database server in session state . Furthermore a command identifier associated with each session command generated by client and received by database server may be stored in session state by response spooler . Database server may retrieve data requested in the received command from a database associated with database server and response spooler may include the retrieved data in session state . After response spooler generates session state with respect to a particular received command and replicates session state as further described below database server may transmit the retrieved data to client in response to the received command.

The foregoing operations of response spooler enable response spooler to aid database server or other database server such as database server in recovering from a session failure between client and database . For instance if a session failure occurs between client and database server e.g. due to a connection failure a failure in database server etc. resulting in a command that is being processed not being responded to client may retransmit the command with the command identifier and an identifier for the failed session to database server . Database server may compare the received command identifier and session identifier with session state and if there is a match may transmit the data included in session state to client in response to the command retransmission. The failed session may be reestablished in this manner and continued between client and database server from the point of the failure.

Alternatively as described herein another database server such as database server may be provided with a copy of session state by response spooler shown as replicated session state . If a session failure occurs between client and database server resulting in a command that is being processed not being responded to client may retransmit the command with the command identifier and an identifier for the failed session. The retransmitted command may be received by database server rather than database server . This may be because database server is not operating due to a system crash or other reason. Database server may compare the received command identifier and session identifier with those stored in replicated session state and if there is a match may transmit the data included in replicated session state to client in response to the command retransmission. The failed session may be reestablished between client and database server in this manner rather than database server and continued between client and database server from the point of the failure.

More information regarding the structure function and operation of the components of system in accordance with various implementations is described as follows in regard to .

In particular is a block diagram that illustrates various elements of a client in accordance with one example embodiment. Client is an example of client shown in . As shown in client comprises an application and a database driver . Application comprises a computer program that enables a user thereof to perform various functions at least some of which require database operations to be performed. In order to facilitate the performance of such database operations application is programmed to interact with database driver . In an embodiment application may be considered to be included in client as shown in or may be separate from client . For instance in one embodiment application and client may operate on a common computing device and application may access client to communicate with a database at a database server. Application may be any type of application that accesses data stored in a database e.g. using SQL queries or other types of database requests provided to database driver . Database driver operates to establish a connection between application or any of a variety of other applications and a database server and to utilize such connection for the purpose of obtaining services from the database server.

In one embodiment database driver provides an application programming interface API that can be used by any of a variety of applications to invoke the functionality thereof. As further shown in database driver also includes a command ID generator a parser and a protocol layer .

Command ID generator is configured to generate an ID for each command that is generated by client for transmission to and execution by a database server within the scope of a session. In one embodiment command ID generator generates a unique ID for each command so generated. When client sends a command to a database server client also sends the command ID associated with that command to the database server. For example in one embodiment a command and its corresponding command ID are included within the same message that is transmitted from client to a database server.

Parser is configured to encode commands to be sent to a database server and to interpret information received therefrom in accordance with a particular application layer protocol such as but not limited to MS TDS. In one embodiment protocol layer is intended to represent one or more computer programs executing in hardware e.g. one or more processors utilized by database driver to carry encoded commands produced by parser to a database server and to receive encoded information therefrom.

In accordance with the embodiment shown in the functions performed command ID generator are performed at the level of database driver rather than at the level of application . This is advantageous in that it can relieve programmers of applications that are designed to invoke database driver such as application from having to program features into their applications that are intended to recover from session failures. Additionally by incorporating such functionality at the database driver level rather than the application level embodiments described herein can advantageously reduce the complexity of such applications.

Session manager establishes a session with a client such as client of to handle a database query for the client. For instance session manager may receive a session identifier from the client that is used to establish a session with the client and is used by session manager to identify communications associated with the established session. For instance session ID generator may be configured to generate an ID for each session that is established between database server and a client to fulfill a data request e.g. an SQL SELECT query etc. received from an application at the client e.g. application in . In one embodiment session ID generator generates a unique ID for each session. The session ID may be transmitted to the client to establish the session with the client and may be included in subsequent communications to and from the database server that occur within the scope of the established session to identify those communications as being within the scope of the session .

Furthermore session manager receives commands associated with the session from the client. In the event of a session failure session manager may receive a session identifier from a client in a communication transmitted after the session failed and may enable the failed session to be reestablished if the session identifier received in the communication matches the session identifier stored in the session state for a session.

Engine is configured to interact with one or more databases such as a database associated with database server to perform various operations on data stored therein based on received commands where such operations include but are not limited to storing retrieving analyzing and or manipulating database data.

Response spooler is intended to represent one implementation of response spoolers and described above in reference to system of and thus performs the functions attributed to each of response spoolers and . For instance response spooler may spool data retrieved by engine in response to a command to a session state which is an example of session state described above. Furthermore response spooler may store the session identifier and the command identifier associated with the command in session state . As shown in response spooler stores session state in a state data repository . State data repository and any further state data repositories described elsewhere herein may include one or more of any type of storage mechanism including a magnetic disc e.g. a hard disk drive an optical disc e.g. an optical disk drive a memory device such as a RAM device e.g. a cache memory for temporary storage etc. and or any other suitable type of storage medium.

Still further after generating session state response spooler may replicate e.g. copy session state to at least one additional database server as indicated by the left directed arrow labeled in . The replicated session state enables the one or more additional database servers to respond to the command having a command identifier included in session state if the current session fails.

Remote replicated session state handler is configured to receive replicated session states from other database servers. For instance as shown in remote replicated session state handler receives a replicated session state from a remote server not shown in and stores replicated session state in state data repository . Replicated session state enables database server to respond to a command that was in process having a command identifier and associated session identifier included in replicated session state if that session fails at a different database server.

Parser is configured to interpret client generated commands that are received by database server and to encode information to be sent to clients in accordance with a particular application layer protocol such as but not limited to MS TDS. In one embodiment protocol layer is intended to represent one or more computer programs executing in hardware e.g. one or more processors utilized by database server to carry encoded information produced by parser to the appropriate clients and to receive encoded commands therefrom.

As shown in the method of flowchart begins at step . In step a first session is established with a client to handle a database query for the client. For example as described above session ID generator of database server may generate a session identifier used to identify a particular session. For instance in an embodiment session ID generator may perform a step of a flowchart shown in . In step a session identifier is generated for the first session. Session ID generator may generate the session identifier in any manner including incrementing the numerical value of a prior generated session identifier generating the session identifier in a random or pseudorandom manner or generating the session identifier in another manner.

Referring to database server may transmit the session identifier to a client to initiate a session with the database server. For instance database server may transmit the session identifier to client in a communication transmitted over communication channel e.g. in response to a request from client may store the received session identifier and may thereby establish a session with client . In establishing the session the client and database server may negotiate various parameters of the session including authentication and encryption techniques protocols etc.

Note that in an alternative embodiment client may generate the session identifier and may transmit the generated session identifier to database server to establish the session.

Referring back to in step a command associated with the first session is received from the client the command being a request for data. In embodiments any number of commands may be transmitted from client to database server including requests for database data. Database server may respond to each of the commands. Database server may receive a command ID associated with each of the one or more received commands. As discussed above such command IDs may be generated by command ID generator within client and transmitted to database server along with their associated commands. For instance in an embodiment command ID generator may perform a step of flowchart shown in . In step a command identifier is generated for the command. Command ID generator may generate the command identifier in any manner including incrementing the numerical value of a prior generated command identifier e.g. generating command identifiers in sequence generating the command identifier in a random or pseudorandom manner or generating the command identifier in another manner.

With reference to the implementation of client shown in such commands may be encoded by parser and sent to database server via protocol layer . With reference to the implementation of database server shown in the encoded commands may be received via protocol layer and interpreted by parser .

Referring back to in step the requested data is retrieved. In embodiments database server attempts to execute the command received by database server in step . With reference to the implementation of database server shown in engine may retrieve data requested by the received command from database .

In step the data is spooled to a session state stored in a repository. For example referring to response spooler may spool the data retrieved by engine to session state in state data repository . Response spooler may also include in session state the session identifier and the command identifier for the command being fulfilled by the retrieved data and may associate the command identifier with the retrieved data corresponding to the command.

In step the session state is replicated to at least one additional database server. For instance as shown in response spooler may transmit a copy of session state to one or more other database servers. For instance referring to a replication of session state may be received by database server as replicated session state and stored in storage at database server . Replicated session state enables database server and any further database servers that received replicated session state to respond to the command if the session with database server fails.

In step the data is transmitted to the client in response to the command. Referring to the data stored in session state may be transmitted from database server over communication channel to client in response to the command received in step . If all of the data is successfully transmitted from database server to client e.g. as indicated by one or more acknowledgements received from client response spooler may optionally delete the retrieved data from session state .

By generating and storing session state response spooler enables client and database server to recover from a session failure. After detecting the failure such as by receiving an indication of a connection or communication failure error client can retransmit the current command with the session identifier of the failed session. Database server may receive the command and session identifier and the session may be reestablished between client and database server by establishing a second session based on the same session identifier. The data stored in session state may be transmitted to client in response to the command without having to re retrieve the data from a database and the session may continue from that point e.g. with additional commands transmitted from client to database server .

Furthermore by replicating session state to other database servers as replicated session state client and another database server such a database server are enabled to recover from a session failure between client and database server . After detecting a failure such as by receiving an indication of a network connection or communication failure error client can retransmit the current command with the session identifier of the failed session. Database server may receive the command and session identifier such as through a network gateway device that transmits them to database server rather than database server e.g. because database server is not operating etc. In another embodiment client may include a list of database servers and may try a different database server in the list when the session with a current database server fails e.g. after one or more retries etc. . Database server may establish a session between client and database server based on the same session identifier. The data stored in replicated session state may be transmitted to client in response to the command without having to re retrieve the data and the session may continue from that point e.g. with additional commands transmitted from client to database server .

For instance the next subsection describes recovering from a session failure with the same database server as has previously participated in the session followed by a subsection describing recovering from a session failure with a different database server than previously participated in the session.

As described above a database query session between a client and a database server may undergo a session failure e.g. during or before step of flowchart in . The session failure may occur for a variety of reasons including a network failure between the client and database server or a failure in the database server. Subsequent to such a failure in an embodiment the session between the client and the database server may be recovered and any data request commands that were being processed at the time of the session failure may be continued in an efficient manner.

As shown in the method of flowchart begins at step . In step a second session is established with the client. Referring to after the session failure client may attempt to re establish the failed session with database server as a second session. In such case client may re transmit the session identifier used for the failed session to database server in a request to re establish the session. The request to re establish the session may be received by database server

Database server may analyze the received request to re establish the session to determine whether to establish a second session with client . For instance in an embodiment database server may perform step according to . depicts a flowchart of a process performed at a database server to identify a previously defined session according to an example embodiment.

As shown in flowchart begins with a step . In step the session identifier is received from the client in a communication transmitted to the database server to establish the second session. As described above database server may receive the session identifier used for the failed session from client in a request to re establish the session.

In step it is determined that the session identifier received in the communication matches the session identifier stored in the session state. In an embodiment database server may compare the session identifier received in step to session identifiers stored in one or more session states to determine whether the received session identifier is for a pre existing session.

For instance in an embodiment session manager of may perform the comparison. is a block diagram of session manager of according to an example embodiment. As shown in session manager may include a session ID comparer and a command ID comparer . Session ID comparer is configured to compare session identifiers received in communications from clients to session identifiers stored in session states. Session ID comparer may perform step by comparing the session identifier received in the request to reestablish the session to the session identifier in session state . If the session identifiers match session ID comparer indicates a match and session manager may enable the session to be reestablished. If the received session identifier does not match a session identifier in a stored session state session ID comparer indicates a match is not found. In such case session manager may not enable the session to be reestablished. Instead the session may potentially be reestablished with a different database server if a match occurs at that different database server .

Referring back to in step a re transmission of the command is received from the client. Client may re transmit a command that was previously transmitted to database server that was not completely fulfilled due to the session failure. The retransmitted command may be received by database server

Database server may analyze the received retransmitted command to determine how to proceed. Database server may determine whether the received command is indicated in session state to determine whether the command has been processed. For instance in an embodiment referring to command ID comparer of session manager may compare the command identifier for the received command to the command identifier stored in session state . If the command identifiers match command ID comparer indicates a match and session manager may respond to the command with at least a portion of the corresponding data stored in session state . If the received command identifier does not match the command identifier in session state command ID comparer indicates a match is not found. In such case session manager may not respond with the data included in session state and may optionally treat the command as a new command e.g. according to steps of .

Note that in embodiments the request to reestablish the session step and the retransmission of the command step may be received by database server from client in a same communication or in separate communications.

In step the requested data is accessed in the session state stored in the temporary storage. Because the received command identifier matched the command identifier in session state session manager may access the data stored in session state to be transmitted to client .

In step the requested data is transmitted to the client in response to the retransmitted command. As shown in the data stored in session state in association with the command identifier may be transmitted from database server over communication channel to client in response to the command received in step . If all of the data is successfully transmitted from database server to client e.g. as indicated by one or more acknowledgements received from client response spooler may optionally delete the data from session state .

Note that in one embodiment the entirety of the retrieved data stored in session state may be transmitted to client in response to the re transmitted command. In some cases prior to the session failure client may have already received a first portion of the retrieved data e.g. one or more rows one or more data packets etc. of session state from database server . Due to the session failure a second portion of the retrieved data of session state may not have been transmitted to client . As such in an embodiment in step client may provide an indication of the portion of the data of session state that was received prior to the session failure or may provide an indication of the portion of the data of session state that was not received . For instance the portion of data received or not received may be indicated as one or more rows of one or more tables as one or more data packets e.g. using packet identifiers etc. and or in another form. In response in steps and database server may access the data in session state and may transmit the portion of data that was not already received to client rather than transmitting the retrieved data in session state in its entirety .

As shown in the flow of information depicted by sequence diagram begins when client sends a request to database server to open a new connection. In response to receiving request database server may generate a session identifier for the session and may send a login response to client that includes the generated session identifier thereby establishing the requested connection. Alternatively client may generate the session identifier and may provide the generated session identifier to database server to establish the session.

Subsequent to the establishment of the connection client generates a command referred to as Command1 for transmission to database server . Client then applies a method referred to as UniqueID to Command1 to obtain a unique ID associated therewith referred to as CmdID1. This is shown as event in .

After client has obtained the unique identifier CmdID1 associated with Command1 client sends both Command1 and its associated unique ID CmdID1 to database server as part of a message . The session identifier may optionally be sent with Command1 to identify Command1 as being within the scope of the established session.

Database server receives Command1 and executes it successfully returning a response referred to as Response1 to client . Response1 may include various results and or other information relating to the execution of Command1 by database server . After database server has successfully executed Command1 it also stores the unique ID CmdID1 in a repository that is accessible thereto along with an indication that Command1 has executed successfully. Database server may store the unique ID CmdID1 in association with the session identifier in session state . In certain embodiments such session may comprise a virtual session.

Subsequent to receiving response client generates another command referred to as Command2 for transmission to database server . Client then applies the UniqueID method to Command2 to obtain a unique ID associated therewith referred to as CmdID2. This is shown as event in .

After client has obtained the unique identifier CmdID2 associated with Command2 client sends both Command2 and its associated unique ID CmdID2 to database server as part of a message . The session identifier may optionally be sent with Command2 to identify Command2 as being within the scope of the established session.

After message is sent client receives an indication that an error has occurred. Such error may result from some failure of communication between client and database server or from a breaking of the session that was established between client and database server

Because such error has occurred client cannot determine whether Command2 was successfully executed by database server or client may have received only a portion of the requested data. Consequently client may re establish a new session with database server that is part of a same virtual session as the previously broken session. Furthermore client re transmits Command2 along with its unique ID CmdID2 to database server as part of a message .

When database server receives Command2 and its unique ID CmdID2 it checks to determine if CmdID2 has already been stored therein in session state . This may entail checking all command IDs associated with the session over which message was received. If CmdID2 has already been stored in session state database server may send a response shown as Response2 to client that includes the retrieved data that was spooled to session state when Command2 was previously executed. As described above database server may transmit all of the data of session state that was retrieved for command2 or may transmit a portion that was indicated by client as not received.

As shown by the foregoing system advantageously operates to ensure that database server can recover from a session failure and does not retrieve requested data from the database more than once even if client sends the same command multiple times. Instead the data is retrieved from session state e.g. from cache or other storage . This enables handling of database requests at client at the database driver level thereby unburdening the application programmer from having to include retry features in the application and thus simplifying the application logic.

IV. Example Embodiments for Recovery from Session Failures between a Client and a Database Server using a Different Database Server

As described above a database query session between a client and a database server may undergo a session failure e.g. during or before step of flowchart in . The session failure may occur for a variety of reasons including a network failure between the client and database server or a failure in the database server. Subsequent to such a failure in an embodiment rather than recovering the session between the client and the same database server the session may be recovered with a different database server. For instance the original database server may not be available to participate in a new session may not be functioning properly etc. . As such a different database server may be used to recover the session with the client. Any data request commands that were being processed at the time of the session failure may be continued by the different database server in an efficient manner.

As shown in the method of flowchart begins at step . In step a replicated session state is received from a first database server at a second database server. For example as shown in second database server may receive replicated session state from first database server . As described above replicated session state is a copy of session state which stores information regarding a session between client and database server

In step a request is received at the second database server from a client to establish a session with the client. After detecting a failure in the session between client and database server client may attempt to reestablish the session by transmitting a request. Database server may receive the request from client indirectly such as through a network gateway device that selects active database servers to respond to database requests for a particular domain or cluster of servers. Alternatively database server may receive the request directly from client . For instance client may include a list of associated database servers e.g. that handle requests for one or more common databases with addresses for each of the database servers e.g. IP addresses etc. . Client may first attempt to reestablish the session with database server and if database server is non responsive may try to reestablish the session with a different database server in the list by communicating with that database server directly. In the current example the request to reestablish the session is received by database server as an alternative database server.

In step a session identifier included in the request is determined to match the session identifier included in the replicated session state. For instance as described above session ID comparer of session manager may compare the session identifier received in the request to the session identifier in replicated session state .

In step a second session is established with the client at the second database server. If the session identifiers match in step session ID comparer indicates a match and session manager may enable the session to be reestablished and may store an indication as such. If the received session identifier does not match a session identifier in a stored session state session ID comparer indicates a match is not found. In such case session manager may not enable the session to be reestablished.

In step a command associated with the second session is received from the client at the second database server. Client may transmit a command to database server that was previously transmitted to database server that was not completely fulfilled due to the session failure. The transmitted command may be transmitted over communication channel and received by database server . Note that database server may not have transmitted any response to the unfulfilled command or database server may have transmitted a portion of the data requested by the unfulfilled command to client .

In step the command identifier included in the replicated session state is determined to match a command identifier received with the command. In an embodiment referring to command ID comparer of session manager may compare the command identifier for the received command to the command identifier stored in replicated session state . If the command identifiers match command ID comparer indicates a match and session manager may respond to the command with at least a portion of the data stored in replicated session state corresponding to the command identifier. If the received command identifier does not match the command identifier in replicated session state command ID comparer indicates a match is not found. In such case session manager may not respond with the data included in session state and may optionally treat the command as a new command of the session e.g. according to steps of .

In step the data is transmitted from the second database server to the client in response to the command. As shown in the data stored in replicated session state may be transmitted from database server over communication channel to client in response to the command received in step . If all of the data is successfully received by client e.g. as indicated by one or more acknowledgements received from client response spooler of database server may optionally delete the data from replicated session state .

In this manner replication of a session state is used to enable recovery from a failed session by a different database server than originally established the session with the client. In the embodiment of each database server may include a corresponding repository e.g. state data repository to store a copy of the session state either the original copy session state at the first database server e.g. database server of or replicated copies replicated session state at the additional database servers e.g. database server of . It is noted other approaches may be used to achieve this goal.

For example is a block diagram of an example system that utilizes a shared memory approach to achieve the goal. System includes client first database server second database server first response spooler and second response spooler and operates in a substantially similar manner to system of . However in system rather than using replication to ensure that second response spooler has access to a separate copy of a session state generated by first response spooler a shared state data repository is used. In accordance with this approach first response spooler and second response spooler are both able to access the same session state stored in shared state data repository . Consequently session state information stored in shared data repository by first response spooler will subsequently be accessible to second response spooler e.g. to recover and or continue a failed session between database server and client . Likewise session state information stored in shared data repository by second response spooler will subsequently be accessible to first response spooler

Client database server database server response spooler response spooler client application database driver API session ID generator command ID generator parser protocol layer database server session manager engine response spooler remote replicated session state handler parser protocol layer session ID comparer command ID comparer entity flowchart flowchart flowchart flowchart and flowchart may be implemented in hardware or hardware and any combination of software and or firmware. For example client database server database server response spooler response spooler client application database driver API session ID generator command ID generator parser protocol layer database server session manager engine response spooler remote replicated session state handler parser protocol layer session ID comparer command ID comparer entity flowchart flowchart flowchart flowchart and or flowchart may be implemented as computer program code configured to be executed in one or more processors and stored in a computer readable storage medium. Alternatively client database server database server response spooler response spooler client application database driver API session ID generator command ID generator parser protocol layer database server session manager engine response spooler remote replicated session state handler parser protocol layer session ID comparer command ID comparer entity flowchart flowchart flowchart flowchart and or flowchart may be implemented as hardware logic electrical circuitry.

For instance in an embodiment one or more of client database server database server response spooler response spooler client application database driver API session ID generator command ID generator parser protocol layer database server session manager engine response spooler remote replicated session state handler parser protocol layer session ID comparer command ID comparer entity flowchart flowchart flowchart flowchart and or flowchart may be implemented together in a system on chip SoC . The SoC may include an integrated circuit chip that includes one or more of a processor e.g. a microcontroller microprocessor digital signal processor DSP etc. memory one or more communication interfaces and or further circuits and or embedded firmware to perform its functions.

As shown in computer system includes a processing unit a system memory and a bus that couples various system components including system memory to processing unit . Processing unit may comprise one or more processors or processing cores. Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. System memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in ROM .

Computer system also has one or more of the following drives a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM DVD ROM BLU RAY disk or other optical media. Hard disk drive magnetic disk drive and optical disk drive are connected to bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computer. Although a hard disk a removable magnetic disk and a removable optical disk are described other types of computer readable media can be used to store data such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. These program modules include an operating system one or more application programs other program modules and program data . In accordance with various embodiments the program modules may include computer program logic e.g. computer code or instructions that is executable by processing unit to perform any or all of the functions and features of client database server database server response spooler response spooler client application database driver API session ID generator command ID generator parser protocol layer database server session manager engine response spooler remote replicated session state handler parser protocol layer session ID comparer command ID comparer entity flowchart flowchart flowchart flowchart and or flowchart including any step of flowcharts and and or further embodiments described elsewhere herein.

A user may enter commands and information into computer system through input devices such as a keyboard and a pointing device . Other input devices not shown may include a microphone joystick game pad game controller scanner touch screen and or touch pad a voice recognition system to receive voice input a gesture recognition system to receive gesture input or the like. In one embodiment a touch screen is provided in conjunction with a display to allow a user to provide user input via the application of a touch as by a finger or stylus for example to one or more points on the touch screen. These and other input devices are often connected to processing unit through a serial port interface that is coupled to bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB .

A display is also connected to bus via an interface such as a video adapter . In addition to display computer system may include other peripheral output devices not shown such as speakers and printers.

Computer system is connected to a network e.g. a local area network or wide area network such as the Internet through a network interface or adapter a modem or other suitable means for establishing communications over the network. Modem which may be internal or external is connected to bus via serial port interface .

As used herein the terms computer program medium and computer readable medium are used to generally refer to non transitory media such as ROM and RAM used to implement system memory the hard disk associated with hard disk drive removable magnetic disk removable optical disk as well as other media such as flash memory cards digital video disks and the like.

As noted above computer programs and modules including application programs and other program modules may be stored on ROM RAM the hard disk associated with hard disk drive the removable magnetic disk or the removable optical disk . Such computer programs may also be received via network interface or serial port interface . Such computer programs when executed by processing unit enable computer system to implement features of embodiments discussed herein. Accordingly such computer programs represent controllers of computer system .

As used herein the terms computer program medium computer readable medium and computer readable storage medium are used to generally refer to media such as the hard disk associated with hard disk drive removable magnetic disk removable optical disk as well as other media such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like. Such computer readable storage media are distinguished from and non overlapping with communication media do not include communication media . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wireless media such as acoustic RF infrared and other wireless media. Embodiments are also directed to such communication media.

As noted above computer programs and modules including application programs and other program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. Such computer programs may also be received via network interface serial port interface or any other interface type. Such computer programs when executed or loaded by an application enable computer system to implement features of embodiments of the present invention discussed herein. Accordingly such computer programs represent controllers of the computer system .

Embodiments are also directed to computer program products comprising software stored on any computer useable medium. Such software when executed in one or more data processing devices causes a data processing device s to operate as described herein. Embodiments of the present invention employ any computer useable or computer readable medium known now or in the future. Examples of computer readable mediums include but are not limited to storage devices such as RAM hard drives floppy disks CD ROMs DVD ROMs zip disks tapes magnetic storage devices optical storage devices MEMs nanotechnology based storage devices and the like.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. It will be apparent to persons skilled in the relevant art s that various changes in form and details can be made therein without departing from the spirit and scope of the invention. Thus the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

