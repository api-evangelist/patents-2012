---

title: Network service interface analysis
abstract: In one implementation, a service interface analysis system defines a plurality of service templates based on a plurality of Uniform Resource Identifiers associated with a network service, and generates at least one utility measure of each service template from the plurality of service templates.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09356949&OS=09356949&RS=09356949
owner: Hewlett Packard Enterprise Development LP
number: 09356949
owner_city: Houston
owner_country: US
publication_date: 20120229
---
Security testing is used to assess a network service such as a web application for vulnerabilities or attack vectors. In one approach to security testing a security testing application or scanner identifies the service interface of the network service e.g. Uniform Resource Identifiers URIs such as Uniform Resource Locators URLs at which the application accepts input . The service interface of the network service is sometimes referred to as the attack surface of the network service.

The scanner identifies the service interface of the network service by analyzing web pages related to the network service to identify URIs referencing the network service such as URIs that include a host identifier of the network service. In some implementations the scanner also provides Hypertext Transfer Protocol HTTP requests to and evaluates HTTP responses from the network service to determine whether the network service responds to requests at these URIs and characteristics of data returned in response to such requests.

The scanner then executes attacks based on the service interface such as HTTP requests directed to URIs at which the network service accepts input. These requests are particularly crafted to e.g. have parameters or data payloads to test for attack vectors such as memory buffer overflows Structured Query Language SQL injection privilege elevation and arbitrary code execution for example. Additionally the scanner can diagnose the presence or absence of vulnerabilities by evaluating HTTP responses from the network service.

Some scanners perform security testing of a network service by first interpreting identified URIs of the service interface of the network service and altering parameters of those URIs to include attack data sets e.g. data sets intended to test for attack vectors at a network service . Requests also referred to as service requests or resource requests such as HTTP requests with the altered URIs are then provided to the network service to perform security testing of the network service.

The service interfaces of some network services lend themselves to such security testing. For example a service interface can be based on URIs of the form http www.service.com directory file parameter1 value1 parameter2 value2. This URI includes a host identifier www.service.com a path to a file directory file and a query string parameter1 value1 parameter2 value2 . Typically the query string is forwarded to and processed by the file identified by the path. Thus the query string defines the inputs to the network service or the service interface. Here the network service accepts value1 as an input parameter named name1 and value2 as an input parameter named name2 .

A scanner can identify such service interfaces with relative ease because the URIs defining such service interfaces conform to a pattern. More specifically a resource here a file is identified by a path from the host identifier of the network service the query string is identified by a question mark character each parameter name value pair is separated from other parameter name value pairs by an ampersand character and the parameter name and value of any parameter name value pair are separated by an equal sign character . By interpreting URLs according to this pattern a scanner can identify the values that can be altered to perform security testing of a network service.

The service interfaces of other network services however do not lend themselves to such security testing. For example some network services expose or define a Representational State Transfer REST service interface. Service interfaces that conform to principles of REST or network services that expose such service interfaces are often referred to as RESTful . REST is not a protocol but rather an architectural or interface style. One common trait of many RESTful service interfaces is that URIs for such service interface include parameters or values of input parameters as elements of a path of the URI rather than for example as a query string within the URI.

For example in contrast to the URI example from above http www.service.com directory file name1 value1 name2 value2 a RESTful service interface can be based on URIs of any of the following forms 

Such interfaces are difficult for scanners to recognize because such URIs have a form similar to static URIs. That is without a separate description of the service interface the URI http www.service.com value1 value2 file.html can be interpreted to refer to a static web page titled file.html in a directory with the path value1 value2 at a host identified by www.service.com rather than as a URI including two parameters i.e. value1 and value2 .

Moreover such URIs do not conform to a clear pattern from which a scanner can identify parameters or input parameter values that can be altered to perform security testing of the network service. As a result scanners are often unable to effectively perform security testing of network services with such service interfaces without assistance from test engineers with an understanding of the service interface of a network service on which the security testing will be performed.

Implementations discussed herein identify parameters within URIs that can be altered to perform security testing of a network service independent of a description of the service interface of the network service. For example implementations discussed herein identify such parameters within URIs based on a group of URIs for the service interface of the network service. As a more specific example a service interface analysis system can define a group of service templates e.g. URIs or portions thereof in which elements of the URIs that include or may include parameters are identified based on URIs identified by crawling a group of web pages. Additionally the service interface analysis system can generate one or more utility measures for each service temple based on properties of that service template. The service interface analysis system can then apply heuristics e.g. rules to characterize or classify to the service templates based on the one or more utility measures for each service template to identify service templates that should be discarded as not likely to correctly identify elements of URIs that include parameters. The remaining service templates i.e. those that are not discarded can be used to perform security testing of the network service.

Client is an application such as a web or Internet browser or other application hosted at a computing system such as a desktop computer notebook or laptop computer tablet device or smartphone. Client accesses resources at network service by requesting those resources using URIs.

Communications link includes devices services or combinations thereof that define communications paths between computing system client and or other devices or services. For example communications link can include one or more of a cable e.g. twisted pair cable coaxial cable or fiber optic cable a wireless link e.g. radio frequency link optical link or sonic link or any other connectors or systems that transmit or support transmission of signals. Communications link can include communications networks such as an intranet the Internet other telecommunications networks or a combination thereof. Additionally communications link can include proxies routers switches gateways bridges load balancers and similar communications devices. Furthermore the connections and communications paths e.g. between communications link and client and computing system illustrated in are logical and do not necessarily reflect physical connections.

Computing system hosts network service . Network service is an application such as web application via which resources can be accessed. Resources are data or collections of data. For example resource can be a table within a relational database and resources and can be records within that relational database. Resource can be for example container or collection of images resource can be a container within resource resource can be an image within resource and resource can be an image within that resource .

Network service defines a service interface via which resources can be accessed for example by client . Said differently network service defines a structure of URIs that identify resources . A URI is a group of symbols that identify a resource. Thus the service interface defines how a URI is interpreted at network service to identify a resource.

URI is an example of a URI. URI includes various fragments or portions or elements . In the example illustrated in the fragments of URI are delimited or separated by a slash character . More specifically URI includes five fragments the schema HTTP which describes how data is to be communicated the host identifier which identifies network service and three fragments that are part of the body or path of the URI. In an example in which network service defines a RESTful service interface for example the three fragments that are part of the path of the URI can each include a parameter that is used by network service to identify resources. That is network service interprets the content of these fragments as parameters or input parameter values.

Parameters are data such as symbols characters or numbers that are provided within a URI or request such as an HTTP request including a URI as input to a network service. A parameter or a group of parameters can identify a resource identify operations to be performed relative to a resource represent data for operations to be performed relative to a resource e.g. data used to update a resource represent metadata related to a resource or represent other data related to a resource.

As a specific example network service can provide information related to books. In this example resource can be a table within a relation database that includes information about books such as a unique book identifier e.g. a International Standard Book Number ISBN title author date of publication number of pages and other information. That is each of resources and other resources within resource are a collection of information related to a particular book. Additionally in this example resource can include images of book covers. More specifically for this example resource can be a collection of images of different book covers for a particular book resource can be one of those images and resource is an image of a book cover. The fragment including PARAMETER1 can be used by network service to determine whether information about a book or a book cover is requested. If PARAMETER1 has the value data information about a book is requested and the fragment including PARAMETER2 can be used by network service to identify a unique book identifier of a desired book and the fragment including PARAMETER3 can be used by network service to identify a particular type or field of information in the resource for that desired book. If PARAMETER1 has the value cover a book cover is requested and the fragment including PARAMETER2 can be used by network service to identify the book for which a book cover image is requested using a unique book identifier of the desired book and the fragment including PARAMETER3 can be used by network service to identify a format of the image requested e.g. a bitmap image a JPEG image a PNG image a GIF image or some other image format .

Thus if client requests a resource at network service by providing the URI http www.service.com data 29132464 title to network service network service will provide a response to client with the title of the book uniquely identified by 29132464. Similarly if client requests a resource at network service by providing the URI http www.service.com data 36007380 title to network service network service will provide a response to client with the title of the book uniquely identified by 36007380. However if client requests a resource at network service by providing the URI http www.service.com cover 29132464 JPEG to network service network service will provide a response to client with an image of the book cover for the book uniquely identified by 29132464 in the JPEG format. Moreover if client requests a resource at network service by providing the URI http www.service.com cover 36007380 PNG to network service network service will provide a response to client with an image of the book cover for the book uniquely identified by 36007380 in the PNG format.

A scanner can access a large group of URIs including the host identifier of network service in this example www.service.com by for example crawling web pages that link to network service or resources accessible via network service and or monitoring communications e.g. network traffic to computing system . These URIs will have the form http www.service.com coved or the form http www.service.com data . Implementations discussed herein analyze these URIs to generate service templates that describe which fragments of these URIs include parameters that can be altered to perform security testing of network service .

As an example is a flowchart of a service interface analysis process according to an implementation. Process can be implemented at a service interface analysis system such as a service interface analysis system hosted at a computing system. A group of service templates are defined at block based on a group of URIs. A service template describes a structure for URIs for a service interface of a network service. As an example a service template can be a URI or portion thereof that includes one or more placeholder identifiers at portions or fragments of the service template that correspond to fragments of other URIs that include parameters. In other words the placeholder identifiers in a service template are substitutes for parameters in URIs. The service templates therefore describe the service interface or a portion thereof by describing the URIs via which the network service accepts input and which fragments of those URIs may include parameters. In other implementations service templates can be described in formats other than a URI or character string such as using a markup language such as the Extensible Markup Language XML .

As a specific example referring to the example discussed above in relation to a network service can expose a service interface based on URIs of the form http www.service.com cover or the form http www.service.com data . This service interface can be described by for example two service templates http www.service.com cover or the form http www.service.com data where the asterisk character is a placeholder identifier. In other words the service template http www.service.com cover describes a structure for URIs via which the network service accepts input. By replacing the placeholder identifiers here asterisk characters with various values e.g. alphanumeric character or other symbol strings data such as an attack data set can be provided as input to the network service.

In this example a URI can be generated from or based on the service template http www.service.com cover as follows. The first asterisk character can be replaced with the value SQL ATTACK to be input to the network service as a unique book identifier and the second asterisk character can be replaced with the value SHELL CODE to be input to the network service as an image format. More specifically the generated URI in this example would be http www.service.com cover SQL ATTACK SHELL CODE.

As another example a service template can be described by XML elements within an XML document. For example the service template http www.service.com cover can be expressed as 

A placeholder identifier is a symbol or groups of symbols that identify a fragment of a URI that at which other values or symbols can be substituted. In other implementations placeholder identifiers other than a single symbol can be used. For example the asterisk character can be replaced with a string. As a specific example the asterisk character can be replaced with a string of the form param  where is replaced with an integer for each placeholder identifier. Referring to the example above the service template http www.service.com cover can be expressed as http www.service.com cover param 1 param 2. Moreover placeholder identifiers can take various other forms in other implementations.

In some implementations a placeholder identifier can indicate a property or a group of properties of values or symbols that should replace the placeholder identifier to generate a URI to provide input to a network service. For example a placeholder identifier can be a regular expression that describes whether alphabetic characters numeric characters or a combination thereof should replace the placeholder identifier.

In some implementations a service template does not include a host identifier of a URI. Thus referring again to the example discussed above a service template can have the form cover and the host identifier for the service template can be associated with the service template using metadata a namespace XML elements or other methodologies.

Service templates can be defined using a group of URIs identified by crawling a web page or group of web pages or by intercepting communications with a network service using a variety of methodologies. In some implementations the group of URIs from which the service templates are derived share various properties or characteristics. For example the group of URIs can have a common number of parameters host identifier and or be associated with one or more HTTP request methods. In other words URIs identified by crawling a web page or group of web pages or by intercepting communications with a network service can be separated into one or more groups based on various characteristics of the URIs and service templates can be defined for each group of URIs. As a specific example service templates can be defined based on or derived from URIs and HTTP request methods associated with those URIs.

Additionally in some implementations the network service can be accessed using each URI from the group of URIs to determine for example whether that URI is currently valid for the network service. If the network service provides a response indicating that the network service was successfully accessed using a URI that URI can be included in the group. If the network service provides a response indicating that the network service unsuccessfully accessed e.g. a requested resource is not available or a request was invalid using a URI that URI can be discarded from the group.

As an example a group of service templates can be defined for each URI from the group of URIs. In some implementations for example service templates can be defined for a URI by defining service templates for various combinations of values within fragments of that URI and placeholder identifiers. As a specific example service templates can be defined for a URI by defining a service template each possible combination of values within fragments of that URI and placeholder identifiers. Thus in this example 2service templates are generated for each URI where n is the number of fragments in a URI other than the host identifier .

Using the URIs http www.service.com cover 36007380 PNG and http www.service.com data 36007380 title and the asterisk character as a placeholder identifier to illustrate such an example the following service templates can be generated for http www.service.com cover 36007380 PNG 

The service templates http www.service.com and http www.service.com 36007380 are generated for each URI. Accordingly 14 unique service templates were generated from these URIs.

In other implementations service templates can be defined according to other methodologies. As an example fragments with particular values do not include placeholder values. As a specific example in some implementations fragments that include file identifiers e.g. values of the form . are not replaced with placeholder identifiers.

As another example a service interface analysis system implementing process can define service templates based on statistical analysis of a group of URIs. As a specific example fragments of URIs that have different values in various URIs can be replaced with placeholder identifiers to define the service templates. Using again URIs http www.service.com cover 36007380 PNG and http www.service.com data 36007380 title and the asterisk character as a placeholder identifier for illustration the following service templates can be defined 

That is because the URIs have different values in the first fragment after the host identifier i.e. cover and data service templates with a placeholder value in that fragment are defined. Similarly because the URIs have different values in the third fragment after the host identifier i.e. PNG and title service templates with a placeholder value in that fragment are defined. However because both URIs have the same value in the second fragment after the host identifier i.e. 36007380 service templates with a placeholder value in that fragment are not defined.

In other implementations the statistical analysis used to generate service templates can define a variance for each fragment of the URIs in a group of URIs. The service interface analysis system can replace value at those fragments with a variance above a particular threshold value with placeholder identifiers to define the service templates. Thus fragments with values that are relatively constant in comparison with the variance threshold will not be replaced with placeholder values and fragments with values that are relatively variable in comparison with the variance threshold will be replaced with placeholder values. Said differently a service interface analysis system implementing process assumes that the fragments of URIs with values that vary in different URIs include parameters. That is the values at those fragments in the URIs are determined to be parameters.

In some implementations information related to properties of fragments e.g. the symbols included within those fragments of URIs from which the service templates are derived that include or are replaced by placeholder identifiers can be described within those placeholder identifiers. This information can be derived from the URIs from which the service templates are derived. That is a service interface analysis system implementing process can describe the type of symbols e.g. alphabetic characters numeric characters or a combination thereof or other properties such as a number of symbols observed in the values of fragments within placeholder identifiers that replace or represent those values within a service template. Such information can be useful for example to describe the type or types of symbols that can be substituted for the placeholder identifiers in a URI generated from a service template. As a specific example placeholder identifiers can include regular expressions to describe such properties.

At block a utility measure is generated for each service template. In some implementations a group of utility measures can be generated for each service template or some service templates. A utility measure is a value that represents the utility applicability or scope of a service template. Such utility measures can be generated according to a variety of methodologies.

For example a utility measure can be a coverage utility measure that describes the number of URIs covered or matched by a service template. A service template matches or covers a URI is that URI can be generated by replacing placeholder identifiers of that URI with particular values. As a specific example the service template http www.service.com 36007380 PNG matches http www.service.com cover 36007380 PNG and does not match http www.service.com data 36007380 title. A coverage utility measure for a service template can be generated for example by dividing the number of URIs from a group of URIs matched by that service template by the total number of URIs in that group of URIs.

As another example a utility measure can be a specificity utility measure that describes how specific a service template is. A service template with few placeholder identifiers can be referred to as specific for example because that service template can match fewer URIs that a service template with many placeholder identifiers. Accordingly a service template with many placeholder identifiers can be referred to as generic. A specificity utility measure for a service template can be generated for example by dividing the number of placeholder identifiers in a service template by the total number of fragments in the service template or URIs satisfied by the service template and subtracting the quotient from the value 1.

As yet another example a utility measure can be a rank utility measure that describes the number of placeholder identifies in a service template. Thus a rank utility measure can be generated by counting the number of placeholder identifiers in the service template. As specific example a rank utility measure of 1 can be generated for the URI http www.service.com 36007380 PNG and a rank utility measure of 2 can be generated for the URI http www.service.com 36007380 .

Although block is illustrated as following block in some implementations block and block are executed or processed at least in part in parallel. In other words a utility measure can be generated for a service template at least in part while that service template is defined. For example in some implementations as discussed above a group of service templates are defined for each URI in a group of URIs. A count of the number of times each unique service template is defined can be maintained while the service templates are defined. The count for each unique service template is the number of URIs from the group of URIs that are matched by that unique service template.

At block service templates are discarded based on the utility measure or utility measures of each service template. For example a threshold e.g. a minimal threshold or maximal threshold or multiple thresholds e.g. an upper threshold and lower threshold to define a range can be defined e.g. predefined by a user for a utility measure. As specific examples of such thresholds a threshold for a coverage utility measure can be no less than 0.05 or 5 a threshold for a specificity utility measure can be no less than 0.25 and a threshold for a rank utility measure can be no more than 4. If the utility measure of a service template satisfies the threshold e.g. is above below or within a range depending on the threshold the service template is retained. If the utility measure of a service template does not satisfy the threshold the service template is discarded at block . For example the service template can be removed from a list within a memory or a file of service templates. In some implementations a service template can be discarded by ignoring the service template or designating the service template e.g. in metadata for the service template as inactive.

The remaining service templates i.e. those that were not discarded at block can then be used for example to perform security testing of the network service. For example an analysis module can replace the placeholder identifiers of the service templates with attack data sets to define URIs. The network service can then be accessed using these URIs to attempt to identify or exploit security vulnerabilities in the network service. That is the network service accepts the attack data sets as input because they are located at fragments of URIs the network service expects to include parameters.

Parse module is a combination of hardware and software that parses URIs to identify the fragments or portions of each URI. For example parse module can separate URIs based on a delimiter symbol or character such as a slash character into a schema identifier a host identifier and a group of fragments. Additionally parse module communicates e.g. exchanges signals representing data or information with service template generator module to provide the fragments of URIs to service template generator module . In some implementations parse module provides a URI intact i.e. the full URI and the parsed fragments of the URI to service template generator module .

Service template generator module is a combination of hardware and software that defines service templates based on the URIs parsed at parse module . For example service template generator module can define a group of service templates for each URI parsed at parse module . In some implementations service template generator module performs statistical analysis on the URIs parsed at parse module to define a group of service templates for those URIs.

Additionally service template generator module communicates with measurement module to provide service templates to measurement module . Measurement module is a combination of hardware and software that generates utility measures for the service templates generated at service template generator module . In some implementations service template generator module also provides information such as a number of URIs that are matched by a service template to measurement module .

Moreover in some implementations measurement module also determines whether service templates should be discarded based on utility measures and or thresholds. That is after determining a utility measure of a service template measurement module can compare that utility measure with a related threshold and discard the service template if that utility measure does not satisfy the related threshold. In other implementations service interface analysis system can include a separate module or component such as a filter module to determine whether service templates should be discarded. In yet other implementations service interface analysis system can store service templates at a data store such as a database or a filesystem or can provide the service templates to another system to use the service templates for example to perform security testing of a network service.

Service templates can then be defined at block . For example as illustrated in and discussed above in relation to service templates can be defined by selecting at block a URI from the URIs accessed at block defining at block one or more service templates based on the URI selected at block e.g. defining service templates that are satisfied by the URI selected at block storing at block the service templates defined at block at for example a portion of a memory allocated for service templates returning to block from block if there are additional URIs and completing block if there are no additional URIs at block . Accordingly the service templates for each URI are aggregated into a group of service templates for the group of URIs. In other implementations service templates can be defined at block using other methodologies.

One or more utility measures are then generated and assigned to each service template at block . As discussed above in relation to block of in some implementations utility measures are generated at least partially in parallel with block . The utility measures are then used to determine whether a service template should be discarded at blocks and .

Blocks and are repeated for each service template defined at block . More specifically for each service template one or more utility measures assigned to that service template are compared with one or more related thresholds at block . If those utility measures satisfy those thresholds at block process returns to block for another service template. In other words the current service template is not discarded. If those utility measures do not satisfy those thresholds at block process proceeds to block at which the current service template is discarded. Process then returns to block for another service template.

Process illustrated in is an example implementation and other implementations can include additional fewer different or rearranged blocks. For example whether process proceeds to block or to block from block can vary according to different implementations. For example in some implementations a service template is discarded if any utility measure assigned to that service template does not satisfy a related threshold at block . In other implementations a service template is discarded if all utility measures assigned to that service template do not satisfy related thresholds at block . In yet other implementations a service template is discarded if a majority or some other predetermined group of utility measures assigned to that service template does not satisfy related thresholds at block .

Capture module crawls web pages and or intercepts communications with a network service to access URIs for that network service. Capture module then provides these URIs to parse module. In the example illustrated in one URI provided to parse module is HTTP WWW.SRVC.COM RES1 RES1 1.

Parse module parses the URIs to identify fragments of the URIs such as host identifiers and other fragments. Information from the parsed URIs is then provided to service template generator module . In this example the URI HTTP WWW.SRVC.COM RES1 RES1 1 is separated into host identifier WWW.SRVC.COM fragment RES1 and fragment RES1 1 . Service template generator module then defines a group of services templates for the URI or group of URIs. In this example the service templates WWW.SRVC.COM RES1 1 WWW.SRVC.COM RES1 WWW.SRVC.COM and WWW.SRVC.COM RES1 RES1 1 are defined at service template generator module .

Service template generator module provides the service templates to measurement module which generates utility measures for the service templates. In this example measurement module provides the service templates and utility measures to filter module . Filter module discards some service templates based on utility measures assigned to those service templates and stores the remaining service templates and utility measures assigned to those service templates at data store . As illustrated in the service template WWW.SRVC.COM was discarded as too generic e.g. because all fragments other than the host identifier include placeholder values and WWW.SRVC.COM RES1 RES1 1 was discarded as too specific e.g. because no fragments include placeholder values .

Moreover as illustrated in filter module can also access service templates and utility measures assigned to those service templates at data store . For example filter module can access data store to update utility measures based on newly received service templates and or utility measures. As a more specific example filter module can update a utility measure assigned to a service template if another instance of that service template is received from measurement module e.g. that service template is subsequently defined again at service template generator module based on a URI received from parse module . That is with reference to the example illustrated in filter module can update utility measures UM1 at data store if another service template of the form WWW.SRVC.COM RES1 1 is received from measurement module .

Analysis module accesses service templates at data store and performs security testing of a network service. For example analysis module can replace the placeholder identifiers here asterisk characters with attack data sets to provide input to the network service that is intended to expose security vulnerabilities of the network service. More specifically for example analysis module can generate URIs based on service templates by replacing the placeholder identifiers with attack data sets to expose security vulnerabilities related to memory buffer overflows Structured Query Language SQL injection privilege elevation and arbitrary code execution. Analysis module can then provide those URIs or requests including those URIs to a network service to expose security vulnerabilities of the network service.

In some implementations a service interface analysis system such as service interface analysis system illustrated in or the service interface analysis system illustrated in is hosted at a computing system. is a schematic block diagram of a service interface analysis system hosted at a computing system according to an implementation.

In the example illustrated in computing system includes processor communications interface and memory and hosts operating system and service interface analysis system . Processor is any combination of hardware and software that executes or interprets instructions codes or signals. For example processor can be a microprocessor an application specific integrated circuit ASIC a distributed processor such as a cluster or network of processors or computing systems a multi core or multi processor processor or a virtual or logical processor of a virtual machine.

Communications interface is a module via which processor can communicate with other processors or computing systems via a communications link. For example communications interface can include a network interface card and a communications protocol stack hosted at processor e.g. instructions or code stored at memory and executed or interpreted at processor to implement a network protocol to communicate network services. As specific examples communications interface can be a wired interface a wireless interface an Ethernet interface a Fiber Channel interface an InfiniBand interface and IEEE 802.11 interface or some other communications interface via which processor can exchange signals or symbols representing data to communicate with other processors or computing systems.

Memory is a processor readable medium that stores instructions codes data or other information. As used herein a processor readable medium is any medium that stores instructions codes data or other information non transitorily and is directly or indirectly accessible to a processor. Said differently a processor readable medium is a non transitory medium at which a processor can access instructions codes data or other information. For example memory can be a volatile random access memory RAM a persistent data store such as a hard disk drive or a solid state drive a compact disc CD a digital video disc DVD a Secure Digital SD card a MultiMediaCard MMC card a CompactFlash CF card or a combination thereof or other memories. Said differently memory can represented multiple processor readable media. In some implementations memory can be integrated with processor separate from processor or external to computing system .

Memory includes instructions or codes that when executed at processor implement operating system and service interface analysis system . Additionally memory can store URI repository at which a group of URIs from which service interface analysis system will define a group of service templates is stored during run time or execution of service interface analysis system .

In some implementations computing system can be a virtualized computing system. For example computing system can be hosted as a virtual machine at a computing server. Moreover in some implementations computing system can be a virtualized computing appliance and operating system is a minimal or just enough operating system to support e.g. provide services such as a communications protocol stack and access to components of computing system such as communications interface service interface analysis system .

Service interface analysis system can be accessed or installed at computing system from a variety of memories or processor readable media. For example computing system can access service interface analysis system at a remote processor readable medium via communications interface . As a specific example computing system can be a thin client that accesses operating system and service interface analysis system during a boot sequence.

As another example computing system can include not illustrated in a processor readable medium access device e.g. CD DVD SD MMC or a CF drive or reader and can access service interface analysis system at a processor readable medium via that processor readable medium access device. As a more specific example the processor readable medium access device can be a DVD drive at which a DVD including an installation package for service interface analysis system is accessible. The installation package can be executed or interpreted at processor to install service interface analysis system at computing system e.g. at memory . Computing system can then host or execute service interface analysis system .

In some implementations service interface analysis system can be accessed at or installed from multiple sources locations or resources. For example some component of service interface analysis system can be installed via a communications link and other components of service interface analysis system can be installed from a DVD.

In other implementations service interface analysis system can be distributed across multiple computing systems. That is some components of service interface analysis system can be hosted at one computing system and other components of service interface analysis system can be hosted at another computing system or computing systems. As a specific example service interface analysis system can be hosted within a cluster of computing systems where each component of service interface analysis system is hosted at multiple computing systems and no single computing system hosts each component of service interface analysis system .

While certain implementations have been shown and described above various changes in form and details may be made. For example some features that have been described in relation to one implementation and or process can be related to other implementations. In other words processes features components and or properties described in relation to one implementation can be useful in other implementations. As another example functionalities discussed above in relation to specific modules or elements can be included at different modules engines or elements in other implementations. Furthermore it should be understood that the systems apparatus and methods described herein can include various combinations and or sub combinations of the components and or features of the different implementations described. Thus features described with reference to one or more implementations can be combined with other implementations described herein.

As used herein the term module refers to a combination of hardware e.g. a processor such as an integrated circuit or other circuitry and software e.g. machine or processor executable instructions commands or code such as firmware programming or object code . A combination of hardware and software includes hardware only i.e. a hardware element with no software elements software hosted at hardware e.g. software that is stored at a memory and executed or interpreted at a processor or at hardware and software hosted at hardware.

Additionally as used herein the singular forms a an and the include plural referents unless the context clearly dictates otherwise. Thus for example the term module is intended to mean one or more modules or a combination of modules. Moreover the term provide as used herein includes push mechanism e.g. sending data via a communications path or channel pull mechanisms e.g. delivering data in response to a request from the scanner and store mechanisms e.g. storing data at a data store or service at which the data can be accessed . Furthermore as used herein the term based on includes based at least in part on. Thus a feature that is described as based on some cause stimulus or data can be based only on that cause stimulus or data or based on that cause stimulus or data and on one or more other causes stimuli or data.

