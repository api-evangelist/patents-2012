---

title: Systems and methods for detecting system exceptions in guest operating systems
abstract: Systems and methods for detecting system exceptions in guest operating systems are provided. A module is provided for each guest operating system and is capable of intercepting system exceptions within the guest operation system. The module communicates with a hypervisor to provide a current status of the guest operating system. In the event of a system exception, the module may collect system exception information, such as a memory dump.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09268591&OS=09268591&RS=09268591
owner: VMware, Inc.
number: 09268591
owner_city: Palo Alto
owner_country: US
publication_date: 20121018
---
Virtual machines which are an abstraction of physical computing resources may include a guest operating system that operates therein. Guest operating systems like operating systems in non virtualized environments are susceptible to system exceptions or crashes. Datacenters may include thousands tens of thousands or more virtual machines that are operating concurrently. Known methods for determining the status of a guest operating system include viewing the console of the virtual machine analyzing operating system files and executing user space software tools within the guest operating system. Using such methods administrators of large datacenters may be unable to continuously monitor the status of each operating system to ensure that operating systems are operating as expected. Accordingly there is a need for improved methods and systems for detecting guest operating system crashes and reporting such crashes to administrators.

Systems and methods for detecting system exceptions in guest operating systems are provided. A module is provided for each guest operating system and is capable of intercepting system exceptions within the guest operating system. The module communicates with a hypervisor to provide a current status of the guest operating system. In the event of a system exception the module may collect system exception information such as a memory dump.

Embodiments provided herein enable system exceptions to be caught within guest operating systems and reported to virtual infrastructure administrators. As used herein the phrase system exception includes any operating system exception fault error false assertion or other condition which may result in the termination of any or all operating system processes functionality and or interactivity whether caused by hardware software or otherwise. Some examples of system exceptions include kernel panics and the blue screen of death. 

The virtualization software is sometimes referred to as a hypervisor and includes software components for managing hardware resources and software components for virtualizing or emulating physical devices to provide virtual devices such as virtual disks virtual processors virtual network interfaces etc. for each VM . In the exemplary embodiment each VM is an abstraction of a physical computer system and may include an operating system OS such as Microsoft Windows and applications which are referred to as the guest OS and guest applications respectively wherein the term guest indicates it is a software entity that resides within the VM. Microsoft Windows is a registered trademark of the Microsoft Corporation of Redmond Wash.

A Virtual Machine Management Server VMMS provides a software interface that among other things allows users and other programs to control the lifecycle of VMs running on physical computers and that are managed by VMMS . VMMS may provide other VM management and manipulations than those specifically mentioned here. VMMS may include products such as vCenter and VMware Service Manager both available from VMware Inc. of Palo Alto Calif.

In the exemplary embodiment the virtualization software includes a query module that may be implemented as a kernel level module. The query module is configured to communicate with each guest OS associated with the virtualization software . More particularly the query module is configured to communicate with a virtual machine crash detector module or detector module that may be associated with each guest OS . The detector module may be implemented as a kernel level module.

The query module is configured to determine the status of a guest OS by communicating with the detector module associated with that guest OS . The query module generates queries and transmits the queries to the detector module . The queries may include a request for guest OS status and a request for crash information among other things. For example an ISALIVE query may be transmitted by the query module to request a current status of the guest OS . In addition a GETCRASHINFO query may be transmitted by the query module to request information available from the guest OS about a system exception.

The query module may transmit guest OS status requests at regular intervals such as every 5 10 15 30 or 60 seconds or on demand. The query module may transmit guest OS status requests to all or some of the guest OSes associated with the virtualization software . Moreover the query module may transmit guest OS status requests using round robin scheduling to two or more guest OSes .

Each guest OS status as collected by the query module may be transmitted to VMMS to provide the status of guest OSes within virtual infrastructure . VMMS may be used to cause the query module to initiate a guest OS status request. VMMS may be configured to store and update the current status of guest OSes such that a user of VMMS may determine which guest OSes are not operational due to a system exception. VMMS may be configured to alert the user e.g. with a displayed message an audible indicator an email etc. when a guest OS has reported a system exception.

The detector module is configured to detect system exceptions. More particularly the detector module is configured to intercept or otherwise handle system exceptions. For example the detector module may intercept calls to a system wide exception handler. In the exemplary embodiment the detector module is still operable after a system exception has been raised and can respond to queries from the query module . Alternatively if the detector module is unable to respond to queries after a system exception the query module may interpret unanswered queries as an indication that the guest OS has experienced a system exception. Unanswered queries may include queries that have not received a response in a pre determined period of time such as 500 ms.

In response to a guest OS status request the detector module may respond with an acknowledgement such as ACK to indicate that no system exception has occurred or a system exception indicator message that indicates that a system exception has occurred such as CRASH . Upon receiving a system exception indicator message the query module may request system exception information from the detector module . In response to the system exception information request the detector module may collect system exception information such as memory dumps system logs stack traces etc. After the system exception information has been collected by the detector module the detector module may respond to the system exception information request with a message such as SENDCRASHINFO and the collected system exception information.

After the system exception information has been transmitted to the query module the detector module may pass the system exception back to the guest OS for processing. For example the detector module may invoke a system exception handler for routine processing of the system exception. By intercepting the system exception and not allowing the system exception handler to be invoked the detector module may be able to operate within the guest OS even after a system exception has caused the guest OS to halt execution of one or more processes.

A communication channel exists between the query module and the detector module to enable communication between the virtualization software and the guest OS . The communication channel enables direct communication that may continue even after the guest OS experiences a system exception. The communication channel may be implemented as an application programming interface API that provides calls and or protocols for exchanging information between the virtualization software and the guest OS . For example the communication channel may be implemented using a Virtual Machine Communication Interface VMCI or using VMCI Sockets both available from VMware Inc. of Palo Alto Calif. VMCI provides a communications API similar to Berkeley UNIX sockets and Windows sockets for transmitting datagrams and or sharing memory. UNIX is a registered trademark of The Open Group.

During operation the query module transmits a guest OS status request message to the detector module . The detector module responds with a guest OS status message which is generally an acknowledgement that indicates that no system exception has occurred in the guest OS . The query module continues to transmit guest OS status request messages to the detector module as long as acknowledgements are being returned.

When a system exception occurs the guest OS generates a system exception and the detector module intercepts the system exception. The detector module waits until the query module transmits the next guest OS status request message at which time the detector module transmits a system exception indicator message. Alternatively or additionally the detector module may transmit the system exception indicator message to the query module regardless of whether a guest OS status request message has been received. In other words rather than waiting to be polled the detector module may push a system exception indicator message to the query module .

In response to the system exception indicator message the query module transmits a system exception information request to the detector module . The detector module in response to the system exception information request causes system exception information to be collected. Once at least partially collected the detector module transmits a response to the system exception information request. The response may include a message and the collected system exception information.

Within the guest OS the detector module passes the system exception to the system exception handler for routine processing. Once the system exception handler has received the system exception the guest OS may halt one or more processes and may become unresponsive. Within the virtualization software the query module transmits a message to VMMS indicating that a system exception has been detected. The system exception information may also be transmitted to VMMS . Alternatively the query module may store the system exception information in a data store that is accessible to VMMS and transmit the location of the system exception information with the system exception notification message. The data store may be a network attached storage device a network resource shared by the virtualization software a virtual storage device in a guest OS a database etc.

VMMS alerts a user of the system exception and the availability of system exception information if applicable. The user may then use VMMS to restart the VM associated with the guest OS that experienced a system exception. Thus in automated fashion the virtual infrastructure is capable of detecting and reporting system exceptions or crashes within guest OSes .

In operation the query module transmits a guest OS status request message to the detector module . The guest OS status request message and other messages and data may be transmitted to and from the detector module using the communication channel shown in . In operation the detector module responds to the query module with an acknowledgement that indicates that no system exception has occurred in the guest OS . Operation and operation may be repeated together any number of times until a system exception occurs in the guest OS .

In operation the guest OS experiences a system exception and raises the system exception which is intercepted by the detector module . The detector module receives or catches the system exception from the guest OS . In operation which is similar to operation the query module transmits a guest OS status request message to the detector module . The detector module in operation responds with a system exception indicator message that indicates that the guest OS has experienced a system exception.

In response to receiving the system exception indicator message the query module may in operation transmit a system exception information request message. In operation the detector module may collect system exception information which may include memory dumps system logs stack traces etc. from the guest OS and or the VM environment. In operation the detector module transmits a system exception information message and the collected system exception information.

After transmitting the system exception information the detector module may in operation pass the system exception back to the guest OS for routine processing. For example the detector module may invoke within the guest OS a system exception handler that would have received the system exception if the detector module had not intercepted the system exception. The query module having received the system exception indicator message and or the system exception information may in operation directly or through operation of the virtualization software transmit a system exception notification message to VMMS . The query module may store the collected system exception information in the data store shown in . The system exception notification message may include details about the system exception including the name of the associated VM the guest OS type the contents of the system exception information the location of the system exception information in the case where the query module stored the system exception information in the data store and other details relating to the system exception and or the guest OS .

In response to receiving the system exception notification message VMMS may alert a user of VMMS in operation . The alert may be displayed as a message within a console or other user interface of VMMS such as software interface . The alert may indicate which guest OS generated the system exception the presence or absence of system exception information the host associated with the guest OS and or the type of guest OS. The alert may also indicate a virtual machine name associated with the guest OS and or other information about the guest OS available from VMMS .

The detection and reporting of system exceptions as described herein may be performed by a computer or computing device. A computer or computing device may include one or more processors or processing units system memory and some form of computer readable media. Exemplary computer readable media include flash memory drives digital versatile discs DVDs compact discs CDs floppy disks and tape cassettes. By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media store information such as computer readable instructions data structures program modules or other data. Communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media. Combinations of any of the above are also included within the scope of computer readable media.

Although described in connection with an exemplary computing system environment embodiments of the invention are operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the invention include but are not limited to mobile computing devices personal computers server computers hand held or laptop devices multiprocessor systems gaming consoles microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

Embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. The computer executable instructions may be organized into one or more computer executable components or modules. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

Aspects of the invention transform a general purpose computer into a special purpose computing device when configured to execute the instructions described herein.

The embodiments illustrated and described herein as well as embodiments not specifically described herein but within the scope of aspects of the invention constitute exemplary means for detecting system exceptions.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements.

Having described aspects of the invention in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the invention as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that all matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

