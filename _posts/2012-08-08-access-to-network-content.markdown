---

title: Access to network content
abstract: A method and system for improving access to search results are provided in the disclosure herein. Aspects of this disclosure minimize the delay in accessing network content by priming certain regularly viewed content (e.g., a search engine home page or a web search page) in a hidden browser instance. As the user accesses the content prerendered in the invisible browser instance, a new instance of the prerendered content is created to facilitate future accesses to the network content (e.g., future search queries). The security state of the network content may be determined and/or monitored, and appropriate action taken in response to a change in the security state.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08887239&OS=08887239&RS=08887239
owner: Google Inc.
number: 08887239
owner_city: Mountain View
owner_country: US
publication_date: 20120808
---
The advent of the World Wide Web has placed more information at the fingertips of today s users than ever before. Various websites cater to nearly every need and interest providing access to reference information business and financial documents social networking and more. Widespread broadband Internet access provides faster access to these sites than ever before.

However as fast as current high speed Internet services are the act of browsing the web is not instantaneous. When a user selects a link on a page or enters a uniform resource locator URL in a text field there is a delay while data is requested from the host sent to the client and rendered in the browser. The user is typically idle while waiting for their requested site to load. While high speed Internet access may limit this delay to a few seconds even this short delay can add up to thousands of man hours of lost productivity each year.

A method and system for improving access to network content are provided in the disclosure herein. Aspects of this disclosure minimize the delay in accessing network content by prerendering elements of a content page. The network content such as a web search page or a search engine home page may be prerendered in a hidden browser instance when the browser is executed. Aspects of the disclosure may provide a search query to the network content via an application programming interface API such as a search API. The prerendered network content may be made visible in response to a selection operation indicating that the user wishes to access the prerendered network content e.g. selection of a home page button entry of a search query thus allowing for immediate display of the network content. After the user accesses the prerendered network content a new instance of the network content may be prerendered. For example when the user performs a search query a new instance of a search page may be prerendered after the original prerendered search page is merged with the visible browser instance to prepare for a future search query.

The prerendered network content may be periodically evaluated for compliance with a security scheme. If a user has authenticated or logged in to a particular web page or web site interactions with the prerendered network content may be performed using a secure protocol such as a Secure Socket Layer SSL interface. The prerendered network content may be evaluated for compliance at a particular time interval in response to detection of a user input associated with the content or any other method for identifying a possible change in security status of the network content. Upon detection of a change in security status the network content may be reloaded according to the security status or any other appropriate processing may be performed.

Aspects of the disclosure describe a computer implemented method for improving access to network content. The method may include prerendering using a processor a set of network content in a hidden browser instance monitoring user input in a browser for a selection operation associated with the set of network content preloaded in the hidden browser instance detecting the selection operation associated with the set of network content preloaded in the hidden browser instance in response to a detection of the selection operation merging with the processor the set of network content into an active browser instance and creating a new instance of the set of network content in a new hidden browser instance for use in another selection operation associated with the set of network content. The set of network content may be a search engine web page and the selection operation may be at least one of entry of a search query in a text entry field or selection of a suggested search query. The set of network content may be a search engine home page and the selection operation may indicate that the user wishes to access the search engine home page. Prerendering the set of network content may include requesting the set of network content from a remote server. The new instance of the set of network content may be created by copying the set of network content received from the remote server without contacting the remote server a second time. The new instance of the set of network content may be created at a particular time interval after the selection operation. The new instance of the set of network content may be created based on a parameter received from a remote server that provided the network content. The new instance of the set of network content may be created immediately after the set of network content is merged with the active browser instance. The method may include notifying the set of network content preloaded in the hidden browser instance of the selection operation using an application programming interface. The set of network content may be determined by at least one of a user preference a user navigation history or a default search engine.

Aspects of the disclosure may provide a non transitory computer readable storage medium containing instructions that when executed by a processor cause the processor to perform a method. The method performed by the processor may include prerendering using a processor a set of network content in a hidden browser instance monitoring user input in a browser for a selection operation associated with the set of network content preloaded in the hidden browser instance detecting the selection operation associated with the set of network content preloaded in the hidden browser instance in response to a detection of the selection operation merging the set of network content into an active browser instance and creating a new instance of the set of network content in a new hidden browser instance for use in another selection operation associated with the set of network content. The set of network content may be a search engine web page and the selection operation may be at least one of entry of a search query in a text entry field or selection of a suggested search query. The set of network content may be a search engine home page and the selection operation indicates that the user wishes to access the search engine home page. Prerendering the set of network content may include requesting the set of network content from a remote server. The new instance of the set of network content may be created by copying the set of network content received from the remote server without contacting the remote server a second time. The new instance of the set of network content may be created at a particular time interval after the selection operation. The new instance of the set of network content may be created based on a parameter received from a remote server that provided the network content. The new instance of the set of network content may be created immediately after the set of network content is merged with the active browser instance. The method may include notifying the set of network content preloaded in the hidden browser instance of the selection operation using an application programming interface. The set of network content may be determined by at least one of a user preference a user navigation history or a default search engine.

Aspects of the disclosure may provide a processing system for improving access to search results. The processing system may include at least one processor and a memory coupled to the at least one processor. The processor may be configured to execute a browser application prerender a set of network content in a hidden instance of the browser application such that at least some portion of the network content is rendered monitor user input in the browser for a selection operation associated with the set of network content preloaded in the hidden browser instance detect the selection operation associated with the set of network content preloaded in the hidden browser instance in response to a detection of the selection operation merge the set of network content into an active browser instance and create a new instance of the set of network content in a new hidden browser instance for use in another selection operation associated with the set of network content. The set of network content may be at least one of a search engine home page or a search engine results page. The selection operation may be at least one of entry of a search query in a text field or selection of a suggested search query.

A method and system for improving access to search results are provided in the disclosure herein. Aspects of this disclosure minimize the delay in accessing network content by priming certain regularly viewed content e.g. a search engine home page or a web search results page in an invisible browser instance. As the user accesses the content prerendered in the invisible browser instance a new instance of the prerendered content is created to facilitate future accesses to the network content e.g. future search queries . Aspects of the disclosure may provide a search query to a preloaded search page via a search application programming interface API .

All or part of the preloaded search web page may be made visible in response to the search query such that the user does not need to wait for rendering of the web page e.g. fetching and rendering of page formatting logos scripts and the like thus allowing for immediate display of search results as soon as the results are received. Various methods for performing the prerendering operation configuring the prerendering operation and managing the prerendering operation are described. For the purposes of this application the term prerendering generally refers to the act of requesting all resources e.g. any executable code scripting language files and or interactive objects necessary to load the content of a web address and loading the content in a web browser instance. While priming generally involves loading regularly accessed network content into a hidden browser instance in a completely executed and rendered format.

As shown in an example system in accordance with one aspect includes a server in communication with one or more client devices displaying web browser interfaces . The user of the client device may browse to a web page located at www.a.com as displayed on the web browser interface . That page includes content selectable by the user.

The client devices may be any device capable of managing data requests via a network . Examples of such client devices include a personal computer PC a mobile device or a server . The client devices are operable to perform prerendering operations during the execution of a web browser application. In some aspects the client devices predict a search event by identifying cursor placement text entry or interface focus. The prerender operation may also be determined dynamically by for example a JAVASCRIPT code. While the concepts described herein are generally described with respect to a web browser interface executing on a client device aspects of the disclosure can also be applied to any computing node capable of managing navigation events over a network including a server .

The client devices may also comprise personal computers personal digital assistants PDA tablet PCs netbooks laptops mobile phones etc. Indeed client devices in accordance with the systems and methods described herein may comprise any device operative to process instructions and transmit data to and from humans and other computers including general purpose computers network computers lacking local storage capability etc.

The client devices may be operable to predict search operations to assist in data access on the network . For example the client devices may predict a search operation to facilitate prerendering of a search page in order to decrease delay in the display of network content thus improving the user s browsing experience. In some aspects the server provides navigation data which may be used by the client devices to predict a search operation. In some aspects the client devices predict a search operation using local data.

The network and the intervening nodes between the server and the client devices may comprise various configurations and use various protocols including the Internet World Wide Web intranets virtual private networks local Ethernet networks private networks using communication protocols proprietary to one or more companies cellular and wireless networks e.g. Wi Fi instant messaging hypertext transfer protocol HTTP and simple mail transfer protocol SMTP and various combinations of the foregoing. It should be appreciated that a typical system may include a large number of connected computers.

Although certain advantages are obtained when information is transmitted or received as noted above other aspects of the system and method are not limited to any particular manner of transmission of information. For example in some aspects information may be sent via a medium such as an optical disk or portable drive. In other aspects the information may be transmitted in a non electronic format and manually entered into the system.

Although some functions are indicated as taking place on the server and other functions are indicated as taking place on the client devices various aspects of the system and method may be implemented by a single computer having a single processor. It should be appreciated that aspects of the system and method described with respect to the client may be implemented on the server and vice versa.

The memory may be any type of tangible memory operative to store information accessible by the processor including a computer readable medium or other medium that stores data that may be read with the aid of an electronic device such as a hard drive memory card read only memory ROM random access memory RAM digital versatile disc DVD or other optical disks as well as other write capable and read only memories. The system and method may include different combinations of the foregoing whereby different portions of the instructions and data are stored on different types of media.

The instructions may be any set of instructions to be executed directly such as machine code or indirectly such as scripts by the processor . For example the instructions may be stored as computer code on a computer readable medium. In that regard the terms instructions and programs may be used interchangeably herein. The instructions may be stored in object code format for direct processing by the processor or in any other computer language including scripts or collections of independent source code modules that are interpreted on demand or compiled in advance. Functions methods and routines of the instructions are explained in more detail below see .

The data may be retrieved stored or modified by the processor in accordance with the instructions . For instance although the architecture is not limited by any particular data structure the data may be stored in computer registers in a relational database as a table having a plurality of different fields and records Extensible Markup Language XML documents or flat files. The data may also be formatted in any computer readable format such as but not limited to binary values or Unicode. By further way of example only image data may be stored as bitmaps comprised of grids of pixels that are stored in accordance with formats that are compressed or uncompressed lossless e.g. BMP or lossy e.g. JPEG and bitmap or vector based e.g. SVG as well as computer instructions for drawing graphics. The data may comprise any information sufficient to identify the relevant information such as numbers descriptive text proprietary codes references to data stored in other areas of the same memory or different memories including other network locations or information that is used by a function to calculate the relevant data.

The processor may be any suitable processor such as various commercially available general purpose processors. Alternatively the processor may be a dedicated controller such as an application specific integrated circuit ASIC .

Although functionally illustrates the processor and memory as being within a single block it should be understood that the processor and memory may actually comprise multiple processors and memories that may or may not be stored within the same physical housing. Accordingly references to a processor computer or memory will be understood to include references to a collection of processors computers or memories that may or may not operate in parallel.

The computing device may be at one node of a network and be operative to directly and indirectly communicates with other nodes of the network. For example the computing device may comprise a web server that is operative to communicate with client devices via the network such that the computing device uses the network to transmit and display information to a user on a display of the client device.

The system can provide privacy protections for the client data including for example anonymization of personally identifiable information aggregation of data filtering of sensitive information encryption hashing or filtering of sensitive information to remove personal attributes time limitations on storage of information and or limitations on data use or sharing. Data can be anonymized and aggregated such that individual client data is not revealed. A user may also be provided with an opportunity to opt in out to enable the collection of sharing of data.

In order to facilitate the prerendering and search operations of the computing device the memory may further comprise a browser . Although the browser is identified as a discrete module in connection with the functionality of this module may overlap and or exist in a fewer or greater number of modules than what is shown with such modules residing at one or more processing devices which may be geographically dispersed.

The browser provides for the display of network content such as a web page to a user of the client device via a visible browser instance by sending and receiving data across a computer network. The network content may be received in response to a network request such as a Hypertext Transfer Protocol HTTP GET request. The network content may be provided in a markup language such as Hypertext Markup Language HTML . The network content may also include various scripts data forms and the like viewable and or executed in the visible browser instance including interactive and or executable content such as ADOBE FLASH content JAVASCRIPT content and the like.

The browser may further comprise a hidden browser instance . The hidden browser instance provides a browser instance within which network content identified by a prerender controller may be loaded. The network content identified by the prerender controller may take the form of content that the user is likely to access during a browser session such as a web page for initiating a search query or displaying search results a user webmail page or any other content that a user is likely to return to one or more times during the browsing session. The hidden browser instance may include a start page for a search engine wherein non search result data e.g. page formatting logos images style sheets scripts and the like has been requested and rendered by the prerender module . The preloaded search page may be stored such that the preloaded search page is not visible to a user until the user provides a search query. The hidden rendering environment refers to any representation that does not have an immediately apparent interface for the user. For example the preloaded search page may be stored within a browser tab that does not have an associated selection control in a web browser tab interface. The hidden browser instance may be accessible via a menu or interface command and in response to the selection of this interface command an interface for the prerendered content is generated such as by adding a selection control for the prerendered content to the browser tab interface. The hidden rendering environment may also be provided by a variety of other methods suitable to receive and render the page environment while avoiding distraction of the user with potentially irrelevant content. The network content loaded in the hidden browser instance may be stored in a completely executed and rendered format. For example any executable code scripting language multimedia files and or interactive objects may be fully requested and loaded in the prerendering environment provided by the hidden browser instance. Where the hidden browser instance stores a preloaded search page if the user enters a search query the browser may execute the search query using the preloaded search page and merge the preloaded search page with the visible browser instance . Search results responsive to the search query may thus be provided without the need to request the elements of the search engine results page e.g. page structure scripts or other non search result content or wait for the search engine results page to render. Throughout this process the preloaded search page may issue the query over the network to the search engine receive data providing results for the search query blend the results into the preloaded search page and make itself visible.

The prerender controller may control preloading and prerendering operations performed within the web browser. For example after a preloaded search page is merged with the visible browser instance the prerender controller may reprime the hidden browser instance with a new instance of the preloaded search page to prepare for a new search query. The prerender controller may perform these operations at particular intervals such as on a timer e.g. every 30 seconds instantly upon merging the hidden browser instance with the visible browser instance in response to network traffic or in response to an indication from the server hosting the network content.

The prerender controller may also be configured by prerender configuration settings . These prerender configuration settings may control when and how the prerender controller performs prerender operations. For example the prerender configuration settings may specify a particular set of network content e.g. a URL to be preloaded in the hidden browser instance such as a search engine home page a user webmail access page or a search engine results page. The prerender configuration settings may also specify a frequency with which to prerender e.g. a time interval to reprime the hidden browser instance after merging with the visible browser instance a system resource level to perform preloading or any other setting to assist the user with adjusting the prerendering operations to meet a particular set of needs or preferences.

The web browser may further comprise a search application programming interface API . Although the specific example described herein relates to the use of a search API for interfacing with a preloaded search page loaded in the hidden browser instance the same concepts may apply to the use of other page APIs such as a user homepage or webmail page configured to accept commands or instructions via other APIs. The search API allows for a scripted interface with the content loaded in the hidden browser instance . When the browser detects a search query e.g. entered into a text field provided by the browser the browser may pass the search query to the preloaded search page using the search API . For example the search query may be passed to the preloaded search page using an asynchronous JavaScript AJAX and extensible markup language protocol. The network content stored within the hidden browser instance may be specifically configured to communicate in this manner allowing the client computing device to interface with the network content without the need to navigate to a new URL to perform the action e.g. to provide a search query to a preloaded search page . The search API may be configurable within the browser . For example a user may specify a particular search engine for use in search operations performed by the browser.

At stage the computing device determines a next navigation event such as a predicted search operation or links associated with a search result within a web browser. The next navigation event may be received from a navigation prediction element e.g. a software module that may be configured to identify when the user intends to perform a search operation for the purpose of prerendering search results prior to the entry of the search operation or the next navigation event may be embedded within the web page displaying within the web browser. In some aspects a search engine may embed one or more HTML prerender tags within a set of search results to indicate that a particular link associated with the most relevant result should be prerendered by the web browser. For example the HTML for a link to an example website e.com in a search result may be modified from to by the search engine indicating that the search result is a good candidate for prerendering. According to aspects herein the search results may be prerendered allowing for immediate display of search results as they are received in response to a search query. In this regard aspects of the disclosure may prerender all or part of a page associated with the prerender tags in a hidden browser instance to facilitate instant display of the search results.

At stage the computing device requests the content associated with the next navigation event identified at stage . The request may comprise a hypertext transfer protocol HTTP GET request a file transfer protocol FTP request or any other network data access request as known in the art. A first set of web content may be provided in response to a HTTP GET request which may then lead to additional HTTP GET requests in accordance with the first set of web content. For example a HTTP GET request may result in a base search page being sent to the web browser which may trigger other page loading operations such as additional GET requests. The base search page may have multiple embedded images which are then fetched and rendered using HTTP GET requests for each image. The prerendering process as described may request the full search page including associated scripts and then execute those scripts.

At stage the computing device renders content associated with the navigation event determined at stage . The content may be rendered in an alternate instance of the web browser that is hidden from the user. For example the content may be rendered by an alternate process or in a hidden web browser tab.

In some aspects the rendered content may include a redirection operation. An example of a redirection operation is when the act of loading a first page for instance www.a.com causes the browser to load a second page such as www.b.com. Redirection may occur in response to a HTML tag a JAVASCRIPT navigation command or the like. In the case a prerendered page requests a redirection operation said redirection operation would also occur in the alternate instance.

In some aspects a first redirection operation may lead to subsequent redirections. For example www.a.com may lead to www.b.com which leads to www.c.com. Aspects of the system and method may account for this fact such as by storing a history of redirection operations and prerendering the last page in a series in response to a first page being identified to prerender. In some aspects the method may short circuit redirection operations by not prerendering intermediate pages when the destination result page i.e. the page at the end of the redirection operations is known and only prerendering the final page in the series.

At stage the computing device may determine whether the user has selected the link identified at stage or performed a predicted search operation within a particular time period. For example the method may wait for 10 seconds 20 seconds 30 seconds one minute 5 minutes or any other time frame. In some aspects the time frame may be configurable within an options menu associated with the web browser. The time frame may also be specified by the server . In some aspects the server may embed a timeout value with a prerender tag indicating the length of time the content associated with the tag should be held before being discarded. For example the HTML script for a link to an example website e.com in a search result may be modified from to by the search engine indicating that the rendering candidate from the search results can be held for 10 seconds. If the user has selected the link within the time period the method proceeds to stage . Otherwise the method proceeds to stage .

At stage the computing device discards the prerendered content. The prerendered content is allowed to expire in this manner in order to free up system resources associated with the prerender operation and prevent the user from being presented with stale data. In some aspects a different expiration period may be specified for different types of data. For example data that is likely to rapidly change such as breaking news articles stock quotes syndication feeds and the like is more likely to grow stale quickly and might be associated with a shorter expiration timer such as 10 seconds 20 seconds or one minute. Data that is less likely to change such as reference articles archives box scores and the like might be associated with a longer expiration timer such as an hour 6 hours 24 hours a week or the like. In some aspects the wait time is based on a page type. For example if the user is viewing a lengthy news article a longer wait time may be specified when prerendering a next page of the article to provide the user time to read the current page of the article before selecting the next page. In some aspects the wait time is determined by a time to live TTL parameter associated with a prerendering tag embedded within the page. In some aspects the wait time is hard coded within the browser. The method then ends after the prerendered content is discarded though in some aspects the method may repeat indefinitely as the user browses web content.

At stage the computing device merges the alternate instance containing the prerendered content into the visible user instance in response to the user selecting the link identified at stage or performing the predicted search operation e.g. next navigation events . In this manner the computing device displays the content associated with the navigation event instantly without a delay while the page data is requested from and received from the host server and rendered. Even if rendering has not been completed search result pages may be merged into the search page as the results are received from a server. In some aspects the user may select the navigation event prior to the prerendering operation completing. In such cases the partially loaded page would be merged into the current user instance. The partially loaded page would then continue to load in the current user instance as normal. The method then ends after making the prerendered content available to the user.

At stage the hidden browser instance is primed with the network content. As described above the network content may be associated with commonly performed user activities such as initiation of an often repeated search request a return to the user s home page or accessing the user s primary webmail account. The content that is primed in this manner may be determined in a variety of methods including allowing the user to specify an address or uniform resource locator URL in configuration settings analysis of user navigation history to predict a most frequently visited page or specification of a default search engine for priming. This initial priming stage may occur when the browser is initially executed.

At stage an indication that the user wishes to access the network content preloaded in the hidden browser instance is received. For example if the network content is a search engine home page the user may select a home interface control. If the network content is a search page the user may enter a search query in a text entry field or select a suggested search query such as provided via an Omnibox see .

In response to the selection operation received at stage the hidden browser instance containing the primed e.g. completely executed and rendered network content is merged into the active browser instance at stage . The network content thus becomes accessible to the user as soon as the merge occurs without the need to request the content from a host server.

At stage the network content is reprimed e.g. executed and rendered again in a hidden browser instance. A new hidden browser instance may be established or the same hidden instance that previously held the network content may be used for the new content. The network content may be requested again over the network or it may be executed and rendered again using previously requested data. In this manner the network content is prepared for a new user interaction such as a new search query or a new return to the user s home page. The network content may be reprimed after a particular length of time after the initial set of network content is used for example a search page may be reprimed 30 seconds after each search query.

The network content may be reprimed based on other factors as well such as immediately after use of the initial network content based upon an access model derived from previous user navigation habits based on a level of available system resources or based on an indication from the server hosting for the network content. For example the server may specify a particular Time to Wait or Time to Live before the network content is reprimed in order to manage the amount of network traffic flowing to the server from preload operations. The method may end after the network content has been reprimed for use in another network access operation. The repriming operation may be performed in various manners including copying the preloaded network content before merging the content into the active browser or requesting a new copy of the network content from a host server.

At stage the search engine results page is prerendered in a hidden browser instance. The search engine results page may be prerendered in response to user input or it may be prerendered when the browser is loaded. For example the search engine results page may be prerendered when a text entry field that accepts search queries receives focus when the user enters at least one text character in the text entry field or after at least one spacebar character is entered in the text entry field to distinguish the text entry from a URL . The prerendering process of the search engine may include requesting any or all of page formatting instructions images logos scripts style sheets or any other content that must be received in order to render the web page aside from the search results responsive to the query.

At stage a search query is received. The search query may be received in response to the user entering text in the text field or the query may be identified after the user performs a selection operation such as pressing the enter key after entering text in the text field. The search query may also be identified via other methods such as by detecting a spacebar character in a text entry field. In some aspects the search query is only sent to the search engine after the enter key has been pressed and the text string is determined to not be a URL in order to preserve user privacy e.g. to avoid sending URLs typed by the user for navigation purposes to the server as search engine queries .

At stage the search query is passed to the prerendered search engine results page. The search query may be communicated to the prerendered search page using a search API where the query is sent via a scripting interface. For example the query may be sent to the search engine via an AJAX interface on the search engine results page.

At stage the prerendered search page is merged into the active browser instance to display the search results. Search results may thus be instantly presented to the user as they are received from the search engine server as the other content of the search engine results page has already been rendered.

At stage the network content is prerendered in a hidden browser instance. As described above the network content may be a search engine landing page a search engine home page or any other type of web page that may be identified as an appropriate prerendering target. The network content may be prerendered in a particular security state. For example if the user is logged into an account associated with their search engine the page may be loaded in a secure environment to prevent other user search queries from being linked to the user s particular login credentials or the search engine may display search results or other data specific to the user. If the user is not logged into their account then the network content may display a user agnostic version.

At stage a determination is performed as to whether the security status of the network content has changed. The security status may change for a variety of reasons. For example a user may log in to their account on another related page in the primary browser instance which may create a session that may also be used by the network content or the user may be automatically logged out of their account after a particular idle time. The security status change may be identified either by code embedded within the page e.g. a script that periodically checks the page status or by functionality embedded within the browser that has prerendered the page.

The security status of the page may be periodically checked by a script associated with the network content. For example the page itself may check for the presence of a session identifier to determine that a secure session has been initiated or the page may periodically communicate with the page host to determine if the user has logged in to a related service. In some aspects the session identifier may be a piece of data stored in a user s web browser as an HTTP cookie web cookie browser cookie or the like.

The security status of the network content may also be determined by the browser. The browser may periodically check for the presence of the cookie to determine if a secure session has been established. In cases where the network content is a search engine results page the browser may be specifically configured to communicate with the particular search engine. For example the browser may communicate with the search engine using a search API. In response to a particular API query the search API may return a particular start page to be utilized with the search engine. For example the search API may return a search engine start page in response to a getdefaultsearchengine request. The browser may identify whether this start page includes a https identifier which may indicate that the network content is operating in a secure environment.

The act of determining whether the security status of the network content has changed may be performed in response to a particular stimulus. For example the determination may be performed at a particular interval. The determination may also be performed based on a user input such as when the user begins entering text in a search box or performs another act that may be probative that the user wishes to use the prerendered network content.

At stage appropriate action is taken based on the changed security status of the prerendered network content. The appropriate action may include reloading the network content e.g. requesting the content again from the host or otherwise modifying the prerendered network content to take into account the changed security status. For example an insecure instance of the network content may be replaced with a secure instance of the network content. If the network content was previously in a secure environment and has changed to an insecure environment then the network content may not have any action performed as issuing an insecure query via SSL may not result in a security compromise. In a scenario where the network content is a search engine results page and the page has changed from an insecure environment to a secure environment the search engine results page may alternately issue a search query with reference to a secure page e.g. replacing http with https in the address of the preloaded network content rather than reloading the prerendered network content directly. In this manner the method provides for the ability to decrease access times to prerendered content while also maintaining desired security semantics for the prerendered network content.

The stages of the illustrated methods are not intended to be limiting. The functionality of the methods can exist in a fewer or greater number of stages than what is shown and even with the depicted methods the particular order of events may be different from what is shown in the figures.

The systems and methods described herein advantageously provide for faster display of search results while maintaining an appropriate security level for prerendered network content. Since the non search result content of the search engine results page is prerendered delay associated with requesting downloading and rendering such content is eliminated. This allows display of search results as soon as the results are received from the search engine server. Display of search results in such a manner may save multiple seconds of delay during which the user would otherwise be idle while waiting for the page data to render. By accounting for the security status of the prerendered search engine results page the systems and methods ensure that data is sent according to appropriate security protocols and methods while still retaining the advantages of prerendering the search engine results page. Priming a page in this manner also allows for a speed increase as network data requests are performed up front such that less data may be requested when the user wishes to interact with the primed page.

As these and other variations and combinations of the features discussed above can be utilized without departing from the disclosure as defined by the claims the foregoing description of the embodiments should be taken by way of illustration rather than by way of limitation of the disclosure as defined by the claims. It will also be understood that the provision of examples of the disclosure as well as clauses phrased as such as e.g. including and the like should not be interpreted as limiting the disclosure to the specific examples rather the examples are intended to illustrate only some of many possible embodiments.

