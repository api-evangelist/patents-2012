---

title: Systems and methods for improving virtual machine performance
abstract: Virtual machine optimization and/or storage reclamation solutions are disclosed that manage virtual machine sprawl and/or growing enterprise storage costs. For instance, certain solutions receive recommendations based on one or more rules, policies and/or user preferences that identify storage and/or alignment criteria for virtual machine disk (VMDK) partition(s). In certain examples, a resize tool that operates within a host operating system of a host server dynamically resizes and/or aligns one or more VMDK partitions of a powered-down virtual machine. For instance, the resize tool can be injected to the host server from a remote management server and can resize and/or align the VMDK partitions without requiring contents of the VMDK to be copied to another VMDK. By reallocating storage and/or aligning the VMDK partitions, embodiments of the invention can increase virtual machine performance and improve storage management.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08332571&OS=08332571&RS=08332571
owner: Vizioncore, Inc.
number: 08332571
owner_city: Buffalo Grove
owner_country: US
publication_date: 20120416
---
This application is a continuation of U.S. patent application Ser. No. 12 575 342 filed on Oct. 7 2009 entitled Systems and Methods for Improving Virtual Machine Performance now U.S. Pat. No. 8 171 201 which claims the benefit of priority under 35 U.S.C. 119 e of U.S. Provisional Patent Application No. 61 103 367 filed on Oct. 7 2008 entitled Systems and Methods for Storage Reclamation in a Virtualized Computing Environment the entirety of each of the foregoing applications is hereby incorporated by reference herein so as to be considered part of this specification.

Embodiments of the invention generally relate to systems and methods for performing virtual machine optimization and or storage reclamation in a virtual computing environment.

Many companies take advantage of virtualization solutions to consolidate several specialized physical servers and workstations into fewer servers running virtual machines. Each virtual machine can be configured with its own set of virtual hardware e.g. processor memory ports and the like such that specialized services that each of the previous physical machines performed can be run in their native operating system. In particular a virtualization layer or hypervisor allocates the computing resources of one or more host servers to one or more virtual machines and further provides for isolation between such virtual machines. In such a manner the virtual machine is a representation of a physical machine by software.

With the increasing popularity of virtual computing infrastructures has also come a demand for additional storage. However oftentimes a large amount of wasted space exists in such infrastructures due to the over allocation of the static hard drive size when new hosted virtual machines are created. Such over allocation especially when combined with the increasing problem of virtual machine sprawl can lead to terabytes of wasted storage space resulting in thousands of wasted information technology dollars.

Moreover many virtual storage volumes are created in such a way that causes partitions of the virtual machine disks VMDKs to be misaligned. Such misalignment can cause data to be written to multiple blocks during a single write operation which results in additional I O and a further reduction of application and or system performance.

In view of the foregoing a need exists for a virtual machine optimization and storage reclamation solution that helps to manage virtual machine sprawl and growing enterprise storage costs. For example there is a need for systems and methods that identify and or reclaim over allocated virtual machine storage. Moreover a need exists for systems and methods that further dynamically align VMDK partitions to improve virtual machine performance without requiring new VMDKs to be created to perform the alignment and or resizing.

To address the drawbacks discussed above certain embodiments of the invention scan through host servers and or individual virtual machines to identify and calculate over allocated virtual machine storage. Next embodiments of the invention automatically right size e.g. shrink select VMDKs to reclaim over allocated storage enabling customers to use their existing storage more efficiently and cost effectively. Moreover certain embodiments can further locate and fix e.g. enlarge virtual machines that are running out of storage thereby effectively preventing painful and costly virtual machine outages.

In yet further embodiments solutions and tools disclosed herein can perform partition alignments for newly sized VMDKs. For example certain systems and methods engage in the alignment of WINDOWS volumes using 64 kilobyte KB blocks which are then aligned with the virtual machine file system boundaries for improved performance.

In certain embodiments a method is disclosed for improving virtual machine performance within a computing environment. The method comprises for each of a plurality of virtual machines executing on at least one host server obtaining a lock on the virtual machine associated with a virtual machine disk having a plurality of partitions and determining a target size of one or more of the plurality of partitions of the virtual machine disk. The method further includes issuing a first instruction to power off the virtual machine and while the virtual machine is powered off performing at least one of resizing and aligning the one or more partitions without copying contents of the virtual machine disk to another virtual machine disk. The method also includes issuing a second instruction to power on the virtual machine and removing the lock from the virtual machine.

In certain embodiments a system is disclosed for improving virtual machine performance within a computing environment. The system comprises a host server a datastore and a management server. The host server includes a host operating system and a plurality of virtual machines each having a guest operating system. The datastore comprises a plurality of virtual machine disks associated with each of the plurality of virtual machines wherein a first virtual machine disk of the plurality of virtual machine disks is associated with a first virtual machine of the plurality of virtual machines. The management server is in network communication with the host server and is configured to inject a resize module into the host operating system of the host server. In particular the resize module is configured to i determine a target size of one or more of a plurality of partitions of the first virtual machine disk ii issue a first instruction to power off the first virtual machine iii while the first virtual machine is powered off perform at least one of resizing and aligning the one or more partitions without copying contents of the first virtual machine disk to another virtual machine disk and iv issue a second instruction to power on the first virtual machine.

In certain embodiments another system is disclosed for improving virtual machine performance within a computing environment. In particular the system comprises means for obtaining a lock on a virtual machine associated with a virtual machine disk having a plurality of partitions and means for determining a target size of one or more of the plurality of partitions of the virtual machine disk. The system also includes means for powering off the virtual machine and means for automatically resizing and aligning the one or more partitions while the virtual machine is powered off without copying contents of the virtual machine disk to another virtual machine disk. The system further includes means for powering on the virtual machine following said performing and means for removing the lock from the virtual machine.

Embodiments of the invention disclosed herein can provide several advantages such as for example one or more of the following increasing storage utilization improving overall virtual machine storage performance increasing I O throughput reducing latency substantially lowering storage acquisition costs increasing the number of virtual machines per host server combinations of the same or the like.

For purposes of summarizing the disclosure certain aspects advantages and novel features of the inventions have been described herein. It is to be understood that not necessarily all such advantages may be achieved in accordance with any particular embodiment of the invention. Thus the invention may be embodied or carried out in a manner that achieves or optimizes one advantage or group of advantages as taught herein without necessarily achieving other advantages as may be taught or suggested herein.

Certain embodiments of the invention provide a virtual machine optimization and or storage reclamation solution that manages virtual machine sprawl and or growing enterprise storage costs. For instance certain embodiments enable the reclamation of space taken on ESX datastores by automating the periodic resizing of new technology file system NTFS partitions for WINDOWS based virtual machines. Embodiments of the invention can also reduce the footprint of WINDOWS based virtual machines by enabling the periodic streamlining of the operating system via the deletion of selected files and disabling of unnecessary services.

Certain embodiments of the invention further perform a partition adjustment of an ESX based virtual machine via an innovative process of mounting an offline virtual machine inspection of the virtual machine s file system and guest operating system followed by a NTFS resizing of the virtual machine s partition. For example a virtual machine inspected to have a 10 GB partition of which 8 GB is unused space can be resized to 6 GB leaving 4 GB free and 4 GB saved e.g. available for other virtual machines .

Embodiments of the invention can also advantageously provide automatic processes that are driven by customizable profiles so that administrators can specify the amount of free space for certain categories of virtual machines e.g. web servers require 50 free disk space VDI knowledge workers require 35 etc. . Storage savings can also be considerable e.g. up to 40 of virtualization storage costs thereby allowing administrators to take control of virtual machine sprawl and growing enterprise storage costs including the improved efficiency and ability to contain more virtual machines on each ESX host.

Moreover certain embodiments of the invention further provide for automatic alignment of partitions or extents of a VMDK file to increase I O performance by the virtual machine. For example such aligned partitions can ensure that a single I O request is serviced by a single device.

The features of the inventive systems and methods will now be described with reference to the drawings summarized above. Throughout the drawings reference numbers are re used to indicate correspondence between referenced elements. The drawings associated descriptions and specific implementation are provided to illustrate embodiments of the invention and not to limit the scope of the disclosure.

In addition methods and functions described herein are not limited to any particular sequence and the blocks or states relating thereto can be performed in other sequences that are appropriate. For example described blocks or states may be performed in an order other than that specifically disclosed or multiple blocks or states may be combined in a single block or state.

The terms optimize and optimization as used herein are broad terms and are used in their ordinary sense and include without limitation the process of modifying a system and or method to cause some aspect of the system or method to work more efficiently or to use fewer resources. For example optimization of virtual storage reclamation can include one or more processes of modifying a virtual machine to allow a more efficient approach to allocating and using virtual machine storage. Thus these terms are not used herein to imply that a maximum or best result is necessarily achieved or required.

The term extent as used herein is a broad term and is used in its ordinary sense and represents without limitation an area of a disk. For instance an extent can comprise a continuous run of sectors on one disk or a contiguous area of storage in a computer file system reserved for a file folder application or the like. A system extent can represent system areas of a disk e.g. master boot record MBR or extended boot record EBR tables that generally have a fixed size. A partition in certain embodiments can refer to a type of extent representing a primary and or a logical partition on disk.

For exemplary purposes certain embodiments of the inventive systems and methods will be described herein with reference to hosted virtual infrastructures offered by VMware Inc. Palo Alto Calif. . However it will be understood from the disclosure herein that the disclosed systems and methods can be utilized with other virtualization technologies including but not limited to virtual environments using XEN and XENSERVER by Citrix Systems Inc. Fort Lauderdale Fla. ORACLE virtual machine by Oracle Corporation Redwood City Calif. HYPER V by Microsoft Corporation Redmond Wash. VIRTUOZZO by Parallels Inc. Switzerland or the like.

As shown the virtual computing environment comprises a management server that communicates with a plurality of host servers via a network . In certain embodiments the management server is configured to improve performance of the host servers and or the virtual machines hosted thereon by addressing virtual machine disk storage and or partition alignment concerns. In certain embodiments the management server comprises a WINDOWS based server while in other embodiments the management server can comprise a UNIX or LINUX server.

As illustrated each of the host servers comprises a host operating system and a plurality of virtual machines executing thereon. In particular host server A includes a host operating system a virtual machine and a virtual machine . Host server B includes a host operating system a virtual machine and a virtual machine . Host server C includes a host operating system a virtual machine and a virtual machine

In certain embodiments each of the host servers comprises a hosted architecture having one or more computing devices configured to host each of its respective virtual machines above a hypervisor layer that runs directly on top of the hardware platform of the host server and virtualizes resources of the device s e.g. a native or bare metal hypervisor . Such abstraction by the hypervisor layer s allows for example for multiple virtual machines with heterogeneous operating systems and or applications such as WINDOWS or LINUX systems mail servers or the like to run in isolation on resources of the same physical machine s . For instance in certain embodiments one or more of the host servers comprises a VMWARE ESX server or other like virtualization platform.

Each of the host operating systems can provide a management layer for the respective host server. In certain embodiments the host operating system has limited access to host system resources such as processing time and memory since such resources are generally allocated and reserved for use by the virtual machines and their respective hypervisors. For instance certain host operating systems may be limited to accessing a single processor even if the host server includes multiple processors and approximately 100 MB of memory e.g. RAM .

In yet other embodiments one or more of the host servers can include a hosted architecture in which the hypervisor runs within the host operating system. In such embodiments the hypervisor can rely on the host operating system for device support and or physical resource management. Examples of such hosted hypervisors can include but are not limited to VMWARE WORKSTATION and VMWARE SERVER by VMware Inc. VIRTUAL SERVER by Microsoft Corporation PARALLELS WORKSTATION by Parallels Inc. or the like.

With continued reference to each of the virtual machines is associated with a VMDK on a datastore . In certain embodiments the VMDK can be considered a virtual hard drive of the associated virtual machine such that the virtual machine sees the VMDK as for example a local SCSI target. In certain embodiments each of the VMDKs comprises one or more files stored on a virtual machine file system VMFS volume. When a virtual machine is operating it obtains a lock on the VMDK files such that no other host servers can update them thereby assuring that a single virtual machine cannot be opened at the same time by multiple host servers.

As illustrated virtual machine is associated with VMDK virtual machine is associated with VMDK virtual machine is associated with VMDK virtual machine is associated with VMDK virtual machine is associated with VMDK and virtual machine is associated with VMDK

The datastore can comprise any type of formatted logical container for holding virtual machine files and can exist on a physical storage resource including one or more of the following local disks e.g. local small computer system interface SCSI disks of the host servers a disk array a storage area network SAN e.g. fiber channel an iSCSI disk area network attached storage NAS arrays network file system NFS or the like. In certain embodiments the virtual machine s use the VMDKs on the datastore to store their operating systems program files and other like data.

The management server further comprises one or more optimization tools for improving performance of the host servers and or the virtual machines . For example the illustrated management server includes a resize tool and an alignment tool .

In certain embodiments and as discussed in more detail below the resize tool is configured to reclaim storage from virtual machines that have been allocated too much disk space for their current requirements and or to re allocate additional disk space to those virtual machines that may be running low on storage.

The alignment tool in certain embodiments is configured to automatically align VMDK partitions with associated VMFS partitions so as to improve system performance. In certain embodiments and as discussed in more detail below the alignment tool is configured to re align WINDOWS virtual machine volumes using 64 KB blocks with the VMFS boundaries.

Although the resize tool and alignment tool have been illustrated and described as separate components it will be understood that the two tools can be integrated or combined into a single module or tool. For instance in certain embodiments and as discussed in more detail below alignment of partitions within VMDK files can be performed in the process of resizing such partitions e.g. the partition is sized such that it is aligned with 64 KB boundaries . In yet other embodiments the management server can operate without either the resize tool or the alignment tool .

The management server further includes a user interface for displaying to and or receiving from a user information relating to operation of the management server . In certain embodiments the user interface causes the display of one or more windows for obtaining user input and or outputting status information with respect to the virtual environment such as for example storage quota requirements a target size for one or more partitions and or VMDKs a recommended address for one or more partitions alignment preferences performance reports instructions for the optimization tool s combinations of the same or the like.

In certain embodiments the network comprises a local area network LAN through with the management server and the host server communicate via at least a server message block SMB protocol a secure shell SSH protocol and or hypertext transfer protocol secure HTTPS . In yet other embodiments the network can comprise one or more of the following communication means internet intranet wide area network WAN public network combinations of the same or the like. In addition connectivity to the network may be through for example remote modem Ethernet token ring fiber distributed datalink interface FDDI asynchronous transfer mode ATM combinations of the same or the like.

Although the virtual computing system has been shown and described with reference to particular configurations it will be understood that other embodiments of the invention can include more or fewer components. For instance the virtual computing system can comprise hundreds of virtual machines executing on numerous host servers. Moreover the optimization tools on the management server can comprise more or fewer tools than the resize tool and the alignment tool .

Moreover it will be understood that certain components of the virtual computing system are similar to those of the virtual computing system of . Thus for ease of description features of such components will not be re described in detail if they were described previously. Rather the components in the embodiments of will be given a reference numeral that retains the same last two digits as the reference numeral used in the embodiment of and the last two digits will be preceded with a numeral 2. Thus the management server generally corresponds to the management server with certain differences that will be illuminated in the following discussion.

As shown the management server communicates with the host server over a network . The host server further includes a host operating system or service console and two virtual machines executing outside the service console virtual machine and virtual machine . The host server further communicates with a datastore which houses the VMDKs of the virtual machines i.e. VM .VMDK and VM.VMDK .

In certain embodiments the service console of the host server can be configured to provide a boot layer for the hypervisor s of the individual virtual machines and is configured to start up and or administer each of the virtual machines. In certain embodiments the service console can be advantageously accessed locally and or remotely e.g. via the management server such as via SSH Telnet or other suitable network protocol usable for remote communications. In certain examples the service console can be further managed by a user via a command line interface. In embodiments of the invention in which the host server comprises an ESX server the service console can comprise a VMWARE LINUX based service console.

The management server further comprises a plurality of components for assisting in the optimization of the virtual computing system . For instance one or more of the following components can be programmed in the C language or the like to execute on the management server .

As shown the management server comprises a resize tool an alignment tool and a user interface which have been discussed above with respect to . In certain embodiments the management server is configured to inject the resize tool and or alignment tool for execution within the service console of the host server . For instance the management server can be configured to inject all or a portion of the resize tool to execute as a resize module within the service console . The management server can also be configured to inject all or a portion of the alignment tool to execute as an alignment module within the service console . In yet other embodiments the resize module and or alignment module exist as installed and or persistent modules on the host server .

In such embodiments of the invention injection of these processes allows for remotely managing the optimization of the virtual machine s and . Moreover because such components can be selectively and dynamically injected and later removed from the service console the optimization components need not be persistently installed on the host server thereby conserving host processing and memory resources. Additional details regarding employing one or more processes through injection to a host server are discussed in U.S. patent application Ser. No. 12 566 231 entitled Systems and Methods for Data Management in a Virtual Computing Environment filed on Sep. 24 2009 which is hereby incorporated herein by reference in its entirety and is to be considered part of this specification.

Also as discussed above with respect to the the resize tool and alignment tool can be integrated or combined into a single module or tool. Likewise the resize module and the alignment module on the host server can be integrated or combined into a single module or tool. In yet other embodiments the management server can operate without either the resize tool or the alignment tool and or the host server can operate without either the resize tool module or the alignment module .

The illustrated management server further comprises a scheduler a network browser a settings manager a reporting module and a history viewer . In certain embodiments the scheduler is programmed to begin one or more optimization processes at a specified time on a local or remote system. For instance the scheduler can determine if the host server is available and then cause to be injected into the service console via SSH the resize tool and or alignment tool as described above. The scheduler can also show such a through the user interface the currently scheduled tasks of the management server .

The network browser can facilitate the locating of virtual machines within the virtual computing system . For example the network browser can display folder names and symbolic links to virtual machines that reside on the host server and or other host servers.

The settings manager in certain embodiments allows a user to maintain a set of optimization profiles for the virtual machine s of the virtual computing environment . For example the profiles can comprise operating system independent and or dependent rules that relate to virtual machine optimization. For example such rules may relate to how much free disk space each virtual machine or VMDK partition should be allotted. In certain embodiments the user can select a predefined optimization profile or create a new profile to be attached to selected virtual machine s such as by dragging within the network browser icon s that represent the virtual machine s to be associated with the selected or new optimization profile.

The reporting module can advantageously generate reports specifications statistics projections alerts or the like regarding the optimization history and or future of a given virtual machine. For instance as discussed in more detail below provides an example of a statistics report that can be generated by the reporting module .

The history viewer can produce historic information regarding the optimization of a particular virtual machine. For example the history viewer can access one or more description files of the virtual machine to display details about the state or past state s of the virtual machine.

Although the management server has been described with reference to a particular configuration other embodiments of the invention can utilize a management server having more or fewer components than those discussed.

With continued reference to virtual machines and further include respectively guest tools and . In certain embodiments the guest tools comprise tools that allow for communication with and or within the particular virtual machine. For instance in certain embodiments the guest tools comprise VMWARE TOOLS commercially available from VMware Inc. For example such guest tools can provide for communication with the management server via remote procedure calls RPCs or the like.

In certain embodiments the management server communicates with the datastore through the host server . For instance the management server can utilize one or more network virtual disk drivers for accessing the VM .VMDK and VM.VMDK via for example simple file transfer protocol FTP secure file transfer protocol SFTP or the like.

As discussed the management server is advantageously configured to optimize one or more of the virtual machines via storage reclamation partition re alignment and or the like in order to improve the use of system resources. For instance illustrate a simplified comparison between an unaligned partition and an aligned partition within a virtual infrastructure. In particular illustrates a VMDK file with a plurality of clusters formatted in NTFS that are stored among multiple blocks of a VMFS volume. As can be seen the clusters are misaligned with respect to the VMFS blocks . Thus when an attempt is made to read cluster of the VMDK file both blocks and of the VMFS volume must be accessed thereby resulting in excess I O and additional consumption of processing resources.

The optimization process begins with Block wherein configuration information is collected regarding the virtual computing system . In certain embodiments the management server can communicate with the host server the virtual machines a centralized virtual infrastructure management component e.g. VMWARE VIRTUAL CENTER or vCENTER SERVER combinations of the same or the like to acquire certain system information such as for example number of host servers number and or current locations e.g. paths of virtual machines virtual machine name VMFS size storage media type used and or free space of a particular virtual machine guest operating system type which virtual machines are powered on off internet protocol IP addresses of the virtual machines whether or not a virtual machine comprises snapshots usage history of virtual machine components processes a list of VMDKs attached to specific virtual machine s sizes and or locations of VMDKs on the datastore combinations of the same or the like.

In certain embodiments the management server acquires the initial data through one or more application programming interfaces APIs such as a VMware API via HTTPS communications or the like with each host server. The management server can also acquire information directly from the virtual machines through for example the guest tool s 

Once the initial configuration information is collected the process determines if system optimization of a particular virtual machine is suggested and or needed Block . For instance the process can access the settings manager to determine if the user has selected an option to optimize the guest operating system s of the virtual machines 

If such system optimization is suggested the process moves to Block to optimize the operating system of the particular virtual machine. In certain embodiments the optimization can include for example excluding non used and or rarely used system components from the virtual machine s disk image shutting down non used services cleaning temporary folders modifying the system registry clearing the system file cache removing unnecessary log files removing system auto recover files clearing local profiles running disk defragmentation removing junk files removing unnecessary installer folders clearing the recycle bin combinations of the same or the like.

Following system optimization and or if system optimization is not needed or suggested the optimization process calculates the disk usage for the virtual machine Block . In certain embodiments the process determines both the total disk size of the VMDK and the actual disk space being used by the virtual machine. Such information may be acquired for example during the initial gathering of the system configuration information of Block .

At Block the process determines if storage reclamation is needed and or suggested. If so the process calculates a target or recommended size for each of the partitions of the VMDK Block . For instance in certain embodiments the process can access one or more optimization profiles or rules of the settings manager to determine a recommended or selected free to used space ratio for the partitions and or VMDK. As discussed above this ratio can be operating system dependent and or can be calculated based on a projected growth of the virtual machine the number of virtual machines executing on a particular host server or the like.

At Block the process calculates the partition offsets of the VMDK. For instance in certain embodiments the alignment tool can utilize WINDOWS management instrumentation WMI to perform an alignment scan of a WINDOWS based virtual machine to collect volume offset and alignment information. In yet other embodiments such information can be collected during the initial information collection phase of Block .

Based on the offsets the process can determine if the partitions of the VMDK are appropriately aligned with the underlying VMFS blocks an example of which is illustrated in . If at Block the process determines that alignment is needed the alignment tool and or alignment module aligns and or determines the appropriate offsets for the partitions of the VMDK file. In certain embodiments the alignment tool aligns each of the partitions of the VMDK on 64 KB boundaries of the datastore . For instance the process can change a WINDOWS volume of the virtual machine to use 64 KB blocks which blocks are then aligned with the VMFS. Additional details with respect to this process are described below with reference to .

At Block the process performs a resize of the VMDK. In certain embodiments Block comprises the actual resizing and or aligning of one or more partitions within the VMDK. Based on such resizing and or moving of the partitions the entire VMDK is resized. In certain embodiments as discussed in more detail with respect to the resizing process is advantageously performed without the creation of a new VMDK and or the copying of contents from the current VMDK another VMDK. Rather moving the partitions is accomplished by copying a sequence of sectors of the partitions to new locations on the disk.

In certain embodiments wherein the VMDK is truncated following the aligning and or resizing of the partitions Block can further comprise updating each partition s BIOS parameter blocks BPBs for NTFS partitions and or the cylinder s head s sector s CHS in the MBR to correspond to the new VMDK geometry. For instance for each partition the process can calculate a new CHS address for the partition based on the partition s logical block addressing LBA address and current disk geometry and write the new CHS address to the MBR for a primary partition or an EBR for logical disks.

At Block the process determines if there are additional VMDKs within the virtual computing system that need to be optimized. If so the process repeats Blocks through for each VMDK. If all the VMDKs have been addressed the process terminates.

Although the process has been described with reference to a particular configuration other embodiments of the process can be used in virtual machine optimization. For instance the process can resize a partition prior to alignment and or the process can skip one or more of the system optimization alignment and resizing routines. In yet other embodiments wherein one or more virtual machines comprises a LINUX operating system the process can configure the virtual machine s to boot from an ISO image that includes tools for resizing and or aligning VMDK data. Following the resizing and alignment of the VMDK the virtual machine s are then booted using their guest operating systems.

Moreover in certain embodiments the process can perform at least one of resizing and aligning partitions. In yet other embodiments the resizing process includes alignment of VMDK partitions such that the process takes into account 64 KB boundary alignment when resizing each partition. In yet further embodiments of the invention the process does not include a system optimization option Blocks and .

At Block the management server locks a virtual machine to prevent access by another user or application. The process then calculates requested or suggested volume and partition sizes of the associated VMDK file using corresponding quotas Block . For instance the quotas can be based on one or more user preferences customizable profiles predetermined rules or policies or the like that specify preferred storage and or alignment requirements. In certain embodiments such calculations are also based at least in part on configuration information gathered regarding the virtual machine VMDK and or virtual infrastructure see e.g. Block of .

At Block the process powers down the virtual machine. In certain embodiments the management server and or resize tool instructs the service console of the host server to shut down the virtual machine. Although the virtual machine is powered down the process can still access the associated VMDK via a specified path to the VMDK files e.g. gathered during Block of the process .

After the virtual machine has been powered down the process obtains a second lock on the virtual machine Block . In certain embodiments the second lock comprises a renaming lock to prevent a second user or administrator from powering on the virtual machine during the optimization process . For instance obtaining the second lock may comprise temporarily renaming the VMDK file for a period of time until the optimization process has completed. In yet other embodiments of the invention Block is optional and the process can proceed without obtaining a second lock on the virtual machine.

At Block the process performs a shrink operation on one or more VMDKs. In certain embodiments the shrink operation comprises the management server utilizing a tool or command to shrink or truncate partitions whose current size exceeds the requested size. Moreover such shrinking can advantageously be performed without adjusting the current start offset of the partition. For instance the management server can utilize the resize tool and or resize module to shrink the partitions that have a size greater than a requested or recommended size. In certain embodiments following said shrinking each of the VMDKs involved in the optimization process is sorted in order of the VMDK with the greatest potential change in size to the VMDK with the least potential change in size or vice versa to facilitate the subsequent optimization steps.

At Block the process resizes and or aligns each of the partitions of the VMDK s . For example the resize tool resize module alignment tool and or alignment module can perform the resizing and or aligning processes as described in more detail with respect to .

The process continues with Block to perform zeroing of the VMDK s . In certain embodiments the management server causes unused parts of the VMDK to be filled with zeroes. For instance the resize module can be configured to wipe partitions or extents e.g. non system extents and or unallocated space between extents.

In embodiments of the invention utilizing NTFS partitions the resize module can retrieve a map of used clusters using for example libntfs ntfsresize . The resize module can then calculate blocks that have only unused clusters. For every such block that contains any data except for zeroes the resize module can write zeroes to the block. For unallocated space between extents the process can include calculating the blocks between the extents reading such blocks and writing zeroes to any blocks having non zero data.

For other types of partitions e.g. Ext 2 3 4 partitions the wipe routine can be performed using external tools or skipped entirely. In yet other embodiments the process can be performed without Block .

Continuing with Block the process refreshes the datastore s to update the free used space. In certain embodiments this block is performed using the VimAPI available from VMware Inc. At Block the process detaches and then re attaches each VMDK disk to the corresponding virtual machine to cause the host server to update the new sizes of the VMDKs.

Next the process removes the second lock Block such as by renaming the virtual machine to its original name and updates the registry of the operating system of the virtual machine Block . For instance updating the registry can comprise restoring volume mount points fixing values to prevent rebooting following the optimization process fixing new volume offsets in the boot configuration combinations of the same or the like.

At Block the process powers on the virtual machine and the first lock on the virtual machine is removed Block .

Although the optimization process was been generally described with reference to particular configurations e.g. a WINDOWS based virtual machine other embodiments of the invention can include more or fewer blocks than those illustrated in . For instance in a virtual computing system comprising a LINUX based virtual machine the process can include configuring the virtual machine to boot from an ISO image by attaching the ISO image to the virtual machine attaching a FLP image to the virtual machine and installing a boot loader into the virtual machine disks. In this manner the shrink step of Block can be performed by booting the virtual machine from the ISO image and for each Ext 2 3 4 volume on the virtual machine that must be truncated shrinking the file system using the resize2fs program.

At Block the process begins by reading a list of the VMDK partitions list to a list of extents. For each partition within the extents list the process determines if the current size of the partition is greater or equal to a requested size Block . For example the requested size of the partition can be based at least in part on a user preference a quota requirement a predetermined policy or the like.

For each partition having a requested or recommended size that is less than its current size the process at Block shrinks the partition if appropriate. For example in certain embodiments the process shrinks the file system on the partition and shrinks the partition down to the file system size. For instance for an NTFS file system the shrink operation can be performed using libntfs ntfsresize . For Ext 2 3 4 file systems the file systems can be shrunk using commercially available external tools.

After shrinking the partitions or if the current size of each partition is not greater than the requested size the process proceeds with Block to determine new extent sizes and offsets based on the requested sizes and offsets which determination is described in more detail below with respect to .

The process then calculates the required VMDK size based at least on the new size and or offset of the last partition of the VMDK Block . In certain embodiments the required VMDK size is calculated using algorithms provided in the VMWARE disk specification.

At Block the process moves each of the extents to their newly determined positions. In certain embodiments each of the extents is processed in order of their start offsets according to the following recursive steps. First if the current offset of the extent is greater than the new calculated offset for the extent the extent or partition is moved to the left by copying a sequence of sectors. This copying is accomplished by decreasing the addresses of the sectors on the disk. The process then continues with the next partition.

On the other hand if the current offset of the extent is less than the new offset the process moves to the next partition. If the current extent is the final partition on the disk the partition is moved to the right by copying a sequence of sectors. This copying is accomplished by increasing the addresses of the sectors on the disk.

At Block the process determines if the new size of each partition is greater than its current size. If so at Block the process enlarges the partition up to the new file system size and enlarges the file system on the partition. In certain embodiments of the invention having an NTFS file system enlarging the partition is performed by using libntfs ntfsresize . For embodiments having Ext 2 3 4 file systems such enlarging can be performed using commercially available external tools.

The sub process begins at Block wherein each of the extents of the VMDK are ordered based on their starting offsets. Beginning with the first extent Block the process determines if 64 KB alignment is enabled Block . For example 64 KB alignment can be based on a user selectable option to perform alignment of the VMDK partitions to 64 KB boundaries. In yet other embodiments the 64 KB alignment option can be automatically enabled for all resize processes.

If 64 KB alignment is enabled the process also determines if the current VMDK and or extent is on a Do Not Align list Block . For instance in certain embodiments of the invention particular extents or partitions can be designated by the user resize module or alignment module as not requiring alignment.

If the disk and or extent is not on the list the process proceeds with Block to align the extent offset to the next 64 KB boundary e.g. by rounding up to correlate with the VMFS. At Block the new size of the extent is set to the greater of the current size of the extent and the required size. For instance if the requested size of a partition is less than the original size of the partition the partition may have already been resized to its closest possible value during a previous shrinking process see e.g. Block of .

At Block the new extent size is then aligned or increased such that the extent end offset is aligned with the next 64 KB boundary e.g. by rounding up . This advantageously allows for the next extent of the VMDK to also begin at the 64 KB boundary. The process then continues to Block to determine if there are additional extents associated with the VMDK.

However if 64 KB alignment is not enabled Block or the disk and or current extent is identified as one not to be aligned Block the process proceeds with Block wherein the offset of the extent is aligned to the disk cylinder boundary. At Block the new size of the extent is then set to be the greater of the current size of the extent and the required size. Following this block the extend end offset is aligned to the disk cylinder boundary Block thereby resulting in an extent size being equal to the difference between the end offset and the start offset.

Moving to Block if there are additional VMDK extents the process selects the next extent Block and returns to Block . If there are no additional VMDK extents the process terminates.

As shown the report comprises a virtual machine table listing information regarding each of the virtual machines on the particular host server. The virtual machine table includes among other things a virtual machine name column a total disk space column a used disk space column a free disk space column and a free disk space percentage column each of which can be used to determine whether or not one or more of storage reclamation processes should be performed on one or more virtual machines.

Moreover the virtual machine table further includes an alignment status column which can inform the user whether or not an alignment scan should be performed and or if one or more partitions of the VMDKs should be aligned.

The report also includes a datastore table comprising information regarding the datastore s in communication with the particular host server. As shown the datastore table identifies the storage characteristics of the datastores housing one or more of the VMDKs.

The report further includes a projected savings table that provides the user with space and cost savings that could potentially be achieved if storage reclamation were to be performed on particular virtual machines. In certain embodiments the projected savings information is based on established free to used space rules and or profiles maintained by the settings manager .

In view of the foregoing the disclosed systems and methods can provide various advantages in a virtual computing system. In particular certain embodiments of the invention can provide for one or more of the following functions features and or benefits 

Furthermore in certain embodiments the systems and methods described herein can advantageously be implemented using computer software hardware firmware or any combination of software hardware and firmware. In certain embodiments systems are implemented as a number of software modules that comprise computer executable code for performing the functions described herein. In certain embodiments the computer executable code is executed on one or more general purpose computers. However a skilled artisan will appreciate in light of this disclosure that any module that can be implemented using software to be executed on a general purpose computer can also be implemented using a different combination of hardware software or firmware. For example such a module can be implemented completely in hardware using a combination of integrated circuits. Alternatively or additionally such a module can be implemented completely or partially using specialized computers designed to perform the particular functions described herein rather than by general purpose computers.

Moreover certain embodiments of the invention are described with reference to methods apparatus systems and computer program products that can be implemented by computer program instructions. These computer program instructions can be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the acts specified herein to transform data from a first state to a second state.

These computer program instructions can be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to operate in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the acts specified herein.

The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions that execute on the computer or other programmable apparatus provide steps for implementing the acts specified herein.

While certain embodiments of the inventions have been described these embodiments have been presented by way of example only and are not intended to limit the scope of the disclosure. Indeed the novel methods and systems described herein may be embodied in a variety of other forms furthermore various omissions substitutions and changes in the form of the methods and systems described herein may be made without departing from the spirit of the disclosure. The accompanying claims and their equivalents are intended to cover such forms or modifications as would fall within the scope and spirit of the disclosure.

