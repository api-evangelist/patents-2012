---

title: Decorated model architecture for efficient model-driven application development
abstract: A computer-executable application is provided with access to resources generated using a principal model. A decoration model associated with the principal model is instantiated for use by the application. The application is provided with access to an object of the decoration model responsive to a request by the application to access an object of the principal model. The decoration model object corresponds to the principal model object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08635253&OS=08635253&RS=08635253
owner: International Business Machines Corporation
number: 08635253
owner_city: Armonk
owner_country: US
publication_date: 20120906
---
This application is a continuation of and claims priority to and claims the benefit of U.S. patent application Ser. No. 13 286 655 titled DECORATED MODEL ARCHITECTURE FOR EFFICIENT MODEL DRIVEN APPLICATION DEVELOPMENT which was filed in the U.S. Patent and Trademark Office on Nov. 1 2011 and which has a current status of Allowed and this application claims priority to and claims the benefit of U.S. patent application Ser. No. 11 945 015 titled DECORATED MODEL ARCHITECTURE FOR EFFICIENT MODEL DRIVEN APPLICATION DEVELOPMENT which was filed in the U.S. Patent and Trademark Office on Nov. 26 2007 and which issued as U.S. Pat. No. 8 095 570 on Jan. 10 2012 both of which are incorporated herein by reference in their entirety. This application is further related to U.S. patent application Ser. No. 11 945 046 titled MODEL AUGMENTATION IN A MODEL DRIVEN APPLICATION DEVELOPMENT ENVIRONMENT which was filed in the U.S. Patent and Trademark Office on Nov. 26 2007 and which is also incorporated herein by reference in its entirety.

With the advent of modeling methodologies such as the Unified Modeling Language UML developers of computer based applications have been able to create system models and then employ tools that use the models to automatically generate application resources such as application programming interface API software for creating accessing and modifying instances of model classes as well as aspects of the persistence layer of an application such as database structures. Unfortunately after generating these resources using a model any changes to the model requires that the resources be generated once again in order to effect the changes within the computer based application.

The present invention provides a decorated model architecture for efficient model driven application development that allows for a model to be changed in some instances without need for regenerating application resources.

In one aspect of the present invention a method is provided for implementing a model driven architecture the method including defining a principal model having a plurality of classes references attributes and associations between any of the classes where the model is configured to facilitate the automatic generation of at least one resource for use by a computer executable application and where a change to the principal model subsequent to performing the automatic generation requires that the automatic generation be performed again in order to effect the change for use by the application defining a decoration model having a class reference and attribute for any corresponding one of the primary model classes references and attributes where a change to the decoration model subsequent to performing the automatic generation does not require that the automatic generation be performed again in order to effect the change for use by the application mapping the decoration model to the principal model and storing both of the models on a computer readable medium.

In another aspect of the present invention the method further includes defining in the principal model a class representing a package of any of the classes references and attributes of the decoration model.

In another aspect of the present invention a method is provided for using a decoration model in an application environment the method including providing a computer executable application with access to resources generated using a principal model instantiating a decoration model associated with the principal model for use by the application and providing the application with access to an object of the decoration model responsive to a request by the application to access an object of the principal model where the decoration model object corresponds to the principal model object.

In another aspect of the present invention the method further includes receiving a call from the application to a method defined in the principal model object and passing the call from the decoration model object to the principal model object.

In another aspect of the present invention the method further includes receiving a call from the application to a method defined in the decoration model object and servicing the call at the decoration model object.

In another aspect of the present invention the method further includes making the instantiated decoration model globally accessible to a plurality of the applications for each request by any of the applications to access an object associated with either the principal model or the decoration model creating a new thread to handle the request assigning the decoration model to a thread local variable in the new thread and servicing any thread internal code function calls to access the decoration model object via the thread local variable of its thread making a change to the decoration model available to new threads by starting a new thread that reads the changed decoration model instantiating the changed decoration model and deserializing the changed decoration model into its own thread local variable and replacing the globally accessible decoration model with the changed decoration model while any of the applications are executed.

In another aspect of the present invention the method further includes forcing any new incoming requests from the applications to wait until the globally accessible decoration model is replaced by the changed model and assigning the changed decoration model to thread local variables of the new requests after the changed decoration model is instantiated.

In another aspect of the present invention the method further includes checking for pointer equality between any of the thread local variables and the globally accessible decoration model during the post processing of any of the requests and displaying a message if the pointers are not the same.

In another aspect of the present invention a system is provided for implementing a model driven architecture the system including a model builder configured to facilitate the definition of a principal model having a plurality of classes references attributes and associations between any of the classes where the model is configured to facilitate the automatic generation of at least one resource for use by a computer executable application and where a change to the principal model subsequent to performing the automatic generation requires that the automatic generation be performed again in order to effect the change for use by the application a decoration model having a class reference and attribute for any corresponding one of the primary model classes references and attributes where a change to the decoration model subsequent to performing the automatic generation does not require that the automatic generation be performed again in order to effect the change for use by the application and a mapping of the decoration model to the principal model and means for storing both of the models on a computer readable medium.

In another aspect of the present invention the model builder is configured to facilitate the definition in the principal model a class representing a package of any of the classes references and attributes of the decoration model.

In another aspect of the present invention a system is provided for using a decoration model in an application environment the system including a principal model stored on a computer readable medium a decoration model stored on a computer readable medium and a computer configured to host a computer executable application with access to resources generated using the principal model instantiate the decoration model associated with the principal model for use by the application and provide the application with access to an object of the decoration model responsive to a request by the application to access an object of the principal model where the decoration model object corresponds to the principal model object.

In another aspect of the present invention the computer is configured to receive a call from the application to a system defined in the principal model object and pass the call from the decoration model object to the principal model object.

In another aspect of the present invention the computer is configured to receive a call from the application to a system defined in the decoration model object and service the call at the decoration model object.

In another aspect of the present invention the computer is configured to make the instantiated decoration model globally accessible to a plurality of the applications for each request by any of the applications to access an object associated with either the principal model or the decoration model create a new thread to handle the request assign the decoration model to a thread local variable in the new thread and service any thread internal code function calls to access the decoration model object via the thread local variable of its thread make a change to the decoration model available to new threads by starting a new thread that reads the changed decoration model instantiating the changed decoration model and deserializing the changed decoration model into its own thread local variable and replace the globally accessible decoration model with the changed decoration model while any of the applications are executed.

In another aspect of the present invention the computer is configured to force any new incoming requests from the applications to wait until the globally accessible decoration model is replaced by the changed model and assign the changed decoration model to thread local variables of the new requests after the changed decoration model is instantiated.

In another aspect of the present invention the computer is configured to check for pointer equality between any of the thread local variables and the globally accessible decoration model during the post processing of any of the requests and display a message if the pointers are not the same.

Reference is now made to which is a simplified conceptual illustration of system for model driven application development constructed and operative in accordance with an embodiment of the present invention. In the system of a model generally designated and bounded by dashed lines is shown. Model is typically constructed using a model builder employing any known modeling technology such as the Unified Modeling Language UML that supports classes such as of an enterprise IT infrastructure or other system and associations between the classes. Model is configured to facilitate the automatic generation of one or more resources such as by a resource generator for use by one or more computer executable applications. Such resources may be associated with what is referred to in modeling as the persistence layer which includes schema elements including tables columns foreign keys and indexes or may be associated with the API as is known in the art. Model is divided into a principal model a decoration model and a model map that maps between principal model and decoration model . Principal model is configured to include anything that when added to deleted from or modified within principal model subsequent to automatically generating the resources would again require the automatic generation of the resources in order to effect the change for use by an application. Conversely decoration model is configured to include anything that when added to deleted from or modified within decoration model subsequent to automatically generating the resources would not require the automatic generation of the resources in order to effect the change for use by an application.

Model is preferably stored in a model storage which may be computer memory magnetic storage or any other suitable information storage medium. Model may be stored in storage in any suitable format such as in a relational database RDB or object oriented database OODB . Any of the elements shown in are preferably executed by or otherwise accessible to a computer .

Principal model preferably includes elements for storing decoration model such as a via DecorationModel class representing a package of the items in decoration model . There is preferably one model partition per package and each decoration model is preferably serialized such as an XML document.

Reference is now made to which is a simplified illustration of an exemplary implementation of model of constructed and operative in accordance with an embodiment of the present invention. In a principal model is shown having various modeled items. A corresponding item is created in a decoration model for one or more of the items in principal model . One or more items may then be attached to any of the items in decoration model rather than in principal model where their addition to modification in and or subsequent deletion from decoration model will not require that resources that were previously automatically generated using principal model be subsequently regenerated due to the addition modification and or deletion. Direct association links are preferably used for navigating from items in decoration model to items in principal model whereas a model map is preferably used for navigating in the opposite direction.

Reference is now made to which is a simplified illustration of an exemplary implementation of decoration model of constructed and operative in accordance with an embodiment of the present invention. In a decoration model is shown for aspects of a GUI interface in which classes and associations attributes are decorated by detailed GUI presentation definitions such as where there is one per user role application service level constraints and analysis logic definitions. For the sake of clarity DPackage and DPackageGuiDef are not shown. DClass and DStructuralFeature are shown having been generated for each corresponding EClass EStructuralFeature of a corresponding principal model. Instantiation of various concepts may be optional in a given decoration model such as where a DClass has no DClassGuiDef for a certain UserRole and will therefore be invisible in the GUI layer for a user with that role.

Items in the decoration model of may be created edited and deleted without affecting a related principal model and without requiring regeneration of resources defined by the principal model. For example a user may set a different display name for a class or attribute in the decoration model although DClass and DStructuralFeature items in the decoration model that correspond to EClass EStructuralFeature items in the principal model ought not be deleted.

The following guidelines may be employed when deciding what model items should be included in a principal model and what model items should be included in a decoration model. Model items that generally have and should have impact on resources that are generated based on a model should be included in a principal model whereas model items that generally do not or should not have impact on resources that are generated based on a model should be included in a decoration model. Model builder may be configured to recognize model items that do not impact generated resources and automatically place such items into a decoration model. These guidelines may be understood by way of example with regard to the persistence layer of an application environment in which database schema and an O R mapping are generated using a model. In this example model items that do not impact the generation of these resources include annotations that control display and business logic and thus these items may be included within a decoration model. Model items that do impact the generation of these resources include classes references attributes and annotations that control aspects of the persistence layer such as indexes. Some model items may be included within a decoration model although they would otherwise impact resource generation such as classes references and attributes whose instances or values can be derived from other data. Thus for example where the attribute Person.fullName can be derived from Person.firstName and Person.lastName the derived attribute may be included within a principal model such as where the attribute values for Person.fullName are meant to be stored in a database. The responsibility to insert and update the values for Person.fullName would lie with the applications that populate Person data. Although including Person.fullName in a principal model may be convenient for authors of reporting applications doing so results in data redundancy performance costs owing to insertion time and table size as well as the need to regenerate the schema and upgrade instances when the name or type of Person.fullName is changed. Alternatively by placing Person.fullName in a decoration model the responsibility for calculating the values for Person.fullName lies with applications that retrieve Person data.

Reference is now made to which is a simplified flowchart of an exemplary method of using a decoration model in an application environment operative in accordance with an embodiment of the present invention. In the method of once model of has been prepared and its principal model used to generate resources as described hereinabove the decoration model is read from where it is stored and is instantiated for use by one or more computer executable applications steps such as may be hosted by computer . When an application wishes to access an instance EObject of an item of the principal model step if the item has a corresponding item in the decoration model step the application accesses the corresponding instance DObject of the decoration model step instead of the EObject step . Calls to methods that are defined in EObject step are passed through to EObject step while calls to methods that are defined in DObject are handled by DObject step . For example getRepresentationQ String will return a representation based on which attribute is defined as representation attribute of the corresponding DObject s class in the decoration model.

Reference is now made to which is a simplified flowchart of an exemplary method of hot deploying decoration model changes operative in accordance with an embodiment of the present invention. In the method of once model of has been prepared and its principal model has been used to generate resources as described hereinabove the decoration model is read from where it is stored and is instantiated for use by one or more computer executable applications step such as may be hosted by computer . The instantiated decoration model is preferably made globally accessible step . For each request by an application to access an object associated with either the principal model or the decoration model step a new thread is preferably created to handle the request step . The decoration model is preferably assigned to a thread local variable in the new thread step and all thread internal code function calls to access the decoration model do so via the thread local variable of its thread step . Changes may be made to the decoration model step while applications that use the model are executed. The decoration model changes may be committed without impacting currently running applications since the previously instantiated decoration model was globally accessible and was reused by all request threads prior to the changes being made. The changed decoration model may be made available to new threads by starting a new thread that reads the changed decoration model instantiates the changed decoration model and deserializes it into its own thread local variable step . This may be done without affecting other currently running threads. The globally accessible decoration model may then be replaced by the changed model step . This is preferably done using synchronization and isolation techniques where new incoming requests are forced to wait until the globally accessible decoration model is replaced. Thereafter all new requests will have the new decoration model assigned to their thread local variable. Older requests that are still running using the old decoration model need not be disrupted and may return and present results according to the older decoration model in their thread local variable. Users may be warned when a model change occurs by checking for pointer equality between a thread local variable and the globally accessible decoration model during the post processing of a request. If the pointers are not the same a warning may be displayed recommending that the user resubmit the request. If the server hosting the applications is restarted at any point after the decoration model is changed the changed decoration model will preferably be in effect for all new and restarted applications.

Any of the elements and steps described hereinabove are preferably executed by or otherwise accessible to computer having been configured for such purpose.

It is appreciated that one or more of the steps of any of the methods described herein may be omitted or carried out in a different order than that shown without departing from the true spirit and scope of the invention.

While the methods and apparatus disclosed herein may or may not have been described with reference to specific computer hardware or software it is appreciated that the methods and apparatus described herein may be readily implemented in computer hardware or software using conventional techniques.

While the present invention has been described with reference to one or more specific embodiments the description is intended to be illustrative of the invention as a whole and is not to be construed as limiting the invention to the embodiments shown. It is appreciated that various modifications may occur to those skilled in the art that while not specifically shown herein are nevertheless within the true spirit and scope of the invention.

