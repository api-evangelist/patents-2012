---

title: Event service for local client applications through local server
abstract: In server/client architectures, the server application and client applications are often developed in different languages and execute in different environments specialized for the different contexts of each application (e.g., low-level, performant, platform-specialized, and stateless instructions on the server, and high-level, flexible, platform-agnostic, and stateful languages on the client) and are often executed on different devices. Convergence of these environments (e.g., server-side JavaScript using Node.js) enables the provision of a server that services client applications executing on the same device. The local server may monitor local events occurring on the device, and may execute one or more server scripts associated with particular local events on behalf of local clients subscribing to the local event (e.g., via a subscription model). These techniques may enable development of local event services in the same language and environment as client applications, and the use of server-side code in the provision of local event service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09363334&OS=09363334&RS=09363334
owner: Microsoft Technology Licensing, LLC
number: 09363334
owner_city: Redmond
owner_country: US
publication_date: 20121011
---
Within the field of computing many scenarios involve a server client architecture for enabling execution of an application on the client. As a first example a webserver device may provide instructions and or content comprising a web application to a second device for execution within a web browser. As a second example an application store may provide instructions comprising a deployable local application that may execute entirely on a second device. As a third example a database server may provide data to facilitate the execution of an application on a second device.

In view of these and other scenarios the server client architecture has led to specialized technologies executing on each device. In some cases such specialization leads to directly opposite development in view of the different circumstances of the server and the client. For example the server device often involves code specialized for the server context such as concurrently executing applications on behalf of several clients fulfilling requests in a performable and scalable matter e.g. executing highly optimized code in order to expedite fulfillment of requests and the reduction or elimination of reliance on a user interface reducing stateful interactions where the server stores data associated with a first transaction in order to fulfill a second transaction and validating and isolating the execution contexts of requests received from different clients in order to reduce security vulnerabilities. Similarly the client device often involves code specialized for the client context such as the encoding of instructions in a platform agnostic language that does not depend on a particular device configuration the configuration of instructions to execute within a web browser the provision of a robust user interface and the storage of information on the client e.g. in the form of cookies stored in a web browser cache in order to persist information from a first transaction in furtherance of a second transaction. In these and other ways the specialization of the server and client contexts has led to very different types of instructions executing on these different devices.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

While the divergent specialization of the server and client contexts has facilitated the performance of each type of device such divergence causes various difficulties. As one such example if the server executes one type of code e.g. instructions that are particularly configured for the capabilities of the server and the client executes a second type of code e.g. flexible and platform agnostic instructions that may execute equivalently on many devices such differences may complicate the interoperative development of a server application and a client application due to differences in the languages application programming interfaces APIs and data standards. Additionally developers have to understand two different languages and execution environments and techniques for converting data types and objects exchanged therebetween. As a result recent developments have involved convergence in the development of these environments such as the development and popularity of the Node.js model involving server side JavaScript code with language constructs and APIs specialized for the server context thus enabling the development of server code and client code in the same language and sharing APIs and data types. However such convergent server and client development environments are typically applied in the interaction of a server application executing on a server device and client applications executing on one or more client devices.

Presented herein are techniques for applying convergent server and client development environments for use on a single device. In particular such techniques may enable a device to perform processing related to local events on behalf of a client application executing on the device through a local server provided on the same device. For example the device may execute a local server such as a webserver configured to monitor local device events and to accept requests by client applications on the same device to subscribe to one or more local events. The local server may also associate one or more server scripts and upon detecting an occurrence of a local event to which a client application is subscribed the local server may execute the server script s associated with the local event on behalf of the local device.

For example the local event may comprise a mobile event such as an incoming voice communication session and a client application may request some particular processing for the voice communication session such as recording the session. However client applications executing on a mobile device may not be executing at the time of the incoming voice communication session and thus may not be monitoring the occurrence of such a local event. Alternatively the security model of a mobile device may ordinarily prohibit client applications from interacting with such local events as a security or quality of service measure e.g. the local application may be executing within an isolation construct of the device such as within a web browser . Rather and according to the techniques presented herein the client application may issue to a local server on the same device executing continuously and outside of the web browser a subscription request identifying the incoming voice communication session local event. Upon detecting such an event the local server may execute one or more server scripts relating to the local event on behalf of the client application. Moreover the server script may be designed in a similar development environment as the client application e.g. both the server script and the local client application may be written in JavaScript where the server script utilizes a Node.js server side API thus facilitating development of these interactive applications in a consistent and compatible manner. Such advantages may be achievable through the variations of the server client architecture presented herein.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to facilitate describing the claimed subject matter.

Within the field of computing many scenarios involve a server client architecture comprising a server application e.g. a webserver providing one or more services on behalf of one or more client applications. As a first example the service many include the provision of web content including web pages and web applications to be rendered within a web browser of a client device. As a second example the service may include an application store configured to store a set of applications executable on various devices and to provide a particular device with one or more applications that may be executed thereupon. As a third example the service may include the storage of data e.g. in a database and the provision of such data for use within various data driven applications executing on respective client devices. In the traditional model a server application runs as a resident process of a device to await a connection initiated by a client application receives requests by the client application and fulfills such requests in order to provide the service to the client application.

In many such scenarios the server application executes on a server device and the client application executes on one or more client devices. The devices may present different capabilities suitable for each role. For example the client device may comprise a user oriented device e.g. a workstation laptop tablet mobile phone or other appliance executing the client application on behalf of a user and may be specialized for such interactions e.g. including touch capable input devices and high quality display and sound components . By contrast the server device may comprise a service oriented device e.g. a headless server component lacking a dedicated display component and may be specialized for the satisfaction of service requests in a highly performant manner e.g. having high throughout processors a large capacity data cache and abundant network resources . The server device may comprise several server devices interoperating in the manner of a server farm. That is the client devices may be configured to provide an appealing user experience while the server devices may be configured to expedite the handling of service requests and the reliability of such devices e.g. through failover capabilities provided in a server farm .

In view of these and other considerations the techniques for developing server applications have typically differed in several notable respects from techniques for developing client applications. As a first example client applications are often devised to execute on a wide variety of client devices and may therefore be developed in a platform agnostic language e.g. JavaScript which is capable of executing within any web browser . By contrast server applications are often developed using development techniques that are highly tuned and customized for the particular configuration of the server in order to promote performance. As a second example client applications may be devised as stateful i.e. persisting some information about a first request issued by a client application to the server in order to provide context and continuity for a second request issued by the client application to the server device. For example web browsers are often configured to store cookies on the user s machine to enable a server to identify the client device again later. By contrast server applications are often devised in a stateless manner whereby data stored about any particular first transaction is reduced in order to raise the scalability of the server application when fulfilling on behalf of many client applications.

As a particular example the server application may be provided to notify client applications and or client devices of server events detected by the server device such as the receipt of new data by the server device or the monitoring of local environmental conditions e.g. weather monitoring or images captured of an environment in which the server device is positioned . The client application may request notification of such server events and upon detecting a server event the server application may send a server event notification to the client application . Additionally the client device may monitor client device events such as user input received from the user or an input component and may execute client device event monitoring to detect and report such services. For example the client device may include a hardware driver that is configured to monitor hardware events and to provide client device event notifications reporting such hardware events to client applications . In this manner the server application and the client application executing in different roles and on different devices may interoperate to inform the client application of the server events detected by the server application and the client device events detected by the client device event monitoring .

However the architecture presented in the exemplary scenario of may present some disadvantages. In particular the development of the server application in view of the specialized properties of the server device may significantly differ from the development of the client application in a generalized manner language for a variety of devices. Due to the different development environments and languages developers may have to understand both development environments and negotiate the differences for the interoperation of the server application and the client application e.g. contending with differences in available application programming environments APIs and data format conversion . In order to reconcile such differences more recent server application development models have converged with client application development to provide consistency in the development of such interoperating applications. As a first example JavaScript has traditionally been regarded as inadequately performant for server applications but the widespread familiarity with JavaScript among the development community has led to the development of Node.js a JavaScript module providing server side execution of JavaScript code. As a second example techniques have been devised to enable servers to execute higher level languages such as JavaScript in a more performant manner e.g. by compiling JavaScript into native code that may execute faster on the server device . Developers may therefore use the same language and similar APIs to develop both server applications and client applications . In view of such convergent technologies techniques may be devised to utilize server side code in new scenarios.

Presented herein is one such scenario wherein a server application may provide services related to client device events associated with a client device . In particular a server application may execute on a device to provide local event related services to one or more client applications executing on the same device. For example a traditional webserver may execute passively but continuously on the client device and may await requests for local event services initiated by one or more local client web applications executing within a web browser on the same client device . Such requests may include e.g. notifying the client device of local events or applying some processing related to the local event on behalf of the client application . By enabling the server application to monitor such client device events and to apply execution to the device events this model may offload this monitoring and computational burden from client applications which may execute in a highly interactive ad hoc manner at the request of the user e.g. monitoring and handling of client device events may continue even after the client application is terminated by the user . Additionally this model may enable the interaction of the server application with client device events where such interactions may not be permitted by the client application . For example the client application may execute within a web browser that isolates the client application from local client device events for security reasons however the client application may request the server application executing outside the web browser and with a greater set of permitted capabilities to interact with the client device events in verifiable and trusted ways.

The architectural model presented in the exemplary scenario of may enable various advantages with respect to other local event processing models. As a first example this architecture may enables the server application to perform the continuous background monitoring of the local events and the execution of trusted server scripts providing trusted processing of the local events while the untrusted client application may be executed intermittently and in an untrusted manner e.g. within the isolation construct of a web browser . As a second example providing one server application to monitor a wide range of local events and to apply processing thereto may be more efficient than configuring each of several client applications to monitor the same set of local events . As a third example the server scripts may be developed in a similar development environment as the client applications e.g. the server script may utilize the Node.js JavaScript server side programming model and the client application may be developed as client side JavaScript executing within the web browser of the client device . For example the local events may include events that client applications are often not permitted to process directly such as low level hardware events or events arising within different processes of the client device from which the client application is prohibited from interacting. As a fourth example by processing information on the same user device rather than sending the information as an invocation of a service on a remote device these techniques promote the isolation of information that the user may not wish to disseminate such as information that is personal to the user e.g. the user s identity and location and or security information e.g. passwords . As a fifth example the programming scenario of applications to be executed by a server in service of client applications executing on the same device may provide a novel computing scenario and may enable the development of a new market around such applications. These and other advantages may be achievable through the architecture illustrated in the exemplary scenario of and techniques presented herein.

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to apply the techniques presented herein. Such computer readable media may include e.g. computer readable storage media involving a tangible device such as a memory semiconductor e.g. a semiconductor utilizing static random access memory SRAM dynamic random access memory DRAM and or synchronous dynamic random access memory SDRAM technologies a platter of a hard disk drive a flash memory device or a magnetic or optical disc such as a CD R DVD R or floppy disc encoding a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein. Such computer readable media may also include as a class of technologies that are distinct from computer readable storage media various types of communications media such as a signal that may be propagated through various physical phenomena e.g. an electromagnetic signal a sound wave signal or an optical signal and in various wired scenarios e.g. via an Ethernet or fiber optic cable and or wireless scenarios e.g. a wireless local area network WLAN such as WiFi a personal area network PAN such as Bluetooth or a cellular or radio network and which encodes a set of computer readable instructions that when executed by a processor of a device cause the device to implement the techniques presented herein.

An exemplary computer readable medium that may be devised in these ways is illustrated in wherein the implementation comprises a computer readable medium e.g. a CD R DVD R or a platter of a hard disk drive on which is encoded computer readable data . This computer readable data in turn comprises a set of computer instructions configured to operate according to the principles set forth herein. In one such embodiment the processor executable instructions may be configured to perform a method of fulfilling requests of client applications related to local events such as the exemplary method of . In another such embodiment the processor executable instructions may be configured to implement a system for fulfilling requests of client applications related to local events such as the exemplary system of . Some embodiments of this computer readable medium may comprise a computer readable storage medium e.g. a hard disk drive an optical disc or a flash memory device that is configured to store processor executable instructions configured in this manner. Many such computer readable media may be devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

The techniques discussed herein may be devised with variations in many aspects and some variations may present additional advantages and or reduce disadvantages with respect to other variations of these and other techniques. Moreover some variations may be implemented in combination and some combinations may feature additional advantages and or reduced disadvantages through synergistic cooperation. The variations may be incorporated in various embodiments e.g. the exemplary method of and the exemplary system of to confer individual and or synergistic advantages upon such embodiments.

A first aspect that may vary among embodiments of these techniques relates to the scenarios wherein such techniques may be utilized.

As a first variation of this first aspect the techniques presented herein may be utilized with many types of device such as servers server farms workstations laptops tablets mobile phones game consoles and network appliances. Such devices may also provide a variety of computing components such as wired or wireless communications devices human input devices such as keyboards mice touchpads touch sensitive displays microphones and gesture based input components automated input devices such as still or motion cameras global positioning service GPS devices and other sensors output devices such as displays and speakers and communication devices such as wired and or wireless network components.

As a second variation of this first aspect the techniques presented herein may be utilized with various types of server applications such as webservers file servers application servers media servers peer to peer sharing coordination servers database servers email servers physical metric monitoring servers and supervisory control and data acquisition SCADA automation servers.

As a third variation of this first aspect the techniques presented herein may be utilized to service many types of client applications such as web browsers file sharing applications media rendering applications and data driven client applications. Moreover the client applications may execute in various contexts such as native execution on the device managed execution facilitated by one or more managing runtimes virtual execution within a virtual environment such as a web application executing within a web browser and isolated execution within an isolation construct. Such client applications may also be received by the device through various techniques such as client applications bundled with the device client applications retrieved from various services such as an application server provided by the network content embedded in a web page a hardware or software driver provided by a component of the device or a client application provided by the server application . These and other scenarios may be compatible with and may advantageously utilize the techniques presented herein.

A second aspect that may vary among embodiments of the techniques presented herein involves the types of local events that may be monitored by the server application and the types of server scripts that the server application may execute on behalf of one or more client applications upon the occurrence of such local events .

As a first variation of this second aspect the techniques presented herein may pertain to the monitoring of many types of local events on the device such as local input events involving a receipt of local input by an input component of the device a local user event indicating a detection of the presence of identity of or an interaction received from a local user by a detector component of the device a local processing event indicating a completion of a local data processing instance by the device or an event subscription request directed to the server application by a client application . As one such example the local event may comprise a local application event arising during execution of a third application on the device other than the server application and the client application such as a hardware driver an operating system component another server application or another client application . The server application may therefore monitor the execution of the third application on the device to detect the occurrence of the local application event e.g. an instantiation of the third application a suspension completion or termination of the third application or a logical exception arising within the third application and may execute one or more server scripts associated with the local application event. Moreover the third application may define one or more application specific events that are custom to the third application and the server application may associate one or more server scripts with the application specific events for execution on behalf of another client application .

As a second variation of this second aspect the server scripts may specify many types of processing relating to the local event such as reporting the local event to the client application logging the occurrence of the local event or applying additional logic during the handling of the local event . Additionally the server scripts may be received from many sources e.g. the server script may be included with the server application may be provided by a user may be provided with and or automatically generated by the device or may be received from the client application or an outside source. Moreover the server application may be configured to notify the client application upon completion of the server script . For example the event subscription request provided by the client application may specify an application callback to be invoked upon detecting the local event and or upon completing execution of the server script s associated with the local event .

As a third variation of this second aspect the techniques presented herein may involve the execution of many types of server scripts . As a first example of this third variation such server scripts may be designed using a variety of technologies including server side JavaScript invoking a Node.js module and to be executed by a local webserver.

As a second example of this third variation the server script may involve a blocking request that may interrupt operation of a process of the device . For example the server script may involve complex logic that involves lengthy computation or may involve access to data or resources that are currently exclusively utilized by another process. Such blocking requests may be unsustainable in a client application e.g. a web application that issues a blocking request may be temporarily or indefinitely suspended thus interrupting the user interface and or a web browser containing the web application and or may exceed a processing timeout threshold resulting in termination of the web application . Instead the client application may delegate such blocking requests to the server application wherein the server script specifies the blocking request and or logic to be executed after the blocking request. The server application executing in the background may sustainably execute such blocking requests as a blockable thread without interrupting any foreground process of the device and or may acceptably continue to process the blocking request e.g. awaiting completion of the long running process or availability of resources for an extended duration.

As a third example of this third variation the server script may specify a server script callback to be invoked upon achieving completion of the asynchronous process. The server script callback may be specified by the server script by the server application by the user and or by the client application . As one such example the subscription request of the client application may be associated with a client user interface event e.g. the client application may await some form of input from the user and the client application may specify an application callback to be invoked upon detection of the input. Upon receiving the subscription request the server application may configure or generate a server script to invoke the application callback of the client application and may associate the server script with the local event involving the detection of the user input. The device may the continue execution of the client application including a client user interface event presented therein thus enabling the client application to be notified of the detection of the user input event without having to monitor e.g. via polling input components for such detection. These and other types of local events and or server scripts may be involved in the server client architecture and techniques presented herein.

A third aspect that may vary among embodiments of these techniques involves the manner whereby the server application accepts subscription requests from respective client applications and or executes the server script s associated with a local event on behalf of one or more client applications .

As a first variation of this third aspect the server application may facilitate the subscription of client applications to local events by providing information about the available local events to which the client applications may subscribe. For example upon receiving from the client application a request to identify the set of subscribable local events the server application may enumerate the local events subscribable by the client application . Alternatively the server application may simply maintain a directory of subscribable local events queryable by the client applications .

As a second variation of this third aspect the local server application may identify subscribable local events in many ways. As one such example respective local events may be associated with a local event address e.g. a hypertext transport protocol HTTP address through which client applications may request resources from the local server application . Upon receiving a client request specifying a particular address the local server application may determine whether the address is a local event address that is associated with a subscription request for a local event and if so may handle the client request as an event subscription request initiated by the local client application . As a further such example respective components of the device may be identified by a local event address including a component name of the component and the local client applications may subscribe to local events involving such components by initiating a client request specifying a local event address including the component name of the component.

As a third variation of this third aspect in addition to providing a local server application providing local event subscription services to one or more local client applications the device may also include other applications executing on other devices e.g. extending the local service model provided herein to also include traditional multi device server client architectures . As a first such example the device may enable local client applications to target subscription requests either to a local server application or to a remote server application executing on a remote device. Upon determining that the target of an event subscription request of a local client application is the local server application the device may present the event subscription request to the local server application but upon determining that the target of the event subscription request comprises a remote server application of a remote device the device may forward the subscription request to the remote device. Alternatively or additionally in addition to receiving and servicing event subscription requests provided by local client applications the local server application may receive event subscription requests received from remote client applications of executing on a second device and may fulfill such event subscription requests by upon detecting a local event to which a remote application is subscribed executing one or more server script s associated with and related to the local event on behalf of the remote client application executing on the second device. As one such example it may be highly advantageous to providing local server applications on each of set of devices interoperating as a device mesh where each local server application is configured to service event subscription requests to local events on behalf of local client applications executing locally on the same device as well as remote client applications executing on other devices of the device mesh.

As a fourth variation of this third aspect the device may adjust the execution of the local server application and or the local client application s in a manner that conserves the resources of the device such as a mobile device operating a limited capacity battery and or within low wattage power constraints or a processor that yields higher device performance if processing and or memory are conserved.

As a first example of this fourth variation the local server application may be executed only when event subscription requests are pending from one or more client applications . For example upon receiving an event subscription request the device may determine whether the local server application is executing and if not may invoke execution of the local server application in order to fulfill the event subscription requests . Alternatively or additionally upon detecting an absence of event subscription requests to local events that the local server application is capable of detecting the device may temporarily or indefinitely end execution of the local server application . In this manner the device may operate the local server application in an ad hoc manner and may otherwise conserve the resources of the device when the local server application is not in use.

As a second example of this fourth variation respective processing components of the device may be utilized only when local events have been detected. For example if the local event comprises the processing of user input received through an input component the device may withhold power from the processing component when such local events are not arising. Moreover such processing may be contingent upon the subscription of one or more client applications to the local events associated with the processing component. For example if the device comprises a processing component configured to interpret touch input received through a touch sensitive display component the device may reduce or eliminate power provided to the processing component when the touch sensitive display component is not receiving touch input and optionally further contingent upon whether any client applications are currently configured to receive and process touch input through the touch sensitive display component. Such techniques may facilitate the conservation of device resources such as power processor memory and communications capacity in accordance with the techniques presented herein. These and other variations of the subscription and execution of server scripts may be utilized by the server application on behalf of one or more client applications in response to and associated with the detection of various local events in accordance with the techniques presented herein.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB Firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Moreover the word exemplary is used herein to mean serving as an example instance or illustration. Any aspect or design described herein as exemplary is not necessarily to be construed as advantageous over other aspects or designs. Rather use of the word exemplary is intended to present concepts in a concrete fashion. As used in this application the term or is intended to mean an inclusive or rather than an exclusive or . That is unless specified otherwise or clear from context X employs A or B is intended to mean any of the natural inclusive permutations. That is if X employs A X employs B or X employs both A and B then X employs A or B is satisfied under any of the foregoing instances. In addition the articles a and an as used in this application and the appended claims may generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form.

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application. Furthermore to the extent that the terms includes having has with or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising. 

