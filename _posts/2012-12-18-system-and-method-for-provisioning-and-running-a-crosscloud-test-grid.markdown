---

title: System and method for provisioning and running a cross-cloud test grid
abstract: An automated method for provisioning a grid used to run a load test on a target website includes sending one or more requests in a multi-threaded manner to at least one cloud provider, the one or more requests for an allocation of N load server instances and M result server instances which comprise the grid. Requests received back from the cloud provider are also handled in a multi-threaded manner; any errors occurring during the allocation being corrected automatically. The N load server instances and the M result server instances are then verified to be operational and correctly running software deployed to provide defined test services. Errors identified during the verification are automatically corrected either by attempting to restart a failed instance or allocating a different instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08510600&OS=08510600&RS=08510600
owner: SOASTA, Inc.
number: 08510600
owner_city: Mountain View
owner_country: US
publication_date: 20121218
---
This application is a continuation of application Ser. No. 12 804 317 filed Jul. 19 2010 now U.S. Pat. No. 8 341 462 entitled SMPRC CTG which is assigned to the assignee of the present application.

The present disclosure relates generally to cloud computing more particularly to automated systems and methods for functional and or load testing of websites or features of message based intranet Internet or browser based applications.

Information technology is now routinely used by many enterprises to receive process and provide information via widely accessible electronic communications networks such as the Internet. Yet most information technology systems will begin to deny service or fail to process message traffic efficiently when communications traffic exceeds a processing capacity of the system. Such failures in communication can significantly impair the operations of an enterprise in many ways. Slower website performance is also known to cause users visitors to leave the website sooner. Another consequence of poor performance is that the website may be downgraded in search engine results rankings.

In recent years enterprises and developers have sought an easy and affordable way to use cloud computing as a way to load and performance test their web based applications. Cloud computing gets its name from the fact that the machine storage and application resources exist on a cloud of servers. In cloud computing shared resources software and information are provided on demand like a public utility via the Internet. Cloud computing is closely related to grid computing which refers to the concept of interconnecting networked computers such that processing power memory and data storage are all community resources that authorized users can utilize for specific tasks.

By way of example a company that provides online tax preparation services to customers who wish to file their tax returns electronically may want to test the reliability of their website to uncover potential reliability and performance problems well before April 14and 15when traffic volumes spike as customers rush to meet the filing deadline. Replicating anticipated user load for a business website traditionally requires hours and hours of error prone manual allocation and deployment of machine instances comprising the grid utilized for the test. In addition the user often is required to deal with different tools that each cloud provider provides to allocate the servers and then deploy the user s proprietary software thereon. Once allocated the user also needs to recover from the percentage of servers which are non operational upon delivery as well as those that do not respond even after the software product has been deployed on them. All of this tedious time consuming and error prone work has to be completed before each test can be run.

In the following description specific details are set forth such as server types cloud providers structural features process steps etc. in order to provide a thorough understanding of the subject matter disclosed herein. However persons having ordinary skill in the relevant arts will appreciate that these specific details may not be needed to practice the present invention. It should also be understood that the elements in the FIG.s are representational and are not drawn to scale in the interest of clarity.

References throughout this description to one embodiment an embodiment one example or an example means that a particular feature structure or characteristic described in connection with the embodiment or example is included in at least one embodiment. The phrases in one embodiment in an embodiment one example or an example in various places throughout this description are not necessarily all referring to the same embodiment or example. Furthermore the particular features structures or characteristics may be combined in any suitable combinations and or sub combinations in one or more embodiments or examples.

In the context of the present application the term cloud broadly refers to a collection of machine instances storage and or network devices that work together in concert. A public cloud refers to a cloud that is publicly available i.e. provided by a cloud provider that a user may access via the Internet in order to allocate cloud resources for the purpose of utilizing or deploying software programs and also for running or executing those programs thereon. Some public clouds deliver cloud infrastructure services or Infrastructure as a Service IaaS . By way of example Amazon Elastic Compute Cloud also known as EC2 is a web service that allows users to rent computers on which to run their own computer applications thereby allowing scalable deployment of applications through which a user can create a virtual machine commonly known as an instance containing any software desired. The term elastic refers to the fact that user can create launch and terminate server instances as needed paying by the hour for active servers.

Cloud platform services or Platform as a Service PaaS deliver a computing platform and or solution stack as a service. An example PaaS cloud provider is the Google App Engine which lets anyone build applications on Google s scalable infrastructure. Another leading software platform in the cloud provider is Microsoft Azure an application platform in the cloud that allows applications to be hosted and run at Microsoft datacenters.

A private cloud is a cloud that is not generally available to the public and which is typically located behind a firewall of a business. Thus a private cloud is only available as a platform for users of that business who are behind the firewall.

The term server broadly refers to any combination of hardware or software embodied in a computer i.e. a machine instance designed to provide services to client devices or processes. A server therefore can refer to a computer that runs a server operating system and is provided to the user as virtualized or non virtualized server it can also refer to any software or dedicated hardware capable of providing computing services.

In the context of the present disclosure load servers also referred to as Maestro or test servers are servers deployed and utilized primarily to generate a test load on a target website. That is load servers play the test composition generating a load on a target customer website and web applications. Load servers also function to report back results of the load test and statistics in real time. Analytic or result servers are deployed and utilized primarily to collect the real time test results from the load servers aggregate those results and store them in a database.

The term real time refers to a level of computer responsiveness that a user senses as sufficiently immediate or that enables the computer to keep up with some external process for example to present visualizations of load test results as it constantly changes . Thus real time is a mode of computer operation in which the computer collects data analyzes or computes with the data reports e.g. visually displays and or stores the results nearly simultaneously i.e. within milliseconds or microseconds.

In one embodiment a computer enabled method or computer program is provided that automatically allocates and deploys N servers on M clouds where N and M are positive integers to create a grid comprising a collection of interconnected load servers and result servers that may then be used to run a load test on a target website or web applications. The computer program disclosed herein automatically determines the global cross cloud resources needed to execute a test by examining the test plan or script also referred to as a test composition .

Furthermore the computer program automatically allocates those server resources required for the test across multiple different cloud providers verifies that the allocated servers are operational and that the allocated servers are running proprietary load testing software or computer program product correctly. In a specific embodiment the computer program or product also monitors the allocated servers replacing non operational servers when allocated and during execution of the test and displays results from multiple globally distributed clouds in a real time streaming dashboard which requires no user initiated refresh. Thus instead of spending hours on the tedious task of manually getting a test environment up and running utilizing the architecture and automated methods described herein the same result may typically be achieved in approximately ten minutes or less without any human intervention required.

Target website is shown connected to a public cloud via Internet cloud . Public cloud includes a main instance coupled to a database . Database may be used to store test results store metadata indicative of the test definition and to store monitoring data e.g. CPU metrics generated during the load test. Main instance is also shown coupled to a pair of analytic servers and a pair of load servers within cloud consistent with a snapshot view of the start of a process of deploying a test grid. It is appreciated that cloud may comprise multiple clouds associated with multiple different cloud providers. In the example shown main instance is a virtual machine deployed on a server provided in cloud that communicates with a browser application. In one embodiment main instance may include a results service designated as a reader results service as opposed to all of the other remote writer results services which reads data from database and serves it to a web application which in turn formats the data and serves it to an analytic dashboard in the browser. In operation main instance executes the coded sequence of computer executed steps that allocates the server resources required for the test across one or multiple different cloud providers. The same application that allocates verifies server resources may also verify that the allocated servers are operational to conduct the website load test.

Connected to the front end of cloud through Internet cloud is a laptop computer associated with a user who may orchestrate deployment of the test of target website . It is appreciated that in other implementations computer may comprise a desktop computer workstation or other computing device that provides a user interface that allows a user to create and execute the test composition define the parameters of the grid initiate the load test as well as analyze review results of the test in real time. The user interface may be web based so it can be accessed from any computer having web browser capabilities from any location in the world without installation of specialized software. In other words the computer includes an external interface that connects with another computing device via Internet cloud .

Persons of skill in the art will understand that the software which implements main instance may also be downloaded to the user s laptop computer or implemented on a separate hardware appliance unit located either at the user s premises e.g. behind the firewall or anywhere in clouds or . It is further appreciated that laptop is representative of a wide variety of computer devices such as workstations personal computers distributed computer systems etc. that may be utilized by the user to launch the method for provisioning running the cross CloudTest grid analyzing streaming real time results as well as monitoring the performance of the actual load test. In other words a user of computer may input one or more commands using a graphical user interface that generates output to main instance via an external interface that connects with main instance the output causing main instance to perform the functions described herein.

Continuing with the example of the application program running on main instance operates to create a graphical user interface GUI that allows a user of laptop to remotely interact with the application view monitor the test results in real time and modify parameters test conditions dynamically during the actual test. For purposes of the present disclosure the grid wizard is considered synonymous with the application program or system program that performs the method and operations described herein. In one embodiment main instance may include an embedded load server for running a relatively small load test that does not require the deployment of other load servers and an embedded results i.e. analytic server for collecting aggregating the real time test results. In another embodiment the main instance and the database provide a basic CloudTest environment that can be used to launch establish one or more grids with more or more cloud providers being utilized to provision each grid.

The overall testing process begins with the user creating a sophisticated test plan or composition via a GUI of either the same application program running on main instance or a GUI associated with another web browser application. The GUI may be utilized that generate complex parallel message streams for website testing. In one example the test plan may be created in the form of a visual message composition analogous to a music composition for testing and demonstrating web services such as that described in U.S. patent application Ser. No. 11 503 580 filed Aug. 14 2006 which application is herein incorporated by reference.

The process of deploying the test grid for a large scale test may start with the user of laptop indicating to main instance the number of virtual users wanted on each track of the test composition. For example the user of the system may wish test the target website with a load equal to 1000 users on each track of a test composition. The user may indicate the number of virtual users through an input entered on a browser page of the GUI as described below or alternatively invoke a grid wizard that automatically makes an intelligent allocation of the proper amount of resources needed to conduct the test based on examining the composition that this grid will be running. By way of example the system may determine that a single load server should be allocated to accommodate every 1000 virtual users.

Similarly the system via a grid wizard may determine a proper allocation of result servers needed to accommodate the number of load servers specified. In one embodiment users can specify how many load servers and how many result servers they want in each cloud and region. Alternatively users may employ the grid wizard to specify all parameters. That is users can simply specify a defined test composition and the grid wizard automatically analyzes the composition and determines how many servers they need in each cloud and region. It is appreciated that the determination of the number of load servers and result servers is typically made based on considerations that ensure each virtual user has a satisfactory amount of bandwidth CPU memory resources etc. such that it correctly simulates or behaves as a real world browser.

Once the test has been defined and the parameters set e.g. number of servers server locations etc. via the grid wizard upon user input the user main instance starts the process of actually deploying and allocating the specified resources by interacting with an application programming interface API of one or more cloud providers. By way of example a user may click on a Deploy Instances button provided in a page of the CloudTest program GUI in response the system software contacts all of the different cloud APIs it needs and starts to allocate the required servers.

For example if 1000 servers are to be allocated in EC2 there may be 40 simultaneous requests issued each request being for 25 servers. If another 200 servers need to be allocated in Microsoft Azure in two different geographically located data centers two simultaneous requests may be issued each for 100 servers in each data center due to the fact that Azure does not support allocating smaller groups into one single deployment . In other words the user may simply click on an icon button of a GUI to initiate the deployment allocation of resources e.g. machine instances needed to execute the test composition with the requests necessary to achieve that allocation being issued handled in an automated manner i.e. without user intervention.

In the embodiment shown progress bar shows the percentage allocation of load server instances in real time to the user during the allocation process. Similarly progress bar shows the percentage allocation of result server instances in real time to the user. If there are any errors during allocation the grid wizard program operates to retry to obtain these failed instances. The number of retires is a parameter that may be specified by the user in the grid wizard. Alternatively a default retry number may be used. After successfully allocating the servers the CloudTest program automatically deploys load servers and analytic servers on the grid.

Any time during the process a user may click on Stop Deploying button to temporarily halt the deployment of server instances that make up the grid. Clicking on Tear Down Instances button to 70 server instances previously allocated thereby allowing the user to start the deployment allocation process over from the beginning. Button opens a new page or window of the user interface that provides the user with advanced setting options. For example using the advanced settings button and user may define the number of times the grid wizard will retry a server allocation that has failed.

The program also operates to replace non operational instances automatically without user intervention. That is in the event that any errors occur during allocation and checking of the service instances the grid wizard automatically self corrects the error to insure that the resulting cross cloud grid is fully operational and ready to run the test composition on the target website. The user can monitor all this happening in real time by viewing fields and of web browser page .

As can be seen check server field provides a text listing of the check status each instance deployed in the grid as it happens in real time. In one implementation progress bar and of the grid wizard graphically show to the user in real time the percentage of servers that have been successfully allocated and successfully checked using different respective colors. For example once the grid is fully allocated the user may see that progress bar and are fully blue. After each of the instances has been checked the user may see t that progress bar and are fully green.

Practitioners in the art will appreciate that the CloudTest program described herein advantageously saves many hours of error prone manual allocation and error recovery to the user. Moreover instead of dealing with different tools that each cloud provider provides to allocate the servers manually then recover from the percentage of them which are non operational and from the ones that do not respond even after the product is deployed on them the CloudTest program grid wizard automatically allocates fixes errors and checks each server instance to make sure that the grid is ready for the user run the load test on the target website. After the grid is ready and the composition is running on it users can focus on viewing analyzing and monitoring the test results information in real time so as to help identify the root cause of performance problems their website or web application may be experiencing.

One of the ways that the CloudTest program is able to allocate and check such a massive amount of resources in such a short amount of time as compared with prior art methods is through the use of a multi threaded software architecture. In the context of the present disclosure a thread refers to information associated with a single individual computing task process or a particular service request. The CloudTest computer program implements multi threading meaning that it is configured to execute multiple threads all in parallel thereby allowing the program to execute many actions at one time.

In the multi threaded architecture used to provision a cross cloud grid there may be a large number of threads populating a thread pool which concurrently issues requests for all blocks to cross cloud providers at the same time. By way of example to provision 1 250 servers 25 requests each request being for a block of 25 servers may be sent in parallel to Amazon EC2 at the same time 25 similar requests may be sent in parallel to Microsoft Azure. Since each thread takes about the same amount of time to process it becomes equally fast to provision 5 servers as it does to provision 1 250 servers. Furthermore each response to every request is also handled in a multi threaded manner. For instance an error response may be received back indicative of insufficient capacity. That error is placed back in the thread pool as a new thread e.g. a re try allocation task.

Thus the complex process of establishing a test grid which involves allocating server resources for a particular test grid across multiple different cloud providers verifying that the allocated servers are running correctly and handling responding to errors that inevitably occur is all coded as a plurality of multiple threads. This means that the CloudTest program is capable of allocating a grid of 100 servers or a grid of 100 000 servers at the same time as long as those server resources are available from the cloud providers it is working with.

Continuing with the example of description field optionally allows the user to enter a brief description of the grid. The user may also specify a location where the grid meta data and parameter settings for the named grid are to be stored using save location field in conjunction with Browse button .

As shown window of includes a set of boxes that permit the user to input parameters that include allocation block size e.g. allocate 25 servers at a time pending timeout i.e. the time that a server remains in a pending state before the system considers it failed allocation failure retry count the number of times the system will try to boot one or more servers and allocation failure retry delay the time the system pauses before retry . Another a set of boxes permit the user to input parameters a check server failure retry count and a check server failure retry delay. As discussed previously after the cloud provider hands a machine off to the CloudTest program a check is performed to ensure that the proprietary system software loaded on the cloud machine is running correctly. Check service boxes thus allow input for retry counts and retry delay for the process of determining that each allocated server is executing the loaded software properly.

In addition the user may check boxes to automatically monitor the grid automatically delete monitors and check servers automatically during the running of the test composition. Once the grid has been fully provisioned and checked to make sure that it is running properly the user may open a test composition user interface page to start the actual load test.

It is appreciated that the optional settings described above in conjunction with are normally utilized by highly sophisticated users of the CloudTest provisioning tool. Less sophisticated users typically rely upon default settings implemented or selected automatically by the grid wizard.

Persons of skill in the arts will appreciate that shows how the entire test grid comprising a huge number of interconnected load and result servers works in concert to send load receive responses aggregate and analyze those responses into a real time streaming graphical result displayed to the user. All this is accomplished regardless of how many server instances and different cloud providers are utilized to run the load test. Moreover the various result charts may be viewed in one or many real time streaming dashboards.

During the playback of the test composition and while the user is monitoring viewing the test results displayed on GUI window the user may pause or stop the test. Stopping the test closes the result and unloads the running test composition from all of the load servers. On the other hand pausing or temporarily halting the test stops the load from all of the load servers but keeps the test composition loaded and ready to resume playing into the same result. For instance the user may pause the test after identifying a problem that requires adjustment of the load balancer on the target website. It should be understood that when the test is temporarily halted in this manner the grid remains fully provisioned and running. In other words the composition and running of the load test is independent from the provisioning and running of the grid. After any adjustments or reconfiguration of the target website the user may continue with the execution or playback of the test composition either beginning at the place where it was halted or re starting the test from the beginning. Persons of skill in the art will appreciate that the ability to start re start the test without affecting the state of the grid in conjunction with the ability to view test results metrics in real time e.g. second by second provides a powerful advantage over prior art methods for testing a customer website.

The automated program may also handle the responses received back from the cloud providers to each of the requests sent in a multi threaded manner. Errors are automatically corrected during the allocation process. For example non operational servers may be replaced by sending out a new request. Requests that are not responded to within a prescribed time period may be re tried or abandoned. That is the program automatically obtains a new machine instance to replace any failed instances. In this manner errors that occur during the allocation of server resources are automatically corrected until the allocation is complete block .

Prior to executing the actual load test defined in the test composition each of the resources which make up the grid are checked and verified to be fully operational block . After successfully allocation all of the servers needed for the grid the program automatically deploys the software utilized to provide the appropriate test services on each of the allocated instances. The verification step ensures that this software is running correctly on each of the load and result servers. In the event that any instance fails the verification or check step the automated program may attempt to restart the failed instance or allocate a different instance depending on the error . That is the CloudTest program automatically handles responses and corrects any errors received during the verification step block .

With all of the server instances of the grid up and running the user may optionally begin monitoring of the operational status of all load and analytic result servers block . Doing so provides the user with visibility into the actual load that the test composition is creating on each of those instances. Monitoring the servers which comprise the grid ensures that each remains operational throughout the duration of the test. Any servers that are no longer operational can be promptly replaced.

Once the grid has been fully allocated and checked verified to be up and running correctly the user may start the load test on the target website or website application block . As the test runs the program may provide an analytic dashboard to allow the user to view and analyze the test results in real time block . In other words the automated program allows the user to see cross cloud consolidated results streaming in real time. Just as a dashboard in a car identifies and provides feedback regarding the status of a car an analytic dashboard is a graphical display that provides a user with insights from a large volume of data collected over time. The analytic dashboard provides analytic results metrics that help a customer to better understand the performance of their website or website application. The customer can thus visually see what is happening on their website in real time during the test and identify what changes might be made to improve performance.

It should be understood that elements of the disclosed subject matter may also be provided as a computer program product which may include a machine readable medium having stored thereon instructions which may be used to program a computer e.g. a processor or other electronic device to perform a sequence of operations. Alternatively the operations may be performed by a combination of hardware and software. The machine readable medium may include but is not limited to floppy diskettes optical disks CD ROMs and magneto optical disks ROMs RAMs EPROMs EEPROMs magnet or optical cards or other type of machine readable medium suitable for storing electronic instructions.

Additionally although the present invention has been described in conjunction with specific embodiments numerous modifications and alterations are well within the scope of the present invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

