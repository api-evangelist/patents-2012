---

title: Data de-duplication in service oriented architecture and web services environment
abstract: A mechanism is provided in a data processing system for de-duplication in a Web services environment. Responsive to receiving a signature for a portion of a request message from a client, the mechanism performs a query in a bit stream repository to determine whether the portion of the request message has been previously received. Responsive to determining the portion of the message has been previously received, the mechanism retrieves the portion of the message from the bit stream repository. The mechanism notifies the client that the portion of the message has been previously received such that the client does not send the portion of the message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08838691&OS=08838691&RS=08838691
owner: International Business Machines Corporation
number: 08838691
owner_city: Armonk
owner_country: US
publication_date: 20120629
---
The present application relates generally to an improved data processing apparatus and method and more specifically to mechanisms for data de duplication in a service oriented architecture and Web services environment.

Service Oriented Architecture SOA is a set of principles and methodologies for designing and developing software in the form of interoperable services. These services are well defined business functionalities that are built as software components that can be reused for different purposes. SOA design principles are used during the phases of systems development and integration.

SOA generally provides a way for consumers of services such as web based applications to be aware of available SOA based services. For example several disparate departments within a company may develop and deploy SOA services in different implementation languages their respective clients will benefit from a well defined interface to access them. Extensible markup language XML is often used for interfacing with SOA services though this is not required. SOA defines how to integrate widely disparate applications for a Web based environment and uses multiple implementation platforms. Rather than defining an application programming interface API SOA defines the interface in terms of protocols and functionality. An endpoint is the entry point for such a SOA implementation.

Service orientation requires loose coupling of services with operating systems and other technologies that underlie applications. SOA separates functions into distinct units or services which developers make accessible over a network in order to allow users to combine and reuse them in the production of applications. These services and their corresponding consumers communicate with each other by passing data in a well defined shared format or by coordinating an activity between two or more services.

Simple Object Access Protocol SOAP is a protocol specification for exchanging structured information in the implementation of Web services in computer networks. SOAP relies on XML for its message format and usually relies on other application layer protocols most notably Hypertext Transfer Protocol HTTP and Simple Mail Transfer Protocol SMTP for message negotiation and transmission.

A Web service is a method of communication between two electronic devices over the Internet. A Web service is a software system designed to support interoperable machine to machine interaction over a network. A Web service has an interface described in a machine readable format such as Web Services Description Language WSDL . Other systems interact with the Web service in a manner prescribed by its description using SOAP messages typically conveyed using HTTP with an XML serialization in conjunction with other Web related standards.

In one illustrative embodiment a method in a data processing system is provided for de duplication in a Web services environment. The method comprises responsive to receiving a signature for a portion of a request message from a client performing a query in a bit stream repository to determine whether the portion of the request message has been previously received. The method further comprises responsive to determining the portion of the message has been previously received retrieving the portion of the message from the bit stream repository. The method further comprises notifying the client that the portion of the message has been previously received such that the client does not send the portion of the message.

In other illustrative embodiments a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program when executed on a computing device causes the computing device to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

In yet another illustrative embodiment a system apparatus is provided. The system apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which when executed by the one or more processors cause the one or more processors to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the example embodiments of the present invention.

The illustrative embodiments provide a mechanism for message de duplication in Service Oriented Architecture and Web services environment. A message de duplication handler in a client calculates digital signatures for message bit streams. The client Web service handler may calculate digital signatures according to a pre defined de duplication policy. The client Web service handler adds the signature to the tag bit stream attributes as a unique identifier of the tag bit stream. For large data the client Web service handler may divide the large data into fixed or variable length chunks and calculate a digital signature for each chunk. The client Web service handler negotiates the signature with the server to determine whether the chunk has been previously transmitted. If the chunk has not been previously transmitted the client Web service hander sends the tag bit stream directly. If the chunk has been previously transmitted the client Web service handler ignores the tag bit stream and sends only the signature.

The illustrative embodiments provide a server Web service handler allocates a data session identifier ID to identify a de duplication session and returns the data session ID to the client. For each message or chunk the server Web service handler negotiates the signature with the client to determine whether a tag bit stream for a given signature has already been received and stored in a tag bit stream repository. If the signature is not found in the tag bit stream repository the server Web service handler notifies the client which then sends the tag bit stream. If the signature is found in the tag bit stream the server Web service handler retrieves the tag bit stream from the tag bit stream repository and composes the message.

The illustrative embodiments may be utilized in many different types of data processing environments. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. It should be appreciated that are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the present invention and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

In the depicted example data processing system employs a hub architecture including north bridge and memory controller hub NB MCH and south bridge and input output I O controller hub SB ICH . Processing unit main memory and graphics processor are connected to NB MCH . Graphics processor may be connected to NB MCH through an accelerated graphics port AGP .

In the depicted example local area network LAN adapter connects to SB ICH . Audio adapter keyboard and mouse adapter modem read only memory ROM hard disk drive HDD CD ROM drive universal serial bus USB ports and other communication ports and PCI PCIe devices connect to SB ICH through bus and bus . PCI PCIe devices may include for example Ethernet adapters add in cards and PC cards for notebook computers. PCI uses a card bus controller while PCIe does not. ROM may be for example a flash basic input output system BIOS .

HDD and CD ROM drive connect to SB ICH through bus . HDD and CD ROM drive may use for example an integrated drive electronics IDE or serial advanced technology attachment SATA interface. Super I O SIO device may be connected to SB ICH .

An operating system runs on processing unit . The operating system coordinates and provides control of various components within the data processing system in . As a client the operating system may be a commercially available operating system such as Microsoft Windows 7 Microsoft and Windows are trademarks of Microsoft Corporation in the United States other countries or both . An object oriented programming system such as the Java programming system may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system Java is a trademark of Oracle and or its affiliates. .

As a server data processing system may be for example an IBM eServer System p computer system running the Advanced Interactive Executive AIX operating system or the LINUX operating system IBM eServer System p and AIX are trademarks of International Business Machines Corporation in the United States other countries or both and LINUX is a registered trademark of Linus Torvalds in the United States other countries or both . Data processing system may be a symmetric multiprocessor SMP system including a plurality of processors in processing unit . Alternatively a single processor system may be employed.

Instructions for the operating system the object oriented programming system and applications or programs are located on storage devices such as HDD and may be loaded into main memory for execution by processing unit . The processes for illustrative embodiments of the present invention may be performed by processing unit using computer usable program code which may be located in a memory such as for example main memory ROM or in one or more peripheral devices and for example.

A bus system such as bus or bus as shown in may be comprised of one or more buses. Of course the bus system may be implemented using any type of communication fabric or architecture that provides for a transfer of data between different components or devices attached to the fabric or architecture. A communication unit such as modem or network adapter of may include one or more devices used to transmit and receive data. A memory may be for example main memory ROM or a cache such as found in NB MCH in .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the present invention.

Moreover the data processing system may take the form of any of a number of different data processing systems including client computing devices server computing devices a tablet computer laptop computer telephone or other communication device a personal digital assistant PDA or the like. In some illustrative examples data processing system may be a portable computing device that is configured with flash memory to provide non volatile memory for storing operating system files and or user generated data for example. Essentially data processing system may be any known or later developed data processing system without architectural limitation.

Client machine comprises client application which creates business logic data into request object in its memory space and invokes the client Web service container to generate a request message which may be a SOAP request message in XML. Client Web service container sends request message through network to server Web service container in server machine . Server Web service container picks up request message from network and decomposes request message into request object in the memory address space of server application .

In the reverse sequence server application generates a response object in memory. Server Web service container generates response message from response object and sends response message to network . Client Web service container receives response message form network and decomposes response message into response object in the memory address space of client application .

In business systems the original request message is created and collected from different business units by different people. Server application may detect an error in request message which is in violation of server side business constraint rules. In this kind of error condition because the Web service is a simple request response behavior the SOAP message will be discarded and some error response message is returned to client application to notify of transaction failure. After some corrective actions client application may repackage another request message.

In hospital and insurance company communication for example a treatment audit approval request message may contain computed tomography CT images or magnetic resonance imaging MRI images for reviewing auditing and archiving. The client application creates large request messages and transfers the messages to servers belonging to hospitals and insurance companies.

In accordance with an illustrative embodiment a mechanism is provided to reduce data transfer between the client and the Web service provider. The client Web service container and server Web service container implement de duplication to reduce data stream transfer. The mechanism creates a new function in the Web service containers to reduce data transfer based on XML schema. The mechanism defines container wide data de duplication policy. The mechanism allows dynamic modification of de duplication policy per message with a new de duplication property in the XML tag. The mechanism creates and inserts de duplication functionality using Web service handlers.

Client Web service container comprises client Web service handler which receives original request SOAP message . Client Web service handler calculates a digital signature for the XML tag bit stream of request message . Client Web service handler may use a pre defined digital signature algorithm defined in a de duplication policy . Client Web service handler may add the signature to the request SOAP message tag bit stream as an XML tag attribute uniquely identifying the tag bit stream.

For a request message that contains large data such as a picture or the like client Web service handler may divide the tag bit stream into fixed or variable length chunks and calculate a signature for each chunk. Client Web service handler may use a specified chunk algorithm defined in de duplication policy .

For a tag not defined in the de duplication policy client Web service handler sends the request SOAP message tag bit stream to server Web service handler .

Client Web service handler receives a data session identifier ID from server Web service handler . The data session ID identifies the session of de duplication service and server Web service handler uses the data session ID to narrow the query for de duplication. Client Web service handler calculates a signature for each tag bit stream or chunk. Signature algorithms such as hash functions have the potential to result in collisions where multiple input data can have the same resulting signature. To avoid potential collisions Client Web service handler may use multiple signature algorithms for the same chunk or tag bit stream.

Client Web service handler negotiates the signature with server Web service handler which queries bit stream repository for the signature. Server Web service handler uses the data session ID to narrow the query of bit stream repository . If server Web service handler does not find the signature in bit stream repository server Web service handler notifies client Web service handler which sends request SOAP message tag bit stream . Server Web service handler stores the tag bit stream and the signature in bit stream repository.

If server Web service handler finds the signature in bit stream repository server Web service handler notifies client Web service handler which does not send the tag bit stream . Server Web service handler composes request SOAP message from tag bit streams received from client Web service handler and or retrieved from bit stream repository .

Bit stream repository manager performs garbage collection of bit stream repository . When server Web service handler stores de duplication entries in bit stream repository server Web service handler stores an expiration date in association with the bit stream and signature. Bit stream repository manager periodically queries bit stream repository to identify entries that have expired. Bit stream repository manager removes entries that have expired and releases the resource. Bit stream repository manager may also remove entries when server Web service handler confirmed that entries are completed and no longer needed. For example server Web service handler may notify bit stream repository manager when a de duplication session terminates and bit stream repository manager removes de duplication entries associated for the de duplication session.

The client Web service handler calculates digital signatures for XML tags in the request SOAP message tag bit stream based on the defined de duplication policy. depicts an example request message with signature calculated in accordance with an illustrative embodiment. The application may specify the digital signature algorithm for specific tags in which case the de duplication policy may be ignored.

The original request message may also contain de duplication policy information which is generated by the client application. When the client Web service handler finds a tag that has attributes with de duplication and algorithm set the client Web service handler uses the appropriate de duplication process for the tag bit stream. Thus the application has an option to manipulate the de duplication behavior of the Web service handlers.

The server Web service handler picks up the request message and stores the signature and corresponding bit stream in the bit stream repository. Meanwhile the message is posted to other handlers in the server Web service container and final target to the server side application. The repository includes the tag name tag name space bit stream content signature de duplication algorithm and data session information to separate the different sessions in the Web service container. depicts an example bit stream repository in accordance with an illustrative embodiment.

The server side application begins the business processing on the request message. If no business errors occur and the business processing completes successfully the server application returns a response message to the client side application. If an error does occur the client application receives an error response message and runs the same business logic application again. The client application then repackages the request message and the client Web service handler negotiates de duplication with the server Web service handler.

The client Web service handler recalculates the digital signatures based on the same de duplication policy. Before sending a tag bit stream to the server the client Web service handler negotiates with the server Web service handler to determine whether the signature exists in the server side bit stream repository. If the value is new to the bit stream repository the client Web service handler sends the tag bit stream again. Otherwise the client Web service handler sends only the signature because the signature identifies the bit stream content uniquely.

The server Web service handler combines the bit stream from the client Web service handler and the bit stream retrieved from the bit stream repository by signature. The server Web service handler then composes the request message from the received and retrieved bit stream content and posts the request message to the server application for business processing.

If a particular request message experiences a predetermined number of logic errors at the server side perhaps due to signature collisions the client application may limit the number of times a request message can be transmitted with de duplication enabled.

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in any one or more computer readable medium s having computer usable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in a baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Computer code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination thereof.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

If a message is received from the client application for transfer to the server in the data session in block the client Web service handler determines whether the request message contains large data block . If the request message contains large data the client Web service handler divides the request message bit stream into chunks block and calculates a signature for the first chunk block . If the request message does not contain large data in block the client Web service handler calculates a signature for the request message bit stream block .

Thereafter the client Web service handler negotiates the signature block with the server Web service handler which notifies the client Web service handler whether the tag bit stream was previously sent block . If the tag bit stream was not previously sent the client Web service handler sends the tag bit stream and signature block . If the tag bit stream was previously sent in block the client Web service handler sends the signature block .

Then the client Web service handler determines whether the entire request message has been sent block . If the entire request message has not been sent the client Web service handler considers the next chunk block and operation returns to block to calculate the signature for the next chunk. If the entire request message has been sent in block operation returns to block to determine whether a request message is received for transfer from a client application.

If a query is received in block the server Web service handler looks up the signature in a bit stream repository block . The server Web service handler determines whether the signature is found in the bit stream repository block . If the signature is not found the server Web service handler notifies the client that the signature is not found block . The server Web service handler then receives the tag bit stream for a request message from the client block and stores the signature and the tag bit stream in the bit stream repository block .

If the signature is found in the bit stream repository in block the server Web service handler notifies the client that the signature is found block and retrieves the tag bit stream from the bit stream repository block .

Thereafter the server Web service handler determines whether the request message is completely transferred block . If the message is not completely transferred operation returns to block to determine whether a query is received from the client Web service handler.

If the message is completely transferred in block the server Web service handler composes the request message block and passes it to the server application. The server application processes the request message to generate a response message block and returns the response message to the client block . Thereafter operation returns to block to determine whether a query is received from the client Web service handler.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Thus the illustrative embodiments provide mechanisms for message de duplication in Service Oriented Architecture and Web services environment. A message de duplication handler in a client calculates digital signatures for message bit streams. For large data the client Web service handler may divide the large data into fixed or variable length chunks and calculate a digital signature for each chunk. The client Web service handler negotiates the signature with the server to determine whether the chunk has been previously transmitted. If the chunk has not been previously transmitted the client Web service hander sends the tag bit stream directly. If the chunk has been previously transmitted the client Web service handler ignores the tag bit stream and sends only the signature.

The illustrative embodiments provide a server Web service handler allocates a data session identifier ID to identify a de duplication session and returns the data session ID to the client. For each message or chunk the server Web service handler negotiates the signature with the client to determine whether a tag bit stream for a given signature has already been received and stored in a tag bit stream repository. If the signature is not found in the tag bit stream repository the server Web service handler notifies the client which then sends the tag bit stream. If the signature is found in the tag bit stream the server Web service handler retrieves the tag bit stream from the tag bit stream repository and composes the message.

The embodiments may also be applied to the client Web service handler such that the client Web service handler and the server Web service handler perform de duplication for response messages from the server to the client. A message de duplication handler in a server may calculate digital signatures for response message bit streams. The server Web service handler may negotiate the signature with the client to determine whether a message or chunk has been previously transmitted. If the chunk has not been previously transmitted the server Web service hander may send the tag bit stream directly. If the chunk has been previously transmitted the server Web service handler may ignore the tag bit stream and send only the signature.

As noted above it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment the mechanisms of the illustrative embodiments are implemented in software or program code which includes but is not limited to firmware resident software microcode etc.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

