---

title: Executable high-level trace file generation method
abstract: An executable high-level trace file generation method provides reduced debugging effort and time, particularly on initial startup of new or modified hardware. An executable program invokes high-level application programming interfaces (APIs), to perform various tasks. Instructions within the APIs generate a trace file documenting the invoked sequence of APIs by writing a line to a trace file that documents the API and input parameters received by the API. Upon completion of execution of the API, the return value may be documented as a comment line in the trace file. The resulting trace file is then re-executable as a script and may be edited to alter the sequence of APIs invoked and/or the arguments provided. The script interpreter may be a command line interface through which the APIs are invoked, and trace files may be similarly generated that document sequences of manually entered commands.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08327340&OS=08327340&RS=08327340
owner: International Business Machines Corporation
number: 08327340
owner_city: Armonk
owner_country: US
publication_date: 20120329
---
The Present U.S. patent application is a Continuation of U.S. patent application Ser. No. 11 772 895 filed on Jul. 3 2007 and claims priority thereto under 35 U.S.C. 120.

The present invention relates generally to computing systems and more particularly to a method and system that generate a high level trace file that can be modified and or re executed without requiring re compilation.

Certain operating and debugging processes in computer systems require repetitive and time consuming debugging tasks that are exacerbated by the need to make minor changes and recompile executable program code. In particular when hardware changes are made or complex new systems or processors are operated for the first time the process of adapting existing software to the altered or new system typically requires multiple attempts at first startup in which the startup sequence and software are often modified slightly to accommodate the hardware changes. Further end users debugging startup of a system may not have access to the source code and compiler tools to make such changes.

Typically each software change requires generation of new executable code after the modification is made. Such software is typically modular and includes a large number of pre scripted operations that call application programming interfaces APIs . However even if individual modules that are unchanged can be linked from an unchanged object file the compilation of altered modules and subsequent linking of the entire executable is a time consuming operation.

One alternative to re building an executable file during debugging is direct entry of the high level procedure calls. However such modification must be repeated each time it is needed and does not provide a permanent record of the code changes that are needed. For example if a particular procedure call needs to be skipped for a new processor rather than rebuilding an executable file that controls commands sent to a program or processor that controls the startup sequence a person who has the source code for the executable file may manually enter the sequence of procedure calls made by the executable file if a console is provided to accept them. After verifying that the modified sequence is correct the program code must still be modified and re built or the tedious process of manually entering the startup sequence must be repeated on each startup.

The alternative is to modify and re build the program code at each detection of a problem with the sequence which can also be a tedious process in particular if the first modification s are not correct. Another solution possible on some systems is to edit the machine code directly and save the modified machine code but machine code is not readily comprehended and in particular machine code generated by high level compilers such as highly optimized machine code is particularly hard to decipher. Further machine code that calls high level procedures gives no clue as to what steps the program code is performing if there is no reference back to the high level program source embedded in the executable file.

Therefore it would be desirable to provide a method and system an alternative to re building an executable file to make on the fly changes during debugging or entering an entire sequence of commands from a command line interface thereby providing a machine repeatable solution to a program flow that can be modified from the sequence produced by the executable file. It would further be desirable to provide such an alternative that provides ready comprehension of the code being changed by reference to high level program code so that the sequence of commands can be modified without the user having the entire program source. It would further be desirable to provide such a system and method that provide a record of commands entered at a command line interface.

The objectives of providing an alternative to re building an executable file to make on the fly changes during debugging providing ready comprehension of the changes being made a repeatable solution and with no requirement that the user have the actual program source are accomplished in a method and system. The system is a computer system operating according to the method and the method may also be embodied in a computer program product.

The method executes an executable program file that makes calls to application programming interfaces APIs that are re usable sequences of program code that perform various tasks. At each call to particular APIs if a trace enable parameter is set the API call is documented in a trace file along with any parameter information. The API program code is then executed and then any return value s is documented in the trace file generally as a comment line.

The documentation of the API calls and the return value comments provide a human readable file that can be edited to change the sequence of execution produced by the executable file without requiring the executable file source. A command line interface may also be provided by the system to permit manual entry of API calls and the same mechanism used to produce a trace file. The command line interface may implement an API script file input function that provides for execution of the trace files generated by the method.

The system executing programs implementing the method may be a maintenance test workstation system that controls start up configuration and operation of a large scale computer system via one or more service processor interfaces in the large scale system that are coupled to the workstation system. The APIs may be procedures developed for sending commands and or data to the service processor interface s .

The foregoing and other objectives features and advantages of the invention will be apparent from the following more particular description of the preferred embodiment of the invention as illustrated in the accompanying drawings.

The present invention concerns a technique for generating a trace file that may be edited and re executed as a script for replicating a sequence of high level application programming interface API calls made by an executable machine code program. The trace file documents in human readable form particular API calls for which the trace functionality is provided. The trace file includes a line for each API call with the arguments provided to that API call documented as immediate values constants . The return values yielded by the API calls are documented as comments after the API call has returned. The resultant trace file provides flexibility in debugging systems for which the source code is not distributed and or the ability to quickly modify a sequence of API calls without requiring re compiling the executable program or manually entering a long sequence of command line commands that invoke the APIs. For example a startup maintenance module for a large scale server system may be either operated by entering hundreds of commands to a command line interface or automatically operated by various executable programs that invoke procedures that communicate with one or more service processors. By generating a trace file as described above the startup or other sequence for the system may be generated as a script and then quickly edited to make changes at test or in the field to perform debugging or to modify maintenance operations on the fly.

Referring now to a system in accordance with an embodiment of the present invention is shown. The illustrated system depicts an example of how the invention may be applied and should not be construed as a limitation on the type of system or application to which the invention is applicable. A processor blade A includes processors A and B that generally have multiple cores coupled to a memory memory controller module a network bus interface unit and a service processor that controls units within processor blade A to control startup shutdown and perform other maintenance tasks. Processor blade A is also coupled via a network or bus connection from network bus interface unit to other blades and or racks of blades . Service processor is coupled to a workstation computer via a port such as an Ethernet interface that is coupled via network interface controller NIC to a workstation processor . Workstation computer also includes a workstation memory a CD ROM drive for loading program products and or data stored on computer readable media such as compact disc CD. User input is provided by a keyboard A and a mouse B or other pointing device and graphical output such as listings or editor interfaces for editing the trace file of the present invention is provided by a graphical display coupled to workstation processor .

In the exemplary embodiment a trace file is generated for executable programs executed by workstation processor that call high level APIs that communicate with service processor via NIC to manipulate processor blade A and other blades racks . However the present invention may also apply to executable programs executing on for example a stand alone computer such as a system taking the form of workstation computer when not connected to processor blade A and other blades racks and there is no requirement that the APIs are system service APIs. For example the present invention may be used to provide an executable trace file from a general purpose application executing on a personal computer that provides for user manipulation of data within a personal computer operating system.

Referring now to a block diagram showing an organization of software modules in accordance with an embodiment of the present invention is shown. An executable file generates API calls to an API implementation module and receives API return values. API implementation module may be a dynamically linked library DLL another executable module that receives arguments as command line parameters a statically linked library module that is embedded within executable file or any other suitable mechanism such as an interpretive environment that provides for the execution of procedures from executable code. Executable file may be a native machine code program such as a C or C program or a higher level interpreted file such as a PERL promulgated by the PERL Foundation JAVA a trademark of Sun Microsystems Inc. RUBY or other suitable interpreted or compiled language.

When API implementation module receives an API call a system configuration file or data structure loaded from a system configuration file is checked to determine whether or not a TRACE ENABLED value is set. If the TRACE ENABLED value is set then the API call is documented along with the values of the arguments provided to trace file which is human readable and generally a text file listing the particular API and the arguments. For example a call to API MachineInit rackno bladeno coreno initflags might be documented in the trace file as 

where MachineInit is a command line command that can alternatively be provided to a command line scripting interface component that will generate the same API call for the same arguments and the values following MachineInit in the trace file are the values of rackno bladeno coreno and initflags that were provided from executable file as parameters to the API call.

API implementation module then executes the program instructions that form the API itself and just before returning program control to executable file and returning any API return value API implementation module writes a comment line with the return value s for example in a pound sign prefixed text line such as 

Where ERR SUCCESS was the return value provided from the called API and is a prefix that causes command line scripting interface component to ignore the line as a comment.

Command line scripting interface component accepts user input via a command line interface and the generated trace file which may be user edited via a dedicated or general purposes editing program such as a text editor. For example command line scripting interface component may accept a command such as 

so that upon being given the filename of trace file feeds the sequence of documented API calls to API implementation module re generating the sequence of API calls originally generated by executing executable file but with any changes in the sequence or parameters arguments that were introduced by editing trace file . For example assume that in the system of an executable file is executed by workstation computer to initialize all of the processor cores according to the following C program 

Referring now to a computer performed method in accordance with an embodiment of the present invention is illustrated in a flowchart. For each API call received from the executable file script or user input step for which tracing is supported the TRACE flag is checked for an asserted condition decision and if the TRACE flag is set a line is written in the trace file documenting the API call and parameters step . Next the API is called with the specified parameters step and the TRACE flag is again checked for an asserted condition decision and if the TRACE flag is set a line is written in the trace file documenting the API return value as a comment step . Until the system is shut down step any supported API calls will generate call and return documentation lines in the trace file.

While the invention has been particularly shown and described with reference to the preferred embodiment thereof it will be understood by those skilled in the art that the foregoing and other changes in form and details may be made therein without departing from the spirit and scope of the invention.

