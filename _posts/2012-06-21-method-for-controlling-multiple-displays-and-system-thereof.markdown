---

title: Method for controlling multiple displays and system thereof
abstract: A method and system for controlling multiple displays is provided. The disclosed method is used to control a plurality of graphics processing units (GPUs), wherein every GPU controls one or more displays. The method includes the following steps: providing a graphical interface the same to a graphical program library of an operating system to replace the graphical program library to receive a drawing command from an application program; determining a display set of the GPUs according to a display region of the application program, wherein a frame displayed by the display controlled by each GPU is intersected to the display region; and delivering coordinate-transformed drawing commands to the GPUs in the display set according to the display intersection region, wherein each GPU in the display set only draws the content of the corresponding display intersection region.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09182938&OS=09182938&RS=09182938
owner: VIA Technologies, Inc.
number: 09182938
owner_city: New Taipei
owner_country: TW
publication_date: 20120621
---
This application claims the priority benefits of China application serial no. 201110182317.8 filed on Jun. 30 2011 and China application serial no. 201110393483.2 filed on Dec. 1 2011. The entirety of each of the above mentioned patent applications is hereby incorporated by reference herein and made a part of specification.

The invention relates to a method for controlling a display and a system thereof. Particularly the invention relates to a method for controlling multiple displays and a system thereof.

Many techniques related to multiple displays have been developed for example a multiple output adapter is used to expand the number of displays a plurality of computers are used to drive a plurality of displays a display function is used to provide one video source to a plurality of displays or an external switch is used to combine a plurality of displays into a display wall. The above techniques have their own advantages and disadvantages in overall implementation of the aforementioned techniques is generally over complex expensive or is lack of capability for supporting high resolution images and most important one is lack of capability for supporting a three dimensional 3D image display technique for example a direct3D runtime library of Microsoft Corporation.

The 3D image display technique for example Direct3D including Direct3D image application or DirectShow video application etc. all requires to use a Direct3D program library to process image contents. However the current Direct3D program library only uses one display in logic i.e. if a window of one application program is displayed on a plurality of displays even if the multiple displays are controlled by a plurality of graphics processing units GPUs Current D3D program creates only one instance of Direct3D device and one instance of Direct3D device can only process and draw an image through one of the GPUs and then Windows operation system will copy the drawn Direct3D image to each of the other GPUs for displaying according to a display position through the GPU. Since the copy operation is executed by the operating system and is not accelerated by the GPU a processing speed thereof is very slow.

Moreover compared to establishment of a general 2D image content computation complexity in establishment of the 3D image data display content is higher so that a display control system for example a computer system may consume more time to process and display the image. Therefore if the 3D image is drawn by one GPU and is then copied to other GPUs according to the conventional technique in the time consuming image processing process the processing process is further prolonged due to the copy operation and such processing method severely influences the image display efficiency. Therefore while considering the cost how to quickly establish the display content of the 3D image data and display it on the multiple displays has become a major problem to be resolved.

The invention provides a method for controlling multiple displays which is adapted to control a plurality of graphics processing units GPUs to simultaneously draw a display frame where each of the GPUs controls at least one display. The method for controlling multiple displays includes the following steps providing a graphical interface the same to a graphical program library of an operating system to replace the program library to receive a drawing command from an application program determining a display set of the GPUs according to a display region of the application program wherein a frame displayed by the display controlled by each of the GPUs in the display set is intersected to the display region performing coordinate transform on the drawing command to generate at least one coordinate transformed drawing command according to a display intersection region between the display region and the frame displayed by the display controlled by each of the GPUs in the display set and delivering the coordinate transformed drawing command to the corresponding GPU in the display set so that each GPU in the display set only draws a content of the corresponding display intersection region.

The invention provides a multi display control system which is adapted to control a plurality of graphics processing units GPUs to simultaneously draw a display frame where each of the GPUs controls at least one display. The multi display control system includes a memory and a controller. The controller provides a graphical interface the same to a graphical program library of an operating system and uses the graphical interface to receive a drawing command from an application program. The controller determines a display set of the GPUs according to a display region of the application program wherein a frame displayed by the display controlled by each of the GPUs in the display set is intersected to the display region. The controller performs coordinate transform on the drawing command to generate at least one coordinate transformed drawing command according to a display intersection region between the display region and the frame displayed by the display controlled by each of the GPUs in the display set and delivers the coordinate transformed drawing command to the corresponding GPU in the display set. The controller also records the display set and the display intersection region in the memory.

The invention provides a method for controlling multiple displays which is adapted to control a plurality of graphics processing units GPUs to simultaneously draw a display frame where each of the GPUs controls at least one display. The method for controlling multiple displays includes the following steps determining a display set of the GPUs according to a display region of an application program wherein a frame displayed by the display controlled by each of the GPUs in the display set is intersected to the display region of the application program performing coordinate transform on a drawing command to generate at least one coordinate transformed drawing command according to a display region of the display controlled by each of the GPUs in the display set and delivering the coordinate transformed drawing command to the corresponding GPU in the display set so that each GPU in the display set only draws a content of the corresponding display intersection region.

According to the above descriptions the drawing command is received from the application program and the coordinate transform is performed according to the frame displayed by the display controlled by each of the GPUs and then the coordinate transformed drawing command is delivered to the corresponding GPU in the display set so that the GPUs can respectively process image contents of the display intersection regions and then display the image contents on the multiple displays by which the time required for displaying an image on the multiple displays is shortened.

In order to make the aforementioned and other features and advantages of the invention comprehensible several exemplary embodiments accompanied with figures are described in detail below.

In an embodiment the graphical interface intercepts the drawing command of the application program and then the middleware performs coordinate transform on the intercepted drawing command to transform coordinates of the drawing command corresponding to a whole display area into display coordinates of each of the displays controlled by each of graphics processing units GPUs and then delivers the coordinate transformed drawing command to the corresponding GPU to implement image or graphics drawing processing without implementing the same though processing of the graphical program library. Moreover the aforementioned operating system can be the Windows operating system of Microsoft Corporation and the aforementioned graphical program library can be Direct3D program library or OpenGL though the invention is not limited thereto. In other embodiments a similar operating system and graphical program library can be used to respectively replace the Windows operating system and the Direct3D program library. It should be noticed that the current Direct3D program library can only recognize one display and one GPU in logic i.e. can only draw a complete display frame on one GPU and then the operating system copies the display frame to the other GPUs for displaying. Since the copy operation of the operating system is very slow the display effect is influenced. Comparatively according to the design of the middleware of the present invention a plurality of displays can be simultaneously recognized and a plurality of GPUs of the displays can be simultaneously controlled and the middleware can deliver the coordinate transformed drawing commands to each of the GPUs. Therefore under control of the middleware a plurality of the CPUs can simultaneously draw the display frame. Therefore in the method for controlling multiple displays of the invention the graphical interface and the middleware are designed to replace the Direct3D program library to receive the drawing commands of the application program and in collaboration with a multiplexing processing method image processing is accelerated to reduce the burden of a single GPU. On the other hand when the graphical interface and the middleware are used to replace the Direct3D program library to receive the drawing commands of the application program the application program does not feel existence of the middleware i.e. according to the invention operations of the GPUs can be directly controlled without changing the operating system and driver programs.

Referring to the middleware is coupled to the graphical interface to receive the drawing commands transmitted through the graphical interface and performs coordinate transform on the drawing commands that originally implement the drawing operations in the whole display area so as to generate the coordinate transformed drawing commands corresponding to individual GPUs and then calls a driver program through an operating system original interface to deliver the coordinate transformed drawing commands to GPUs and the operation of delivering the coordinate transformed drawing commands is described in detail later. It should be noticed that in an embodiment beside transforming the display coordinates of the whole display area into coordinates of the displays controlled by the individual GPUs the middleware further records resources created by the application program and states thereof for example process and record of the aforementioned coordinate transform and resources required by the coordinate transformed drawing command corresponding to the individual GPU and positions of the resources. The resources may include but are not limited to vertex buffer of Direct3D index buffer vertex shader pixel shader and texture pattern etc. and the aforementioned states may include but are not limited to Direct3D a rasterization state a texture mixing state a depth and stencil state and an output mixing state etc. Moreover details of delivering the corresponding coordinate transformed drawing command according to the content displayed by the individual GPU are described with reference of and . Moreover in an embodiment the operating system original interface is an application programming interface API provided to the application program by the operating system for calling the driver program. The API is originally provided to the graphical program library that is replaced by the middleware for calling the driver program and since the graphical program library has been replaced by the middleware the middleware also calls the driver program through such API.

The driver program is respectively coupled to the operating system original interface and the GPUs and after the middleware receives the coordinate transformed drawing commands the driver program interprets these coordinate transformed drawing commands into interpreted drawing commands that can be recognized by the GPUs and then the translated drawing commands are delivered to the corresponding GPUs . The driver program is a communication bridge between the computer operating system and hardware which is used to interpret the drawing commands transmitted by the operating system into commands i.e. the aforementioned interpreted drawing commands that can be recognized by the GPUs and this part is well known by those skilled in the art so that details thereof are not repeated. The GPUs are coupled to the driver program to receive the interpreted drawing commands interpreted by the driver program and control a multi display device according to the interpreted drawing commands. The multi display device is composed of a plurality of displays and is coupled to the GPUs . Each of the GPUs can control one or a plurality of displays of the multi display device and draw an image or a graphic content to be displayed in display buffers of the displays according to the interpreted drawing command. Then under control of the computer system the contents of the display buffers are simultaneously displayed on the displays. Obviously since the middleware can send the coordinate transformed drawing commands to the driver program through the operating system original interface and then delivers the interpreted drawing commands interpreted by the driver program to the GPUs different to the conventional technique that the Direct3D image is only processed and drawn in a single GPU and is then copied to other GPUs for displaying according to the display positions in the present invention the data to be displayed is directly delivered to the individual GPUs through the driver program so that a 3D image display speed is accelerated. Descriptions of the embodiment of the invention are described in detail later. It should be noticed that although the drawing commands of the whole display region probably generate at least one coordinate transformed drawing command corresponding to the GPUs in a display set after the coordinate transform after such transform since the individual GPUs can perform graphics or image drawing operations in the respective display buffers according to instructions of the coordinate transformed drawing commands an image processing speed can be accelerated through a multiplexing method so as to reduce a burden of a single GPU.

Referring to again in the step S if it is determined that the vertex coordinates in the drawing command are still not transformed into the frame coordinates of the display in step S a corresponding viewport transform is set for each of the GPUs in the display set according to a transform relationship between the vertex coordinates in the drawing command and the frame coordinates of the display and the display intersection region of each GPU in the display set. The viewport transform is one of the functions of Direct3D. Setting of the viewport transform is equivalent to setting a visual range of each GPU observable in a 3D vector space containing the aforementioned vertices. The vertex coordinates can be a vector form and the frame coordinates on the display can be directly obtained through computation of the viewport transform. In the step S since the transformed coordinates are the display coordinates of the application program on the multiple displays in step S according to the aforementioned setting of the viewport transform the display coordinates of the whole display region i.e. the display region on the multiple displays are transformed into the coordinates on the displays controlled by the individual GPUs so as to generate the coordinate transformed drawing commands corresponding to the individual GPS and then the driver program interprets the coordinate transformed drawing commands to generate the interpreted drawing commands and transmits the interpreted drawing commands to the corresponding GPUs for drawing operations. Therefore each GPU in the display set only draws a content of the corresponding display intersection region. In step S each of to GPUs draws the display content specified by the respective interpreted drawing command for example a pattern or an image required to be displayed is drawn in the respective display buffer and after the drawing operation is completed the computer system controls all of the GPUs in the display set to simultaneously display the respective display intersection regions.

In the following embodiment a processing method of a renderable texture pattern of the Direct3D is described. is a flowchart illustrating steps of delivering renderable texture drawing commands to each of the GPUs in the display set according to an embodiment of the invention. After the vertex coordinates are determined another focus of displaying a 3D object is to draw and display a texture pattern of a surface of the object which is described below. Referring to in step S the renderable texture drawing command is received from the application program through the graphical interface and then extracts a display position of the texture pattern on the frame of the display from the renderable texture drawing command. It should be noticed that the graphical interface of the step S is not a standard the graphical interface of Direct3D but is an extension function of the present embodiment so that if the application program can provide the display position of the texture pattern on the frame of the display the texture pattern to be displayed is coordinate transformed and sliced for transmitting to the corresponding GPUs for drawing operations. Then in step S according to the display position of the texture pattern a texture pattern display intersection region of the texture pattern in the frame displayed by the displays controlled by each of the GPUs in the display set is calculated. It should be noticed that since the same texture pattern can be displayed by a plurality of different displays if the slicing processing is not performed in allusion to the display position and content of the texture pattern for example the coordinates and the display content of the texture pattern in the displays controlled by each of the GPUs are not calculated the whole texture pattern has to be transmitted to each of the related GPUs for processing which is undoubtedly a waste of time and resource of the whole computer system. As the invention provides such function the texture pattern can be coordinate transformed and sliced for transmitting to the corresponding GPUs such that wastes of the system resource can be avoided. Moreover the texture pattern display intersection region refers to an intersection part between the display region of the texture pattern and the frame displayed on the display controlled by each of the GPUs in the display set which is included in the display intersection region and this part is described in detail later with reference of .

Referring to after the texture pattern display intersection region is calculated in step S according to the texture pattern display intersection region on the frame displayed on the display controlled by each of the GPUs in the display set the whole display coordinates are transformed into the display coordinates of the displays controlled by the individual GPUs and the renderable texture drawing commands are transformed into coordinate transformed texture pattern drawing commands. The renderable texture pattern displayed in the whole display region has been sliced into a plurality parts according to the corresponding GPUs and the related data including the sliced texture patterns and the display coordinates is all included in the coordinate transformed texture pattern drawing commands and then the coordinate transformed texture pattern drawing commands are delivered to each of the GPUs in the display set and each of the GPUs only draws a part of texture pattern on the frame displayed on the display controlled by such GPU so as to achieve the multiplexing processing of the renderable texture pattern on the multiple displays. It should be noticed that the display controlled by the GPU in the display set may also have no texture pattern display intersection region and the GPUs in the display set that control the displays having no texture pattern display intersection region do not participate drawing the renderable texture pattern and participate the multi display operation. Finally in step S after all of the GPUs complete the drawing operations the computer system controls all of the GPUs that participate in the drawing operations to simultaneously display the data stored in the display buffers thereof. It should be noticed that in the display operation of the step S when the GPUs write the display data of the displays into the display buffers the GPUs write the renderable texture pattern to be displayed into the display buffers all together or otherwise a display time of the renderable texture pattern is probably incorrect. Moreover since the GPUs in the display set perform the drawing operations in the corresponding display intersection regions these drawing operations can be implemented according to one or a plurality of drawing commands and drawing of the renderable texture pattern is only a part of the drawing operations.

In the following embodiment a processing method of an uploaded texture pattern of the Direct3D is described. is a flowchart illustrating steps of delivering uploaded texture pattern drawing commands to each of the GPUs in the display set according to an embodiment of the invention. The steps of the present embodiment are similar to the steps of the embodiment of and a difference there between is that the uploaded texture pattern to be displayed of the present embodiment is directly provided by an uploaded texture pattern drawing command of the application program and is not provided by the operating system. Steps S and S of are respectively the same to the steps S and S. In step S the whole display coordinates are transformed into the display coordinates of the displays controlled by the individual GPUs and the uploaded texture pattern drawing commands are transformed into coordinate transformed uploaded texture pattern drawing commands. Similarly the uploaded texture pattern displayed in the whole display region has been sliced into a plurality parts according to the corresponding GPUs and the related data including the sliced uploaded texture patterns and the display coordinates is all included in the coordinate transformed uploaded texture pattern drawing commands and then the coordinate transformed uploaded texture pattern drawing commands are delivered to each of the GPUs in the display set and the frame displayed by the display that is controlled by the GPU has the intersection region and each of the GPUs only draws the intersection region of the uploaded texture pattern on the frame displayed on the display controlled by such GPU so as to achieve the multiplexing processing of the uploaded texture pattern on the multiple displays. Then in step S after all of the GPUs in the display set draw the texture pattern uploaded by the application program in the corresponding display buffers the computer system controls all of the GPUs to simultaneously display data stored in the display buffers thereof. It should be noticed that the display operation of the step S is the same to that of the step S and when the GPUs write the display data of the displays into the display buffers the GPUs write the uploaded texture pattern to be displayed into the display buffers all together or otherwise a display time of the uploaded texture pattern is probably incorrect.

Then referring to and the display region of the application program is now enlarged from the display region APA of to a display region APB of and the frames of the displays and are also intersected to the display region APB so that the GPUs GP GP and GP that control the displays and are added to the display set. Since the GPUs GP GP and GP are newly added to the display set in order to draw the display contents of the application program the GPUs GP GP and GP must have the state and resource the same to that of the GPU GP. Therefore the middleware individually sets the aforementioned recorded states for the newly added GPUs GP GP and GP and individually creates the aforementioned recorded resources for the newly added GPUs GP GP and GP. Moreover when the display region of the application program is changed other GPUs are probably added to the aforementioned display set and the middleware also sets the sates and creates the resources for the newly added GPUs according to the same method. It should be noticed that when the middleware delivers the drawing commands of the application program the middleware also records the states and the resources set and created for the GPUs of the aforementioned display set by the application program according to the drawing commands. As described above the resources may include but are not limited to vertex buffer of Direct3D index buffer vertex shader pixel shader and texture pattern etc. and the aforementioned states may include but are not limited to Direct3D a rasterization state a texture mixing state a depth and stencil state and an output mixing state etc.

The invention also provides a multi display control system which is adapted to execute the aforementioned method for controlling multiple displays. is a schematic diagram of a multi display control system according to an embodiment of the invention. The embodiment of is similar to and a difference there between is that a multi display control system is used to replace the middleware and the multi display control system can be independently fabricated as an integrated circuit IC or a circuit module which is determined by those in the art according to an actual design requirement. The multi display control system includes a controller and a memory where the controller executes the methods for controlling multiple displays of the aforementioned embodiments for example the executes the steps shown in and . In the process of executing the aforementioned methods the controller can record data such as the display set of the step S and the display intersection regions of the GPUs of the step S etc. in the memory and can record the states and the resources set and created for the GPUs of the display set by the application program in the memory according to the drawing command of the application program.

In summary the invention provides a method and a system for controlling multiple displays by which when the image data especially the 3D image content is to be displayed on the multiple displays without using the current Direct3D program library the image data content is coordinate transformed and directly delivered to each of the GPUs controlling the displays by the driver program for drawing the display contents and the display contents are simultaneously displayed under control of the computer system. In this way not only the image processing speed is accelerated through a multiplexing method to reduce a burden of a single GPU when the display region of the application program is enlarged or changed the corresponding GPUs can be flexibly added for simultaneous computation.

It will be apparent to those skilled in the art that various modifications and variations can be made to the structure of the invention without departing from the scope or spirit of the invention. In view of the foregoing it is intended that the invention cover modifications and variations of this invention provided they fall within the scope of the following claims and their equivalents.

