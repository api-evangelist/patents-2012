---

title: Framework for multi-type and multi-location firmware updates and hardware feature updates through a single interface protocol
abstract: Disclosed are a method, system, and/or apparatus to enable multi-type and multi-location firmware updates and hardware feature updates through a single interface protocol. In one embodiment, a computer-implemented method of updating a platform system firmware and a component device firmware through a single interface protocol includes assigning a unique index number to each of a platform system and a component device, generating a platform system firmware payload, receiving a component device firmware payload, and generating a firmware update package comprising the platform system firmware payload and the component device firmware payload. The method also includes querying the platform payload header and the component payload header using a check image application programming interface and updating at least one of the platform system firmware and the component device firmware by passing at least one of the platform system firmware payload and the component device firmware payload to a set image API.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08875121&OS=08875121&RS=08875121
owner: NVIDIA Corporation
number: 08875121
owner_city: Santa Clara
owner_country: US
publication_date: 20121106
---
This disclosure relates generally to firmware update technology and more particularly to a method an apparatus and or system of updating a platform system firmware and a component device firmware through a single interface protocol.

Firmware may be used during the initialization of a computing or mobile platform to configure and verify the integrity of the platform. A computing or mobile platform e.g. a smartphone or tablet device may comprise numerous hardware and or ancillary components that may each have its own set of firmware. Such firmware may be updated on a periodic basis to improve a component s performance or add new features to the component device.

Each component manufacturer may develop its own individual solution for updating the component s firmware. Moreover the component manufacturer may develop different solutions for different operating systems and platforms. A platform developer and or manufacturer may be overburdened by having to learn and or deploy these differing solutions. The platform developer and or manufacturer may also have integrity and or security concerns when firmware updates are written using different protocols. Furthermore each component manufacturer may release its firmware update at a different time and may inundate the platform developer and or manufacturer with multiple firmware updates over a short period of time.

Finally the platform developer and or manufacturer may irritate the end user of the computing platform or mobile device by pushing too many firmware updates to the computing platform or mobile device s end users. The end user may feel bombarded by a steady stream of firmware updates and may opt to for a different computing platform or mobile device that does not deliver its firmware updates in a piecemeal fashion.

Disclosed are a method system and or apparatus to enable multi type and multi location firmware updates and hardware feature updates through a single interface protocol.

In one aspect a computer implemented method of updating a platform system firmware and a component device firmware through a single interface protocol includes assigning a unique index number to each of a platform system and a component device generating a platform system firmware payload comprising a platform payload header and a system firmware update image and receiving a component device firmware payload comprising a component firmware update image from a component device manufacturer. Moreover the method includes generating a firmware update package comprising a package header the platform system firmware payload the component device firmware payload and a component payload header. In this method the platform system firmware payload comprises the platform payload header having the unique index number assigned to the platform system and the component device firmware payload comprises the component payload header having the unique index number assigned to the component device.

The method may also include querying the platform payload header and the component payload header using a check image application programming interface API for a matching unique index number and updating at least one of the platform system firmware and the component device firmware by passing at least one of the platform system firmware payload and the component device firmware payload respectively to a set image API.

Under this method the system firmware update image the component firmware update image the check image API and the set image API may comply with a unified extensible firmware interface UEFI standard. The platform system firmware may be a firmware of the platform system stored in a non volatile memory of the platform system and the component device firmware may be a firmware of the component device coupled to the platform system.

Under this method the component device firmware may be stored in a storage memory separate from the non volatile memory storing the platform system firmware and is accessed through a separate bus when updating the component device firmware and the package header may comprise at least one of a platform compatibility data a package size data and a package integrity data. Furthermore the method may include authenticating the firmware update package using at least one of a digital signature and a digital certificate and permitting at least one of a factory update and an over the air update to at least one of the platform system firmware and the component device firmware. The method may also include rejecting at least one of the platform payload header and the component payload header if the unique index number does not match when querying the platform payload header and the component payload header using the check image API. Under this method the firmware update package is generated using a stand alone application resident on at least one of a Windows computing device and a Linux computing device.

In another aspect a computer implemented method of updating a plurality of component device firmwares through a single interface protocol includes assigning a unique index number to each of a plurality of component devices coupled to a platform system receiving a plurality of component device firmware payloads each comprising a component firmware update image from a plurality of component device manufacturers and generating a firmware update package comprising a package header a plurality of component device firmware payloads a plurality of component payload headers. Under this method each of the plurality of component device firmware payloads comprises one of the plurality of component payload headers having the unique index number assigned to each of the plurality of component devices.

This method also includes querying the plurality of component payload headers using a check image application programming interface API for a matching unique index number and updating at least one of the plurality of component device firmwares by passing at least one of the plurality of component device firmware payloads to a set image API.

Under this method each of the plurality of component device firmware is a firmware of each of the plurality of component devices coupled to the platform system. In addition at least one of the plurality of component device firmwares may be stored in a storage location separate from a storage memory storing at least one other of the plurality of component device firmwares and may be accessed through a separate bus when updating the component device firmware. The package header may comprise at least one of a platform compatibility data a package size data and a package integrity data. The method may also include authenticating the firmware update package using at least one of a digital signature and a digital certificate permitting at least one of a factory update and an over the air update to at least one of the plurality of component device firmwares and rejecting at least one of the plurality of component device firmware payloads if the unique index number does not match when querying the plurality of component payload headers using the check image API.

Under this method the firmware update package may be generated using a stand alone application resident on at least one of a Windows computing device and a Linux computing device.

In yet another aspect a computer implemented method of updating a plurality of hardware features of a platform system through a single interface protocol comprises assigning a unique index number to each of the plurality of hardware features receiving a plurality of empty payloads each comprising a feature update command from at least one of a plurality of component device manufacturers and generating a feature update package comprising a package header the plurality of empty payloads and a plurality of feature payload headers. Under this method each of the plurality of empty payloads comprises one of the plurality of feature payload headers having the unique index number assigned to each of the plurality of hardware features.

The method also includes querying the plurality of empty payloads using a check image application programming interface API for a matching unique index number and updating at least one of the plurality of hardware features by passing at least one of the plurality of empty payloads comprising the feature update command to a set image API. Under this method the check image API and the set image API comply with a unified extensible firmware interface UEFI standard.

The methods system and or apparatuses disclosed herein may be implemented in any means for achieving various aspects and may be executed in a form of machine readable medium embodying a set of instruction that when executed by a machine causes the machine to perform any of the operations disclosed herein. Other features will be apparent from the accompanying drawing and from the detailed description that follows.

Other features of the present embodiments will be apparent from the accompanying drawings and from the detailed description that follows.

Disclosed are a method system and or apparatus to enable multi type and multi location firmware updates and hardware feature updates through a single interface protocol.

In one embodiment the single interface protocol is a new framework for effecting updates for firmware based on a Unified Extensible Firmware Interface UEFI standard. In this embodiment the single interface protocol permits a platform system manufacturer and or platform system developer to update any of a a platform system firmware and a component device firmware b a platform system firmware and a plurality of component device firmwares and c a plurality of platform system firmwares and a plurality of component device firmwares through the single interface protocol. The single interface protocol may be built on top of a standard UEFI protocol such as an EFI FIRMWARE MANAGEMENT PROTOCOL. Using the method system and or apparatus described in these embodiments a platform system manufacturer and or an end user of a platform system device is able to update firmwares in any of the aforementioned scenarios without having to adopt a multitude of proprietary interface protocols promulgated by the component device manufacturers and or vendors.

Reference is now made to which is a schematic overview diagram of a single interface protocol providing a framework for receiving several component firmware updates in the form of component device firmware payloads from several component device manufacturers according to one embodiment. In one embodiment the rules and instructions established by the single interface protocol are used by a platform system manufacturer to update the firmwares of a plurality of component devices coupled to a platform system . In one embodiment the platform system may be a platform of a multi core processor e.g. NVIDIA s Tegra 3 Quad Core processor or Tegra 2 Dual Core processor resident in a platform system device e.g. a mobile device a smartphone a tablet device a computing device etc. .

In this embodiment the platform system manufacturer generates a firmware update package comprising a platform system firmware payload and at least one component device firmware payload . In most such cases the firmware update package is generated with a plurality of component device firmware payloads and at least one platform system firmware payload .

In one exemplary embodiment the platform system may be a platform of a system on a chip e.g. NVIDIA s Tegra 3 Quad Core processor of a mobile device and the component devices in need of firmware updates may include a sensor and a touchscreen. In this embodiment one of the component device manufacturers may be the manufacturer of the sensor component and the other component device manufacturer may be the manufacturer of the touchscreen component. In the aforementioned description however one skilled in the relevant art will recognize that a manufacturer may refer to any one of a vendor a software developer and or a designer working under the auspices of the manufacturer or in conjunction with the manufacturer. In this exemplary embodiment the platform system firmware of the platform system is stored in a non volatile memory coupled to a multimedia processor . In this same exemplary embodiment a component device firmware of the sensor component device is stored in the same non volatile memory and a component device firmware of the touchscreen component device is stored in a storage memory separate from the non volatile memory and is accessed by the touchscreen component device through a separate bus .

Reference is now made to which is a schematic block diagram of the firmware update package of created to update a platform system firmware and a plurality of component device firmwares according to one embodiment. In the following description one skilled in the art of firmware updates will recognize that the following method system and apparatus can be used to update any combination of platform and component device firmwares including but not limited to one platform system firmware and one component device firmware and a plurality of platform system firmwares and a plurality of component device firmwares. Additionally the word plurality may refer to any number of objects elements and or devices in excess of one.

The unique index number may be a singular number a row number a column number and or a combination of row and column numbers. The platform system manufacturer may also reserve certain ranges of numbers for the unique index number . In one exemplary embodiment the platform system manufacturer may reserve the numbers 0x1F for platform system features in need of firmware updates and the numbers 0x20 to 0xFF for component devices in need of firmware updates. While the unique index numbers assigned to a plurality of component device may differ from one component device to another component device a component device retains its unique index number for that particular platform system . However a component device may receive a different unique index number when such a component device is used in a different platform system . For example a touchscreen component device may receive a unique index number 0020 when the touchscreen component device is used in a smartphone platform developed by Manufacturer X the same touchscreen component device may receive a different unique index number of 0030 when the touchscreen component device is used in a smartphone platform developed by Manufacturer Y.

The method further includes generating a platform system firmware payload comprising a platform payload header and a system firmware update image . The platform system firmware payload may be written in accordance with the UEFI standard and both the platform payload header and the system firmware update image may be implemented in accordance with the UEFI standard. The platform payload header may contain the unique index number specifically assigned to the platform system .

In accordance with this method the platform system manufacturer may receive a plurality of component device firmware payloads each comprising a component firmware update image and a component payload header from a plurality of component device manufacturers . Moreover the method includes generating the firmware update package comprising a package header the platform system firmware payload and a plurality of component device firmware payloads . In certain embodiments the firmware update package may also contain a digital certificate to authenticate the firmware update package .

The digital certificate may be a digital signature or key that identifies the sender of a digital package or set of data as the true and verified sender. In one embodiment the creator of the firmware update package may encrypt a portion of the firmware update package with the creator s private key. The creator may then reveal certain information regarding this private key to an intended recipient of the firmware update package . A platform system manufacturer and or developer may then decrypt this digital certificate and thereby verify the authenticity of the accompanying firmware update package by using the information provided by the creator of the firmware update package . One example of the digital signature is a digital signature that abides by the Digital Signature Standard DSS .

In one embodiment the firmware update package may be generated using a stand alone application compatible with at least one of a Windows computing device and a Linux computing device. In this embodiment the platform system manufacturer may run the stand alone application to generate the firmware update package to be sent to a platform system through a wired and or wireless connection. The instructions for the stand alone application may be stored in a non transitory medium of a computing device running either a Windows or a Linux operating system and may read the instructions using a data processing device resident on the computing device.

Finally the method includes querying the platform payload header and the plurality of component payload headers using a check image application programming interface API for a matching unique index number and updating at least one of the platform system firmware and the plurality of component device firmwares by passing at least one of the platform system firmware payload and the plurality of component device firmware payloads respectively to a set image API .

As illustrated in in one exemplary embodiment the platform payload header is passed as a parameter to a platform check image API. The platform check image API will call a check image function e.g. CheckImage to see if the unique index number assigned to the platform system matches that of the unique index number contained in the platform payload header . In this exemplary embodiment a matching unique index number results in a statement of EFI SUCCESS and or IMAGE UPDATABLE VALID. In this case the platform system firmware payload comprising the system firmware update image is passed as a parameter to the platform set image API. In this embodiment the set image API in this case the platform set image API may update the platform system firmware by re writing over the existing firmware code stored in the non volatile memory . The platform set image API may also update the platform system firmware by flashing the system firmware update image . Both the platform check image API and the platform set image API may be written into the code of the platform system firmware .

Also illustrated in a plurality of component payload headers are passed as parameters to a component check image API. In this embodiment the component check image API will call a check image function to see if the unique index number assigned to the particular component device matches that of the unique index number contained in the component payload header . The check image API may reject a particular component payload header queried if the unique index number assigned to the particular component device does not match the unique index number contained in the component payload header . If the check image function returns a result of EFI SUCCESS and or IMAGEUPDATABLE VALID as a result of a matching unique index number the entire component device firmware payload is then passed to a component set image API. The component set image API may then update the component system firmware by re writing over the existing component device firmware stored in either the non volatile memory or a storage memory separate from the non volatile memory . The component set image API may also update the component device firmware by flashing the component firmware update image . Both the component check image API and the component set image API may be written into the code of the component device firmware .

In one embodiment the component device firmware may be embedded in the platform system firmware . In another embodiment not shown in the component device firmware may be stored in the storage memory separate from the non volatile memory . In this case the component set image API may provide a direct pointer to the storage memory accessible through the separate bus and may update the component device firmware by flashing the component firmware update image to the storage memory through the separate bus . A get image function e.g. GetImage may also be used to fetch a firmware update from a separate location.

In the methods described herein the system firmware update image the component firmware update image the check image APIs and the set image APIs may comply with UEFI specifications. As indicated above the single interface protocol may be built on top of a standard UEFI protocol such as an EFI FIRMWARE MANAGEMENT PROTOCOL. In one embodiment the single interface protocol is the NV FW UPDATE PROTOCOL and is a set of instructions stored in the non volatile memory e.g. an embedded multimedia card of the platform system .

Reference is now made to which is a schematic block diagram of the firmware update package of used to update a plurality of component device firmwares according to one embodiment. As illustrated in a plurality of component payload headers are passed as parameters to a component check image API. In this embodiment the component check image API will call a check image function to see if the unique index number assigned to the particular component device matches that of the unique index number contained in the component payload header . The check image API may reject a particular component payload header queried if the unique index number assigned to the particular component device does not match the unique index number contained in the component payload header . If the check image function returns a result of EFI SUCCESS and or IMAGE UPDATABLE VALID as a result of a matching unique index number the entire component device firmware payload is then passed to a component set image API.

The component set image API may then update the component system firmware by re writing over the existing component device firmware stored in either the non volatile memory or a storage memory separate from the non volatile memory . The component set image API may also update the component device firmware by flashing the component firmware update image . Both the component check image API and the component set image API may be written into the code of the component device firmware .

In one embodiment the component device firmware may be embedded in the platform system firmware . In another embodiment not shown in the component device firmware may be stored in the storage memory separate from the non volatile memory . In this case the component set image API may provide a direct pointer to the storage memory accessible through the separate bus and may update the component device firmware by flashing the component firmware update image to the storage memory through the separate bus . A get image function e.g. GetImage may also be used to fetch a firmware update from a separate location.

Finally the single interface protocol may permit at least one of a factory update and an over the air OTA update to at least one of the platform system firmware and the component device firmware . While the currently established EFI FIRMWARE MANAGEMENT PROTOCOL supports over the air updates for platform system firmware updates the protocol does not support over the air updates for component device firmware updates. In this instance an over the air update refers to a firmware update delivered to a platform system over a network e.g. the Internet and when an operating system and a platform system firmware have been installed on the platform system device. Moreover a factory update refers to a firmware update delivered to a platform system without an operating system or a firmware platform system firmware installed on the platform system device. The single interface protocol may permit either an OTA update or a factory update through specially designed APIs supporting such updates.

In the exemplary embodiment shown in the plurality of component devices in need of firmware updates include a gyroscope a sensor such as a thermal sensor and a touchscreen. In this embodiment the component check image API iteratively checks the plurality of component payload headers until the check image function returns a result of EFI SUCCESS or IMAGE UPDATABLE VALID. Such a result may be achieved when a component check image API matches the unique index number assigned to the component device with the unique index number embedded in the component payload header . When a match is not found the component check image API will load another component payload header until all component payload headers have been queried.

If the check image function returns a result of EFI SUCCESS the single interface protocol then passes the entire component device firmware payload as an input to the component set image API. The component set image API may then update the component system firmware by re writing over the existing component device firmware . For example the component set image API may update the firmware of the touchscreen device by re writing the component firmware code of the touchscreen device stored in the storage memory separate from the non volatile memory and accessed through the separate bus .

Reference is now made to which is a schematic block diagram of the firmware update package of used to update a plurality of hardware features according to one embodiment. illustrates one exemplary embodiment of a computer implemented method of updating a plurality of hardware features using the framework provided by the single interface protocol of . In this exemplary embodiment the method includes assigning a unique index number to each of the plurality of hardware features . As depicted in the platform system firmware is a firmware of the platform system and may be stored in a non volatile memory of the platform system such as an embedded multimedia card eMMC . As seen in the plurality of hardware features may include a gyroscope feature a sensor feature and an antenna feature of the platform system . In one or more other embodiments the plurality of hardware features may include fuses and or security keys.

Similar to the methods described heretofore the unique index number may be a singular number a row number a column number and or a combination of row and column numbers. In accordance with this method the platform system manufacturer receives a plurality of empty payloads each comprising a feature update command from a plurality of component device manufacturers . Moreover the method includes generating a feature update package comprising a package header the plurality of empty payloads and a plurality of feature payload headers . In this embodiment each of the plurality of empty payloads contains one of the plurality of feature payload headers having the unique index number assigned to each of the plurality of hardware features .

Finally the method includes querying the plurality of empty payloads using a check image application programming interface API for a matching unique index number and updating at least one of the plurality of hardware features by passing at least one of the plurality of empty payloads comprising the feature update command to a set image API .

In certain embodiments the feature update package may also contain a digital certificate to authenticate the feature update package . In one embodiment the feature update package may be generated using a stand alone application compatible with at least one of a Windows computing device and a Linux computing device. In this embodiment the platform system manufacturer may run the stand alone application to generate the feature update package to be sent to a platform system through a wired and or wireless connection. The instructions for the stand alone application may be stored in a non transitory medium of a computing device running either a Windows or a Linux operating system and may read the instructions using a data processing device resident on the computing device.

As illustrated in a plurality of feature payload headers are passed as parameters to a component check image API. In this embodiment the component check image API will call a check image function to see if the unique index number assigned to the hardware feature matches that of the unique index number contained in the feature payload header . The check image API may reject a particular feature payload header queried if the unique index number assigned to the particular hardware feature does not match the unique index number contained in the feature payload header . If the check image function returns a result of EFI SUCCESS and or IMAGE UPDATABLE VALID as a result of a matching unique index number the entire empty payload is then passed to a component set image API. The component set image API may then update the hardware feature by enacting the feature update command contained in the empty payload .

As seen in the feature update command may comprise of a command to enable an antenna e.g. an antenna used to receive 4G wireless signals . The feature update command may act as a switch that turns on or off the hardware feature and the set image API may direct the feature update command to its intended hardware feature through the appropriate interface buses. In one embodiment the component device firmware may be embedded in the platform system firmware . In another embodiment not shown in the component device firmware may be stored in the storage memory separate from the non volatile memory .

In the methods described herein the check image APIs and the set image APIs may comply with applicable UEFI specifications. In addition under the method described herein no separate drivers are required to effect the hardware feature changes. As indicated above the single interface protocol may be built on top of a standard UEFI protocol such as an EFI FIRMWARE MANAGEMENT PROTOCOL. In one embodiment the single interface protocol is the NV FW UPDATE PROTOCOL and is a set of instructions stored in the non volatile memory e.g. an embedded multimedia card of the platform system . With respect to hardware feature updates the methods described herein leverages the EFI FIRMWARE MANAGEMENT PROTOCOL s rules pertaining to empty payloads.

Reference is now made to which is a flowchart illustrating when in the initialization process the single interface protocol of would operate from the perspective of platform system device according to one embodiment. As can be seen in operation starts the initialization process as soon as a cold boot is initiated. In one embodiment operation involves activating the platform system firmware . After the platform system firmware is activated a decision is made as to whether a firmware update is required. The receipt of a firmware update package may result in an answer of Yes which may then lead the platform system to begin iteratively querying the payload headers of the firmware update package using the check image API . If the result of the check image query is a No then the platform system firmware will ask whether any additional payloads are included in the firmware update package . If however the check image query returns a result of EFI SUCCESS or IMAGE UPDATABLE VALID i.e. Yes the protocol will pass the entire payload as a parameter to the set image function. After the set image operation the platform system firmware will ask whether any additional payloads remain. If the result of the any additional payloads query is a No then the platform system firmware will proceed to boot the operating system. If the result of the query is a Yes then the protocol dictates that the check image function be applied to the next payload.

Reference is now made to which is a user interface view of the interface protocol of generating a firmware update package according to one embodiment. As shown in user interface window shows the user interface used by a platform system manufacturer or a platform system developer to generate the firmware update package . As can be seen in information regarding the number of payloads in the firmware update package the size of the package and the version of the package are displayed.

Reference is now made to which shows a user interface window displaying the contents of the package header generated according to the framework of interface protocol . As can be seen in the package header contains machine readable data concerning the number of payloads the size of the firmware update package the version of the firmware update package and or the integrity of the firmware update package according to one embodiment.

Reference is now made to which shows a user interface window denoting the progress of a platform system firmware update and a plurality of component device firmware updates according to one embodiment. As can be seen in no firmware updates can take place until after the check image function has undergone its query.

Reference is now made to which shows a process flowchart depicting the method of updating a platform system firmware and a component device firmware through the single interface protocol of according to one embodiment. In one or more embodiments operation may involve assigning a unique index number to each of a platform system and a component device . In addition operation may involve generating a platform system firmware payload comprising a platform payload header and a system firmware update image . Furthermore operation may involve receiving a component device firmware payload comprising a component firmware update image from a component device manufacturer . In addition operation may involve generating a firmware update package comprising a package header the platform system firmware payload the component device firmware payload and a component payload header . The method may also include operation which involves querying a platform payload header of the platform system firmware payload and a component payload header of the component device firmware payload using a check image API for a matching unique index number. Finally operation may involve updating at least one of the platform system firmware and the component device firmware by passing at least one of the platform system firmware payload and the component device firmware payload respectively to a set image API .

Reference is now made to which shows a process flowchart illustrating the method of updating a plurality of component device firmwares through the single interface protocol of according to one embodiment. In one or more embodiments operation may involve assigning a unique index number to each of a plurality of component devices coupled to a platform system . In addition operation may involve receiving a plurality of component device firmware payloads each comprising a component firmware update image from a plurality of component device manufacturers . In addition operation may involve generating a firmware update package comprising a package header a plurality of component device firmware payloads and a plurality of component payload headers . The method may also include operation which involves querying a plurality of component payload headers of the plurality of component device firmware payloads using a check image API for a matching unique index number. Finally operation may involve updating at least one of the plurality of component device firmwares by passing at least one of the plurality of component device firmware payloads respectively to a set image API .

The generic computing device may represent various forms of digital computers such as laptops desktops workstations personal digital assistants servers blade servers mainframes and or other appropriate computers. The generic mobile computing device may represent various forms of mobile devices such as smartphones camera phones personal digital assistants cellular telephones and other similar generic mobile computing devices. The components shown here their connections couples and relationships and their functions are meant to be exemplary only and are not meant to limit the embodiments described and or claimed.

The generic computing device may include a processor a memory a storage device a high speed interface coupled to the memory and a plurality of high speed expansion ports and a low speed interface coupled to a low speed bus and a storage device . In one embodiment each of the components heretofore may be inter coupled using various buses and may be mounted on a common motherboard and or in other manners as appropriate. The processor may process instructions for execution in the generic computing device including instructions stored in the memory and or on the storage device to display a graphical information for a GUI on an external input output device such as a display unit coupled to the high speed interface . In other embodiments multiple processors and or multiple buses may be used as appropriate along with multiple memories and or types of memory. Also a plurality of generic computing devices may be coupled with with each device providing portions of the necessary operations e.g. as a server bank a group of blade servers and or a multi processor system .

The memory may be coupled to the generic computing device . In one embodiment the memory may be a volatile memory. In another embodiment the memory may be a non volatile memory. The memory may also be another form of computer readable medium such as a magnetic and or an optical disk. The storage device may be capable of providing mass storage for the generic computing device . In one embodiment the storage device may be comprised of at least one of a floppy disk device a hard disk device an optical disk device a tape device a flash memory and or other similar solid state memory device. In another embodiment the storage device may be an array of the devices in a computer readable medium previously mentioned heretofore computer readable medium such as and or an array of devices including devices in a storage area network and or other configurations.

A computer program may be comprised of instructions that when executed perform one or more methods such as those described above. The instructions may be stored in at least one of the memory the storage device a memory coupled to the processor and or a propagated signal.

The high speed interface may manage bandwidth intensive operations for the generic computing device while the low speed interface may manage lower bandwidth intensive operations. Such allocation of functions is exemplary only. In one embodiment the high speed interface may be coupled to at least one of the memory the display unit e.g. through a graphics processor and or an accelerator and to the plurality of high speed expansion ports which may accept various expansion cards. In the embodiment the low speed interface may be coupled to at least one of the storage device and the low speed bus . The low speed bus may be comprised of a wired and or wireless communication port e.g. a Universal Serial Bus USB a Bluetooth port an Ethernet port and or a wireless Ethernet port . The low speed bus may also be coupled to at least one of scan unit a printer a keyboard a mouse and a networking device e.g. a switch and or a router through a network adapter.

The generic computing device may be implemented in a number of different forms as shown in the figure. In one embodiment the generic computing device may be implemented as a standard server and or a group of such servers. In another embodiment the generic computing device may be implemented as part of a rack server system . In yet another embodiment the generic computing device may be implemented as a general computer such as a laptop computer. Alternatively a component from the generic computing device may be combined with another component in a generic mobile computing device . In one or more embodiments an entire system may be made up of a plurality of generic computing devices and or a plurality of generic computing devices coupled to a plurality of generic mobile computing devices .

In one embodiment the generic mobile computing device may comprise at least one of a mobile compatible processor a mobile compatible memory and an input output device such as a mobile display a communication interface and a transceiver among other components. The generic mobile computing device may also be provided with a storage device such as a microdrive or other device to provide additional storage. In one embodiment at least one of the components indicated heretofore are inter coupled using various buses and several of the components may be mounted on a common motherboard.

The mobile compatible processor may execute instructions in the generic mobile computing device including instructions stored in the mobile compatible memory . The mobile compatible processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The mobile compatible processor may provide for example for coordination of the other components of the generic mobile computing device such as control of user interfaces applications run by the generic mobile computing device and wireless communication by the generic mobile computing device .

The mobile compatible processor may communicate with a user through the control interface and the display interface coupled to a mobile display . In one embodiment the mobile display may be at least one of a Thin Film Transistor Liquid Crystal Display TFT LCD an Organic Light Emitting Diode OLED display and another appropriate display technology. The display interface may comprise appropriate circuitry for driving the mobile display to present graphical and other information to a user. The control interface may receive commands from a user and convert them for submission to the mobile compatible processor . In addition an external interface may be provide in communication with the mobile compatible processor so as to enable near area communication of the generic mobile computing device with other devices. External interface may provide for example for wired communication in some embodiments or for wireless communication in other embodiments and multiple interfaces may also be used.

The mobile compatible memory may be coupled to the generic mobile computing device . The mobile compatible memory may be implemented as at least one of a volatile memory and a non volatile memory. The expansion memory may also be coupled to the generic mobile computing device through the expansion interface which may comprise for example a Single In Line Memory Module SIMM card interface. The expansion memory may provide extra storage space for the generic mobile computing device or may also store an application or other information for the generic mobile computing device . Specifically the expansion memory may comprise instructions to carry out the processes described above. The expansion memory may also comprise secure information. For example the expansion memory may be provided as a security module for the generic mobile computing device and may be programmed with instructions that permit secure use of the generic mobile computing device . In addition a secure application may be provided on the SIMM card along with additional information such as placing identifying information on the SIMM card in a non hackable manner.

The mobile compatible memory may comprise at least one of a volatile memory e.g. a flash memory and a non volatile memory e.g. a non volatile random access memory NVRAM . In one embodiment a computer program comprises a set of instructions that when executed perform one or more methods. The set of instructions may be stored on at least one of the mobile compatible memory the expansion memory a memory coupled to the mobile compatible processor and a propagated signal that may be received for example over the transceiver and or the external interface .

The generic mobile computing device may communicate wirelessly through the communication interface which may be comprised of a digital signal processing circuitry. The communication interface may provide for communications using various modes and or protocols such as at least one of a Global System for Mobile Communications GSM protocol a Short Message Service SMS protocol an Enhanced Messaging System EMS protocol a Multimedia Messaging Service MMS protocol a Code Division Multiple Access CDMA protocol Time Division Multiple Access TDMA protocol a Personal Digital Cellular PDC protocol a Wideband Code Division Multiple Access WCDMA protocol a CDMA2000 protocol and a General Packet Radio Service GPRS protocol. Such communication may occur for example through the radio frequency transceiver . In addition short range communication may occur such as using a Bluetooth Wi Fi and or other such transceiver. In addition a GPS Global Positioning System receiver module may provide additional navigation related and location related wireless data to the generic mobile computing device which may be used as appropriate by a software application running on the generic mobile computing device .

The generic mobile computing device may also communicate audibly using an audio codec which may receive spoken information from a user and convert it to usable digital information. The audio codec may likewise generate audible sound for a user such as through a speaker e.g. in a handset of the generic mobile computing device . Such a sound may comprise a sound from a voice telephone call a recorded sound e.g. a voice message a music files etc. and may also include a sound generated by an application operating on the generic mobile computing device .

The generic mobile computing device may be implemented in a number of different forms as shown in the figure. In one embodiment the generic mobile computing device may be implemented as a smartphone . In another embodiment the generic mobile computing device may be implemented as a personal digital assistant PDA . In yet another embodiment the generic mobile computing device may be implemented as a tablet device .

Various embodiments of the systems and techniques described here can be realized in at least one of a digital electronic circuitry an integrated circuitry a specially designed application specific integrated circuits ASICs a piece of computer hardware a firmware a software application and a combination thereof. These various embodiments can include embodiment in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications and or code comprise machine readable instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium and or computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory and or Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here may be implemented on a computing device having a display device e.g. a cathode ray tube CRT and or liquid crystal display LCD monitor for displaying information to the user and a keyboard and a mouse by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback and or tactile feed back and input from the user can be received in any form including acoustic speech and or tactile input.

The systems and techniques described here may be implemented in a computing system that comprises at least one of a back end component e.g. as a data server a middleware component e.g. an application server a front end component e.g. a client computer having a graphical user interface and or a Web browser through which a user can interact with an embodiment of the systems and techniques described here and a combination thereof. The components of the system may also be coupled through a communication network.

The communication network may comprise at least one of a local area network LAN and a wide area network WAN e.g. the Internet . The computing system can comprise at least one of a client and a server. In one embodiment the client and the server are remote from each other and interact through the communication network.

