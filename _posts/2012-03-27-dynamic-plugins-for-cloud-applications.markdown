---

title: Dynamic plugin(s) for cloud application(s)
abstract: Techniques are described herein that are capable of dynamically installing plugin(s) for application(s). An agent plugin is caused to run in a deployment of a specified application (e.g., across multiple machines in a cloud environment or “on premises”). The specified application is packaged to include the agent plugin. The agent plugin is used to install designated plugin(s) dynamically based on configuration information regarding the specified application. The configuration information indicates that the designated plugin(s) are to be installed in response to the specified application being deployed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09158563&OS=09158563&RS=09158563
owner: Microsoft Technology Licensing, LLC
number: 09158563
owner_city: Redmond
owner_country: US
publication_date: 20120327
---
A plugin is a software component that adds one or more designated capabilities to a software application. The plugin may be used to enable third party developers to create abilities that extend the application to support easily adding new features e.g. profiling diagnostics etc. to the application to reduce the size of the application etc. Developers traditionally include plugins in an application prior to deployment of the application. One limitation regarding conventional techniques for installing plugins is that the application owner which is not necessarily the application developer typically is not able to add remove and or update the plugins based on current need without rebuilding and redeploying the application. Rebuilding and redeploying the application may be a time consuming and or costly process. Also such conventional techniques often provide many copies of the same plugin s packaged within many different applications which may hamper wide spread deployment of updated versions of the plugin s . For instance if a new version of a plugin fixes a security vulnerability every application which was packaged with that plugin traditionally is repackaged and redeployed this repackaging and redeploying may occur relatively slowly. Accordingly the conventional techniques may result in increase package size storage costs and or transmission costs.

In some conventional techniques developers create their own startup tasks that utilize existing installation mechanisms e.g. Web Platform Installer to install pre requisites a.k.a. dependencies of the application. A pre requisite of an application is a software component that is not included in the application and that the application needs in order to properly run. For example if the application is JAVA based the JAVA run time may be a pre requisite of the application. In another example if the application is a PHP application the PHP run time may be a pre requisite of the application. Each startup task often uses a script to call a command line utility to install a particular product needed by the application. While using scripts in this manner may not be unduly burdensome for individual applications the scripts typically are hand written and tested by every developer for each application. No standard general robust mechanism is known for installing such components. Furthermore if the application requires a different set of pre requisites e.g. a new version of a pre requisite it may be necessary to rebuild and redeploy the application in order to install and execute the different set of pre requisites. Again no standard general robust mechanism exists for installing such components post deployment.

Various approaches are described herein for among other things dynamically installing plugin s for application s . A method is described in which configuration information regarding a specified application is identified. The configuration information indicates that designated plugin s selected from one or more plugins which are stored in a location that is accessible to deployed applications are to be installed in response to the specified application being deployed. An agent plugin is caused to run in a deployment of the specified application. For example the deployment may be performed across multiple machines in a cloud environment. In another example the deployment may be performed on premises i.e. on one or more local machines . The specified application is packaged to include the agent plugin. The agent plugin is used to install the designated plugin s dynamically based on the configuration information. Accordingly such designated plugin s are interchangeably referred to herein as dynamic plugin s .

A system is described that includes an identification module a causation module and an installation module. The installation module is configured to identify configuration information regarding a specified application. The configuration information indicates that designated plugin s selected from one or more plugins which are stored in a location that is accessible to deployed applications are to be installed in response to the specified application being deployed. The causation module is configured to cause an agent plugin to run in a deployment of the specified application e.g. across multiple machines in a cloud environment or on premises . The specified application is packaged to include the agent plugin. The installation module is configured to use the agent plugin to install the designated plugin s dynamically based on the configuration information.

A computer program product is described that includes a computer readable medium having computer program logic recorded thereon for enabling a processor based system to dynamically install designated plugin s with respect to a specified application. The computer program product includes first second and third program logic modules. The first program logic module is for enabling the processor based system to identify configuration information regarding the specified application. The configuration information indicates that the designated plugin s selected from one or more plugins which are stored in a location that is accessible to deployed applications are to be installed in response to the specified application being deployed. The second program logic module is for enabling the processor based system to cause an agent plugin to run in a deployment of the specified application e.g. across multiple machines in a cloud environment or on premises . The specified application is packaged to include the agent plugin. The third program logic module is for enabling the processor based system to use the agent plugin to install the designated plugin s dynamically based on the configuration information.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter. Moreover it is noted that the invention is not limited to the specific embodiments described in the Detailed Description and or other sections of this document. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the disclosed technologies will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

The following detailed description refers to the accompanying drawings that illustrate exemplary embodiments of the present invention. However the scope of the present invention is not limited to these embodiments but is instead defined by the appended claims. Thus embodiments beyond those shown in the accompanying drawings such as modified versions of the illustrated embodiments may nevertheless be encompassed by the present invention.

References in the specification to one embodiment an embodiment an example embodiment or the like indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Furthermore when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the relevant art s to implement such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Example embodiments described herein are capable of dynamically installing plugin s for application s . In accordance with the example embodiments an agent plugin is caused to run in a deployment of a specified application. For example the deployment may be performed across multiple machines in a cloud environment. In another example the deployment may be performed on premises i.e. on one or more local machines . The specified application is packaged to include the agent plugin. The agent plugin is used to install designated plugin s dynamically based on configuration information regarding the specified application. Accordingly such designated plugin s are interchangeably referred to herein as dynamic plugin s . The configuration information indicates that the designated plugin s are to be installed in response to the specified application being deployed.

Example techniques described herein have a variety of benefits as compared to conventional techniques for installing plugins. For instance the example techniques may enable a user e.g. an application developer an application owner etc. to add remove and or update plugins and or dependencies of an application with regard to a deployment of the application based on current need without requiring a rebuild and or redeployment of the application. For instance the example techniques may provide a standard general robust mechanism for installing the plugins and or the dependencies e.g. after the application has been deployed . Accordingly the example techniques may consume less time and or fewer resources than conventional techniques. For example using the techniques described herein may result in smaller package size lesser storage costs and or lesser transmission costs as compared to conventional techniques.

As shown in computer system includes a plurality of user systems A M a network a plurality of servers A N and plugin source s . Communication among user systems A M servers A N and plugin source s is carried out over network using well known network communication protocols. Network may be a wide area network e.g. the Internet a local area network LAN another type of network or a combination thereof.

Plugin source s are processing systems that are capable of communicating with servers A N. An example of a processing system is a system that includes at least one processor that is capable of manipulating data in accordance with a set of instructions. For instance a processing system may be a computer a personal digital assistant etc. Plugin source s are configured to provide plugin s for further processing by a dynamic plugin installation module which is discussed in greater detail below. For instance plugin source s may provide the plugin s in response to receiving requests for the plugin s from dynamic plugin installation module .

User systems A M are processing systems that are capable of communicating with servers A N. User systems A M are configured to provide requests to servers A N for requesting information stored on or otherwise accessible via servers A N. For instance a user may initiate a request for executing a computer program using a client e.g. a Web browser Web crawler or other type of client deployed on a user system that is owned by or otherwise accessible to the user. In accordance with some example embodiments user systems A M are capable of accessing domains e.g. Web sites hosted by servers A N so that user systems A M may access information that is available via the domains. Such domain may include Web pages which may be provided as hypertext markup language HTML documents and objects e.g. files that are linked therein for example.

It will be recognized that any one or more user systems A M may communicate with any one or more servers A N. Although user systems A M are depicted as desktop computers in persons skilled in the relevant art s will appreciate that user systems A M may include any client enabled system or device including but not limited to a desktop computer a laptop computer a tablet computer a personal digital assistant a cellular telephone or the like.

Servers A N are processing systems that are capable of communicating with user systems A M and plugin source s . Servers A N are configured to execute computer programs that provide information to users in response to receiving requests from the users. For example the information may include documents e.g. Web pages images video files etc. output of executables or any other suitable type of information. In accordance with some example embodiments servers A N are configured to host respective Web sites so that the Web sites are accessible to users of computer system .

First server s A is shown to include dynamic plugin installation module . Dynamic plugin installation module is configured to forward the plugin s which are received from plugin source s to a location that is accessible to deployed applications. For instance dynamic plugin installation module may receive the plugin s in response to providing requests for the plugin s to plugin source s . Dynamic plugin installation module is further configured to identify configuration information regarding a specified application. The configuration information indicates that designated plugin s selected from the plugin s which are stored in the location that is accessible to deployed applications are to be installed in response to the specified application being deployed. Dynamic plugin installation module is further configured to cause an agent plugin to run in a deployment of the specified application e.g. across multiple machines in a cloud environment or on premises . The specified application is packaged to include the agent plugin. Dynamic plugin installation module is further configured to use the agent plugin to install the designated plugin s dynamically based on the configuration information. Some example techniques for dynamically installing plugin s for application s are discussed in greater detail below with reference to .

It should be noted that an instance of dynamic plugin installation module is included on each server that comprises the specified application. Each instance of dynamic plugin installation module causes the agent plugin to install and run dynamic plugin s on the machine on which dynamic plugin installation module is included.

Dynamic plugin installation module is shown to be incorporated in first server s A for illustrative purposes and is not intended to be limiting. It will be recognized that instance s of dynamic plugin installation module may be incorporated in any one or more of the servers A N.

Dynamic plugin installation module may be implemented in various ways to dynamically install plugin s for application s including being implemented in hardware software firmware or any combination thereof. For example dynamic plugin installation module may be implemented as computer program code configured to be executed in one or more processors. In another example dynamic plugin installation module may be implemented as hardware logic electrical circuitry. In an embodiment dynamic plugin installation module may be implemented in a system on chip SoC . Each SoC may include an integrated circuit chip that includes one or more of a processor e.g. a microcontroller microprocessor digital signal processor DSP etc. memory one or more communication interfaces and or further circuits and or embedded firmware to perform its functions.

A plugin may include any suitable number of components e.g. files . For instance a plugin may include one or more executable binaries one or more supporting libraries a plugin manifest etc. A plugin manifest is a file e.g. an extensible markup language XML file that describes configurations e.g. settings of a plugin. For instance the plugin manifest may indicate which configuration values are needed for the plugin. Dynamic agent portal may provide a user interface that enables a user to specify the configuration values that correspond to the respective configurations of the plugin.

As shown in a plugin labeled Plugin.cspluginx includes a first file labeled PluginAgent.exe and a second file labeled Plugin.csplugin for illustrative purposes. Packaging tool is capable of combining the files and to create the plugin as shown in . It will be recognized however that the developer may combine the files and to create the plugin .

Regardless the plugin is uploaded via dynamic agent portal . For instance the developer may upload the plugin using a client deployed on a user system e.g. one of user systems A M . The plugin may be configured to have any suitable format e.g. a format that is based on the Open Packaging Conventions . Packaging tool may package the plugin into the aforementioned format before the plugin is uploaded via dynamic agent portal . In one example embodiment packaging tool provides an online form to the developer for completion before the plugin is uploaded via dynamic agent portal . In another example embodiment dynamic agent portal provides the online form to the developer.

Dynamic agent portal generates a feed labeled PluginFeed.xml that includes the plugin location information regarding a location of the plugin and installation information that includes instructions for installing the plugin . The feed may be a web platform installer WebPI feed for example though it will be recognized that the feed may be any suitable type of feed. A web PI feed is a configuration file that enables a web platform installer to be able to locate and install plugins and or dependencies that the web platform installer is instructed to install. In one example the plugin may be defined as a virtual product within the feed . In accordance with this example the virtual product identifies dependencies of the plugin . The installation information may include instructions for decompressing the plugin . The feed may be web platform installer compatible though the scope of the example embodiments is not limited in this respect. One non limiting example of a code snippet that defines a feed is provided in section III.A below for illustrative purposes. Dynamic agent portal provides the plugin and the feed to blob storage .

Blob storage is a public network accessible e.g. web accessible store. Blob storage stores the plugin and the feed along with any other plugins that are uploaded via dynamic agent portal and their corresponding feeds. Blob storage may be any suitable type of store. One type of store is a database. For instance blob storage may be a relational database an entity relationship database an object database an object relational database an extensible markup language XML database etc.

Interface provides a visual representation of dependencies that are available for installation with regard to the application. For instance interface shows visual representations A B and C of respective dependencies A B and C. Selection boxes A C correspond to respective dependencies A B and C. The user may select selection box A to cause dependency A to be installed with regard to the application the user may select selection box B to cause dependency B to be installed with regard to the application and so on.

As shown in selection boxes A and C are selected and selection box B is not selected. Accordingly dynamic agent portal generates a product feed labeled ProductFeed.xml to include dependencies A and C and not to include dependency B. Dynamic agent portal generates an aggregated feed labeled AggregatedFeed.xml to include feeds and . The feeds and may be web platform installer compatible though the scope of the example embodiments is not limited in this respect. Dynamic agent portal provides the feeds and to blob storage .

Blob storage stores feeds and along with the plugin and feed . Each of the feeds stored by blob storage may correspond to a known dependency or an unknown dependency. A known dependency is a dependency that is known at a time at which the application is developed. For instance an execution framework such as a Java execution framework is one example type of known dependency. An unknown dependency is a dependency that is not known at the time at which the application is developed. For instance a performance measurement plugin may constitute an unknown dependency. It should be noted that an unknown dependency may be selected for installation with regard to the application after deployment of the application is initiated.

Interface provides a visual representation of plugins that are available for installation with regard to the application. For instance interface shows visual representations A B and C of respective plugins A B and C. Selection boxes A C correspond to respective plugins A B and C. The user may select selection box A to cause plugin A to be installed with regard to the application the user may select selection box B to cause plugin B to be installed with regard to the application and so on. The user may configure the plugins e.g. specify settings of the plugins as well.

As shown in selection boxes A and C are selected and selection box B is not selected. Accordingly dynamic agent portal modifies the product feed to include the plugin feeds for plugins A and C. Note that the plugin feed for plugin B is not added to the product feed because selection box B is not selected. Dynamic agent portal generates settings labeled Settings.xml regarding plugins A and C in response to selection boxes A and C being selected and or in response to receiving configuration instructions from the user. Dynamic agent portal provides the settings to blob storage to be stored therein.

Dynamic agent portal may not store the settings in an explicitly public location. For instance the settings may include sensitive data e.g. database connection strings . In one example technique for maintaining securing of such sensitive data a globally unique identifier based GUID based URI is used in a non browsable container to store the settings . Although the URI technically is public accessing the URI by brute force methods is relatively infeasible. It will be recognized that this is merely one example technique and other technique s may be employed in addition to or in lieu of this example technique.

A non limiting example of a code snippet that defines a feed generated by the selection of two plugins is provided in section III.B below for illustrative purposes. A non limiting example of a code snippet that defines a configuration file generated by the selection of two plugins is provided in section III.C below for illustrative purposes.

The agent plugin includes a WebPI agent and a dynamic agent for illustrative purposes and is not intended to be limiting. The WebPI agent is configured to install the dependencies and the plugins that are selected as shown in respective . The dynamic agent is configured to execute the plugins that are selected as shown in respective .

WebPI agent uses libraries and an application programming interface API of the web platform installer to read the aggregated feed to determine which dependencies and plugins to download and install. For instance WebPI agent provides a query e.g. query to dynamic agent portal . The query includes a request for the aggregated feed and a deployment identifier ID that is associated with the deployment of the application . Dynamic agent portal redirects the query to a storage location in blob storage that corresponds to a uniform resource identifier URI such as a uniform resource locator URL or a uniform resource name URN that is based on the deployment ID in the query. WebPI agent downloads the aggregated feed from the storage location that corresponds to the URI for installation of the dependencies and the plugins that are selected as shown in respective .

In one example WebPI agent may be configured within the application to use a predetermined feed to install a predetermined set of products e.g. one or more dependencies and or one or more plugins from that feed or a default product if no product is specified by the predetermined feed. The default product may be indicated by an association of a default keyword to the product within the predetermined feed.

In another example if WebPI agent is not specifically configured WebPI agent may request a feed from a web application. WebPI agent may provide the deployment ID that is associated with the deployment of the application causing the web application to redirect WebPI agent to the feed associated with the deployment. If no feed is specified or no feed is associated with the deployment of the application WebPI agent may not install the dependencies and or the plugins that are selected as shown in respective .

Dynamic agent provides a query e.g. query to dynamic agent portal . The query includes a request for the settings and a deployment identifier ID that is associated with the deployment of the application . Dynamic agent portal redirects the query to the storage location in blob storage that corresponds to the URI that is based on the deployment ID in the query. Dynamic agent downloads the settings from the storage location that corresponds to the URI for execution of the plugins that are selected as shown in . The settings may or may not include settings regarding the dependencies.

In one example dynamic agent may be configured within the application to use a predetermined configuration file that identifies the plugins to execute and configuration settings of those plugins. In another example if dynamic agent is not specifically configured dynamic agent may request a configuration file from a web application. Dynamic agent may provide the deployment ID that is associated with the deployment of the application causing the web application to redirect dynamic agent to the configuration file associated with the deployment. If no configuration file is specified or no configuration file is associated with the deployment of the application dynamic agent may not execute the plugins that are selected as shown in respective .

In an example embodiment for each configured plugin dynamic agent locates the corresponding plugin manifest e.g. on the local machine . Dynamic agent then executes each of the binaries indicated within the manifest. If there are configuration settings associated with the plugin dynamic agent passes the configuration settings to the plugin via environment variables. If an instruction to wait for the plugin to discontinue execution is specified in the plugin manifest dynamic agent waits for that plugin to discontinue execution. Otherwise dynamic agent moves on to the next configured plugin. When all configured plugins have been executed dynamic agent discontinues execution.

In another example embodiment the operation of dynamic agent mimics the behavior of the bootstrapper process of the platform that runs the plugins packaged with the application . Dynamic agent may thereby reduce e.g. minimize architectural differences between plugins run as part of the application and plugins run as part of this dynamic scenario. Some plugins may be capable of execution in both environments with no changes to the plugins.

It should be noted that the topology of the network on which the application is installed may pull information from dynamic agent portal to then configure itself based on the settings that are in dynamic agent portal . This is different from the push techniques that traditionally are employed for attempting to discover network topology.

As shown in the method of flowchart begins at step . In step configuration information regarding a specified application is identified. The configuration information indicates that designated plugin s selected from one or more plugins which are stored in a location that is accessible to deployed applications are to be installed in response to the specified application being deployed. The configuration information may be application specific configuration information that is specific to the specified application. For instance the configuration information may define content of the specified application in terms of its installation file and or a description of the specified application for human consumption. In an example implementation identification module identifies configuration information . Configuration information indicates that designated plugin s selected from plugin s which are stored in store are to be installed in response to specified application being deployed. It will be recognized that in some example embodiments the configuration information indicates that no designated plugins to be installed and or executed.

At step an agent plugin is caused to run in a first deployment of the specified application e.g. across machines in a cloud environment or on premises . The specified application is packaged to include the agent plugin. In an example implementation causation module causes agent plugin to be run in a first deployment of the specified application . In accordance with this implementation the specified application is packaged to include the agent plugin .

At step the agent plugin is used to install the designated plugin s dynamically e.g. on the fly while the specified application is running based on the configuration information. In an example implementation installation module uses the agent plugin to install the designated plugin s dynamically based on the configuration information .

In an example embodiment step includes identifying a feed that includes the designated plugin s location information regarding a location of the designated plugin s and installation information that includes instructions for installing the designated plugin s . For instance identification module may identify the feed. In accordance with this embodiment the agent plugin is used to install the designated plugin s dynamically at step based on the location information and the installation information. For instance installation module may use the agent plugin to install the designated plugin s dynamically based on the location information and the installation information. It will be recognized that the feed may further include one or more dependencies of the specified application. For instance the one or more dependencies of the specified application may be a superset of the designated plugin s .

In some example embodiments one or more steps and or of flowchart may not be performed. Moreover steps in addition to or in lieu of steps and or may be performed. For instance in an example embodiment the configuration information further indicates one or more dependencies of the specified application. It will be recognized that any of the one or more dependencies may have one or more dependencies any of which may have one or more dependencies and so on. Accordingly each dependency may have its own one or more dependencies. In accordance with this embodiment the method of flowchart further includes using the agent plugin to install the one or more dependencies based on the configuration information. In an example implementation installation module uses the agent plugin to install the one or more dependencies based on the configuration information .

In another example embodiment the configuration information further indicates one or more dependencies of the designated plugin s . In accordance with this embodiment the method of flowchart further includes using the agent plugin to install the one or more dependencies of the designated plugin s based on the configuration information. For instance the one or more dependencies may be stored in store .

In yet another example embodiment each of the designated plugin s includes a respective collection of executable binaries. An executable binary is a binary that is executable. In accordance with this embodiment the configuration information indicates for each of the designated plugin s a respective subset of the respective collection of executable binaries. Each subset of a respective collection of executable binaries may include any one or more of the executable binaries in the respective collection e.g. fewer than all of the executable binaries all of the executable binaries none of the executable binaries etc. . In further accordance with this embodiment the method of flowchart further includes using the agent plugin to execute each subset based on the configuration information. In an example implementation execution module uses the agent plugin to execute each subset based on the configuration information . In one example installation module may generate an installation indicator in response to the designated plugin s being installed. For instance the installation indicator may indicate that the designated plugin s are installed. In accordance with this example execution module may use the agent plugin to execute each subset in response to receiving the installation indicator from installation module .

It is noted that any one or more of the designated plugin s may include a single executable binary. It is further noted that any one or more of the designated plugin s may include one or more supplementary e.g. library binaries in addition to the executable binar ies .

In still another example embodiment step includes identifying a predetermined configuration file. The predetermined configuration file may be included in the configuration information though the scope of the example embodiments is not limited in this respect. For instance identification module may identify the predetermined configuration file e.g. configuration file which may be included in the configuration information . In accordance with this embodiment the predetermined configuration file indicates at least one configuration setting for each of the designated plugin s . For instance the configuration information may indicate configuration setting s for each of the designated plugin s . In one example a configuration setting may specify a frequency with which the specified application is to be accessed for purposes of monitoring. In accordance with this example the configuration setting may specify that the application is to be accessed every ten seconds or every 5 microseconds or every 30 minutes etc. In further accordance with this embodiment the method of flowchart further includes using the agent plugin to execute the designated plugin s based on the predetermined configuration file in response to using the agent plugin to install the designated plugin s . In an example implementation execution module uses the agent plugin to execute the designated plugin s based on the predetermined configuration file. In one example the predetermined configuration file may be different from another file that indicates that at least one designated plugin is to be installed in response to the specified application being deployed. In another example the configuration information that indicates that at least one designated plugin is to be installed in response to the specified application being deployed may be includes in the predetermined configuration file.

In yet another example embodiment step includes requesting a configuration file that corresponds to the first deployment of the specified application from a web application via which the configuration file is generated. For instance identification module may provide a file request which requests a configuration file that corresponds to the first deployment of the specified application from the web application. In accordance with this embodiment step further includes receiving the configuration file from the web application. The configuration file may be included in the configuration information though the scope of the example embodiments is not limited in this respect. The configuration file indicates at least one configuration setting for each of the designated plugin s . For example execution module may receive the configuration file from the web application. In further accordance with this embodiment the method of flowchart further includes using the agent plugin to execute the designated plugin s based on the configuration file in response to using the agent plugin to install the designated plugin s . In an example implementation execution module uses the agent plugin to execute the designated plugin s based on the configuration file . In one example the configuration file may be different from another file that indicates that at least one designated plugin is to be installed in response to the specified application being deployed. In another example the configuration information that indicates that at least one designated plugin is to be installed in response to the specified application being deployed may be includes in the configuration file.

In an example embodiment the method of flowchart includes one or more of the steps shown in . As shown in the method of flowchart begins at step . In step an interface is provided via which the one or more plugins are uploaded by user s . In an example implementation interface module provides interface . For instance the interface may have been used by the user s to upload the plugin s .

At step the designated plugin s are selected from the one or more plugins based on first user initiated instructions that specify the designated plugin s . In an example implementation selection module selects the designated plugin s from the plugin s based on the first user initiated instructions. For example selection module may generate selection request to specify the designated plugin s based on the first user initiated instructions. In accordance with this example selection module may provide the selection request to store to select the designated plugin s from the plugin s .

At step the configuration information is generated to include configuration settings of the designated plugin s . The configuration settings are specified by second user initiated instructions. In an example implementation generation module generates the configuration information to include configuration settings of the designated plugin s which are specified by the second user initiated instructions.

At step one or more dependencies of the specified application are selected based on third user initiated instructions that specify the one or more dependencies. In an example implementation selection module selects one or more dependencies of the specified application based on the third user initiated instructions.

In another example embodiment the method of flowchart includes one or more of the steps shown in . As shown in the method of flowchart begins at step . In step a determination is made that the configuration information is changed while the specified application is running to provide changed configuration information. The changed configuration information indicates that second designated plugin s are to be installed. The configuration information prior to being changed does not indicate that the second designated plugin s are to be installed. In an example implementation determination module determines that the configuration information is changed while the specified application is running to provide the changed configuration information.

At step the agent plugin is used to install the second designated plugin s dynamically while the specified application is running based on the changed configuration information. In an example implementation installation module uses the agent plugin to install the second designated plugin s dynamically while the specified application is running.

In yet another example embodiment the method of flowchart includes one or more of the steps shown in . As shown in the method of flowchart begins at step . In step the agent plugin is used to perform a first execution of the designated plugin s . For instance step may be performed in response to using the agent plugin to install the designated plugin s at step of flowchart . In an example implementation execution module uses the agent plugin to perform a first execution of the designated plugin s .

At step a state of the first execution is identified. For instance the state may be associated with certain configuration settings of the designated plugin s . In an example implementation identification module identifies the state of the first execution.

At step a determination is made that the specified application is to be recycled. In an example implementation determination module determines that the specified application is to be recycled. It will be recognized that to be recycled means to be restarted . For instance the determination that the specified application is to be recycled may be based on one or more factors including but not limited to a determination that a machine e.g. a physical machine or a virtual machine on which the specified application is deployed is to be restarted or has been restarted detection of a hardware malfunction with regard to the machine on which the specified application is deployed detection of a malfunction with regard to the specified application a determination that an operating system associated with the specified application is to be upgraded a determination that a platform on which the specified application is running has requested that the specified application be recycled etc.

At step the agent plugin is caused to run in a subsequent deployment of the specified application. The subsequent deployment is initiated after initiation of the first deployment. In an example implementation causation module causes the agent plugin to run in a subsequent deployment of the specified application .

At step the agent plugin is used to re install the designated plugin s dynamically based on the configuration information. In an example implementation installation module uses the agent plugin to re install the designated plugin s dynamically based on the configuration information .

At step the agent plugin is used to initiate a second execution of the designated plugin s in the state of the first execution. For instance the agent plugin may be used to initiate the second execution using the certain configuration settings of the designated plugin s that are associated with the state of the first execution. In an example implementation execution module uses the agent plugin to initiate a second execution of the designated plugin s in the state of the first execution.

It will be recognized that dynamic plugin installation module may not include one or more of identification module causation module installation module execution module interface module selection module generation module determination module and or store . Furthermore dynamic plugin installation module may include modules in addition to or in lieu of identification module causation module installation module execution module interface module selection module generation module determination module and or store .

Dynamic plugin installation module dynamic agent portal identification module causation module installation module execution module interface module selection module generation module determination module flowchart flowchart flowchart and flowchart may be implemented in hardware software firmware or any combination thereof.

For example dynamic plugin installation module dynamic agent portal identification module causation module installation module execution module interface module selection module generation module determination module flowchart flowchart flowchart and or flowchart may be implemented as computer program code configured to be executed in one or more processors.

In another example dynamic plugin installation module dynamic agent portal identification module causation module installation module execution module interface module selection module generation module determination module flowchart flowchart flowchart and or flowchart may be implemented as hardware logic electrical circuitry.

For instance in an embodiment one or more of dynamic plugin installation module dynamic agent portal identification module causation module installation module execution module interface module selection module generation module determination module flowchart flowchart flowchart and or flowchart may be implemented in a system on chip SoC . The SoC may include an integrated circuit chip that includes one or more of a processor e.g. a microcontroller microprocessor digital signal processor DSP etc. memory one or more communication interfaces and or further circuits and or embedded firmware to perform its functions.

As shown in computer includes a processing unit a system memory and a bus that couples various system components including system memory to processing unit . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. System memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in ROM .

Computer also has one or more of the following drives a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM DVD ROM or other optical media. Hard disk drive magnetic disk drive and optical disk drive are connected to bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The drives and their associated computer readable storage media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computer. Although a hard disk a removable magnetic disk and a removable optical disk are described other types of computer readable storage media can be used to store data such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. These programs include an operating system one or more application programs other program modules and program data . Application programs or program modules may include for example computer program logic for implementing dynamic plugin installation module dynamic agent portal identification module causation module installation module execution module interface module selection module generation module determination module flowchart including any step of flowchart flowchart including any step of flowchart flowchart including any step of flowchart and or flowchart including any step of flowchart as described herein.

A user may enter commands and information into the computer through input devices such as keyboard and pointing device . Other input devices not shown may include a microphone joystick game pad satellite dish scanner touch screen camera accelerometer gyroscope or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB .

A display device e.g. a monitor is also connected to bus via an interface such as a video adapter . In addition to display device computer may include other peripheral output devices not shown such as speakers and printers.

Computer is connected to a network e.g. the Internet through a network interface or adapter a modem or other means for establishing communications over the network. Modem which may be internal or external is connected to bus via serial port interface .

As used herein the terms computer program medium and computer readable medium are used to generally refer to media such as the hard disk associated with hard disk drive removable magnetic disk removable optical disk as well as other media such as flash memory cards digital video disks random access memories RAMs read only memories ROM and the like. Such computer readable storage media are distinguished from and non overlapping with communication media. Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wireless media such as acoustic RF infrared and other wireless media. Example embodiments are also directed to such communication media.

As noted above computer programs and modules including application programs and other program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM. Such computer programs may also be received via network interface or serial port interface . Such computer programs when executed or loaded by an application enable computer to implement features of embodiments discussed herein. Accordingly such computer programs represent controllers of the computer .

Example embodiments are also directed to computer program products comprising software e.g. computer readable instructions stored on any computer useable medium. Such software when executed in one or more data processing devices causes a data processing device s to operate as described herein. Embodiments may employ any computer useable or computer readable medium known now or in the future. Examples of computer readable mediums include but are not limited to storage devices such as RAM hard drives floppy disks CD ROMs DVD ROMs zip disks tapes magnetic storage devices optical storage devices MEMS based storage devices nanotechnology based storage devices and the like.

Following are three example code snippets labeled Example Code Snippet 1 Example Code Snippet 2 and Example Code Snippet 3 respectively.

The following code snippet demonstrates an example feed that is generated by the selection of two plugins 

The following code snippet demonstrates an example configuration file that is generated by the selection of two plugins 

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. It will be apparent to persons skilled in the relevant art s that various changes in form and details can be made therein without departing from the spirit and scope of the invention. Thus the breadth and scope of the present invention should not be limited by any of the above described example embodiments but should be defined only in accordance with the following claims and their equivalents.

