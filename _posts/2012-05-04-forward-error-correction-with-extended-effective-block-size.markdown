---

title: Forward error correction with extended effective block size
abstract: In an aspect, in general, a forward error correction algorithm (FEC) utilizes an FEC block structure in a manner that extends the effective error correction such that it can approach an “infinite” length to obtain benefits typical of very large FEC block size without the commensurate computation cost.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08631309&OS=08631309&RS=08631309
owner: PMC-Sierra, Inc.
number: 08631309
owner_city: Sunnyvale
owner_country: US
publication_date: 20120504
---
Under 35 USC 119 this application claims the benefit of the priority date of U.S. Provisional Patent Application No. 61 482 288 filed on May 4 2011 and U.S. Provisional Patent Application No. 61 508 924 filed Jul. 18 2011 the contents of which are herein incorporated by reference.

This invention relates to forward error correction and more particularly forward error correction systems with an extended effective block size.

Electronic communication channels can be used to transmit large quantities of information. However such communication channels commonly include noise that can corrupt the transmitted information thus introducing errors. To mitigate the effects of communication channel noise error control systems are applied to the communication channels. In error controlled communication channels the sender of the information can add carefully designed redundant information i.e. error correction code to its messages. The redundant information is designed such that the receiver of the messages is able to use the redundant information to detect and correct errors without the need for the sender to re send the messages. Such schemes are generally referred to as Forward Error Correction FEC .

Various types of coding schemes can be used to produce redundant data for an FEC scheme. One commonly used scheme is the Low Density Parity Code LDPC . LDPC coding schemes which encodes data such that it can be decoded efficiently using a soft decision iterative decoder for example based on a factor graph representation.

In a general aspect an approach to forward error correction extends the effective block size by combining past transmitted codewords with new input words and by using a recursive decoding approach to use long range constraints in error correction.

In an aspect in general an encoding method includes accepting data for transmission to a receiver including accepting the data as a series of input words processing the series of input words to form a series of transmit codewords each transmit codeword being dependent on a plurality of input words and providing the series of transmit codewords for transmission to the receiver. Processing of the series of input words includes for each input word accessing selected elements from a data storage for previously encoded codewords to form past data and forming a combined codeword from the input word and the past data. The method further includes performing an encoding operation on the combined codeword forming an encoded codeword the encoded codeword including error control information and forming a transmit codeword from the encoded codeword. The transmit codeword having less information than the encoded codeword and omitting at least some information represented in the past data and storing at least some of the transmit codeword as elements in the data storage for previously encoded codewords.

Performing the encoding operation on the combined codeword may include encoding an input word portion of the combined codeword such that a receiver of the transmit codeword can detect an inversion of the transmit codeword. The combined codeword may be encoded using a code having odd check node order for the input word portion. Accessing selected elements from the data storage for previously encoded codewords to form past data may include accessing elements from multiple previous transmit codewords in the data storage. Each element accessed to form the past data may include a multiple bit portion of a previous encoded codeword.

Each transmit codeword may include a sequence of equal size multibit portions at corresponding offsets within the transmit codeword and the elements accessed to form the past data may include a portion of each of multiple previous transmit codewords each at a different offset with the transmit codeword. Forming the combined codeword may include concatenating the input word and the past data. Performing the encoding operation may include concatenating error control data representing the error control information determined from the input word and the past data to the combined codeword. Performing the encoding operation may include determining parity data from the combined codeword to represent the error control information.

Performing the encoding operation may include performing a block encoding operation. Forming the transmit codeword from the encoded codeword may include omitting a part of the encoded codeword representing the past data. Omitting the part of the encoded codewords may include omitting bits representing the past data.

Forming the combined codeword may include concatenating the input word and the past data performing the encoding operation may include concatenating error control data representing the error control information to the combined codeword and forming the transmit codeword from the encoded codeword may include forming the transmit codeword as a concatenation of the input word and the error control data omitting the past data. The input words may include binary data. The transmit codewords may include binary data. A size of the past data may be equal to a size of the transmit codeword. The selected elements from the data storage may include data elements from a plurality of previous transmit codewords.

In another aspect in general software stored on a tangible machine readable medium includes instructions for causing a data processing system to perform the aforementioned steps.

In another aspect in general software stored on a tangible machine readable medium including data for imparting functionality to a computer circuit design system to form a circuit description for a circuit for performing all the steps of any of the aforementioned steps.

In another aspect in general an encoder for accepting a series of input words and providing a corresponding series of transmit codewords for transmission to a receiver includes a data storage for previously encoded codewords and an encoding module configured process successive input words. The encoding module processes successive input words by accessing selected elements from a data storage for previously encoded codewords to form past data forming a combined codeword from the input word and the past data performing an encoding operation on the combined codeword forming an encoded codeword the encoded codeword including error control information forming a transmit codeword form the encoded codeword the transmit codeword having less information than the encoded codeword and omitting at least some information represented in the past data and storing at least some of the transmit codeword as elements in the data storage for previously encoded codeword.

In another aspect in general a decoding method includes accepting receive data including accepting a series of receive codewords each representing corresponding transmit codeword and processing the series of receive codewords to form a series of output words each output word being dependent on a plurality of receive codewords. The decoding method further includes providing output data including providing the series of output words. The processing of the series of receive codewords includes for each receive codeword applying a first decoding process to the receive codeword. The first decoding process includes accessing selected elements from a data storage for decoded codewords to form past data forming a first combined codeword from the receive codeword and the past data performing a decoding operation on the first combined codeword forming a first corrected codeword the decoding operation using error control information in the first combined codeword and for at least some receive codewords storing at least some of the first corrected codeword as elements in the data storage for decoded codewords. Providing the output data includes retrieving data from the storage for corrected codewords.

The method may further include for each element of a plurality of elements included in each of the plurality of receive codewords maintaining data characterizing results of previous decode operations which were performed on the element. Forming the first combined codeword from the receive codeword and the past data may include for each element of the plurality of elements in the receive codeword and for each element of the plurality of elements in the past data determining a value to include in the combined codeword according to the data characterizing previous decode operations. It may be determined if a corrected codeword produced by a previous decode operation is in conflict with the first corrected codeword and if so at least some of the data characterizing results of previous decode operations included in the elements of the previously decoded codeword may be invalidated.

The data characterizing previous decode operations may include a first version of the element which was received with the receive data a second version of the element which was successfully decoded in the receive codeword portion of the combined codeword a third version of the element which was successfully decoded in the past data portion of the combined codeword a first validity indicator which indicates the validity of the second version of the element and a second validity indicator which indicates the validity of the third version of the element.

Determining the value to include in the combined codeword may include ensuring that a value of an element obtained by decoding the element in the receive codeword portion of the combined codeword is not included in subsequent receive codeword portions of the combined codeword and ensuring that a value of an element obtained by decoding the element in the past data portion of the combined codeword is not included in subsequent past data portions of the combined codeword.

Invalidating at least some of the data characterizing results of previous decode operations included in the elements of the previously decoded codeword may include setting at least one of the first and second validity indicators to FALSE for each of the elements of the previously decoded codeword.

The method may further include accessing a plurality of processed receive codewords to which the first decoding operation has been at least once applied from the data storage for decoded codewords reprocessing the plurality of processed receive codewords including for each processed received codeword applying a second decoding process to the processed receive codewords. Applying a second decoding process to the processed receive codewords may include accessing selected elements from the data storage for decoded codewords to form past data forming a second combined codeword from the processed receive codeword and the past data performing the decoding operation on the second combined codeword forming a second corrected codeword the decoding operation using error control information in the second combined codeword and for at least some of the processed received codewords storing at least some of the second corrected codeword as elements in the data storage for decoded codewords.

The method may further include for at least some of the series of receive codewords applying the first decoding process which may include inverting a receive codeword portion of the first combined codeword according to a parity measure of the first combined codeword. The first decoding process and the second decoding process may be the same. Applying the first decoding process may include tagging corrected codewords in the data storage for decoded codewords for reprocessing.

The method may further include for each of a plurality of decode cycles during a first phase applying the first decoding process to a block of multiple receive codewords to which the first decoding operation has not yet been applied maintaining an indication of processed receive codewords that were updated during the first phase and during a second phase applying the first decoding process to the indicated processed receive codewords. Accessing selected elements from the data storage for corrected codewords to form past data may include accessing elements determined in multiple previous decoding operations from the storage. Each element accessed to form the previous codewords may include a multiple bit portion of a previous corrected codeword. Each corrected codeword may include a sequence of equal size multibit portions at corresponding offsets within the corrected codeword and the elements accessed to form the past data may include a portion of each of multiple previous corrected codewords each at a different offset with the corrected codeword.

Forming the combined codeword may include concatenating the receive codeword and the past data. Performing the decoding operation may include using parity data in the combined codeword. Performing the decoding operation may include performing a block decoding operation. Performing the decoding operation may include performing a Low Density Parity Check LDPC decoding operation. Performing the decoding operation may include performing an iterative decoding operation. Performing the decoding operation may include performing a soft decision decoding operation.

Accessing selected elements from the data storage for previous codewords may include accessing soft decision decoding output to form past data. The soft decision decoding output may include data representing probability values. The receive codewords may include data representing probability values. A size of the past data may be equal to a size of the receive codeword. The selected elements from the data storage may include data elements from a plurality of previous corrected codewords. The processing of each receive codeword may further include using a characteristic of the decoding operation to determine whether to store at least some of the corrected codeword as elements in the data storage for previous codewords.

Using the characteristic of the decoding operation may include using error related characteristic of the corrected codeword. Using the characteristic of the decoding operation may include using a characteristic based on a number of parity constraints satisfied by the corrected codeword. Using the characteristic based on a number of parity constraints satisfied by the corrected codeword may include using a characteristic further based on a number of parity constraints satisfied by the combined codeword.

In another aspect in general software stored on a tangible machine readable medium includes instructions for causing a data processing system to perform any of the aforementioned steps.

In another aspect in general software stored on a tangible machine readable medium includes data for imparting functionality to a computer circuit design system to form a circuit description for a circuit for performing any of the aforementioned steps.

In another aspect in general a decoder for accepting a series of receive codewords from a transmitter and providing a corresponding series of output words includes a data storage for decoded codewords and a decoding module. The decoding module configured process successive receive codewords by applying a first decoding process to each receive codeword. The first decoding process includes accessing selected elements from the data storage for decoded codewords to form past data forming a first combined codeword from the receive codeword and the past data performing a decoding operation on the first combined codeword forming a first corrected codeword the decoding operation using error control information in the first combined codeword and for at least some receive codewords storing at least some of the corrected codeword as elements in the data storage for decoded codewords. The decoder further includes an output module configured to provide the output words by retrieving data from the storage for corrected codewords.

The decoder may be further configured to access a plurality of processed receive codewords to which the first decoding operation has been at least once applied from the data storage for decoded codewords reprocess the plurality of processed receive codewords including for each processed receive codeword applying a second decoding process to the processed receive codewords. Applying the second decoding process to the processed receive codewords may include accessing selected elements from the data storage for decoded codewords to form past data forming a second combined codeword from the processed receive codeword and the past data performing the decoding operation on the second combined codeword forming a second corrected codeword the decoding operation using error control information in the second combined codeword and for at least some of the processed received codewords storing at least some of the second corrected codeword as elements in the data storage for decoded codewords.

In another aspect in general a data communication method includes accepting data for transmission to a receiver processing the series of input words to form a series of transmit codewords and providing the series of transmit codewords for transmission to the receiver according to all the aforementioned steps transmitting the transmit codewords over a communication channel to the receiver and accepting receive data including receiving a series of receive codewords each representing corresponding transmit codeword processing the series of receive codewords to form a series of output words and providing output data including providing the series of output words according to any of the aforementioned steps.

In another aspect in general a data communication system includes the aforementioned encoder and the aforementioned decoder coupled to the encoder over a communication channel.

Other features and advantages of the invention are apparent from the following description and from the claims.

The following description relates to a forward error correction algorithm FEC that utilizes an FEC block structure in a manner that extends the effective error correction such that it can approach an infinite length to obtain benefits typical of very large FEC block size without the commensurate computation cost. Such benefits include for example efficiently producing decoded data with a high coding gain in some examples more closely approaching the information theoretic coding rate limit than other known approaches.

In the examples described below an encoder utilizes past data present data and error correction data to implement a fixed size FEC block structure that when applied in an iterative recursive manner yields attributes of an FEC block with infinite length. To manage the complexity of implementing the algorithm a decoder focuses on relatively small interesting portions of the FEC block structure thus making the hardware implementation manageable.

Referring to a typical data transmission system is configured to accept a series of input words called present words from a sender . The present words are provided to an encoder where they are transformed into a sequence of transmit codewords TCW . In some examples each transmit codeword is encoded such that the present word can be successfully recovered after transmission over a communication channel e.g. by the use of error correcting codes . The transmit codeword is transmitted over the communication channel wherein errors may be introduced into the transmit codeword s data by corrupting factors such as noise in the communication channel . The result of transmitting the transmit codeword over the communication channel is a receive codeword RCW . The receive codeword is accepted by a decoder which recovers the present word and provides it to a receiver .

Referring to the encoder module utilizes present PR and past PS words and a low density parity check LDPC encoder to create a transmit codeword with the effect of providing an FEC block structure with attributes of an FEC block with infinite length.

In some examples the present word arrives at the input of the LDPC encoder to be encoded along with the past word which is selected from a Transmit History Storage according to a formula described in greater detail below. The LDPC encoder encodes the present word and the past word and produces an LDPC codeword shown in element which includes the present word the past word and an error correction section PC . Based on the LDPC codeword the transmit codeword is formed including only the present word and the error correction section from the LDPC codeword . The transmit codeword is output to the communication channel and is also stored in the Transmit History Storage .

Referring to a pseudo code implementation describes the operation of one example of the encoder module . The contents of the Transmit History Storage include a number of past transmit codewords referred to as TCW i where each index i refers to a row in the Transmit History Storage as shown in . Each stored transmit codeword includes Nbits. In some examples the number of transmit codewords included in the Transmit History Storage is limited to a predefined number N. In such examples the Transmit History Storage forms a circular buffer such that at time n entries for i n N 1 . . . n are present.

Referring to each of the transmit codewords stored in the Transmit History Storage is organized into M transmit codeword history elements where each transmit codeword history element includes a number of bits O. Thus since there are Nbits per transmit codeword the number of transmit codeword history elements per transmit codeword is M N O. The number of columns M and bits O is governed by the relationship M O N N N.

Again referring to the entry point of the encoder module is defined as Encoder Main Line . The encoder module initializes n to zero Line and then enters an infinite loop Line . For each iteration of the loop the value of n is incremented. The loop then waits for an input word to be accepted as a present word . When present word is accepted it is stored as PR Line . With the new present word in place the Encode procedure for the naccepted present word is initiated Line .

The Encode procedure for the naccepted present word is defined beginning at Line . The encoding operation forms the past word PS as a subset of the transmit codeword history elements of the Transmit History Storage Line .

In some examples the past information PS is formed by combining e.g. concatenating different transmit codeword history elements from different stored transmit codewords of the Transmit History Storage . For example PS may be defined as a concatenation indicated by the symbol of elements 1 11 1 where S is an encoder distance in rows used to provide separation in time between the accepted present word PR and the transmit codeword history elements used to form the past word PS . Referring to the transmit codeword history elements used to form the past word PS according to the above method are shown extending in the direction of diagonal .

Again referring to a combined codeword CC is formed by combining the past word PS with the present word PR e.g. by concatenation Line . The combined codeword is then encoded using for example an LDPC encoder Line . The result of the LDPC encoding operation is an LDPC codeword LCW . Referring to one example of an LDPC codeword includes a concatenation of the past word PS from the Transmit History Storage the present word PR and the error correction section PC generated by the LDPC encoder . In some examples the LDPC codeword is internal to the LDPC encoder and is not utilized by other modules of the encoder .

The error correction section is influenced by both the past word PS from the Transmit History Storage and the present word PR . In some examples the relationship between the number of bits in the present word N and the number of bits in the error correction section N is dictated by the desired code rate R where R N N N .

In some examples the length of the LDPC codeword is defined as N N Nbits where the total length is chosen to be convenient for hardware implementation. Furthermore in some examples the number of bits in the past word N is chosen to equal the total of Nand Nas follows N N N.

The Encode procedure then stores the present word PR and error correction information PC in the Transmit History Storage as TCW n Line . The Encode procedure then returns to the main routine where the current transmit codeword at TCW n is transmitted to the communication channel Line .

Following the transmission of the transmit codeword the loop in the main encoder routine proceeds to its next iteration and the procedure repeats.

Referring to the decoder module receives incoming soft input receive codewords RCWs from a receiver not shown . Each soft receive codeword includes values that represent a certainty e.g. probability log likelihood that each bit is a 1 for example with a continuous probability value in a range from 0.0 to 1.0. The decoder module utilizes the receive codewords and previously decoded receive codewords to produce a series of decoded output words . The decoder is configured to iteratively and efficiently decode receive codewords with a high coding gain.

In some examples one or more soft input receive codewords are received by the decoder module and stored in a Receive History Storage . The overall depth or decoder latency is determined by the size of the Receive History Storage . In some examples the Receive History Storage is organized as a circular buffer in the same manner that the Transmit History Storage organized in the transmitter however in general with a greater depth.

In one embodiment of the decoder operation of the decoder involves repeatedly forming a combined receive codeword CRCW from values in the storage decoding the codeword in a soft decision LDPC decoder and depending on the result of the decoding operation output of the decoder are written back to the storage. In this embodiment the previous codeword values are overwritten. In other embodiments the storage includes the originally received values and also stores outputs of decoding. In general each codeword consists of a present word and a past word formed from storage elements in the same manner as at the transmitter with the present word corresponding to a row of the storage and the past word corresponding to a diagonal section of the storage.

As is the case in the transmitter each codeword element is part of two different combined codewords as an element of a present codeword and as an element of a past codeword. Therefore in general each codeword element is used in at least two decoding operations. Furthermore as described in detail below decoding of a particular combined codeword i.e. a combined codeword with its present part associated with a particular receive time may be repeated in a controlled iteration to improve decoding accuracy and therefore a particular codeword element i.e. associated with a particular receive time and column may in fact be used as input to more than two decoding operations.

After a receive codeword is written to the Receive History Storage present and past receive codewords from the Receive History Storage are combined in a manner further described below to form a combined receive codeword CRCW which is passed to a soft decision LDPC decoder for decoding.

The soft decision LDPC decoder outputs a decoded combined receive codeword an initial parity measure a final parity measure and a soft in soft out bit flip result . The decoded combined receive codeword is a version of the combined receive codeword that is error corrected in a soft decoding sense by the LDPC decoder . The initial and final parity output measures are measures of the number of even parity checks of the combined receive codeword before and after the LDPC decoding process. The soft in soft out bit flip result indicates which if any sign bits of the decoded combined receive codeword are flipped compared with the input combined receive codeword .

In some examples the decoder processes groups of combined receive codewords in a decode cycle. A decode cycle will consist of the processing of E new receive codewords and up to F past receive codewords . The value of E F defines the processing limit of the decoder and is generally dictated by practical hardware implementation issues.

The outputs of the LDPC decoder are provided to a codeword filter that processes the decoded combined receive codewords using the initial and final parity measures to determine whether the present and past codewords included in the decoded combined receive codeword should replace the original present and past codewords in the Receive History Storage . If the codeword filter determines that present and past codewords included in the decoded combined receive codeword should replace the original present and past codewords stored in the Receive History Storage the decoded present receive codeword is provided to the Receive History Storage through a filtered present receive codeword output .

Another output of the codeword filter is provided to an RCW processing list which maintains a list of past receive codewords stored in the Receive History Storage that are tagged for reprocessing based on feedback from the codeword filter . The RCW processing list is provided to the Receive History Storage controller which manages reads and writes made to the Receive History Storage . In a single decode cycle the Receive History Storage controller chooses up to F previously decoded receive codewords in addition to the E new receive codewords to be processed according to the RCW Processing List .

In some examples the Receive History Storage contains a finite number of receive codewords . Thus when new receive codewords are received the oldest receive codewords in the Receive History Storage are pushed out of the Receive History Storage as decoded output words in a first in first out manner. Once receive codewords approach the end of the memory they are output and the soft values are turned into hard decision outputs by slicing against zero. In some examples the decoder outputs E decoded output words per decoder cycle.

Referring to a pseudo code implementation describes the operation of one example of the decoder module . First a Receive History Storage RCW i is defined Line . Each receive codeword entry in the Receive History Storage includes Nsoft bit values. In some examples the number of receive codewords that can be stored in the Receive History Storage is limited to a predefined number N. In such examples the Receive History Storage forms a circular buffer such that at time n entries for i n N 1 . . . n are present.

Referring to as was the case with the encoder s Transmit History Storage the Receive History Storage is divided into M columns of receive codeword history elements . Each receive codeword history element includes O soft values and each soft value includes B bits. In some examples B has a value between 3 and 8. Thus the total number of soft values in each receive codeword is N M O and the number of bits in each receive codeword is N M O B.

Again referring to at line the RCW Processing List RPL is defined e.g. as a queue of indices into the Receive History Storage . The Decoder Main routine begins at line of the pseudo code. First the Receive History Storage the RCW Processing List and an index variable k are initialized to zero Lines and . The Decoder Main routine then enters an infinite decoder loop Line . At the beginning of each iteration of the infinite decoder loop the loop waits for a block of E soft receive codewords to be provided to the decoder by a receiver not shown . In other examples decoder receives receive codewords one at a time. The newly received block of receive codewords is stored in the Receive History Storage Line .

Following the reception of the receive codewords the Decoder Main routine initiates a Decode block procedure for the kblock of E receive codewords Line . The definition of the Decode block procedure begins at line of the pseudo code. The Decode block procedure enters a loop that iterates through each RCW in the kblock of receive codewords and for each receive codeword calls the Decode word n procedure Lines .

The Decode word procedure is defined beginning at line of the pseudo code. The procedure is configured to decode a receive codeword using a combination of the present receive codeword and a selection of elements of previously decoded receive codewords . If the Decode word procedure determines that any of the elements of the selection of elements of the previously decoded receive codewords is incorrect the Decode word procedure tags the past receive codeword corresponding to the incorrect element for future re decoding.

An error check case is executed at the beginning of the Decode word procedure Line . In particular if the receive codeword at the nindex is outside of the boundaries of the Receive History Storage then the procedure returns without performing the decoding operation.

If the receive codeword at the nindex lies within the boundaries of the Receive History Storage the Decode word procedure continues executing. First the Decode word procedure forms a past codeword PS as a subset of the receive codeword history elements of the Receive History Storage . In some examples the subset of the receive codeword history elements of the Receive History Storage is formed by combining e.g. concatenating different receive codeword history elements from different stored receive codewords of the Receive History Storage . For example PS may be defined as a concatenation indicated by the symbol of elements 1 11 1 where S is an decoder distance used to provide separation in time between the most recently received codeword and the receive codeword history elements used to form PS . Referring to the receive codeword history elements used to form PS according to the above method are shown extending in the direction of the diagonal .

Again referring to a combined receive codeword CRCW is then formed as a combination e.g. a concatenation of the past codeword PS and the present codeword RCW Line . An initial measure of parity of the combined receive codeword IP is then determined Line . The combined receive codeword is provided to a soft decode operation e.g. a soft LDPC decode yielding a decoded combined receive codeword CRCW Line .

The decoded combined receive codeword includes a decoded version of PS PS and a decoded version of the receive codeword RCW . A final measure of parity of the decoded combined receive codeword FP is then determined Line .

Referring to the initial parity measure final parity measure and decoded soft combined receive codeword are used by the codeword filter to determine whether the soft decode operation converged i.e. the final parity measure is improved compared to the initial parity measure . For example if the ratio of the final parity measure to the initial parity measure is greater than a predetermined value e.g. 1.3 OR if the final parity is greater than a predetermined value e.g. 0.9 then it is determined that the soft decode operation has converged known as a decode pass Line . Conversely failure of the soft decode operation to converge is known as a decode fail. In some examples the codeword filter uses different information and different logical combinations of information to determine whether the soft decode operation has converged.

If the codeword filter determines that the soft decode operation has converged the decoded version of the receive codeword RCW is written into the Receive History Storage at the location RCW n thus overwriting the receive codeword with the decoded receive codeword RCW Line .

Furthermore if the codeword filter determines that the soft decode operation has converged the decoded past codeword PS is written back into the Receive History Storage Line . As was previously discussed PS includes a number of receive codeword history elements that are read from various locations in the Receive History Storage . Thus writing PS to the Receive History Storage involves updating each of the locations in the Receive History Storage with the corresponding decoded receive codeword history element of PS .

Once the receive codeword history elements are updated based on PS a loop iterates through each receive codeword history element of PS and PS and determines whether the decoded receive codeword history element in PS differs e.g. the sign of a soft bit value has changed from the receive codeword history element in PS Lines . If a difference is found the past receive codeword associated with the updated receive codeword history element is tagged for redecoding in the RCW processing list RPL e.g. by adding the index of the past receive codeword line .

Upon completion of the Decode word procedure a Redecode procedure is called Line . The Redecode procedure re decodes up to F RCWs tagged for redecoding e.g. by their index in the RCW Processing List Lines . In some examples the Redecode procedure iterates through the indices of the RCWs stored in the Receive History Storage starting from the most recently received RCW and iterating backwards in time. The Redecode procedure compares each index to the indices of the RCWs tagged in the RCW Processing List and when a match is found the Decode word procedure is called for the RCW at the matched index Line .

In some examples the number of RCWs from the RCW Processing List that can be decoded during a single decode cycle is dictated by practical hardware implementation issues. In other examples a predetermined number of RCWs from the RCW processing list are decoded per decoder cycle. In some examples the Redecode procedure processes elements in the RCW processing list in a first in first out manner. In other examples the Redecode procedure processes elements in the RCW processing list based on the amount of time they have spent in the Receive History Storage .

Upon completion of the Redecode procedure the decoded output words are output to the receiver Line . The decoder loop then increments k by 1 Line and begins its next decode cycle.

As introduced above a combined receive codeword which is provided as input to the soft LDPC decoder includes a present word corresponding to a row of codeword elements and a past word corresponding to a diagonal series of codeword elements and therefore each codeword element is part of two different combined codewords. In an embodiment described above each memory element is effectively initialized with the value determined from the channel without error correction and then selectively updated by overwriting the value using the result of certain decoding operations. When the codeword element is used again as part of a combined codeword i.e. as a codeword element of either a past word or a present word the then current value of that element is used for the input to the decoder.

In some examples for instance when high code rates are involved performance of the system can be significantly improved if the original channel values are retained in the codeword storage and used to form combined codewords for certain decoding operations in preference to decoder output values obtained in coding operations of combined codewords. Such decoder output values are stored or updated in the codeword storage but maintained in separate storage locations without overwriting the original channel value. This mode of operation is referred to as Extrinsic Memory Operation. 

In general a characteristic of one or more embodiments of the Extrinsic Memory Operation mode is that when an element is used as part of a present codeword the result of a previous decoding operation if any in which that element was used as part of a present codeword is ignored and similarly when an element is used as part of a past codeword the result of a previous decoding operation if any in which that element was used as part of a past codeword is ignored. When an element is used as a part of a present past codeword and that same element was used as part of a past present codeword that was successfully decoded i.e. decoded such that that all parity constraints are satisfied the value of the element resulting from that prior successful decoding is used as the input value for the new decoding in which the element is used as part of the present past codeword. Otherwise the original channel value is used in the new decoding. The successful decoding with the element was used as part of the past present codeword must have remained valid such that if an intervening decoding operation changes the result of any element such that the parity constraints are no longer satisfied the original channel value is also used.

To more specifically describe operation in an embodiment of the Extrinsic Memory Operation mode if a receive codeword history element was successfully decoded while it was used in the present portion of the combined receive codeword the decoded version of the receive codeword history element is not used in subsequent decoding operations where the receive codeword history element is included in the present portion of the combined receive codeword . Instead either the original un decoded version of the receive codeword history element is included in the combined receive codeword or if the receive codeword history element was previously decoded while it was included in the past codeword portion of a combined receive codeword the past decoded version is included in the present portion of the combined receive codeword .

In some examples the system enables extrinsic memory operation by maintaining three LLR values in each a receive codeword history element along with an indicator of the validity of each of the LLR values. One LLR value represents the un decoded version originally received as part of the receive codeword . This version is always considered to be valid for use in combined receive codewords .

A second LLR value is that which has been successfully decoded when the receive codeword history element was included in the receive codeword portion of the combined receive codeword . A third LLR value is that which was successfully decoded when the receive codeword history element was included in the past codeword portion of the combined receive codeword .

Referring to pseudo code is shown which describes a decoding process of an extrinsic memory operation mode. Note that the encoding process not shown in is substantially the same as is described above in .

A Decoder Main procedure begins at line of . The procedure first initializes the receive codeword RCW a receive codeword processing list RPL and an index variable k. Lines .

An infinite decoder loop begins at line . Within the infinite loop a for loop iterates to populate an RCW in the Receive History Storage . Lines . The RCW includes M receive codeword history elements each including five sub elements V V V I and I.

Following the formation of the RCW a Decode word k procedure is instantiated. Line . The Decode word procedure is defined beginning at line of the pseudo code. As was the case with the Decode word procedure of the Decode word procedure is configured to decode a receive codeword using a combination of the present receive codeword and a selection of elements of previously decoded receive codewords . If the Decode word procedure determines that any of the elements of the selection of elements of the previously decoded receive codewords is incorrect the Decode word procedure tags the past receive codeword corresponding to the incorrect element for future re decoding. The Decode word procedure of is further configured to implement extrinsic memory operation as is described below.

An error check case is executed at the beginning of the Decode word procedure. Line . If the receive codeword at the nindex is outside of the boundaries of the Receive History Storage then the procedure returns without performing the decoding operation.

If the error check case determines that the receive codeword at the nindex lies within the boundaries of the Receive History Storage the Decode word procedure continues executing. First a present codeword PR is formed from the nRCW in the Receive History Storage . In particular a heuristic scheme forms PR by iterating through all of the receive codeword history elements of the nRCW. Line . The Iindicator of each receive codeword history element is used to determine whether a past decode operation of the receive codeword history element has previously succeeded. Line . If Iis FALSE then no past decode operation has previously succeeded and the original channel value V for the receive codeword history element is used in PR. Line . Now referring to if Iis TRUE the past decoded channel LLR value V is used in PR. Line 

Then a past codeword PS is formed as a subset of the receive codeword history elements in the Receive History Storage . In particular a heuristic scheme iterates through all of the receive codeword history elements in the Receive History Storage which will be used to form PS. The Iindicator of each of the receive codeword history elements is used to determine whether a present decode operation of the receive codeword history element has previously succeeded. Line . If Iis FALSE then no present decode operation has previously succeeded and the original channel value V for the receive codeword history element is used in PS. Line . If Iis TRUE the present decoded channel value V is used in PS. Line 

A combined receive codeword CRCW is then formed as a combination e.g. a concatenation of the past codeword PS and the present codeword RCW Line . An initial measure of parity of the combined receive codeword IP is then determined Line . The combined receive codeword is provided to a soft decode operation e.g. a soft LDPC decode yielding a decoded combined receive codeword CRCW Line .

The decoded combined receive codeword includes a decoded version of PS PS and a decoded version of PR PR . A final measure of parity of the decoded combined receive codeword FP is then determined Line .

The Decode word procedure then uses a codeword filter to determine if the decode operation was completely successful i.e. all parity checks were satisfied by comparing FP to the number of parity checks N. Line . If it is determined that all parity checks were satisfied the receive codeword history elements in the Receive History Storage are updated.

Updating the receive codeword history elements includes replacing in the Receive History Storage the contents of Vof each of the M receive codeword history elements included in PR with the LLR value of PR . In some examples instead of setting the LLR values to the LLR value is limited to be in a range LLRCAP. Since PR was successfully decoded the Iindicator value is set to TRUE. If the sign of any of the LLR values in PR is opposite its sign in PR there is a disagreement between the LLR value decoded in the past and present decode operations. Line . This is a symptom of a decode operation which satisfied all parity checks but in reality was an erroneous decode operation. It is typically not known whether the past decode operation was erroneous or the present decode operation was erroneous. In this case the current decode operation is completed normally. The output of this decode operation is used to update the receive codeword history elements in the Receive History Storage . The disagreeing codeword is scheduled for redecoding by adding it to the RPL. Line .

Referring to updating the receive codeword history elements also includes replacing in the Receive History Storage the contents of Vof each of the M receive codeword history elements included in PS with the LLR value of PS . In some examples instead of setting the LLR values to the LLR value is limited to be in a range LLRCAP. If the sign of any of the LLR values in PS is opposite its sign in PS there is a disagreement between the LLR value decoded in the past and present decode operations. Line . This is a symptom of a decode operation which satisfied all parity checks but in reality was an erroneous decode operation. It is typically not known whether the past decode operation was erroneous or the present decode operation was erroneous. In this case the current decode operation is completed normally. The output of this decode operation is used to update the receive codeword history elements in the Receive History Storage . The disagreeing codeword is scheduled for redecoding by adding it to the RPL. Line .

Upon completion of the Decode word procedure a Redecode procedure is called as is shown in Line . The Redecode procedure re decodes up to F RCWs tagged for redecoding e.g. by their index in the RCW Processing List . In some examples the Redecode procedure iterates through the indices of the RCWs stored in the Receive History Storage starting from the most recently received RCW and iterating backwards in time. The Redecode procedure compares each index to the indices of the RCWs tagged in the RCW Processing List and when a match is found the Decode word procedure is called for the RCW at the matched index.

Upon completion of the Redecode procedure the decoded output words are output to the receiver Line . The decoder loop then increments k by 1 Line and begins its next decode cycle.

In some examples state information related to decode success and failure can be stored commonly for all O bits where the two codewords overlap. For example one bit for each of the two decoding operations can be included in each receive history storage element to represent decode failure 0 or decode success 1 .

In some examples the use of storage space can be minimized by overwriting some or all of the original version of the receive codeword history element with LDPC decoder output values once the receive codeword history element has been successfully decoded while included in both the present and past codeword portions of the combined receive codeword .

In some examples fixed log likelihood ratio LLR values from the decoder output i.e. a constant magnitude LLR setting such that only the sign bit of the output from a successful decode needs to be saved from any LDPC decode operation.

It is noted that although a number of embodiments are described in the context of soft decision decoding in some examples the Receive History Storage and or the decoder can use binary data.

In some examples LDPC codes can be constructed such that they are robust to 100 bit error bursts on the input data. For example any constituent code where the check node order of the PR PC section of the overall codeword is odd will be robust to 100 burst error events. If this condition is met then the initial parity of any receive codeword affected by the burst will tend towards zero indicating that a burst error has occurred. When this is detected all the PR and PC values can be inverted within the decoder and used for further processing. Considering the case where the initial parity of RCW is equal to X then after inversion the new parity reading will be NP X.

In some examples when the result of previously successful decoding operation is in conflict with the result of a currently successful decoding operation the decoding result of one or more of the codeword history elements of the previously successful decoding operations is invalidated. Such a conflict can arise when the sign of the Vvalue stored in a receive codeword history element differs from the sign of the Vvalue stored in the same receive codeword history element.

In some examples the Transmit History Storage and the Receive History Storage are implemented in Random Access Memory RAM .

The techniques and all of the functional operations described in this specification can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The system can be implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Method steps of the system can be performed by one or more programmable processors executing a computer program to perform functions of the system by operating on input data and generating output. Method steps can also be performed by and apparatus of the system can be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user the system can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. Interaction with a user does not need to be direct. The system can be implemented with an application programming interface allowing alternative means of exchanging input data and output data with the system.

It is to be understood that the foregoing description is intended to illustrate and not to limit the scope of the invention which is defined by the scope of the appended claims. Other embodiments are within the scope of the following claims.

