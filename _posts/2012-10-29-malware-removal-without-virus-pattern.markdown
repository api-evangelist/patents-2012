---

title: Malware removal without virus pattern
abstract: Antivirus software detects malware on a computer and the landing time of the malware is determined; a time window around the landing time is determined. Optionally requiring the landing time of the malware to be before the installation time of the antivirus software eliminates false positives. Any files of the computer systems that have a creation time within the time window are suspect. If the prevalence value and the maturity value of the suspect file are below respective thresholds then it is concluded that the file is malware and it is deleted. No virus signature or virus pattern that matches the deleted file need be relied upon or used. The detected malware may be the original mother file or a dropped file. An online prevalence and maturity database is used. The launching time of the malware may be used instead of the landing time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08938807&OS=08938807&RS=08938807
owner: Trend Micro Inc.
number: 08938807
owner_city: Tokyo
owner_country: JP
publication_date: 20121029
---
The present invention relates generally to malware identification and removal. More specifically the present invention relates to identifying malware without using a virus pattern.

As is known in the art today computer viruses or in general malware are identified using virus signature matching or by a behavior based heuristic technique. Virus signature matching requires analysis of known malware development of malware signatures and then deployment of the virus pattern file to customer sites. Behavior based heuristic detection also requires a constant effort to identify the behavior of known and unknown malware codifying that behavior into rules and then deploying those rules to customer sites. In general these approaches require constant effort to maintain protection.

The cost and effort for developing either signature based or behavior based patterns is increasing. This trend is perceived especially when a large amount of new malware is created by automation by the technique of polymorphism or by attacks of so called zero day malware. This zero day malware can be difficult to detect the first day that it is introduced to the world as no pattern files have been developed for it and it may exhibit behavior that is new. Detection of this type of virus would be beneficial. Even known viruses can cause problems if they are not detected right away or if antivirus software is installed and operational after the virus has infected a computer. These known viruses and also zero day malware cause problems because they are often capable of creating other malicious files known as dropped files if the virus is not removed right away. These dropped files are problematic because while the original virus may eventually be removed because its virus signature is present in a virus pattern file there may be no virus signature for the dropped files. Further there may be no heuristics capable of detecting these dropped files. The dropped files may then cause damage to the user s computer.

Accordingly an improved technique is desired that would be able to detect malware in general without the cost and effort of pattern creation and that would specifically detect and remove dropped files from known and unknown computer viruses without using a virus pattern file.

To achieve the foregoing and in accordance with the purpose of the present invention a technique is disclosed that is able to detect and remove malicious software such as dropped files without using a virus pattern file. One advantage is that malicious software can be deleted without the need for an antivirus researcher to spend time analyzing the malicious software and to create a virus signature or a virus pattern file. Malware that is unknown zero day malware or malware for which a virus signature does not yet exist can be detected.

In a first embodiment antivirus software is executed within a computer system and detects malware within the computer system. The landing time creation time or modification time of the malware application is determined and then a time window around the landing time is determined. Any files of the computer systems that have a creation time within the time window are suspect. If the prevalence value and the maturity value of the suspect file are below respective thresholds then it is concluded that the file is malware and it is deleted.

In a second embodiment antivirus software is executed within a computer system and detects malware within the computer system. The landing time creation time or modification time of the malware application is determined and then a time window around the landing time is determined. The landing time of the malware application is before the installation time of the antivirus software in order to eliminate any false positives and to be efficient. Any files of the computer systems that have a creation time within the time window are suspect. If the prevalence value and the maturity value of the suspect file are below respective thresholds then it is concluded that the file is malware and it is deleted. Advantageously no virus signature or virus pattern that matches the deleted file need be relied upon or used.

In a third embodiment antivirus software is executed within a computer system and detects malware within the computer system. The launching time beginning of process execution of the malware application is determined and then a time window around the launching time is determined. Any files of the computer systems that have a creation time within the time window are suspect. If the prevalence value and the maturity value of the suspect file are below respective thresholds then it is concluded that the file is malware and it is deleted.

As mentioned above a user computer may be infected by malware which then drops other malicious files. The original malware file might not have been detected initially because the antivirus software was installed after the computer became infected or due to some other delay in detection. Once the antivirus software is installed the original malware may be detected and removed but the dropped malicious files may not be detected because their signatures are not present in a virus pattern file.

Virus scan API is a software module or application programming interface capable of performing a scan of a user computer for viruses worms Trojans etc. in general any malware and may use techniques such as signature based detection i.e. virus pattern files heuristic based detection or any other suitable technique. Once called by the manager module module may perform a real time scan a manual scan an automatic scan at a particular time or other. In one particular embodiment module is implemented using the VSAPI module available from Trend Micro Inc. Other malware detection modules such as the DCE and SSAPI modules available from Trend Micro Inc. may also be used.

White list is any suitable database known in the art that includes identification of computer files that are known not to be malware. The change journal database is any suitable database on the user computer that includes records identifying when the computer files directories and other file system objects are created deleted or modified and the time of such creation or modification. Database may be implemented in any suitable format including use of records objects a relational database streams etc. In one particular embodiment a stream represents a particular volume or disk of the computer and records are written to each stream as a change occurs. Each record specifies the file being changed the type of the change and a timestamp. In one specific embodiment change journal database is implemented using the Change Journal mechanism of the NTFS file system under the Microsoft operating system. An API exists by which the Change Journal may be accessed.

Prevalence and maturity database is a single database or two separate databases that provide the prevalence and maturity for individual computer files. Database may be located on the user computer or maybe accessible over the Internet on a cloud based server computer as shown. The concept of prevalence of a computer file indicates historically how common the computer file is on a user computer within a computer network within an enterprise or worldwide. How common a computer file is may be indicated by the number of copies of a computer file on how many computers the computer file resides the number of distinct owners of the computer file. The prevalence portion of database may be queried by using the file name or unique identifier such as an MD5 the SHA 1 CRC or other. In general computer files that are rare i.e. have relatively fewer owners may be deemed to be more suspicious. The prevalence portion of database may be implemented by reference to the Census 2.0 database implemented by Trend Micro Inc. The Census 2.0 database records the number of machines on which a particular computer file is present in order to indicate file prevalence. Although this database may record the number of machines worldwide in one particular embodiment the database records the number of machines running a particular antivirus software product worldwide that also include the particular computer file. This database is preferably accessed by providing both a file name and its SHA 1.

The concept of maturity of a computer file indicates how long the computer file has been in existence on the user computer how long it has been in existence on any user computer or how long since it has been last modified. The maturity portion of database may also be queried by using the file name or unique identifier such as an MD5 the SHA 1 CRC or other. In general computer files that are immature i.e. have been in existence for a relatively shorter time than other computer files may be deemed to be more suspicious. The maturity portion of database may also be implemented by reference to the Census 2.0 database implemented by Trend Micro Inc. The Census 2.0 database records how many days a file has existed in the database in order to indicate file maturity. This database is preferably accessed by providing both a file name and its SHA 1. Data on files is collected and stored in the prevalence and maturity database by the feedback mechanism of an anti virus software product such as the Titanium product available from Trend Micro. The Titanium product installed on user machines collects the file data from the user s machine in the course of execution and stores the data in the database.

The damage cleanup engine is any suitable software module for removing or deleting suspected malware files and other artifacts of the malware. For example when provided with an input file name engine is able to delete that file and related files delete corresponding registry entries related to the input file name and to kill any related processes. In one specific embodiment module is implemented using the Damage Cleanup Engine DCE available from Trend Micro Inc.

As alluded to above it is possible that malware may infect a user computer at any time. It can be problematic if malware infects a computer before any antivirus software product is installed because the malware may then drop any number of other malicious files. Once the antivirus software is installed it may detect and delete the original malware but the dropped malicious files may not be represented in a virus pattern file and thus will not be detected and deleted.

It is also possible that antivirus software is installed on the user computer and that the computer is infected with malware after that time but that the malware cannot be detected because the antivirus software is incapable of detecting it or because the virus pattern file used does not have any corresponding virus signature able to detect the malware. It is also possible that malware infects the user computer after antivirus software is installed but that even if the original malware is detected by the antivirus software that any malicious files dropped by the malware may not be detected because there is no virus signature that matches the dropped malicious files.

Accordingly in step at some point in time antivirus software is installed upon the user computer and begins execution. In step the antivirus software detects a computer virus or other type of malware on the computer. The antivirus software may use any technique to detect the malware such as signature based detection heuristic detection or any other suitable technique. Even though the antivirus software may use a virus pattern including many virus signatures to detect this original malware there may be other malicious files dropped by this original malware for which a virus pattern does not exist or is not being used on the user computer. In any case even if a virus pattern exists external to the user computer that is capable of detecting these other dropped malicious files the present invention as described below is capable of detecting and deleting these other dropped malicious files without the use of such a virus pattern. Furthermore any heuristic based detection techniques would likewise not be needed to detect and delete these other malicious files.

Once the original virus is detected in step number the landing time and launching time of this virus is determined. The landing time of the virus refers to when the virus was created on the user computer or when it was last modified. In a preferred embodiment the landing time is determined by taking the later of the creation time and the modification time. Also relevant is the launching time of the virus which refers to the time when a process initiated by the virus first starts executing on the user computer. Because it is likely that malicious files dropped by the virus are created close in time to when the virus is first created last modified or starts executing these landing and launching times will be helpful in finding any dropped files. In one embodiment the operating system records when a process is launched and we can retrieve that data from the operating system. The process launch time can be used as well as the file landing time to form a time window. Any file created or modified near the process launch time or near the file landing time may be treated as suspicious and will trigger further review. In other words two time windows may be used one surrounding the process landing time and one surrounding the process launch time.

Because there is a risk that the present invention may detect false positives an optional step may be implemented in order to reduce these false positives. For example the invention may only be enabled if a full scan had been executed because there are very few users who will typically execute a full scan. If a full scan had not been executed then the process may end. Or if it is believed that the antivirus software installed in step is capable of detecting and deleting immediately any virus installed after the antivirus software has been installed then the present invention need only be used if the landing or launching time of the virus is before the antivirus software had been installed. Accordingly if the landing or launching time of the virus is not before installation of the antivirus software then the process may also end. A virus that lands or launches before installation of the antivirus software is more of a risk because it may have dropped other malicious files that cannot be detected even though the antivirus software may eventually delete the original virus file. Further review may also be triggered for those viruses whose detection times are close to their landing times during a real time scan.

In any case if further review is warranted and there are no limitations that would cause the process to end then in step the relevant time window or windows are determined. In order to locate any files possibly dropped by the original virus a window of time around both the landing time and the launching time is determined. A configurable length of time is used to create the time window. For example a time window of approximately 20 minutes is determined by using a length of time of approximately ten minutes both before the landing time and after the landing time. Of course the configurable length of time may range from any value on the order of seconds up to minutes and even hours or days. While it is important to have a time window that extends after the virus landing time it is also important to have a time window that extends before the virus landing time. The reason is because while it is believed that the virus detected in step is the original virus or so called mother virus meaning that any files it drops will necessarily be dropped after it lands it is possible that the virus detected in step is potentially the second or third malicious file dropped by the original virus. In this situation it is possible that the original virus went undetected and only one of the latter dropped files has been detected. Accordingly it is possible that the original virus and other dropped files have creation dates before the landing time of the virus detected in step . So while the antivirus software was successful in detecting the original virus or one of its dropped files it patterns or heuristics may have been unsuccessful in detecting other dropped files or even the original virus file. As mentioned two time windows may be determined one around the landing time and the other around the launching time. The launching time window is used because a malware process will start to drop files once it is launched. So the dropped file landing time may be close to the malware process launch time. Both the launching time and landing time can be used and either one matching will trigger further review.

Once a time window or windows has been determined in step any other files are identified on disk on the user computer that fall within the time window or time windows. In other words any file on the hard disk of the computer that was either created within the time window or was modified within the time window is identified. These files may be identified using any suitable mechanism within the computer operating system that allows file creation or modification times to be determined. For example any suitable change journal implemented by the computer operating system may be used. In one specific embodiment module accesses the Change Journal under NTFS in the Microsoft operating system using an API call in order to determine any files that fall within either of the time windows.

Next as an optional step these files identified in step may be further screened to exclude any files that are likely not malware in order to avoid false positives. For example each file name or unique identifier such as a message digest or SHA 1 may be sent to a white list in order to determine if the file is known to be benign. Or files may be excluded from further analysis if they belong to the common cache or are part of an exclusion configuration. When a file is in the common cache it means that the file has already been scanned and the file has been signed by a trusted authority. The exclusion configuration is typically a user defined white list. Files in the exclusion configuration will be excluded from further analysis. Any files screened out in step will be excluded from further analysis.

In step the prevalence of each file identified in step and not screened out is determined. As mentioned above the prevalence of the file indicates how common the file is whether that be within a particular network within a group of computers within an enterprise worldwide among a particular group of computers etc. The particular group in which the occurrence of the file is determined is a configurable setting that may be left up to the user. In one particular embodiment the prevalence of the file is determined based upon the number of individual end user computers that include at least one copy of that file. The prevalence database is preferably implemented on a cloud based server as a backend service. The input provided to the database may be the name of the file or its SHA 1 or preferably both and the output received from the database will be an integer indicating the prevalence of that particular file e.g. how many end user computers have a copy of that file . If the file is not present in the database then a value of zero will be returned. In general the lower the prevalence value the more suspicious the file is.

In step the maturity of each file identified in step and not screened out is determined. As mentioned above the maturity of the file indicates how long the file has been in existence. Maturity may be determined based upon how long a particular file has existed within the maturity database based upon the earliest creation date of a file within the database or using other criteria. The particular criteria used is a configurable setting that may be left up to the user. In one particular embodiment the maturity of the file is determined based upon how long the file existed within the database. The maturity database is preferably implemented on a cloud based server as a backend service. The input provided to the database may be the name of the file or its SHA 1 or preferably both and the output received from the database will be a number indicating how long that particular file has existed within the database e.g. a number indicating hours or days . If the file is not present in the database then a value of zero will be returned. In general the lower the maturity value the more suspicious the file is. In one particular embodiment both the prevalence and maturity databases are located together and are implemented in an online software module known as Census 2.0 available from Trend Micro Inc.

In step both the returned prevalence and maturity values for a suspect file are compared to prevalence and maturity thresholds. For example the prevalence threshold may be set to five and any file having a prevalence value less than five may be considered suspicious. In another example the maturity threshold may be set to five hours and any file having a maturity value less than five hours may also be considered suspicious. Of course these prevalence and maturity thresholds may have a wide range of values that are configurable by the user. In step it is determined whether the prevalence and maturity values for a particular file warrant that no action be taken in step or that the file be deleted in step . A determination as to whether the file be deleted may depend upon whether one or both of the values are below threshold whether one value is far below the threshold or a combination of these determinations. In one particular embodiment if both values are below their thresholds then in step the suspicious file is deleted.

The suspicious file may be deleted by calling damage cleanup engine which may take action such as deleting the suspect file and any related files deleting related registry entries or killing related processes. Advantageously this suspicious file or suspicious files identified in step is determined to be malware and deleted based upon the time window file prevalence and file maturity. It is not necessary to use any virus pattern virus signature or heuristics in order to identify and delete these files.

Once a determination is made as to whether no action should be taken or the file should be deleted a report may be sent from manager module to any antivirus product being used to the user to a database or to any central server. The report may include threat type suspicious threat name the file full name detection time action type and action result.

CPU is also coupled to a variety of input output devices such as display keyboard mouse and speakers . In general an input output device may be any of video displays track balls mice keyboards microphones touch sensitive displays transducer card readers magnetic or paper tape readers tablets styluses voice or handwriting recognizers biometrics readers or other computers. CPU optionally may be coupled to another computer or telecommunications network using network interface . With such a network interface it is contemplated that the CPU might receive information from the network or might output information to the network in the course of performing the above described method steps. Furthermore method embodiments of the present invention may execute solely upon CPU or may execute over a network such as the Internet in conjunction with a remote CPU that shares a portion of the processing.

In addition embodiments of the present invention further relate to computer storage products with a computer readable medium that have computer code thereon for performing various computer implemented operations. The media and computer code may be those specially designed and constructed for the purposes of the present invention or they may be of the kind well known and available to those having skill in the computer software arts. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs and holographic devices magneto optical media such as floptical disks and hardware devices that are specially configured to store and execute program code such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer code include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter.

Although the foregoing invention has been described in some detail for purposes of clarity of understanding it will be apparent that certain changes and modifications may be practiced within the scope of the appended claims. Therefore the described embodiments should be taken as illustrative and not restrictive and the invention should not be limited to the details given herein but should be defined by the following claims and their full scope of equivalents.

