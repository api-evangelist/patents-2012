---

title: Multi-lingual knowledge base
abstract: Mechanisms and methods for enabling customers to manage multi-lingual knowledge bases, so that end users can access articles based on a language the end user chooses, while also providing publishers with tools to manage articles in different languages and to translate them, either using an external vendor or leveraging in house translators, and providing administrators (knowledge managers) with the ability to setup or choose which languages are available in the knowledge base, as well as default language assignments for translations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09195648&OS=09195648&RS=09195648
owner: salesforce.com, inc.
number: 09195648
owner_city: San Francisco
owner_country: US
publication_date: 20121004
---
This application is a continuation in part of U.S. patent application Ser. No. 13 272 015 entitled MULTI LINGUAL KNOWLEDGE BASE by Etienne Giraudy filed on Oct. 12 2011 which in turn claims priority benefit of U.S. Provisional Patent Application 61 499 878 entitled MULTI LINGUAL KNOWLEDGE BASE by Etienne Giraudy filed on Jun. 22 2011 and the entire contents of both are incorporated herein by reference.

The following commonly owned co pending United States patents and patent applications including the present application are related to each other. Each of the other patents applications are incorporated by reference herein in its entirety 

U.S. patent application Ser. No. 13 272 015 entitled MULTI LINGUAL KNOWLEDGE BASE by Etienne Giraudy filed on Oct. 12 2011 

U.S. Provisional Patent Application 61 499 878 entitled MULTI LINGUAL KNOWLEDGE BASE by Etienne Giraudy filed on Jun. 22 2011 and the entire contents of both are incorporated herein by reference 

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

A community also commonly referred to as a forum web forum and community website is a group of users that share a common interest and tend to communicate with one another about that common interest. A community website is a website in which users share ideas that are related to the community. Forum content may be used to refer to a question or questions and answers discussed in a forum. Traditional forums have focused on providing a meeting place for a virtual community of Internet users who share common interest.

The widespread use of the Internet which crosses national and cultural boundaries as well as the globalization of business opportunities has presented the need to provide information in various languages as well as targeting information to specific groups. Accordingly it is desirable to provide techniques for managing a multi lingual knowledge base in a database network system.

Systems and methods are provided for managing a multi lingual knowledge base in a database network system.

Although various embodiments of the invention may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments of the invention do not necessarily address any of these deficiencies. In other words different embodiments of the invention may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

As used herein the term multi tenant database system refers to a database system that has multiple tenants that each has a degree of access to at least a portion of the database system that may or may not be the same as the degree of access as other tenants. Each tenant may be an individual or an organization that may have representatives members employees customers and or other entities associated with the tenant which in turn as a result of the tenancy of the tenant in the multitenant database may also have different degrees of access to the database. The degree of access granted to those associated with the tenant and or which entities e.g. representatives members employees customers and or other entities are associated with the tenant may be determined by the tenant. The database system may include multiple databases and each database may be partitioned and or otherwise shared amongst multiple tenants. The multitenant database may be provided on demand that is as a service to the tenants so that the tenants have use of the multitenant database for their own purposes that determined by the tenants but the tenants do not need to worry about the maintaining the database the operations of the database or how the database works.

A community also commonly referred to as a forum web forum and community website is a group of users that share a common interest and tend to communicate with one another about that common interest. A community website is a website in which users share ideas that are related to the community. The focus of the communities may be enterprise communities which are communities structured around a business ecosystem partners customers vendors employees etc.

Forum content may be used to refer to a question or questions and answers discussed in a forum. The forum contents may reside in a database. The forum may include various features and or tools that are available to users and or administrators. Some content may be placed initially on the forum at the launch of the website which gives an initial significant value to the website that may be linearly proportional to the number of users that are able to view the content and that are expected to be interested in the content. Enabling user interaction with one another via the posting of new ideas the commenting on ideas and or participating in discussions causes the value of the website to increase in the community.

Traditional forums have focused on providing a meeting place for a virtual community of Internet users who share common interest. However forums may also be used for lowering costs in a business context by providing a cheaper avenue for customer service. Instead of calling into a call center where a human agent takes calls and answers questions forums may provide a more scalable method where customers may help each other answer their own questions.

Generally forums serve a similar function to customer support. However there are questions that may come into a forum that may need to be escalated to a customer support agent for a variety of reasons. A few examples of such cases may be the importance of the issue the severity of the customer s problem alluded to in the question a question unanswered by the community and or the value of the customer among other reasons. Questions and issues in a forum that are deemed to be of widespread interest to a community or are frequently encountered may be turned into an article. A collection of articles may be grouped together to form a knowledge base.

Embodiments provide multilingual capabilities to knowledge base KB applications including the ability to create and publish translations of pre existing knowledge articles by internal users and or external translation vendors.

Embodiments enable tenants to manage multi lingual knowledge bases so that end users may access articles based on a language the end user chooses while also providing publishers e.g. tenants with tools to manage articles in different languages and to translate the articles. In an embodiment the tenant either using an external vendor or an in house translators and providing administrators knowledge managers with the ability to setup or choose which languages are available in a KB as well as default language assignments for translations.

In at least one embodiment end users may be categorized into three groups employees portal users and web users with each group presented with different capabilities in the multi lingual knowledge base.

Employees who are members of an organization that is a tenant in a multi tenant database may interactively select the language that is being used to search the knowledge base using a language selector in an article tab of a user interface UI which will be explained and illustrated in greater detail below. Under an article tab employees may have an extra drop down menu in a filter section that lists the available languages in which knowledge articles may be configured in. In at least one embodiment by default the language selected for an article from the knowledge base is the UI language of a user if the UI language is supported by the knowledge base. If the UI language is not supported then a different default Knowledge language may be selected. In at least one embodiment the language drop down control is not sticky meaning that each time the user goes to a new article under the article tab the language value is reset to the default one rather than being kept set to the last language chosen. When a user changes the language value the UI language does not change only the article language changes.

For example a multi tenant application is configured to display articles in three languages French English as default and Spanish while a user s UI language is French. In the present example when the user opens the article tab the language selected is French since the UI is in French and the articles are also displayed in French. If the user changes the language value to English under the article tab the UI stays in French but articles are then displayed in English. Furthermore in the article display page the user may be able to switch to other language versions of the article if other language versions are available through a drop down list selector. Again switching languages may only change the language of the articles the language of the UI stays in the UI language of the user.

Portal users may use the multi lingual knowledge base in the language matching their UI language defaulting to the KB default language if the language of the UI is not supported by knowledge base . The same features that were described above for employees may also be available for portal users customer portal partner portal 

Available language access for Web users also referred to as public knowledge base PKB users or anonymous users who are not affiliated with the tenant organization but for example may visit the tenant s website and or participate in the tenant s forum discussion may depend on the implementation of embodiments where the language choices may range from a different PKB per language to a cookie based persistent language selection using a language selector. In at least one embodiment users may be able to pick languages for article display with a drop down menu on the user s UI.

Knowledgebase publishers may be categorized into one of several categories such as knowledge managers simple contributors translation managers and translators. It is noted that additional categories may be implemented as required and or in other embodiments. Contributors may be able to work contribute content on mono lingual articles the master language version with the possibility to define the language of the article. Knowledge managers may have the same responsibilities as a mono lingual contributor of knowledge but also may be responsible for requesting translations of selected articles. Some knowledge managers or in an embodiment each knowledge manager may only decide whether to request a translation to a specific language or set of languages and in another embodiment or other knowledge manages may be able to select from any available language into which to request translations. Translation managers may be able to export articles to be translated by a vendor and then later the translation manager may import the new translations into the KB. Translators are users able to translate articles into other language s .

In at least one implementation of the multi lingual knowledge base knowledge managers administrators may be able to easily add remove languages that are supported in the KB when multi lingual feature is enabled. Knowledge managers may also be able to select a default language and default assignments for translations that are requested these assignments may determine if translations are done outside of the application or whether to use an in house translator e.g. human for translating the article.

In embodiments discrepancy alerts may be provided to notify users of out of sync processes. For example if a modification needs to be made on a master article while the master article is in the process of being translated in the application or outside the application the mechanisms ensure that the user who is modifying the source article knows that one or more translations are in progress on the master article. The mechanism also provides users who save a source master article with a means to indicate if the changes made to the source article have an impact on any translations that may be associated with the source article. Translations that are associated with a source article undergoing changes are given a discrepancy alert.

In embodiments an import feature may import and or export a zip file as input. The zip file may contain translated articles. The user may have the option to choose to automatically publish the translations. If the master version is already published a translation may then be automatically published or if the master version has not been published the import files may be marked as ready for publication. The user may also have the option to choose to re assign translations to a different queue or optionally a different user in a translations to be reviewed queue. Import similar to export may be asynchronous in the system for managing a multi lingual knowledge base allowing the user to perform other activities while waiting for the import to occur. In an embodiment when the user imports or exports a document an import task may be created and queued in the message queue and the message queue is used for processing tasks that are not required to be performed in real time allowing other tasks to be performed while the import is being performed.

Next mechanisms and methods for utilizing objects which may be created using a Unified Data Dictionary UDD for modeling the objects for managing a multi lingual knowledge base will be described with reference to example embodiments. In this specification metadata refers to the information about the data in the multi tenant database system. Metadata describes the characteristics of the data objects such as the type the name and the size of the data. Metadata may also contain information about the data table as such as the length of fields the number of columns and other information. Metadata may include the relationship of the data objects. Metadata may help in understanding and interpreting the contents of a database system.

Server side system may be part of an on demand multi tenant database system. In this specification the names of objects pointers and variables are chosen to describe the function and or purpose of the object pointer or variable. The specification is not limited to the specific objects variables or pointers mentioned but any combination of objects variables or pointers that will accomplish the same or a similar purpose may be substituted for the specific object pointer or variable mentioned.

In an embodiment in a multi tenant database system application server sends data and other messages e.g. output from application programming interface API routines called by the user system to user systems retrieves data and other information for users receives messages e.g. the results of interacting with data and or functions calls to API functions from users. User system is described further in conjunction with below . Application server also serves as a platform that hosts optional forums knowledge base document manager KB translation manager and other applications. Optional forums is an application for carrying out discussions such as by forum members posting questions and answers. As described earlier a forum which may also be referred to as a community web forum and community website is a group of users that share a common interest and tend to communicate with one another about that common interest. A community website is a website in which users share ideas that are related to the community. In an embodiment the content of some of the discussion in the forum may be stored in the knowledge base in a searchable form for others to benefit from. Knowledge base document manager serves to organize and access articles in the knowledge base. Knowledge base translation manager controls the translation of articles in the knowledge base and other multilingual features of embodiments disclosed herein. Knowledge base document manager and the knowledge base translation manager determine whether the state of the article and whether the article should be in a queue with the user online in an archive or is a draft. Other applications may include applications required to perform database operations and one or more instructions that cause a processor to render a webpage. Rendering the webpage may involve performing computations such as retrieving information which may be in response to the user input. Database may include the contents of forum . Database may contain content from the forums may be organized into articles that serve as a basis for a knowledge base. Database may store a knowledge base that is organized by knowledge base document manager .

Database may be a multi tenant relational database having different portions dedicated to different tenants. Application server may access database to store information received from the user system or may receive a messages that triggers a query for information stored in database . Database may include a database server and a database. Application server as a result of a message form a user triggering a query may also retrieve information from database requested by the tenant. Users such as developers may access database via applications server in order to test and or add modify features to database .

Knowledge base is a collection of articles that are written to address problems and issues that may have a high interest and or that are expected to be of interest to the community of users that interact with the tenant. Master articles are the master versions of articles. Master articles are written in a particular language which is the original language of the article. Translations are translated versions of the master articles . Translations may be made available to users via knowledge base . UDD is a library of templates of objects that are used for creating common type of objects. UDD stores data object definitions of a variety of types of objects and another application e.g. a companion application creates the actual objects from the data object definitions. A data object definition is included in the UDD from which new KAs and new knowledge article versions KAVs may be constructed.

In an embodiment user system which will be discussed further in conjunction with may be any machine or system that may be used by a user to access a network or a server system discussed further in conjunction with . Network further discussed in conjunction with may be any network or combination of networks of devices that communicate with one another. Depending on the access level granted user system may interact via network with tenant server and a multi tenant database system hosted on the server of which will be described further in conjunction with . Tenant server may belong to an organization or company that is a tenant in the multi tenant database hosted on server . Server may host a multi tenant database that may have a knowledge base with multi lingual articles.

As described in a user system representing a customer of the organization or company may interact with tenant server via network to inquire about product information or product support as denoted by bidirectional arrows 0. In response to the customer inquiry the tenant server may contact server via network as denoted by bidirectional arrows 1 to access a knowledge base stored on server . The tenant server may then communicate with the server on behalf of the customer so that the customer may access knowledge base via the tenant server.

In an embodiment each of the steps of method may be a distinct step. In other embodiments method may not have all of the above steps and or may have other steps in addition to or instead of those listed above. The steps of method may be performed in another order. Subsets of the steps listed above as part of method may be used to form their own method. In an embodiment there could be multiple instances of method .

In step the client side user device discussed in conjunction with sends a request to the server for an article. The user request may be initiated through a page e.g. a webpage or other page with an input form or link to articles in the knowledge database. In step the user system receives a language version of the requested article from the server system based on the user s language settings and the availability of translations in the knowledge base.

In an embodiment each of the steps of method may be a distinct step. In other embodiments method may not have all of the above steps and or may have other steps in addition to or instead of those listed above. The steps of method may be performed in another order. Subsets of the steps listed above as part of method may be used to form their own method. In an embodiment there may be multiple instances of method .

KnowledgeArticle may be a table or object for knowledge articles. KnowledgeArticle may be a table that lists all of the knowledge articles and may include. Id of Knowledge article is an identification of an article to distinguish a given article from other articles in a knowledge base. Each article from a knowledge base may have a single KA row or attribute in the KA table or object KnowledgeArticle of the database where the row represents the article as a whole. The KA row may provide the article with a stable Id and with a stable life span. The life span is of the whole article including all of the article s versions. In an embodiment KA is a primary key of KnowledgeArticle . Although KnowledgeArticle is indicated as only having the attribute Id KnowledgeArticle may have other attributes. In at least one embodiment articles in a knowledge base are modeled through two main unified data dictionary UDD entities one UDD entity corresponding to KnowledgeArticle KA and one UDD entity corresponding to KnowledgeArticleVersion KAV having KAV table as shown in .

In embodiments a KAV is a child of KA representing a specific article. A particular knowledge article in KA may have a particular ID which may be the same as the ID of a particular KAV table KAV . KAV table KAV may also include columns for KnowledgeArticleId PublishStatus IsMasterLanguage Language and VersionNumber . In other embodiments KAV may not have all of the elements or features listed and or may have other elements or features instead of or in addition to those listed.

The KAV is the version that contains the actual content of the article. An article version may be either Draft Online or Archived as defined by the KAV.PublishStatus field. KnowledgeArticleId identifies the knowledge article. In an embodiment Id has the same KnowledgeArticleId value and may be a common key via which information in the tables may be joined to form various views. PublishStatus indicates whether an article has been published and available for viewing and or may indicate the state within a state machine of an article which may includes states such as editing archived and or published for example. As an aside and as explained elsewhere during the editing state the article is in the draft state and there may be two versions of the article and when the article is in published state the article is published the article is online and available for viewing to the general public. IsMasterLanguage indicates whether the article is in the master or originally authored language. The Language is the language the article version is in. VersionNumber identifies which version of the article is being accessed.

When an article is first created in addition to the KA row in the KA table of the database a KAV row is also created as the first draft version in the KAV table . The first draft version may only be accessible to publishers who have Manage Knowledge profile permission also referred to as a knowledge manager. Once the knowledge manager has finished writing the content of the article the knowledge manager may publish the draft article which may make the article become online as indicated by its KAV.PublishStatus field. An article version that is online may be seen by users that have read only access to the knowledge base such as agents portal users etc. . If at a later time an article needs to be changed or updated a knowledge manager or publisher may create a new draft version from the existing online version while still leaving the online version accessible. Once an article should no longer be available online it may be archived.

In embodiments an article that has only been published in a single language may be referred to as mono lingual article the version of which would correspond to a single KAV row. However in order to support multiple language versions of an article a multi lingual article the multiple language version is now defined as a set of KAV rows one row for the master language or source language which is the language in which the article was originally authored and one row for each language in which the article has been translated. The KAV.IsMasterLanguage and KAV.Language fields provide indications of which article is written in the source language and which articles are translated from the originally authored document through the KAV rows. In embodiments the KAV rows for a specific version share a common version number accessible through the KAV.VersionNumber field.

The initial state of the article is draft . Articles in the state draft are drafts of the articles that may need further work and or review by others. In the monolingual state diagram a draft moves to an online state by publishing the draft. Online state is the state in which the article is published and available online. The article remains in online state as long as the article is current. In addition an online article may transition to an archived state when it is determined that the article is no longer current or needed. For example if a new article is published with more complete information on the same subject the earlier article may transition to archived state . Archived state stores prior published articles that are no longer current or no longer needed in the knowledgebase. Alternatively an article in the online state may move to draft state for further editing. For example it may be discovered that there are many typos in the article in online state or it may discovered that the information needs to be revised in light of new developments. Furthermore an archived article may also be edited and move back to the draft state . For example an article may be moved to the state archived article due to lack of interest. Then at a later date perhaps due to a change in technology there is renewed interest in the subject of the article. In which case the article would be moved to draft state so that the content could be reviewed to see if the article needs to be updated and revised prior to publishing.

The translation sub workflow of is initiated from the KnowledgeArticle KA publishing workflow as shown in for a single language when a KAV translation is created from an existing article in either a draft or online state as indicated by the arrows labeled translation connecting the states draft and online of the master document to the state translate of the translation. In order to implement the translation sub workflow translation related transition types are included in the workflow model are PublishTranslation automatic publication and Translate ReviseTranslation. When a translation is ready for publication the translation is transitioned via the PublishTranslaiton transition from the state translate to the state ready for translation . If the master article has published and is in the state online the translation automatically transitions to the state online . Otherwise the translation remains in the state of ready for publication until the master document is published and then automatically transitions to the state of online. While the article is in the state of online or in the state of ready to publish the article may be transitioned via the Translate ReviseTranslation transition back to the translate for revising the translation. Once in the state of online the translation may be automatically archived if the master article is archived and transition to the state of archived or may transition back to the state translate if the translation needs to be revised.

More specifically the transitions types PublishTranslation and Translate ReviseTranslation may be included in the static enumerated type enum TransitionType. An enumerated type is a data type consisting of a set of named values called elements members or enumerators of the type. The enumerator names of the Transitions Type include identifiers that behave as constants in the language. A variable that has been declared as having an enumerated type may be assigned any of the enumerators as a value. Both of the transition types PublishTranslation and Translate ReviseTranslation may be secured through a user interface UI by a user and or group through the selection of Setup Articles Action Security and persisted in ProcessTransitionSecurity.

In the translation sub workflow embodiment shown in there are two states nodes in the model TranslationInProgress and TranslationCompleted ReadyForPublication in diagram 7 . TranslationInProgress is the state for translations that are currently being written and translation completed is the state for translations that are finished being written. Furthermore there are two transition types. One type of transition is PublishTranslation which is the transitions that causes a translation to be published and allows a translation to move from the state of TranslationInProgress to the state of TranslationCompleted . Another type of transition is Translate ReviseTranslation which is the transition that results when it is determined that the translations needs to be revised. Translate ReviseTranslation allows a translation to move from the state of TranslationCompleted shown as Ready for Publication in to the state of TranslationInProgress state shown as In Progress in which removes the translation from publication if the translations was published.

The workflow engine of embodiments may support the PublishTranslation transition type in the following manner. The workflow engine checks if the PublishTranslation is accessible from the current state of the workflow and that the current user has the right to do the transition. If in the current state the PublishTranslation transition is valid and the transition can only be valid if the translation is in the state ready for publication the transition is made and ProcessInstance is updated to reflect the transition change to a new state and the translations completed date is set to the current date. In an embodiment the PublishTranslation is valid and the translation is published only if the article that corresponds to the translation has published. In an embodiment if the article that corresponds to the translation has not published the PublishTranslaiton is not valid and the translation is not published . Thus in an embodiment once in the ready to publish state the article remains there until the master article publishes. Next the knowledge base is queried to check the master article s KAV.PublishStatus for translation KAVs which may involve finding an article with the same article id and version number and for which IsMaster is true as indicated by KAV.PublishStatus KAV is a table and PublishStatus is a column in the KAV table which tracks the state of the KAV . After finding an article with the same article ID version number for which IsMaster is true the PublishStatus column is checked to see the status of the article which could be Draft Online or Archive for example. If the master KAV for a translation is online the translation KAVs are published updating PublishStatus to Online update version number etc. however if the master KAV is not online e.g. KAV is a draft then no update is needed for the KAV translations and the translation is not published.

The workflow engine of embodiments may support the Translate ReviseTranslation transition type in the following manner. The workflow engine checks that Translate ReviseTranslation is accessible from the current state and that the current user has the right to do the transition. If in the current state the Translate ReviseTranslation transition is valid the transition is made ProcessInstance is updated to reflect the transition change to a new state and the translations completed date is set to the current date. ProcessInstance may be a field in a table in which each record is a KA or KAV and the field of the table are used to keep track of the state of each KA or KAV. Furthermore upon undergoing the Translate Revise Translation transition any translations currently online are moved to back to the state of Draft and the translations completed date is set to null.

To support the management of translations in the KnowledgeArticle publishing process the following changes to the mono lingual workflow model and workflow engine may be required. Two additional transition types AddDraftTranslations and DeleteDraftTranslations are included in the static enum TransitionType. Both AddDraftTranslations and DeleteDraftTranslations may be accessed through the Setup Articles Action Security of the UI by users and or groups and persisted in ProcessTransitionSecurity. In addition new transitions of type AddDraftTranslations in the publishing process workflow model between the following states nodes are added 

as well as new transitions of type DeleteDraftTranslations in the publishing process workflow model between the following states or nodes 

The DeleteDraftTranslations is added to the KA Publishing workflow instead of relying on CRUD Delete on KAV. Articles either in draft or archive may be deleted and translation in progress may be deleted. Applications may need the ability to use CRUD create read update delete operations to view and manipulate database rows. However in embodiments for managing multi lingual knowledge base CRUD operations may not be required to carrying out article management. As described above embodiments of the KA publishing process manage the life cycle of the article as a whole controlling when versions may be created and deleted and by whom. For example creating a new draft for an existing article may only be allowed when the article is in the Published or Archived state and the only users allowed to do so are those who have an entry in ProcessTransitionSecurity or are members of a group that are authorized to create a new draft. In a similar fashion creating and deleting translations is only allowed when the article is in specific states and by users who have been authorized to do so through ProcessTransitionSecurity. Also removing a draft translation is a very different proposition from deleting the master draft version and an admin may likely want to secure the access differently. Such fine grained access rules may not be defined using profile CRUD parameters. Furthermore if instead of using transitions a delete of translations with CRUD were implemented on KAV the delete of translations with CRUD would require the delete to have an intimate hard coded knowledge of the KA publishing process knowing when to authorize the operation. In Addition securing the operation for a set of users and groups for all the other transitions may not be possible with a solution based on the CRUD operation.

To support AddDraftTranslations transition type for the management of translations in the KnowledgeArticle publishing process the following changes to the mono lingual workflow model and workflow engine may be required as follows. Parameters that support bulk operations are added such as List of articleId language assigneId owner queue due date optional . A check may be performed whether the AddDraftTranslations is accessible from the current state and that the current user has the right to execute the transition. A query may be performed to retrieve any existing translations drafts and online to determine whether it is O.K. to add a draft translation. If a draft translation does not exist draft translation KAV objects are created under the following conditions 

1. Clone from the Master document the master may be a draft or may be online . In performing the clone standard fields such as channels data category selections and the title may be cloned or maybe marked with something like 

1. Clone from the master document upon a request for translation the master may be a draft or may be online . During the cloning standard fields such channels and data category selections are cloned.

When a new draft version of an article is created or a new draft version of a translation is created to save time and effort first close of the master document or most recent version is created and may be used as the template for the new draft and all of the field values are copied from the prior version or master document to the clone. Following the creation of the new KAV translations the translation sub workflow is initialized for the new KAV translations. Finally an assignment of the draft translation KAV objects is made to the requested user queue with a specified due date.

To support DeleteDraftTranslations transition type for the management of translations in the KnowledgeArticle publishing process the following changes to the mono lingual workflow model and workflow engine may be required as follows. Parameters that support bulk operations are added such as a list of article identifiers and the language of the articles articleId language a check that DeleteDraftTranslations is accessible from the current state and that the current user has the right to execute the transition a query that finds existing draft translations for specified article ids and languages which then deletes the draft translations.

In embodiments the Publish Archive and RestoreToDraft may include options for creating a translation publishing a translation archiving a translation and restoring a translation to the draft state to handle translations. When a KnowledgeArticle KA is published and the master KAV is moved to online an additional step is required. All draft KnowledgeArticleVersion KAV translations in the TranslationCompleted state for this version same version number should also be published which may be done by joining to article query with a filter on completed date null. If the article already existed online and is republished new draft translations may replace existing online translation if a draft translation already existed for the same master document. However if there are any existing online translations without a corresponding draft translation the existing online translations should remain online. If what the publisher had said impacts existing translations while editing the draft master an isOutOfDate flag may be cascaded to the remaining online translations at publication time via a hidden flag maintained on the master .

The Archive transition type may include the following to handle translations. When a KA is archived and the master KAV is set to the Archived PublishStatus translations of that article should also be set to Archived. Online translations may be archived. However draft translations may be deleted a user interface UI should provide explicit warning . All translations that are archived should exit the KAV Translation sub workflow.

The RestoreToDraft transition type may include the following to handle translations. When a KA is moved back to the draft state a new master KAV draft is created. If a new draft translation is then requested the new draft translation may be cloned from the corresponding archived translation if it exists. When new translations are created the new translations may re initialize the KAV Translation sub workflow and enter the TranslationInProgress state. When publishing a restored article extra archived translations that aren t represented in the newly published translations may be moved back to the draft state. Archived translations that match a newly published translation may be deleted as is the case with the archived master version.

It is noted that even if the workflow engine is capable of executing AddDraftTranslations in mass with any combination of article id and languages the knowledge management UI may restrict the execution of AddDraftTranslations for performance reasons to allow either article ids in bulk for a specific language or language in bulk for a specific article.

Returning to step if at step it is determined that the changes to the source document do impact the existing translations of the source document then a determination is made at if the source article was last modified at a date after the date exported for translation into one or more languages. If the source article was modified after the date a copy of the document was sent for translation then an alert is displayed for affected languages in step on an article list hover article edit detail translation list translation edit detail and or export overlay for example to indicate the that version of the article that was translated is out of date and method terminates. Returning to step if the determination made at step is that the source was an article that was last edited prior to being send to translation then a determination is made at step whether the source article was last modified at a date after the date that the translation was last modified. If the source article was last modified at a date after the translation was last modified date then an alert is displayed for affected languages in step on the article list hover article edit detail translation list and or translation edit detail because the translation is not longer valid and method terminates. Returning to step if it is determined that the source article was not modified after the translation was last modified then method terminates without issuing any alerts in step . In another embodiment although depicted as distinct steps in steps may not be distinct steps. In other embodiments method may not have all of the above steps and or may have other steps in addition to or instead of those listed above. The steps of method may be performed in another order. Subsets of the steps listed above as part of method may be used to form their own method.

The knowledge management tasks may be achieved through two views and two editors the master language view and editor which provide the same features as the one available for mono lingual Knowledge plus translation requests and the translation view and editor which allows a user to do tasks related to translating an article

In an embodiment user actions available in the master language view may include new delete assign submit for translation and publish. In master language view columns may include title language type assigned to person in a queue and due date of translation . In master language view links may include edit and preview.

In an embodiment user actions available in the translation view may include delete assign and publish translation. In translation view columns may include title language ready for publication type assigned to person in a queue master title Out of Sync flag due date of translation last modification translation date last export date and last import date. In translation view links may include edit and preview. In translation view links may include edit and preview.

Additional article actions that may be available in embodiments for managing and accessing a multilingual knowledge base include add translation delete draft translation and publish translation. The add translation may be used to request new translations of an article. The add translation action may be executed from the following places from Master Draft View Submit for translation from Translated Draft View Edit on ready for publication translations from Master Online View Submit for translation and from Translated Online View Edit. The add translation action may allow the content manager to keep or remove existing online translations. The delete draft translation may be available in Translated Draft View and allows a user system to delete an article translation. The publish translation action may be available in Translated Draft View and allows a user system to publish an article translation. It is noted that if the master version of an article is not yet been published the article translation is moved to the status ready for publication and the translation may be published when the master version is published. It is noted that if the master version is published the translation is then directly published.

Although article search tool draft articles article assignment menu draft translations published article selection published article translations archived articles draft article filter article language category group related links article report link export article for translation link import translation link view view identifier new article tab assignment tab request translation tab publish tab delete tab columns tab action column article title column type translation column assignment column assignment due date edit link preview link article title link appear in and since article search tool draft articles article assignment menu draft translations published article selection published article translations archived articles draft article filter A article language A category group A related links article report link export article for translation link import translation link view A view identifier A new article tab assignment tab request translation tab publish tab delete tab columns tab action column article title column type translation column assignment column assignment due date edit link preview link and article title link are fully described in the following description these elements descriptions will not be repeated in and .

UI A may be a webpage or other form of a user interface generated on a display of a user device for article access and translation in an article management tab. Article search tool may enable a user to search for articles and their translations according to the state of the article and or the article s translations. For example article search tool may be capable of searching for an article or translation according to whether the article and or translation is in the state of draft published and archived for both the master and that translated articles. The draft article may display the different available queues. Draft articles as selected in may be used to view which articles that are assigned to a queue in server side system with article assignment menu . Article assignment menu may be a drop down menu and may be used to view articles according to where the article is assigned. An embodiment of article assignment menu may include the following anyone user queue 1 and queue 2 expansion of drop down not shown in . In embodiments queues may need to be modified and consequently an administrator of the tenant and or of the multitenant database may be given tools for creating queues for different knowledge articles versions. In other words the queue may correspond to the abstract entity representing the knowledge article an abstract entity refers to a programming object representing something for which multiple version may exist and so the programming object does not represent one concrete items such as an article but represents multiple versions of one article the KAV table is a programming objects which is abstract and exists at the entity level in the sense that multiple version of the KA may exist and be represented by the KAV table etc. . Draft translations may enable a user to view and search for articles that are in a draft translation state. Published article selection may enable a user to view and search for articles that are in a published article state. Published article translations may enable a user to view and search for translation of articles that have published. Archived articles may enable a user to view and search for articles that are in an archived state.

Draft articles filter A may enable a user to add a keyword filter by entering a search term in the search box. The articles and or translation returned will be those articles in the category selected via article search tool that includes the string entered via draft article filter A. In the embodiment shown in filter parameters may be included but are not limited to the article language and the category or group the article belongs to. However in other embodiments articles and translations maybe searched for together. Article language A may be a pull down menu for selecting the language of the articles that the user would like to view. Category group may be a pull down menu for setting filter parameters based on category or group for searching for archived articles. Category group A may be used to select a group to which the article sought belongs so that only articles in that category group will be displayed.

Related links may provide users with useful links related to managing multilingual articles. Article report link may bring the user to a page for creating a report containing information about the status of various articles e.g. whether each article is online in the draft state or archived and or may include information about the status of any translations e.g draft ready to publish online or archived via which the user with may track the status of the article and or the article s translation. Export article for translation link may provide a user with a link to a webpage or UI screen for exporting articles for translation and assigning the article to a queue or user. When an article is exported for translation a copy of the article is sent to the translator or to a storage area to which a queue of translators has access so that any translator in the queue may view copy and or download the article thereby allowing the translator to translate the article. Import translation link may provide a user with a link to a webpage or UI screen for importing translations of articles that have been translated. In an embodiment there may be a workspace and or web portal for example where a translator may upload a finished translation. Once the finished translation is uploaded to the workspace or web portal or otherwise indicated as being complete a tenant administrator may import the article to a storage area for translations in the ready to publish state.

View A may provide users with a tabular view of the articles selected via search tool and draft articles filter A. The types of articles that are currently displayed in the view A may be based on the search selections chosen in draft translations published article selection published article translations and archived articles found in the article search tool as will be shown in . View identifier A may provide a verbal description of a characteristic or a category associated with the article found such as by providing a user with the state of articles currently displayed by the view A. In the example of all draft articles are currently displayed no matter who assigned to no matter the language and no matter the category group to which the article belongs because draft article is selected and no value was entered for the article assignment menu article language or category group A. New article tab may be selected to add a new article and bring a user to a display page for carrying out the process for adding a new article to the state machine. Assignment tab may be used to assign an article to a user or a particular queue for editing and may bring the user to a web page that facilitates carrying out the assignment. The request translation tab may be used to request a translation and may bring a user to a web page for carrying out the process for requesting a translation of an article. Publish tab may be used to publish an article and bring a user to a display page for carrying out the process for publishing an article thereby removing the article from the drafts state to the online state. Delete tab may be used to delete an article in draft transition and may bring a user to a display page for carrying out the deletion process for an article. Columns tab may allow the user to add or reconfigure the columns in the view A. Action column may allow a user select an action to perform on an article. In the embodiments shown in action shown but are not limited to are edit and preview. Article title column is a list of the titles of the articles in the selected state at denoted by view identifier A. Article title link may allow the user to edit the title of the article that appears on the screen if the title link is selected. Type is a column that specifies a type of the article. For example the type may have values of offer if the draft was offered to a particular entity to write but the offer was not accepted In an embodiment another type may be accepted which indicates that the offer was accepted. Translation column may provide a user with information on available translations of articles. Assignment column indicates the queue user or other entity to which the article is assigned. In an alternative embodiment assignment column may be used by a user to assign an article to a queue for translation or other processing. Assignment due date may be the date that processing on a article should be completed by. The edit link may allow a user to edit the descriptive information about the article e.g. the title that appears in the user interface. The preview link may allow a user to preview an article. Title is the title of a translation in translation popup. In the embodiment of translation popup may appear when the cursor hovers over or near an entry in the translation column . Translation pop up may provide a user with a table showing a column listing translations available and whether the translations are ready for publication. The translation in translation popup has the title listed in title . Translations sub column lists the translations in translation popup . Publication sub column indicates whether the translations of translation popup are ready for publication.

Filter draft translation articles B may enable a user to search for articles that are in a draft translation state based on search parameters set in the filters. In the embodiment shown in filter parameters may included but are not limited to translation language and the category or group the article belongs to. The combination of the choices made in first draft translation articles B and article search tool determine which articles are displayed. Translation language search menu B may be a pull down menu for setting filter parameters based on language for searching for draft translated articles. Category group B may be a pull down menu for setting filter parameters based on category or group for searching for draft translated articles.

In response to the selection of draft translations the view B may provide users with a tabular selection of actions for managing and viewing draft translations of articles in a multilingual knowledge base. The view identifier B in the embodiment of reads All Draft Translations to provide a user with the purpose of the view B currently displayed on a user device. In the embodiment of draft translation articles are displayed. Publish translation tab may be selected to bring a user to a display page for carrying out the process for publishing a translation of an article. Translation column is a list of links to articles that are draft translations. Ready for publication column indicates which translation drafts are ready for publication. Source article column identifies the source or master article on which the translation is based.

Filter published articles C may enable a user to search for articles that are in a published state based on search parameters set in the filters. In the embodiment shown in filter parameters may included but are not limited to article language and the category or group the article belongs to. Article language C may be a pull down menu for setting filter parameters based on language for searching for draft translated articles. Category group C may be a pull down menu for setting filter parameters based on category or group for searching for draft translated articles.

In response to the selection of published article view selection the view C may provide users with a view of the articles selected via search tool and draft articles filter C. The view identifier C in the embodiment of reads Published Articles to provide a user with a verbal description of a characteristic or category of the articles found which are currently displayed in view C. In the embodiment of published articles are displayed. Request translation tab may be selected to bring a user to a display page for carrying out the process for requesting a translation of a published article. In the article title column an article may be locked as indicated by lock and may only be previewed and not edited in the action column .

Translation column may provide a user with information on available translations of published articles. In the embodiment of the selection of an icon in the translation column may provide the user with a translation pop up . Translation pop up may provide a user with a table showing a column listing translations available in translations sub column by title and if the articles by language are published in publication sub column . The last published column may indicate the last published date of an article. The last modified date column may provide a last modified date for an article.

Filter published articles D may enable a user to search for articles that are in a published state based on search parameters set in the filters. In the embodiment shown in filter parameters may included but are not limited to translation language and the category or group the article belongs to. Translation language search menu A may be a pull down menu for setting filter parameters based on language for searching for draft translated articles. Category group menu D may be a pull down menu for setting filter parameters based on category or group for searching for draft translated articles.

In response to the selection of published translation view selection the view may provide users with a view of the articles selected via search tool and draft articles filter A. The view identifier in the embodiment of reads Published Translations to provide a user with the purpose of the view currently displayed on a user device. In the embodiment of published translations of articles are displayed. In the translation column an article may be locked as indicated by lock and may only be previewed and not edited in the action column . Translation column may provide a user with information on available translations of published translation of articles. The last published column may indicate the last published date of an article. The last modified date column may provide a last modified date for an article. Sources article column may be a list of links to a source or master articles that are the source of the published translations.

Filter archived articles E may enable a user to search for articles that are in a archived state based on search parameters set in the filters. In the embodiment shown in filter parameters may be included but are not limited to article language and the category or group the article belongs to. Article language may be a pull down menu for setting filter parameters based on language for searching for draft translated articles. Category group may be a pull down menu for setting filter parameters based on category or group for searching for draft translated articles.

In response to the selection of archived article view selection the view may provide users with a view of the articles selected via search tool and draft articles filter A. The view identifier in the embodiment of reads Archived Articles to provide a user with the purpose of the view E currently displayed on a user device. In the embodiment of archived articles are displayed. Translation column may provide a user with information on available translations of archived articles. In the embodiment of the selection of an icon in the translation column may provide the user with a translation pop up . Translation pop up may provide a user with a table showing a column listing translations available in translations sub column by title . The archived column may indicate the last archived date of an article.

The screenshot of may be an embodiment of a webpage or other form of user interface which may be generated on a display of a user device for sending draft articles to be translated. Language selection column may be used to select target languages for an article to be translated into. Assignment column is used to assign the translation task to a queue. Drop down assignment queue menu may be used to assign the translation task. Due date column is a requested or required date that the translation should be completed by. Email notification may be used to notify the requestor when a translation of an article has been completed. Selection of confirmation button may send a user back to the UI A of as shown in .

In the embodiment of the screenshot is an embodiment of a user interface that provides details of the article. Page title may provide the user with the title of the article to be edited. Save tab may allow the user to save the changes to the information about the article. Save close tab save and closes the edit page . The cancel tab cancels the changes made to the information about the article in user interface . The assign tab assigns the editing task to a queue user or other entity. The publish tab may be used to publish an edited article. The preview tab may allow the previewing of an article that is being edited. The article assignment section provides details of whom an article was assigned to for editing including assign to whom assigned by which party instructions for the editing and assignment due date . The article properties section includes the status of the article to be edited draft published archived type article created by last modified by translations available export date of the article to be edited categories and channels internal application partner portal customer portal knowledgebase . The title is the name of the article. URL universal resource locator name is a Web searchable name of the article. The summary may provide a synopsis of the articles contents. The offer description may describe the particulars offered to a particular entity to write and or edit the article. The elements of are repeated in and their description will not be repeated with reference to .

The selection of the save tab may generate the overlay page of that advises users that the article was being edited while a translation of the article was ongoing. The user may have the option of notifying people that their editing or changes will impact translations in progress and alerts may be issued to indicate differences between the newly edited article and translations based on the unedited version of the article or the user may indicate that the edits will not impact existing translations . The selection of the save button closes the overlay and returns the user to .

Queue selection section allows a user to select translation queues that have articles they want to export. Queue pull down menu is a list of current export queues with articles to translate that may be selected. Select article in Queue section allows a user to select which articles in a selected queue to be exported. Article selection criteria are parameters of which articles to select from the selected queue to export. Administrative setup section provides management controls for various functions and users. Control categories are the various functions and users available for the administrator to control. Expander icons are selected to provide further subcategories under each of the control categories. The administrative setup section also appears in Q R A and B and the description for administrative setup section will not be repeated in Q R A and B.

In the publish article overlay informs the user through an alert box of information related to the publish action. The user may chose to publish now schedule publication on a specified date or flag as a new publication.

In a UI G of an embodiment of a translation view and editor is shown with a notification that the two selected articles have been successfully published.

In the publish translation overlay informs the user that three translations are selected and that translations can be published only if their source articles are published or as ready for publication if the source article has not been published.

In a UI H of an embodiment of a translation view and editor is shown with a notification that one selected translation has been published and two translations are ready for publication.

In a UI C of an embodiment of a translation view and editor is shown with the submit for translation tab being selected to bring up the submit for translation overlay shown in . Also shown are two rows selected with check marks A B that represent two articles selected for translation.

In the submit for translation overlay allows the user to select target languages assign the translation to a queue through a drop down menu and assign a due date . In addition the user may choose to have a notification email sent upon a translation completion of an article.

In a UI I of an embodiment of a translation view and editor is shown with a notification that the two selected translations have been submitted for translation.

In a UI C of an embodiment of a translation view and editor is shown with the edit link being selected to bring up an edit article overlay shown in .

In the edit article overlay informs the user that editing a published article sends the article and all translations of that article to draft and asks the user whether they want to keep the article published selection or remove the article selection while work is done in draft status.

In a UI D of an embodiment of a translation view and editor is shown with the edit link being selected to bring up an edit translation overlay shown in .

In the edit translation overlay informs the user that editing a published translation sends the translations to draft and asks the user whether they want to keep the translation published selection or remove the translation selection while work is done in draft status.

In embodiments knowledge managers may utilize an article management tab to carryout tasks including create edit archive delete assign and publish a master version of articles a master version is the source article in a specific language translations are then referred as translation versions . In addition further tasks conducted with the article management tab include requesting translations of articles editing deleting publishing and assigning translation versions of the requested articles. The aforementioned tasks may be accomplished through two views and two editors the master language view and editor and the translation view and editor which are illustrated and described in the screenshots of .

In embodiments various page views or screens are available for managing and accessing a multi lingual knowledge base in a database network system which are shown in as described above following a general discussion of the functions of embodiments of the user interface.

In embodiments the tasks of knowledge management that users may do within the article management tab of may include creating editing archiving deleting assigning and publishing master version of articles a master version is the source article in a specific language translations are then referred as translation versions requesting translation of articles and editing deleting publishing assigning translation versions of articles.

In embodiments knowledge managers may utilize an article management tab to carryout tasks including create edit archive delete assign and publish a master version of articles a master version is the source article in a specific language translations are then referred as translation versions . In addition further tasks conducted with the article management tab include requesting translations of articles editing deleting publishing and assigning translation versions of the requested articles. The finding and managing articles and translations may be accomplished through two views and two editors the master language view and editor and the translation view and editor which will be discussed further in conjunction with the screenshots of above.

In at least one embodiment some knowledge management features may not be handled through the article management tab. These knowledge management features correspond to the tasks that require a read only access to the articles and their translations such as providing an overview of the translation status of the KB and filtering capabilities which will be discussed further in conjunction with the screenshots of above that allow for identification of articles that should be translated along with mass translation request feature. To facilitate the filtering of articles in the knowledge base custom tables containing article identifications and other types of relevant information for identifying an article and persons associated with the article may be provided in custom tables as shown in table 1 and table 2. Portions of the information in the columns of tables 1 and 2 are inputted through the UI of embodiments in which will be discussed further in conjunction with the screen shots of described above and some information is automatically generated by the systems for managing a multi lingual knowledge base in a database network system. The information in the columns of Tables 1 and 2 are described in conjunction with the discussion of screen shots of .

To facilitate the filtering of articles in the knowledge base custom tables containing article identifications and other types of relevant information for identifying an article and persons associated with the article may be provided in custom tables.

The columns of the custom tables as shown in Tables 1 and 2 may have the following information. Knowledge Article ID may provide a unique identifier for an article in a knowledgebase. Knowledge Article Version ID may provide an indication of which version or generation the article is presently available in the knowledgebase. Article title URL Name is a link in the form of a universal resource locator URL for accessing an article in the knowledge base. Summary may provide a synopsis of an articles content or subject matter. Created by may detail who created or wrote the article. Created date may be the date that the article was first written. First published date may be the date that an article was first published. Last modified date may indicate the last date an article had content changed. Visible in customer portal may be an indicator if the article is available for selection in a customer s interface to the knowledge base. Visable in internal application may indicate whether the article is available for selection in the internal application. Visable in partner portal may indicate whether the article is available in a menu for selection and viewing in a partner portal. Visible in public knowledge base may indicate whether the article is available in a menu for selection and viewing in a public knowledge base. Language IsMaster may indicate whether the language an article is in is the master or primary first language. Publishing status may indicate the state of an article including online draft or archived. Import date may indicate the date an article was placed in a data base following translation. Export date may indicate a date an article was sent ou exported for translation. Ready for publication may indicate that an article is ready for general distribution. Out of sync may indicate that a master version may be undergoing revisions while other versions of the article are out for translation or other changes. Assign to may indicate which translator was given an article to translate or update. Due date may indicate a date an article is to have a translation or revision completed by. Instruction may be requirements sent to a translator. View Stat field may indicate how often or frequency an article is selected from the knowledge base. Vote Stat field may be a user vote to determine a rank of article by usefulness timeliness or other parameters. Case Count may be a count of cases.

The data schema for the data object definition in the UDD in pseudo Data Definition Language DDL format may include a command to create a table for the language of the article which may include columns for an identifier of an organization a language of the article a status of the article e.g. draft online or archive an indicator for whether the a default language is set for the master document which is filled in at the time of the creation of the article prior to the user having a chance to set the language and an identifier for the default assignee. The pseudo Data Definition Language is in the format of a data definition language file but may be an equivalent to a DDL file that runs on a JAVA virtual machine. In an embodiment a table for tracking the article version may be included which may have columns for an identifier for the master version of the article a column indicating whether the articles are out of date a column that stores the date when the translations were completed a column for storing the dates when the translations were completed a column for storing the dates when the translations were exported to the translator for translation and a column for storing when the translations were imported back into the system. The table may be used for tracking the state of the articles and of the translations of the article. Specifically in pseudo DDL format the data object definition may include coding such as 

CREATE TABLE knowledge.language config organization id language status is default master language default assignee id and

ALTER TABLE knowledge.article version ADD master version id is out of date translation completed date translation exported date translation imported date 

In at least one embodiment publication of article translations is controlled by assigning various permission levels or rights to users. Users with sufficient level of rights may submit articles for translation in some languages. As the costs of translating content are generally expensive the careful selection of the target language s when requesting the translation of an article is a consideration. For example an article may be linked to a product that is not distributed in Asia but in North America and Western Europe and in that case the user may not want to request the translation in Chinese and other Asian languages but in languages common to the target market. In an embodiment the system may automatically determine which articles are good candidates for translations and into which languages the article should be translated to. The determination may be based on criteria such as which articles may have the highest predicted return on investment ROI where for purposes of determining the ROI the investment is the cost of translation. Some other factor that may determine whether to translate an article are which articles have the highest frequency of being referenced in a defined period of time such as in the last 30 days and or how often customers for translations. Selection tools may be provided via which an administrator may determine whether to request the translations suggested by the system. Alternatively the administrator may make the determination of which article to have translated without the system making the determination and the determination may be based on criteria such as which articles may have the highest predicted ROI the number of requests from customers for translations and or which articles have the highest frequency of being referenced in a defined period of time such as in the last 30 days and the administrator may then use the selection tool to request the translation.

In embodiments articles for which translations have been requested and that are managed externally may be exported. The export may be done from within a node in a setup tree e.g. under application setup data management that is accessed in the UI the UI having features for exporting articles as shown and described in above . When exporting articles to be translated after having selected a queue for translating the articles the user has the ability to select articles that have never been exported select articles that are out of synchronization select all articles from a queue select source target language pairs for which to export zip files may be created one zip file per article type . The user also has the ability to select the target language or languages for exporting articles. The selection abilities of the user may allow for the exporting of articles for which translations have been previously requested in the same set of language or languages as the translation requests. When an article is exported the date of last export is stored in the specific translation s records that match the export criteria. In at least one embodiment the export may be asynchronous and may be monitored through a specific monitoring page.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems may be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network may be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the one or more implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device may be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks may be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which may be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments may be implemented in any programming language that may be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein may be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which may be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned co pending U.S. Provisional Patent Application 60 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS by Craig Weissman filed Oct. 4 2006 which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also may be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. may be maintained and accessed by a user system having nothing more than network access the user may manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson may obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database may generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 8128 161 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System and which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

In step system is assembled which may include communicatively coupling one or more processors one or more memory devices one or more input devices e.g. one or more mice keyboards and or scanners one or more output devices e.g. one more printers one or more interfaces to networks and or one or more monitors to one another. Additionally assembling system may include installing application platform network interface tenant data storage system data storage system data program code process space UI API PL SOQL save routine application setup mechanism applications servers system process space tenant process spaces tenant management process space tenant space tenant data and application metadata .

In step user system is communicatively coupled to network . In step system is communicatively coupled to network allowing user system and system to communicate with one another . In step one or more instructions may be installed in system e.g. the instructions may be installed on one or more machine readable media such as computer readable media therein and or system is otherwise configured for performing the steps of methods associated with . In an embodiment each of the steps of method is a distinct step. In another embodiment although depicted as distinct steps in steps may not be distinct steps. In other embodiments method may not have all of the above steps and or may have other steps in addition to or instead of those listed above. The steps of method may be performed in another order. Subsets of the steps listed above as part of method may be used to form their own method.

While one or more implementations have been described by way of example and in terms of the specific embodiments it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

In an alternate embodiment a CRUD delete for translations may be used instead of directly using DeleteDraftTranslations through an API by implementing the delete verb that simply delegates to the DeleteDraftTranslations transition in a validation hook which would as described above correctly ensures that based on the current state and user this operation would be allowed before proceeding with the UDD delete call.

Each embodiment disclosed herein may be used or otherwise combined with any of the other embodiments disclosed. Any element of any embodiment may be used in any embodiment.

Although the invention has been described with reference to specific embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the true spirit and scope of the invention. In addition modifications may be made without departing from the essential teachings of the invention.

