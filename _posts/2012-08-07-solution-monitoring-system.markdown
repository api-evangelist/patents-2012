---

title: Solution monitoring system
abstract: A solution monitoring system is provided for gathering, filtering, and analyzing information associated with solutions for managing monitoring, upgrades, and migrations. Telemetry may be recorded for various types of solution events and various properties of solutions as part of an add-in intelligence. Furthermore, add-in management tools are provided for administrators and end users.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08898178&OS=08898178&RS=08898178
owner: Microsoft Corporation
number: 08898178
owner_city: Redmond
owner_country: US
publication_date: 20120807
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 61 157 325 filed on Dec. 15 2011. The disclosure of the provisional patent application is hereby incorporated by reference for all purposes.

With the proliferation of computing and networking technologies a number of business productivity and similar software solutions are used widely by individuals and groups. Compared to the conventional local application model where each user had individually installed applications the more common usage model today includes hosted e.g. cloud based applications data management tools or even operating systems. Typically a managing entity may provide and oversee multiple facets of software based solutions including multiple applications for a wide range of end users.

Because innovation is high paced in software world user needs change rapidly and competition is strong new programs and features for existing programs for example to address user demands and or take advantage of newer hardware platforms are constantly developed by software providers. While updates upgrades and other enhancements are typically desired in a hosted environment or even a manufacturer to user model frequent upgrades may not be practical or feasible in some cases. For example service providers may spend substantial periods to upgrade to a new version because of lack of visibility into what solutions e.g. document files add ins web extensions are actively used by end uses which ones are the business solutions that need to be kept active with new version of where the compatibility issues may exist and how to remediate them etc.

Information Technology IT administrators typically need to spend substantial time to make sure that solutions are ready for an upgrade. For example a list of solutions may need to be created to understand how many solutions need to be tested and remediated for version compatibility. Solution owners people responsible for groups of users may be surveyed etc.

An add in is a set of software components that adds specific abilities to a larger software application. Add ins enable customization of the functionality of an application. For example add ins are commonly used in web browsers to play video scan for viruses and display new file types. A host application may provide services which an add in can use including a way for add ins to register themselves with the host application and a protocol for the exchange of data with add ins. Add ins depend on the services provided by the host application and do not usually work by themselves. In conventional systems an IT administrator may not be able to manage which add in are loaded with an application in a user s computer block or force loading of particular add ins. To manage add ins an administrator may need to learn which add ins are commonly used have loading errors or have slow performance.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This summary is not intended to exclusively identify key features or essential features of the claimed subject matter nor is it intended as an aid in determining the scope of the claimed subject matter.

Embodiments are directed to optimized gathering of solution inventory across an organization Solution inventory data may be filtered by customized tags that indicate departments groups locations user roles etc. to analyze the collected data. Data may also be filtered for certain periods of time. Error events compatibility issues for specific solutions may be recorded system wide or on client machines to make system operations predictable for end users as well as for administrators. In some examples user experience tools may be provided for users to test and remediate the solutions and for administrators to plan and manage upgrades. Client server systems may be scaled to support large numbers of clients by simply adding processing servers. Compatibility issues may be detected in customer provided or internal software at solution runtime with usage data such as how frequently the inventoried item is actually used being employed in monitoring upgrades and or migration.

According to other embodiments a telemetry logging system may record various types of solution events e.g. loads or errors and various properties of solutions as part of an add in intelligence. An event API may be employed to detect potential compatibility issues of solutions and a framework may be used to monitor usage of applications object models to detect potential compatibility issues of solutions. Logic may be provided to associate telemetry events with solutions along with logic for recording solution sessions and associating events with sessions.

According to further embodiments add ins may be managed using registry keys where performance information associated with add ins such as usage issues load behavior load performance may be collected to enable a user to decide which add ins to manage. Users may be enabled to create scripts based on add in selections from management list s which may in turn create group policy objects.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory and do not restrict aspects as claimed.

As briefly described above information associated with solutions may be gathered filtered and analyzed for managing monitoring upgrades and migrations. Telemetry may be recorded for various types of solution events and various properties of solutions as part of an add in intelligence. Furthermore add in management tools may be provided for administrators and end users.

In the following detailed description references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustrations specific embodiments or examples. These aspects may be combined other aspects may be utilized and structural changes may be made without departing from the spirit or scope of the present disclosure. The following detailed description is therefore not to be taken in the limiting sense and the scope of the present invention is defined by the appended claims and their equivalents. While the embodiments will be described in the general context of program modules that execute in conjunction with an application program that runs on an operating system on a personal computer those skilled in the art will recognize that aspects may also be implemented in combination with other program modules.

Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that embodiments may be practiced with other computer system configurations including hand held devices multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and comparable computing devices. Embodiments may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Embodiments may be implemented as a computer implemented process method a computing system or as an article of manufacture such as a computer program product or computer readable media. The computer program product may be a computer storage medium readable by a computer system and encoding a computer program that comprises instructions for causing a computer or computing system to perform example process es . The computer readable storage medium is a computer readable memory device. The computer readable storage medium can for example be implemented via one or more of a volatile computer memory a non volatile memory a hard drive a flash drive a floppy disk or a compact disk and comparable media.

In a system according to embodiments an agent or installed on a client machine or may collect inventory from the registry and the file system . The agent may periodically execute and collect a list of most frequently used MRU documents installed add ins solutions registered in the startup folders that are loaded during booting of applications and are therefore frequently used by end users or commonly shared in a specific organization. In addition to MRU documents add ins and solutions the agent may collect user information such as user name computer name joined domain to identify the user in the dashboard and also collect details of the hardware software information such as CPU type memory display resolution OS version solution version etc. The agent may make a record of the inventory data with the basic metadata of solutions such as solution name size file path publisher etc. to one or more files at a local data store . The agent may also build a solution inventory table on a client machine that can be used by multiple components.

Telemetry inventory logging may be another component that reads writes inventory data to a local data store files during application runtime. Telemetry runtime inventory logging may detect a load event of a solution and add update the solution entry in the inventory table with various document metadata through an application programming interface API . Telemetry runtime inventory logging may also log actual usage data load time as part of the inventory. In addition to the date time telemetry runtime inventory logging may also log solution metadata which application knows only during the runtime such as the solution includes programmatic code components etc. The inventory data may be used for either usage logging of a solution or upgrade risk assessment of the potential compatibility issues.

An issues list may be maintained and used for presenting users errors issue workarounds etc. through an advanced user interface managed by an even monitor module application . The inventory agent may also provide records to a data processing service via one or more network shared folders . The data processing service may read files in the shared folder s and insert them into a database managed by database server . The issue list for a multiple computers applications includes information on the errors and issues in human readable manner so that an administrator can get context of the issues when they view it together with the telemetry data in the user interface. The administrator may access the local data store of client machines . The analysis may be associated with inventory usage and or stability of the solutions within an organization.

A user may be tagged by any custom label e.g. department a user belongs to user s locations roles machine type operating system etc. that an administrator prefers. The administrator may then organize and filter data collected from multiple users. The tags are associated with the users enable administrators to easily receive inventory for specific departments or see number of errors that specific role users experienced etc. By using custom tags an administrator can effectively analyze collected data.

In the example user interface screenshot administrator configurable columns indicate from left to right files files associated with reported issues total number of users for each of the files number of users in a particular version of a solution success percentage a success trend critical users informative users and application type . Success percentage may provide a result of the calculation of how many sessions of the solution have successfully ended without issues. Critical users may provide a number of users who have exercised issues for the solution. Informative users may provide a number of users who have exercised informative issues low severity for the solution. By assigning and selecting which tags to use the administrator may be able to organize the collected solution inventory data and filter for desired aspects which enables them to perform a quick analysis without complicated processes. User interface is an example of how an administrator may define or select various tags through a drop box menu. Of course other forms and configurations of user interfaces such as context based menus may be employed for selecting filtering options tags .

Events logged on a client machine may have the date time information. Collected events from multiple client machines may be aggregated based on a solution name date time information. This aggregation enables an administrator to filter any set of data such as inventory errors and compatibility issues by using a time slicer. The time slicer may provide the administrator to see what solutions are most frequently used by end users in the last year what errors happened in the last seven days etc. and provide control on solutions.

As discussed above a telemetry runtime error logging component may detect errors compatibility issues on a specific solution and write them to a local data store files. The events data may be used either on a client machine to display the files and add ins loaded the order that the operations happened and any detected compatibility or stability errors. The events data may also be stored to a central place for the administrator s monitoring purpose.

The telemetry runtime error logging component may log an event with the event ID solution ID and the event may be associated with the solution ID in the solution inventory table. The description of the events may be stored in the issue list which may be periodically updated for the latest error information compatibility issue information workaround information as well as any information provided over the Internet blogs search results and so on. When the telemetry runtime error logging component logs an event the event may be associated with a solution and the description in the issue list thus the users can see error events of a specific solution with the latest description and workaround information provided by the issue list. A single issue list may be used both for end users and administrators and may be read by user experience tools.

In the example telemetric dashboard interface of diagram an error logged as Event ID is mapped to a specific solution Spec States.dll . The event its identifier and the detailed description defined in the issue list may be shown on the interface as emphasized by reference numeral .

Inventory error and compatibility issue events stored in the local data store files may be used on a client machine with a client tool. End users may be presented error and compatibility issues information for specific solutions and receive the latest information on the issue. They may be able to narrow down the issues and remediate them by themselves to make their solutions work continuously with a new version e.g. in case of an upgrade .

In some example embodiments a client user experience tool may be a spreadsheet workbook and may work as a user experience tool to show the data in the local data store files. The tool may display all events that happened on a client machine with date time host application event title workaround information etc. so that the user can see which events happened on their solutions. In addition to the event data the client user experience tool may display system information installed application information etc. Users may be enabled to share the workbook with other users to ask remediation from developers and comparable resources.

Alternatively any dedicated application like an event viewer or other monitoring tools may be used allowing real time event monitoring by loading events so that a user can manage which events to hide or show and show details in a task pane. Filtering user interface is another example of how users or administrators may be enabled to select filtering criteria such as by date range for viewing collected information.

Screenshot shows another example user tool an event viewer application interface for presenting collected data to a user or administrator. In a spreadsheet format date time event ID application type description of events brief explanation about the events and links to additional information may be displayed in columns. The inventory agent may periodically upload inventory error and compatibility issue events stored in the local data store files to a central place to process the data sent from multiple client machines. The data processing service installed on a server machine may collect uploaded data in a shared folder and insert them to a database. Additional machines running the data processing service may be added to increase the scale of the system to handle uploaded data from potentially hundreds of thousands of client machines and build a central database. An admin user experience may connect to a database and show analyzed data for administrators.

Diagram presents an overview of operations by an inventory agent . As a system service the inventory agent may provide configurable services such as agent scheduling file share management and tag management. To provide these services the inventory agent may include an inventory collector for collecting event data associated with solutions on a client machine. As discussed previously collected data may be tagged and stored in a local data store which may also be provided to a central management system through a data uploader . Local data store may be a place where the agent writes solution inventory the runtime solution inventory logging writes solution inventory and the runtime error logging writes errors compatibility issues and events. The uploaded data may include various event data which may be processed by a system data processing service and stored at a system database for review and analysis by administrators through a telemetric dashboard tool.

In a system including multiple client machines even thousands of machines inventory agents may be installed on individual machines and event data collected from those machines may be aggregated and processed by the system data processing service. A telemetry runtime logging framework may log events with event ID solution ID in solution inventory tables in conjunction with the inventory agent .

As discussed above a telemetric dashboard tool according to some embodiments may provide an inventory agent to be deployed onto client machines where compatibility issues with a new version of a deployed solution is to be assessed and mitigated. An inventory collector service may be installed as part of the agent to scan installed applications frequently used files registered add ins etc. The agent may manage the inventory collector to execute and collect inventory information that may be sent to a centralized file share location. In the centralized location collected inventory data across an organization may be put into the database and aggregated to help administrators to prioritize the solutions that need to be tested before an upgrade and reduce testing surface. The inventory agent may be an executable component that may scan a client machine to gather solutions metadata that may be used to determine which solutions are installed on the client.

The inventory agent may provide the inventory collector the local data store and the data uploader . The inventory collector collects recently used document files and installed solutions and writes them to the local data store. The inventory collector may search for system data search for installed applications search for files in the Most Frequently Used MRU list and collect metadata search for files in the startup folders and collect metadata and scan add in entries from registry key and collect metadata. The inventory collector may log scan results into the local data store. The local data store may handle add update the inventory in the store. The data uploader may copy data in the local data store to a specified file share. If the share directory is unavailable data uploader may retry up to a predefined number of attempts before giving up and waiting for the next cycle. The data uploader may be executed periodically or upon demand. The uploder may manage what types of data is actually uploaded. For example administrators may want only specific data to be uploaded or specific data not to be uploaded e.g. administrators may want to upload only add ins related data but not documents data etc. then they can control the uploader .

As mentioned an admin user experience tool for administrators may show the aggregated data in spreadsheet format from the system database. In the admin user experience tool administrators may be presented with the most frequently used solutions by number of users computers version of installed before after the upgrade etc. Administrators may also be enabled to determine if the solutions keep running after the upgrade. Additional features may include use of a pivot table filtering e.g. using a time line slicer and enabling a user to manage which solutions document to show hide. Users may not only define the most frequently used but may also change sort order to find attention needing solutions documents which may have some issues and may be frequently used.

An example admin tool may provide an overview page with deployment status during the upgrade to show the upgrade progress error trends on solutions so that the administrators can quickly understand the current upgrade status. The tool may further provide a list of document files and their usage data to enable determination of which document files are most frequently used in an organization and which errors occur on which documents. The tool may also provide a list of solutions COM add ins application specific add ins etc. and their usage data to enable determination of which solutions are most recently used in the organization and which errors occur on which solutions. A system according to embodiments may be scalable by adding processing servers to aggregate and process the collected inventory information depending on a number of client machines.

In addition to a spreadsheet format or a textual format a telemetric dashboard according to embodiments may also include graphic elements such as charts and diagrams to present inventory and analysis information associated with solutions on a monitored system. The example telemetric dashboard of diagram includes selections for different aspects that may be presented such as overview documents solutions data processors deployments customized reports etc. A top level summary may display information associated with current goal s and scope s or any other information desired by an administrator about the system status. Bar trend line or other charts such as charts and may display status information such as document pass fail trend solution pass fail trend deployment status trend etc. graphically. One or more selection menus e.g. dropdown menus may be provided to filter the presented data based on time or tags labels . Furthermore summary status information on active modules such as ratio of working data processors may also be presented on the user interface.

Actions in an example system may begin with opening the event viewer at which point existence of an add in may be determined . If no add in exists an error message may be displayed . If the add in exists is enabled the installed add in s version may be determined . If the installed add in s version is older than the version associated with a current version of a solution another error message may be displayed . If the installed add in s version is newer than the version associated with a current version of a solution another check may be performed as to whether a version of the add in is needed or not . If it is the needed add in version may be called and operations proceed to a user machine check . If the version of the add in is not needed the other error message may be displayed .

Upon successful determination of the installed add in s version and or calling of a needed add in version user machine check may be performed. If the user machine are determined to have an error a further error message may be displayed . If there is no error the event viewer may be rendered accessible without error .

A telemetry logging system according to embodiments may include telemetry APIs in client applications and a storage file. The telemetry APIs such as telemetry API in diagram may be used inside a client application code to capture events and properties related to solutions and store the data into a local storage file. The events and properties may include load close crash events file name document title file path author file size user name computer name domain names load time and or program identifier.

A telemetry liblet or similar structure containing the telemetry API may also include solution inventory and an event log maintaining captured events and an issue tracking event. The issue tracking event is one of the telemetry APIs. Developers may add this event to the application code to capture potential compatibility issues of solutions that are found during the application development. If solution hits the event the compatibility issue event may be captured into a local storage file. A database file issue list that includes the issue title issue description and hyperlink to the online knowledge article that contains up to date and detailed information of the issue may also be employed. Thus an issue list is a separate file from the local data store files and the issue list is a resource file to show various events in the local data store files as human readable information. Each entry in the database file may include an event identifier so that event viewer applications can load and display human readable information on each issue.

A framework to monitor the usage of applications object models may be used to detect potential compatibility issues of solutions. The framework also referred to as the object model OM logging framework may monitor every usage of the object model by the solutions and if the object models with potential compatibility issues are called it may record the compatibility issue event into a local storage file.

A system according to embodiments may employ a logic to associate events related to object models with solutions. When solutions first call into object models the logic may monitor which solutions are calling and assume that any subsequent calls to object models are made by the solutions it monitors. If the compatibility issue events are logged the logic may add the identifier of the solution that is calling in to the events to the record.

The system may employ another logic to record solution sessions into a local storage file which is a time spent with each solution loaded that starts with solutions load and ends with solution close. Each session may be associated with events that are related to errors or compatibility issues. Later the logic may go through the sessions for each solution to calculate the ratio of successful sessions sessions with no errors or compatibility issues which may be shown as an index to indicate the stability of solutions. Issue tracking events or error events may be listed in the event log viewer with a human readable title description of the issues and link to online knowledge base article that contains more detailed and up to date information of the issue.

Action diagram displays example interactions between application add in and macro logic . An example flow of actions may start with a telemetry event upon start of monitoring followed by an object model call from the application to the add in . Upon return of the call a telemetry log may be created for the event. With a telemetry event macro related event the object call may be made from the application to the macro where the callback is triggered by the event. Logs may be created upon receiving callback.

As discussed previously a system according to embodiments may manage add ins using registry keys. A user may be enabled to manage add ins using registry keys. Alternatively a user interface may be provided to display the how an add in is being managed currently and the user may be enabled to set add in load behavior through the provided user interface. Furthermore a message may be displayed when an add in has blocked to load.

In other embodiments add in load performance may be collected to the local data store for the telemetric dashboard. A user interface may be provided to display the load performance. Listed add ins may be obtained with usage issues load behavior load performance. Usage information may be collected to a central database. Collected information may be rendered on the telemetric dashboard. The dashboard may show listed add ins with usage issues load behavior load performance that may help an administrator to decide which add in is to be managed. Thus the administrator may easily decide which add in should be forced to enable block without asking individual users. Alternatively all collected information may be stored at a web site cloud instead of a structured file and the user may be enabled to manage the add in directly.

In yet other embodiments a user can decide which add in to manage using listed add in usage issues load behavior. Based on a selection the user may be enabled to create a script which may create a group policy object. After an administrator decides which add in is to be managed they may specify how to manage each add in and generate script s which may create the group policy object. Created group policy object s may apply to their respective directory. Applied group policy object status may be shown in the telemetric dashboard. Therefore a user does not need to note add in name and set value through a group policy management user interface or may develop their own scripts. Alternatively a separate user interface may be provided integrating the group policy management so that a user can manage add ins easily.

Screenshot of the example group policy based add in management user interface includes a selection menu for selecting among available views such as overview documents solutions data processing deployment etc. Detected add ins may be listed in column with column displaying their usage number of users using each add in detailed usage columns may provide additional information such as used time success percentage etc. Application column may display the name of the application with which each add in is associated. Finally a group policy setting column may enable a user administrator to enable or block solutions with a group policy script providing a control for creating a new script.

Various examples of user interfaces and user experience tools are discussed herein. Tools for solution monitoring managing add ins and similar tasks associated with embodiments may be provided through comparable user interfaces configurations and systems on any computing device including but not limited to stationary computers mobile computers handheld computers and similar devices. Such devices may be touch and or gesture enabled devices or others with keyboard mouse pen input voice input and other forms of input for interacting with the user experience tools with varying form factors and capabilities. Furthermore different textual graphical color and similar schemes may be employed in such user experience tools using the principles described herein.

As previously discussed information associated with solutions may be gathered filtered and analyzed for managing monitoring upgrades and migrations. Telemetry may be recorded for various types of solution events and various properties of solutions as part of an add in intelligence. Furthermore add in management tools may be provided for administrators and end users.

Client devices may be used to access the functionality provided by the hosted service or application s . One or more of the servers or server may be used to provide a variety of services as discussed above. Relevant data may be stored in one or more data stores e.g. data store which may be managed by any one of the servers or by database server .

Network s may comprise any topology of servers clients Internet service providers and communication media. A system according to embodiments may have a static or dynamic topology. Network s may include a secure network such as an enterprise network an unsecure network such as a wireless open network or the Internet. Network s may also coordinate communication over other networks such as PSTN or cellular networks. Network s provides communication between the nodes described herein. By way of example and not limitation network s may include wireless media such as acoustic RF infrared and other wireless media.

Many other configurations of computing devices applications data sources and data distribution systems may be employed to provide a solution monitoring system as described herein. Furthermore the networked environments discussed in are for illustration purposes only. Embodiments are not limited to the example applications modules or processes.

Monitoring module may operate in conjunction with the operating system or management application and provide services associated with monitoring solutions for upgrades or migration as well as add in management event recording analysis and comparable tasks. This basic configuration is illustrated in by those components within dashed line .

Computing device may have additional features or functionality. For example the computing device may also include additional data storage devices removable and or non removable such as for example magnetic disks optical disks or tape. Such additional storage is illustrated in by removable storage and non removable storage . Computer readable storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. System memory removable storage and non removable storage are all examples of computer readable storage media. Computer readable storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computing device . Any such computer readable storage media may be part of computing device . Computing device may also have input device s such as keyboard mouse pen voice input device touch input device an optical capture device for detecting gestures and comparable input devices. Output device s such as a display speakers printer and other types of output devices may also be included. These devices are well known in the art and need not be discussed at length here.

Computing device may also contain communication connections that allow the device to communicate with other devices such as over a wireless network in a distributed computing environment a satellite link a cellular link and comparable mechanisms. Other devices may include computer device s that execute communication applications other servers and comparable devices. Communication connection s is one example of communication media. Communication media can include therein computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media.

Example embodiments also include methods. These methods can be implemented in any number of ways including the structures described in this document. One such way is by machine operations of devices of the type described in this document.

Another optional way is for one or more of the individual operations of the methods to be performed in conjunction with one or more human operators performing some. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program.

Process begins with operation where inventory information associated with installed applications add ins and solutions is collected through inventory agents on individual client machines. The collected information may be tagged with customizable tags at operation to enable users and administrators to filter the collected information and analyze it. At operation records of associated with installed applications add ins and solutions may be generated through inventory agents on individual client machines. This may be followed by operation where a user interface may be provided for a user to review the record of events. The user interface may also provide information and links to address detected performance errors and compatibility issues. At operation the collected information may be forwarded to a central database for example in form of an issues list. At operation a user interface may be provided for an administrator to view analyze and act on issues encountered by multiple users of a system for upgrade maintenance and deployment purposes.

The operations included in process are for illustration purposes. Providing solution monitoring add in management and add in intelligence according to embodiments may be implemented by similar processes with fewer or additional steps as well as in different order of operations using the principles described herein.

The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims and embodiments.

