---

title: Generating a restful web service software development kit client
abstract: A computer system receives user input indicating uniform resource identifiers (URIs) for a RESTful web service. The computer system identifies a programming language for a RESTful web service software development kit (SDK) client and creates methods for the URIs using programming code format of the identified programming language. The computer system creates the RESTful web service SDK client using the methods.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09003361&OS=09003361&RS=09003361
owner: Red Hat Israel, Ltd.
number: 09003361
owner_city: Raanana
owner_country: IL
publication_date: 20121130
---
The present disclosure relates to RESTful web service and more particularly to automatically generating a RESTful web service software development kit client.

Web services are server applications that communicate over the World Wide Web s WWW Hypertext Transfer Protocol HTTP . A web service is a software component provided through a network accessible endpoint and can be called from other applications. For example a financial company may have a web service that provides up to the minute stock quotes for customers who do their trading with that financial company. The information provided by the web service can be read from a web page and displayed or read from a stand alone application on a customer s desktop computer.

REpresentational State Transfer REST is a style of software architecture for distributed systems such as the World Wide Web. REST style architectures include clients and servers. Clients can initiate requests to the servers which can process the requests and return appropriate responses. In REST requests and responses are built around the transfer of representations of resources. A representation of a resource is typically a document that captures the current or intended state of the resource. For example the resource may be stock quotes.

A RESTful web service is a web service that is implemented using HTTP and the principals of REST. For example a RESTful web service may be a customer data management web service and may have three resources 1 a resource that is a list of all customers 2 a resource that is data for a specific customer and 3 a resource for adding a customer to the customer data. The RESTful resources can each have a uniform resource identifier URI which client applications can use to consume the resource.

A software developer may wish to build a client application to consume the resources provided by a RESTful web service. Typically the software developer has to have the documentation for the RESTful web service and the documentation for the server hosting the RESTful web service. The software developer usually has to manually sort through the documentation to obtain the appropriate information for creating code for the client application.

A software developer may be familiar with a particular programming language for example Python or Java but may not be familiar with HTTP which the RESTful web service is based on. In some conventional solutions a software developer can use a software development kit SDK that specializes in a particular language e.g. Python Java to create a RESTful web service client. A software development kit is typically a set of software development tools that allows for the creation of applications for a certain software framework. The SDK is typically provided by the RESTful web service provider. The creation and updating of SDKs can be a time consuming process. In conventional solutions when there is a change made to a RESTful web service each of the SDKs are manually recoded to reflect any changes made to the RESTful web service. Some changes in the RESTful web service may not be immediately detected and an SDK may inadvertently not be updated which can lead to problems in client communication with the RESTful web service.

Described herein are a method and apparatus for automatically generating a RESTful web service software development kit SDK client without user interaction according to various implementations. A RESTful web service is a web service that is implemented using HTTP hypertext transfer protocol or similar protocol e.g. HTTPS and the principals of REST. A RESTful web service may include a URI for each resource. For example there may be a virtual infrastructure management RESTful web service for managing virtual machines. The RESTful web service may have resources to get data for a particular virtual machine VM identifier ID delete a particular VM identifier get the status of a particular VM identifier etc. For example the URI http localhost 8080 example services api vms 12345 may be for getting the data for the virtual machine identifier 12345.

Implementations provide a web service interface development tool that automatically creates an interface with a RESTful web service. As described in greater detail below in conjunction with the web service interface development tool can include a RESTful service description language RSDL module a RESTful client abstraction module and a software development kit SDK client creation module according to some implementations. Note that in alternative implementations the functionality of one or more of the modules may be combined or divided. A SDK client is a tool to allow applications to consume resources of RESTful web services. A SDK client can provide user interfaces e.g. graphical user interfaces command line interfaces etc. which users e.g. software developers may user to generate code review code etc. to allow applications to interface with a RESTful web service.

An application can consume a RESTful web service resource. For example an application may use the RESTful web service to get information for a virtual machine. The RESTful web service is HTTP based and a user such as a software developer may not have familiarity with HTTP. The software development kit SDK client is a development tool that enables an application to communicate with the RESTful web service via the RESTful SDK client. The SDK clients can be provided by the RESTful web service provider. The SDK clients can be provided for any number of programming languages e.g. Python Java etc. . A software developer user for example can select a SDK client in a programming language that corresponds to the application. For example if the application is a Python based application a Python SDK client for the RESTful web service can receive user input for example from a software developer to configure the Python based application to communicate with the RESTful web service.

Implementations can quickly provide SDK clients to software developers by automatically generating server side methods which correspond to the URIs without user interaction in various programming languages e.g. Python Java PHP etc. . Implementations can keep the SDK clients up to date by detecting changes in the RESTful web service and automatically updating the methods without user interaction and the SDK clients to reflect the changes without user interaction. For example a RESTful web service may add a new resource which may not be supported in a current version of a SDK client. Implementations can automatically generate a method e.g. Python method Java method PHP method for the new resource without user interaction and update the SDK client to support the new RESTful web service resource without user interaction.

Various implementations describe a server computer system receiving user input identifying uniform resource identifiers URIs for a RESTful web service. The server computer system identifies a programming language for a RESTful web service software development kit SDK client. The server computer system creates methods for the URIs using programming code format of the identified programming language. A method is a function which is a block of organized reusable code that can be used to perform a single related action. A method function can provide modularity in coding. For example the server computer system can create an add method in Python for a URI that uses a HTTP POST method. The server computer system automatically creates the RESTful web service SDK client without user interaction using the methods. For example for a Python SDK client the server computer system can package a file describing the server side Python methods for the RESTful web service a file containing sample Python code a file containing documentation etc. in the Python SDK client. The SDK client can be in a particular programming language e.g. Python Java etc. . According to various implmentations the methods can be stored as part of the SDK clients and downloaded to client machines. According to various implementations the methods e.g. Python methods Java methods etc. can be stored on the server computer system and the server computer system can receive a call for one of the stored methods e.g. Python add method Java add method etc. for example from the RESTful web service SDK client.

A machine can include a server . The server can include one or more RESTful web services . REpresentational State Transfer REST is an architecture style for accessing information on the web. In REST information on the server side is considered a resource which developers can access in a uniform way using URIs and HTTP.

A RESTful web service can be defined based on input of an entity. An entity as referred to herein can represent any person a business organization such as a corporation an educational institution such as a college and university etc. The RESTful web service can have one or more resources which can be accessed for example by an application hosted on a client machine via a RESTful SDK client . The client machine may be a computing device such as a server computer a desktop computer a set top box a gaming console a television a portable computing device such as and not limited to mobile telephones personal digital assistants PDAs portable media players netbooks laptop computers and the like.

For example a RESTful web service may be defined for the entity s customer data. The RESTful web service may have a resource that is a list of all of the entity s customers a resource that is data for a specific customer a resource for adding a customer to the customer data etc. The RESTful web service can have URIs A C that correspond to the resources of the RESTful web service . For example URI A can be for the list of all of the entity s customers URI B can be for data for a specific customer identifier ID and URI C can be used to add a customer.

An application can use the URIs A C via a RESTful SDK client to consume the resources. For example the application can obtain a list of the entity s customers via the RESTful SDK client . The client machines can host one or more applications . An application can be any type of application including for example a web application a desktop application a browser application etc.

The server can include a web service interface development tool for allowing applications to consume resources of a RESTful web server via a RESTful SDK client . In one implementation the web service interface development tool can include a RESTful service description language RSDL module a RESTful client abstraction module a SDK client creation module and a preservation module . Note that in alternative implementations the functionality of one or more of the modules may be combined or divided. The RSDL module can describe the URIs e.g. URIs A C for the RESTful web services in a generic format. A generic format is a format that can be used by a number of different programming languages. The RSDL module can publish a description of the URIs A C as server side metadata . The server side metadata can expose the structure of the URIs A C for the RESTful web service and can include metadata A C for the corresponding URIs A C. The server side metadata can be a RSDL file that describes the URIs A C. The server side metadata can be an XML formatted document that includes information about each URI A C for the RESTful web service including for example and not limited to operations e.g. add delete get etc. that can be called on the RESTful web service input parameters that can be passed for the operations return values from an operation etc. In one implementation the RSDL module uses the source code A C for the URIs A C for the RESTful web service to create the server side metadata . The URI source code A C can be stored in the server . In another implementation the RSDL module receives user input to create the server side metadata for the URIs A C. The server side metadata can be stored in a data store that is coupled to the server .

The RESTful client abstraction module can create programming language templates A B also referred to as templates for various programming languages such as and not limited to Python and Java. For example programming language template A may be for Python and programming language template B may be for Java.

The templates A B.A B can be used to convert the server side HTTP based web service resources into the structure of the programming language for the RESTful SDK client . For example the SDK client creation module which resides in the server can use the templates A B A B to automatically generate methods A B which corresponds to the URIs A C without user interaction in various programming languages. For example programming language template A may be used to automatically generate Python methods A and programming language template B may be used to automatically generate Java methods B. For example if the server side HTTP based web service resource uses a POST HTTP method the programming language template B for Java can be used to create a Java based add method for the RESTful SDK client .

The SDK client creation module can automatically create SDK clients A B without user interaction for various programming languages e.g. Python Java based on the methods A B. For example SDK client A may be for Python and SDK client B may be for Java. Implementations for automatically creating RESTful web service SDK clients is described in greater detail below in conjunction with .

The SDK client creation module can also detect changes made to the RESTful web service and can automatically update the SDK clients A B without user interaction to reflect the change s in the RESTful web service . For example a resource to delete a customer may be added to the RESTful web service . The SDK client creation module can detect the change for example from server side metadata that has been updated for the delete resource can create new methods A B for the new resource and can create an updated SDK client A B to reflect the new delete resource offered by the RESTful web service.

A SDK client A B A B which can include data describing the server side methods A B A B that can be called can be downloaded to a client machine as a RESTful SDK client . For example the application may be a Java based application and a RESTful SDK client in Java may be installed on the client machine to allow the Java based application to consume the RESTful web service .

A RESTful client abstraction module e.g RESTful client abstraction module in can create programming templates e.g. programming templates A B in by identifying the metadata components in the server side metadata for the URIs of the RESTful web service. Examples of metadata components can include and are not limited to a URI description component a HTTP method component A C a header parameter component A C a body parameter component a URI argument component A B a response component A B and a documentation component.

The SDK client creation module e.g. SDK client creation module in can use the programming templates e.g. programming templates A B in to automatically create methods which correspond to the URIs of the RESTful web service resources without user interaction in various programming languages. For example the SDK client creation module can use a Python template to create an add method in Python for the URI description a get method in Python for the URI description and a remove method in Python for the URI description . The SDK client creation module can create a SDK client for Python that describes the Python methods e.g. add method get method and remove method that can be called for example by an application via the SDK client. Implementations for creating a SDK client is described in greater detail below in conjunction with .

The RESTful client abstraction module may correspond to a RESTful client abstraction module in a machine of . The RESTful client abstraction module can include a metadata component sub module and an abstraction sub module . Note that in alternative implementations the functionality of one or more of the sub modules can be combined or divided.

The metadata component sub module can identify the metadata components in a RESTful service description language. Examples of the metadata components can include and are not limited to a URI description component a HTTP method component a header parameter component a body parameter component a URI argument component a response component and a documentation component. The metadata components can have sub components. For example a HTTP method component can have sub components to represent the various HTTP methods e.g. POST GET DELETE etc. .

The metadata component sub module can be coupled to a data store that stores server side metadata e.g. RSDL files for RESTful web services. In one implementation the metadata component sub module searches the RSDL files to identify the metadata components and or sub components. In another implementation the data store may store component data that describes the metadata components and or sub components and the metadata component sub module can identify the metadata components and or sub components from the component data . The component data can be user defined data. For example the metadata component sub module may receive user input from a RESTful web service developer via user interface specifying the various metadata components and or sub components. The user interface can be for example and not limited to a graphical user interface GUI command line interface etc. In another implementation the metadata component sub module automatically creates the component data after searching and extracting the metadata components and sub components from the RSDL files .

The abstraction sub module can identify various programming code formats in various programming languages e.g. procedural programming languages object oriented programming languages that correspond to the metadata components and or sub components and can create programming language templates using the corresponding programming code formats for the metadata components and or sub components. Programming code formats can include formats for for example and not limited to methods functions object rules etc. for a programming language. The data store can store programming language configuration data for various programming languages e.g. Python Java etc. that describes the programming code formats for the corresponding programming language. For example in Python the programming code format for a method function may be defined with the word def followed by the method name and parentheses. Any input parameters or arguments can be placed within the parentheses. The programming code format of a Python method may include a return statement to indicate the exit of the function and optionally passing back an expression to the caller. One example of programming code format for a Python method according to one implementation is described in greater detail below in conjunction with .

The abstraction sub module can create a programming language template for a particular programming language. The abstraction sub module can determine which programming language to use for example by receiving user input via the user interface . In one implementation the programming language template is a file that can be populated with input data that may be extracted from a RSDL file . The populated template can represent one or more methods that correspond to the one or more URIs of a RESTful web service. One implementation of using a template to create methods is described in greater detail below in conjunction with . In another implementation the programming language template is a script which when executed uses input data e.g. input data extracted from a RSDL file to create a file containing the one or more methods that correspond to the one or more URIs of the RESTful web service.

The abstraction sub module can create programming code placeholders in the programming language template for the metadata components and or sub components using the programming code format that corresponds to the metadata component and or sub component. For example there may be a programming code placeholder in the programming language template for a URI description component a HTTP method component a header parameter component a body parameter component a URI argument component a response component and a documentation component.

The programming language templates can be used to automatically generate server side methods functions that correspond to the RESTful web service resources without user interaction in various programming languages. One implementation describing a SDK client creation module e.g. client SDK creation module using the programming language templates to create methods is described in greater detail below in conjunction with .

The data store can be a persistent storage unit. A persistent storage unit can be a local storage unit or a remote storage unit. Persistent storage units can be a magnetic storage unit optical storage unit solid state storage unit electronic storage units main memory or similar storage unit. Persistent storage units can be a monolithic device or a distributed set of devices. A set as used herein refers to any positive whole number of items.

The template can include programming code placeholders that correspond to metadata components and or sub components for a RESTful web service. For example the template may include a method placeholder that includes various placeholders for various metadata components and or sub components. Examples of metadata components can include and are not limited to a URI description component a HTTP method component a header parameter component a body parameter component a URI argument component a response component and a documentation component. Examples of sub components can include for example and not limited to header run time sub components body run time sub components HTTP method sub components for various HTTP methods e.g. GET POST DELETE etc. etc.

For example for Python the method placeholder can include the word def followed by a method name placeholder that corresponds to a HTTP method component e.g. HTTP method component in . In one implementation the programming code placeholders include brackets as a representation of input data that may be used to populate the template . For example the URI may use a HTTP POST method as indicated in the RSDL file for the RESTful web service and the method name placeholder may be populated with add which in Python may correspond to the POST method. One implementation for populating the template is described in greater detail below in conjunction with .

The method placeholder may include parentheses and the word self and one or more parameter placeholders in the parentheses. For Python any input parameters or arguments can be placed within parentheses. For example there may be one or more body parameter placeholders that correspond to body parameter components e.g. body parameter component in and one or more header parameter placeholders A B that correspond to header parameter run time sub components e.g. header run time sub components A B in .

The template can include documentation placeholders that correspond to documentation components. The documentation placeholders can include documentation type placeholder for describing the type of method documentation parameter placeholders for describing the methods and a documentation return placeholder for describing what the method returns. When populated the documentation parameter placeholders can include the argument names and one or more lines of descriptive text. When populated the documentation return placeholder can include the argument names and one or more lines of descriptive text.

The template can include a URI placeholder that corresponds to a URI description component e.g. a URI description component in . For example in Python the URI placeholder may be url where the brackets represent input data that can be extracted from a RSDL file for a RESTful web service. For example the URI description component in the server side metadata e.g. metadata in may include href api datacenters which a portion can be used as input data to populate the URI placeholder .

For Python the template may include a result object placeholder for the method. The result object placeholder can include one or more placeholders that correspond to metadata components and or sub components. For example the result object placeholder can include a method name placeholder that corresponds to the HTTP method component e.g. HTTP method component in a body run time placeholder that corresponds to a body run time sub component e.g. body run time sub component in and a header run time placeholder that corresponds to a header run time component e.g. header run time sub component A B in .

For Python the template may include a return statement for the method to indicate the exit of the function and optionally passing back an expression to the caller. The template can include a return placeholder that corresponds to a response component e.g. response component in . The return placeholder can include parentheses to pass back an expression to the caller. The return placeholder can include brackets to represent use input data that may be extracted from an RSDL file.

At block processing logic identifies metadata components that are associated with one or more URIs in RESTful service description language e.g. RSDL file for a RESTful web service. The metadata components can include sub components. In one implementation processing logic identifies the metadata components from component data that is stored in a data store that is coupled to the RESTful client abstraction module. In another implementation processing logic searches RSDL files in the data store to identify the metadata components. At block processing logic identifies a programming language to use to create a template for the programming language. Processing logic can receive user input identifying the which programming language to use. At block processing logic identifies programming code formats that correspond to the metadata components. Processing logic can use programming language configuration data that is stored in the data store to locate the programming code format that corresponds to the metadata components. For example the programming language configuration data may map a HTTP method component and HTTP POST method sub component to a programming code format for an add method.

At block processing logic creates programming code placeholders in a template for the metadata components and or sub components using the corresponding programming code formats. At block processing logic stores the programming language template in the data store. At block processing logic determines whether to create a programming language template for another programming language. For example processing logic may receive user input indicating that another programming language template should be created. If there is another programming language template to create processing logic can return to block to identify the programming language to use to create the programming language template.

The SDK client creation module may correspond to a SDK client creation module in a machine of . The RESTful SDK client creation module can include an identification sub module a method sub module a software development kit SDK sub module and a notification sub module . Note that in alternative implementations the functionality of one or more of the sub modules can be combined or divided.

The identification sub module can identify a RESTful service description language RSDL describing URIs for a RESTful web service. The RSDL for the RESTful web service can be a RSDL file that is stored in a data store that is coupled to the SDK client creation module . The data store can store a RSDL file for any number of RESTful web services. In one implementation identification sub module automatically locates a RSDL file for the RESTful web service without user interaction. For example the identification sub module may determine the location of a RSDL file based on configuration data that is stored in the data store that is coupled to the identification sub module . In another implementation the identification sub module receives user input via a user interface that is coupled to the identification sub module identifying which RSDL file to use. The user interface can be a graphical user interface a command line interface etc.

The identification sub module can also identify one or more changes in the RSDL file . For example the identification sub module may identify a new resource that was added to the RESTful web service.

The identification sub module can identify URIs and metadata for the URIs in the RSDL file for the RESTful web service. The identification sub module can use configuration data that is stored in the data store to determine which search terms to use to identify the URIs and the metadata for the URIs. The identification sub module can use search terms form the configuration data to identify HTTP attribute metadata HTTP method metadata header metadata body metadata URI argument metadata response metadata etc. for the URIs in the RSDL file . The identification sub module can identify metadata for the URIs from other files in the data store . For example the identification sub module can identify documentation metadata for the URIs from one or more other files in the data store .

The identification sub module can identify a programming language to use to create a SDK client for the RESTful web service. In one implementation identification sub module automatically identifies the programming language based on configuration data . In another implementation the identification sub module receives user input specifying the programming language e.g. Python Java PHP etc. to use via the user interface . The identification sub module can identify a programming language template in the data store that corresponds to the identified programming language. The data store can store a programming language template for any number of programming languages.

The method sub module can create and or update methods for the URIs. The method sub module can extract the identified metadata or a portion of the identified metadata from the RSDL file and or other files in the data store and can populate a programming language template based on the extracted data to create and or update a method for a URI. One implementation of populating a template to create and or update a method is described in greater detail below in conjunction with . The method sub module can use mapping data that is stored in the data store to determine which metadata to use to populate the programming language template . For example the method sub module may extract a POST method from the RSDL file and may use the mapping data to determine that a POST method corresponds to an add method in Python. The method sub module can populate the Python programming language template with add in the appropriate placeholders in the template .

The method sub module can store the created and or updated methods for the URIs for the RESTful web service on a server. The method sub module can store the created and or updated methods as part of the SDK clients . The server can be the server that is providing the RESTful web service. The method sub module can store one or more files for the methods in a data store that is coupled to the server. The server side methods can be called for example by an application via the RESTful web service SDK clients e.g. RESTful SDK client in to consume the RESTful web service resource that corresponds to the method . The server may receive a call from the SDK client to execute one for the stored methods execute the method and return a value to the SDK client.

The SDK sub module can create SDK clients for various programming languages based on the corresponding methods for the programming languages. The SDK sub module can create files and or locate files for example from one or more data stores that are coupled to the SDK client creation module and package the files together to create the SDK client for the programming language. For example for a Python SDK client the SDK sub module can include a file describing the Python methods which an application can call via a SDK client for the RESTful web service a file containing sample Python code for interfacing with the RESTful web service a file containing documentation etc. in the Python client SDK . A user such as software developer can use the Python SDK client to communicate with the HTTP based RESTful web service.

The notification sub module can send a notification describing the created and or updated SDK clients . The notifications can be sent for example to systems and or users that have downloaded the SDK clients . The notification can be for example and not limited to an email message a system message an instant message a mobile device message etc.

The data store can be a persistent storage unit. A persistent storage unit can be a local storage unit or a remote storage unit. Persistent storage units can be a magnetic storage unit optical storage unit solid state storage unit electronic storage units main memory or similar storage unit. Persistent storage units can be a monolithic device or a distributed set of devices. A set as used herein refers to any positive whole number of items.

At block processing logic identifies URIs for a RESTful web service. Processing logic can identify the URIs in a RESTful service description language RSDL describing URIs for a RESTful web service. In one implementation processing logic automatically locates a RSDL for the RESTful web service without user interaction. For example processing logic may determine the location of a RSDL file based on configuration data. In another implementation processing logic receives user input identifying the RSDL for the RESTful web service. For example processing logic may receive user input of the location of a RSDL file. The RSDL can be stored in a data store that is coupled to the SDK client creation module. At block processing logic identifies a programming language to use for creating a software development kit SDK client for the RESTful web service. In one implementation processing logic automatically identifies the programming language based on configuration data. In another implementation processing logic receives user input specifying the programming language e.g. Python Java PHP to use.

At block processing logic creates methods for the URIs for the RESTful web service without user interaction using the programming code format of the identified programming language. Processing logic can also use the RSDL to create the methods. Processing logic can identify a programming language template that corresponds to the identified programming language and can use the programming language template to automatically create the methods without user interaction. One implementation for using a programming language template to create the methods is described in greater detail below in conjunction with .

At block processing logic automatically creates a SDK client for the identified programming language without user interaction. Processing logic can store the methods as part of the SDK client. Processing logic can create files and or locate files and package the files together to automatically create the SDK client for the identified programming language. For example for a Python SDK client processing logic can include a file describing the Python methods for the RESTful web service that an application can call via the SDK client a file containing sample Python code for interfacing with the RESTful web service a file containing documentation etc. in the Python SDK client. The SDK client e.g. Python SDK client can be used to allow an application e.g. Python application to communicate with the HTTP based RESTful web service.

At block processing logic determines whether to create a SDK client in another programming language. In one implementation processing logic automatically determines whether to create a SDK client in another programming language based on configuration data. In another implementation processing logic receives user input indicating whether to create a SDK client in another programming language. If processing logic is to create a SDK client in another programming language processing logic can return to block to identify the programming language.

At block processing logic identifies a programming language template in a data store that is coupled to the SDK client creation module for a selected programming language. For example the selected programming language may be Python and processing logic may identify a Python programming language template in the data store. At block processing logic identifies a URI in the RESTful service description language RSDL e.g. RSDL file for a selected RESTful web service. At block processing logic populates a URI placeholder in the template based on metadata that is extracted from the RSDL. For example processing logic may extract data from a HTTP hypertext attribute e.g. HTTP href in the metadata for the URI and may populate the URI placeholder using the extracted HTTP hypertext attribute metadata.

At block processing logic populates a method name placeholder in the template based on metadata that is extracted from the RSDL. For example processing logic may extract POST from the HTTP method metadata for the URI. Processing logic may use mapping data that is stored in the data store to determine that a HTTP POST method corresponds to an add method in Python. Processing logic can populate the method name placeholder with add .

At block processing logic populates documentation placeholders in the template based on metadata that is extracted from the RSDL. For example processing logic may extract argument names from the metadata for the URI and may populate the documentation placeholders with the argument names.

At block processing logic determines whether there is any header metadata for the URI in the RSDL. Processing logic can use configuration data that is stored in the data to determine which terms to search for in the metadata to determine if there is header metadata. If there is header metadata block processing logic populates one or more header related placeholders in the template based on extracted metadata at block . One example of a populated header related placeholder is described in greater detail below in conjunction with according to one implementation.

At block processing logic determines whether there is any body metadata for the URI in the RSDL. Processing logic can use configuration data that is stored in the data to determine which terms to search for in the metadata to determine if there is body metadata. If there is body metadata block processing logic populates one or more body related placeholders in the template based on extracted metadata at block . One example of a populated body related placeholder is described in greater detail below in conjunction with according to one implementation.

At block processing logic determines whether there is any URI argument metadata for the URI in the RSDL. Processing logic can use configuration data that is stored in the data to determine which terms to search for in the metadata to determine if there is URI argument metadata. If there is URI argument metadata block processing logic populates one or more URI argument related placeholders in the template based on extracted metadata at block .

At block processing logic determines whether there is any response metadata for the URI in the RSDL. Processing logic can use configuration data that is stored in the data to determine which terms to search for in the metadata to determine if there is response metadata. If there is response metadata block processing logic populates a return placeholder in the template based on extracted metadata at block . One example of a populated return placeholder is described in greater detail below in conjunction with according to one implementation.

At block processing logic stores the populated placeholders as a method for the URI. The method for the URI can be stored in a file in a server. The method can be stored as part of the SDK client. At block processing logic determines whether there is another URI in the RSDL for the RESTful web service. If there is another URI processing logic returns to block to identify the URI in the RSDL.

For example the URI may use a HTTP POST method as indicated in the RSDL file for the RESTful web service and the one or more placeholders may be populated with add which in Python may correspond to the POST method. The placeholder may include parentheses and the word self and one or more parameter placeholders A C in the parentheses. For example there may be one or more body parameter placeholders A that may be populated with data that corresponds to body parameter components e.g. body parameter component in and one or more header parameter placeholders B C that may be populated with data that corresponds to header parameter run time sub components e.g. header run time sub components A B in . The documentation placeholders may be populated with data that corresponds to documentation components. The populated documentation placeholders may include the argument names and one or more lines of descriptive text. The URI placeholder may be populated with data that corresponds to a URI description component e.g. a URI description component in . For example the URI description component in the server side metadata e.g. metadata in may include href api datacenters that can be used as input data to populate the URI placeholder . For Python the result object placeholder may be populated with data that corresponds to one or more metadata components and or sub components. For example the result object placeholder may be populated with data that corresponds to a body run time sub component e.g. body run time sub component in and or data that corresponds to a header run time component e.g. header run time sub component A B in . The return placeholder may be populated with data that corresponds to a response component e.g. response component in .

At block processing logic automatically identifies a change in the RESTful service description language RSDL describing URIs for a RESTful web service without user interaction according to one implementation. In one implementation processing logic compares versions of the RSDL to each other to identify any changes. For example a new resource e.g. delete customer data may have been recently added to a RESTful web service. In another example the parameters for a resource may have changed. For example the parameters for the contact information for a customer data resource may have changed to include a website. The RSDL file for the RESTful web service may have been updated to reflect the change e.g. new resource changed parameters etc. . Processing logic may automatically identify the change e.g. new resource changed parameters etc. from the updated RSDL e.g. RSDL file without user interaction. In another implementation processing logic receives user input identifying the change in the RSDL e.g. RSDL for the RESTful web service.

At block processing logic automatically updates methods and or creates methods for the change without user interaction. For example processing logic may determine that the change is associated with one or more methods that are stored in a data store that is coupled to the SDK client creation module. For example there may be a Python method and Java method in the data store for retrieving customer contact information and processing logic may determine that the change e.g. changed parameters is associated with the stored Python method and Java method. Processing logic can update the stored Python method and the stored Java method based on the change. In another example processing logic can create one or more new methods for a new resource that is added to the RESTful web service. For example processing logic may create a new Python method and a new Java method for a new resource that deletes customer data.

At block processing logic stores the updated created methods for the RESTful web service. The updated created method can be stored on the server. The updated created methods can be stored as part of SDK clients. At block processing logic automatically updates the SDK clients without user interaction based on the updated created methods. For example processing logic updates a file in the SDK clients to describe a new method and or an updated method. In one implementation processing logic sends a notification describing the updated SDK clients at block . Processing logic can send a notification to any user and or system that has downloaded the SDK clients.

The machine may be a personal computer PC a tablet PC a set top box STB a Personal Digital Assistant PDA a cellular telephone a web appliance a server a network router a switch or bridge or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further while a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The example computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor a central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute instructions for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine readable storage medium also known as a computer readable medium on which is stored one or more sets of instructions or software embodying any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine readable storage media.

In one implementation the instructions include instructions for a RESTful client abstraction module e.g. RESTful client abstraction module of and or a software development kit SDK client creation module e.g. SDK client creation module of and or a software library containing methods that call modules in a RESTful client abstraction module and or a SDK client creation module. While the machine readable storage medium is shown in an example implementation to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term machine readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as receiving or identifying or creating or storing or detecting or updating or populating or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage devices.

The present disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the intended purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the method. The structure for a variety of these systems will appear as set forth in the description below. In addition the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.

The present disclosure may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present disclosure. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium such as a read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc.

In the foregoing specification implementations of the disclosure have been described with reference to specific example implementations thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of implementations of the disclosure as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

