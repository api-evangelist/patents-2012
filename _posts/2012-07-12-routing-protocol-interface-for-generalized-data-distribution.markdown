---

title: Routing protocol interface for generalized data distribution
abstract: In general, techniques are described for defining an interface to a network router software infrastructure that allows developers to dynamically extend a routing protocol executed by the network router to distribute data throughout the routing domain for use with custom applications. In some examples, a routing protocol process executing on a control plane of a network device may expose an interface, such as an Application Programming Interface (API), that defines methods and parameters for extending the operation of a routing protocol executed by the routing protocol process. Third-party developers may then build custom applications that invoke the interface of the routing protocol process to define new routing protocol messages or message payloads, inject application-specific data into the routing protocol process for distribution within the newly defined messages/payloads, and extract application-specific data that is carried by newly defined messages/payloads that are originated by another network device in the routing domain.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09137116&OS=09137116&RS=09137116
owner: Juniper Networks, Inc.
number: 09137116
owner_city: Sunnyvale
owner_country: US
publication_date: 20120712
---
The invention relates to computer networks and more particularly to computer network routing protocols.

A computer network is a collection of interconnected computing devices that can exchange data and share resources. In a packet based network the computing devices communicate data by dividing the data into small blocks called packets which are individually routed across the network from a source device to a destination device. The destination device extracts the data from the packets and assembles the data into its original form. Dividing the data into packets enables the source device to resend only those individual packets that may be lost during transmission.

Network routers maintain routing information that describes available routes through the network. Upon receiving a packet a router examines information within the packet and forwards the packet in accordance with the routing information. In order to maintain an accurate representation of the network routers exchange routing information in accordance with one or more routing protocols such as an interior gateway protocol IGP or Border Gateway Protocol BGP .

Although primarily used by network routers for distributing Internal Protocol IP version 4 IPv4 reachability information within and among autonomous systems to facilitate network layer routing network router vendors have modified BGP to execute within their network routers to distribute reachability information for other standardized network layer protocols including IP version 6 IPv6 Layer 3 Virtual Private Networks L3VPNs Layer 2 VPN L2VPNs traffic engineering using BGP with Traffic Engineering extensions BGP TE and application layer traffic optimization ALTO . In general to utilize BGP with a new network application a network router vendor modifies the BGP protocol software executed by the router to associate a new address family with a new network application and also define a data representation in the form of Network Layer Reachability Information NLRI for the new address family. The network router vendor then produces updated executable software based on the modified BGP protocol software and releases the updated executable software to their customers for a software upgrade of control plane software executing on the routing engine of the customers routers. Only after completing the rigorous testing release and installation of the updated BGP software can the routers then utilize the newly defined address family by executing the modified BGP protocol software to exchange BGP messages and use the NRLI distributed therein in the new network application.

In general techniques are described for defining an interface to a network router software infrastructure that allows developers to dynamically extend a routing protocol executed by the network router to distribute any form of data throughout the routing domain for use with custom applications. For example a routing protocol process executing on a control plane of a router or other network device may expose an interface such as an Application Programming Interface API that defines methods and parameters for extending the operation of a routing protocol executed by the routing protocol process. Third party developers may then build custom applications that invoke the interface of the routing protocol process to register new address families define new routing protocol messages or message payloads inject application specific data into the routing protocol process for distribution within the newly defined messages payloads and extract application specific data that is carried by newly defined messages payloads that are originated by another network device in the routing domain. As a result custom applications may multiplex their respective application specific data in the routing plane of a network for distribution to custom applications executing on other routers. Moreover the custom applications may be installed and deployed within the control plane of routers without requiring a service upgrade to the routing protocol software installed on the routers.

Exposing the routing protocol process in this way may enable both vendor and third party developers to dynamically utilize a network routing protocol for generalized data distribution without requiring modification and upgrade to the routing protocol process. For the vendor this may enable the routing protocol process and application development teams to decouple at least to some extent their respective development processes and improve innovation and time to market by reducing the resources and team coordination required to produce a stable application that uses an extension to a routing protocol. Similarly third party developers may use techniques described herein to develop custom applications independently of the network router vendor to improve and or extend operations of a third party network for example without having to enlist the vendor to perform application specific modifications to the routing protocol process of the network device. In addition by utilizing an existing routing protocol having an exposed interface to distribute application specific data the techniques may facilitate reliable scalable loop free and generalized data distribution throughout the network.

In one example a method includes storing a set of one or more predefined databases each associated with a different one of a set of one or more predefined address family identifiers for a routing protocol. The method also includes executing a routing protocol process with a network device to exchange routing protocol advertisements with a peer network device in accordance with the routing protocol wherein one or more of the routing protocol advertisements each specifies one of the predefined address family identifiers and includes information associated with the predefined database that is associated with the predefined address family identifier specified in the routing protocol advertisement. The method further includes executing an application with the network device. The method also includes invoking an interface of the routing protocol process with the application to dynamically extend the routing protocol process to register a new address family identifier for the routing protocol. The method further includes in response to receiving the new address family identifier via the interface dynamically creating a new database and associating the new address family identifier with the new database.

In another example a network device includes a control unit comprising one or more processors one or more interface cards and a routing protocol process to execute on the control unit to exchange routing protocol advertisements with a peer network device using the interface cards in accordance with a routing protocol. The network device also includes a set of one or more predefined databases each associated with a different one of a set of one or more predefined address family identifiers for the routing protocol wherein the routing protocol process exchanges with a peer network device in accordance with the routing protocol routing protocol advertisements wherein one or more of the routing protocol advertisements each specifies one of the predefined address family identifiers and includes information associated with the predefined database that is associated with the predefined address family identifier specified in the routing protocol advertisement. The network device also includes an application to execute on the control unit and address family configuration data. The network device further includes an interface of the routing protocol process invoked by the application to dynamically extend the routing protocol process to register a new address family identifier for the routing protocol wherein in response to receiving the new address family identifier via the interface the interface of the routing protocol process dynamically creates a new database and associates the new address family identifier with the new database in the address family configuration data.

In another example a non transitory computer readable storage medium contains instructions. The instructions cause one or more programmable processors to store a set of one or more predefined databases each associated with a different one of a set of one or more predefined address family identifiers for a routing protocol. The instructions also cause the processors to execute a routing protocol process with a network device to exchange routing protocol advertisements with a peer network device in accordance with the routing protocol wherein one or more of the routing protocol advertisements each specifies one of the predefined address family identifiers and includes information associated with the predefined database that is associated with the predefined address family identifier specified in the routing protocol advertisement. The instructions further cause the processors to execute an application with the network device invoke an interface of the routing protocol process with the application to dynamically extend the routing protocol process to register a new address family identifier for the routing protocol and in response to receiving the new address family identifier via the interface dynamically create a new database and associating the new address family identifier with the new database.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features objects and advantages of the invention will be apparent from the description and drawings and from the claims.

Each of autonomous systems runs one or more interior gateway protocols IGPs such as Open Shortest Path First OSPF Routing Information Protocol RIP Intermediate System to Intermediate System IS IS Interior Gateway Routing Protocol IGRP Enhanced IGRP EIGRP and Interior Border Gateway Protocol iBGP and each of autonomous systems includes a set of one or more routers operating within a single administrative domain according to a routing policy. Autonomous systems each have an identification number provided by an Internet registry or by an Internet service provider ISP that uniquely identifies the autonomous system to other autonomous systems. In some instances the identification number may be drawn from a private identifier number space and therefore unique only within a private network comprising ASes . In various embodiments each of autonomous systems may represent a service provider network an enterprise or campus network a content access network CAN or a content delivery network CDN for example. In addition one or more service providers content provider or enterprise campus network administrators may administer any one or more of autonomous systems .

Routers of autonomous systems implement a routing protocol to route packets from a source network addresses to destination network addresses and each of autonomous system may offer network packet delivery to a network or subnet of one or more endpoints identified by a network address prefix that encompasses the network address range defined by the network addresses of endpoints. Although the techniques of this disclosure may be applied with respect to multiple different routing protocols the techniques are generally described hereinafter with respect to Multiprotocol BGP MP BGP a routing protocol that defines extensions to BGP for IPv4 i.e. BGP 4 for carrying routing information for multiple different network layer protocols. MP BGP overloads BGP routing protocol advertisements with attributes that define Network Layer Reachability Information NLRI that routers of ASes may use to advertise routing information associated with multiple different network layer protocols. Routers of ASes specify for each multiprotocol NRLI included in a BGP routing protocol advertisement an address family identifier that is associated with a network layer protocol. For example a multiprotocol NLRI carried in a BGP routing protocol advertisement may specify an address family identifier for IPv4 in which case the multiprotocol NLRI carries routing information e.g. routes for IPv4. An example description of a type of MP BGP is included in T. Bates et al. Multiprotocol Extensions for BGP 4 Request for Comments 4760 Network Working Group Internet Engineering Task Force January 2007 which is incorporated by reference herein in its entirety hereinafter referred to as RFC 4760 . Multiprotocol NLRI may represent the Multiprotocol Reachable NLRI MP REACH NLRI and Multiprotocol Unreachable NLRI MP UNREACH NLRI described in Bates et al. referenced above. An address family identifier uncapitalized may represent a combination of an Address Family Identifier AFI and a Subsequent AFI SAFI in Multiprotocol Reachable and Multiprotocol Unreachable NLRI as described in RFC 4760.

In the illustrated example AS A and AS B include respective autonomous system boundary routers A B ASBRs that connect AS A with AS B over a communication link. ASBRs execute BGP to exchange in external BGP peering session routing information for respective autonomous systems . For example ASBR A provides routing information to ASBR B that describes generally at a high level of aggregation an internal topology of AS A and or reachability of prefixes by AS A. Similarly ASBR A receives routing information from ASBR B that describes an internal topology of AS B and or reachability of prefixes by AS B.

Routing information exchanged in BGP peering session and BGP peering sessions may include topology information for one or more network layer protocols. For example ASBR A advertises routing information to ASBR B that is received from one or more interior routing protocol speakers of AS A executing an IGP such as Internal BGP iBGP . Topology information may also include administratively configured routes or other information on ASBR A. Network layer protocols may include Internet Protocol version 4 IPv4 Internet Protocol version 6 IPv6 Layer Two Virtual Private Networking L2VPN Layer Three VPN L3VPN and BGP with Traffic Engineering extensions BGP TE .

Autonomous system A includes BGP speakers that peer with one another to internally advertise routing information for prefixes reachable by ASBR A to other routers within AS A. BGP speakers of AS A include ASBR A route reflector and router A. Router A may represent for instance an internal router or an ASBR of AS A. ASBR A and router A each establish a BGP peering session with which to exchange routes with route reflector . Route reflector is a BGP speaker that re advertises or reflects routes received from other BGP speakers to enable the BGP speakers to avoid forming a full mesh of peering sessions . However in instances of network system that do not include route reflector ASBR A and router A may peer directly in a peering session.

Autonomous system B also includes BGP speakers that peer with one another to internally advertise routing information for prefixes reachable by ASBR B to other routers within AS B. BGP speakers of AS B include ASBR B and router B. Router B may represent for instance an internal router or an ASBR of AS B. ASBR B and router B establish a BGP peering session with which to exchange routing information.

Routing protocol advertisements issued by ASBRs routers and route reflector may represent for example BGP UPDATE messages. In conventional BGP a BGP UPDATE message associates a network layer protocol prefix with a NEXT HOP for the prefix and a list of autonomous systems that must be traversed to reach the prefix AS PATH in BGP UPDATE messages .

In accordance with techniques described herein routers A B include respective BGP interfaces A B illustrated as BGP IFs A B ad collectively referred to herein as BGP interfaces that enable respective applications A B collectively applications to modify the operation of MP BGP by routers to effect dynamic generalized application data distribution for the applications.

BGP interface A for example includes methods and parameters that permit application A executing on router A to register a new address family identifier for MP BGP for use by the application A for application data distribution. The new address family identifier is an address family identifier that is not previously associated in router A with an application and or with a network layer protocol. Put another way the new address family identifier is not pre defined in the implementation of MP BGP developed by the vendor of router A. Such an implementation may for instance pre define address family identifiers for well known network layer protocols e.g. the network layer protocols listed above and provide well defined interfaces to applications executing on router A that seek to make use of network layer information exchanged by router A in accordance with those protocols. Furthermore although the new address family identifier refers to an address family in keeping with the conventional uses of BGP i.e. distributing network layer reachability information e.g. routes to network layer endpoints application A may register the new address family identifier for use in distributing application data that may be more loosely related or even unrelated to network layer protocols.

Upon registering the new address family identifier application A may invoke BGP interface A to inject application data into the MP BGP process of router A which then distributes the injected application data to BGP peers in attributes in a BGP UPDATE message that specifies the new address family identifier registered by application A. In addition BGP interface A provides an interface with which application A may withdraw application data from the routing plane to indicate one or more NLRI prefixes are no longer reachable from router A or are otherwise invalid. As used herein the term application data may refer to a route carried in a BGP UPDATE message said route including one or more NLRI prefixes together with a set of one or more shared path attributes for the prefixes. In some cases one or more of the path attributes may be application specific and received via BGP interface A as opaque Type Length Value TLV objects for distribution along with the network layer prefixes. In this way intermediate routers of network system may accept and distribute path attributes that are not comprehensible to their respective BGP implementations. A vendor of applications may elect to register any of the path attributes with the Internet Assigned Numbers Authority IRNA .

In the illustrated example application A invokes BGP interface A to inject application data in the MP BGP process of router A which responsively issues BGP UPDATE message A to route reflector that includes NLRI that specifies the new address family identifier registered by application A. Route reflector reflects BGP UPDATE message A as BGP UPDATE message B to ASBR A which forwards the attributes and associated prefixes in BGP UPDATE message C to ASBR B which forwards the attributes and associated prefixes in BGP UPDATE message D to router B. Router B may then deliver the application data to application B for processing. As indicated above route reflector and ASBRs may be unable to interpret the application data included in BGP UPDATE messages A D for use in routing or other applications. Regardless route reflector and ASBRs may reflect or exchange the application data which they are unable to interpret.

BGP interface A thus exposes MP BGP to enable any application executing on router A to dynamically utilize the routing plane of network system to distribute application specific data to other routers in the network without requiring offline modification by the vendor to the software code that implements MP BGP for router A. In addition the techniques may be applied without requiring offline modification by the vendor to other BGP speakers of network system including route reflect and ASBRs . Applications may each represent a vendor supplied or a third party application executing on respective software platforms of routers that include respective BGP interfaces . Application A may represent a client and application B a server in a client server model or applications may represent peers in a peer to peer P2P model for instance. Application data exchanged by applications may include router information such as operational data including available bandwidth for interfaces CPU utilization temperature router identifiers and failure information network layer protocol information for network layer protocols topology information such as Application Layer Traffic Optimization ALTO network and cost maps traffic engineering data or any other data usable by applications to improve the operation of network system for packet delivery or provide information to operators of ASes .

For a vendor the techniques may therefore enable the MP BGP process and application development teams to improve innovation and time to market by reducing the resources and team coordination required to produce a stable application that uses a pre defined extension to MP BGP by decoupling at least to some extent development for the MP BGP process and for the application. Similarly third party developers may use the techniques to develop custom applications independently of the network router vendor to improve and or extend operations of a third party network for example without having to enlist the vendor to perform offline application specific modifications to the MP BGP process thus improving the scalability of the network system routing plane for third party developers. In addition by utilizing an existing and well documented routing protocol having a large base of knowledgeable users to distribute application specific data the techniques may facilitate reliable loop free and generalized data distribution throughout network system .

While described herein primarily with respect to MP BGP the techniques are extendible to other exterior and interior routing protocols such as Open Shortest Path First OSPF and Intermediate System to Intermediate System IS IS . For example router A may provide an OSPF interface by which application A may modify the operation of OSPF by router A to flood application data injected by application A via the OSPF interface throughout an OSPF area of AS A. In addition the techniques may be applied by network devices other than routers such as route servers content servers Domain Name Service DNS servers switches and route reflectors.

Router includes a control unit and interface cards A N IFCs coupled to control unit via internal links A N. Control unit may comprise one or more processors not shown in that execute software instructions such as those used to define one or more software or computer programs stored to a computer readable storage medium again not shown in such as non transitory computer readable mediums including a storage device e.g. a disk drive or an optical drive or a memory such as Flash memory random access memory or RAM or any other type of volatile or non volatile memory that stores instructions to cause the one or more processors to perform the techniques described herein. Alternatively or additionally control unit may comprise dedicated hardware such as one or more integrated circuits one or more Application Specific Integrated Circuits ASICs one or more Application Specific Special Processors ASSPs one or more Field Programmable Gate Arrays FPGAs or any combination of one or more of the foregoing examples of dedicated hardware for performing the techniques described herein.

In this example control unit is divided into two logical or physical planes to include a first control or routing plane A control plane A and a second data or forwarding plane B data plane B . That is control unit implements two separate functionalities e.g. the routing control and forwarding data functionalities either logically e.g. as separate software instances executing on the same set of hardware components or physically e.g. as separate physical dedicated hardware components that either statically implement the functionality in hardware or dynamically execute software or a computer program to implement the functionality.

Control plane A represents hardware or a combination of hardware and software of control unit that define control plane functionality of router . Control plane A manages and controls the behavior of router including the behavior of data plane B. Operating system of control plane A provides a run time environment for multiple different processes. Operating system may represent for example a UNIX operating system derivative such as Linux or Berkeley Software Distribution BSD . Operating system offers libraries and drivers by which processes may interact with data plane B for example or other hardware of router including a file system and main memory for router . Libraries and drivers of operating system may include Application Programming Interfaces APIs that provide standard interfaces for developers to invoke the functionality of operating system and router exposed by the libraries and drivers.

Processes executed by control plane A include vendor supplied processes that implement routing functionality and provide interfaces for managing router . Here vendor refers to a manufacturer of router and or operating system . Router and or operating system may be distributed in conjunction with vendor supplied processes to provide turn key routing functionality with the router hardware.

In the illustrated example vendor supplied routing protocol module RP module represents a routing protocol process that executes MP BGP by which routing information stored to one or more routing information bases A K collectively RIBs for respective address families may be determined. Routing information bases stored to a computer readable storage medium of control unit not shown in may include information defining a topology of a network such as network system of . Each of RIBs may be associated with a different one of network layer protocols illustrated as NW layer protocols . In such instances because each of network layer protocols is associated with a different address family identified e.g. by an AFI SAFI combination each of RIBs is likewise associated with a different address family recognized by MP BGP a BGP implementation included in vendor supplied RP module . For example RIB A may be associated with IPv4 and the address family identifier thereof RIB B may be associated with IPv6 and the address family identifier thereof RIB C may be associated with L3VPN and the address family identifier thereof and so on. RIBs thus define a set of predefined databases each associated with a different one of a set of predefined address family identifiers for respective network layer protocols . In this context predefined refers to a static implementation of RIBs and a static association of address family identifiers with network layer protocols respective RIBs within the version of RP module developed by the vendor of router and or operating system . In other words RIBs and the association between network layer protocols respective address family identifiers and respective RIBs is hard coded within the version of RP module distributed by the vendor. While described herein as constituting separate data structures RIBs may be implemented by control plane A as any one of a number of suitable data structures such as a single table with an address family identifier field specifying the address family identifier for each table row a set of tables or databases for each of RIBs linked lists trees tries and so on. Because RP module uses MP BGP for routing information distribution one or more of RIBs may each include a set of one or more NLRI for the corresponding address family.

Routing protocol module resolves the topology defined by respective routing information in RIBs to select and or determine one or more routes through the network for network layer protocols . Routing protocol module may then update data plane B with these routes where data plane B maintains a representation of these routes as respective forwarding information bases A K collectively FIBs . Each of FIBs is associated with one or RIBs that includes routing information for one of network layer protocols . Typically routing protocol module generates each of FIBs in the form of a radix or other lookup tree to map packet information e.g. header information having destination information and or a label stack to next hops and ultimately to interface ports of IFCs .

Forwarding or data plane B represents hardware or a combination of hardware and software of control unit that forwards network traffic in accordance with FIBs . Data plane B may include one or more forwarding units that each includes for example one or more packet forwarding engines PFEs each coupled to one or more interface cards. A forwarding unit may each represent for example a dense port concentrator DPC modular port concentrator MPC flexible physical interface card PIC concentrator FPC or another line card for instance that is insertable within a router chassis or combination of chassis.

In accordance with techniques of this disclosure RP module executes BGP interface by which user applications A N collectively user applications and illustrated as user app. A N modify the operation of MP BGP to facilitate generalized distribution of application specific data. BGP interface may represent any of BGP interfaces of and may include a user level library invocable by user applications for directing RP module to register new address families and to exchange with other routers using MP BGP application data using the new address families on behalf of user applications . BGP interface may use a sockets library shared memory files message passing such as Common Object Request Broker Architecture CORBA techniques message queuing or other inter process communication IPC mechanism for communication between user applications and RP module . In some instances aspects of BGP interface may be implemented as a kernel level library of operating system . A manufacturer of RP module may provide an API description for BGP interface to enable third party developers or other manufacturer software development teams to develop user applications that programmatically manipulate RP module and dynamically make use of BGP extensibility techniques described herein.

Each of user applications is a user level process executing on the software environment provided by operating system of control plane A. Any of user applications may represent an application developed by a third party such as a vendor customer or partner an Original Equipment Manufacturer OEM or a research institution that manipulates vendor supplied components of router including operating system RP module and or management interface to facilitate third party purposes such as network operations and management processing data into business information running network experiments to further research goals among others. The third party developers may use a vendor supplied software development kit SDK that provides the tools APIs and libraries to develop user applications that use BGP interface . The vendor supplied SDK may for example provide C C APIs. Any of user applications may alternatively represent an application developed by the vendor but nevertheless making use of BGP interface . For the vendor this may enable the RP module and user applications development teams to decouple at least to some extent their respective development processes and improve innovation and time to market by reducing the resources and team coordination required to produce a stable application that exchanges application data with other routers using MP BGP .

BGP interface provides user applications with a registration interface hereinafter register method for registering a new address family by specifying a corresponding address family identifier. An unregistration interface hereinafter unregister method of BGP interface allows user applications to remove a previously registered address family by specifying a corresponding address family identifier. As noted above an address family identifier may represent an AFI SAFI combination. In the illustrated example when invoked by user application A with a register method invocation message specifying an address family identifier BGP interface dynamically creates routing information base RIB A to store application data associated with the address family identified by the address family identifier. BGP interface additionally configures the new address family identifier in address family configuration data illustrated as AF config. . User application A may use one of the IPC mechanisms described above to send register method invocation message .

Dynamically created routing information bases A N collectively RIBs stored to a computer readable storage medium of control unit not shown in may include application data associated with respective user applications . Each of RIBs is not predefined and is instead dynamically created by BGP interface of RP module responsive to invocation of the register method. Accordingly RIBs are illustrated as dashed lines to indicate that their instantiation is contingent upon the actions of user applications to invoke the register method of BGP interface . While described herein as constituting separate data structures RIBs may be implemented by control plane A as any one of a number of suitable data structures such as a single table with an address family identifier field specifying the address family identifier for each table row a set of tables or databases for each of RIBs linked lists trees tries and so on. Control unit may store RIBs using one or more data structures substantially similar to those used for storing RIBs .

Application data stored to RIBs may but does not necessarily include routing information for network layer protocols such as IPv4 IPv6 and L3VPN. Rather application data may include any data that user applications distribute or obtain by operation of RP module executing MP BGP to exchange BGP UPDATE messages that include attributes carrying the application data.

Address family configuration data includes a data structure to associate address family identifiers with respective RIBs . As described in further detail below address family configuration data may additionally associate each of the address family identifiers with a callback function or other reference provided by the one of user applications that registers the address family identifier that RP module invokes upon receiving application data associated with the address family in a BGP UPDATE message.

The register method of BGP interface may include an optional callback parameter by which user applications may register a callback function a reference to a shared memory location or other IPC object or some other reference that manipulates the operation of RP module upon receiving BGP UPDATE messages that specify an address family identifier registered with the register method as used herein a callback . When one of user applications invokes the register method including the optional callback parameter BGP interface associates the address family identifier provided in the register method with the value of the callback parameter in address family configuration data . When RP module receives a BGP UPDATE message specifying an address family identifier RP module may extract the application data e.g. the NLRI prefixes and associated path attributes and look up the specified address family identifier in address family configuration data . If the address family identifier is associated with a callback parameter value RP module provides the extracted application data to one of user applications using the value of the callback parameter. In the illustrated example BGP interface invokes a callback function to send callback message including extracted application data to user application A.

The register method of BGP interface may include an additional optional callback parameter by which user application may register a callback functional for withdrawal advertisements received. As with the advertisement callback described above when one of user applications invokes the register method including the additional optional callback parameters for withdrawal advertisements BGP interface associates the address family identifier provided in the register method with the value of the withdrawal callback parameter in address family configuration data . When RP module receives a BGP UPDATE message specifying an address family identifier RP module may extract withdrawn routes e.g. withdrawn NLRI prefixes and look up the specified address family identifier in address family configuration data . If the address family identifier is associated with a withdraw callback parameter value RP module provides the extracted withdrawn routes to one of user applications using the value of the withdraw callback parameter.

BGP interface additionally includes a distribute interface hereinafter distribute method by which user applications may specify an address family identifier registered in address family configuration data and direct RP module to encapsulate the application data to send to other network devices in BGP UPDATE messages that specify the address family identifier. In the illustrated example user application A sends distribute method invocation message including application data and an address family identifier to invoke the distribute method of BGP interface . If the address family identifier is registered RP module sends the application data to BGP peer routers of router that have advertised a capability to handle the address family identifier in BGP UPDATE messages. BGP interface additionally includes a withdraw interface hereinafter withdraw method by which user applications may specify an address family identifier registered in address family configuration data and direct RP module to encapsulate withdrawn routes to send to other network devices in BGP UPDATE messages that specify the address family identifier. In this way multiple different user applications may invoke BGP interface of RP module to distribute and withdraw application data to from peer routers in the network using BGP. In some instances the distribute method and withdraw methods receive application data as a struct or class or reference thereto .

BGP interface may store application data for an address family received from user applications and from BGP peer routers in BGP UPDATE messages to the associated one of RIBs . BGP interface may store the application data in the associated one of RIBs . Advertised prefixes include a string of bytes and a prefix length that may be opaque to RP module . In addition some path attributes may be opaque to RP module and BGP. For instance some path attributes associated with advertised NLRI may not include routing information comprehensible to network layer protocols and instead be comprehensible and thus usable only by one or more user applications that inject extract the application data. Path attributes may be new path attributes introduced by user applications and may conform to a well defined type length value TLV object. Path attributes may be encoded according to BGP encoding rules for path attributes to allow for propagation of unrecognized path attributes.

RP module may perform a capability advertisement exchange to determine whether a peer BGP speaker for router supports an address family registered according to the above described techniques. Before distributing application data for a registered address family to a peer BGP speaker RP module may in some cases require receipt of a BGP Capability Advertisement issued by the peer BGP speaker and having a Capabilities Optional Parameter having a value set to the address family identifier. In some examples this Capability Value field separately specifies the AFI and SAFI for the registered address family. Upon receiving assurances in the form of a suitable BGP Capability Advertisement RP module may then replicate in whole or in part the associated one of RIBs for the address family to the peer BGP speaker using BGP. RP module may likewise issue a BGP Capability Advertisement specifying an address family identifier to indicate to peer BGP speakers that router supports the corresponding address family. The address family identifier may be dynamically announced without needing to terminate existing BGP sessions.

In general RP module executing MP BGP does not install routes to FIBs for unrecognized address families. However in accordance with the techniques described herein user applications may obtain application data e.g. NLRI prefixes and associated path attributes using BGP interface . One or more of user applications may include a data plane feature that modifies forwarding information for forwarding components of router . Thus in some instances one or more of user applications may directly install forwarding information to any of FIBs . In some instances however one or more of user applications may install a route to one of RIBs . RP module in turn processes RIBs according to normal route processing such as best route selection and may select and install a route from one of user applications to FIBs . However in such instances the one of user applications that installed the route retains ownership of the route and may withdraw it from the one of RIB to which the route was installed.

Management interface illustrated as mgmt. interface is a process executing on control plane B that provides an interface by which administrator a network operator or network management system for instance may modify a configuration of router . Management interface may present a Command Line Interface CLI and or a graphical user interface GUI by which an administrator or other management entity may modify the configuration of router using text based commands and or graphical interactions respectively. In addition or in the alternative management interface may present an agent that receives Simple Network Management Protocol SNMP or Netconf commands from a management entity to set and retrieve configuration and management information for router . Management interface in the illustrated example includes management API illustrated as API by which user applications may dynamically register display functions and inject functions to enable administrator to receive well formatted application data and inject application data into RP module for one or more address families respectively.

For example user application A may invoke management API to modify a show command to receive an address family identifier parameter to direct management interface to show application data e.g. NRLI and associated path attributes for the corresponding address family. In addition user application A may invoke management API to configure the formatting for application data displayed in response to the show command. The following CLI interactions illustrate a modified show command for management interface that formats path attributes for address families to provide readable application data to administrator .

The modified show command receives AFI SAFI 142 1 as an address family identifier and returns three path attributes temperature Temp CPU utilization CPU and router identifier Router ID associated within NLRI for the corresponding address family. The first entry denotes the prefix length for the address families and next hop for the NLRI as per a conventional show command. The prefix is in an application specific format. The remainder of the show command entry results illustrate the modifications made in accordance with the techniques herein described to format the values for the three attributes in human readable form. In the absence of formatting in some instances the modified show command may present a dump e.g. a hexadecimal or hex dump of the attribute values to administrator . In some instances the address family identifier may be mapped to a string. For example with reference to the above example AFI SAFI 142 1 may be mapped to cpu temperatures such that administrator may invoke the show command using the string rather than the address family identifier.

In some examples BGP interface presents the display functions that are then invokable by management interface . In such examples BGP interface cooperates with management interface to present well formatted application data to administrator . In some instances the display functions and inject functions of management API include callback registration parameters that enable applications to exchange application data with management interface . As a result the administrator may seamlessly configure and administer user applications in a manner similar to that of vendor supplied processes of router .

The following application programming interface provides example prototype functions of the above described interfaces of BGP interface 

In the above example API the advertise route function is an example of the distribute method of BGP interface the withdraw route function is an example of the withdraw method the register address family function is an example of the register method the unregister address family function is an example of the unregister method.

BGP is a critical protocol whose reliable operation is essential to the reliable operation of network systems. Because the techniques described herein may increase BGP traffic in the network system by effectively opening the routing plane to user applications control unit may in some instances apply policies directed to limiting shaping or otherwise managing the BGP related activities of user applications . Enforcement module optionally executed by control plane A intermediates communications received with interface between user applications and BGP interface to apply policies and thus provide a policy framework that controls whether and to what extent any given one of user applications may interact via BGP interface with the operation of BGP. Policies include a set of one or more policies that each defines a condition and corresponding action for enforcement by for instance enforcement module . As examples policies may specify user application B may not inject more than 100 NLRI into any of RIBs may specify none of user applications may introduce NLRI having size greater than 1 KB and or may specify user applications A B may not introduce NLRI such user application may not be verified by the vendor for instance . In this way policies control the mediate the interaction of user applications and RP module . Application of policies may therefore reduce a probability that third party user applications may negatively affect the operation of BGP and thus the operation of the network system in which router participates.

Enforcement module and policies are illustrated using dashed lines to indicate their presence is optional. In some instances RP module applies policies directly rather than by intermediating enforcement module . Administrator may in some instances use management interface to add modify and delete any of policies .

Router shares a number of features in common with example router of . For example router includes RP module having a BGP interface . Entities in this case administrator via management interface may extend the operation of MP BGP by registering one or more address families using BGP interface . That is management interface presents one or more commands by which administrator may direct RP module to support a particular address family that is not predefined in a vendor supplied implementation. Thus while RP module may be unable to process application data for a dynamically registered address family to for instance identify shortest paths through the network RP module may nevertheless transparently reflect forward the application data to other BGP peers in the network. In this way routers that do not execute a user application e.g. one of user applications of may nevertheless cooperate to use BGP to distribute generalized application data throughout the network.

Management API provides a registration interface hereinafter the register command for registering a new address family by specifying a corresponding address family identifier. In some examples the register command receives an AFI SAFI and application data formatting information in an optional application data formatting information parameter. Formatting information may include a formatting string e.g. Value A 3.1f t Value B d a code snippet a stylesheet a set of attribute type formatting string mappings or other formatting information for rendering application data in a form comprehensible to administrator . Management interface stores formatting information to interface configuration data illustrated as interface config. in association with the corresponding address family identifier.

In the illustrated example administrator issues register command to management interface to register a new address family identifier. Management interface in turn invokes the register method of BGP interface to add the address family identifier to address family configuration data and to create a corresponding one of RIBs for the address family identifier. RP module may then reflect and or forward BGP UPDATE messages specifying the address family identifier to transport application data included therein.

Administrator may issue show command specifying the address family identifier. Management interface responds by obtaining application data e.g. in NLRI stored to the corresponding one of RIBs for the address family identifier using BGP interface formatting the application data according to forwarding information associated with the address family identifier in interface configuration data and returning the formatted application to administrator in response message .

Using management interface administrator may configure address families for reflection exchange that are not hard coded in a static implementation of RP module by configuring for example numerical AFI SAFI values. Such address families once configured may be negotiated by router with other routers using for example the Multiprotocol Extensions Capability in a BGP OPEN message or by using dynamic capability negotiation. The address family may be dynamically announced without needing to terminate existing BGP sessions. In addition as described above RP module stores application data for a newly configured address family to a dynamically created one or RIBs .

In addition administrator may invoke management interface to specify a behavior of RP module with respect to next hop attributes received in BGP UPDATE messages having NLRI that specify a newly configured address family. For example administrator may invoke management interface to direct RP module to avoid attempting to resolve a next hop for unknown address family identifiers e.g. AFI SAFI combinations . That is RP module considers all such next hops to be reachable. As another example administrator may invoke management interface to direct RP module to resolve the next hop according to a known address family such as IPv4 or IPv6. In such instances RP module may be directed to use one of RIBs to interpret next hops for unknown address families.

Different combinations of features of router of and router of may be included in various example routers that apply techniques described in this disclosure. For example features of management interface and management interface may be combined in a single router.

User applications execute on a control unit of a router on which routing protocol module also executes. User application A invokes a register method exposed by BGP interface and supplies an AFI a SAFI and a callback parameter value. The combination of the AFI and SAFI define in this example a distinct address family for MP BGP. The callback parameter value identifies a mechanism by which RP module may provide application data to user application A.

BGP interface responsively executes the register method invoked by user application A to register the address family and callback by dynamically creating RIB A and inserting table entry A into address family configuration data . In the illustrated example address family configuration data is a table that includes table entries A N each having values for CALLBACK AFI SAFI and RIB fields. For each of table entries the CALLBACK field stores a callback value the AFI and SAFI fields define an address family and the RIB field includes a reference to one of RIBs .

User application N also executing on the router control unit invokes a distribute method exposed by BGP interface and supplies an AFI a SAFI and application data in the form of NLRI E and TLV object F. TLV object F includes type value A length value B and value C. RP module may verify the address family defined by the AFI SAFI values is registered in one of table entries of address family configuration data . RP module adds NLRI E and TLV object F to RIB A associated with table entry A. RP module generates Multiprotocol Reachable NLRI using NLRI E and TLV object F supplied to BGP interface . Multiprotocol Reachable NLRI includes AFI A SAFI B NEXT HOP C Subnetwork Points of Attachment SNPAs D NLRI E and TLV object F. Having generated Multiprotocol Reachable NLRI attribute RP module includes Multiprotocol Reachable NLRI attribute in a BGP UPDATE message for issuance by one of the router IFCs to a peer BGP router.

RP module executing BGP additionally receives by an IFC of the router a BGP UPDATE message that includes Multiprotocol Reachable NLRI . RP module uses the values of AFI A and SAFI B as lookup values to table entries of address family configuration data . In this example the values of AFI A and SAFI B key to table entry N defining a callback to user application N and including a reference to RIB N. RP module extracts TLV object F from Multiprotocol Reachable NLRI and supplies NLRI E and TLV object F or a representation thereof to user application N by invoking the callback defined in table entry N. In addition RP module adds NLRI E and TLV object F to RIB N.

In examples instances of the described techniques that utilize different routing protocols to carry the application data TLV objects E may be carried within a link state message that conforms to a format for a class of OSPF LSAs referred to as Opaque LSAs. Additional details regarding Opaque LSAs are found in The OSPF Opaque LSA Option RFC 5250 July 2008 which is incorporated by reference herein. Further details of the format of OSPF link state messages can be found in OSPF Version 2 RFC 2328 Internet Engineering Task Force IETF April 1998 incorporated herein by reference. In some examples a router may generate an extended IS IS Link State Protocol Data Unit that incorporates TLV object E to exchange application specific data in accordance with techniques described herein. IS IS is described in OS IS S Intra domain Routing Protocol RFC 1142 Network Working Group of IETF February 1990 the entire contents of which is incorporated herein by reference.

User application A may represent a third party or vendor supplied user process executing on control plane A components of router . During a registration phase user application A invokes a BGP interface of an RP module to dynamically register an address family identifier with a routing protocol such as BGP . BGP interface in response dynamically creates a new routing information base e.g. RIB A to store for instance application data received in routing protocol advertisements that specify the address family identifier .

The address family identifier being registered user application A may then inject application data into the routing protocol by invoking BGP interface . Enforcement module in this mode of operation applies policies to determine whether the injection is permissible . If policies prevent injection of the application into the routing protocol NO branch of enforcement module denies the injection request . Otherwise RP module encapsulates the application data into a routing protocol advertisement that specifies the address family identifier and issues the routing protocol advertisement to a routing protocol peer .

User application A may represent a third party or vendor supplied user process executing on control plane A components of router . During a registration phase user application A invokes a BGP interface of an RP module to dynamically register a address family identifier with a routing protocol such as BGP . BGP interface in response dynamically creates a new routing information base e.g. RIB A to store for instance application data received in routing protocol advertisements that specify the address family identifier .

The address family identifier being registered user application A may then withdraw routes from the routing protocol by invoking a withdraw interface of BGP interface by specifying the address family identifier and a route to withdraw . RP module encapsulates withdrawn routes to send to other network devices in BGP UPDATE messages that specify the address family identifier and withdraw the route for the address family identifier .

User application A may represent a third party or vendor supplied user process executing on control plane A components of router . During a registration phase user application A invokes a BGP interface of an RP module to dynamically register an address family identifier and a callback to a user application A routine with a routing protocol such as BGP . BGP interface in response dynamically creates a new routing information base e.g. RIB A to store for instance application data received in routing protocol advertisements that specify the address family identifier .

RP module receives a routing protocol advertisement the specifies the registered address family identifier and include application data . RP module queries address family configuration data using the address family identifier e.g. a combination of AFI SAFI values to identify the registered callback and RP module invokes the callback to pass the received application data to user application A .

The techniques described herein may be implemented in hardware software firmware or any combination thereof. Various features described as modules units or components may be implemented together in an integrated logic device or separately as discrete but interoperable logic devices or other hardware devices. In some cases various features of electronic circuitry may be implemented as one or more integrated circuit devices such as an integrated circuit chip or chipset.

If implemented in hardware this disclosure may be directed to an apparatus such a processor or an integrated circuit device such as an integrated circuit chip or chipset. Alternatively or additionally if implemented in software or firmware the techniques may be realized at least in part by a computer readable data storage medium comprising instructions that when executed cause a processor to perform one or more of the methods described above. For example the computer readable data storage medium may store such instructions for execution by a processor.

A computer readable medium may form part of a computer program product which may include packaging materials. A computer readable medium may comprise a computer data storage medium such as random access memory RAM read only memory ROM non volatile random access memory NVRAM electrically erasable programmable read only memory EEPROM Flash memory magnetic or optical data storage media and the like. In some examples an article of manufacture may comprise one or more computer readable storage media.

In some examples the computer readable storage media may comprise non transitory media. The term non transitory may indicate that the storage medium is not embodied in a carrier wave or a propagated signal. In certain examples a non transitory storage medium may store data that can over time change e.g. in RAM or cache .

The code or instructions may be software and or firmware executed by processing circuitry including one or more processors such as one or more digital signal processors DSPs general purpose microprocessors application specific integrated circuits ASICs field programmable gate arrays FPGAs or other equivalent integrated or discrete logic circuitry. Accordingly the term processor as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition in some aspects functionality described in this disclosure may be provided within software modules or hardware modules.

Various embodiments have been described. These and other embodiments are within the scope of the following examples.

