---

title: Method and apparatus for controlling access to a resource in a computer device
abstract: A computer device and method are described for controlling access to a resource. An execution environment executes a user process with access privileges according to a user security context. A security unit controls access to resources according to the user security context, with the user process making system calls to the security unit. A proxy hook module embedded within the user process intercepts the system call and generates a proxy resource access request. A proxy service module in a privileged security context validates the proxy resource access request from the proxy hook module and, if validated, obtains and returns a resource handle that permits access to the desired resource by the user process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09443081&OS=09443081&RS=09443081
owner: Avecto Limited
number: 09443081
owner_city: Manchester
owner_country: GB
publication_date: 20120928
---
This application claims priority from foreign application GB1116838.2 entitled METHOD AND APPARATUS FOR CONTROLLING ACCESS TO A RESOURCE IN A COMPUTER DEVICE which was filed in the United Kingdom on Sep. 30 2011 and which is hereby incorporated by reference in its entirety.

The present invention relates generally to the field of computers and computer devices. More particularly the present invention relates to a method and apparatus for controlling access to a resource in a computer device by providing an improved resource access mechanism.

A computer device executes a process using a plurality of physical and logical resources such as system services drivers files and registry settings. Many operating systems include a security module that enforces access rights for each process whereby the process is permitted or denied access to each of the resources consistent with a set of security privileges allocated to that process. For example a process of an ordinary user level is able to read from a particular file but is not permitted to write to that file. Meanwhile a process of a local administrator level typically has a higher privilege e.g. is able to both read from and write to that file.

In many operating systems the security model applies the access privileges based on the user s account. The operating system may define privilege levels appropriate to different classes or groups of users and then apply the privileges of the relevant class or group to the particular logged in user e.g. ordinary user super user local administrator system administrator and so on . The user is authenticated by logging in to the computer device and the user via their previously prepared security account acts as a security principal in the security model. The operating system then grants appropriate privileges to processes which execute in that user s security context.

It is desirable to implement a least privilege access model whereby each user is granted the minimal set of access privileges which is just sufficient for the user s desired processes to operate on the computer device. However in practice many application programs require a relatively high privilege level such as the local administrator level in order to install and operate correctly. Hence there is a widespread tendency to grant additional privilege rights such as the local administrator level and thus user processes gain greater access to the resources of the computer device than is desirable or appropriate from a security viewpoint. For example these additional privilege rights may then enable accidental tampering with key resources of the computer device leading to errors or corruption within the device. Further a particular user process e.g. an infection or malware may maliciously access key resources of the computer device with the deliberate intention of subverting security or causing damage.

Therefore there is a need to provide a mechanism which allows the least privilege principle to be implemented while still enabling the desired legitimate processes to execute on the computer device by accessing the relevant resources. In particular there is a need to enable higher level access rights such as local administrator rights but without compromising security of the computer device.

The example embodiments have been provided with a view to addressing at least some of the difficulties that are encountered in current computer devices whether those difficulties have been specifically mentioned above or will otherwise be appreciated from the discussion herein.

According to the present invention there is provided a computer device a method and a computer readable storage medium as set forth in the appended claims. Other optional features of the invention will be apparent from the dependent claims and the description which follows.

At least some of the following example embodiments provide an improved mechanism for controlling access to a resource in a computer device. There now follows a summary of various aspects and advantages according to embodiments of the invention. This summary is provided as an introduction to assist those skilled in the art to more rapidly assimilate the detailed discussion herein and does not and is not intended in any way to limit the scope of the claims that are appended hereto.

In one aspect there is provided a computer device which includes an execution environment for a user process and a security unit which selectively controls access to a plurality of resources. A proxy resource access unit includes a proxy hook module embedded within the user process and a proxy service module executing in another security context. The proxy hook intercepts system calls by the user process requesting access to a desired resource and in response generates a proxy resource access request. The proxy service module selectively validates the request and if valid obtains a resource handle from the security unit that permits access to the desired resource. The resource handle is returned to the user process via the proxy hook module thereby permitting subsequent access by the user process to the desired resource. In one embodiment the proxy service module is arranged to operate the desired resource on behalf of the user process.

In one aspect a computer device is provided which includes an execution environment arranged to execute a user process according to a user security context which defines access privileges of the user process a security unit arranged to selectively control access by the user process to a plurality of resources available in the execution environment according to the user security context wherein the user process is arranged to request access to a desired resource of the plurality of resources by making a system call to the security unit and a proxy resource access unit comprising a proxy hook module embedded within the user process wherein the proxy hook module is arranged to intercept the system call made by the user process to request access to the desired resource and to generate and send a proxy resource access request in response thereto and a proxy service module arranged to execute in a privileged security context different from the user security context of the user process wherein the proxy service module is arranged to receive and validate the proxy resource access request from the proxy hook module and if validated to obtain from the security unit a resource handle that permits access to the desired resource and to return the resource handle to the user process via the proxy hook module thereby permitting access by the user process to the desired resource.

In one example the proxy resource access unit is arranged to selectively control access by the user process to the resources as exceptions to the access control by the security unit.

In one example the proxy resource access unit is arranged to selectively enable access by the user process to the desired resource whereas access to the desired resource otherwise would not be permitted by the security unit and or the proxy resource access unit is arranged to selectively deny access by the user process to the desired resource whereas access to the desired resource otherwise would be permitted by the security unit.

In one example the proxy resource access unit is arranged to validate the proxy resource access request against a policy list comprising a plurality of predetermined policies which define access to the resources by the user process. In one example the user process is arranged to declare a desired access level in the system call. The access levels may depend on the nature or type of the desired resource. In one example the desired access levels include create read and or write access with respect to the desired resource. In one example the proxy hook module is arranged to record the desired access level in the proxy resource access request. In one example the proxy service module is arranged to allow or deny access to the desired resource by comparing the desired access level against one or more access levels recorded in the predetermined policies of the policy list. In one example the proxy resource access request comprises an identity of the user process and the proxy service module allows or respectively denies access to the desired resource by comparing the identity of the user process against one or more user process identities recorded in the predetermined policies. In one example the policy list records whether a requested form of access is to be permitted or denied.

In one example the proxy service module is arranged to obtain the resource handle which permits access to the desired resource. In one example the proxy service module is arranged to duplicate the resource handle into a context of the user process as a duplicate handle to be used by the user process to access the desired resource.

In one example the proxy service module is arranged to return an error code to the proxy hook module. In one example the proxy service module is arranged to return an error code to the proxy hook module where the proxy resource access request is not permitted. In one example the proxy hook module is arranged to pass the system call from the user process to the security unit to be processed according to the user security context.

In one example the proxy hook module is further arranged to intercept system calls made by the user process to operate the desired resource. In one example the proxy service module is arranged to operate the desired resource on behalf of the user process.

In one example the proxy hook module is arranged to maintain a record of a system resource handle that has been opened by the proxy service module on its behalf with respect to a desired resource. In one example the desired resource is provided as a system service. In one example the proxy hook module is arranged to selectively intercept system calls made by the user process to request an operation of the desired resource. In one example the proxy service module is arranged to perform the requested operation on behalf of the proxy hook module. In one example the proxy service module is arranged to return a result of performing the requested operation in a return message.

In one example the proxy hook module is provided as a dynamic linked library component which hooks into the user process when the user process is started. In one example the user process is arranged to make the system call though an application programming interface.

In one aspect there is provided a method of controlling access to a resource in a computer device. The method includes executing a user process in an execution environment of the computer device according to a user security context which defines access privileges of the user process controlling access by the user process to a plurality of resources available in the execution environment according to the user security context by a security unit of the computer device wherein the user process is arranged to request access to a desired resource of the plurality of resources by making a system call to the security unit intercepting the system call made by the user process to request access to the desired resource by a proxy hook module embedded within the user process generating a proxy resource access request by the proxy hook module in response to intercepting the system call and sending the proxy resource access request to a proxy service module executing in a privileged security context different from the user security context of the user process validating the proxy resource access request by the proxy service module and if validated obtaining from the security unit a resource handle that permits access to the desired resource and returning the resource handle from the proxy service module to user process via the proxy hook module thereby permitting access by the user process to the desired resource.

In one aspect a computer readable storage medium is provided having recorded thereon instructions which when implemented by a computer device cause the computer device to be arranged as set forth herein and or which cause the computer device to perform the method as set forth herein.

Of course those skilled in the art will appreciate that the present invention is not limited to the above contexts or examples and will recognize additional features and advantages upon reading the following detailed description and upon viewing the accompanying drawings.

The example embodiments of the present invention will be discussed in detail in relation to Microsoft Windows operating systems. However the teachings principles and techniques of the present invention are also applicable in other example embodiments. For example the example embodiments are also applicable to other operating systems in particular those having a discretionary access control security model.

The computer device includes a plurality of resources . These resources are the components of the computer device that the processes will rely upon in order to carry out their execution. For example the resources may include installed software system services drivers files and or registry settings.

As shown in the operating system includes a security module SECO which is provided to enforce security within the computer device . As one example the security module is provided by the Windows operating system as supplied by Microsoft Corp of Redmond Wash. USA under the trade marks Windows NT Windows 2000 Windows XP Windows Vista Windows Server 2003 Windows Server 2008 and Windows 7 amongst others. The security module also termed a security sub system or security manager suitably enacts the Windows security model as described for example in Windows Security Overview published 10 Jun. 2011 by Microsoft Corporation which is incorporated herein by reference in its entirety.

Each process that a user initiates will be run in a security context that derives access rights and permissions from the user s account. To this end each process is provided with an access token AT . The access token typically carries the security identity SID of the user and SIDs of any other security groups to which the user belongs. The access token thus defines the privileges as held on this host computer by the user and the relevant security groups.

In the example embodiment the security module is arranged to perform an access check when a user process requests access to any of the resource . The security module performs the access check by comparing the access token of the process against a security descriptor such as an access control list ACL associated with the relevant resource . Here the access control list is suitably a Discretionary Access Control List DACL which identifies SIDs of users and groups that are allowed or denied various types of access read write etc. as appropriate for that resource.

In the security module SECO in the operating system is sufficient to prevent the user process from tampering with certain key resources while allowing the user process to access appropriate user resources according to the respective access control list . For example the user process is able to read from but not write to a file of the key resources . Typically the defined access types will depend upon the type of resource being accessed. For example storage is typically defined by read and write access rights while a process may have terminate access rights which determine whether or not a request to terminate that process will be actioned by the operating system . As noted above a user level security context is based on the user as the security principal and the access token is set accordingly. Suitably in a system which adopts the least privilege access model the user level security context is deliberately restricted to a minimal set of access rights.

In practice it is common for a user to be included in a security group such as the local administrator security group so that application programs desired by the user will install and operate correctly without needing additional support from a higher authorized user such as IT administrator personnel . Where a user is included in such a privileged security group all of the user process initiated by that user will then be granted the higher level privilege rights such as local administrator rights indiscriminately. Thus granting local administrator rights or similar higher privileges generally allows all user processes to access many of the key resources of the computer system in an indiscriminate manner.

As shown in the user process is granted a privileged user security context by the privilege management module . This can be considered as a dynamic elevation of the privilege level of the user process so that the specific user process is able to achieve a desired legitimate function which requires greater access rights than were available initially. The process is to be elevated is provided with a new access token which is created based on the initial access token of that process. As one example the SID of the local administrator group is added to this new access token and consequently the process now obtains the privileges and integrity level of the local administrator. The user process is then assigned the new access token such as by stopping and restarting the process and thus the privileged user security context is now applied to that user process .

As noted above there is a potentially undesirable side effect of this privilege management mechanism because the user process is now provided in a privileged user security context having an access token denoting access rights capable of accessing the key resources . In this situation the security module of the operating system is now incapable of denying access by the user process to all of the plurality of key resources . In other words even assigning security privileges per individual user process still does not discriminate between individual key resources . As one example it is desired that a local administrator should be able to access all of the key resources legitimately whereas a user process even when dynamically elevated to the local administrator level should not have those same access privileges with respect to all of the key resources .

In particular shows internal components within the operating system OS in more detail. In the example embodiment the operating system is based on Windows NT and includes two main components namely the user mode and the kernel mode . The user mode includes integral subsystems INT SUB such as workstation service server service and the security module as discussed above. The user mode also includes environment subsystems ENV SUB such as a Win32 environment subsystem a POSIX environment subsystem and an OS 2 environment subsystem to support user programs including the user processes as discussed above. These programs and subsystems in the user mode have limited access to system resources. Meanwhile the kernel mode has unrestricted access to the computer device including system memory and external devices etc. The kernel mode includes a hardware abstraction layer HAL which interfaces with the physical hardware H W and a plurality of services which together are termed the Executive . The Executive may include an Object Manager OBJ MAN and other services EXE SERV .

The object manager is an executive subsystem which controls access to objects. The object manager considers each of the resources as an object including both physical resources such as storage device or peripheral devices and a logical resource such as files or containers. All other executive subsystems including particularly system calls pass through the object manager in order to gain access to the resources . In operation the object manager creates and inserts new objects which makes the object accessible through a handle. Generally speaking the handle is a unique numerical identifier which identifies that object resource to the object manager . Each object created by the object manager is stored in an object table and each entry in the object table may include the object name security attributes a pointer to its object type and other parameters. Typically the operating system is configured so that every request to access a resource passes through the object manager . If the resource is requested by name then the request is subject to security checks by the security module as discussed above. However a request to access a resource through an existing open object handle will generally be allowed without further security checks provided that the requested access does not exceed the level of access requested when the object was opened or created.

As shown in the computer provides a security unit which in the example embodiments includes the security module and the object manager . The security module is arranged to control access to the resources when access to the resource is requested by a user process according to the security context of that process. Meanwhile the object manager may directly permit access to the resources upon the condition that access to the desired resource is subsequently requested using a valid resource handle as issued previously by the object manager .

As shown in the example computer device provides the execution environment to execute the user process according to the user security context . As noted above the user security context ordinarily defines the access privileges of the user process with respect to the plurality of resources that are available in the execution environment . A security unit is arranged to selectively permit or deny access by the user process to the plurality of resources . In this example the security unit includes the security module and the object manager as discussed above.

In operation the user process makes a system call toward the security unit to request access to a desired resource amongst the plurality of available resources within the execution environment . In the system call is represented by the arrow at step .

In the example embodiment a proxy hook is embedded within the user process . In one example the proxy hook is a DLL dynamic linked library component that will hook into each user process. The proxy hook suitably hooks into the user process as that process is started within the execution environment . In the example embodiment the proxy hook is arranged to intercept all relevant system calls that open resources. In the Windows operating system the Windows API application programming interface provides a plurality of system calls as shown in Table 1. These are examples of the system calls that may be made by the user process in order to request access to the relevant resources .

The proxy hook is arranged to generate a proxy resource access request as shown by the arrow at step . This request message suitably includes the name of the desired resource . The request message at step may further identify the user process that is trying to open the desired resource. The request message at step may further identify the desired access i.e. the type of access which is desired such as read or write . The request message at step may further identify any other relevant parameters that would ordinarily be passed to the API call. These other parameters may depend particularly upon the type of the resource.

A proxy service is arranged to receive the proxy resource access request message at step from the proxy hook . The proxy hook and the proxy service communicate by any suitable form of inter process communication IPC . The proxy service executes in a privileged security context . As an example the proxy service may run in the privileged security context of the SYSTEM account. Typically this privileged security context gives unrestricted access to local resources. Further the privileges of the SYSTEM account also enable the proxy service to impersonate the security context of a logged on user or a local administrator if this is necessary to access specific resources.

The proxy service is arranged to validate the proxy resource access request message at step from the proxy hook as represented by the arrow at step . The validation may take any suitable form. In the example embodiments the proxy service validates the request against a plurality of policies . The validation may include checking a file name of the user process the owner of the process i.e. the user or other suitable criteria. The policy provides a configurable mechanism to determine whether or not the requested access will be permitted or denied. The policies suitably identify the resources which are to be permitted or respectively denied access by the user process . The resources can be identified within the policies by providing a name of the resource. In an example embodiment non exact matching is also permitted within the policies such as by wild card matching against resource names. In the example embodiment the proxy service suitably identifies whether or not a predetermined policy exists with reference to this request i.e. identifying the relevant user process and the desired resource .

Where the proxy service validates the request at step the proxy service will then obtain a resource handle from the security unit that permits access to the desired resource . In the example embodiment the proxy service executing in the privileged security context is permitted by the security unit to obtain access to the desired resource . As a result the security unit returns the resource handle which permits access to the desired resource . In one example embodiment the proxy service comprises a proxy open resource function which requests access to the desired resource through the security unit as represented by arrow at step . Suitably the proxy service resource access request at step from the proxy service to the security unit defines a most restricted access right following least access principles when considering the access as requested in the request message at step passed from the proxy hook and the access as permitted by the policies with respect to the desired resource .

Assuming that the API call by the proxy service at step is successful then a handle to that object a resource handle is returned by the security unit at step . The resource handle is returned by the proxy service to the proxy hook at step . The proxy hook returns the resource handle to the user process at step . Subsequently the user process is able to access the desired resource using the resource handle that has been obtained through this proxy resource access mechanism.

In one example embodiment the proxy service duplicates the resource handle into the context of the user process . Suitably the proxy service duplicates the resource handle obtained from the security unit into the address space of the user process .

Where the proxy service at step does not validate the original request message as sent at step from the proxy hook then the proxy service suitably returns an error message to the proxy hook at step . For example if there is no match within the policies for the user process and or for the desired resource then an appropriate error code is suitably returned to the proxy hook . As another example if there is match within the policies for the user process and or for the desired resource but the match indicates that the requested access should be denied then an appropriate error code is suitably returned to the proxy hook .

In one example the proxy service is arranged to send the reply at step immediately when the request message at step cannot be validated with respect to the policies at step . In this situation the proxy service does not attempt to make a request to the security unit at step .

Where the proxy service at step does not obtain a handle to the desired resource then the proxy service suitably returns an error message to the proxy hook at step . For example if the security unit denies access to the desired resource such as by returning a NULL handle at step then an appropriate error code is suitably returned to the proxy hook at step .

In the example embodiments the proxy hook at step is arranged to selectively pass through the system call made by the user process . For example if the proxy service returned an error code indicating that no policy was set that the request is denied or that the proxy service was unable to obtain a handle then it may be prudent to allow the user process to continue with the original request for that desired resource . In the example embodiments this pass through is a failsafe procedure which allows the user process to request access to the desired resource from its own security context . The system call is then made to the security unit and a reply is received at step which may be an error code denying access to the resource or a handle provided directly from the security unit . Here the reply is returned via the proxy hook at step and provided to the user process at step .

In another example embodiment the proxy hook is arranged as a primary path to pass through the system call made by the user process to the OS as at step and if that system call fails the proxy hook will then initiate the proxy resource access request as at steps et seq as a secondary path.

As noted in Table 1 in the example embodiments the WIN32 API functions will call their native API counterparts. Here the native API provides the interface between the user mode and the kernel mode within the operating system as noted above. Therefore in the example embodiments the proxy hook may be implemented by intercepting the Win32 API or the native API functions. For example a file can be created or opened through the Win32 API via the CreateFile function or through the native API via the ZwCreateFile and ZwOpenFile functions.

In one example embodiment the proxy resource access unit is provided in conjunction with the privilege management module as discussed above. Thus the privilege management module is able to selectively apply an alternate set of access rights specifically to the particular user process of interest. Meanwhile as discussed below the proxy resource access unit controls access by that user process to specific resources . Hence the example computer device provides powerful yet flexible mechanisms to control access to resources by the user process.

In the example implementation of some of the resources may be associated with a resource handle which is not capable of being duplicated from one process context into another process context i.e. which cannot be duplicated into the address space of a user process by the proxy service . For example opening Systems Services returns a SC HANDLE which cannot be duplicated. In this situation the proxy hook is suitably arranged to intercept all of the system calls relevant to manipulating the relevant resource .

Initially the proxy services will open the System Service on behalf of the proxy hook and thus on behalf of the user process and will return a system resource handle SC HANDLE that the proxy service has opened with the security unit . Suitably the steps and optionally steps are performed as noted above. However in this example embodiment the proxy hook maintains a table of system resource handles a table of SC HANDLEs that have been opened by the proxy service on its behalf. Whenever a System Service operation is performed on one of these system resource handles the proxy hook then proxies the relevant system call API call to the proxy service . The proxy service then performs the requested operation on behalf of the proxy hook and returns the results in a corresponding return message. In this example the proxy service not only requests access to the relevant resource on behalf of the user process but further accesses and manipulates the resource on behalf of the user process . In the example embodiment the System Services would require the system calls as shown in Table 2 below to be intercepted and proxied.

It will be appreciated that the proxy resource access mechanism as described herein has many advantages. The proxy resource access method and apparatus provides exceptions to the resource access control which would otherwise be enforced by the security unit . Hence the proxy resource access mechanism may define exceptional elevation or exceptional degradation of the access rights of the user process with respect to the desired resource . In the example embodiments these exceptions provide a finely granulated level of control.

At least some embodiments of the invention may be constructed partially or wholly using dedicated special purpose hardware. Terms such as component module or unit used herein may include but are not limited to a hardware device such as a Field Programmable Gate Array FPGA or Application Specific Integrated Circuit ASIC which performs certain tasks. Alternatively elements of the invention may be configured to reside on an addressable storage medium and be configured to execute on one or more processors. Thus functional elements of the invention may in some embodiments include by way of example components such as software components object oriented software components class components and task components processes functions attributes procedures subroutines segments of program code drivers firmware microcode circuitry data databases data structures tables arrays and variables. Further although the example embodiments have been described with reference to the components modules and units discussed herein such functional elements may be combined into fewer elements or separated into additional elements.

In summary the example embodiments have described an improved mechanism to control access to a resource within a computer device. The industrial application of the example embodiments will be clear from the discussion herein.

Although a few preferred embodiments have been shown and described it will be appreciated by those skilled in the art that various changes and modifications might be made without departing from the scope of the invention as defined in the appended claims. Therefore the present embodiments are to be considered in all respects as illustrative and not restrictive and all changes coming within the meaning and equivalency range of the appended claims are intended to be embraced therein.

