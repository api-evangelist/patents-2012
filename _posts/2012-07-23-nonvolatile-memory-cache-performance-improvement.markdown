---

title: Non-volatile memory cache performance improvement
abstract: In order to provide a more efficient persistent storage device, one or more long-term storage media are included along with a non-volatile memory. In one embodiment, one portion of the non-volatile memory is used as a write buffer and a read cache for writes and reads to the long-term storage media. Interfaces are provided for controlling the use of the non-volatile memory as a write buffer and a read cache. Additionally, a portion of the non-volatile memory is used to provide a direct mapping for specified sectors of the long-term storage media. Descriptive data regarding the persistent storage device is stored in another portion of the non-volatile memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09405693&OS=09405693&RS=09405693
owner: Microsoft Technology Licensing, LLC
number: 09405693
owner_city: Redmond
owner_country: US
publication_date: 20120723
---
This application is a divisional application of co pending U.S. patent application Ser. No. 13 231 088 filed Sep. 13 2011 which is incorporated herein by reference in its entirety. U.S. patent application Ser. No. 13 231 088 is a continuation application of U.S. patent application Ser. No. 12 627 710 filed Nov. 30 2009 which is now U.S. Pat. No. 8 041 904 issued Oct. 18 2011 which is incorporated herein by reference in its entirety. U.S. Pat. No. 8 041 904 is a divisional of U.S. patent application Ser. No. 10 837 986 filed May 3 2004 which is now U.S. Pat. No. 7 644 239 issued Jan. 5 2010 which is incorporated herein by reference in its entirety.

This application is related to the following U.S. patents U.S. Pat. No. 7 082 495 issued Jul. 25 2006 entitled Method And Apparatus To Reduce Power Consumption And Improve Read Write Performance Of Hard Disk Drives Using Non Volatile Memory U.S. Pat. No. 7 017 037 issued Mar. 21 2006 entitled Apparatus And Method To Decrease Boot Time And Hibernate Awaken Time Of A Computer System and U.S. Pat. No. 7 036 040 issued Apr. 25 2006 entitled Improved Reliability Of Diskless Network Bootable Computers Using Non Volatile Memory Cache. 

This invention relates generally to computer systems and more particularly to improving the performance of computer systems by using non volatile memory in conjunction with a long term storage unit.

Certain storage devices are used on computer systems in order to provide persistent memory for the functioning of the computer system. For example a magnetic hard disk drive assembly is well known in the art. However such persistent memory has some drawbacks. It is time consuming to prepare the magnetic hard drive for reading or writing data. In order to do so in most cases it is necessary to physically initiate spinning of the disk and to position a read write head over the proper location.

The preparation for reading or writing from the storage devices is time and power consuming Additionally noise may be generated by such a magnetic hard drive memory and its components. Thus there is a need for an improved memory for computer systems which will remedy some of these drawbacks.

New compositions and configurations of persistent storage devices may provide some improvements in performance related to the storage. However simply using traditional techniques for accessing persistent storage will not provide the full benefit of such new compositions or configurations. Generally an operating system is used to control the operations of the computer system. The operating system also mediates between other applications in the computer system and the hard disk. Thus there is a need for methods such as application programming interfaces APIs to provide enhanced performance. Similarly there is a need for systems which create new configurations and new control techniques for storage for use by a computer systems.

A persistent storage device in which one or more long term storage media are included along with a non volatile memory is used with an operating system providing or responsive to application program interfaces commands and interrupts which allow the operating system or an application program to effectively use the non volatile memory in order to increase performance time and efficiency. While it is contemplated that the non volatile memory be included physically with the long term storage medium it is also possible for the non volatile memory to be separate from the long term storage medium but to function along with it to provide persistent storage.

In one embodiment application program interfaces APIs are exposed which allow for a request that the long term storage medium be spun up or spun down. Other APIs allow for requests that the non volatile memory be flushed or populated with data from specified addresses of the long term storage medium. Still others allow data to be written directly to the long term storage medium allow data to be written as an atomic write or allow data written to the non volatile memory cache to be ignored rather than saved for writing to the long term storage medium. Additionally a request to find and give details about existing non volatile memory available for such storage is provided for.

In one embodiment the non volatile memory can be used in one of two ways. In a first way a cache is provided in non volatile memory. This cache is used as a read cache for data read from the long term storage medium and also as a write buffer for data being written to the long term storage medium. In this way reads and writes to the long term storage medium instead of occurring sporadically may be clustered together requiring fewer reads from writes to and preparations of the long term storage medium.

A portion of the non volatile memory can be owned by the operating system or another application directly. Certain logical sector addresses LSAs from the long term storage medium are mapped to the non volatile memory and reads from or writes to these LSAs will be performed in the non volatile memory. This mapping can occur alongside the caching in a non volatile memory portion described above.

In the description that follows the term NV memory will be used to refer to solid state non volatile memory. NV memory means any type of memory that retains its data when power is removed and that can be erased and reprogrammed with new data. The NV memory may include battery backed up memory. The NV memory may be located in a computer as a separate component of the computer such as a personal computer slot card or as a component in system memory. Alternatively it could be a component of a persistent storage device such as a hard drive in a docking station of a notebook device and the like. On mobile systems the track buffer memory the disk drives have can be used i.e. the invention can also be implemented using the track buffer memory .

Future disks for mobile systems may draw from battery power to keep its memory alive without actually drawing power to keep the disk spinning. The NV memory may store file data file metadata as well as known disk sectors such as the boot sector and partition tables. During power down or entry into a hibernate mode the computer system determines the static and dynamic configuration data to be stored in NV memory based on a history of prior uses. Data is also stored in the NV memory during system operation to reduce the number of times the disk drive is spun up. For mobile PCs and the like reducing the number of times the disk drive is spun up improves user experience because power is reduced thereby allowing smaller and lighter mobile PCs and the like that last longer on a given battery capacity. It also reduces the need to run noisy high speed fans that are loud and annoying to the user.

Turning to the drawings wherein like reference numerals refer to like elements the invention is illustrated as being implemented in a suitable computing environment. Although not required the invention will be described in the general context of computer executable instructions such as program modules being executed by a personal computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the invention may be practiced with other computer system configurations including hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

The invention is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the invention include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

The invention may be described in the general context of computer executable instructions such as program modules being executed by a computer. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. The invention may also be practiced in distributed computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules may be located in both local and remote computer storage media including memory storage devices.

With reference to an exemplary system for implementing the invention includes a general purpose computing device in the form of a computer . Components of computer may include but are not limited to a processing unit a system memory and a system bus that couples various system components including the system memory to the processing unit . The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Associate VESA local bus and Peripheral Component Interconnect PCI bus also known as Mezzanine bus.

Computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by computer and includes both volatile and nonvolatile media removable and non removable media. By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes both volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by computer . Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

The system memory includes computer storage media in the form of volatile and or nonvolatile memory such as read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within computer such as during start up is typically stored in ROM . RAM typically contains data and or program modules that are immediately accessible to and or presently being operated on by processing unit . By way of example and not limitation illustrates operating system application programs other program modules and program data .

The computer may also include other removable non removable volatile nonvolatile computer storage media. By way of example only illustrates a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM or other optical media. Other removable non removable volatile nonvolatile computer storage media that can be used in the exemplary operating environment include but are not limited to magnetic tape cassettes flash memory cards digital versatile disks digital video tape solid state RAM solid state ROM and the like. The hard disk drive is typically connected to the system bus through a non removable memory interface such as interface and magnetic disk drive and optical disk drive are typically connected to the system bus by a removable memory interface such as interface .

The drives and their associated computer storage media discussed above and illustrated in provide storage of computer readable instructions data structures program modules and other data for the computer . In for example hard disk drive is illustrated as storing operating system application programs other program modules and program data . Note that these components can either be the same as or different from operating system application programs other program modules and program data . Operating system application programs other program modules and program data are given different numbers hereto illustrate that at a minimum they are different copies. A user may enter commands and information into the computer through input devices such as a keyboard and pointing device commonly referred to as a mouse trackball or touch pad. Other input devices not shown may include a microphone joystick game pad satellite dish scanner or the like. These and other input devices are often connected to the processing unit through a user input interface that is coupled to the system bus but may be connected by other interface and bus structures such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video interface . In addition to the monitor computers may also include other peripheral output devices such as speakers and printer which may be connected through an output peripheral interface .

The computer may operate in a networked environment using logical connections to one or more remote computers such as a remote computer . The remote computer may be another personal computer a server a router a network PC a peer device or other common network node and typically includes many or all of the elements described above relative to the personal computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet.

When used in a LAN networking environment the personal computer is connected to the LAN through a network interface or adapter . When used in a WAN networking environment the computer typically includes a modem or other means for establishing communications over the WAN such as the Internet. The modem which may be internal or external may be connected to the system bus via the user input interface or other appropriate mechanism. In a networked environment program modules depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. By way of example and not limitation illustrates remote application programs as residing on memory device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers may be used.

In the description that follows the invention will be described with reference to acts and symbolic representations of operations that are performed by one or more computers unless indicated otherwise. As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of the computer of electrical signals representing data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the computer in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the invention is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.

Turning now to the NV memory may be located in the computer as a separate component of the computer such as a card to be put in a pc slot or as a component in system memory. Alternatively it could be a component of a persistent storage device such as a hard drive in a docking station of a notebook device and the like. Another alternative location for NV memory is in the form of a removable solid state non volatile memory device which can be plugged in to the computer system such as one according to the CompactFlash specification as maintained by the CompactFlash Association or similar. The NV memory as a separate component provides the capability to improve performance on legacy systems that do not have NV memory without having to install a hard drive having NV memory.

Turning now to the persistent storage device has a disk assembly that includes a non volatile memory storage medium a long term storage medium such as one or more disks a read write head for reading and writing to the disk and a spindle armature assembly for moving the read write head to locations on the disk . While a disk assembly is shown in and used in the following description the advantages of the inventive techniques may be found when another long term storage medium is used and there is no limitation of the invention to instances where a disk assembly is used as a long term storage medium. The controller commands the disk assembly to read data from the storage medium or write data to the storage medium. A cache memory is used to buffer data being read from or written to the storage medium. The NV memory of the present invention is located within the controller or as a separate component of the persistent storage device . In one embodiment the NV memory is exposed to the computer to appear as at least one large region of the disk comprised of one or more contiguous sectors. No change to the IDE Integrated Drive Electronics or SCSI Small Computer System Interface specifications is required. The NV memory is exposed to the operating system so that the operating system and other components can query the size of the NV memory control the state of the NV memory write data to the NV memory using a transactional procedure and as stated above use the NV memory as a write buffer. In an alternate embodiment the computer can detect the presence of NV memory by observing access times of 500 microseconds or less for large regions of the disk instead of the typical times of approximately 10 milliseconds.

With reference again to in order to take advantage of an NV memory to improve performance according to one embodiment of the invention the operating system OS is provided with various interfaces in order to provide for improved use of the NV memory .

First a detection interface is provided. OS can detect whether there is an NV memory and the size of the NV memory. This functionality is exposed as an interface which the application programs and other program modules can use in order to determine if NV memory exists in the computer . Additionally OS components such as file systems or other object stores can use the detection interface to determine the existence and size of NV memory on the computer . Other information regarding the NV memory may also be provided such as usage information or type information. This information may be useful because certain NV memories have limited lifespans and this may affect the usage of the NV memory in certain situations.

In order to read from or write to a disk in disk assembly the disk must be spun up and the read write head must be moved to the appropriate location by spindle armature assembly. This preparatory action takes time and causes a delay before data can be read from or written to disk assembly . The preparatory action in writing to the disk will be referred to as spinning up the disk even though it encompasses moving the read write head as well. Indeed while the disk is pictured as a rotating media it is contemplated that in a persistent storage device a NV memory may be included along with another form of the long term storage medium other than disk assembly which requires preparatory action before data can be written to or from the memory. Any preparatory action for the use of the long term storage medium on the persistent storage device will be known as spin up or spinning up the memory even though it is contemplated that there may be additional preparatory actions or even that an actual spinning of a rotating medium may not be involved. Because an application or the operating system itself may recognize in advance of a write to the persistent storage device that a significant probability exists that such a write requiring a spin up of the long term storage medium on that device will occur delays causes by the need to wait for the spin up of long term storage medium can be obviated through the use of an interface which allows an application or the operating system to request a spin up of the long term storage medium.

Similarly a spin down interface is also provided. In order to save power consumption if no writes are being made to the disk assembly of persistent storage device then the spinning of the disk may be halted. Again while the persistent storage device is shown as including a rotating medium where an actual spin down will reduce power consumption other forms of long term storage media on the persistent storage device aside from NV memory are contemplated and such long term storage media may have actions analogous to the spin down of the disk assembly in which some benefit is gained by ceasing the action which allows immediate or relatively swift reads and writes to that memory. Such cessation of an action may not actually include a physical spinning down of a rotating medium however such cessations are contemplated by the spin down or spinning down referred to herein.

The spin down and spin up actions may be performed at less than their maximum speeds. Performing such operations at slower speeds can lessen the acoustic noise associated with these actions and lessen any associated spikes in power consumption. Because the spin up and spin down or other preparatory actions for the long term storage medium can be performed in advance of an absolute need for such actions these advantages may be obtained without a performance impact. When a disk is spun up slowly rather than quickly the disk will be available when it is fully spun up but the effects on the user and the rest of the system are minimized.

Some or all of the NV memory may be used as a write cache for the disk assembly of a persistent storage device . In such a case an interface is provided for the situation in which an application or the operating system may determine that for performance reasons the NV memory should be flushed to the other memory in the persistent storage device . This interface flushes the NV memory to the long term storage medium.

Different portions of NV memory may be marked with different priorities. For example an area of NV memory may be pinned or marked with a high priority should be maintained in NV memory rather than being flushed to long term storage medium preferably to other areas of NV memory which are not pinned or marked in this way. One embodiment of the invention allows one of a number of priorities to be assigned to areas in NV memory . For example there may be three priorities a highest priority or pinned memory or priority 1 memory a second priority priority 2 and a lowest priority or priority 3 . Where space is needed in the NV memory the lowest priority memory is flushed to long term storage medium before higher priority memory areas will be flushed. Thus according to one embodiment of the invention several interfaces options for flushing the NV memory cache may be presented e.g. one which flushes the entire cache one which flushes only lower priority areas of the cache or one which flushes all areas of the cache with a priority equal to or less than a priority specified in call to the interface.

As another performance improvement because data written to the NV memory may later be deleted an interface is presented which allows the OS or an application to signal to the NV memory that certain data written to the NV memory is no longer required and can be discarded from the NV memory write cache. In this way when the memory is flushed the discarded areas will not be written to the long term storage medium and when a read is performed on the discarded area an error or random data may be returned.

This interface can be used for example in order to manage transactions. Often transaction logs contain intermediate data which is not required to be stored long term. For example in one case when a transaction occurs meta data about the transaction is first committed to the log. If this log is stored in NV memory the write will not require a spinning up of the disk. When the transaction is completed and the changes committed the stored meta data about the transaction is changed or deleted to reflect the completed transaction. If however the transaction is interrupted before it can be completed and committed the data in the NV memory will persist and thus can be used to determine what transaction was occurring and solve problems regarding such interrupted transactions.

In another example this interface can be used to avoid flushing to disk any data or metadata related to temporary files. Initially these files and their metadata get created in the NV memory . When the files are deleted the OS or an application may signal NV memory that the file data and metadata written to the NV memory is no longer required and can be discarded from the NV memory write cache.

A NVM circumvention interface is also provided. In certain situations use of the NV memory may not be efficient for read or write operations. With reference again to for example if an application is writing to persistent storage device data that is large relative to the size of the NV memory writing some of that data to the NV memory will not be generally useful as the NV memory will fill and the data will then need to be flushed from the NV memory to the long term storage medium. Thus the NVM circumvention interface allows the operating system or an application using the interface to specify that data to be read from or written to the persistent storage device should be directly read from or written to the physical memory addresses on the long term storage medium rather than to the NV memory .

In one embodiment an interrupt is sent from the persistent storage device to the host computer when the disk controller in the persistent storage device is preparing to or actually spinning up the disk assembly . This interrupt may be transmitted to the operating system or its components or to an application. Upon receipt of such an interrupt a recipient which is properly programmed to act opportunistically can ensure that data is moved from the NV memory to the long term storage medium or from the long term storage medium to the NV memory as the long term storage medium is soon to be spun up and ready for such movements. This reduces the number of long term storage medium spin ups and therefore reduces disk drive power consumption. Additionally on receipt of the interrupt indicating that the memory is spinning or spun up the OS can use the NVM circumvention interface to flush any non persistent write buffers or caches directly to the long term storage medium.

Additionally OS components and applications may use an atomic write interface which allows a write to the persistent storage device to be treated as atomic. All data to be written atomically is stored in the NV memory . When this is completed the persistent storage device ensures that all data to be written atomically is written to long term storage medium. If a failure occurs before all of the data to be written atomically is stored in the NV memory an error is returned and the data which has been received is discarded. If after the storage on the NV memory is completed the atomic write fails due to a system or power failure the failure is detected when the system restarts and the atomic set of data stored in the NV memory is rewritten to the long term storage medium. This allows improved performance in applications and settings where atomic writes of large data are preferable e.g. in database applications since it does not require these applications to deal with the problem known in the art as torn writes .

In one embodiment the operating system its components or applications use the NV memory to store specific files or objects that are used regularly. Thus more expensive writes reads from long term storage medium are avoided. For example database transaction logs file system metadata and other metadata are stored in NV memory . Where a priority scheme is being used for assigning different priority to areas in NV memory storing data in one embodiment such frequently accessed files are accorded a high priority which further helps to avoid expensive writes reads to from the long term storage medium.

In one embodiment the NV memory includes a partition which allows a portion of the NV memory to be used exclusively by the operating system. One implementation of this is to allow the operating system to partition the NV memory and to have an OS partition of the NV memory which is controlled directly by the disk controller firmware with input from the operating system.

Thus through the disk controller the OS requests the population of the NV memory cache with specific sectors that it are likely to be needed next. For example these sectors are the sectors which are needed or are thought likely to be needed at the time of the next boot or when the system resumes from hibernation. As a further example these sectors are sectors that the OS predicts it will need in the near future.

Thus in such an embodiment each time the long term storage medium is spun up the OS can repopulate the OS partition of the read cache in the NV memory by sending a list of logical sector addresses LSAs to the disk drive controller. This list can include priority information to be used according to a priority scheme as described above to indicate how readily the disk drive controller will overwrite the read cache data with write buffering data.

Within the OS a mechanism is provided to map a specific set of LSAs to the NV memory . This allows a section of the NV memory to be directly under the OS s control. Reads and writes to these LSAs will then always access the NV memory . The data in these LSAs will not be flushed to the storage unit unless the NV memory is reconfigured by the operating system. In one embodiment in this section of NV memory the OS stores black box recorder information i.e. a recent history of operations that is used to diagnose system failures. The OS stores the boot recovery console and files required for safe boot so that the system can still boot and diagnose mechanical disk failures. It may also store a possibly compressed package of files required for the next boot to be used in place of or in addition to the regular representation of system files.

Databases and database products among other applications and products may use copy on write functionality in order to reduce the consumption of resources such as time and memory. Copy on write allows previous versions of data to be made available. This is useful because in addition to a current version of the information stored in for example a database previous versions of the information may be useful to a user.

Without copy on write one way to provide information on previous versions of data is to make a complete copy of the database at a point in time which may be of interest to a user. When this occurs all files associated with the database are stored. However this technique is space intensive because for a database which is stored in a certain amount of storage space each copy will also require that amount of storage space. This approach may also be time consuming as the copy itself involves movement of lots of data.

Thus instead changes from the original version may be stored. Where NV memory is available it can be used for performing copy on write activities. In a first implementation of copy on write the original data which is to be changed is stored in the system memory . Before it is updated then a copy must be written to stable storage in order to have the unchanged version of the data available. Where NV memory is available such storage may be to the NV memory . This allows the storage of the unchanged copy to be performed quickly. As described above this copy may be moved to the disk storage at a later point. Database systems using block oriented caching can use this to reduce time due to memory writes.

In a second copy on write implementation the original version may be stored in a long term storage medium. In such a case if the data is located in the NV memory an additional copy may be made in NV memory before the write occurs. If the data is not stored in the NV memory then the original stored copy may be treated as the archive copy the copy which stores the unchanged version. The NV memory stores the changed version. When this version is flushed from NV memory or otherwise moved to the disk the version will be written to a new location in memory since the original stored copy on disk is now the archive copy of the data before changes.

Large data stores e.g. file systems and databases through constant storage and deletion of data may exhibit a condition known as fragmentation. This occurs when large ranges of free memory on a storage device become more and more sparse and may lead to performance degradation. In order to correct this defragmentation is used. Defragmentation processes reunite files in successive address spaces. In order to perform defragmentation data files are moved within physical memory locations on the disk to create contiguously stored files. Thus temporary storage locations are used as the space occupied by a first file is used by a second file the first file must be stored in some location so it is not lost.

In one embodiment NV memory is used as a temporary storage location during defragmentation. Data is written to the NV memory. The location of other data is changed in order to increase the contiguousness of the storage of the other data. Then the data from the NV memory is written to the storage device being defragmented. When the data which has been temporarily stored is restored to the storage device such as the hard disk of a computer system the temporary copy is removed from NV memory. Thus defragmentation can occur without requiring the use of the long term storage medium and the associated costs of such use for storing temporary data.

As shown in and described above a persistent storage device can include both a long term storage medium e.g. the disk assembly from . In such a situation data from the CPU travels between the host computer and the persistent storage device . This flow is mediated by host computer interface in host computer and host computer interface in the persistent storage device . Device control firmware may directly or indirectly control storage in the NV memory and the long term storage medium .

In order to begin use of the persistent storage device the operating system queries the storage unit configuration as described above to determine whether a NV memory is available and if so size and other parameters of the NV memory such as type utilization history etc. Then a determination is made regarding how the NV memory will be utilized.

Utilization of the NV memory may be controlled in two ways. First some portions of NV memory may be under the control of the storage unit. Second some portions of the NV memory may be under the direct control of the OS . As discussed above when a portion of the NV memory is under direct control of the OS that portion is used to map a specific set of LSAs. Reads and writes to these LSAs will then always access the NV memory at the mapped portions. The data in these LSAs will not be flushed to the storage unit unless the NV memory is reconfigured by the operating system.

The portion of the NV memory which is not under direct operating system control is used as a cache. This cache portion serves double duty as a read cache and as a write buffer. When the write buffer is flushed to the disk the OS opportunistically re populates the NV memory with data from the disk to serve as a read cache. This cache data is overwritten with write buffer data. Eventually the read cache is completely overwritten by the write buffer data at which time the buffer is full the storage unit controller spins up the disk flushes the buffer data to the disk repopulates the read cache and spins down the disk.

The use of an NV memory with both a cache portion and a mapped portion is shown in . NV memory is divided into a cache portion and a mapped portion . As shown by arrow data read from or written to LSAs which are not mapped to the mapped portion is written to the cache portion as shown by arrow if the data being read from an LSA is not present in the cache portion then it is read from the long term storage medium . As discussed the cache portion functions as both a read cache and a write cache arrow shows that data in the cache portion is flushed to the long term storage medium and data is copied from the long term storage medium to the cache portion when there is room to use the cache portion as a write buffer.

The mapped portion is mapped to specific LSAs. Thus as shown by arrow when these LSAs are read from or written to these reads and writes are directly from the mapped portion . Data in the mapped portion does not get flushed to the long term storage medium nor does long term storage medium provide data to the mapped portion. The only exception to this is upon remapping. As shown by arrow when a new mapping is created data from the former mapping is copied to the long term storage medium and data from the disk for the new LSAs mapped is copied to the NV memory specifically to the mapped portion . 

The control of the cache portion is defined by the state diagram shown in . As shown in a boot state is entered either during initialization or during reboot after shutdown . After the boot state as shown by transition when the operating system moves to a running state and sends a command to flush the cache and repopulate along with a list of logical sector addresses with which to initially populate the cache. As shown by transition each time this command to flush the cache and repopulate is received from the operating system the operations of the running state are performed again. In order to move to shut down state transition occurs. When a shutdown occurs according to one embodiment a command to flush and repopulate the cache with an LSA list is sent.

The disk drive controller firmware reduces power consumption and improves reliability and performance by using the NV memory in certain cases rather than using the slower disk . The disk drive controller receives commands from the OS to populate the cache portion of the NV memory with data from a specified list of logical sector addresses LSAs . The list of LSAs also includes a prioritization of the sectors where highest priority sectors are least likely to be removed from the cache and lowest priority sectors are most likely to be removed. Once the cache is populated the disk is spun down and the cache is used as a write buffer. Sectors cached for read are overwritten as the buffer fills up according to their priority. The disk is only spun up when there is a read cache miss when the write buffer is full or when an explicit spin up command is received from the OS . In this way the disk will remain off for long periods of time relative to the time it is turned on thus reducing power and improving reliability. The highest priority LSAs are permanently pinned in the NV memory cache until told otherwise by the OS .

The operations in the boot state are shown in . As shown in step the boot state blocks from the NV memory are provided as requested by the BIOS and the operating system . In parallel the long term storage medium e.g. disk is spun up.

After this state is complete the running state is entered and the OS sends a command to flush and repopulate the cache with specified LSAs. The operations of the running state are shown in . As shown in in the running state if the disk is not already spun up the disk is spun up step . In step any modified sectors in the NV memory are flushed to the disk long term storage medium . The LSAs specified by the OS are then read from the disk to the NV memory for the read cache in step . The disk is then spun down step . In step the NV memory is used as a read cache and a write buffer. Cached sectors are provided as requested sectors written to are saved in the NV memory buffer overwriting read cache sectors according to priority. When the write buffer is over the full threshold step the NV memory is flushed and repopulated steps through .

When a command is received to shut down the shutdown state is entered. The operations of the shut down state are shown in . The disk is spun up step . In step any modified sectors in the NV memory are flushed to the disk long term storage medium . The LSAs specified by the OS are then read from the disk to the NV memory for the read cache in step . This allows the NV memory to have data available which will be requested at startup by BIOS and the operating system .

Other forms of shut down or analogous pauses in functioning for example stand by and hibernate also function according to the methods shown in . Information needed to resume functioning is stored in the NV memory which allows quicker resumption.

Again as described above the OS and applications via the OS may give other hints to the device controller to help it determine when to spin up or spin down the disk and conversely if the controller FW must spin the disk up for any reason it sends an interrupt to the OS indicating the disk is spinning up. The operating system and applications can then take advantage of this situation to write non critical data that has been cached in volatile working memory to the storage unit.

In one embodiment the controller firmware also utilizes the benefits realized from NV memory to lower acoustic noise in hard drive storage units. By setting the write buffer threshold low enough the controller is able to spin up more slowly and take longer to flush the write buffer to the disk reducing acoustic noise from the spindle and the heads to seek servos. This technique also reduces the peak current draw from the power supply. The controller firmware also takes advantage of relatively large amounts of data in the buffer to place data on the disk in contiguous blocks and avoid fragmentation when flushing the data to disk.

The exact state of the cache is known only by the controller . The operating system can get a snapshot of it by querying the controller . At any point in time the operating system may choose to flush the cache and start with a fresh set of sectors it believes will be required in the near future by sending a command transition in .

In one embodiment in the absence of a specific command from the OS to populate the cache portion with files by presenting a list of LSAs e.g. those required to boot or resume from hibernate on transition or generally those given upon a transition from boot state or in running state the controller could do its own prefetching from disk to NV memory by monitoring disk IOs immediately after boot or S resume. These IOs represent the most likely data to be required on the next boot or S resume. Once this data is collected by the controller it is stored in a table in NV memory . On next shutdown or hibernate the controller uses this data to populate the NV memory from disk before shutting down or hibernating.

The operating system directly controls the mapped portion of NV memory . For this portion the operating system defines specific logical sector addresses that must map to the mapped portion . This gives the operating system direct control of the data stored in the NV memory . Such control in one embodiment may also be given to other applications.

One way in which this can be accomplished is where operating system creates a portion of NV memory that maps or shadows a specific but not necessarily contiguous set of LSAs. To create this portion the OS sends a command to the disk controller to flush the entire NV memory which moves all modified data in the write buffer and in a previous mapping to the long term storage medium . It then sends a command to map a list of LSAs to the mapped portion of the NV memory . The controller copies sectors from the disk to the NV memory and maintains them there until told otherwise by the operating system . If the logical sector addresses sent to the persistent storage device for mapping extend beyond the current address space of the disk then these are appended to the end of the disk s address space. When a remapping occurs the OS will need to copy the data in these extended addresses to locations in the disk s address space to avoid losing data. The operating system is in direct control of these mapped sectors in NV memory

The OS may periodically flush the mapped portion to disk and map a new set of LSAs to the mapped portion . This occurs as shown in . In step the disk is prepared for reading writing. In step the data from the mapped portion of the NV memory is flushed to the disk . In step the cache portion is also flushed to the disk. In step the new LSAs to be mapped are copied from the disk to the mapped portion of the NV memory . Although not shown the cache portion in one embodiment is filled with data from the disk in order to function as a read cache. The disk is then spun down step .

As an alternative to this mapping the NV memory may also be configured as a separate partition or logical volume of the persistent storage device . Continuous logical sectors are then under direct control of the operating system as described above.

In addition to a cache portion and a mapped portion as shown in in one embodiment a portion of the NV memory is set aside to store certain information about the persistent storage device which will allow diagnostics or other information to be maintained.

In one embodiment such descriptive information includes label information the number of bad sectors in the long term storage medium statistical data regarding the number of sectors written to or from in a certain amount of time the number of spin ups or spin downs of the disk in a certain amount of time and the number of hours the long term storage medium has run.

In one embodiment this self descriptive memory portion is read by specific interfaces which allow OS components or an application to access the memory. In another embodiment the persistent storage device includes a display. For example an LCD display may be included in the persistent storage device . When a certain query is made to the persistent storage device either via the computer or directly e.g. by pressing a button on the persistent storage device data from the self descriptive memory portion is displayed.

In one embodiment the OS or an application use the information stored in the self descriptive memory to determine when the storage device is nearing its life expectancy and the data stored on said storage device needs to be transferred to a new storage device.

Information may also be stored which allows the NV memory to be used as a black box recorder which stores data concerning the operation of the computer. In case of a failure such as an abnormal shut down information regarding the operation of the computer is stored and can be retrieved in order to analyze the failure. Such information may include process information regarding processes running in said computer system thread information regarding threads running in said computer system data accesses and device accesses. Similarly to a black box recorder in an airplane a limited amount of space may be allotted to this operational information and when more information is collected than can fit in that space previously stored operational information is overwritten with newer information.

Certain NV memory technologies suffer from wear out after too many erase cycles. In order to delay the onset of such wear out the controller in one embodiment balances the erasure of all areas of the NV memory in order to ensure that approximately equal use is made of each area. The controller changes the physical locations used within the NV memory to avoid wearing out NV memory blocks associated with disk sectors that are written to frequently. In one embodiment this requires a certain amount of overhead to be used to guarantee that there is always space available in the mapped portion to do the wear leveling. For example if 1 MB of sectors are set aside for mapped portion the disk controller may actually set aside 1.5 MB to allow the wear leveling to work properly.

It is noted that the foregoing examples have been provided merely for the purpose of explanation and are in no way to be construed as limiting of the present invention. While the invention has been described with reference to various embodiments it is understood that the words which have been used herein are words of description and illustration rather than words of limitations. Further although the invention has been described herein with reference to particular means materials and embodiments the invention is not intended to be limited to the particulars disclosed herein rather the invention extends to all functionally equivalent structures methods and uses such as are within the scope of the appended claims. Those skilled in the art having the benefit of the teachings of this specification may effect numerous modifications thereto and changes may be made without departing from the scope and spirit of the invention in its aspects.

