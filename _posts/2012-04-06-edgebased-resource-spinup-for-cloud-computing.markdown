---

title: Edge-based resource spin-up for cloud computing
abstract: Aspects of the present invention include distributing new resources closer to end-users which are making increased demands by spinning-up additional virtualized instances (as part of a cloud provisioning) within servers that are physically near to the network equipment (i.e., web servers, switches, routers, load balancers) that are receiving the requests.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08745239&OS=08745239&RS=08745239
owner: Limelight Networks, Inc.
number: 08745239
owner_city: Tempe
owner_country: US
publication_date: 20120406
---
The present application is a continuation in part of U.S. application Ser. No. 13 245 601 filed on Sep. 26 2011 entitled EDGE BASED RESOURCE SPIN UP FOR CLOUD COMPUTING which is hereby incorporated by reference in its entirety for all purposes. The present application is also a continuation in part of U.S. application Ser. No. 12 756 956 filed on Apr. 8 2010 entitled SYSTEM AND METHOD FOR DELIVERY OF CONTENT OBJECTS which claims priority to Australian Patent Application Serial No. 2010201379 filed on Apr. 7 2010 entitled SYSTEM AND METHOD FOR DELIVERY OF CONTENT OBJECTS. 

The present application relates generally to provisioning request responding resources. More particularly it concerns a. providing edge based resources for carrying out computational activities within a cloud environment.

Presently compute resources i.e. applications etc. within a cloud provider s network are spun up in a cluster e.g. servers which are aggregated in a centralized location a datacenter etc. . All requests are load balanced back to that cluster. Unfortunately such an implementation does not necessarily provide the best performance or experience for end users who may for example be located far away from the centralized cluster.

This problem is further compounded by the fact that applications provided within the cloud are becoming more robust and require additional resources and computing power as well as faster response times. Accordingly the computations being preformed over the web are becoming increasingly more intensive. As such with the centralized cluster approach many of these computations are being routed away from the user which adds to or even causes delays and an unacceptable user experience.

One example of a current implementation is illustrated by method of . A data center includes a compute platform which is in communication with devices which produce user requests . As such user requests are received by the data center which includes the cloud resources. As requests increase software and services within the data center are spun up by additional cloud resources using the compute platform . The distance between the compute platform and the user requests may be great and therefore responsiveness and user experience are diminished greatly.

Furthermore in the current cloud service environments customers must deploy their applications to a single cloud and utilize the elasticity of the cloud to determine additional resources and spin those up accordingly within the cloud environment. Unfortunately if the cloud provider is experiencing difficulties either regionally or globally the customer has no way to re route requests to another cloud and thus performance is dramatically impacted. Thus for at least these reasons improvements in the art are needed.

In one embodiment aspects of the present invention distribute new resources closer to end users which are requesting the resource. As such additional virtualized instances as part of a cloud provisioning are spun up within servers that are physically near to the network equipment i.e. web servers switches routers load balancers which are receiving the requests. Accordingly by moving computational resources closer to the requesting users in cloud computing environments the user experience is significantly enhanced.

Further areas of applicability of the present disclosure will become apparent from the detailed description provided hereinafter. It should be understood that the detailed description and specific examples while indicating various embodiments are intended for purposes of illustration only and are not intended to necessarily limit the scope of the disclosure.

Further aspects of the present invention include dynamically routing requests for applications to one of multiple cloud computing environments. Alternatively the method may dynamically route an application request to an application that is hosted in multiple clouds deployed within a management application based upon a specified criteria. In one embodiment the routing of requests for the application to a specific cloud in which the application is deployed may be based upon a criteria s that the application owner specifies. This may provide the application owner an ability to positively affect quality of service QoS for application delivery ensure uninterrupted access to the application in the event of failure by one or more clouds and provide more efficient application performance.

In the figures similar components and or features may have the same reference label. In some cases components of the same type are identified by following a first reference label with a dash and a second reference label that further distinguishes among the similar components. If only the first reference label is used the description is applicable to any of the similar components designated by the first reference label.

The ensuing description provides preferred exemplary embodiment s only and such preferred exemplary embodiments are not intended to limit the scope or applicability of the present invention. Rather the ensuing description will enable those who are skilled in the art to implement such preferred exemplary embodiment s . Persons of skill in the art will recognize that various changes may be made in the function and arrangement of elements without departing from the spirit and scope of the invention as set forth in the appended claims.

In one embodiment the data centers and may include edge servers and respectively. Further edge servers and may include compute platforms and respectively. It should be noted that one skilled in the art would conclude that any number of data centers edge serves and or compute platforms may be included and only two of each are shown for ease of explanation and illustration.

In a further embodiment system may include a load balancer in communication with both data centers and as well as user devices issuing user requests and . In a cloud computing environment such as the one depicted in system many user requests may be received and proper allocation and division of cloud resources should be allocated to handle the requests. Furthermore many of the requests are time sensitive and latency sensitive i.e. UI intensive applications computation intensive applications etc. so ensuring fast response times to requests can be important. As such in the confirmation of system the load balancer is configured to determine the fastest responding edge server compute platform to direct the request. In one embodiment fastest response time means the edge server closest physically to the requesting user device. Alternatively fastest may mean the edge server with the lowest latency relative to the requesting device. In some instances the closest and the lowest latency edge server may be the same server but not always. For example if the physically closest edge server is experiencing a heavy load of traffic and requests the response time and or network latency of the server may outweigh the physically close proximity to the requesting device.

In other words the load balancer is configured to ensure that the needed resources to respond to the user requests and are routed to the edge servers and which will provide the fastest response time for the request which in many cases will be the edge server which is in the closest proximity to the requesting user device.

In one example two groups of users make requests from two different geographical locations. The load balancer then receives the requests and based on the location of the request distributes the request to the data center or closest to the user alternatively the request may be routed to the data center which will provide the faster response time . Once the request is routed it is received by a localized cloud instance which is a de centralized cloud computing environment with resources spun up as physically close to the requesting device as possible. In one embodiment such localized resources may be synchronized around the network to ensure that requests come to one localized cluster are treated in the same manner as other requests. Then based on the request load that is delivered to that localized cloud instance resources are spun up in that locality based upon demand i.e. subsequent user requests .

In one embodiment the request may be for an application such as an enterprise application a media application etc. Alternatively the request may be for data such a video file a music file a document etc. Each request may have associated information sent with the request which identifies the application and or data used to service the request. The identification information may be embedded or attached to the request.

Furthermore at process block the edge server may extract the identification information. Then based on the information the edge server can identify the application service used to process the request process block . For example the identification information may specifically identify the application by name or some other identifier or alternatively the information may include an application type etc.

Further the selected edge server may be in communication with one or more compute platforms which may be co located or remotely located with the edge server. Additionally each of the compute platforms may have one or more containers running which provide a virtual construct for allocating resources. In one embodiment these containers may be a type of virtualized resource which is different from a virtualized instanced such as elastic computing cloud EC2 . The containers are then configured to execute and maintain applications needed to service the user requests. Hence at decision block a determination is made whether a container maintained by a compute platform in communication with the selected edge server is running or capable of running the application necessary for servicing the user request. In one embodiment all of the edge based compute platforms may include the DNA for running an application e.g. an XML dataset that specifies instructions for each application to be run in a container and the determination for being able to run the application based on the current levels of utilization. As such the allocation of the compute platform becomes a predictive determination. In one embodiment a compute platform is capable of running the application if the compute platform has sufficient unused resources if the necessary application is loaded on the compute platform etc.

If the application is not running on any of the containers within the compute platforms then at process block an available compute platform or on other words a compute platform which has available resources is identified. Accordingly it may not matter if the application is not currently running as the application can be spun up availability can be based on either a currently running application or the necessary capacity to support the application running which could then be translated to actually spinning up a container on demand to support the requests. Then one or more containers are spun up by the identified compute platform to run the identified application or service process block .

Alternatively if there is a container identified as running the application then a determination is made whether the container has sufficient resources to handle the increased load of the new request decision block . If the container does not have sufficient resources to handle the increased load then at process block a container or containers may be spun up to run the identified application. Alternatively if the container has sufficient resources to handle the increased load then at process block the request is routed to the compute platform with the container already running the identified application. As such the load is effectively balanced to the compute platform and container with available resources from the edge server with the closest physical proximity to the requesting device thus providing the most efficient user experience.

One example of an implementation of method may be performed for the MediaTag application. In one embodiment a user may click on a link file that the user desires to purchase. The file includes an associated cookie which is used to point the request to the MediaTag application. The application makes a request of the cookie which has been stored on the user s machine by the website providing the music download MediaTag then takes the cookie explodes it and carries out computational activity against the results. The edge server then upon receiving the request interprets the tag and identifies a compute platform which is capable of spinning up resources for the MediaTag application. Alternatively the determination may be based solely on geography the closest POP with resources there is sometimes a tradeoff between locality and capacity as a system may choose to actually go to a more distant compute resource to carry out the request because the latency of serving the response is actually less than the latency caused in the local edge by the lack of capacity.

Then the compute platform spins up a container running the MediaTag application. The MediaTag application then creates a unique file based on the request the file may include identification information such as the username of the requester the origination location etc. . Again alternatively the choice may be based on both proximity and the current utilization level of that current proximal location there is a tradeoff. Then a response to the request is sent to the user process block .

This entire process is implemented using the edge based cloud computing solution of the present invention. At each step of the execution of the MediTag application resources and servers are chosen based on their physical proximity to the requesting user device thus increasing the efficiency and executing time of the MediaTag application. Other applications may be implemented in the same or similar way utilizing method .

In some instances the application service identified for processing the request at block may be influenced by a version of the application data or service that is to be sent to the requesting user device. In some instances the identified application service identified for processing the request at block influences a version of the application data or service that is to be sent to the requesting user device. Thus some embodiments of the invention relate to selecting a version of an application data e.g. content object or service from amongst a plurality of versions in response to a request received from a user device. A version may be selected e.g. by a technique disclosed herein and or by a technique disclosed in U.S. application Ser. No. 12 756 956 which is hereby incorporated by reference in its entirety.

An advantage of edge based cloud computing may be that requests are able to be routed using URLs. URLs uniquely allow for information to be appended to the URL which can provide the necessary information to the edge server for more efficient routing resource allocation and version selection. In addition URL based routing enables a variety of systems e.g. anything capable of dealing with HTTP the ability to forward the request along. This makes for a very flexible application architecture and a distributed computing environment in that individual application components all making URL i.e. HTTP based requests can be completed from different compute resources not necessarily all the same resource the resources used for these requests can be fanned out. Further the compute resources individually or collectively may be able to differentially respond to requests associated with a single user selected URL by thereafter selecting a version of a requested item e.g. application content object etc. and returning the selected version to the user device. In one instance a version may first be selected and a compute resource thereafter chosen based on the selected version. In one instance a compute resource is selected and a version thereafter selected.

One embodiment of the present invention may provide that a customer signs up for a multi cloud application deployment which entails provisioning for a content delivery network CDN account i.e. providing HTTP service or the like as well as enabling the customer access to a portal or other web based UI that allows the customer to specify the cloud based locations of their applications the URLs to those applications the business rules the customer wants the applications to follow when shuttling requests to different clouds etc. Each cloud that the customer specifies may require a unique hostname provided by the CDN

Turning to a method is illustrated in accordance with embodiments of the present invention. At process block a request for an e.g. cloud based application data or service may be received at the DNS level. In response the request may be routed to an edge server or the like process block . At the edge server the customer rules policies may be applied to the incoming request process block . As such as discussed above requests can be routed to a preferential cloud computing network and or a version from amongst a plurality of versions of the requested application data service may be selected. The request is then routed to that cloud computing network process block .

At process block a response is received from the cloud computing network. In one embodiment response time and other metrics may be collected and recorded for assisting in making future routing decisions. Then the response may be routed back to the edge server and on to the requesting customer process block .

Referring first to a block diagram of an embodiment of a content distribution system is shown in which a content originator offloads delivery of content objects to a content delivery network CDN . The content originator produces and or distributes the content objects and may include one or more publishers and content sites . The CDN delivers the content objects over the Internet to end users via corresponding end user devices .

As shown the CDN may include an origin server a policy server and various points of presence PoPs . PoPs can be deployed throughout content distribution system and may serve content objects to end user devices in a particular geographic area and or in connection with a particular service provider. For example a PoP may be designated to serve content objects over Internet to end users in a particular city on a particular access network etc. to promote efficient delivery and a good user experience. The various CDN elements may be connected by a private network such as WAN and or a public network such as Internet .

An end user may browse for content objects at a content site with its respective end user device . As used herein a content object can be any computer accessible content and may include audio data video data images etc. in any number of computer accessible formats. The terms content and content object may be used interchangeably wherever they appear. End user devices can include personal computers media players handheld computers Internet appliances smart phones personal digital assistants streaming radios or any other device that receives and processes content objects. The content site could be a web page from which content is accessible via a web browser.

Links to content at the content site may point to locations in the content delivery network. When an end user requests delivery of a particular content object the request may be assigned to a PoP which in turn can deliver the requested content object to the end user device . If the content object is not available at the assigned PoP location the request may be propagated toward the core of the CDN and may ultimately be fulfilled from origin server . Content may be cached at various points between the core CDN and edge locations to improve efficiency.

Distribution of content objects often represents an important source of revenue for publishers . For example content sites may generate advertising revenue based on the number of times that a content object is viewed clicked or downloaded by end users . Thus to maximize their revenue publishers may seek to reach as many end users with their content as possible while providing a good overall user experience.

Unfortunately end user devices can vary widely in their respective capabilities and the manner in which they interact with content objects. Different end user devices may support different collections of multimedia formats and different delivery schemes. For example beginning with OS version 3.0 the iPhone from Apple Inc. supports M3U8 playlists and MPEG 2 segmented video with iPhone HTTP Streaming IHS delivery entirely over HTTP Hypertext Transfer Protocol . On the other hand the Blackberry Storm from Research in Motion Ltd. supports playback of multimedia content in Third Generation Partnership Project 3GPP format over RTSP Real Time Streaming Protocol .

To further complicate matters the manner in which delivery of a content object is initiated may vary from device to device. For example some end user devices may need help orchestrating a browser to player B2P handoff for certain types of content objects. Moreover even when media formats and delivery methods are equally supported the manner in which a content object is delivered may depend on the type of connection to Internet available to the end user device at a particular place and time. Thus for example the playback capabilities of the Blackberry Storm may differ depending upon whether it is connected to the Internet via a WIFI connection in a cybercaf or via a cellular network in a remote location.

In the present embodiment policy server is coupled to content site via Internet and receives a notification when new content objects are available from publishers . Alternatively a publisher may upload its content to an origin server and policy server may receive notifications via WAN when a new content object becomes available. Although shown separately policy server may be located within PoPs origin server or other parts of the content delivery network. Also it will be recognized that the various operations of policy server may be carried out by multiple individual servers such as decisioning servers merge servers assembly servers etc.

When a new content object is ready for processing policy server determines how it should be made available to end users. This may involve generating a number of different versions of the content object optimized for use with different end user devices having different capabilities and potentially used in different network environments. The different versions of the content object may correspond to different production or encoding profiles maintained at policy server . The production profiles in turn may be based upon a publisher s requirements for the distribution of its content objects. For example a publisher may prefer to distribute its content in a specific media format or formats to exploit device specific capabilities such as IHS streaming for iPhones to optimize separately for high bitrate and low bitrate environments to target specific operating systems and or platforms such as Windows or Mac OS etc.

Policy server may associate the different versions of a content object with a single network identifier such as a uniform resource locator URL . The single network identifier can then be returned to the publisher which created the content. The publisher can add the network identifier to one or more content sites which are accessible to end users . When a request for the content object is received from an end user device it can be sent to policy server for analysis. Using all available information policy server can select a version from amongst a plurality of versions of the content object for the end user device and can orchestrate its delivery to the requesting end user. The version and delivery method can be selected based on and or customized for hardware and software capabilities of the end user device bandwidth and connection quality viewing habits user preferences or any combination of factors. The selected version may also include a selection of advertisements which are matched to information about the end user device and or the end user.

As described herein policy server provides publishers with a one to many approach to optimized content delivery. Specifically a single network identifier can point to multiple versions of a given content object from which policy server selects a version for use with a particular end user device. Policy server thus relieves publishers of the burden of staying up to date with technology. When a new platform emerges or device capabilities change appropriate versions of the content object can be made available to end users through an existing network identifier without further effort from the publisher . Policy server selects a version of a content object in a manner that is transparent to the end user and thus avoids complicated configuration specialized software or manual selection. The end user experience is further improved by selecting a delivery method and sending the selected version of the content object from a PoP location with a fast response time for the user s location network access etc.

A publisher interface of policy server receives notification that a content object is available for processing. The notification can be any type of network communication and may be received directly from a publisher or from a CDN location. For example a publisher may use an RSS Really Simple Syndication feed to signal that new content objects are available for processing. Alternatively the notification may be an event such as an AMQP Advanced Message Queuing Protocol message received over WAN when new content is added to a file system of origin server or other type of network communication.

When a notification is received publisher interface can provide information about the publisher and the content object to a merge processor . Merge processor retrieves the content object over Internet or wide area network and is configured to create a plurality of versions of the content object. Creating versions of the content object can involve one or more transcoding converting splicing truncating padding reformatting resampling repackaging and related operations which may alter the media format and or other attributes of the content object as originally created by the publisher .

Merge processor can create different versions of the content object according to the requirements of each publisher . In one embodiment merge processor determines a set of production profiles with which to create the versions based on information received at publisher interface or maintained at policy server . For instance publishers may specify various encoding parameters for use in creating the different versions of their content. The encoding parameters may be fashioned into profiles and stored at policy server .

Using information from publisher interface merge processor may retrieve one or more publisher specific and or site specific entries from database with which to process content objects. In addition merge processor may make calls to an external entity to obtain advertising material creatives for inclusion with the different versions of the content object based on advertising index values or other indicators. For example merge processor may be configured to make advertising calls over Internet or WAN to a hosted ad serving platform such as the DART for Publishers service from Google Inc. or the Atlas AdManager service from Microsoft Corporation. The advertising calls may include additional publisher specific indices or category information for matching the creatives to particular content.

When encoding profiles for a content object have been identified and the creatives are ready merge processor produces a plurality of versions of the content object. This can involve inserting creatives at different positions in the content object and generating versions of the content object having different combinations of creatives for each encoding profile. In some embodiments a plurality of merge resources work in parallel to create versions of the content object for each profile creative combination. For example merge processor may direct the operation of a server farm or cluster of computing resources in the large scale production of versions of the content object. As they become available the content object versions may be placed into an object store and readied for distribution to locations throughout the CDN.

Merge processor associates each version of the content object with a single network identifier and when processing of the content object is complete may signal to publisher interface that the network identifier is ready for distribution. Policy server may then transmit the network identifier to publishers for use at content sites . As described below information about the network identifier is maintained in database and used by a policy engine to select a version e.g. a preferred version of the content object for distribution to an end user system.

When an end user requests delivery of a content object using its UURL the request may be redirected to policy server for selecting a version e.g. a preferred version of the requested content object from the available versions and for orchestrating delivery of the selected version to the end user device. For example the content request may be received at a POP location in the CDN and redirected to policy server using HTTP redirects. CDN elements may also forward information relating to the request request information with the UURL for use by policy server . Request information may include cookies usage statistics user profiles hardware identifiers software identifiers demographics information viewing habits content preferences group memberships etc. The content request interface receives the request information and passes it along with the UURL to a policy engine .

Policy engine is responsible for understanding the content and determining how to orchestrate a response to ensure its proper delivery to the requesting end user device. Using the network identifier policy engine can retrieve information from database about the publisher of the requested object the versions of the content object available for delivery through the CDN and their corresponding encoding profiles and creatives. Using the request information policy engine can select a version e.g. a preferred version of the content object for the end user device and can determine an appropriate delivery scheme.

The request information may include a user agent associated with the end user device. The user agent for example may include one or more hardware and or software identifiers corresponding to device capabilities. For purposes of illustration two examples of user agent information are provided below.

The first example 1 shows user agent information for a Blackberry mobile phone. The device is identified as a Model 9530 running version 4.7.0.148 of the browser software. The user agent information also indicates that the device supports Java application programming interfaces CLDC 1.1 and includes a Vendor string VendorID 105 indicating that Verizon US is the wireless provider. The second example 2 shows user agent information for an iPhone. The hardware is identified as an iPhone mobile device with firmware version 5H11. Software capabilities indicate the iPhone is running version 3.0.1 of the iPhone OS with build 525.18.1 of Apple Webkit core classes and a Mozilla based browser.

In addition to user agent information policy engine may also receive metadata cookies profiles or other device user information from content request interface . Cookies and metadata for example may be forwarded to policy server from the CDN server where the request was received and may contain indications of user preference for one media format or another viewing history etc. Based on the totality of available information policy engine determines or selects a version e.g. a preferred version of the content object and an orchestration scheme for arranging its delivery to the requesting end user device.

Using the publisher information in combination with network identifier information and device capabilities information policy engine can determine or select a version e.g. a preferred version of a requested content object from among the available versions. For example if a user requests UURL http company.x sports homerun.mpg policy engine may determine that the requested object is an asset of Company X and that three versions E E E of the content object are available for distribution through the CDN. Policy engine can then cross reference device capabilities with the encoding profiles to identify a subset of the available versions best suited for use with the requesting end user device. The subset of versions can then be ranked in accordance with the request information and publisher requirements to identify a particular version e.g. a preferred version based on the best information available.

In the homerun.mpg example if the user agent information indicates that the end user device is an iPhone the selected version may correspond to encoding profile E since that profile matches the 480 360 native resolution of the iPhone device and includes a segmented MPEG 2 video format. Since the requesting device has identified itself as an iPhone policy engine could select an HPD delivery orchestration scheme. However because it is known that the requesting iPhone is also running OS 3.x the device capabilities information indicates that iPhone HTTP Streaming IHS is also available.

IHS delivery may be selected by the publisher it may match the end user s preferences or it may represent the default orchestration scheme for iPhones running OS 3.x. Continuing with the example policy engine may select a version of homerun.mpg one that is created with encoding profile E and that includes a selection of creatives based on the request information. Note that the version of the content object selected and the delivery orchestration scheme may change based on the hardware and software capabilities of the requesting device. For example if an iPhone is detected as running version 2.x of the Apple operating system policy engine may instead choose HPD orchestration and a version of the content object having an MPEG 4 video format.

Of course many variations are possible in determining or selecting a version and delivery orchestration scheme. For example the request information may include a type of connection for the end user device. The type of connection may be determined based on information received from the end user device based on an IP address of the end user device based on an entry point to the CDN or any other means and may influence orchestration and the selection of the version. In a simple case the type of network connection may be used to choose between high bit rate and low bit rate versions of the content object. Cookies and metadata included with the request information may also influence selection of the version of the content object. For example cookies may provide an indication of user preference for media formats bit rates playback software etc.

In some embodiments policy engine may determine or select a version e.g. a preferred version of the content object according to a hierarchy of information. For example in descending order of priority the hierarchy may include user preferences special hardware capabilities general hardware capabilities special software capabilities general software capabilities and default settings. Policy engine may perform a series of comparisons using available information and a predetermined order of precedence by which to identify the version of the content object.

As one example a user s preference for MOV media format with a QuickTime media player may take precedence over generalized software capabilities and default settings. Similarly versions of a content object which exploit special hardware capabilities such as high resolution display screens may be preferred to versions compatible with more general hardware capabilities specialized software capabilities such as IHS streaming support may take precedence over default HTTP delivery and so on. Operation of policy engine is not limited to a particular set of information but may utilize any combination of user publisher network encoding profile and device capabilities information by which to select a particular content version and by which to orchestrate its delivery to the end user.

At block the policy server retrieves publisher information and encoding profiles for the new content object. The publisher information may be similar to that described in connection with and may specify a set of encoding profiles and advertising identifiers such as shown in for processing the media assets of a particular content site.

At block the policy server uses the advertising identifiers to communicate with ad servers. For instance the policy server may transmit the advertising identifiers and other information specific to the content site to one or more ad servers using their respective application programming interfaces API . Based on the responses from the ad servers at block creatives are obtained for inclusion with new versions of the content object. With audio and video content the response to the ad call may also include information to guide placement of the creatives within the content object. For example different types of creatives may be designated for insertion at pre roll mid roll and post roll positions in the content object received from the publisher.

At block the policy server generates or causes to be generated a plurality of versions 1 . . . N of the content object. The versions may be created by transcoding converting merging splitting truncating padding resampling resizing reformatting repackaging filtering and otherwise transforming and possibly modifying the original content object according to the collection of encoding profiles associated with publisher and content site. During processing advertising material can be inserted or merged into each version of the content object at the specified positions and for each encoding profile versions may be created using different combinations of advertising material. Note that the N versions of the content object may be created in a parallel fashion and that processing may be distributed across a collection of merge computing resources to minimize the time to completion.

At block the policy server associates the N versions of the content object with a single network identifier. The network identifier can be for example a universal URL UURL as described in connection with or other identifier having a one to many relationship to the versions of the content object. When the versions of the content object are ready at block the policy server may distribute them to locations in the CDN such as origin servers or in some cases to various POP locations as shown by arrow . The ingest part ends when the policy server returns the network identifier to the publisher for inclusion on its content sites as shown with arrow . However additional versions of the content object may be generated as new hardware and software capabilities emerge or when a publisher s requirements change. Because the additional versions are associated at the policy server with a previously published network identifier updates to the respective content sites are not required.

The delivery part of the interaction begins with arrow when the end user device requests a content object using the network identifier UURL and is now described in connection with .

At block a request for a content object with a UURL is received. For example with a UURL an end user may click on a link at a publisher s web site and be redirected to a nearby CDN location. This can be accomplished through DNS resolution or in some other manner. As shown using arrow the CDN location may forward the content request along with any related information such as the IP address of the end user device hardware and software identifiers usage statistics cookies metadata profiles etc. to the policy server for selection of a version of the requested content.

At block the policy server identifies versions of the content object associated with the UURL. As previously described a multitude of versions may have been generated during the ingest process and each version may correspond to an encoding profile and a set of creatives. The encoding profiles in turn may be optimized for use with different hardware and software platforms under different network conditions and the creatives may be selected according to the type of content with different groups of creatives being designated for different target audiences of the content object.

At block the policy server determines capabilities of the requesting end user device. The capabilities may be determined using device identifiers accompanying the content request or other sources of information available through the CDN. For instance device information may be retrieved from a device capabilities database with information from a user agent string cookies stored on the end user s computer records of previous interactions with the CDN etc.

At block a version e.g. a preferred version of the content object is selected based on the various sources of information. As shown by arrow the policy server also determines a delivery orchestration scheme block for sending the selected version of the content object to the requesting end user. Both the selected version of the content object and the delivery orchestration scheme selected by the policy server may reflect a ranking of device capabilities user preferences publisher requirements network conditions and other factors relating to overall user experience of the requested content as these elements are variously described herein.

At block the policy server orchestrates delivery of the selected version of the content object according to the selected delivery option. As shown by a arrow orchestration may involve multiple delivery protocols. For example delivery orchestration schemes which may be utilized by the policy server include HTTP progressive download HPD RTSP streaming delivery RSD RTSP via HTML stub RSDH and iPhone HTTP streaming IHS . As described below in connection with orchestration may include for example coordinating with other elements of the CDN redirecting an HTTP content request transitioning from HTTP to RTSP providing a stub or helper file providing a master playlist providing a bandwidth specific playlist or other combination of actions.

The interaction begins with arrow when the end user device requests a content object using its universal URL. As shown the end user device may send an HTTP request for universally identified content object C. The UURL may resolve to a CDN location that is best able to serve the end user device. At arrow the CDN edge server forwards the HTTP request along with request information such as user profiles device identifiers cookies metadata network connection etc. to the policy server.

The policy server processes the UURL request and the additional request information received from the CDN edge server and determines a particular version C.11 of the content object for delivery to the end user computer. At arrow the policy server generates an HTTP redirect in which information about version C.11 is added to the location header. At arrow the CDN edge server performs a second HTTP redirect to pass the updated location header to the end user device. The end user device makes a second HTTP request at arrow for content object C.11 using the location header information. The CDN edge server responds to the second HTTP request at arrow and delivers the particular C.11 version of the content object. In an alternative embodiment the exchange shown by arrows and is omitted and the edge server responds directly to the end user device with version C.11 of the content object.

The interaction begins with arrow when the end user device requests a content object using its universal URL. As with HPD delivery the device may send an HTTP request for content object C which may resolve to a CDN point of presence and be assigned to a CDN edge server. At arrow the CDN edge server forwards the HTTP request along with related information such as user profiles device identifiers cookies metadata connecting network etc. to the policy server.

The policy server processes the UURL request and any additional information received from the CDN edge server to determine a particular version C.9 of the content object for delivery to the end user device. In this case RTSP streaming delivery is selected. The selection of RTSP delivery may be based on user preferences publisher preferences software capabilities or any number of factors.

At arrow the policy server generates an HTTP redirect in which an RTSP URL corresponding to version C.9 is added to the location header. At arrow the CDN edge server performs a further HTTP redirect by which the updated location header is passed to the end user device. At arrow the end user device makes an RTSP request for content object C.9 using header information from the redirected HTTP request. A streaming CDN edge server responds to the RTSP request at arrow and streams version C.9 of the requested content object to the end user device.

The interaction begins with arrow when the end user device requests a content object using its universal URL. The request for content may be an HTTP request which resolves to the address of a CDN edge server. At arrow the CDN edge server forwards the HTTP request along with related information such as user profiles device identifiers cookies metadata connecting network etc. to the policy server.

At arrow the policy server generates an HTTP redirect to an HTML stub wrapper. The HTML stub wrapper may include within its HTML body content an RTSP URL of the selected version of the content object and certain directives to force the end user device to invoke a media player application. This type of redirection may be used for example to facilitate transition of control from a browsing application to a media player environment when the policy server determines that the end user device lacks the appropriate capabilities.

At arrow the CDN edge server relays the HTTP request referencing the HTML stub wrapper to the end user device. At arrow the end user device makes an HTTP request for the HTML stub wrapper. At arrow the CDN edge server fulfills the request and transfers the HTML stub wrapper to the end user device. The HTML stub wrapper contains the RTSP URL for the C.2 version and causes the end user device to invoke its media player application. At arrow responsive to the HTML stub wrapper the end user device invokes its media player and requests an RTSP stream for C.2. At arrow a streaming CDN edge server responds to the RTSP request and streams version C.2 of the content object to the end user device.

The interaction begins at arrow when the end user device requests a content object using its universal URL. As with the other delivery methods the device may send an HTTP request for content object C which is assigned to a CDN edge server through a DNS resolution process. At arrow the CDN edge server forwards the HTTP request along with related information such as user profiles device identifiers cookies metadata connecting network etc. to the policy server.

Apple iPhones running iPhone OS 3.0 and higher include a built in Quicktime player which supports streaming video over HTTP using a combination of M3U8 playlists and MPEG 2 segmented video. This approach enables the end user device to select between different versions of a preferred content object for example versions with different bitrates and to switch between the different versions based on how much network bandwidth is available. Due to this flexibility the policy server may prefer IHS delivery for use with suitable iPhone end user devices.

When IHS delivery of preferred content is selected the policy server generates an HTTP redirect to a master playlist. Here the master playlist includes references to multiple versions C.15 C.20 of the preferred content which may as previously indicated correspond to multiple bandwidth choices. At arrow the policy server sends the redirected request containing the master playlist to the CDN edge server at arrow it is returned to the end user device.

At arrow the Quicktime player selects from the master playlist and requests a playlist of media segments corresponding to its selection. In this example the iPhone selects version C.17 from the versions presented in the master playlist and issues a request at item for the C.17 playlist. Version C.17 for example may represent the highest bandwidth version for prevailing network conditions. At item the CDN edge server responds by providing a playlist for C.17 to the iPhone. Thereafter during playback of the content the iPhone requests media segments for C.17 and the CDN edge server delivers the requested segments as is shown by items .

The computer system is shown comprising hardware elements that can be electrically coupled via a bus or may otherwise be in communication as appropriate . The hardware elements can include one or more processors including without limitation one or more general purpose processors and or one or more special purpose processors such as digital signal processing chips graphics acceleration chips and or the like one or more input devices which can include without limitation a mouse a keyboard and or the like and one or more output devices which can include without limitation a display device a printer and or the like.

The computer system may further include and or be in communication with one or more storage devices which can comprise without limitation local and or network accessible storage and or can include without limitation a disk drive a drive array an optical storage device a solid state storage device such as a random access memory RAM and or a read only memory ROM which can be programmable flash updateable and or the like. The computer system might also include a communications subsystem which can include without limitation a modem a network card wireless or wired an infrared communication device a wireless communication device and or chipset such as a Bluetooth device an 802.11 device a WiFi device a WiMax device cellular communication facilities etc. and or the like. The communications subsystem may permit data to be exchanged with a network such as the network described below to name one example and or any other devices described herein. In many embodiments the computer system will further comprise a working memory which can include a RAM or ROM device as described above.

The computer system also can comprise software elements shown as being currently located within the working memory including an operating system and or other code such as one or more application programs which may comprise computer programs of the invention and or may be designed to implement methods of the invention and or configure systems of the invention as described herein. Merely by way of example one or more procedures described with respect to the method s discussed above might be implemented as code and or instructions executable by a computer and or a processor within a computer . A set of these instructions and or codes might be stored on a computer readable storage medium such as the storage device s described above. In some cases the storage medium might be incorporated within a computer system such as the system . In other embodiments the storage medium might be separate from a computer system i.e. a removable medium such as a compact disc etc. and is provided in an installation package such that the storage medium can be used to program a general purpose computer with the instructions code stored thereon. These instructions might take the form of executable code which is executable by the computer system and or might take the form of source and or installable code which upon compilation and or installation on the computer system e.g. using any of a variety of generally available compilers installation programs compression decompression utilities etc. then takes the form of executable code. In one embodiment the computer or machine readable medium may be non transitory.

It will be apparent to those skilled in the art that substantial variations may be made in accordance with specific requirements. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets etc. or both. Further connection to other computing devices such as network input output devices may be employed.

In one aspect the invention employs a computer system such as the computer system to perform methods of the invention. According to a set of embodiments some or all of the procedures of such methods are performed by the computer system in response to processor executing one or more sequences of one or more instructions which might be incorporated into the operating system and or other code such as an application program contained in the working memory . Such instructions may be read into the working memory from another machine readable medium such as one or more of the storage device s . Merely by way of example execution of the sequences of instructions contained in the working memory might cause the processor s to perform one or more procedures of the methods described herein.

The terms machine readable medium and computer readable medium as used herein refer to any medium that participates in providing data that causes a machine to operate in a specific fashion. In an embodiment implemented using the computer system various machine readable media might be involved in providing instructions code to processor s for execution and or might be used to store and or carry such instructions code e.g. as signals . In many implementations a computer readable medium is a physical and or tangible storage medium. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as the storage device s . Volatile media includes without limitation dynamic memory such as the working memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise the bus as well as the various components of the communications subsystem and or the media by which the communications subsystem provides communication with other devices . Hence transmission media can also take the form of waves including without limitation radio acoustic and or light waves such as those generated during radio wave and infrared data communications .

Common forms of physical and or tangible computer readable media include for example a floppy disk a flexible disk a hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM an EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read instructions and or code.

Various forms of machine readable media may be involved in carrying one or more sequences of one or more instructions to the processor s for execution. Merely by way of example the instructions may initially be carried on a magnetic disk and or optical disc of a remote computer. A remote computer might load the instructions into its dynamic memory and send the instructions as signals over a transmission medium to be received and or executed by the computer system . These signals which might be in the form of electromagnetic signals acoustic signals optical signals and or the like are all examples of carrier waves on which instructions can be encoded in accordance with various embodiments of the invention.

The communications subsystem and or components thereof generally will receive the signals and the bus then might carry the signals and or the data instructions etc. carried by the signals to the working memory from which the processor s retrieves and executes the instructions. The instructions received by the working memory may optionally be stored on a storage device either before or after execution by the processor s .

As will be understood by those skilled in the art the present invention may be embodied in other specific forms. In one particular embodiment of the partial object cache as previously described can be associated with a plurality of versions of programming structures. In one particular embodiment of the policy server a new content object is assigned a single network identifier which as previously described can be associated with a plurality of versions of the content object. However the versions of the content object need not be created prior to receiving a request from an end user device. Instead the different versions of the content object may be created dynamically at the direction of the policy server when a request is received. As described herein the full set of available information user agent preferences network identifiers cookies metadata usage information etc can be utilized to generate a particular e.g. a preferred version of the content object for the requesting end user device. As part of this on demand process the newly created particular version of the content object is associated with the single network identifier previously assigned to the new content object and it may be placed into an object store and used with subsequent requests. Those skilled in the art will recognize or be able to ascertain using no more than routine experimentation many equivalents to the specific embodiments of the invention described herein. Such equivalents are intended to be encompassed by the following claims.

