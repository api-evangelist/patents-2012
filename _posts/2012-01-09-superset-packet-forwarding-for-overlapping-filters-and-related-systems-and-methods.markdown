---

title: Superset packet forwarding for overlapping filters and related systems and methods
abstract: Systems and methods are disclosed that allow for improved management and control of packet forwarding in network systems. Network devices and tool optimizers and a related systems and methods are disclosed for improved packet forwarding between input ports and output ports. The input ports and output ports are configured to be connected to source devices and destination devices, for example, network sources and destination tools in a network monitoring environment. The network devices and tool optimizers disclosed can use superset packet forwarding, such that ingress filter engines are configured with ingress filter rules so as to forward a superset of packets to output ports associated with overlapping filters. Egress filter engines are configured with egress filter rules to then determine which of the superset packets are actually sent out the output ports.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08842548&OS=08842548&RS=08842548
owner: Anue Systems, Inc.
number: 08842548
owner_city: Austin
owner_country: US
publication_date: 20120109
---
This application is a continuation application of U.S. patent application Ser. No. 12 462 293 filed Jul. 31 2009 now U.S. Pat. No. 8 098 677 and entitled SUPERSET PACKET FORWARDING FOR OVERLAPPING FILTERS AND RELATED SYSTEMS AND METHODS which is hereby incorporated by reference in its entirety.

This application is related in subject matter to applications U.S. patent application Ser. No. 12 462 222 entitled FILTERING PATH VIEW GRAPHICAL USER INTERFACES AND RELATED SYSTEMS AND METHODS and U.S. patent application Ser. No. 12 462 221 entitled AUTOMATIC FILTER OVERLAP PROCESSING AND RELATED SYSTEMS AND METHODS now U.S. Pat. No. 8 018 943 each of which is hereby incorporated by reference in its entirety.

This invention relates to network systems and more particularly to network monitoring systems that collect and analyze packets associated with network communications.

Packet based data networks continue to grow in importance as the communication mechanism of choice for new applications and services. Examples of this importance include web based electronic commerce electronic mail instant messaging voice over internet protocol VoIP streaming video e.g. content from current websites such as Youtube.com and Hulu.com internet protocol television IPTV and precision time protocol PTP . In order to ensure successful delivery of these new applications and services it is desirable to monitor both underlying network behavior and overall application performance on an ongoing basis. To meet these new monitoring needs many new and innovative network monitoring and diagnostic tools have been developed and sold either as an application that runs on an ordinary computer or as an integrated hardware appliance.

One problem associated with the use of these network monitoring and diagnostic tools in network environments is the complexity of obtaining data from network sources and providing this data to the tools within the network monitoring system. Network monitoring applications and or appliances require access to network data to perform their functions. Currently this data access is typically provided using a network hub using a network test access port TAP or using a switched port analyzer available on network switches. For example with respect to this latter data source network switches produced by Cisco Systems include a SPAN port to which traffic on the switch is mirrored. It is also noted that other data access methods may also be used or may become available in future networks.

A network hub essentially operates as a multi port repeater for Ethernet networks. It is placed in line with one of the existing links in a network and provides a copy of the data sent through that link to a third port to which monitoring tools can be connected. The hub forces the monitored network segment to operate in half duplex mode which makes the use of network hubs impractical for most situations.

A TAP is placed in series with a network link and provides an exact copy of packets going in each direction on that link TAPs are similar to network hubs except that they do not require the network to operate in half duplex mode. Furthermore TAPs are generally designed to be failsafe so that they do not interfere with the network being monitored. To accomplish this TAPs are typically designed so that the network can continue normal operation even if power is lost to the TAP and so that the monitoring device is prevented from injecting packets back into the network. TAPS can be built in i.e. internal to a network monitoring device or can be external i.e. stand alone devices. Further TAPs can be either passive or active. Passive TAPs meet the failsafe requirement implicitly while active TAPs often incorporate specific components such as relays which restore normal network operations when power is lost to the active TAP.

A SPAN port also often called a mirror port provides a copy of the packets within a network switch or router. The main limitation of SPAN ports is that typical switches support only a few SPAN ports per switch or router.

In addition to the foregoing technical limitations for providing access to network data an additional consideration is the cost associated with hub TAP and SPAN port enabled devices that can used to provide the data. This significant cost along with the growing need for network access and technical limitations of the common access techniques have led to a shortage of access to network data for monitoring purposes. Because of this limited access most networks do not have sufficient monitoring points to meet the individual needs of all the network monitoring applications or appliances.

To help alleviate the problem of limited access to networks for monitoring tool aggregation devices have been developed that allow sharing access to the monitored data. These tool aggregation devices allow users to take data from one or more network monitoring points such as described above and forward it to multiple different monitoring tools according to user specified forwarding rules. These tool aggregation devices typically use SPAN ports and TAPs as the predominant method of accessing network data. The tool aggregation devices further provide some filtering capabilities beyond traditional packet switches routers including the ability to aggregate and filter traffic from multiple network sources and the ability to multicast traffic to multiple ports. Thus tool aggregation devices enable users to share access to network data for monitoring and somewhat alleviate the problem of access to data. However the filtering and forwarding capabilities of existing tool aggregation devices are built on single forwarding action techniques that are used for traditional packet switches and routers. As a result existing tool aggregation devices have significant limitations for monitoring applications.

Traditional packet switches and routers are multi port network devices that receive packets on one port and forward them out of one or more other ports. The rules governing the behavior of such devices are contained in one or more tables. The forwarding tables may be either statically or dynamically configured depending on the specific protocols used in the network. When a packet is received the switch or router examines protocol information in the packet header such as destination address and uses that information to look up the one and only one appropriate action in the forwarding table. This characteristic of traditional packet switches and routers is referred to herein as a single forwarding action behavior or technique.

In short when a traditional switch or router performs a lookup in a forwarding table the lookup returns at most one result. This single forwarding action behavior is found in all network equipment today. Indeed it is a fundamental assumption in the design of traditional network switches and routers that there can only be one answer that determines what to do with each packet and thus it is only necessary to perform a single forwarding action on each packet. This rationale is so deeply engrained in network protocols today that packets cannot have more than one destination address. Even in multicasting packets or broadcasting packets a single multicast destination address or a single broadcast action is used respectively. This single forwarding action design has the advantage in networks that it prevents excessive copies of a packet from traveling through a network and unnecessarily consuming bandwidth. However it has considerable disadvantages with respect to network monitoring systems where it is desirable to forward packets to multiple monitoring tools.

Similar to traditional packet switches routers existing tool aggregation devices also continue to be limited to the sequential nature of searching for a single matching rule within a memory such as a TCAM. Forwarding behavior is governed by matching packets against user specified packet filtering criteria but the first or highest priority user defined criteria that matches is the one that is acted upon. Subsequent lower priority user specified packet filtering criteria that would have matched the packet do not get acted upon. Users of existing tool aggregation devices that wish to forward packets according to multiple parallel overlapping criteria must know how to determine manually when such situations occur and must take appropriate action to work around this single forwarding action limitation. In practice this means that users must manually provision additional higher priority filtering criteria to handle cases where filter overlaps exist e.g. different forwarding actions are desired for the same packet based upon different filtering criteria .

Existing tool aggregation devices therefore require users to manually define filtering criteria including prioritizing the order that the filtering criteria are implemented within a TCAM filter stage. When overlaps exist only the first TCAM entry that matches gets acted upon based on TCAM priority. As such downstream instruments may not see all the traffic that they are supposed to see when overlaps exist unless users manually account for the overlaps themselves. In attempting to account for these overlaps however the burden is on the user to understand the filter overlaps and to create filtering criteria and related forwarding actions for each overlap to guarantee that packets are directed to all the desired instrument ports.

Manually generating the filter criteria however particularly to handle overlaps can quickly become a very difficult task if not practically impossible. To ensure all filtering criteria is acted upon when overlaps exist for example users must configure the overlap intersections and correctly prioritize these intersections relative to one another and to the original filtering criteria. Further if the user creates these additional intersections to prevent overlap the user may then need to manually sum the counts in the added forwarding actions to achieve meaningful filter statistics. This manual overlap handling is a difficult task because simple overlaps involving independent fields e.g. destination address field and VLAN field may not be obvious to users and more complex filtering criteria may expand into an enormous number of overlaps. Overlaps therefore cannot be readily understood or easily configured maintained as a manual process. Further a manual process is a complex and time consuming task having a greater probability of including errors in setting up the filtering criteria and related forwarding actions. Further manually maintaining the filtering criteria is extremely difficult whenever modifications are desired because a user must go back and determine how these modifications will affect the prior filtering criteria manually set up to forward packets. With existing tool aggregation devices many users simply ignore overlaps and accept the fact that tools will not receive all desired packets.

In short there exists a considerable need to improve the ability of users to share network sources among a number of different monitoring tools for purposes of network monitoring. And there exists a considerable need to improve the ability of users to create view and manage filtering criteria and related forwarding actions for purposes of network monitoring.

Systems and methods are disclosed that allow for improved management and control of packet forwarding in network systems. Network devices and tool optimizers and a related systems and methods are disclosed for improved packet forwarding between input ports and output ports. The input ports and output ports are configured to be connected to source devices and destination devices for example network sources and destination tools in a network monitoring environment. The network devices and tool optimizers disclosed can include graphical user interfaces GUIs through which a user can create and modify filters and select associated filter criteria or parameters for forwarding packets from input ports to output ports. The network tools and tool optimizers can also automatically generate filter rules and apply them to the appropriate filter engines so that packets are forwarded as desired by the user. Further the network devices and tool optimizers can include a packet processing system whereby forwarding behavior is governed by matching packets in parallel against multiple user specified packet filtering criteria and by performing forwarding actions associated with all such matching filter criteria. As described herein this behavior is different from the single forwarding action behavior of traditional packet switches and routers and is also different from existing network switch devices and existing tool aggregation devices. As further described this multi action forwarding behavior is particularly advantageous for network monitoring applications to facilitate sharing access to limited monitoring resources in a simple and straightforward way. Still further the network devices and tool optimizers disclosed can use superset packet forwarding such that ingress filter engines are configured with ingress filter rules so as to forward a superset of packets to output ports associated with overlapping filters. Egress filter engines are configured with egress filter rules to then determine which of the superset packets are actually sent out the output ports. Other features and variations can be implemented if desired and related systems and methods can be utilized as well.

In one embodiment a network packet forwarding device having superset packet forwarding for automatic filter overlap processing is disclosed including one or more input ports configured to receive packets from one or more source devices a plurality of output ports configured to send packets to two or more destination devices packet forwarding circuitry coupled between the input ports and the output ports and configured to forward packets from the input ports to the output ports at least one ingress filter engine coupled to the packet forwarding circuitry and configured to use ingress filter rules to control at least in part how packets are forwarded from the input ports to the output ports where the ingress filter engine is configured to provide a single forwarding action per packet at least one egress filter engine coupled to the packet forwarding circuitry and configured to use egress filter rules to control at least in part how packets are sent by the output ports to destination devices a filter interface configured to allow a user to define a plurality of filters representing how packets are desired to be forwarded from input ports to output ports and a dynamic filter processor. The dynamic filter processor is configured to analyze the user defined filters to automatically identify filters having different forwarding actions for packets from a single input port as overlapping filters to automatically generate the ingress filter rules so that packets matching ingress filter rules for an overlapping filter are forwarded to all output ports associated with any other overlapping filter to automatically generate the egress filter rules and to automatically apply the ingress and egress filter rules to the ingress and egress filter engines so that the ingress and egress filter engines are configured to cause packets from the single input port to be forwarded according to the different forwarding actions provided by the overlapping filters.

In further embodiments the dynamic filter processor can be configured to automatically generate the ingress and egress filter rules regardless of an order in which a user defines the overlapping filters. The interface can be configured to be accessed through one or more management platforms by a plurality of users at the same time. Further a plurality of ingress filter engines can be used with each ingress filter engine having a processing priority with respect to each of the other ingress filter engines. Also the dynamic filter processor can be configured to apply the ingress filter rules to the plurality of ingress filter engines such that any one ingress filter engine will have non overlapping ingress filter rules within it. Still further a statistics engine can be included and can be configured to receive statistics information from each ingress filter engine concerning packets forwarded by that ingress filter engine and to aggregate the statistics information from the ingress filter engines to provided aggregated filter statistics for the network packet forwarding device.

In addition the dynamic filter processor can be configured to implement filter rules for a first overlapping filter without affecting operation of filter rules for a second overlapping filter. The ingress and egress filter engines can be configured to utilize value mask pairs to define ingress and egress filter rules. The dynamic filter processor can be configured to automatically decompose overlapping filters into value mask pairs to generate ingress and egress filter rules for the overlapping filters. The dynamic filter processor can also be configured to reduce the value mask pairs to a smallest possible set of value mask pairs needed to implement the overlapping filters.

In still further embodiments packets matching a filter configured to pass all received packets to at least one output port can be kept from being forwarded to output ports associated with any other overlapping filter. In addition the ingress filter engine can be configured to process filter rules according to a processing priority and packets matching an ingress filter rule can be kept from being forwarded to output ports associated with higher priority ingress filter rules. Still further the dynamic filter processor can be configured to determine projected match rates for ingress filter rules and to place an ingress filter rule with a lower projected match rate at a higher processing priority than an ingress filter rule with a higher projected match rate. In addition the interface can be configured to allow a user to determine a class of service for each filter and the egress filter engine can be configured to use the class of service to determine packets to drop first when a buffer overflow condition exists at an egress buffer. Further the source devices can be network monitoring sources and the destination devices can be network monitoring tools.

In another embodiment a method for superset packet forwarding for automatic filter overlap processing is disclosed including providing one or more input ports configured to receive packets from one or more source devices providing a plurality of output ports configured to send packets to two or more destination devices forwarding packets between the input ports and the output ports using packet forwarding circuitry using at least one ingress filter engine to control at least in part how packets are forwarded from the input ports to the output ports based upon ingress filter rules with the ingress filter engine being configured to provide a single forwarding action per packet using at least one egress filter engine to control at least in part how packets are sent by the output ports to destination devices based upon egress filter rules allowing a user to define through an interface a plurality of filters representing how packets are desired to be forwarded from input ports to output ports analyzing the user defined filters automatically identifying filters having different forwarding actions for packets from a single input port as overlapping filters automatically generating the ingress filter rules so that packets matching ingress filter rules for an overlapping filter are forwarded to all output ports associated with any other overlapping filter automatically generating the egress filter rules automatically applying the ingress and egress filter rules to the ingress and egress filter engines so that the ingress and egress filter engines are configured to cause packets from the single input port to be forwarded according to the different forwarding actions provided by the overlapping filters and forwarding packets according to the user defined filters.

In further embodiments the method can include automatically generating the ingress and egress filter rules regardless of an order in which a user defines the overlapping filters. The method can include allowing a plurality of users to access the interface through one or more management platforms at the same time. The method can include providing a plurality of ingress filter engines with each ingress filter engine having a processing priority with respect to each of the other ingress filter engines. Still further the method can include applying the ingress filter rules to the plurality of ingress filter engines such that any one ingress filter engine will have non overlapping ingress filter rules within it. The method can further include receiving statistics information from each ingress filter engine concerning packets forwarded by that ingress filter engine and aggregating the statistics information from the ingress filter engines to provided aggregated filter statistics for the network packet forwarding device.

In addition the method can include implementing filter rules for a first overlapping filter without affecting operation of filter rules for a second overlapping filter. The method can include utilizing value mask pairs to define ingress and egress filter rules. The method can further include automatically decomposing overlapping filters into value mask pairs to generate ingress and egress filter rules for the overlapping filters.

In still further embodiments the method can include keeping packets matching a filter configured to pass all received packets to at least one output port from being forwarded to output ports associated with any other overlapping filter. Where the ingress filter engine processes rules according to a processing priority the method can further include keeping packets matching an ingress filter rule from being forwarded to output ports associated with higher priority ingress filter rules. The method can also include determining projected match rates for ingress filter rules and placing an ingress filter rule with a lower projected match rate at a higher processing priority than an ingress filter rule with a higher projected match rate. Further the source devices can be network monitoring sources and the destination devices can be network monitoring tools.

Other features and variations can be implemented if desired and related systems and methods can be utilized as well.

Systems and methods are disclosed that allow for improved management and control of packet forwarding in network systems. Network devices and tool optimizers and a related systems and methods are disclosed for improved packet forwarding between input ports and output ports. The input ports and output ports are configured to be connected to source devices and destination devices for example network sources and destination tools in a network monitoring environment. The network devices and tool optimizers disclosed can include graphical user interfaces GUIs through which a user can create and modify filters and select associated filter criteria or parameters for forwarding packets from input ports to output ports. The network tools and tool optimizers can also automatically generate filter rules and apply them to the appropriate filter engines so that packets are forwarded as desired by the user. Further the network devices and tool optimizers can include a packet processing system whereby forwarding behavior is governed by matching packets in parallel against multiple user specified packet filtering criteria and by performing forwarding actions associated with all such matching filter criteria. As described herein this behavior is different from the single forwarding action behavior of traditional packet switches and routers and is also different from existing network switch devices and existing tool aggregation devices. As further described this multi action forwarding behavior is particularly advantageous for network monitoring applications to facilitate sharing access to limited monitoring resources in a simple and straightforward way. Other features and variations can be implemented if desired and related systems and methods can be utilized as well.

The embodiments described herein are powerful and easy to use solutions for packet filtering and provide in part automatic creation of filter rules automatic handling of filter overlaps hitless i.e. without affecting other traffic filter re configuration and a graphical user interface GUI . These features provide significant advantages over prior implementations because of the time that it saves the end user when learning how to use the system and when creating updating a configuration. Further the user is not required to adjust existing filter configurations when new overlapping filters are added to the configuration. The embodiments described herein provide the following advantages but are not limited to these advantages 

Embodiments for tool optimizers for network monitoring systems are described in more detail below with respect to the drawings. FIGS. and A D provide example embodiments for a network monitoring system and the tool optimizer. and A B provide example embodiments for a GUI associated with viewing creating and modifying packet forwarding paths from sources through filters to destinations. and Prior Art provide a comparison between the GUI based user definition of filters filter parameters and relating Boolean logic as described herein as compared to complicated command line interface CLI instructions that would be required in a typical prior system. provide examples for overlapping filters desired by a user. Prior Art provides an example of how destination tools in prior systems would likely not receive the packets desired by the user. provides an example embodiment using multi action packet forwarding to implement user defined filters. provide example embodiments including the use of action superset egress ASE processing to forward packets to a superset of egress filter rules associated with destination tools so that the destination tools receive all desired packets. provide an example for using multiple ingress filter engines to improve the accuracy of filter statistics and an example for reporting statistics data. provide example embodiments for optimizing superset packet forwarding by considering priority and expected match rates. provide a more particular example for optimization associated with the use of Pass All filters.

It is noted that the discussions below focus on tool optimizer embodiments for networking monitoring systems where packets from network sources are filtered and forwarded to one or more destination tools configured to monitor network activities. However the techniques and capabilities described herein as well as the advantageous features described above can be utilized in other network devices if desired to facilitate the control and management of packet forwarding in network systems. It is further noted that as used in the example embodiments and the discussions below network ports input ports and source ports are each used to refer to ports for example on a tool optimizer or other network device into which packets from network source devices are received. It is further noted that instrument ports output ports tool ports and destination ports are each used to refer to ports for example on a tool optimizer or other network device out of which packets are sent to destination devices. It is also noted that input ports and or the output ports can be configured to operate bi directionally such that the physical ports can operate simultaneously as input ports and as output ports. While the following discussions treat ports as input ports or output ports in order to simplify the discussion a tool optimizer or other network device may have bi directional ports that simultaneously operate as both input ports e.g. configured to receive packets and output ports e.g. configured to output packets .

In the embodiment depicted in network monitoring system includes a tool optimizer connected to network sources destination tools and management platforms. In particular a plurality of network sources A SOURCE B SOURCE . . . C SOURCE N provide data sources for network based information that is to be monitored and or analyzed by a plurality of destination tools A TOOL B TOOL . . . C TOOL M . As described in more detail below the tool optimizer includes dynamic filter processor that operates to forward packets from the data sources to the destination tools based upon filter rules applied to filter engines . Also as described below the tool optimizer allows users to view define and or manage user defined filters and the tool optimizer automatically generates the filter rules based upon these user defined filters for properly forwarding packets based upon the desired forwarding set forth in the user defined filters . Once generated these filter rules are then applied by the dynamic filter processor to filter engines that are used to determine how packets are forwarded by the tool optimizer from the network sources A B . . . C to the destination tools A B . . . C. The tool optimizer also includes a control panel module that allows one or more management platforms A PLATFORM B PLATFORM . . . C PLATFORM L to connect to tool optimizer and to manage the operation of the tool optimizer . For example using one or more of the management platforms users can view create and or manage the filters which indicated how packets are desired to be forwarded from one or more network sources A B . . . C is to one or more destination tools A B . . . C through one or more filters . It is further noted that the tool optimizer can provide filter templates that could utilized and modified by the user if desired rather than requiring a user to create and define all parameters for a desired filter.

It is noted that the tool optimizer can also be connected to the network and the management platforms A B . . . C can access the control panel through a network browser e.g. MICROSOFT Internet Explorer or MOZILLA Firefox . For example the tool optimizer can be configured to include a web server that will automatically download a control panel software application to a management platform when a web browser operating on the management platform connects to the IP address for the tool optimizer . This download can occur the first time the web browser connects and the control panel is then stored locally from that point forward by the management platform. The management platforms A B . . . C can be for example personal computer systems running WINDOWS or LINUX operating systems or some other operating system if desired. The control panel can provide a graphical user interface GUI through which the user can manage and control the tool optimizer . As described further below this GUI can include a path view GUI that allows one or more users to view define and manage packet forwarding paths from network sources to destination tools and allows one or more users to view define and manage filters for these paths using a GUI based filter creation tool. Further the control panel can in part be downloaded to the management platforms A B . . . C for execution thereon such as through JAVA based software code or modules pushed to the management platforms A B . . . C.

It is also noted that many network tools monitor and or analyze data packets that are transmitted over the network. As such the discussion below primarily focuses on packet based communications. These packets will typically include a link layer header L2 a network layer header L3 a transport layer header L4 and a payload. Information pertinent to forwarding the packet such as source ID and destination ID and protocol type is usually found in the packet headers. These packets may also have various other fields and information within them such as fields including error check information virtual local area network VLAN addresses and or other information that may be matched and used for filtering. Further information representing the source device may include items such as the IP address of the source device or the MAC Media Access Control address of the source device. Similarly information representing the destination device may be included within the packet such as the IP address of the destination device. It is seen therefore that a wide variety of source and destination identifying information may be included within the data packets as well as other packet related information along with the data included within the payload of the packet. While the tool optimizer described herein is primarily described with respect to packet based communications and utilizing the information within these packets to forward the packets the tool optimizer can be configured to operate with respect to other types of communication protocols and is not limited to packet based networks.

As depicted the tool optimizer includes packet forwarding circuitry that forwards packets between input ports and output ports based upon rules set up in filter engines such as the ingress filter engines and egress filter engines . In operation packets from N network sources are received at the input ports . These packets are then stored in ingress queues or buffers prior to being processed by ingress filter engines . Based upon ingress filter rules within the ingress filter engines the packet forwarding circuitry forwards packets to the appropriate output ports . However prior to being sent out the output ports the outgoing packets are first stored in egress queues or buffers and then processed by egress filter engines . Based upon egress filter rules within the egress filter engines the egress filter engines forward the appropriate data packets to the output ports . The output ports are connected to M destination tools which ultimately receive the data packets. The dynamic filter processor communicates with the ingress filter engines and egress filter engines to apply the filter rules so that these filter engines will provide the packet forwarding desired by the user. Thus the ingress filter engines and egress filter engines provide a mechanism for the tool optimizer to control how packets are forwarded from the input ports to the output ports according to the filter rules dynamically generated based upon the user defined filters . It is noted that the user can generate and modify the desired packet forwarding through a GUI as described in more detail below. However if desired a command line interface can also be provided to the user for the user to manually create or modify filter rules.

It is noted that the network tool optimizer can be implemented using currently available network packet switch integrated circuits ICs . These integrated circuits include input port circuitry ingress buffer circuitry ingress filter engine circuitry packet switch fabric circuitry egress buffer circuitry egress filter engine circuitry output port circuitry internal processors and or other desired circuitry. Further these integrated circuits can include control and management interfaces through which they can be programmed to provide desired forwarding and control. As such the dynamic filter processor can program the network packet switch integrated circuit with appropriate filter rules . The filter rules that are generated by the dynamic filter processor for example from the user defined filters are then applied to the ingress filter engines and the egress filter engines to control the flow of packets through the tool optimizer . The tool optimizer can also include other circuitry and components as desired. For example tool optimizer can include one or more printed circuit boards PCBs upon which the network packet switch IC is mounted power supply circuitry signal lines coupled to external connections and a variety of external connectors such as Ethernet connectors fiber optic connectors or other connectors as desired. It is further noted that the tool optimizer including the dynamic filter processor can be implemented using one or more processors running software code. For example the network packet switch ICs can be controlled and operated using an internal processor or microcontroller that is programmed to control these integrated circuits to implement desired functionality. It is further noted that software used for the tool optimizer and or its components such as dynamic filter processor and the control panel can be implemented as software embodied in a computer readable medium e.g. memory storage devices FLASH memory DRAM memory reprogrammable storage devices hard drives floppy disks DVDs CD ROMs etc. including instructions that cause computer systems and or processors used by the tool optimizer and or management platforms to perform the processes functions and capabilities described herein.

In one embodiment for the tool optimizer a PCB can be configured to include a processor and memory separate from the network packet switch IC. The dynamic filter processor can then be configured to operate on this separate processor and this separate processor can interface with an application programming interface API provided by the network packet switch vendor for the network packet switch IC. This API provides an abstracted programmatic interface with which to configure filter rules into the network packet switch IC to control how packets are forwarded by the packet switch IC.

As described herein the tool optimizer automatically implements user defined filters as one or more filtering rules that are applied to filter engines within a packet switch IC. Filtering rules represent the internal device specific representations that are used to implement the user defined filters . For current packet switch ICs these device specific representations ultimately require programming or provisioning of filter rules into a filter engine s ternary content addressable memory TCAM . Filter rules are also referred to herein simply as rules. A filter rule consists of a predicate and action s . The predicate is one or more traffic matching criteria that are logically AND ed together i.e. TCAM matching criteria such as VLAN ID or Source IP address . Each predicate compares a key to a value. The key is computed by intelligently selecting fields from packets based on protocol and content of the packet. An action can be defined by the filtering rule and applied when a match occurs. For current TCAMs and packet switch IC filter engines actions typically include where to forward the packet whether to drop the packet tagging the packet with a Class of Service CoS whether to count match statistics and or other desired action s with respect to the packet. As described above current TCAM processing engines do not allow multiple matches per packet and provide for only a single forwarding action based upon the highest priority match.

For the tool optimizer the user defined filters and their connections to input and output ports are configured by users through the management or control panel application provided by the tool optimizer. These user defined filters are then processed by the dynamic filter processor to generate the actual filter rules that are applied to the filter engines e.g. ingress filters and egress filters to cause the packet forwarding circuitry to forward packets as desired by the user defined filters . Users configure traffic matching criteria that specify whether packets such as Ethernet packets should be allowed to pass from the filter input to the filter output. Filter inputs can be connected to one or more input ports source ports and filter outputs can be connected to one or more output ports instrument or tool ports . While the discussions herein focus on receipt filtering and transmission of Ethernet packets it is again noted that other data types and protocols could be used as desired including token ring protocols FDDI protocols other LAN protocols and or other technologies for forwarding packets in networked systems. Advantageously the tool optimizer described herein automatically generates appropriate filter rules for forwarding packets as desired by the user without requiring the user to manually create or manage these filter rules.

In operation the user defined filters set forth how the one or more users desire to conditionally direct traffic from the connected source ports to the connected tool ports. Filters can specify a single traffic matching criteria or they can involve complex Boolean expressions that logically AND and or OR various traffic matching criteria to represent the desired filtering behavior. Further the various criteria in the filter may include ranges and or non contiguous lists of values which effectively allow for a second 2 level of OR ing within the filters. In addition other logic such as NOT operations and or more complicated logic expressions such as source destination pairs e.g. source OR destination involving IP address MAC address or TCP port and bidirectional flows e.g. source A AND destination B OR source B AND destination A could also be represented in user defined filters if desired. A filter specifies which fields in a packet must match which values for an action to be taken. Packets that match a filter can have one or more actions applied to them such as to drop the packets i.e. discard them or forward them to one or more connected output ports.

A filter s traffic matching criteria can be configured as desired. For example matching criteria can be configured to include values in any ISO International Standards Organization layer 2 L2 through layer 7 L7 header value or packet content. It is noted that packet based communications are often discussed in terms of seven communication layers under the ISO model application layer L7 presentation layer L6 session layer L5 transport layer L4 network layer L3 data link layer L2 and physical layer L1 . Examples of traffic matching filter criteria for ISO packet based communications include but are not limited to 

As described herein the tool optimizer can provide any desired forwarding of packets from network sources to destination tools based upon filter parameters and paths selected by a user for example through one or more management platforms connected to the tool optimizer . As depicted in for example the tool optimizer is providing one to one pathways one to many pathways and many to one pathways. In particular packets from the TAP network source A are being forwarded by the tool optimizer along paths A B and C to destination tools A B and C. Packets from the SPAN port network source A is being forwarded by tool optimizer along path to compliance auditor systems . And packets from SPAN port network source B TAP network source B and TAP network source C are being forwarded along path to VOIP monitor tool . Although not depicted many to many pathways could also be used. It is also noted that path to data recorder is currently not being sent any packets.

As described above when the number of network sources being monitored and or the number of network tools increase the complexity of managing the flow of packets for these monitoring activities can increase geometrically. One particular problem with this complexity is the difficulty associated with establishing the filter engine rules for properly controlling how packets are forwarded from one or more network sources to one or more destination tools. Another problem with this complexity is the further difficulty associated with establishing these filter engine rules when users desire to have filters with different overlapping forwarding actions for a given source packet. In operation the network tool optimizer provides a graphical user interface GUI and automatic filter rule generation that helps users such as IT information technology managers for enterprises to overcome these complexities thereby facilitating the monitoring of network activities.

As described above the tool optimizer includes a control panel that provides a graphical user interface GUI through which the user can manage and control the tool optimizer . For example the control panel can provide access by management platforms to a GUI that allows users to select pathways from network sources to destination tools through filters and that allows users to select filter parameters and relational logic for the filters. It is noted that although a GUI implementation is discussed below for allowing users to define filters an abstract and high level command line interface could also be provided to allow users to enter the filters if desired.

Advantageously a user can create a new path within the embodiment by selecting a network source and dragging a path line to an existing filter and or to a destination tool. Similarly a user can create a new path within the embodiment by selecting a destination tool and dragging a path line to an existing filter and or to a network source. The dashed line represents a new path that a user has desired to create between the first network source SOURCE A and the second destination tool TOOL B. Once this path has been created a filter GUI can be displayed to the user to allow the user to select filter criteria that determines what packets are to be forwarded from the selected network source to the selected destination tool. provides an example block diagram for a filter GUI.

It is further noted that if an existing filter is desired to be used the user can create a path from a network source and or a destination tool to the existing filter. For example in the embodiment of if a user desires to forward packets from the first network source SOURCE A using the first filter FILTER the user can do so by simply creating a path connecting the two. Similarly if a user desires for packets from the first filter FILTER to also be provided to the second destination tool TOOL the user can do so by simply created a path connecting the two. Further the user can add new network sources filters and destination tools through a toolbar and or menus or controls provided in the path view GUI for use by the user. These alternative menus can speed the creation of paths between ports and filters by allowing users to create multiple paths in a single GUI operation instead of dragging each path line individually.

Advantageously once a filter has been created and or modified by the user through the GUI the tool optimizer automatically generates the appropriate filter rules for the filter engines e.g. ingress filter engines and egress filter engines and the packet forwarding circuitry within the tool optimizer to forward packets according to the user selections. Thus the user can create new paths and associated filters as well as manage those paths and filters once created through a graphical user interface GUI without having to generate the underlying filter rules thereby greatly simplifying the management of the packet forwarding desired for a network monitoring system. Significantly the network tool optimizer as described herein does not require the user to manually enter command line statements to implement the filters or forwarding paths desired by the user. Rather the dynamic filter processor automatically generates the needed filter rules based upon the user s selections made through the GUI. Further as described in more detail below with respect to overlapping user defined filters where complexities expand geometrically the dynamic filter processor can utilize superset packet forwarding to automatically generate filter rules to properly handle the overlapping filters. In short the GUI represents an abstract view of complex filter parameters that are then reduced by the dynamic filter processor to specific rules for the hardware elements.

The toolbar provides one click selection functions that can be used to display various system wide views. For example a diagram view can be selected using the first command button DIAGRAM which displays the pathway diagram area . A filter view can be selected using the second command button FILTERS . A ports view can be selected using the third command button PORTS . A users view can be selected using the fourth command button USERS . And a system view can be selected using the fifth command button SYSTEM . Other diagram toolbar options and commands can also be provided as desired. In it is noted that the diagram view has been selected so that the pathway diagram area is being displayed within window .

As depicted diagram area includes six network ports three filters and three tool ports. Each port and filter supports a freeform text name field along with a freeform description field. The name field is displayed in the diagram area next to the port filter icon. For instance P s name has been configured to be Span . The description will display in a tooltip when the cursor is hovered above the icon. Ports will also display a system defined ID in addition to the configurable name field such as P P to identify front panel ports PA PA for XG Module A ports and PB PB for XG Module B ports. It is also noted that custom port icons may be configured for each port using either built in images or user supplied images providing a more meaningful network representation.

As depicted tool port A represents port eight P of the tool optimizer that is connected to an application monitor tool operating a 1 G. Tool port A is receiving packets that match filter A s criteria which has been named Application Monitor Filter and is provisioned to forward all packets matching one or more configured IP PROTOCOL PROT criteria as indicated by the badge located next to the filter icon. More details can be obtained by opening the filter GUI example shown in or by hovering the cursor over the filter icon to view a tooltip. Filter A is in turn receiving packets from five different network ports port one P connected to a SPAN port SPAN operating at 1 G port two P connected to a SPAN port SPAN operating at 1 G port three P connected to a network tap TAP operating at 1 G port four P connected to a SPAN port SPAN operating at 1 G and port five P connected to a SPAN port SPAN operating at 1 G. Tool port B represents port seventeen P of the tool optimizer that is connected to an intrusion protection systems IPS operating a 1 G.

Tool port B is receiving packets that match filter B s criteria which has been named Security Filter and is provisioned to forward packets matching the configured virtual LAN VLAN criteria as indicated by the badge located next to the filter icon. Filter B is in turn receiving packets from two different network ports port four P connected to a SPAN port SPAN operating at 1 G and port five P connected to a SPAN port SPAN operating at 1 G. Tool port C represents port twenty P of the tool optimizer that is connected to a sniffer tool operating a 1 G.

Tool port C is receiving packets that match filter C s criteria which has been named Troubleshooting Filter and is provisioned to forward all packets matching the configured Layer 4 Destination Port criteria L4DPT and or the configured Destination IPv4 address criteria DIPV4 . Filter C is in turn receiving packets from XG Module A port PA that is passing packets from a core SPAN port SPAN 10 G CORE operating at 10 G.

It is noted that the diagram elements within diagram area provide designations or badges that help the user know details about the elements with the diagram. For example designations for the port to which the network source and or destination tool are connected is included with the boxes that represent these connections e.g. P P P P P PA P P P and PA . Designations for the speed at which the network source and or destination tool is operating are also provided e.g. 1 G 10 G . In addition for the filters designations are provided that indicate what filter parameters have been selected for that filter e.g. PROT VLAN L4DPT DIPV4 . Further error state or alert indicators can also be provided such as the exclamation point in a shield symbol located within the box representing the sniffer tool C. This symbol represents that packets have dropped on this tool port. Other symbols and designations could also be used as desired. For example a badge could also be added to indicate how multiple filter parameters are related e.g. filter C could include a badge indicating whether the two parameters L4DPT and DIPV4 are ANDed or ORed together .

The window also includes a number of toolbars icons buttons and commands. For example typical window items seen in graphical windowing environments e.g. MICROSOFT or APPLE windowing operating system environments such as a title bar a menu bar and a toolbar . The title bar includes the name of the window Control Panel an indication of who is connected Connected to localhost as admin and minimize maximum close icons at the far right. The menu bar includes selectable menus such as File Edit View and Help. As would be understood selection of these menu items would lead to other selectable options within the window. The toolbar includes common command buttons for Cut Paste and Delete. The fourth command button from the left is the edit properties tool which opens a GUI to allow viewing or editing the selected port or filter. Command button A represents a tool that allows a user to add filters within the pathway diagram area . The command button B represents a tool that allows a user to add users. Other commands and functions as well as additional toolbars can also be provided as desired.

In the window of short cut function key items are also set forth at the bottom the window in portion . As depicted function key 2 F2 operates to disable mouse over pathway highlighting. Function key 3 F3 operates to zoom in. Function key 4 F4 operates to zoom out. Function key 5 F5 operates to organize the diagram. Function key 6 F6 operates to focus on selected item s and their paths. Function key 11 F11 operates to show disabled ports. And function key 12 F12 operates to bring statistics to the front of the GUI. Other functions can also be provided through function keys on a keyboard as desired.

It is noted that further details can also provided through the GUI if desired. For example port configuration e.g. port speed connector type etc. and filter configuration information e.g. filter mode filter criteria etc. can also be selected and displayed in window . Operational state information can also be displayed such as whether each port s link is up down negotiated ports speed whether packets have been dropped thresholds exceeded and or other operational state related information. Port configurations can also be viewed and modified. For example a port itself can be configured to provide pre ingress or egress filtering using a view of the port configurations. Further port connections can be displayed and or modified within this view of the port configuration. Port statistics and filter statistics can also be selected and viewed if desired. In addition if a user right clicks a mouse while pointing to a representation within path view context sensitive selection menus can be provided to allow various operations by the user including modifying configurations or mode viewing or modifying connections displaying additional information or any other desired context sensitive action.

The view can also have the further ability to allow a user to focus on a desired aspect of the forwarding paths. For example a user can choose to focus on a particular filter network source and or destination tool. Once making this focus selection the view is changed so that items not associated with the selected items are not displayed. For example if a user selects to focus on a particular filter only network sources and destination tools connected to the filter are then displayed to the user in the window . Other focus selections may also be provided for example a user can be shown only paths that are they are able to modify based upon their security level in the enterprise. This capability to focus the view can greatly simplify the information being viewed so that a user can more easily see the information the user is primarily interested in at the time.

In addition to the view focus other view simplifying operations can also be provided. For example an auto organize feature can be provided that allows a user to select criteria upon which the path view is organized. For instance the view can be re organized to minimize the number of crossed connections in the view or can be organized alphabetically according to the physical port number or logical part name. Other desired organizational parameters may also be provided and selected so that the view is automatically re organized based upon these user selections to present the view in manner desired by the user.

As described above the tool optimizer can be accessed by multiple users at the same time through management platforms . As such it is possible that multiple users will be viewing or modifying the same forwarding path information at the same time. When two or more users are logged in and accessing a path view at the same time the tool optimizer operates to make each user aware of activities of the other that could affect the view. For example the tool optimizer can be configured to keep users from changing the same objects at the same time. Alternatively if it is desired to allow simultaneous modifications by multiple users a user can be notified or warned when another user changes an object that a user is currently accessing. Further changes made by one user can be automatically broadcast to other users so that their views of the system can be accurate and up to date. Other features to handle multi user access may also be added if desired. By providing these multi user control features a visual multi user drag and drop GUI can be provided in which simultaneous users can create and modify pathways that connect source ports to destination ports and define filters for these pathways without interfering with each other.

The filter GUI can provide any desired information concerning the filter. For example window in can include a number of toolbars icons buttons and commands that relate to the filter. For example window includes a title bar selectable tabs and window control buttons . The title bar can provide the name of the window Edit Filter and identify which filter is being edited Filter . The selectable tabs include a tab GENERAL for displaying modifying general information about the filter a tab CRITERIA for displaying modifying filter criteria and a tab CONNECTIONS for displaying modifying the network ports and tool ports connected to the filter. Other tabs and information could be provided as desired.

Advantageously as described herein the criteria tab CRITERIA depicted in allows for a user to select filter criteria at a high level without requiring the user to program the appropriate underlying filter rules to forward packets according to the selected criteria. As depicted in the embodiment of the criteria tab includes an area where a filter mode is selected an area where a count type is selected an area where filter criteria are selected and an area where a summary of selected criteria and logic relationships are displayed. Other or different areas could also be provided if desired.

The filter mode area allows for a user to select a mode for the filter such as whether the filter will pass by criteria pass all or drop all. If pass all is selected then all the packets received by the filter from the network ports will be passed along to the tool ports. If drop all is selected none of the packets received by the filter from the network ports will be passed along to the tool ports. If pass by criteria is selected then the filter criteria area will become active and allow the user to select the filter criteria to be applied by the filter in forwarding packets.

The count type area allows the user to select how statistics are gathered with respect to this filter. If packets is selected then the filter counts matches to the filter criteria in terms of packets that match the filter criteria. If bytes is selected then the filter counts matches to the filter criteria in terms of bytes that match the filter criteria. If desired the tool optimizer can also be configured to simultaneously count bytes and packets. If this latter configuration is used then there is no need for the user to select whether bytes or packets are counted as they would both be counted simultaneously by the tool optimizer. Alternatively a further selection can be provided to the user to allow the user to select counting matches in both bytes and packets.

The criteria area allows the user to select filter criteria from among available filter criteria. For example as depicted the filter criteria includes layer 2 L2 criteria layer 3 L3 criteria and layer 4 L4 criteria . The L2 criteria can include items such as the source and or destination MAC address the VLAN address and or the Ethertype of the transmitting network source attached to a network port connected to the filter. The L3 criteria can include items such as the source and or destination IP address e.g. using Internet Protocol version 4 IPv4 or Internet Protocol version 6 IPv6 the IP protocol and or DSCP TOS differentiated services code point type of service field information for the transmitting network source attached to a network port connected to the filter. And the L4 criteria can include items such as the source and or destination layer four port address L4 PORT and or TCP control flags for the transmitting network source attached to a network port connected to the filter. Depending upon the network source and other selected criteria one or more of the available criteria within area may be grayed out to represent that they are not currently selectable.

The selected criteria and logic area provides a summary of the criteria selected to the user and allows the user to relate these selected criteria using Boolean logic expressions. In particular each selected criteria can be listed and can be separately selectable within the area . For example line as depicted provides a summary of a VLAN criteria selection which is to pass VLAN addresses or or or having a priority level of 001. Line represents an IP Protocol criteria selection which is to pass packets using IGP internet gateway protocol . And line represents a DSCP TOS selection criteria which is to pass packets having a service type of 00000001. Once selected these criteria can be modified or removed by selecting the MODIFY or REMOVE buttons at the right side of selected criteria area . It is further noted that other techniques for displaying this criteria could also be used as desired.

Advantageously the area also provides the user a mechanism to define Boolean logic expressions that determine how the selected criteria are treated together by the filter. For example match All or Any selection line allows for a selection by the user to determine whether the filter will pass packets that match all or any of the specified criteria. This logic essentially allows the user to select whether the criteria are AND ed together or OR ed together to determine what packets are passed along to the destination tool. When criteria values are configured with ranges or disjoint lists of values these values are OR ed together as shown with respect to line . Thus in addition to allowing Boolean expressions to relate different criteria types Boolean expressions are also allowed to relate criteria values selected for a given criteria type. More complex Boolean logic relating the selected criteria could also be provided if desired.

Significantly once this criteria is created or modified the dynamic filter processor within the tool optimizer operates to automatically create and or modify the filter rules so that the filter engines within the tool optimizer will properly forward packets from the network sources to the destination tools based upon the selected criteria. This automatic rule generation and modification greatly improves on prior solutions that would require a user to enter appropriate commands in a command line interface CLI to create and or modify filter rules to appropriately forward packets.

Looking first to graphical representation represents a user defined filter. Within this graphical representation filter parameter information filter icon and filter name are provided. As depicted this filter parameter information includes designations or badges representing various criteria selections for the filter. The ALL designation represents that the filter has been configured to only pass packets matching all the selected criteria. The IP4SA designation represents that the filter has been configured to pass packets from sources matching IP4 source address criteria. The IP4DA designation represents that the filter has been configured to send packets to destinations matching IP4 destination address criteria. And the L4DPT designation represents that the filter has been configured to pass packets having port destinations matching L4 destination port criteria. The icon is an icon indicating that the object is a filter. And the name is Filter Example. 

Advantageously as described above the network tool optimizer automatically generates the filter rules needed for the filter engines to carry out the filter selections made by the user. In particular the tool optimizer analyzes the filter criteria and criteria values along with the Boolean expressions that relate these together and then generates the filters rules to implement this higher level expression of the desired filter. In this way the tool optimizer allows the user to define filters at a high level using Boolean logic expressions and does not require the user to manually write more complicated filter rules or single line commands to represent the desired filter operation.

It is noted that the examples in represent relatively simple desired filters. There is only one filter that has been configured to have source destination and port match criteria. When users desire to have many filters and or filters that include overlapping forwarding actions the complexity of handling these filters increases significantly.

Two filters are said to overlap if it is possible for a packet to match both filters. In other words two filters overlap if they are not mutually exclusive. Take for example two filters A and B. Because the filters are independent whether or not a given packet matches filter A is independent of whether or not it matches filter B. There are four separate match cases for a given packet P 

If the fourth case above is possible then the filters are said to overlap. If the fourth case is not possible then the filters are non overlapping.

These overlaps are often difficult for a user to handle accurately. This difficulty is in part due to the type of filter memories used in current packet switch integrated circuits ICs . As described above the prevalent form of filter memory used in packet switch ICs is ternary content addressable memory TCAM . TCAMs operate at high speed and perform lookups in constant time but are much more complex than ordinary static or dynamic memories. Consequently TCAMs are usually small having only hundreds or thousands of entries as opposed to the millions of entries in standard static or dynamic memories. Larger TCAM structures can be formed by placing multiple smaller TCAMs in parallel. The space limitation in TCAMs makes it important to use the entries in a TCAM efficiently. TCAMs are also priority ordered memories in packet switch ICs. As such only one TCAM entry will determine how a packet is forwarded. The highest priority matching entry in the TCAM wins if there is more than one match for a packet. Further existing TCAMs provide for logical AND ing of match criteria for a single entry in the TCAM. The highest priority matching entry can apply one or more actions to the packet such as dropping the packet DROP passing the packet to output ports PASS assigning a priority to the packet and or other desired actions.

Many of the commercially available packet switch ICs are ASICs application specific integrated circuits or FPGA field programmable gate array devices and many of these devices support multiple parallel TCAMs at various stages of the data pipeline e.g. at ingress egress etc . Each TCAM operates independently with its own search mechanism e.g. key lookup that identifies matches creates actions and updates counters. When multiple parallel TCAM engines are supported each engine has a priority associated with it relative to the other engines. If more than one TCAM matches on the same packet actions are prioritized and an effort is made to take all possible actions. If a conflict occurs the action from the higher priority TCAM is taken. Different forwarding actions for the same packet always conflict so the end result is that the TCAM engines allow for only a single forwarding action per packet. Counter updates are an example of actions that do not conflict. As such in some commercial packet switch devices a single packet will cause counters to increment on multiple parallel TCAM entries.

As TCAMs are operated keys are matched against classification rules stored in entries of a TCAM s classification database. With ingress TCAMs the ingress port is typically included as part of the key. With egress TCAMs the ingress and egress ports are typically included as part of the key. As stated above packet switch devices typically include ISO layer 2 L2 through layer 4 L4 header fields or content as part of the key. A TCAM allows data search words entries comprised of ternary digits each of which can assume the values 0 1 and don t care x . Ternary digits can be decomposed into two binary bits one for value and one for mask. TCAM rule entry R can be represented as V M where V is the value and M is the mask. A mask bit of 1 means that the corresponding value bit matters for comparison purposes and a mask bit of 0 means that the corresponding value bit is a don t care for comparison purposes. Packet P matches rule R if each of P s K key fields matches the corresponding field of R. If a rule s digits are all don t care then it matches all packets. TCAMs take a W bit key and perform a lookup for the first matching entry.

The TCAM s priority ordered memory is well suited for matching packets when there are no overlapping filters because in that case only one forwarding action should be taken. However the TCAM s single forwarding action per packet behavior does not handle filter overlaps well because filter overlaps require multiple forwarding actions per packet. In particular filter rules for overlapping filters such as those described with respect to will have different forwarding actions for matched packets. Because filter engines within packet switch ICs use priority ordered TCAMs the highest priority filter rule encountered that matches a packet will determine how that packet is forwarded. As such different forwarding actions will mean that certain packets will not be forwarded as desired depending upon the priority of the filter rules.

With respect to discussed above it is noted that filters A and B are potentially overlapping filters because they potentially provide different forwarding actions for packets from the same network source. As depicted filter A and filter B both receive packets from sources D and E and they desire to send matching packets to different destinations. In particular filter A desires to send packets from sources D and E that match its filter parameters to destination port A and filter B desires to send packets from sources D and E that match its filter parameters to destination port B. Filters A and B therefore represent potentially overlapping filters because a packet from source D or source E that match both filter A and B would need to be forwarded to destination ports A and B to satisfy filters A and B.

In addition to this problem with the processing overlapping filters and different forwarding actions the complexity of handling filter overlaps increases rapidly as the number of fields and criteria values increase. In particular as the number of traffic matching criteria fields and the number of values specified in each criteria gets larger the number of filter overlaps explodes rapidly per the following formula.

Just to point out a few examples from the data above for three criteria fields with five disjoint values for each criteria there are 200 possible overlaps. If the number of disjoint values for each criteria is doubled to ten then there are 1300 possible overlaps. Increase the number of criteria fields to five with ten disjoint values per field and the possible overlaps jumps to 1 610 000 possible overlaps. As is evident from this potential overlap explosion as the number of filters criteria fields and disjoint values rises the complexity of identifying overlaps and handling overlaps increases significantly.

To solve this problem with filter overlaps the tool optimizer disclosed herein can utilize a packet processing system whereby the packet forwarding behavior is governed by matching packets in parallel against multiple user specified packet filtering criteria and then by performing forwarding actions associated with all such matching filter criteria. As described herein this multi action packet forwarding behavior is different from traditional packet switches and routers as well as existing tool aggregation devices that provide single forwarding action operation based upon currently available packet switching ICs. The multi action packet forwarding behavior described herein is particularly advantageous for network monitoring applications to facilitate sharing access to limited monitoring resources in a simple and straightforward way. However it is noted that this multi action packet forwarding could also be utilized in other applications and environments if desired.

Multi action packet forwarding can be achieved for example by generating filter rules for filter engines within existing TCAM based network packet switch ICs so that multi action packet forwarding is provided without losing packets. Examples for such a solution are described in more detail below with respect to below.

In addition multi action packet forwarding can be achieved more directly using a hardware system with multiple parallel filter engines and a forwarding action combiner so that each of the filter engines are configured to contribute to the forwarding actions for any given packet. This parallel filtering technique followed by an action combiner automatically handles situations where filters overlap. An example embodiment for such a solution is now described in more detail with respect to .

By combining the forwarding actions provided by all of the Z match engines the forwarding action combiner allows for each of these forwarding actions to be acted upon. In other words multiple different forwarding actions can be provided for any given incoming source packet. This multi action packet forwarding is in contrast to prior solutions where priority ordered TCAMs and action resolution engines are design to allow only a single forwarding action per packet. Thus in these prior systems only the forwarding action for the highest priority match gets acted upon by the system and different forwarding actions associated with any lower priority match do not get acted upon. It is further noted that the match engines themselves may each be configured internally to allow multiple different forwarding actions per match so that multiple different forwarding actions can be provided to the forwarding action combiner for each packet from each match engine. Alternatively the match engines may be configured to allow only a single forwarding action per packet so that the forwarding action combiner receives only one forwarding action for each packet from any particular match engine. Other variations and techniques could also be provided if desired while still taking advantage of the multi action packet forwarding described herein.

Action superset egress ASE processing as described herein provides an advantageous technique for addressing filter overlaps and the complexity created by larger numbers of fields and criteria values. As with the multi action filter engine the ASE processing matches packets in parallel against multiple user specified packet filtering criteria and performs the forwarding actions associated with all such matching filter criteria by using packet superset forwarding. The ASE processing uses two TCAM filtering stages with multiple parallel TCAMs at the ingress stage to implement the packet filtering rules required to represent a user defined filter. This two stage approach handles overlaps correctly and efficiently. In particular the ASE processing places filter rules for overlapping user defined filters into unique ingress TCAM engines. The ASE processing then forwards the ingress filter matches from each TCAM to all egress ports that are directly connected to the user defined filter. The ASE processing also forwards the ingress filter matches from each TCAM to the egress ports connected to overlapping filters. This additional forwarding action causes packets to be processed by egress filter rules associated with the superset of output ports connected to the overlapping filters. It is noted however that when a packet is configured to be forwarded by multiple ingress filter engines to the same egress port the packet may be forwarded only once so as not to overload the egress buffer. This packet superset forwarding ensures that packets matching higher priority TCAM filter rules are still delivered to the egress filter rules associated with lower priority overlapping TCAM filter rules given that commercially available integrated circuits for packet switching and routing are only able to implement a single forwarding action per packet even in parallel TCAM architectures. As such the ASE processing ensures that packets matching multiple filters are forwarded to the appropriate egress ports and the port s associated egress filters make the final determination of what packets are actually forwarded on to the destination tool. While superset forwarding increases the data traffic to the egress filter engines relative to forwarding only to directly connected output ports the ASE processing allows for significantly faster processing and accurate handling of overlapping filters and allows for automated handling of overlapping filters created and or modified by users through an interface as described above.

In applying the ASE processing the dynamic filter processor first determines whether or not there are overlapping filters that have been selected or defined by the user. By performing logical operations on the filtering criteria it is possible for the tool optimizer and the dynamic filter processor to determine whether or not an overlap is possible between any two filters and thereby determine whether an overlap condition exists. One technique for making this overlap determination is to first check the filters to see if they both examine one or more common fields within the same source packet. Then within the set of common fields the matching criteria can be compared for overlapping conditions. For example if filters A and B both have a selected criteria for the destination address of the packet then the destination address is a common field. Within this common field if a filter A and filter B identify overlapping match conditions then the filters overlap. Using a more specific example assume that filter A specifies in part a matching criteria where the destination address is in a range from and assume that filter B specifies in part a matching criteria where the destination address is in the range . If so then these two match criteria for filter A and filter B overlap because packets with destination addresses in the range would match the criteria for the common destination address field in both filters A and B. In short when comparing required filter match criteria for two filters A and B if there exists at least one common field for which the required matching criteria is non overlapping then filters A and B are non overlapping. Otherwise the filters overlap. It is noted that other techniques could also be applied if desired to determine potentially overlapping filters.

Once overlapping filters are identified the dynamic filter processor can utilize ASE processing to effectively handle the overlapping filters. The ASE processing implements filters rules using a combination of ingress filter engines and egress filter engines to effectively handle overlapping filters. In effect ASE converts overlapping user defined filters into filter rules useable with single forwarding action per packet switching ICs by specifying ingress match actions that forward to a superset of egress filter rules involved in implementing the overlapping user defined filters. The dynamic filter processor can also be configured not to modify matching criteria for pre existing filters when overlapping filters are added or removed by the user which reduces or eliminates the possibility of missing packet matches while reconfiguring filters. The dynamic filter processor simply re evaluates the overlaps and updates filter forwarding actions to account for the revised overlaps which can be configured in commercially available packet switching routing ICs hitlessly without dropping packets for current traffic . Then the ASE processing uses egress filter engines to pass only those packets actually desired at the destination tool. Significantly the dynamic filter processor automatically generates the appropriate ingress and egress filter rules to implement packet forwarding based upon selections made by a user without requiring the user to manually determine overlaps and filter rule configurations.

Looking now to a block diagram is provided for using dynamically created ingress filter rules and egress filter rules and superset packet forwarding to handle overlapping user defined filters. It is noted that the same desired filters discussed with respect to are being applied in to forward packets from source to destination tool TOOL destination tool TOOL and destination tool TOOL . According to the ASE processing filters rules are set up in the ingress filter engines so that filter packet matches are sent through packet forwarding circuitry to the superset of all egress ports connected to overlapping filters. This superset packet forwarding allows the egress filter rules for each of the egress ports to further filter all possible desired packets for a particular egress destination port. Thus the egress filter rules and are used to pass only those packets actually desired at the destination tools and .

It is noted that both ingress and egress filter rules contain criteria reflecting the corresponding user defined filter. Ingress filter rule criteria contain source port information and have actions identifying destination ports. Egress filter rule criteria contain information identifying one or more source port s and one or more destination port s . The ingress filter engines forward packets to egress or destination ports identified in the ingress filter rules and these packets are stored in egress buffers associated with the egress destination ports. The egress filter engines then further filter these forwarded packets according to the egress filter rules. As such egress filter rules associated with the destination port for the forwarded superset packet will potentially filter that packet thereby potentially passing any superset packet along to the destination tool. Thus egress filter rules relating to destination ports tools associated with overlapping filters will further filter the superset packet and potentially pass along that superset packet to the desired destination tool while egress filter rules not relating to overlapping filters will not pass the superset packet. It is further noted that egress filter engines as with ingress filter engines can have a filter priority with respect to individual egress filter rules and with respect to egress filter engines where there are multiple parallel egress filter engines.

In solid lines represent packet forwarding to the destination ports directly connected to the filter rule for which the packets are being forwarding. The dashed lines represent packet forwarding to additional destination ports that are directly connected to filter rules that overlap with the filter rules for which packets are being forwarded. Thus the dashed lines represent additional packet forwarding due to filter overlaps and identify the egress filter rules which have the possibility of matching. It should be again noted that packets are forwarded to destination ports and egress filter rules then further filter these packets before they are actually passed on to the destination tools. The egress filter rule criteria include destination port information to ensure that only desired packets will match and be passed along. These same solid line and dashed line representations are also used in A D and A C for indicating packet forwarding to directly connected destination ports and packet forwarding to additional destination ports due to filter overlaps.

As shown in ingress filter engines have been configured with filter rules and representing three overlapping filters VLAN VLAN TCP and egress filter engines have been configured with filter rules and to determine output packets VLAN VLAN TCP actually sent to the destination tools and . Rule is set up in the ingress filter engines to forward VLAN packets through the packet forwarding circuitry to an egress destination port associated with destination tool . In addition rule is also configured to forward matching packets to egress destination ports associated with destination tools and in order to account for filter overlaps. Rule is set up in the ingress filter engines to forward VLAN packets through the packet forwarding circuitry to an egress destination port associated with destination tool . In addition rule is also configured to forward matching packets to egress destination ports associated with destination tools and in order to account for filter overlaps. Rule is set up in the ingress filter engines to forward TCP packets through the packet forwarding circuitry to an egress destination port associated with destination tool . In addition rule is also configured to forward matching packets to egress destination ports associated with destination tools and in order to account for filter overlaps. As described above the ingress filter rules and will be processed in priority order from high HI to low LOW . As such packets matched and forwarded by one rule are not available for forwarding by a later rule according to standard TCAM operation. However because the ingress filter rules and have been set up to provide packet forwarding to supersets of egress ports all possible packets desired to be received by destination tools and are nevertheless received by egress ports for these destination tools so that egress filters and can further filter those superset packets to determine which packets are actually sent out to destination tools and .

As stated above egress filter engines have been configured with filter rules and that represent three desired output criteria VLAN VLAN TCP for the destination tools. Egress filter rule further filters packets from rules and and passes only VLAN packets from the appropriate source port to the destination tool TOOL . Egress filter rule further filters packets from rules and and passes only VLAN packets from the appropriate source port to the second tool TOOL . And egress filter rule further filters packets from rules and and passes only TCP packets from the appropriate source port to the third destination tool TOOL .

The examples thus far have assumed that filter criteria values e.g. disjoint lists ranges or combinations of the two such as VLAN can be expressed in a single rule. However packet switching routing ICs are currently limited in terms of the complexity of values their filter engines can accept in a single rule. Commercially available packet switching routing integrated circuits include hardware support for specifying filter rules using binary value mask pairs to define criteria values. As a consequence filters can be broken into multiple TCAM filter rules each of which representing a portion of the range or list such as defining rules for VLAN and VLAN instead of a single rule for VLAN . With this level of hardware support using binary value mask pairs to specify multiple ports source or destination and or multiple filter criteria values can reduce the amount of filter memory needed to specify filter rules as compared to specifying a single rule for each value in a range.

Contiguous ranges can be expanded automatically by the dynamic filter processor into the minimal number of value masks that represent the range. Likewise disjoint lists of values can be collapsed automatically into the fewest set of value masks to represent the list. For instance for the following disjoint lists of port numbers the following binary value masks can be set 

The ASE processing described herein can be configured to support whatever level of hardware support is available in the packet switch IC to represent contiguous ranges and non contiguous or disjoint lists within filter rules including user defined groups whereby a limited number of ranges or lists are supported for a limited number of criteria fields. In cases where support is limited to value mask pairs the dynamic filter processor can be configured to automatically decompose a user defined filter into the minimal number of value mask paired rules needed to represent the filter as illustrated by the example set forth in .

Similarly rule that forwards VLAN packets has been decomposed into three value mask rules 1 VLAN value mask rule A represented by value mask 011 2 VLAN value mask rule B represented by value mask 10x and 3 VLAN value mask rule C represented by value mask . Because only the VLAN value mask rule A could overlap with rule that forwards VLAN packets only packets matching the VLAN value mask rule A are also forwarded to the egress destination port corresponding to destination tool TOOL according to the ASE superset packet forwarding technique noting that egress filter rules are associated with egress port tool . Because the VLAN value mask rule A the VLAN value mask rule B and the VLAN value mask rule C could overlap with rule that forwards TCP packets packets matching each of these value masks rules are also forwarded to the egress destination port corresponding to destination tool TOOL according to the ASE superset packet forwarding technique noting that egress filter rules are associated with the egress port tool .

With respect to rule because all packets using TCP could also match rule that forwards VLAN packets or rule that forwards VLAN packets all packets matching rule are forwarded to the egress destination ports corresponding to destination tools TOOL and TOOL according to the ASE superset packet forwarding technique noting that egress filter rules are associated with egress port tool and that egress filter rules are associated with egress port tool .

As with the ingress filter rules the egress filter rules have also been decomposed into value mask based rules in . Rule that passes only VLAN packets to destination tool has been decomposed into two value mask based rules 1 VLAN value mask rule A represented by value mask 001 and 2 VLAN value mask rule B represented by value mask 01x. Rule that forwards VLAN packets has been decomposed into three value mask rules 1 VLAN value mask rule A represented by value mask 011 2 VLAN value mask rule B represented by value mask 10x and 3 VLAN value mask rule C represented by value mask . Once decomposed the specific egress filter rules associated with potential overlaps further filter packets subject to the superset packet forwarding and allow matching packets to pass on to their connected tool ports. As such VLAN 011 value mask rule A further filters the superset packets from the VLAN 01x value mask rule allowing matching packets to pass. VLAN 01x value mask rule B further filters the superset packets from the VLAN 011 value mask rule A allowing matching packets to pass. Rule further filters superset packets from all of the ingress filter rules i.e. rules A B A B C allowing matching packets to pass.

As shown in because the ASE processing can determine overlaps at the decomposed rule granularity several of the decomposed rules will no longer overlap as compared to the non decomposed filter rules of . Each decomposed ingress filter rule is still shown as directly connected to the corresponding egress destination port and associated egress filter rule. The overlaps however are calculated at the decomposed rule level. Thus the only overlaps between VLAN filter and VLAN filter are for VLAN and VLAN decomposed rules as described above. It is also noted that the decomposed rules that no longer overlap can be located in lower priority filter memory than the decomposed rules that do overlap if desired. It is also noted that in cases where hardware supports specification of user friendly ranges and lists within a single rule there may situations when it is beneficial to decompose the filters into more rule granularity in order to favor fewer overlaps even though this optimization would require more filter rules.

As stated above action superset egress ASE processing converts parallel filter rules into a form useable with single forwarding action per packet switching ICs by forwarding ingress rule matches to a superset of egress filter rules involved in overlapping user defined filters. As such the egress filter rules receive all possible packets to be forwarded to the destination tool. The egress filter rules then drop those packets that are not wanted at the destination tool and pass only those desired to be received by the destination tools. This ASE processing greatly simplifies the rules that must be set up in the filter engines improves the speed with which users are able to initially configure the tool optimizer and overcomes problems associated with overlapping filters implemented using standard TCAMs in switching integrated circuits such as those described above.

More detailed examples of ASE processing are now described with respect to Example 1 and Example 2 below. In these example embodiments the ASE filter processing utilizes filters that either pass their matches e.g. pass all or pass by criteria or drop their matches. In addition for the embodiments described the ASE filter processing uses ingress and egress TCAM filtering stages to implement the packet filtering rules required to represent a user defined filter. As stated above the ASE processing automatically decomposes the user defined filters into the required filtering rules. The ASE processing then provisions the ingress and egress TCAM settings as necessary to implement the filtering rules regardless of whether the rules overlap with other filter rules. In this way the ASE processing automatically ensures that all overlaps are handled correctly and that the rules are implemented hitlessly i.e. without affecting other user traffic so that every destination tool can receive the packets it is supposed to receive. Further as set forth below by intelligently managing how rules are implemented in the ingress filter engines the ingress filter engines can provide accurate packet and byte match statistics for the filter for example by aggregating individual filter rule match counts into an overall set of filter statistics.

As stated above the embodiments described herein primarily focus on packet communications. These packets may include L2 L4 fields. The filter rules implemented herein include explicit match criteria on L2 L4 fields within a packet. In addition every filter rule can also include a field to associate it with a single input port in order to substantially reduce the possibility of overlapping rules. If a filter has two input ports connected to it then each rule for the filter appears twice in the ingress TCAM once for each input port.

In operation the ASE processing uses ingress TCAM engines to pre filter packets matching any of the filtering rules that result from the user defined filters. Packets that match the ingress rules are forwarded to every destination port DP that is directly connected to the filter and every DP that is connected to an overlapping rule. The ASE processing then configures the egress TCAM engines to allow only those packets matching the user defined filtering criteria to egress to the instrument port. In other words the egress filter rules are configured to discard all packets that do not match any of the user defined filtering criteria associated with that instrument port. In the embodiment depicted herein the ASE processing supports pass by criteria i.e. pass upon filter match pass all and drop all filters. While the examples below do not use drop by criteria rules i.e. deny rules other implementations could be made that utilize drop by criteria rules.

The examples below also assume that the packet switch ICs include multiple independent TCAM engines operating in parallel at each filtering stage and that each TCAM engine has an internal priority relative to the other TCAM engines. Each parallel engine matches packets to rules independently of the other engines and maintains its own match statistics. The highest priority TCAM engine match overrides any other matches with regard to packet forwarding. The ASE processing described herein utilizes this ingress egress TCAM architecture to simplify handling of overlapping filters and can also utilize the parallel TCAM processing to improve performance of filter statistics.

When there are multiple parallel TCAM matching engines for ingress filtering that parallelism can be exploited to ensure that packet match statistics byte and packet counts are not corrupted by filter overlaps. With ASE processing filter rules are provisioned into an ingress engine that does not already contain an overlapping rule available space permitting. This is possible as long as the maximum number of overlaps for any filter is less than the number of ingress TCAM engines and there is enough available space to provision the rule in at least one TCAM engine that does not contain an overlapping rule. As long as no overlapping filter rules are provisioned in the same TCAM engine the statistics are accurate. These accurate statistics are significant in that most users desire accurate statistics and accurate statistics are difficult to obtain with overlapping rules. This use of multiple ingress engines and placing non overlapping filter rules in these ingress engines to improve filter statistics is described in more detail with respect to below.

Ordering of rules for a particular filter within an ingress engine is typically unimportant as long as the rules in an engine are configured not to overlap. However if a rule does need to be added to an engine that contains an overlapping rule then all existing rules in the engine can first be compressed to help ensure that the new rule is added into lower priority memory than the existing overlapping rules. This preserves the accuracy of existing rules and ensures that any inaccuracy is associated with the new filter rule. Further a Drop All rule can be placed as the last entry in the lowest priority ingress TCAM engine to ensure that packets that do not match any rule are dropped. This Drop All rule will only be matched if no other rules match. In other words all packets that are not desired to be forwarded to a destination port are dropped by the ingress filter engines. As described below engine will be considered the lowest priority engine. Thus being the last entry in ingress engine makes it the lowest priority entry within all ingress engines.

Egress engine rules allow filter matches to pass through. Egress rules preferably include input port information to prevent false matches. Egress rules also include the destination port address. The input port and destination port can use value masks or port groups if supported by the packet switch integrated circuit to specify multiple ports which will utilize rules more efficiently. Egress TCAM rule ordering is unimportant except that a Drop All rule is again typically included as the last entry in the lowest priority egress engine e.g. engine to ensure that traffic that does not match any rule is dropped.

As described herein the dynamic filter processor provides hitless operation with respect to modifications and changes to filter configurations. Hitless operation ensures that packets are not incorrectly dropped or passed through when configuration changes and filter re compilations occur. Significantly modify delete operations on a filter do not affect any other filter s traffic. However modifying a filter can be optionally configured to cause the statistics for that filter to be reset.

The ASE processing is now further described with respect to the two example overlap scenarios below. The first scenario addresses a simple overlap scenario with two input ports. The second scenario addresses a more complex overlap scenario with one input port.

In the following simple overlap scenario a user has connected two overlapping filters to Source Port SP . Source port SP is connected to one of the filters. Each filter has a list of outgoing ports to send multicast its matches. The user wants both filters to send every matching packet to the intended tool ports. The user has set up filtering criteria concerning VLAN addresses and source IP SIP addresses to particular outgoing destination ports. The destination ports are represented by DP and destination ports on another tool optimizer are represented by B DP e.g. BDP represents port on box . As noted herein one tool optimizer box can be connected to another. For this example the user has set up the following desired packet forwarding paths 

It is noted that the first two connections involve overlapping filters because SP packets having VLAN or addresses can also have a source IP address within the range . .030. .

The ASE processing described herein therefore recognizes these filtering criteria as representing two overlapping SP filters and one SP non overlapping filter. The VLAN criteria is implemented as four ingress filter rules two for each source port. Including the source port in individual rules limits the scope of the overlaps this case it prevents SP packets matching VLAN or from being directed to DP and DP. If there are parallel ingress engines the ASE processing will also attempt to co locate both Connection filter rules in any one of the ingress TCAM engines because those filter rules do not overlap. To help ensure accurate filter statistics where there are parallel ingress engines the rules for the VLAN filter for Connection and the rules for the SIP filter for Connection are provisioned into different TCAM engines because they will potentially overlap. In this way packets matching a SP rule get directed by the ingress TCAM to only those outgoing ports that are in actual overlapping rules.

With respect to the egress filter engines the egress filter rules can be provisioned into any egress TCAM engine. Each egress filter rule however will include a SP and DP.

The following represents an example of rules that can be set up to handle this first example scenario. The first table provides example ingress filter engine settings. The second table provides example egress filter engine settings. It is further noted that there are parallel ingress processing engines. It is also noted that a designation indicates that all values match the criteria.

Example 1 assumes that engine is the lowest priority engine. Being the last entry in ingress engine makes the DROP ALL rule the lowest priority entry within all ingress engines. It is also noted that the rules in the tables above are pass by criteria rules except for the DROP ALL rule in the ingress filter engine and the egress filter engine. It is further noted that the statistics from each of SP SP filter rules can be aggregated for use in displaying filter statistics.

If desired the egress filter rules can be optimized if possible by consolidating SPs and DPs using either value masks or port groups. The example below shows an egress rule reduction by consolidating SP and SP rules into a single rule. The DPs in this example could not be consolidated in this example.

In the following complex overlap scenario a user has connected five filters to an incoming port SP and each filter has a list of outgoing destination ports to send multicast its matches. The user wants all the filters to send every matching packet to the intended instrument ports. As with the first example above the desired packet forwarding utilizes VLAN and source IP SIP traffic matching criteria. More particularly for this example the user has set up the following desired packet forwarding 

The ASE processing described herein automatically accounts for these overlaps and sets up the needed forwarding actions using ingress egress engines to direct all desired packets to the destination ports. Because all of the VLAN criteria above overlap with the SIP criteria matches from the SIP filter rules are sent to all VLAN criteria destination ports and vice versa. In addition because VLAN and VLAN filtering criteria overlap their matches are also sent to each other s destination ports. No other filter criteria overlap so no other forwarding takes place.

The ASE processing automatically determines which of an incoming port s rules actually overlap. In order to maintain accurate statistics as described further below the ASE processing provisions each of the incoming port s rules SPin this case into an ingress TCAM engine that does not contain overlapping rules. Packets matching a SPrule get directed by the ingress TCAM to every destination port DP that is directly connected to the filter rule and every DP that is connected to an overlapping filter rule. If an SPrule does not overlap its DPs are not included in the action superset of packets forwarded to potentially overlapping DPs.

The following represents an example of rules that can be set up to handle this second example scenario. The first table provides example ingress filter engine settings. The second table provides example egress filter engine settings. It is further noted that in the example below there are parallel ingress processing engines.

As with Example 1 above the egress rules can be simplified using value masks or port groups if supported by the packet switch IC to specify source and destination ports if desired.

Users expect that accurate statistics will be maintained for each user defined filter including counts for the number of data packets and or the total number of bytes that match each filter s criteria. As noted earlier each user defined filter may be defined using Boolean logic to specify complex filter match criteria which may include ranges and or disjoint lists of values resulting in an implementation that requires many filter engine rules each rule generating its own statistics. As part of the processing described herein rule statistics can be automatically aggregated from all of the underlying filter rule match counts in order to present meaningful filter statistics to the user.

One further problem that can occur with overlapping filters however is that these match statistics can be inaccurate. For example looking at if rules for each filter are located in the same ingress filter engine and rules and have higher priority statistics associated with rule that forwards TCP packets would likely be inaccurate because rule does not receive any packets associated with VLAN .

As described herein this problem with inaccurate statistics caused by filter overlaps can be resolved by taking advantage of multiple different ingress filter engines that are available in packet switch integrated circuits. Each engine matches independently of the other parallel engines and maintains its own match statistics. When multiple parallel TCAM matching engines are available for ingress filtering this parallelism can be used to help ensure that packet match statistics e.g. byte and or packet counts are not corrupted by rule overlaps. In particular filter rules for a user defined filter are provisioned into an ingress engine that does not contain filter rules for an overlapping filter available space permitting. Space will be available as long as the maximum number of filter overlaps for any filter is less than the number of parallel ingress TCAM engines and there is enough available space to provision the filter in at least one engine that does not contain an overlapping rule. As long as no overlapping filter rules are provisioned in the same TCAM engine the statistics are accurate. This ability to provide accurate filter statistics and do so through automatic generation of filter rules and automatic application of those filter rules to appropriate ingress filter engines even if there are overlapping user defined filters and filter rules is a significant advantage that is not provided by prior systems.

Advantageously the dynamic filter processor described herein allocates rules to each filter engine such that no overlapping rules are contained in a single engine. Because each engine receives the data packets from source and each engine does not include overlapping rules the statistics data output by the different ingress filter engines ENGINE ENGINE . . . ENGINE n to the statistics engine do not suffer from the problem of mis reported packet matches. In other words the packets that match each rule within each filter engine will be accurately reported to the statistics engine . The tool optimizer described herein therefore can provide accurate statistics for user defined filters and achieve precision in these statistics that have not achieved by prior solutions.

The counts area provides statistics information concerning the number of bytes and packets that have been inspected by the filter and that have matched the filter criteria. The rates percentages area provide statistics information for inspected bits second matched bits second and percentage bytes matched. The rates percentages area also provide statistics information for inspected packets second matched packets second and percentage packets matched. In addition for each of these items the rates percentages section provides current information average information peak information and time of peak information. The refresh area provides an indication of the time of the displayed statistics and the display refresh interval. In addition PAUSE and RESUME command buttons can be provided within the refresh area . The PAUSE button pauses statistics collection and the RESUME button resumes statistics collection once paused. The reset area provides an indication of the amount of time since the statistics were last reset and who caused the last reset. In addition RESET and RESET OPEN command buttons can be included within the reset area . The RESET command button resets statistics for the currently active window and the RESET OPEN button resets statistics for all open statistics windows e.g. when a user has selected to view statistics for multiple filters and ports and has left the statistics windows open . The RESET OPEN command button is useful because a user may have multiple windows open at the same time and the user may wish to reset all of them simultaneously. The window may also have a CLOSE command button that closes the currently active window and a CLOSE ALL command button that closes all open statistics windows.

It is noted that inspected packets bits and or bytes refers to the number of packets bits or bytes that are input into a user defined filter. Matched packets bits and or bytes refers to the number of packets bits or bytes that match the user defined filter. Typically the matched packets will be fewer than the inspected packets although the inspected matched numbers provided in are the same. The numbers provided in the rates percentages area for inspected packets bytes represent an aggregation of the packets bytes that were received by source ports connected to the filter minus any packets that were discarded by earlier stage source port filters. The current information within rates percentages area represent the number of packets bits inspected matched in the last second. Average rate is the average number of packets bits inspected each second since stats were last reset. Counts provided within the counts area represent the sum of the count statistics for the number of packets bytes inspected or matched since statistics were last reset.

In currently available packet switch ICs the egress buffer situated prior to the egress filter cannot process traffic that exceeds the line rate of the egress port without overflowing and dropping packets. The ASE processing architecture forwards packets matching a filter rule on to all directly connected destination ports. ASE will also forward matches from overlapping filter rules to this destination even if the filter rule is not directly connected to this destination port. This potentially increases the amount of traffic to the buffer s associated with the egress filter rules supplying packets to the destination ports as compared to alternative single stage architectures that do not account for overlapping filters. If this combined traffic rate exceeds the destination port line rate then the egress buffer will overflow and packets will be dropped. This prevents the possibility of egress filter engines receiving packets at a rate that exceeds line rate. Since ASE processing uses egress filter rules to discard overlapping filter matches that do not also match the directly connected filters the usable bandwidth of the egress port may be less than line rate. As more traffic is discarded by the egress filter rule less usable transmit bandwidth is available on that egress port. For instance if because of the overlapping filters the egress filter rule is overloaded and discards on average half of the packets it receives then the instrument port will on average only transmit at half of its configured line rate. And with current packet switch ICs there is no way to discern whether packets dropped at the egress buffer would have matched an egress filter rule or not.

A solution to help alleviate the buffer overflow issue and potentially increase usable transmit bandwidth of egress ports is to reduce the number of packets that are being forwarded to the egress filter rules. For example priority optimized filter rule placement and packet rate optimized filter rule placement can be utilized as described below to help alleviate the number of packets being directed to egress filter rules due to potential overlaps. provide examples for such solutions that utilize the same filters as discussed with respect to .

Priority optimized ASE techniques help alleviate the buffer overflow issue and increase usable transmit bandwidth of egress ports. Priority optimized ASE techniques significantly reduce the number of packets that are being forwarded by taking advantage of commercial packet switch integrated circuits with multiple independent ingress filtering engines operating in parallel. In these devices as described above each filtering engine has an internal priority relative to the others. Each parallel engine matches independently of the other engines and maintains its own match statistics. The highest priority TCAM engine match overrides any other matches. The priority optimization algorithm relies on this parallel TCAM architecture.

More particularly for the embodiment it is assumed that the average avg match rate for packets from rule is 100 mega bits per second as indicated by line . The dashed lines from rule to rules and would have the same line match rate. The average match rate for packets from rule is 30 mega bits per second as indicated by line and the dashed line from rule to rule would have the same line rate. Finally the average rate for packets from rule is 5 mega bits per second as indicated by line . Under these assumptions it is seen that the filter rule placed in the highest priority ingress filter engine has the highest match rate which corresponds to the most superset packets being forwarding i.e. dashed lines .

More particularly for the embodiment the filter rules have been placed in ingress filter engines based upon the expected line match rates for the filter matches. In other words the lowest expected line match rates are defined in the highest priority ingress filter engines. As compared to it is seen that the priority of the rules have been reversed. As such it is the rule with the lowest line match rate that is placed in the highest priority engine ENGINE and as indicated by the dashed lines forwards its matching packets to two other egress ports for tools and i.e. associated with filter rules and in addition to the egress port for tool i.e. associated with rule . The rule with the middle line rate is placed in the middle priority engine ENGINE and as indicated by the dashed line forwards its matching packets to one other egress port for tool i.e. associated with filter rule in addition to the egress port for tool i.e. associated with rule . And rule with the highest line rate is placed in the lowest priority engine ENGINE and as indicated by no dashed lines does not forward its matching packets to any other egress ports other than the egress port for tool i.e. associated with filter rule . As can be seen from the comparison of to the total rate of superset dashed line packets being forwarded has on balance been significantly reduced i.e. TOOL egress buffer received up to 100 30 130 Mb sec in and receives 0 Mb sec in TOOL egress buffer received up to 100 Mb sec in and only receives up to 5 Mb sec in TOOL egress buffer received 0 Mb sec in and receives up to an additional 5 30 35 Mb sec in . It is noted that the maximum rates assume no actual overlapping packets so actual rates would be less if there were overlaps.

It is noted that the tool optimizer allows for user control of the relative filter engine priority of each overlapping filter. This priority is assigned on a source port basis so a filter that is connected to multiple source ports can have a relative filter engine priority assigned based on each source port. The user interface displays historical average and peak filter match traffic rates to provide a basis for the user to decide on relative priorities. This level of control is typically not needed except for scenarios where egress buffer overflows are occurring or the user simply wants to configure additional overflow headroom. Manual control allows the user to fine tune these situations to minimize overlap traffic forwarding and maximize usable tool port bandwidth similar to the optimizations described above. In many cases establishing this relative location amongst overlapping filters frees enough bandwidth at egress ports that the user no longer needs to be concerned about tool ports dropping packets due to overlap forwarding. It is noted that there may be brief packet loss while re establishing relative filter locations depending on the underlying hardware capability. It is further noted that control can be further optimized through the use of wizards that automatically select optimal relative ordering of overlapping filters based on historical average or peak match rates.

Another solution to help alleviate the buffer overflow issue and potentially increase usable transmit bandwidth of egress ports is to reduce the number of packets that are being forwarded by certain rules. For example Pass All filters can lead to egress buffer overload conditions. Therefore by optimizing how rules for Pass All filters are handled egress buffer overload conditions can be reduced.

Pass All filters overlap with every other filter that is connected to the same source port. As such the ASE processing architecture described above would normally forward all packets from the Pass All s source port to every destination port connected to this source port through any filter. Thus Pass All filters are the most egregious type of filter in the ASE processing architecture in terms of overloading egress buffers and potentially causing packet drops. The same effect is potentially there for other filter rules that overlap but pass by criteria filter rules may not overlap with every SP rule and when they do they only pass their matches to egress ports as opposed to the Pass All passing every packet. It is Pass All filters therefore that potentially cause the most overload risk.

Pass All filter optimization as described herein can be provided to enhance the ASE processing so that rules for Pass All filters no longer send their packets to overlapping rule egress ports. This optimization can provide a significant improvement by reducing egress buffer overload due to rule overlap and may allow for more fully loaded tool ports without packet drops. For example sniffers protocol analyzers are often initially connected to Pass All filters. As such Pass All filters are a common use case that can be improved through the Pass All optimization described herein.

The following Pass All optimization scenario compares a situation in which a rule for a Pass All filter is allowed to forward all potentially overlapping packets to destination ports DPs and a situation in which Pass All optimization has been applied. It is noted that much less traffic gets sent to the DP and DP egress buffers below when Pass All optimization is applied.

When Pass All optimization is applied by the ASE processing one of the lowest priority entries within the lowest priority ingress engine e.g. ingress TCAM engine is reserved for each port in the tool optimizer. For instance if the system supports ports then the lowest TCAM entries in the lowest priority ingress engine are reserved for 28 source port rules. Each of these source port rules is provisioned by default to Drop All ensuring that any source port packet that does not match another filter rule will be dropped. However when a user defined Pass All filter is connected to a source port then that port s entry is changed from a Drop All to a Pass All rule that redirects its matches to the destination ports DPs connected to the Pass All filter. This deviates from standard ASE processing above in that the ASE processing does not implement a rule that directs packets from the source port SP connected to the Pass All rule to every DP that is connected to overlapping filters. As such with Pass All optimization potential filter overlaps are ignored for the Pass All rule.

All other filters connected to the source port can be processed using the standard ASE processing described above. Packets that match ingress filter rules for these other filters are forwarded to every destination port DP that is directly connected to the filter and to every DP that is connected to an overlapping filter including the Pass All filter s destination ports. The Pass All filter optimization is handled as a special case in TCAM taking advantage of the fact that the packets forwarded from the higher priority overlapping Pass by Criteria filter rules are already contained in the Pass All filter matches so there is no need to forward them to the Pass All filter s directly connected destination port. This Pass All optimization is not utilized for other types of overlapping filters rules.

In the following example all three filter connections overlap. Using the Pass All optimization the Pass All filter rule does not send its matches to DP and DP egress filter rules. The following tables show how the Pass All optimization works. More particularly for this example the user has set up the following desired packet forwarding 

The following represents an example of rules that can be set up to handle this third example scenario. The first table provides example ingress filter engine settings for no optimization. The second table provides example ingress filter settings with Pass All optimization.

For Pass All optimization it is noted that rather than a DROP ALL rule that applies to all source ports as set up in the first table no optimization a DROP ALL rule is set up in Engine for each source port in the second table Pass All optimization . As such SP SP SP . . . SP n are all initially set up with a DROP ALL rule in the lowest ingress engine. Because the user has selected a PASS ALL rule for SP this DROP ALL rule for SP in Engine has been changed to a PASS ALL rule to the selected destination port DP. For the others SP n the DROP ALL rules are left in place.

As can be seen from comparing the two ingress tables above for Example 3 the optimization prevents all SP packets matching the PASS ALL filter rule from being directed to DP and DP in addition to DP. Rather only SP packets matching TCP and VLAN which potentially overlap are directed to DP DP and DP. It is further noted that accurate ingress filter statistics are provided by placing overlapping rules within separate ingress engines as described above.

Some of the limitations inherent in the ASE processing as described above can be overcome by additional circuitry or processing provided within packet switch ICs for example to pre process packets before they enter the packet forwarding circuitry and or to post process packets after they leave the packet forwarding circuitry.

One packet switch IC optimization technique is to pre process data packets to remove the payload in the data packet prior to forwarding the data packet. Because many network performance monitoring and security applications only look at packet headers the payload of the packet is not required. An intelligent pre processing circuit can be configured to take advantage of this by removing the payload from some or all of the packets before these packets enter the packet forwarding circuitry. Of course in addition to removing the payload the pre processing circuitry can also be configured to recalculate error correction features such as the CRC 32 Ethernet frame checksum included in Ethernet data packets. Because the packet headers usually represent a small fraction of the overall data in the packet this payload removal technique provides the significant advantage of greatly reducing the bandwidth of data that the packet forwarding circuitry and downstream tools must process. One disadvantage of this technique is that it removes the payload so that some monitoring tools such as intrusion detection systems and virus scanners could not be used once the payload is removed. As such payload removal could be done selectively based on the criteria selected within the pre processing circuit. Any payload reduction however would direct less traffic to the egress buffer thereby reducing loading at the egress buffer. Further if the length of the original packet is important but the payload is not the payload can be removed and the original packet length can be added to the packet. For example the original packet length can be appended just before the CRC 32 checksum so that an egress post processing step could pad the egress packets back up the proper size. This would allow a downstream monitoring tool to see the correct number of bytes while still reducing the processing load.

Another packet switch optimization technique is to provide post processing rate adaptation. Because the instrument or tool port is often configured to operate at a lower rate than the maximum possible rate the tool optimizer may drop packets that would not be dropped if the tool port were configured to operate at a higher rate. To alleviate this problem rate adaptation can be included in a post processing stage whereby the ports on the packet switch always operate at the highest configurable data rate after forwarding by the packet switch. This adaptation of the data rate to its highest level helps to ensures that egress port congestion caused by the processing algorithm such as the ASE processing described above is minimized. For example additional circuitry could be provided to receive the higher data rate packets and to remove the idle time between packets. This additional circuitry could also provide a larger egress buffer than is available in commercially available packet switching integrated circuits today. If desired this additional circuitry could take the form of external circuitry connected to the tool port of the tool optimizer and also to the destination tool. In other words this external circuitry provides an adapter that can receive data at a higher rate from the tool optimizer buffer this data and then provide it to the tool optimizer at a lower rate. This rate adaptation circuitry thereby allows the tool optimizer ports to operate at a higher rate when needed to reduce the chance of buffer overflow in the egress buffers of the packet switch integrated circuit.

A further packet switch optimization technique to help alleviate the egress buffer overflow issue is to allow the user to assign CoS Class of Service to each ingress filter engine s forwarded packets. This CoS labeling would allow a prioritization of which packets should be discarded first should an egress buffer experience overflow. Currently available packet switch integrated circuits include the capability to assign all packets forwarded by an ingress filter engine i.e. all filter matches to a particular CoS. Commercial packet switch circuits however do not currently have the capability to assign a unique CoS to filter matches based on the destination port to which they are being forwarded. This latter capability would be very useful within the ASE processing above because filter rules forwarding to directly connected destination ports could then assign those packets to a high priority CoS to ensure they were dropped only when the sum of all directly attached filter matches exceeded the port s line rate. Similarly overlapping filter matches forwarded to destination ports that were not directly connected could be assigned a user defined CoS priority to ensure those packets were dropped first in case the egress buffer overflowed.

Further modifications and alternative embodiments of this invention will be apparent to those skilled in the art in view of this description. It will be recognized therefore that the present invention is not limited by these example arrangements. Accordingly this description is to be construed as illustrative only and is for the purpose of teaching those skilled in the art the manner of carrying out the invention. It is to be understood that the forms of the invention herein shown and described are to be taken as the presently preferred embodiments. Various changes may be made in the implementations and architectures. For example equivalent elements may be substituted for those illustrated and described herein and certain features of the invention may be utilized independently of the use of other features all as would be apparent to one skilled in the art after having the benefit of this description of the invention.

