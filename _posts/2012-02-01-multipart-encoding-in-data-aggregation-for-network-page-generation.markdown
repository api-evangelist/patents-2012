---

title: Multipart encoding in data aggregation for network page generation
abstract: Disclosed are various embodiments relating to data aggregation in network page generation, where the data aggregation employs multipart encoding. A request for a network page is obtained from a client. The network page is associated with a network site hosted by a hosting provider on behalf of a customer. Customer data is obtained from one or more data sources in response to the request. Each data source provides multiple data items using a multipart encoding. Page generation code supplied by the customer is executed to generate at least a portion of the network page in response to obtaining all of a subset of the customer data which is used by the page generation code. The page generation code is able to access the subset of the customer data as predefined variables.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08832225&OS=08832225&RS=08832225
owner: Amazon Technologies, Inc.
number: 08832225
owner_city: Reno
owner_country: US
publication_date: 20120201
---
Network pages are becoming increasingly complex. While in the past network pages may have been static files network pages now are typically dynamically generated by complex applications using data obtained from many different sources. As a non limiting example a network page for an online retailer may include information obtained from a product catalog application a user information application a shopping cart application and or other sources.

The present disclosure relates to data aggregation for the purpose of network page generation and more specifically the use of multipart encoding in the data aggregation. A multitude of data items may need to be fetched from different sources in order to generate a network page dynamically. In various embodiments all of the data used in generating a network page portion is aggregated in advance of executing code that generates that network page portion. Advance data aggregation may be a requirement in embodiments involving hosted network sites that execute customer provided network page generation code.

Latency is an important concern for network page generation as perceived sluggishness in rendering may lead to user frustration. To this end it is desirable to minimize latency in data aggregation. Parallelization is one strategy to reduce latency and data may be fetched from multiple sources in parallel. However each of the sources may take time to produce all of the requested data. It may be the case that a portion of a network page uses some but not all of the data produced by the source for use in the network page. Making multiple requests to a data source for specific items may result in unacceptable overhead.

Various embodiments of the present disclosure employ multipart encoding for data obtained from data sources to reduce latency in data aggregation. Multipart encoding allows the data aggregation logic to parse the results of a data request into multiple parts. When the data used by particular page generation code has been obtained execution of the particular page generation code can begin even if the data source is still streaming data to the data aggregation logic for use in generating the entirety of the network page. Consequently generation of the network page may commence earlier and generated portions may be sent earlier to a client for rendering. By using a multipart encoded data stream one connection to the data source may be employed for data aggregation for a network page thereby minimizing connection related overhead. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing environment in data communication with one or more clients by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. The computing environment may be operated by a hosting provider to host network sites for various customers.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed by the computing environment for example include a plurality of data sources . . . N a data aggregation service a network page generation application a network page server application a network site configuration application and other applications services processes systems engines or functionality not discussed in detail herein. The data sources are executed to provide various data used in generating network pages for network sites of customers of the hosting provider. Where the customers are merchants the data provided by the data sources may relate to electronic commerce data such as for example item catalog data item suggestions data shopping cart data checkout data order data and so on. In one embodiment the data sources may comprise web services. In another embodiment the data sources may comprise files or other forms of data stores.

Each of the data sources is configured to provide data to the data aggregation service by way of a respective multipart data stream . . . N. The multipart data stream facilitates sending data items or chunks of data which are separated by a delimiter to the data aggregation service . The multipart data stream may use a multipart encoding such as that used in multipurpose Internet mail extensions MIME or another multipart encoding. The data aggregation service is able to recover the individual data items using the delimiter and is able to begin processing of the data items without necessarily receiving all of the data items from a particular data source .

The data aggregation service is executed to aggregate data from the data sources for use in generation of network pages . The data aggregation service may employ parallel fetching to reduce latency when data is aggregated from multiple data sources . The data aggregation service recovers aggregated data items from the multipart data streams . When all of the aggregated data items are received which are used in generating a particular portion of the network page generation of that particular portion of the network page may be initiated even if all of the aggregated data items used in generating the network page have not yet been received. Thus generation of at least a portion of the network page may commence using a data item from a multipart data stream even though data is still being received through the multipart data stream for use in generating the network page .

The network page generation application is executed to generate the network pages in response to page requests obtained from clients . The network pages may correspond to web pages gopher pages mobile application screens and or other forms of network content. Where the customer is a merchant the network pages may correspond to home pages catalog pages item detail pages shopping cart pages checkout pages order confirmation pages and so on. Such network pages may facilitate selecting items for purchase rental download lease or other form of consumption. In addition where the customer is a merchant the network page generation application may include or be in communication with an electronic commerce system that performs various backend functions in order to facilitate the online purchase of items.

The network page generation application may execute page generation code in order to generate the network pages . The page generation code may correspond to a default version supplied by the hosting provider or may correspond to a customized version supplied by the customer. In some cases the page generation code may be transformed or compiled from one code format to another and or may be interpreted. As a non limiting example the page generation code may correspond to JavaServer Pages JSPs which may be compiled into Java servlets which in turn may be compiled into bytecode which may be executable by the network page generation application . To this end the network page generation application may include a servlet container such as Apache Tomcat or another servlet container. Multiple sets of page generation code may be employed for generating various portions of the network page . The portions may correspond to hypertext markup language HTML code extensible markup language XML code and or other data. In one embodiment various portions of the network page may be assigned to predefined locations or slots in the network page .

The network page generation application may be configured to obtain the aggregated data items from the data aggregation service as data . . . N and to provide the data to the page generation code for example as a set of predefined variables or by another approach. The aggregated data items may be aggregated in response to the page request . In one embodiment the data aggregation service may stream the aggregated data items as they are received to the network page generation application as the data in a multipart data stream . The network page generation application may act as a sandbox for the page generation code to enforce restrictions on application programming interface API calls access to the data source and or other resources in the computing environment .

The network page server application is configured to obtain the page requests from the client over the network to generate network pages in response to the page requests using the network page generation application and to return the network pages to the client by way of the network . The network page server application may correspond to a commercially available hypertext transfer protocol HTTP server such as for example Apache HTTP Server Apache Tomcat Microsoft Internet Information Services IIS and or other servers.

The network site configuration application is executed to facilitate customer configuration of network sites. To this end the network site configuration application may enable uploading and configuration of the page generation code configuration of various parameters associated with the operation of the network site order fulfillment management item catalog management and or other functionality. The network site configuration application may implement an HTTP server a web based distributed authoring and versioning WebDAV server a file transfer protocol FTP server and or other servers.

The data stored in the data store includes for example network site data network site configuration data customized page generation code default page generation code a page generation resource consumption log page generation restrictions and potentially other data. The network site data corresponds to data used in the generation of the network pages for the hosted network sites of the merchants or other customers. Such data may include for example templates HTML XML cascading style sheets CSS text images audio video animations and or other data.

The network site configuration data may store parameters and or other data for controlling the operation and appearance of the hosted network site. Such data may control various electronic commerce functionality such as for example item catalogs item taxonomies item searching item recommendations shopping carts checkout order fulfillment and or other functionality. The customized page generation code corresponds to page generation code which is created or customized by merchants or other customers. The default page generation code may correspond to a default set of page generation code for a merchant or other customer to use for a base functionality for a network site. The default page generation code may generate network pages having for example a default appearance and behavior for a generic electronic commerce site.

The page generation resource consumption log may indicate the computing resources consumed by the page generation code and or the network page generation application in generating network pages for customer network sites. The page generation restrictions may configure various restrictions to be placed on the page generation code by the network page generation application . As a non limiting example where the page generation code corresponds to JSP code the network page generation application may restrict the JSP code from including scriptlets and or various API calls. Various functionality may be whitelisted or blacklisted as the case may be. Such restrictions may be configured by way of parameters in the page generation restrictions .

The client is representative of a plurality of client devices that may be coupled to the network . The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client may include a display . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc.

The client may be configured to execute various applications such as a browser and or other applications. The browser may be executed in a client for example to access and render network pages served up by the computing environment and or other servers thereby generating a rendered network page on the display . The client may be configured to execute applications beyond the browser such as for example code development applications file transfer applications mobile applications email applications instant message applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin a merchant or other customer of a hosting provider associated with the computing environment configures a network site to be hosted through the computing environment . The network site may have a common domain that is shared by multiple customers of the hosting provider or the network site may correspond to a unique domain for each customer. The merchant or other customer may adopt default page generation code for various network pages accessible through the network site. Alternatively or additionally the merchant or other customer may create customized page generation code for generating some or all of the network pages accessible through the network site.

The merchant or other customer may interact with the network site configuration application to customize or make changes to the network site. In various cases the customer may edit the page generation code directly through the network site configuration application or the customer may upload replacement page generation code . Through this system customers are able to control generation of network pages for their network sites despite using a hosted infrastructure and potentially a hosted electronic commerce platform. It is noted that multiple sets or files of page generation code may be used to generate respective portions of a single network page . It may be the case that a particular set or file of page generation code configures the generation of the entirety of the network page by designating predefined locations for portions to be generated by other sets or files of page generation code .

The page generation code is able to access the predefined variables generated by the data aggregation service . In some cases the page generation code may declare various data that it accesses which is then aggregated by the data aggregation service . In other cases the data aggregation service may provide a standard set of data from the data sources . The set of data may depend on the type of network page e.g. whether the network page is a checkout page catalog page order confirmation page and so on. In one example the predefined variables may be associated with the hosted electronic commerce platform provided by the hosting provider.

The predefined variables may be provided to the page generation code by way of variables such as implicit variables or other variables that are available in the scope of the page generation code . The page generation code may be configured to use all of the predefined variables or a subset of the predefined variables . The page generation code may be restricted from accessing the data sources directly. In some embodiments the page generation code is not executed until all of the aggregated data items corresponding to the predefined variables have been obtained and are available.

In operation the client sends a page request to the network page server application for a network page from a network site of a customer. The network site is hosted on behalf of the customer by the hosting provider who operates the computing environment . Where the customer is a merchant the hosting provider may operate a hosted electronic commerce platform in conjunction with the computing environment . The page request is provided to the network page generation application which then obtains the aggregated data items from the data aggregation service . The aggregation may be performed by the data aggregation service automatically in response to the page request or in advance of the page request . The data aggregation service fetches the aggregated data items from one or more data sources using one or more multipart data streams .

The page generation code for the requested network page is executed by the network page generation application . The network page generation application facilitates access to the predefined variables by the page generation code . The page generation code generates the network page or portions of the network page and the network page server application serves up the network page to the client in response to the page request . Serving of the network page to the client may begin even while portions of the network page remain to be generated.

In some embodiments the page generation code is restricted from accessing one or more of the data sources . The customer supplied page generation code may be isolated from one or more of the data sources for purposes of complying with PCI DSS and or other security standards. Consequently the data from the data sources may be accessible only as predefined variables provided using the aggregated data items from the data aggregation service . It is noted that the data aggregation service may obtain the aggregated data items in response to the page request in response to other events or at other times as desired.

The page generation code may be analyzed for compliance with one or more policies according to the page generation restrictions when initially configured or compiled and or at runtime. Such policies may include acceptable content of the network page API usage usage of scriptlets or other disallowed language features and so on. If the page generation code is determined to be non compliant the page generation code may be unexecuted terminated if already executing replaced with default page generation code or another action may be taken.

In one embodiment the page generation code may be executed in an elastic computing resource which can expand and contract with respect to computing capacity in response to demand for the capacity by the page generation code . Such usage may be monitored or metered for billing and or other purposes. To this end the elastic computing resource usage may be recorded in the page generation resource consumption log . This recognizes that page generation code for some customers may be more computing resource intensive than page generation code for other customers. Accordingly an elastic amount of resources may be provided such that the customer is billed for what is used in terms of machine instances memory processor time disk space and or other resources that are allocated for the customer.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the network site configuration application according to the embodiments discussed in connection with . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network site configuration application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the network site configuration application obtains page generation code from a customer whose network site is hosted by the hosting provider who operates the computing environment . The network site configuration application may be configured to authenticate a client associated with the customer. In box the network site configuration application determines whether the page generation code is valid. If the page generation code is not valid the network site configuration application rejects the page generation code in box . An error may be presented to the customer. Thereafter the portion of the network site configuration application ends.

If the page generation code is valid the network site configuration application proceeds from box to box . Even assuming that the page generation code is determined to be valid by the network site configuration application validity checks may still need to be performed by the network page generation application at runtime. In box the network site configuration application compiles the page generation code . For example the network site configuration application may compile the page generation code from a JSP into a servlet. The resulting servlet code may also be compiled into bytecode for execution by a Java Virtual Machine JVM or directly by a processor circuit of the computing environment .

In box the network site configuration application configures the network page generation application to execute the compiled page generation code for one or more network pages for the network site of the customer. In box the network site configuration application may store configuration data that configures the data aggregation service to provide a set of predefined variables to the page generation code . Thereafter the portion of the network site configuration application ends.

Continuing on to shown is a flowchart that provides one example of the operation of a portion of the network page generation application according to the embodiments discussed in connection with . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the network page generation application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the network page generation application obtains a page request from the client by way of a network page server application . The page request indicates a network page from a network site of a customer. The network site is hosted by the hosting provider who operates the computing environment . In box the network page generation application obtains or fetches page generation code corresponding to the requested network page .

In box the network page generation application aggregates various data pertaining to the customer from one or more data sources by way of the data aggregation service . To this end a multipart data stream may be established by the data aggregation service with each of the data sources . The data aggregation service parses the data items as they are received to produce the aggregated data items . In one embodiment the network page generation application may obtain the aggregated data items from the data aggregation service by way of a multipart data stream .

In box the network page generation application determines whether all of a subset of customer data has been obtained where the subset of customer data corresponds to those aggregated data items which are to be provided to a particular set or file of page generation code upon execution. If all of the subset of customer data has not yet been obtained for any of the sets or files of page generation code used to generate the network page the network page generation application returns to box and continues the data aggregation phase. If all of a subset of customer data has been obtained for a particular page generation code the network page generation application proceeds to box .

In box the network page generation application executes the page generation code . In doing so the network page generation application may perform various runtime checks to ensure that the page generation code does not include any impermissible code or content. In box the network page generation application provides the aggregated customer data i.e. the subset of customer data to the page generation code as predefined variables . In box the network page generation application obtains the portion of the network page generated by the page generation code .

In box the network page generation application determines whether another set or file of page generation code is to be used in generating at least a portion of the network page . If another set or file of page generation code is to be used the network page generation application returns to box and continues aggregating customer data from the data sources . If another set or file of page generation code is not to be used the network page generation application continues from box to box . It is noted that multiple sets or files of page generation code may be executed in parallel in response to the data for the respective page generation code becoming available in box .

In box the network page generation application assembles the network page using the output of potentially multiple page generation codes and potentially other data. In box the network page generation application sends the generated network page to the client in response to the page request . One or more portions of the network page may be sent to the client before one or more other portions have finished generation. Also the network page may be sent to the client according to a predefined sequence. In one scenario a first one of the portions is generated before a second one of the portions and the second one of the portions is sent to the client before the first one of the portions according to the predefined sequence. Thereafter the portion of the network page generation application ends.

Turning now to shown is a flowchart that provides one example of the operation of a portion of the data source according to the embodiments discussed in connection with . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the data source as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the data source obtains a request for data items from the data aggregation service . In various embodiments the request may correspond to a service call sent by way of simple object access protocol SOAP hypertext transfer protocol HTTP or some other approach. In box the data source obtains one of the requested data items. The data source may perform internal processing to generate the data item or may obtain the data item from one or more other sources etc. In box the data source returns the data item to the data aggregation service via a multipart data stream .

In box the data source determines whether another data item is to be produced in response to the request. If another data item is to be produced the data source moves to box and returns a delimiter via the multipart data stream . The data source then returns to box and obtains another data item. It is noted that the data items may be sent by the data source in any order. If another data item is not to be produced the data source closes the multipart data stream in box . Thereafter the portion of the data source ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . The computing device corresponds to a representative computing device which may be employed in the computing environment .

The computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the data aggregation service the data sources the network page generation application the network page server application the network site configuration application and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the data aggregation service the data sources the network page generation application the network page server application the network site configuration application and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the network site configuration application the network page generation application and the data source . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the data aggregation service the data sources the network page generation application the network page server application and the network site configuration application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system.

In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

