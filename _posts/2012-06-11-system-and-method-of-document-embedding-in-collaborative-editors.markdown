---

title: System and method of document embedding in collaborative editors
abstract: A device embeds a first frame in a second frame. A first mutation defining a first change made to a document within the first frame is generated. A second mutation defining a second change made to the document within the second frame is generated. The first mutation and a first embed identifier assigned to the first mutation and the second mutation and a second embed identifier assigned to the second mutation are transmitted to a remote server. A first instruction relating to the document and including the first embed identifier and a second instruction relating to the document and including the second embed identifier are received from the remote server. The first instruction, based on the first embed identifier, is transmitted by the device to the first frame. The second instruction, based on the second embed identifier, is transmitted by the device to the second frame.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286276&OS=09286276&RS=09286276
owner: Google Inc.
number: 09286276
owner_city: Mountain View
owner_country: US
publication_date: 20120611
---
This specification relates generally to systems methods and apparatus for document embedding in collaborative editors and more particularly to systems methods and apparatus for document embedding for heterogeneous document types in collaborative changelog based web document editors.

Existing document editors allow users to access a document stored remotely from the user s device. For example the user may use a laptop to access a document stored on a remote server via the Internet. The user may create modifications or changes to the document and send the changes to the remote server. The remote server may receive and apply the changes to the document.

In some document editors the user may also access a document processor hosted by the remote server to view the document. As the document processor is hosted by the remote server the remote server controls the document processor. Therefore any changes made to the document within the document processor are transmitted to remote server.

In accordance with an embodiment a device embeds in a first frame a second frame. A first mutation defining a first change made to a document within the first frame is generated. The first mutation is assigned a first embed identifier associated with the first frame. A second mutation defining a second change made to the document within the second frame is generated. The second mutation is assigned a second embed identifier associated with the second frame. The first mutation and the first embed identifier and the second mutation and the second embed identifier are transmitted to a remote server. A first instruction relating to the document and including the first embed identifier and a second instruction relating to the document and including the second embed identifier are received from a remote server. The first instruction based on the first embed identifier is transmitted by the device to the first frame. The second instruction based on the second embed identifier is transmitted by the device to the second frame.

In an embodiment the second frame includes a third party application. In an embodiment the first frame includes a different third party application than the second frame.

In an embodiment a batch mutation defining multiple changes made to the document within the first frame are generated. The batch mutation assigned a third embed identifier associated with the first frame. The batch mutation and the third embed identifier are transmitted to the remote server. A batch instruction based on the third embed identifier is transmitted by the device to the first frame. In an embodiment the third embed identifier is equivalent to the first embed identifier.

In accordance with an embodiment a plurality of mutations are received via a trusted frame. Each of the plurality of mutations include an embed identifier. The plurality of mutations are sorted based on embed identifiers to generate a first set of sorted plurality of mutations and a second set of sorted plurality of mutations. First operational transformation rules are applied to the first set of sorted plurality of mutations. A first set of instructions are generated based on applying the first operational transformation rules. Second operational transformation rules are applied to the second set of sorted plurality of mutations. A second set of instructions are generated based on applying the second operational transformation rules. The first set of instructions and the second set of instructions are transmitted to the trusted frame.

In an embodiment the trusted frame is in communication with a remote server. In an embodiment the trusted frame is entrusted by the remote server. In an embodiment the remote server assigns the embed identifier.

These and other advantages of the present disclosure will be apparent to those of ordinary skill in the art by reference to the following Detailed Description and the accompanying drawings.

In the exemplary embodiment of network is the Internet. In other embodiments network may include one or more of a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN a wireless network a Fibre Channel based storage area network SAN or Ethernet. Other networks may be used. Alternatively network may include a combination of different types of networks.

Communication system also includes host server . In an embodiment host server may host a website and may also host an application shown in that can be accessed by device . In an alternate embodiment the website and or application may be hosted by any other server. In an embodiment host server may provide access to one or more webpages on website providing access to application . Device may access a World Wide Web page that may be viewed using a conventional web browser for example.

Device may be any device that enables a user to access application . Device may be connected to network through a direct wired link or wirelessly. Device may have a display screen not shown for displaying information. For example device may be a personal computer a laptop computer a workstation a mainframe computer a mobile communication device such as a wireless phone a personal digital assistant cellular device a laptop computer a netbook a tablet device an electronic book reader etc. Other devices may be used.

Device may be any type of device as described herein with respect to device . As described herein device and device may include similar functionality. Therefore any feature described herein with respect to device is applicable to device .

Frames may be used to communicate actions or commands between device host server third party server and third party server . For example suppose that a user employing user device wishes to access application . As depicted in device may provide a display of a webpage in browser . Webpage may be one of the webpages that are included as a part of website . Application may be executed on user device . In another embodiment application may be accessed by user device but executed on a remote machine e.g. host server . Application may include or otherwise utilize other applications extensions add ons functions programs etc. Other applications may include a web application a document processing application a multimedia player application a social media network application a spreadsheet application a presentation application a game application an image editing application a video editing application etc. In the illustrative embodiment of application may include or otherwise utilize third party application third party application and third party application . Each of third party application third party application and third party application may be compatible with application and with each other.

Suppose that the user employing device accesses application hosted by host server and wishes to access one or more third party applications and . It may be necessary for communication to be conducted between device and host server and also between device and third party applications and and further between application and third party applications and . However it may be advantageous to conduct communications among these entities in distinct channels for purposes of maintaining security. When an action or command is issued for any one of application third party application third party application and third party application by the user employing device the action or command is communicated via one or more frames. In an embodiment application is owned by created by in communication with or otherwise entrusted by host server . As application is entrusted by host server any communication between application and host server occurs in a trusted frame. Third party application and third party application may be hosted by third party server and third party application may be hosted by third party server . Therefore third party application third party application and third party application may not be in direct communication with host server as they are hosted by third party servers that may not be entrusted by host server . Thus any communication between any of third party application third party application and third party application and host server occurs in respective child frames.

In an embodiment device device and other devices may provide access to application . In an embodiment application is a spreadsheet application and document is a spreadsheet document. Suppose that a user employing device wishes to access document . Document may be a spreadsheet document created using application . In order to access document and make changes to document the user may connect to host server via network . In order for device to communicate with host server frames depicted by are used.

Details of how frames are used for communication will be described herein with reference to . is a flowchart depicting a method of establishing communication between frames in accordance with an embodiment. Specifically is a flowchart depicting a method establishing communication between a trusted frame hosted by host server and a plurality of child frames e.g. a child frame a sub child frame .

At step a mapping is established showing relationships between a plurality of child frames and corresponding attach identifiers. The child frames include respective interfaces displayed on a user device and the child frames are hosted by respective third party servers different from the server. As shown in child frame and sub child frame communicate with a trusted frame . Details retarding the communication between these frames will be described herein. Referring now to a mapping is established showing relationships between a plurality of child frames and corresponding attach identifiers ID by host server . In an embodiment depicted by child frame corresponds to attach ID and sub child frame corresponds to attach ID . Attach ID is different than attach ID . Child frame and sub child frame include respective interfaces displayed on user device and child frame and sub child frame are hosted by respective third party servers and different from host server .

Referring to a mapping is also established. In a table maps an attach ID and a corresponding allowed origin . Table is used to determine whether an attach ID associated with a child frame is associated with an allowed origin. If the mapping exists communication can be established. If however the mapping does not exist communication between cannot be established and a new frame associated with a new domain e.g. not mapped may be required to complete a registration process. Host server accordingly generates mappings and .

As depicted by a display of webpage is provided. Webpage may be provided for display on device . Trusted frame is hosted by server . Trusted frame includes an attach manager and code . Webpage also includes child frame . Child frame includes an attach client and code . Webpage also includes sub child frame . Sub child frame includes an attach client and code . Trusted frame child frame and sub child frame and their contents may be employed in the background of webpage in browser and may not be viewable to a user employing device .

In an embodiment sub child frame is embedded within child frame . In an embodiment multiple child frames may be provided. One of a plurality of child frames is a sub child frame embedded within another one of the plurality of child frames. Sub child frame may provide communication in an application or an add on to an application within child frame . In an embodiment each of child frame and sub child frame is hosted by a respective third party server. In an embodiment depicted by child frame may be hosted by third party server and sub child frame may be hosted by third party server . Therefore each of the respective third party servers is associated with a different respective domain. In an alternate embodiment each of the respective third party servers is associated with a same domain. For example both child frame and sub child frame may associated with a domain associated with third party server . Child frame and sub child frame may both be referred to herein generally as child frames.

Suppose now that a user employing device wishes to access application to open document . Document may include references that enable access to application and application . For example if document is a spreadsheet application application and application may be mathematical calculators capable of calculating formulas used in document . Application and application are executed by third party server but utilized by application and document executed by host server .

In order for application and application to communicate with host server child frame and sub child frame are used. For example any commands issued by application are communicated via child frame and any commands issued by application are communicated via sub child frame . These commands are sent via child frame and sub child frame to trusted frame which acts as an intermediary between third party sources and host server . Trusted frame via attach manager communicates all commands to host server via network . Attach manager may listen for messages sent to trusted frame . Code may be JAVASCRIPT code running in trusted frame and provide attach manager with a set of attach mapping pairs to register. JAVASCRIPT is a browser implemented coding language. Code may communicate with code and code in a postmessage form. Communication between attach manager and attach client and attach client may be in a postmessage form. Internal communication between attach manager and code attach client and code and attach client and code may be in a form of local communication. Trusted code may communicate bidirectionally with host server via network using XHR where X stands for XML Extensible Markup Language H stands for HTTP Hypertext Transfer Protocol and R stands for request.

Referring back to at step respective identifiers originating from the plurality of child frames are received. Respective identifiers i.e. attach IDs originating from a plurality of child frames i.e. child frame and sub child frame are received by host server e.g. via trusted frame .

At step the identifiers of the plurality of child frames are verified based on the mapping. The identifiers i.e. attach IDs of the plurality of child frames i.e. child frame and sub child frame are verified based on the mapping shown by .

At step communication is established between the trusted frame and the plurality of child frames if the attach identifiers are verified. Communication between trusted frame and the plurality of child frames i.e. child frame and sub child frame is established if the attach identifiers i.e. attach IDs are verified. For example suppose that one or more commands having an attach ID numbered are sent by child frame to trusted frame . Based on mappings and trusted frame via host server verifies that attach ID numbered communicated by child frame which is associated with an allowed origin. As seen by table lists attach ID and the corresponding allowed origin . Therefore a verification is made whether attach ID numbered corresponds to an allowed origin specifically attach ID numbered corresponds to ThirdPartyDomain. Similarly a verification is made for the attach ID numbered . Thus after the origin of the attach IDs are verified communication between trusted frame and the plurality of child frames i.e. child frame and sub child frame is established.

2. Code running in trusted frame provides attach manager with a set of attach mapping pairs to register as described above. These pairs consist of a unique attach ID and a domain that is allowed to attach using that attach ID. These mappings determine which child frames are allowed to communicate with the trusted frame.

3. Child frame is loaded and begins the attach loop. This step may be performed periodically e.g. once per second until the attach process is successful. For each step of the loop the child frame attach manager sends an attach request to any parent frame and any superparent frames.

The attach request may contain the attach ID that was registered with attach manager this ID may be provided to child frame using a variety of methods such as a URL fragment parameter . An HTML5 window.postMessage API may be used to send this message and the target domain parameter may be set to the domain of trusted frame . This may prevent any intermediate frames from receiving or intercepting the attach request.

5. Attach manager verifies that the attach ID has been registered and that the registered domain for that attach ID matches the HTML Hyper Text Markup Language 5 provided origin. HTML 5 provided origin may be provided by the browser and may not be forged by a rogue child frame.

6. The attach manager stores the HTML5 provided window object from the request in a map keyed on the attach ID.

Once attach manager receives the attach request it verifies that the attach ID has been registered and that the origin provided by the postMessage event matches the registered origin for the application frame. Attach manager adds the window document object model DOM element provided by the postMessage event to a map of attach IDs to associated windows. Attach manager sends an attach acknowledgement to attach client using window.postMessage . Child frame receives the attach acknowledgement verifies that the origin provided by the postMessage event matches the expected origin from the trusted frame and stores the window DOM element also provided by the postMessage event . The attach client fires an attach event with the trusted frame s window DOM element. The trusted attach manager fires an attach event with the attach frame s window DOM element and the attach ID.

After attaching in order to send a message from child frame to trusted frame child frame may call the postMessage method on the stored window object. The target domain is set to the domain of the trusted frame to prevent interception. To send a message from trusted frame to child frame JAVASCRIPT in trusted frame may query attach manager with the attach ID that it wishes to communicate with and attach manager returns a window object and target domain. Trusted frame s code may then calls the postMessage method on the window object.

In an embodiment a custom plugin may be used to implement similar functionality. In an embodiment communication may be proxied through any intermediate frames e.g. between trusted frame and the child frame . In another embodiment child frame may be created as a direct child of trusted frame . One or more security verification procedures may be used in order to entrust child frame and establish direct communication with host server .

In an embodiment depicted by mapping may be performed prior to mapping and mapping may be in order to establish mapping . For example trusted frame may establish a mapping between attach ID and an allowed origin ThirdPartyDomain. In an embodiment this mapping may be performed prior to determining mapping in the mapping between a child frame and an attach ID . Trusted frame may then wait for an attempt by child frame e.g. child frame to attach verify the origin e.g. ThirdPartyDomain of the child frame based on mapping and then associate attach ID with child frame . In an embodiment at substantially the same time as trusted frame associates an attach ID with a child frame as in mapping trusted frame may respond to the child frame such that the child frame can store a pointer to trusted frame . In an embodiment this procedure may be performed each time a mapping between a child frame and attach identifier is made.

Details of the two mappings as established will be described herein with reference to . is a flowchart depicting a method of establishing mappings in accordance with an embodiment. At step a first mapping showing relationships between a plurality of attach identifiers and a plurality of allowed origins is established. Host server establishes mapping between attach ID and corresponding allowed origin .

At step a request from a child frame to establish an attachment to the trusted frame is received. The child frame comprises an interface displayed on a user device and the child frame is hosted by a third party server different from the server. Host server receives a request from child frame to establish an attachment or connection to trusted frame . Child frame includes an interface displayed on user device and child frame is hosted by third party server different from host server .

At step an origin of the child frame is verified to be one of the plurality of allowed origins. Host server verifies ThirdPartyDomain origin of child frame to be one of the plurality of allowed origins shown by mapping .

At step in response to verifying that the origin of the child frame is one of the plurality of allowed origins a second mapping showing a relationship between the child frame and a corresponding attach identifier mapped to the one of the plurality of allowed origins is established. Host server in response to verifying that ThirdPartyDomain origin of child frame is one of the plurality of allowed origins shown by mapping establishes mapping showing a relationships between one of the child frames and one of corresponding attach identifiers ID e.g. attach ID mapped to ThirdPartyDomain.

At step the corresponding attach identifier originating from the child frame is received. Host server receives one of the corresponding attach identifiers ID originating from child frame . For example child frame may transmit to host server attach ID and host server may receive attach ID .

At step the corresponding attach identifier originating from the child frame based on the second mapping is verified. Host server verifies the corresponding attach identifier e.g. attach ID originating from child frame based on mapping .

At step communication between the trusted frame and the child frame is established if the corresponding attach identifier is verified. Communication between trusted frame and child frames is established if the attach identifier i.e. attach ID is verified by host server .

Suppose now that host server provides real time collaborative editing of documents. Details regarding real time collaborative editing of documents are described in U.S. patent application Ser. No. 13 224 479 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 530 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 573 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 663 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 769 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 860 filed Sep. 2 2011 U.S. patent application Ser. No. 13 297 762 filed Nov. 16 2011 U.S. patent application Ser. No. 13 551 772 filed Jul. 18 2012 U.S. patent application Ser. No. 13 551 859 filed Jul. 18 2012 U.S. patent application Ser. No. 13 591 734 filed Aug. 22 2012 and U.S. patent application Ser. No. 13 591 851 filed Aug. 22 2012 the contents of which are hereby incorporated herein by reference in their entirety.

As described above host server may host applications such as a web application a document processing application a multimedia player application a social media network application a spreadsheet application a presentation application a game application an image editing application a video editing application etc. In the exemplary embodiment depicted by which provides a graphical representation of embedded documents one or more users may access a spreadsheet application and open up a spreadsheet document . Spreadsheet application may be a type of application in and spreadsheet document may be a type of document . One or more document editors may be embedded inside any other document editor.

Mutations i.e. changes made within one document editor which is embedded inside another editor may be stored in a single changelog. Spreadsheet document may maintain a revision history of all actions or mutations made within the document by the respective device. Host server may maintain a master revision history of all actions issued by all devices to the document.

A user may be provided with the ability to view or restore a previous version of the spreadsheet document by using the changelog.

Suppose that spreadsheet document is provided for display to one or more users. For example a first user employing device may be collaborating with a second user employing user device on spreadsheet document . Each of the users may be provided with a display of spreadsheet document as depicted by . Each of the users may remotely access spreadsheet document . For example a first user may access spreadsheet document using a netbook while a second user may access spreadsheet document using a mobile phone. The users may connect to host server via a network to access the spreadsheet document.

Suppose now that the first user wishes to select an area to embed application which may be a formula application into spreadsheet document . The first user wishes to embed formula application and application which may be a function within spreadsheet document . In an embodiment formula application may be an application that is created by owned maintained or otherwise controlled by third party server . Function may be embedded within formula application and may be also be controlled by third party server . For example a developer employed by third party server may have created formula application and another developer may have created function to work with formula application . Alternatively formula application and function may be programmed to work with one another in an embedded environment however may be controlled by remote and separate third party servers.

The user inputs a function Formula A Function X Z into area . Formula application may be provided to the user within webpage . Specifically formula application may be displayed to the user in a portion of area of webpage or elsewhere within webpage . In an embodiment depicted by formula application may be displayed within child frame and function may be displayed within sub child frame . Any information related to formula application and any mutations related to formula applications may be displayed within child frame . Similarly any information related to function and any mutations related to function may be displayed within sub child frame . Child frame and sub child frame may be visible or invisible to the user. The arrangement of the frames in is provided for exemplary purposes and other arrangements of frames are possible in the embedding system.

The second user may wish to input a drawing into spreadsheet document . The second user may select area to place the drawing. The second user selects an image editor or other application to embed a drawing of a pie chart into spreadsheet document . The second user may select an image editor which is compatible with spreadsheet application to create and modify drawing . The image editor may be third party application which may be created by owned maintained or otherwise controlled by third party server . Any information related to drawing and any mutations related to drawing are displayed within frame . Frame may be visible or invisible to the user.

In an embodiment spreadsheet application and spreadsheet document may be created by owned maintained or otherwise controlled by host server . In an alternate embodiment spreadsheet application and spreadsheet document may be controlled by another server however host server establishes trust with the other server and therefore host server establishes trust with the host of spreadsheet application .

In yet another embodiment spreadsheet application and spreadsheet document may not be trusted by host server and may instead be hosted by a third party server e.g. third party server .

In an embodiment where host server is the host or has established trust with the host of spreadsheet application and spreadsheet document commands issued by device that are associated with spreadsheet application and spreadsheet document may be communicated to host server via trusted frame . Commands issued that are associated with embedded applications within spreadsheet application and spreadsheet document are also communicated via trusted frame which acts as an intermediary between host server and any third party servers that may not be trusted by host server . Details regarding communication between the frames will be described herein in reference to the flowchart of .

In an embodiment embedding is performed using the interaction of device and host server . In an embodiment it is host server s responsibility is to communicate with device perform operational transformation e.g. individually for each embed ID and store the document data. Host server communicates with device and hosts trusted frame which may routes mutations and acknowledgements between host server and the application frames and the application frames which may also perform operational transformation and handle interpreting and displaying the document contents . In an embodiment user visible parts of embedding may be implemented by the device whereas host server may be responsible for storage and may assist in the collaborative aspects of the embedding feature.

In an embodiment the embedding of applications occurs within spreadsheet document . Trusted frame may include spreadsheet document child frame and sub child frame .

At step a first mutation defining a first change made to a document within the first frame is generated the first mutation assigned a first embed identifier associated with the first frame and a second mutation defining a second change made to the document within the second frame is generated the second mutation assigned a second embed identifier associated with the second frame. In a user employing device may make a first change to spreadsheet document displayed within child frame . For example formula application may calculate an income tax in spreadsheet document . Formula application may be contain a tax percentage for the previous tax year. The tax percentage within the formula application may be edited or changed to update a percentage of income tax for the current year.

As depicted by mutations generated by the user are provided. Within browser of user device e.g. within a document such as spreadsheet document a first document editor application child document is provided. First document editor application may be formula application . Within first document editor application a second document editor application sub child document is provided. Second document editor application may be function . As function is a function of formula application both function and formula application may be provided or hosted by the same third party server. In an alternate embodiment function and formula application may be hosted by different third party servers. In another embodiment function may be hosted by a sub domain of the server that hosts formula application .

Referring back to step of a change made to the percentage in the tax calculation is referred to as a mutation. As depicted by a first mutation defines the first change made to spreadsheet document within child frame by formula application . Prior to transmission of mutations to host server mutations are tagged with an embed specific unique embed identifiers. The embed identifiers are distributed by host server and uniquely identify which embedded document the mutation belongs to. A hierarchically topmost root document e.g. spreadsheet document may have been assigned a well known embed identifier such as root. Otherwise the topmost document may be distributed an embed identifier no different than any other document.

First mutation is assigned by device an embed identifier associated with child frame . For example embed identifier may be associated with formula application which is provided by child frame . Host server may distribute transmit assign or otherwise forward embed identifiers to all the frames.

In an embodiment the embed identifier is substantially similar to the attach ID. The embed identifier may be a unique code that is communicated by host server . Similar to the attach ID the embed identifier is mapped to corresponding frames and allowed domains. All mutations transmitted to host server via trusted frame may be identified by embed identifiers. In an embodiment host server may assign multiple dedicated embed identifiers to a frame. The embed identifiers may be recycled and reused as long as the changes to which frame is assigned which embed identifier are noted in the mapping. As described above formula application may be a third party application e.g. third party application that is provided or hosted by third party server .

Referring again to in step the user may create a second change to spreadsheet document . For example the user may wish to change or edit function . The user may need to edit function in view of the changes made to formula e.g. to reflect the jointly filing of taxes described herein . Thus the change to second document editor application is made by a second mutation . Second mutation defining a second change made to spreadsheet document within sub child frame is generated. Second mutation is assigned a unique embed identifier associated with sub child frame .

In an embodiment a third mutation may be made within first document editor application . The third mutation may be a change to formula application . For example suppose the user gets married and wants to calculate the tax advantages of filing taxes jointly. The user may change one or more variables within formula in order to calculate the taxes for filing jointly. The change in one or more variables may be reflected by third mutation . In an embodiment third mutation occurs within first document editor application . Therefore the same embed identifier is assigned to third mutation as is assigned to first mutation . In an alternate embodiment a different embed identifier or an embed identifier sharing at least some digits as assigned to the first mutation may be assigned to the third mutation.

In an embodiment the user may wish to make a change to section of a portion of the pie chart in drawing within frame in . For example should the user wish to graphically depict how much of his total taxes was paid in social security tax the user may create a slice on the pie chart indicative of the social security tax. The change to spreadsheet document is made by a drawing application used to create drawing within frame . In an embodiment the drawing application may be third party application which is provided or hosted by third party server . As depicted by device generates a fourth mutation that defines the change made to spreadsheet document by the drawing application. For example a third document editor application child document is provided which may be the drawing application. Fourth mutation is assigned a fourth embed identifier associated with frame . As described above with respect to embed identifiers the fourth embed identifier may be a unique code that is communicated by host server .

At step the first mutation and the first embed identifier and the second mutation and the second embed identifier are transmitted to a remote server. First mutation and first embed identifier and second mutation and second embed identifier are transmitted to host server by device via network . Specifically first mutation and first embed identifier are communicated via child frame to trusted frame . Second mutation and second embed identifier are communicated via sub child frame to trusted frame . Host server then performs a verification process as described above to ensure allowed domains transmit embed identifiers. Specifically a verification is made to verify that to ensure that corresponding mutations have been transmitted by allowed domains via verification of the corresponding embed identifiers contained in the mutation and checking the mapping.

As depicted by host server in memory may store and maintain a changelog . Changelog includes a history of all mutations. In an alternate embodiment changelog may be maintained external to host server . A copy of changelog may be maintained at device device or elsewhere.

In an embodiment spreadsheet application in is a changelog based editor application. Changelog based editor applications may represent a document e.g. spreadsheet document as an ordered log of mutations each of which may be generated through a user action. Examples of mutations include typing or bolding a selection range. By replaying the changelog it may be possible to reconstruct the document in any state e.g. a current state or in any previous revision state .

At step a first instruction relating to the document and including the first embed identifier and a second instruction relating to the document and including the second embed identifier are received from the remote server. Host server receives the mutations from device . After verifying that the mutations have been transmitted by allowed domains via verification of the embed identifiers and checking the mapping as described above host server makes the changes contained in the mutations. For example changes are made to formula application within child frame and changes are made to function within sub child frame as requested by user device . Host server transmits to device a first instruction relating to spreadsheet document the first instruction includes the first embed identifier . Host server transmits to device a second instruction relating to spreadsheet document the second instruction includes the second embed identifier .

Similarly changes made by fourth mutation to drawing application containing drawing within frame and changes made by third mutation to formula application within child frame are transmitted by respective fourth instruction and third instruction. Each of fourth instruction and third instruction include fourth embed identifier and third embed identifier respectively.

In an embodiment the instructions sent by host server are forwarded by trusted frame to device . In this way only secure and trusted instructions are received by device .

At step the first instruction based on the first embed identifier is transmitted by the device to the first frame. Device receives the first instruction and based on the first embed identifier recognizes that the first instruction is to be forwarded to child frame . Therefore device transmits the first instruction to child frame .

At step the second instruction based on the second embed identifier is transmitted by the device to the second frame. Device receives the second instruction and based on the second embed identifier recognizes that the second instruction is to be forwarded to sub child frame . Therefore device transmits the first instruction to sub child frame .

In an embodiment a batch mutation defines a plurality of changes made to spreadsheet document within child frame . The batch mutation is assigned a third embed identifier associated with child frame . The batch mutation and the third embed identifier is transmitted to host server . A batch instruction based on the third embed identifier is transmitted by device to child frame . The third embed identifier may equivalent to the first embed identifier .

In an embodiment any user accessing spreadsheet document may embed one or more applications functions formulas documents spreadsheets drawings images digital photographs presentations games social network and or news feeds videos multimedia maps charts etc. into spreadsheet document .

Host server receives mutations after they pass through trusted frame . In an embodiment trusted frame may manipulate the mutations. For example trusted frame may strip off data contained within the mutations that may create a security risk. Trusted frame may encapsulate the mutations prior to transmission to host server . Details regarding how the trusted frame transmits the mutations to the server are described in detail in U.S. patent application Ser. No. 13 224 479 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 530 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 573 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 663 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 769 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 860 filed Sep. 2 2011 U.S. patent application Ser. No. 13 297 762 filed Nov. 16 2011 U.S. patent application Ser. No. 13 551 772 filed Jul. 18 2012 U.S. patent application Ser. No. 13 551 859 filed Jul. 18 2012 and U.S. patent application Ser. No. 13 591 851 filed Aug. 22 2012 the contents of which are hereby incorporated herein by reference in their entirety.

At step the plurality of mutations are sorted based on embed identifiers to generate a first set of sorted plurality of mutations and a second set of sorted plurality of mutations. Host server sorts the plurality of mutations based on their embed identifiers to generate a first set of sorted plurality of mutations and a second set of sorted plurality of mutations . As depicted by host server includes a sort chart . Sort chart may be stored within memory or elsewhere in host server . In an embodiment sort chart may be stored external to host server yet still accessible by host server .

Sort chart sorts through the received actions and lists the received actions based on embed identifiers. For example should host server receive first mutation second mutation and third mutation sort chart performs a sort to group all actions associated with each embed identifier. Two actions e.g. mutations contain the embed identifier . These actions first mutation and second mutation are sorted by sort chart and listed as being associated with embed identifier . Third mutation contains the embed identifier . Therefore third mutation is listed in the chart as being associated with embed identifier . If other mutations having the embed identifier are received by host server sent via trusted frame these mutations will be sorted and listed with third mutation . The mutations may be received by host server in any order. In an embodiment trusted frame transmits a batch of actions to host server and allows host server to perform the sort. In another embodiment trusted frame may presort the actions before forwarding them to host server . Trusted frame may perform other functions to actions prior to submission to host server . For example as described above trusted frame may encapsulate the actions prior to submission.

At step first operational transformation rules are applied to the first set of sorted plurality of mutations generating a first set of instructions based on applying the first operational transformation rules. As depicted by host server applies operational transformation to a first set of a plurality of mutations . Specifically a first set of operational transformation rules are applied to first set of a plurality of mutations . A first set of instructions based on applying first set of operational transformation rules are generated by host server .

At step second operational transformation rules are applied to the second set of sorted plurality of mutations generating a second set of instructions based on applying the second operational transformation rules. Host server applies operational transformation to a second set of a plurality of mutations . Specifically a second set of operational transformation rules are applied to second set of a plurality of mutations . A second set of instructions based on applying the second operational transformation rules are generated. Operational transformations are described for example in U.S. patent application Ser. No. 13 224 479 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 530 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 573 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 663 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 769 filed Sep. 2 2011 U.S. patent application Ser. No. 13 224 860 filed Sep. 2 2011 U.S. patent application Ser. No. 13 297 762 filed Nov. 16 2011 the contents of which are incorporated herein by reference in their entirety.

The operational transformation process may be performed separately for each group of mutations e.g. a group of mutations having the same embed identifier . By applying a set of operational transformation rules to a particular set of a plurality of mutations conflicts mutations may be prevented. In an embodiment the first set of operational transformation rules and the second set of operational transformation rules may be substantially similar or equivalent. In another embodiment the first set of operational transformation rules may be different than the second set of operational transformation rules.

Actions in the form of mutation types may be defined and added to changelog . In an embodiment a number of mutations types may be minimized as for each possible type pair of mutation a set of operational transformation rules may be required.

At step the first set of instructions and the second set of instructions are transmitted to the trusted frame. Host server transmits a first set of instructions and the second set of instructions to trusted frame as shown by arrow .

In an embodiment a set of instructions may include transformed mutations that are re combined. The order in which the embed identifier groups are transmitted may not matter. However it may be important to not re order mutations having the same embed identifier. Additionally in the embedding system when mutations are transmitted to the host server or back to the user device the mutations may be interleaved from different embed identifier groups arbitrarily. However in an embodiment it may be important to not re order mutations within an embed group. For example if a first embed identifier issued mutations A then B and a second embed identifier issued mutations C then D the following mutations could be sent A B C D or A C B D or C D A B or C A D B. However the mutations A B D C or in any other order where B comes before A or where D comes before C cannot be sent as the order of C and D is reordered.

Trusted frame then forwards a first set of instructions for applying the first operational transformation rules to child frame and a second set of instructions for applying the second operational transformation rules to sub child frame . Specifically attach manager within trusted frame recognizes the embed identifier associated with child frame . Therefore as the first set of instructions include embed identifier attach manager forwards the first set of instructions to child frame . Similarly as the second set of instructions include embed identifier attach manager forwards the second set of instructions to sub child frame . In this way only the frames which issue actions receive respective instructions to update all or a portion of the data contained within the frames. Furthermore other frames e.g. frame do not receive any instructions that do not pertain to them. Therefore the instructions are securely transmitted to only the frames which generated the actions. Therefore frames and document editors and other applications displayed within the frames are securely isolated from reading and or modifying data in other frames. Moreover a child frame is securely isolated from reading and or modifying data in a sub child frame.

In an embodiment trusted frame receives transformed mutations in a form of a set of instructions from host server . Trusted frame may separate and filter the instructions by embed identifier and forward the proper instructions to the correct frame. As described above secure communication may be established with the individual frames to ensure that no frame receives mutations that were intended for another frame. Secure isolation may be important where privacy is a concern.

When device receives instructions from trusted frame device redraws all or a portion of data within the child frame and sub child frame based on the instructions. Device then displays the changes made to spreadsheet document to a user employing device . If the user is viewing webpage in webpage is refreshed to reflect the changes to spreadsheet document . For example the user may view the changes on a screen monitor output device etc.

In an embodiment all mutations received by host server may be written into a mutation log and assigned a sequentially increasing revision number. The mutation log may serve as the storage for the document including all embedded sub documents and provide a single consistent revision history of the document and all embedded documents. In this way the embedded documents may be isolated from each other yet share a single revision history.

When host server initially loads a snapshotting of spreadsheet document is performed. Host server then groups mutations by embed identifiers as described above. Host server then performs snapshotting of each embedded document separately. For example snapshotting of formula application in child frame is performed separately from snapshotting of function in sub child frame . Host server after performing the snapshot may then combine the snapshot of one or more embedded frames. However in an embodiment similar to the operational transformation process mutations within an embed identifier group having the same embed identifier may not be re ordered. Moreover the embed identifier groups may be received in any order by host server .

In an embodiment each embedded application may work on a different top level document having its own unique embed identifier revision history and communication channel.

In another embodiment an embedded document s data e.g. data of a document provided within a sub child frame may be included as a separate object in the root document e.g. a document provided within a child frame . The embedded application may communicate with the root application rather than directly with the trusted frame.

When host server receives mutations host server communicates with a database . Host server receives and transmits data to database as indicated by arrow . Host server transmits payload mutation to database . An embed identifier field including the embed identifier is added to the payload mutation.

In each of child frame and sub child frame include doc client API and doc client API . API refers to the application programming interface. Doc client API and doc client API communicate with a DocManager inside trusted frame . Communication between various components of trusted frame and doc client API and doc client API may be in a postmessage form. Internal communication between attach manager DocManager and embed manager may be in a form of local communication.

Each doc client API may be updated to add methods that create and retrieve embedded documents. The new methods will return a new object EmbeddedReference which internally stores the embed identifier for the embedded document and can be added to the document data model so that it may be persisted in the document state and sent to collaborators . The EmbeddedReference object will have a method to obtain an EmbeddedDocument widget which may handle loading the correct frame URL and sending RPCs to switch menus as appropriate.

Mutations communicated from trusted frame to host server via network as indicated by arrow include a proper embed identifier. Furthermore instructions communicated from host server to trusted frame via network as indicated by arrow include a proper embed identifier. Communication in a direction indicated by arrow may be in a form of XHR. Communication in a direction indicated by arrow may be in a form of browser channel communication.

In an embodiment new embedded documents may be added. In another embodiment existing embedded documents may be re added. In an embodiment formula application may include a reference to an embed identifier of formula application . Formula application may re add any embedded documents when the child frame containing the formula application is reloaded. In another embodiment embedded documents may be removed or deleted.

As multiple applications may share the same trusted frame and document e.g. spreadsheet document mutations should be delivered to the correct frame and should not become intermixed between different embed identifiers. A frame may be prevented from attaching that is associated with different origin from the expected origin. This may prevent a frame from impersonating an embed identifier from a different origin and obtaining document contents. Furthermore frames served from an untrusted domain e.g. a domain other than the trusted frame s domain cannot impersonate the trusted frame. Similarly verification of the origin of the trusted frame may be made to prevent a child frame from attaching to anything other than the trusted frame which may prevent applications from impersonating the trusted frame. Thus child frames cannot impersonate other child frames. In an embodiment only specifically allowed child frame domains can communicate with the trusted frame. Frames between the child and sub child frame do not need to forward messages or implement specific functionality. Intermediate frames those between the trusted frame and the child frame do not need to be trusted.

As described above mutations are separated based on embed identifiers. Because mutations are snapshotted separately and transformed separately it may not be possible for a mutation in one embedded document to reference a mutation in a root document or another embedded document with a different embed identifier.

To provide extra security host server may require applications to be installed before they are used. Embedded documents may be required to meet the following policies 

AddEmbedAction and associated client APIs may fail if the application is not installed and the third party application can display a message or redirect the user as appropriate.

Attempting to add an existing embed for an application that is not installed may also be disallowed. GetEmbedInfoAction may similarly fail if the application is not installed and the third party application should display a placeholder embed to inform the user and allow them to install the application.

If a developer attempts to circumvent the installation process by embedding an application s frame URL without using the AddEmbedAction or GetEmbedInfoAction RPCs the embedded application frame will be unable to communicate with the trusted frame because the frame s attach ID will not be registered with the trusted attach manager.

In various embodiments the method steps described herein including the method steps described in B and may be performed in an order different from the particular order described or shown. In other embodiments other steps may be provided or steps may be eliminated from the described methods.

Systems apparatus and methods described herein may be implemented using digital circuitry or using one or more computers using well known computer processors memory units storage devices computer software and other components. Typically a computer includes a processor for executing instructions and one or more memories for storing instructions and data. A computer may also include or be coupled to one or more mass storage devices such as one or more magnetic disks internal hard disks and removable disks magneto optical disks optical disks etc.

Systems apparatus and methods described herein may be implemented using computers operating in a client server relationship. Typically in such a system the client computers are located remotely from the server computer and interact via a network. The client server relationship may be defined and controlled by computer programs running on the respective client and server computers.

Systems apparatus and methods described herein may be used within a network based cloud computing system. In such a network based cloud computing system a server or another processor that is connected to a network communicates with one or more client computers via a network. A client computer may communicate with the server via a network browser application residing and operating on the client computer for example. A client computer may store data on the server and access the data via the network. A client computer may transmit requests for data or requests for online services to the server via the network. The server may perform requested services and provide data to the client computer s . The server may also transmit data adapted to cause a client computer to perform a specified function e.g. to perform a calculation to display specified data on a screen etc. For example the server may transmit a request adapted to cause a client computer to perform one or more of the method steps described herein including one or more of the steps of B and . Certain steps of the methods described herein including one or more of the steps of B and may be performed by a server or by another processor in a network based cloud computing system. Certain steps of the methods described herein including one or more of the steps of B and may be performed by a client computer in a network based cloud computing system. The steps of the methods described herein including one or more of the steps of B and may be performed by a server and or by a client computer in a network based cloud computing system in any combination.

Systems apparatus and methods described herein may be implemented using a computer program product tangibly embodied in an information carrier e.g. in a non transitory machine readable storage device for execution by a programmable processor and the method steps described herein including one or more of the steps of B and may be implemented using one or more computer programs that are executable by such a processor. A computer program is a set of computer program instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

A high level block diagram of an exemplary computer that may be used to implement systems apparatus and methods described herein is illustrated in . Computer includes a processor operatively coupled to a data storage device and a memory . Processor controls the overall operation of computer by executing computer program instructions that define such operations. The computer program instructions may be stored in data storage device or other computer readable medium and loaded into memory when execution of the computer program instructions is desired. Thus the method steps of B and can be defined by the computer program instructions stored in memory and or data storage device and controlled by the processor executing the computer program instructions. For example the computer program instructions can be implemented as computer executable code programmed by one skilled in the art to perform an algorithm defined by the method steps of B and . Accordingly by executing the computer program instructions the processor executes an algorithm defined by the method steps of B and . Computer also includes one or more network interfaces for communicating with other devices via a network. Computer also includes one or more input output devices that enable user interaction with computer e.g. display keyboard mouse speakers buttons etc. .

Processor may include both general and special purpose microprocessors and may be the sole processor or one of multiple processors of computer . Processor may include one or more central processing units CPUs for example. Processor data storage device and or memory may include be supplemented by or incorporated in one or more application specific integrated circuits ASICs and or one or more field programmable gate lists FPGAs .

Data storage device and memory each include a tangible non transitory computer readable storage medium. Data storage device and memory may each include high speed random access memory such as dynamic random access memory DRAM static random access memory SRAM double data rate synchronous dynamic random access memory DDR RAM or other random access solid state memory devices and may include non volatile memory such as one or more magnetic disk storage devices such as internal hard disks and removable disks magneto optical disk storage devices optical disk storage devices flash memory devices semiconductor memory devices such as erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM compact disc read only memory CD ROM digital versatile disc read only memory DVD ROM disks or other non volatile solid state storage devices.

Input output devices may include peripherals such as a printer scanner display screen etc. For example input output devices may include a display device such as a cathode ray tube CRT or liquid crystal display LCD monitor for displaying information to the user a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to computer .

Any or all of the systems and apparatus discussed herein including device device host server third party server third party server browser display memory database processor browser display memory database processor processor memory application application processor memory third party application third party application processor memory third party application and website may be implemented using a computer such as computer .

One skilled in the art will recognize that an implementation of an actual computer or computer system may have other structures and may contain other components as well and that is a high level representation of some of the components of such a computer for illustrative purposes.

The foregoing Detailed Description is to be understood as being in every respect illustrative and exemplary but not restrictive and the scope of the invention disclosed herein is not to be determined from the Detailed Description but rather from the claims as interpreted according to the full breadth permitted by the patent laws. It is to be understood that the embodiments shown and described herein are only illustrative of the principles of the present invention and that various modifications may be implemented by those skilled in the art without departing from the scope and spirit of the invention. Those skilled in the art could implement various other feature combinations without departing from the scope and spirit of the invention.

