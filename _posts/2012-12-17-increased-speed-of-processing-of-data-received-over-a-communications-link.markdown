---

title: Increased speed of processing of data received over a communications link
abstract: A method and apparatus for processing data samples utilizes a channel map populated by device descriptor, or by an application program interface. Packet processing code loops through all of the samples contained in a packet while incrementing through a channel map and steering table without having to look up a table to determine in what audio buffer the sample is to be stored or read. Additionally, the present invention utilizes a stride map, so the audio subsystem knows how many samples to skip in order to reach the next sample frame. The present invention can be used for handling received packets as well as forming packets to send over a bus.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08589604&OS=08589604&RS=08589604
owner: Apple Inc.
number: 08589604
owner_city: Cupertino
owner_country: US
publication_date: 20121217
---
This application is a continuation of and claims priority to co owned U.S. patent application Ser. No. 13 252 106 filed Oct. 3 2011 and entitled INCREASED SPEED OF PROCESSING OF DATA RECEIVED OVER A COMMUNICATIONS LINK issuing as U.S. Pat. No. 8 335 874 which is a continuation of U.S. patent application Ser. No. 11 279 866 filed Apr. 14 2006 and entitled INCREASED SPEED OF PROCESSING OF AUDIO SAMPLES RECEIVED OVER A SERIAL COMMUNICATIONS LINK BY USE OF CHANNEL MAP AND STEERING TABLE now U.S. Pat. No. 8 032 672 each of the forgoing being incorporated herein by reference in its entirety.

The present invention relates broadly to digital audio transmitted between devices on a network. Specifically the present invention relates to storing audio data in audio buffers in locations as determined by the contents of steering registers and channel maps.

A data bus can be utilized for interconnecting electronic devices such as computers audio systems television receivers display devices video recorders and home control devices such as security system or appliance control systems. Communication using a data bus occurs in accordance with a bus protocol recognized by devices attached to the bus. Examples of bus protocols include the IEEE 1394 High Performance Serial Bus and the Universal Serial Bus USB . A bus protocol typically provides for communicating both control information and data. On an IEEE 1394 serial bus control information is generally passed using the asynchronous services of the serial bus. Control information for a particular application can be defined using for example Common Application Language CAL or Audio Video Control A VIC .

Like video processing in audio processing applications audio samples can be packed in the order the samples enter an audio processing engine. The order could be by stereo pairs mono channels interleaved channels or whatever order the audio hardware chooses to packetize the audio data. This places a significant processing burden on the packetizer or depacketizer to determine which audio channel buffer is associated with each audio sample in the packet. The complexity is further compounded when multiple devices transmit audio data to the audio processing engine as the different devices do not conform to a single standard or sample ordering. Rather existing audio devices order the audio samples within the packet as efficiently as possible for themselves and this efficiency does not necessarily apply to the target device that receives the audio packets.

While device descriptors are commonly used on the communication bus current device descriptors can only describe the channel ordering used to insert audio samples in the packet this only works for in order processing. With multiple devices there are multiple channel orderings so there is a question as to how to handle all possible sample orderings and interleaved as well as noninterleaved buffers. As there is no current solution to this problem the burden on the audio processing engine remains and device performance suffers.

The present disclosure provides methods and apparatus for processing data samples. Methods and apparatus are disclosed that utilize a channel map that is populated by a modified device descriptor or by an application program interface. In accordance with the present disclosure low level packet processing code loops through all of the samples contained in a packet while incrementing through a channel map and steering table without having to look up a table to determine in what audio buffer the sample is to be stored or read. This method and apparatus functions regardless of whether or not the audio buffer is interleaved or not and regardless of how many channels are accommodated by an interleaved audio buffer. Additionally the present disclosure utilizes a stride map so the audio subsystem knows how many samples to skip in order to reach the next sample frame. The present disclosure can be used for handling received packets as well as forming packets to send over a bus.

In a preferred embodiment the present disclosure encompasses software commands executed by a processor to perform the methods of the present disclosure. In another preferred embodiment hardware is configured to execute the methods of the present disclosure.

Many other features and advantages of the present disclosure will become apparent from reading the following detailed description when considered in conjunction with the accompanying drawings in which 

Directing attention to there is shown a contemplated audio subsystem . Device is in communication with driver and sends driver audio packets as well as control information. Driver typically includes a packetizing depacketizing engine that functions to either form packets in the case of packetization or process received packets into audio streams in the case of depacketization. Driver consults steering table channel map and stride map to select the appropriate buffer from audio channel buffers . Audio buffers can feed output to an operating system of the host of audio subsystem or audio buffers can be fed to hardware devices. Steering table is a lookup table that returns an address of a sample buffer based on the channel index of the audio sample in the packet. Channel map is a pointer array that contains starting addresses of individual sample buffers associated with samples in the packet. Stride map is an array of step sizes for incrementing audio pointers to the next sample in the packet.

Channel map can be allocated to the size of the audio packets sampleframe width. Channel map can also accommodate mismatched sample size or packet size with respect to application stream size. For example if an audio application is only recording a stereo stream but device is sending data over 24 audio channels channel map can be configured to publish only a stereo stream while still extracting a large sample frame from the packet. This increases efficiency because driver is only processing samples belonging to the stereo stream that will be recorded by the application.

The present invention thus also provides efficient hardware playthrough support. By steering the input channel map to an output channel map on a channel by channel basis any channel can be played through directly in the driver. Custom channel steering can also be performed by the present invention a single channel can be sent to all available channels by duplicating the same starting sample buffer pointer in channel map .

A Common Isochronous Packet CIP packet having an AM 824 format is contemplated for use with an embodiment of the present invention utilizing an IEEE 1394 High Performance Serial Bus but other packet formats can be used as well. Directing attention to the organization of exemplary CIP packet is shown. CIP packet has two headers header and . Following headers are various audio samples packed in numerical order from left to right top to bottom. As illustrated in CIP packet is divided into sample frames. Sample frame comprises samples 1 through 6. Next is sample frame comprising audio samples 7 12. This 6 sample frame size continues for additional sample frames until the end of CIP packet . Typically there are eight sample frames in one CIP packet. However other packet configurations can be used in embodiments of the present invention.

Directing attention to steering table describes an indexed channel order of 1 3 5 2 4 6 for each 6 channel sample frame in CIP packet . This means that the first sample is processed in the sample frame followed by the third sample the fifth sample the second sample the fourth sample and the sixth sample. This indexed order can be provided in a device descriptor passed from device to system . In an alternative embodiment the indexed order can be supplied during execution to audio system by an application program interface API or other software executing on audio subsystem . This is especially useful when different devices are connected to audio subsystem and packet processing shifts from one device to another.

Audio subsystem initializes by obtaining the channel order and number of channels to process. As described earlier this information can be obtained by driver from device in the form of a device descriptor passed from device to driver . Also as described above this information can be passed to driver from a process executing on audio subsystem such as an API or other process. In an embodiment such information could be passed to driver when a user manipulates a device interface such as an interface that allows the user to select from a plurality of devices connected to audio subsystem . Such information also could be passed to driver when a user selects a particular operating mode of a connected audio device such as an operating mode that requires a change in the amount of data processed by audio subsystem . For example if a user wishes to change from four channel audio to stereo audio channel information sent to driver would also change to reflect the change in operating mode.

At act driver uses the information received in act to construct steering table channel map and stride map . Channel order information is reflected in steering table number of channels is reflected in stride map and assignment of audio sample streams is made to audio channel buffers in channel map .

Operation of the present invention in a depacketizing embodiment is illustrated in flow diagram form as shown in . Beginning at act initialization having already been performed on driver a packet is received at audio subsystem . Driver obtains the starting address from channel map based on the sample frame index supplied by steering table which channel in the frame is being processed in act . At act driver reads the sample buffer index indicating which sample in main sample buffer . At act device driver reads the stride size from stride map . At act an address within audio channel buffers is calculated as the starting address of the channel read in act plus the product of the offset value read in act multiplied by the value read from stride map in act multiplied by the size of the sample.

At act the audio data read from the packet is then written in audio channel buffers at the address generated in act . If the end of a frame has not been reached decision act control proceeds to act where the sample frame index is incremented. If the end of a frame has been reached control transitions to act where the sample frame index is reset and the sample buffer index is incremented act . At decision act if the end of a packet being processed has been reached control transitions back to act where processing of a new packet begins. If the end of the packet has not been reached then control transitions back to act where processing advances on the current packet. This sequence of acts repeats until there are no more additional packets to be processed.

At act audio data is read from audio channels buffer at the address generated in act . This data is then written to a packet formed by driver in act . If the end of a frame has not been reached decision act control proceeds to act where the sample frame index is incremented. If the end of a frame has been reached control transitions to act where the sample frame index is reset and the sample buffer index is incremented act . At decision act if the end of a packet being processed has been reached control transitions to act where a new packet is begun and control loops back to act where processing of the new packet begins. If the end of the packet has not been reached then control still transitions back to act where processing advances on the current packet. This sequence of acts repeats until there are no more additional packets to be processed. The constructed packets are then sent to device .

Combining the functionality of into a single driver allows audio subsystem to operate in play through mode. Referring back to FIG. I in this embodiment there are two channel maps and . Channel map is designated for input as described with respect to and channel map is designated for output as described with respect to . By steering channel map to channel map on a channel by channel basis the audio data received from device can be played through any channel in driver to device .

While the present invention has been described and illustrated in detail it is to be understood that many changes and modifications can be made to the various embodiments of the invention without departing from the spirit thereof.

