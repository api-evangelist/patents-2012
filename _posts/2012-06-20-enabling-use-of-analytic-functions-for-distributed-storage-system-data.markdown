---

title: Enabling use of analytic functions for distributed storage system data
abstract: Various systems and methods for enabling use of analytic functions for distributed storage data are described. For example, one method involves generating an index for a data stream that includes a plurality of objects. The index indicates a location of each of the plurality of objects. The method also involves performing a plurality of first functions that generate a plurality of first outputs. Performing these first functions includes accessing objects based on the index and generating an output for each object. Each output also includes the respective object. The method also involves performing one or more second functions, where the second functions use the first outputs.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08805849&OS=08805849&RS=08805849
owner: Symantec Corporation
number: 08805849
owner_city: Mountain View
owner_country: US
publication_date: 20120620
---
This application related to distributed storage systems. Particularly this application relates to enabling analytics while storing data using distributed storage systems.

Companies today extensively rely on online frequently accessed constantly changing data to run their businesses. Analysis of such data such as by using analytics can give great insight to the business operations. Furthermore when disaster strikes companies must be prepared to eliminate or minimize data loss and recover quickly with useable data. Data backup can be used to prevent data loss in case of any such disaster. A data backup process typically creates copies of original data. These copies can be used to restore the original data after a data loss event. The backed up data can be stored using a variety of media such as magnetic tape hard drives and or optical storage among others. Various techniques can be used to optimize such backups such as to improve backup speed restore speed data security media usage and or reduce bandwidth requirements.

While the embodiments of the application are susceptible to various modifications and alternative forms specific embodiments are provided as examples in the drawings and detailed description. It should be understood that the drawings and detailed description are not intended to limit the embodiments to the particular form disclosed. Instead the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

Modern distributed storage environments may include multiple storage objects connected via one or more interconnection networks. The interconnection networks provide the infrastructure to connect the various elements of a distributed shared storage environment. Storage systems frequently use data redundancy mechanisms to ensure data integrity consistency and availability. Other uses for data redundancy may include backing up data distributed load sharing disaster recovery or point in time analysis and reporting. One approach to data redundancy is to back up data from a primary storage system to a second storage system.

Furthermore various companies may wish to execute various analytics against their stored data. For example such analytics can include various data mining operations on stored data performing trend analysis of data predictive analytics and or e discovery operations among others. However some companies may have so much information that this information can be difficult to process using conventional methods such as using a database or data warehouse. The system s and method s described herein enable using distributed storage systems for performing various analytics. In one embodiment this method includes generating index es for data streams that can be stored in such distributed storage systems and then executing map reduce functions on this data stream s to generate output s such as output file s . This output can then be used by analytics software to perform various analytic s . An example system for enabling use if distributed storage systems for performing various analytics is described below with reference to .

Primary storage can store data using node s N and storage . In one embodiment coordinator node also referred to as coordinator accesses e.g. over network primary storage . Coordinator can perform a backup of the data stored by primary storage . This backup can be stored using distributed storage and or secondary storage . For example a data stream can be sent by primary storage to coordinator . Such data stream can include a variety of objects each of which can be generated by one or more applications. Coordinator can process this data stream and store the processed data stream using distributed storage and or secondary storage . This processing by coordinator node can include generating an index for the data stream where this index indicates location of objects in the data stream. This index and the data stream can be stored using distributed storage which can be implemented using a distributed file system such a system implemented using an APACHE HADOOP architecture and or other distributed large data set architecture.

Coordinator can initiate performance of various functions such as map reduce functions by distributed storage . The map reduce functions can be executed using nodes N . The map reduce functions can generate output file s that store objects that were identified by the index. This output file can then be used by analytics software to perform various analytics on the objects that were originally sent using the data stream . An example method of using the distributed system of is described below with reference to .

In element the data stream is received. According to one embodiment for example controller receives a data stream from primary storage . Controller can also perform various data backup and other operations using this data stream. The data stream contains multiple objects which may be generated by a variety of applications. Coordinator can analyze and interpret data in the data stream to determine the location and type of each of the objects in the data stream.

In element the data stream is stored using distributed storage according to one embodiment. For example coordinator can store the data stream using distributed storage . In one embodiment the data stream can be stored using the secondary storage e.g. secondary storage in addition to using distributed storage . Although data stored using distributed storage is used by other element s of method it is noted that any such storage can be temporary in nature e.g. until an output file is generated.

In element an index is generated that indicates objects in the data stream according to one embodiment. For example coordinator can generate the index for the received data stream. In one implementation the index can be generated based on information received from backup software. For example coordinator can include both a backup module that generates backups e.g. from received data streams and a software element e.g. agent that uses information generated by this backup module to generate the index.

In element map reduce operation s are performed on the data stream using the index according to one embodiment. For example coordinator can initiate execution of map reduce functions that perform the map reduce operation s . The map reduce functions are performed by nodes e.g. nodes N of the distributed storage system e.g. distributed system . In one implementation the map reduce operation s can produce an output file that contains the objects of the data stream.

In element a determination is made as to whether the processing of the data stream is complete according to one embodiment. For example coordinator can determine whether the data stream received from primary storage is processed. If the data stream is processed method ends. If the data stream is not processed method loops back to element s and or .

In element mapping functions are initiated. According to one embodiment these mapping functions access objects in the data stream based on the index. In one implementation the nodes of the distributed storage system can operate on data that is also stored using the distributed storage system. Coordinator e.g. a software agent can initiate performance e.g. execution of mapping functions. These mapping functions can be implemented by node s N . For example each mapping function can access a separate object in the data stream as indicated by the index. In one implementation the index can be an index file although other implementations are contemplated. The output of each such mapping function can be the respective object that was accessed by that mapping function. As a result the mapping functions can access in parallel or substantially in parallel the data stream and generate multiple outputs. These multiple outputs can contain the objects that were indicated by the index. It is noted that one or more of nodes N can store various portions of the data stream. In one implementation each of nodes N can perform at least the mapping function on the portion of the data stream that it stores.

In element one or more reduce function s are initiated. According to one embodiment these reduce functions access the outputs generated by the mapping functions element . In one implementation the reduce function s can also be implemented by one or more of the nodes of the distributed storage system e.g. by node s N . Coordinator e.g. a software agent can initiate performance e.g. execution of reduce function s by node s N . For example the reduce function s can operate on the outputs generated by the mapping functions. The reduce function s generate an output i.e. a reduce output which can include an output file. This reduce output can thus include all or substantially all of the objects that were indicated by the index. In one implementation the reduce function s can also be performed in parallel or substantially in parallel thus creating a reduce output that contains objects that can be used for analytics which is described below with reference to .

In element an output file is accessed according to one embodiment. For example an analytics module can access the output file or another type of reduce output such as one generated in element . In some implementations another type of module such as an e discovery module that performs e discovery on data can be used instead of the analytics module.

In element the objects are accessed using the output file according to one embodiment. For example the analytics module can access objects in the output file or another type of reduce output . In one embodiment the analytics module does not need to access the stored data stream to perform the analytics.

In element analytics are performed on the objects. For example the analytics module can access the objects in the output file or another type of reduce output . By using methods the coordinator can move data from primary storage to servers of analytics software without using separate process es and or module s which can degrade quality of service for users and other applications . Furthermore the coordinator can efficiently use data from the primary storage without ignoring individual objects within the data stream.

In one embodiment the software agent can instead access the data stream and optionally associated information such as boundary information and or metadata from the secondary storage directly as the data stream is being written without accessing the backup software. In another embodiment the backup software can store the data stream using the distributed storage. In this case the software agent can just create the index for the data stream being stored without storing the data stream as the backup software already stored the data stream using the distributed storage . For example software agent can be implemented using an Open Storage OST Application Programming Interface API . This OST API based software agent can access the backup software and write data to the distributed storage. In one embodiment the OST API provides a pluggable interface to a backup storage device e.g. that can be implemented by the backup software and or the secondary storage.

In one embodiment software agent generates an index e.g. an index file for data stream . Index indicates location of each of objects in data stream . Agent generates index based on boundary information and or metadata . Example embodiments of each of boundary information metadata data stream and index are described below with reference to . In one embodiment software agent generates index substantially at the same time that the backup software performs backup operations for data stream . Depending on the implementation software agent can also generate a copy of data stream to be stored in the distributed storage system along with its associated index. In one embodiment agent can generate index just by accessing boundary information and or metadata without accessing data stream .

In some embodiments index e.g. an index file generated by software agent does not indicate one or more objects in the data stream. Agent can make this determination based on a variety of factors such as on metadata and or index settings . For example index settings can indicate to only index objects of a certain type e.g. email objects such as ones created by email applications . Thus based on metadata that can indicate the type of each object in data stream agent can generate index that only indicates email objects but not other types of objects in data stream . In one embodiment agent can store using the distributed storage system only portions of data stream that contain the objects specified by settings . In one embodiment settings can indicate which objects of the data stream are to be processed using the map reduce functions. Thus data stream is stored e.g. by agent using the distributed data system regardless of information specified by settings .

In one embodiment index is a file such as a text file however other formats are contemplated that can be accessed by nodes of the distributed storage system e.g. DFS nodes . Each line in index can relate to one object of the data stream. For example a line for any object can describe extent s of the object. Extent can indicate the position s of where the object resides in the data stream and the length of the object. If there are multiple extents they can be listed in order. As a result for an object by concatenating the extents together in the order in the index the object s data content can be recreated. A line for any object can also describe metadata about that object.

For explanation purposes only each node of the DFS system can implement a map function N . Each map function N can access one of the objects as indicated by index . The distribution of map functions N among nodes N can be managed by the DFS system. For example map function can access object in data stream and generate an output . Output can contain the object that is accessed by map function . Similarly other map functions N can generate outputs N that correspond to objects N respectively. Thus one map function N can be initiated for each object specified by index . In one embodiment map functions N can be initiated for a certain type of objects of data stream such as only for email objects.

In one implementation each map function N accesses the extents from the line of index corresponding to each object. Each map function N can access data stream read the extents concatenate them together if multiple extents are provided for a single object . Each map function N can also access an object name or object type or a file name from the metadata. Each map function N can generate output N respectively for each object. In one embodiment each output N can include a key value pair including the object name as a key and the object contents as a value. The value can also include some metadata about each respective object.

Reduce function s can be implemented by one or more of nodes N of the distributed storage system. Reduce function s can collect outputs N from map functions N and output them into a reduce output such as an output file . In one implementation the output file can be a DFS data structure called a Sequence File. The sequence file is a binary file which stores a set of Key Value pairs where the Key is the name of object i.e. filename and the value is a map of the metadata and the content. This reduce output can then be used as input into analytics processes operations.

Elements of network architecture can be implemented using different computer systems and networks. An example of one such network environment is described below with reference to . is a simplified block diagram illustrating a network architecture in which one or more clients are provided with access to a server via various network connections. As depicted in clients N are coupled to a network and so are able to access a server which can be used to implement node s of and or via network . Other servers not shown can be used instead to implement system s node s of and or . A client can be implemented using for example a desktop computer a laptop computer a workstation a server a cell phone a smart phone a network enabled personal digital assistant PDA or the like. An example of network which can be used by clients N to access server is the Internet. Alternatively access to server can be provided by a local area network LAN utilizing Ethernet IEEE 802.11x or some other communications protocol. As will be appreciated server can be accessed by clients coupled directly thereto not shown .

As also depicted on server is coupled to a server storage device which includes a data volume such as storage and or storage among others. Server storage device can be implemented as a single storage device or a collection of storage devices. Server storage device can also be implemented as a storage area network which couples remote storage devices to a server e.g. server such that the remote storage devices appear as locally attached storage devices to the server s OS for example.

In light of the present disclosure those of skill in the art will appreciate that server storage device can be implemented by any type of computer readable storage medium including but not limited to internal or external hard disk drives HDD optical drives e.g. CD R CD RW DVD R DVD RW and the like flash memory drives e.g. USB memory sticks and the like tape drives and the like. Alternatively those of skill in the art will also appreciate that in light of the present disclosure network architecture can include other components such as routers firewalls and the like that are not germane to the discussion of the present network and will not be discussed further herein. Those of skill in the art will also appreciate that other configurations are possible. For example clients N can be directly coupled to server storage device without the user of a server or Internet server can be used to implement both the clients and the server network architecture can be implemented without the use of clients N and so on.

As an example implementation of network architecture server services requests to data generated by clients N to data stored in server storage device . Any of the functionality of the nodes agents and or administration modules can be implemented using one of the other servers in the manner illustrated by and or .

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system are generally stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. Additionally applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem or interface .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . The operation of a computer system such as that shown in is readily known in the art and is not discussed in detail in this application. Code for using enabling use of analytics functions for distributed storage system data such as described above with reference to the methods of etc. to implement the present disclosure can be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Memory is also used for storing temporary variables or other intermediate information during the execution of instructions by the processor . The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 UNIX Linux or another known operating system.

Moreover regarding the signals described herein those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block or a signal can be modified e.g. amplified attenuated delayed latched buffered inverted filtered or otherwise modified between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next other embodiments of the present disclosure may include modified signals in place of such directly transmitted signals as long as the informational and or functional aspect of the signal is transmitted between blocks. To some extent a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved e.g. there will inevitably be some attenuation and delay . Therefore as used herein a second signal derived from a first signal includes the first signal or any modifications to the first signal whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and or final functional aspect of the first signal.

Although the present invention has been described in connection with several embodiments the invention is not intended to be limited to the specific forms set forth herein. On the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.

