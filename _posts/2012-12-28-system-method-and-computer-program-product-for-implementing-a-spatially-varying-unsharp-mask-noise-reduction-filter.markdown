---

title: System, method, and computer program product for implementing a spatially varying unsharp mask noise reduction filter
abstract: A system, method, and computer program product for applying a spatially varying unsharp mask noise reduction filter is disclosed. The spatially varying unsharp mask noise reduction filter generates a low-pass filtered image by applying a low-pass filter to a digital image, generates a high-pass filtered image of the digital image, and generates an unsharp masked image based on the low-pass filtered image and the high-pass filtered image. The filter also blends the low-pass filtered image with the unsharp masked image based on a shaping function.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09082180&OS=09082180&RS=09082180
owner: NVIDIA Corporation
number: 09082180
owner_city: Santa Clara
owner_country: US
publication_date: 20121228
---
The present invention relates to image processing and more particularly to a spatially varying sharpening noise reduction filter.

Unsharp masking is a well known image processing technique used to enhance high frequency components i.e. edges of an image while suppressing some low amplitude noise. Typically a low pass filter is applied to the image to create a blurred version of the image. The low pass filtered image is then compared to the original image to determine a difference between the low pass filtered image and the original image. For each pixel of the original image if the difference between the low pass filtered image and the original image is above a threshold value that suppresses the low amplitude noise then the difference is enhanced and combined with the low pass filtered image to enhance the high frequency information in the image.

Conventional unsharp masking techniques apply the same filter kernel to the entire image. In many cases the noise varies spatially across the image such that the difference associated with the noisy pixels is above the threshold value implemented in the filter. In such cases the noise may be enhanced thereby reducing the quality of the processed image. Thus there is a need for addressing this issue and or other issues associated with the prior art.

A system method and computer program product for applying a spatially varying unsharp mask noise reduction filter is disclosed. The spatially varying unsharp mask noise reduction filter generates a low pass filtered image by applying a low pass filter to a digital image generates a high pass filtered image of the digital image and generates an unsharp masked image based on the low pass filtered image and the high pass filtered image. The filter also blends the low pass filtered image with the unsharp masked image based on a shaping function.

A spatially varying unsharp mask noise reduction filter is used to reduce noise in low frequency portions of the image while enhancing high frequency information such as by increasing the acutance at the edges in the image. Conventional techniques for applying an unsharp mask blend the low pass filtered version of the image with a scaled high pass filtered version of the image. However such techniques may enhance the amount of noise in the sharpened image.

Other implementations of the unsharp mask implement a coring technique which compares the high frequency components to a threshold value before combining the low pass and scaled high pass versions of the image. In other words the high pass filtered version of the image is combined with the low pass filtered version of the image only if the high pass signal is above a threshold value. However these implementations either remove too much of the high pass signal which removes too much edge information or conversely leave too much noise in the image.

The spatially varying unsharp mask noise reduction filter described more fully below reduces the artifacts caused by this type of coring function. The sharpened image generated by conventional unsharp masking techniques is blended with the low pass filtered image based on a shaping function of the high pass signal. Various embodiments of the spatially varying unsharp mask noise reduction filter may be implemented in hardware software or combinations thereof. For example in one embodiment the spatially varying unsharp mask noise reduction filter may be implemented in an application specific integrated circuit ASIC . In another embodiment the spatially varying unsharp mask noise reduction filter may be implemented in software executed on a central processing unit CPU . In yet other embodiments at least a portion of the spatially varying unsharp mask noise reduction filter may be implemented in specialized software configured for execution in a highly parallel processor such as a graphics processing unit GPU .

At step an unsharp masked USM image is generated based on the low pass filtered image and the high pass filtered image. In one embodiment the high pass filtered image is scaled and then added to the low pass filtered image to generate the USM image. In another embodiment the scaled high pass filtered image is only combined with the low pass filtered image at a particular pixel if the difference between the pixel in the low pass filtered image and the pixel in the digital image is above a threshold value. At step the low pass filtered image and the USM image are blended based on a shaping function to produce a sharpened version of the digital image. In one embodiment the spatially varying unsharp mask noise reduction filter blends the low pass filtered image and the USM image via a linear interpolation technique using a shaping function of the high pass filtered image. It should be noted that while various optional features are set forth herein in connection with the spatially varying unsharp mask noise reduction filter such features are set forth for illustrative purposes only and should not be construed as limiting in any manner.

As shown in Equation 1 x is the x coordinate of the pixel at the center of the filter window i.e. the pixel that is to be replaced by the filtered value y is the y coordinate of the pixel at the center of the filter window x is the x coordinate of the neighboring pixel y is the y coordinate of the neighboring pixel the constant represents a standard deviation of a Gaussian distribution and the constant A is equal to the result of the Gaussian function at x y equal to x y which in one embodiment A is equal to one. Applying the convolution kernel to the input image generates a blurred version of the image i.e. low pass filtered image . In alternative embodiments the low pass filter may implement another type of low pass filter such as by implementing bilinear interpolation bicubic interpolation or simple averaging convolution kernels.

It will be appreciated that the low pass filter may be implemented in hardware by designing an ASIC that receives pixel values of the input image and generates blurred pixel values. The low pass filter may also be implemented as a hardware engine as part of a more generalized processor such as by implementing a low pass filter hardware engine within a GPU. Alternatively the low pass filter may be implemented in software executed on generalized hardware such as a CPU. Efficiencies may be gained by generating specialized software that implements the convolution kernel on a plurality of parallel processing units such as within a GPU.

The filter also includes a high pass filter . In one embodiment the high pass filter generates the high pass filtered image by subtracting the low pass filtered image from the input image . In another embodiment the high pass filter implements a high pass filter by applying a convolution kernel to the input image . Unlike the convolution kernel of the low pass filter the convolution kernel of the high pass filter includes negative weights for some of the neighboring pixels. The convolution kernel weights are chosen to correspond with the convolution kernel of the low pass filter such that adding the low pass filtered image to the high pass filtered image generates a result that approximates the input image .

Once the filter has generated the low pass filtered image and the high pass filtered image the USM engine scales the high pass filtered image and combines the scaled high pass filtered image with the low pass filtered image to generate a sharpened version of the input image i.e. a classic USM image . In one embodiment the USM engine multiplies each pixel in the high pass filtered image by a scalar value s to generate an intermediate pixel value and adds the intermediate value to a corresponding pixel value in the low pass filtered image . The calculation implemented by the USM engine is illustrated by Equation 2 shown below. Eq. 2 

As shown in Equation 2 Prepresents the low pass filtered image Prepresents the high pass filtered image and P represents the USM image . In some embodiments the USM engine may implement a coring function c x which combines the component of the pixel value from the high pass filtered image only if the high pass signal is above a threshold value as illustrated in Equations 3 and 4 below.

The LERP engine receives the USM image and the low pass filtered image and generates the sharpened image . The LERP engine blends the USM image with the low pass filtered image based on a shaping function x . In one embodiment the blending function is a linear interpolation function based on a shaping function P x y that takes the high pass filtered image as an input. Each pixel value of the high pass filtered image is raised to the inverse power of a noise amplitude cutoff parameter. The blending function is illustrated below in conjunction with Equations 5 and 6. Eq. 5 1 b Eq. 6 

As shown in Equation 5 P x y represents the sharpened image and constant k represents a noise amplitude cutoff parameter. The noise amplitude cutoff parameter is used to control the noise amplitude cutoff separately from the threshold value used in the USM engine . The shaping function may be any function with a range between zero and one i.e. 0 . . . 1 . In one embodiment the shaping function x is equal to the Gaussian function G x illustrated by Equation 7.

In the context of the present description the amplitude of the high pass signal for a particular pixel of the input image is defined as the magnitude of the difference between a pixel of the low pass filtered image and a corresponding pixel of the input image . As the amplitude of the high pass signal increases more of the classic USM image is blended into the sharpened image . Conversely as the amplitude of the high pass signal decreases more of the low pass filtered image is blended into the sharpened image . In other words the spatially varying unsharp mask noise reduction filter extends the conventional unsharp masking techniques by performing an additional step that blends the low pass filtered image with the USM image .

The LERP engine multiplies the low pass filtered image by the interpolation value to generate a first intermediate product and multiplies the USM image by one minus the interpolation value to generate a second intermediate product. The LERP engine then sums the first intermediate product with the second intermediate product to generate the sharpened image . The LERP engine illustrated in implements the calculation shown in Equation 6 set forth above.

It will be appreciated that the computations described above in conjunction with are performed for each pixel of the corresponding images. For example the calculations described by Equation 6 and illustrated in are performed for each pixel of the low pass filtered image in conjunction with corresponding pixels of the high pass filtered image and the USM image . In one embodiment the operations described herein may be performed for a plurality of pixels of the images in parallel. For example a plurality of threads may be configured to perform the calculations for a corresponding plurality of pixels in parallel on a graphics processing unit CPU .

In addition the computations described above may be applied to each channel of an image separately. For example the input image may be formatted such that each pixel includes a red channel a blue channel and a green channel. In such cases the spatially varying unsharp mask noise reduction filter may be applied to each channel of the image separately and then the results may be combined. In another example the input image may be formatted in a YUV format. In such cases the spatially varying unsharp mask noise reduction filter may be applied to the luminance channel i.e. the Y channel while the chrominance channels are not filtered.

Again the spatially varying unsharp mask noise reduction filter described above may be implemented in hardware software or combinations thereof. More illustrative information will now be set forth regarding various optional architectures and features with which the foregoing framework may or may not be implemented per the desires of the user. It should be strongly noted that the following information is set forth for illustrative purposes and should not be construed as limiting in any manner. Any of the following features may be optionally incorporated with or without the exclusion of other features described.

In one embodiment the PPU includes an input output I O unit configured to transmit and receive communications i.e. commands data etc. from a central processing unit CPU not shown over the system bus . The I O unit may implement a Peripheral Component Interconnect Express PCIe interface for communications over a PCIe bus. In alternative embodiments the I O unit may implement other types of well known bus interfaces.

The PPU also includes a host interface unit that decodes the commands and transmits the commands to the grid management unit or other units of the PPU e.g. memory interface as the commands may specify. The host interface unit is configured to route communications between and among the various logical units of the PPU .

In one embodiment a program encoded as a command stream is written to a buffer by the CPU. The buffer is a region in memory e.g. memory or system memory that is accessible i.e. read write by both the CPU and the PPU . The CPU writes the command stream to the buffer and then transmits a pointer to the start of the command stream to the PPU . The host interface unit provides the grid management unit GMU with pointers to one or more streams. The GMU selects one or more streams and is configured to organize the selected streams as a pool of pending grids. The pool of pending grids may include new grids that have not yet been selected for execution and grids that have been partially executed and have been suspended.

A work distribution unit that is coupled between the GMU and the SMs manages a pool of active grids selecting and dispatching active grids for execution by the SMs . Pending grids are transferred to the active grid pool by the GMU when a pending grid is eligible to execute i.e. has no unresolved data dependencies. An active grid is transferred to the pending pool when execution of the active grid is blocked by a dependency. When execution of a grid is completed the grid is removed from the active grid pool by the work distribution unit . In addition to receiving grids from the host interface unit and the work distribution unit the GMU also receives grids that are dynamically generated by the SMs during execution of a grid. These dynamically generated grids join the other pending grids in the pending grid pool.

In one embodiment the CPU executes a driver kernel that implements an application programming interface API that enables one or more applications executing on the CPU to schedule operations for execution on the PPU . An application may include instructions i.e. API calls that cause the driver kernel to generate one or more grids for execution. In one embodiment the PPU implements a SIMD Single Instruction Multiple Data architecture where each thread block i.e. warp in a grid is concurrently executed on a different data set by different threads in the thread block. The driver kernel defines thread blocks that are comprised of k related threads such that threads in the same thread block may exchange data through shared memory. In one embodiment a thread block comprises 32 related threads and a grid is an array of one or more thread blocks that execute the same stream and the different thread blocks may exchange data through global memory.

In one embodiment the PPU comprises X SMs X . For example the PPU may include 15 distinct SMs . Each SM is multi threaded and configured to execute a plurality of threads e.g. 32 threads from a particular thread block concurrently. Each of the SMs is connected to a level two L2 cache via a crossbar or other type of interconnect network . The L2 cache is connected to one or more memory interfaces Memory interfaces implement 16 32 64 128 bit data buses or the like for high speed data transfer. In one embodiment the PPU comprises U memory interfaces U where each memory interface U is connected to a corresponding memory device U . For example PPU may be connected to up to 6 memory devices such as graphics double data rate version 5 synchronous dynamic random access memory GDDR5 SDRAM .

In one embodiment the PPU implements a multi level memory hierarchy. The memory is located off chip in SDRAM coupled to the PPU . Data from the memory may be fetched and stored in the L2 cache which is located on chip and is shared between the various SMs . In one embodiment each of the SMs also implements an L1 cache. The L1 cache is private memory that is dedicated to a particular SM . Each of the L1 caches is coupled to the shared L2 cache . Data from the L2 cache may be fetched and stored in each of the L1 caches for processing in the functional units of the SMs .

In one embodiment the PPU comprises a graphics processing unit GPU . The PPU is configured to receive commands that specify shader programs for processing graphics data. Graphics data may be defined as a set of primitives such as points lines triangles quads triangle strips and the like. Typically a primitive includes data that specifies a number of vertices for the primitive e.g. in a model space coordinate system as well as attributes associated with each vertex of the primitive. The PPU can be configured to process the graphics primitives to generate a frame buffer i.e. pixel data for each of the pixels of the display . The driver kernel implements a graphics processing pipeline such as the graphics processing pipeline defined by the OpenGL API.

An application writes model data for a scene i.e. a collection of vertices and attributes to memory. The model data defines each of the objects that may be visible on a display. The application then makes an API call to the driver kernel that requests the model data to be rendered and displayed. The driver kernel reads the model data and writes commands to the buffer to perform one or more operations to process the model data. The commands may encode different shader programs including one or more of a vertex shader hull shader geometry shader pixel shader etc. For example the GMU may configure one or more SMs to execute a vertex shader program that processes a number of vertices defined by the model data. In one embodiment the GMU may configure different SMs to execute different shader programs concurrently. For example a first subset of SMs may be configured to execute a vertex shader program while a second subset of SMs may be configured to execute a pixel shader program. The first subset of SMs processes vertex data to produce processed vertex data and writes the processed vertex data to the L2 cache and or the memory . After the processed vertex data is rasterized i.e. transformed from three dimensional data into two dimensional data in screen space to produce fragment data the second subset of SMs executes a pixel shader to produce processed fragment data which is then blended with other processed fragment data and written to the frame buffer in memory . The vertex shader program and pixel shader program may execute concurrently processing different data from the same scene in a pipelined fashion until all of the model data for the scene has been rendered to the frame buffer. Then the contents of the frame buffer are transmitted to a display controller for display on a display device.

The PPU may be included in a desktop computer a laptop computer a tablet computer a smart phone e.g. a wireless hand held device personal digital assistant PDA a digital camera a hand held electronic device and the like. In one embodiment the PPU is embodied on a single semiconductor substrate. In another embodiment the PPU is included in a system on a chip SoC along with one or more other logic units such as a reduced instruction set computer RISC CPU a memory management unit MMU a digital to analog converter DAC and the like.

In one embodiment the PPU may be included on a graphics card that includes one or more memory devices such as GDDR5 SDRAM. The graphics card may be configured to interface with a PCIe slot on a motherboard of a desktop computer that includes e.g. a northbridge chipset and a southbridge chipset. In yet another embodiment the PPU may be an integrated graphics processing unit iGPU included in the chipset i.e. Northbridge of the motherboard.

As described above the work distribution unit dispatches active grids for execution on one or more SMs of the PPU . The scheduler unit receives the grids from the work distribution unit and manages instruction scheduling for one or more thread blocks of each active grid. The scheduler unit schedules threads for execution in groups of parallel threads where each group is called a warp. In one embodiment each warp includes 32 threads. The scheduler unit may manage a plurality of different thread blocks allocating the thread blocks to warps for execution and then scheduling instructions from the plurality of different warps on the various functional units i.e. cores DPUs SFUs and LSUs during each clock cycle.

In one embodiment each scheduler unit includes one or more instruction dispatch units . Each dispatch unit is configured to transmit instructions to one or more of the functional units. In the embodiment shown in the scheduler unit includes two dispatch units that enable two different instructions from the same warp to be dispatched during each clock cycle. In alternative embodiments each scheduler unit may include a single dispatch unit or additional dispatch units .

Each SM includes a register file that provides a set of registers for the functional units of the SM . In one embodiment the register file is divided between each of the functional units such that each functional unit is allocated a dedicated portion of the register file . In another embodiment the register file is divided between the different warps being executed by the SM . The register file provides temporary storage for operands connected to the data paths of the functional units.

Each SM comprises L processing cores . In one embodiment the SM includes a large number e.g. etc. of distinct processing cores . Each core is a fully pipelined single precision processing unit that includes a floating point arithmetic logic unit and an integer arithmetic logic unit. In one embodiment the floating point arithmetic logic units implement the IEEE 754 2008 standard for floating point arithmetic. Each SM also comprises M DPUs that implement double precision floating point arithmetic N SFUs that perform special functions e.g. copy rectangle pixel blending operations and the like and P LSUs that implement load and store operations between the shared memory L1 cache and the register file . In one embodiment the SM includes 64 DPUs 32 SFUs and 32 LSUs .

Each SM includes an interconnect network that connects each of the functional units to the register file and the shared memory L1 cache . In one embodiment the interconnect network is a crossbar that can be configured to connect any of the functional units to any of the registers in the register file or the memory locations in shared memory L1 cache .

In one embodiment the SM is implemented within a GPU. In such an embodiment the SM comprises J texture units . The texture units are configured to load texture maps i.e. a 2D array of texels from the memory and sample the texture maps to produce sampled texture values for use in shader programs. The texture units implement texture operations such as anti aliasing operations using mip maps i.e. texture maps of varying levels of detail . In one embodiment the SM includes 16 texture units .

The PPU described above may be configured to perform highly parallel computations much faster than conventional CPUs. Parallel computing has advantages in graphics processing data compression biometrics stream processing algorithms and the like.

The system also includes input devices a graphics processor and a display i.e. a conventional CRT cathode ray tube LCD liquid crystal display LED light emitting diode plasma display or the like. User input may be received from the input devices e.g. keyboard mouse touchpad microphone and the like. In one embodiment the graphics processor may include a plurality of shader modules a rasterization module etc. Each of the foregoing modules may even be situated on a single semiconductor platform to form a graphics processing unit GPU .

In the present description a single semiconductor platform may refer to a sole unitary semiconductor based integrated circuit or chip. It should be noted that the term single semiconductor platform may also refer to multi chip modules with increased connectivity which simulate on chip operation and make substantial improvements over utilizing a conventional central processing unit CPU and bus implementation. Of course the various modules may also be situated separately or in various combinations of semiconductor platforms per the desires of the user.

The system may also include a secondary storage . The secondary storage includes for example a hard disk drive and or a removable storage drive representing a floppy disk drive a magnetic tape drive a compact disk drive digital versatile disk DVD drive recording device universal serial bus USB flash memory. The removable storage drive reads from and or writes to a removable storage unit in a well known manner.

Computer programs or computer control logic algorithms may be stored in the main memory and or the secondary storage . Such computer programs when executed enable the system to perform various functions. The memory the storage and or any other storage are possible examples of computer readable media.

In one embodiment the architecture and or functionality of the various previous figures may be implemented in the context of the central processor the graphics processor an integrated circuit not shown that is capable of at least a portion of the capabilities of both the central processor and the graphics processor a chipset i.e. a group of integrated circuits designed to work and sold as a unit for performing related functions etc. and or any other integrated circuit for that matter.

Still yet the architecture and or functionality of the various previous figures may be implemented in the context of a general computer system a circuit board system a game console system dedicated for entertainment purposes an application specific system and or any other desired system. For example the system may take the form of a desktop computer laptop computer server workstation game consoles embedded system and or any other type of logic. Still yet the system may take the form of various other devices including but not limited to a personal digital assistant PDA device a mobile phone device a television etc.

Further while not shown the system may be coupled to a network e.g. a telecommunications network local area network LAN wireless network wide area network WAN such as the Internet peer to peer network cable network or the like for communication purposes.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

