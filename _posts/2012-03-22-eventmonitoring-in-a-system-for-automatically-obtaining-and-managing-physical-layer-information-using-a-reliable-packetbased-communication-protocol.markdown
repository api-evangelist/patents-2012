---

title: Event-monitoring in a system for automatically obtaining and managing physical layer information using a reliable packet-based communication protocol
abstract: One exemplary embodiment is directed to a system comprising a plurality of connector assemblies. Each of the connector assemblies is configured to read information stored on or in physical communication media that is connected to the ports of the respective connector assembly. The system further comprises an aggregation point communicatively coupled to the plurality of connector assemblies. The aggregation point is configured to automatically discover the connector assemblies and cause each of the connector assemblies to send to the aggregation point at least some of the information read from the physical communication media that is connected to the ports of the respective connector assemblies. The aggregation point is configured to store at least some of the information sent by the connector assemblies to the aggregation point. A reliable packet-based communication protocol is used by the aggregation point to monitor events occurring at at least one connector assembly.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09497098&OS=09497098&RS=09497098
owner: CommScope Technologies LLC
number: 09497098
owner_city: Hickory
owner_country: US
publication_date: 20120322
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 61 467 743 filed on Mar. 25 2011 which is hereby incorporated herein by reference.

U.S. Provisional Patent Application Ser. No. 61 467 715 filed on Mar. 25 2011 titled DOUBLE BUFFER INSERTION COUNT STORED IN A DEVICE ATTACHED TO A PHYSICAL LAYER MEDIUM which is hereby incorporated herein by reference 

U.S. patent application Ser. No. 13 426 821 filed on even date herewith titled DOUBLE BUFFER INSERTION COUNT STORED IN A DEVICE ATTACHED TO A PHYSICAL LAYER MEDIUM which is hereby incorporated herein by reference 

U.S. Provisional Patent Application Ser. No. 61 467 725 filed on Mar. 25 2011 titled DYNAMICALLY DETECTING A DEFECTIVE CONNECTOR AT A PORT which is hereby incorporated herein by reference 

U.S. patent application Ser. No. 13 426 805 filed on even date herewith titled DYNAMICALLY DETECTING A DEFECTIVE CONNECTOR AT A PORT which is hereby incorporated herein by reference 

U.S. Provisional Patent Application Ser. No. 61 467 729 filed on Mar. 25 2011 titled IDENTIFIER ENCODING SCHEME FOR USE WITH MULTI PATH CONNECTORS which is hereby incorporated herein by reference 

U.S. patent application Ser. No. 13 426 794 filed on even date herewith titled IDENTIFIER ENCODING SCHEME FOR USE WITH MULTI PATH CONNECTORS which is hereby incorporated herein by reference 

U.S. Provisional Patent Application Ser. No. 61 467 736 filed on Mar. 25 2011 titled SYSTEMS AND METHODS FOR UTILIZING VARIABLE LENGTH DATA FIELD STORAGE SCHEMES ON PHYSICAL COMMUNICATION MEDIA SEGMENTS which is hereby incorporated herein by reference and

U.S. patent application Ser. No. 13 426 777 filed on even date herewith titled SYSTEMS AND METHODS FOR UTILIZING VARIABLE LENGTH DATA FIELD STORAGE SCHEMES ON PHYSICAL COMMUNICATION MEDIA SEGMENTS which is hereby incorporated herein by reference.

Communication networks typically include numerous logical communication links between various items of equipment. Often a single logical communication link is implemented using several pieces of physical communication media. For example a logical communication link between a computer and an inter networking device such as a hub or router can be implemented as follows. A first cable connects the computer to a jack mounted in a wall. A second cable connects the wall mounted jack to a port of a patch panel and a third cable connects the inter networking device to another port of a patch panel. A patch cord cross connects the two together. In other words a single logical communication link is often implemented using several segments of physical communication media.

A network or enterprise management system generally referred to here as a network management system or NMS is typically aware of the logical communication links that exist in a network but typically does not have information about the specific physical layer media that are used to implement the logical communication links. Indeed NMS systems typically do not have the ability to display or otherwise provide information about how logical communication links are implemented at the physical layer level.

Physical layer management PLM systems do exist. However existing PLM systems are typically designed to facilitate the adding changing and removing of cross connections at a particular patch panel or a set of patch panels at a given location. Generally such PLM systems include functionality to track what is connected to each port of a patch panel trace connections that are made using a patch panel and provide visual indications to a user at a patch panel. However such PLM systems are typically patch panel centric in that they are focused on helping a technician correctly add change or remove cross connections at a patch panel. Any intelligence included in or coupled to the patch panel is typically only designed to facilitate making accurate cross connections at the patch panel and troubleshooting related problems for example by detecting whether a patch cord is inserted into a given port and or by determining which ports are coupled to one another using a patch cord .

Moreover any information that such PLM systems collect is typically only used within the PLM systems. In other words the collections of information that such PLM systems maintain are logical islands that are not used at the application layer level by other systems. Though such PLM systems are sometimes connected to other networks for example connected to local area networks or the Internet such network connections are typically only used to enable a user to remotely access the PLM systems. That is a user remotely accesses the PLM related application layer functionality that resides in the PLM system itself using the external network connection but external systems or networks typically do not themselves include any application layer functionality that makes use of any of the physical layer related information that resides in the PLM system.

One exemplary embodiment is directed to a system comprising a plurality of connector assemblies. Each of the connector assemblies is configured to read information stored on or in physical communication media that is connected to the ports of the respective connector assembly. The system further comprises an aggregation point communicatively coupled to the plurality of connector assemblies. The aggregation point is configured to automatically discover the connector assemblies and cause each of the connector assemblies to send to the aggregation point at least some of the information read from the physical communication media that is connected to the ports of the respective connector assemblies. The aggregation point is configured to store at least some of the information sent by the connector assemblies to the aggregation point. A reliable packet based communication protocol is used by the aggregation point to monitor events occurring at at least one connector assembly.

Each segment of physical communication media is attached to a respective port . Each port is used to connect two or more segments of physical communication media to one another for example to implement a portion of a logical communication link . Examples of connector assemblies include for example rack mounted connector assemblies such as patch panels distribution units and media converters for fiber and copper physical communication media wall mounted connector assemblies such as boxes jacks outlets and media converters for fiber and copper physical communication media and inter networking devices such as switches routers hubs repeaters gateways and access points .

At least some of the connector assemblies are designed for use with segments of physical communication media that have identifier and attribute information stored in or on them. The identifier and attribute information is stored in or on the segment of physical communication media in a manner that enables the stored information when the segment is attached to a port to be read by a programmable processor associated with the connector assembly . Examples of information that can be stored in or on a segment of physical communication media include without limitation an identifier that uniquely identifies that particular segment of physical communication media similar to an ETHERNET Media Access Control MAC address but associated with the physical communication media and or connector attached to the physical communication media a part number a plug or other connector type a cable or fiber type and length a serial number a cable polarity a date of manufacture a manufacturing lot number information about one or more visual attributes of physical communication media or a connector attached to the physical communication media such as information about the color or shape of the physical communication media or connector or an image of the physical communication media or connector and other information used by an Enterprise Resource Planning ERP system or inventory control system. In other embodiments alternate or additional data is stored in or on the media segments. For example testing media quality or performance information can be stored in or on the segment of physical communication media. The testing media quality or performance information for example can be the results of testing that is performed when a particular segment of media is manufactured.

Also as noted below in some embodiments the information stored in or on the segment of physical communication media can be updated. For example the information stored in or on the segment of physical communication media can be updated to include the results of testing that is performed when a segment of physical media is installed or otherwise checked. In another example such testing information is supplied to an aggregation point and stored in a data store maintained by the aggregation point both of which are described below . In another example the information stored in or on the segment of physical communication media includes a count of the number of times that a connector not shown attached to a segment of physical communication media has been inserted into port . In such an example the count stored in or on the segment of physical communication media is updated each time the connector is inserted into port . This insertion count value can be used for example for warranty purposes for example to determine if the connector has been inserted more than the number of times specified in the warranty or for security purposes for example to detect unauthorized insertions of the physical communication media .

In the particular embodiment shown in each of the ports of the connector assemblies comprises a respective media interface via which the respective programmable processor is able to determine if a physical communication media segment is attached to that port and if one is to read the identifier and attribute information stored in or on the attached segment if such information is stored therein or thereon . The programmable processor associated with each connector assembly is communicatively coupled to each of the media interfaces using a suitable bus or other interconnect not shown .

In the particular embodiment shown in four exemplary types of connector assembly configurations are shown. In the first connector assembly configuration shown in each connector assembly includes its own respective programmable processor and its own respective network interface that is used to communicatively couple that connector assembly to an Internet Protocol IP network .

In the second type of connector assembly configuration a group of connector assemblies are physically located near each other for example in a bay or equipment closet . Each of the connector assemblies in the group includes its own respective programmable processor . However in the second connector assembly configuration some of the connector assemblies referred to here as interfaced connector assemblies include their own respective network interfaces while some of the connector assemblies referred to here as non interfaced connector assemblies do not. The non interfaced connector assemblies are communicatively coupled to one or more of the interfaced connector assemblies in the group via local connections. In this way the non interfaced connector assemblies are communicatively coupled to the IP network via the network interface included in one or more of the interfaced connector assemblies in the group. In the second type of connector assembly configuration the total number of network interfaces used to couple the connector assemblies to the IP network can be reduced. Moreover in the particular embodiment shown in the non interfaced connector assemblies are connected to the interfaced connector assembly using a daisy chain topology though other topologies can be used in other implementations and embodiments .

In the third type of connector assembly configuration a group of connector assemblies are physically located near each other for example within a bay or equipment closet . Some of the connector assemblies in the group also referred to here as master connector assemblies include both their own programmable processors and network interfaces while some of the connector assemblies also referred to here as slave connector assemblies do not include their own programmable processors or network interfaces . Each of the slave connector assemblies is communicatively coupled to one or more of the master connector assemblies in the group via one or more local connections. The programmable processor in each of the master connector assemblies is able to carry out the processing described below for both the master connector assembly of which it is a part and any slave connector assemblies to which the master connector assembly is connected via the local connections. As a result the cost associated with the slave connector assemblies can be reduced. In the particular embodiment shown in the slave connector assemblies are connected to a master connector assembly in a star topology though other topologies can be used in other implementations and embodiments .

Each programmable processor is configured to execute software or firmware shown in that causes the programmable processor to carry out various functions described below. The software comprises program instructions that are stored or otherwise embodied on an appropriate non transitory storage medium or media such as flash or other non volatile memory magnetic disc drives and or optical disc drives . At least a portion of the program instructions are read from the storage medium by the programmable processor for execution thereby. The storage medium on or in which the program instructions are embodied is also referred to here as a program product . Although the storage medium is shown in as being included in and local to the connector assembly it is to be understood that remote storage media for example storage media that is accessible over a network or communication link and or removable media can also be used. Each connector assembly also includes suitable memory not shown that is coupled to the programmable processor for storing program instructions and data. In general the programmable processor and the software executing thereon determines if a physical communication media segment is attached to a port with which that processor is associated and if one is to read the identifier and attribute information stored in or on the attached physical communication media segment if the segment includes such information stored therein or thereon using the associated media interface .

As shown in in the first second and third configurations and each programmable processor is also configured to communicate physical layer information to devices that are coupled to the IP network . The physical layer information PLI includes information about the connector assemblies associated with that programmable processor also referred to here as device information as well as information about any segments of physical media attached to the ports of those connector assemblies also referred to here as media information . The device information includes for example an identifier for each connector assembly a type identifier that identifies the connector assembly s type and port priority information that associates a priority level with each port. The media information includes identity and attribute information that the programmable processor has read from attached physical media segments that have identifier and attribute information stored in or on it. The media information may also include information about physical communication media that does not have identifier or attribute information stored in or on it. This latter type of media information can be manually input at the time the associated physical media segments are attached to the connector assembly for example using a management application executing on the programmable processor that enables a user to configure and monitor the connector assembly .

In the fourth type of connector assembly configuration a group of connector assemblies are housed within a common chassis or other enclosure. Each of the connector assemblies in the configuration includes their own programmable processors . In the context of this configuration the programmable processors in each of the connector assemblies are slave processors . Each of the slave programmable processor is also communicatively coupled to a common master programmable processor for example over a backplane included in the chassis or enclosure . The master programmable processor is coupled to a network interface that is used to communicatively couple the master programmable processor to the IP network . In this configuration each slave programmable processor is configured to determine if physical communication media segments are attached to its port and to read the identifier and attribute information stored in or on the attached physical communication media segments if the attached segments have such information stored therein or thereon using the associated media interfaces . This information is communicated from the slave programmable processor in each of the connector assemblies in the chassis to the master processor . The master processor is configured to handle the processing associated with communicating the physical layer information read from by the slave processors to devices that are coupled to the IP network .

The system includes functionality that enables the physical layer information that the connector assemblies capture to be used by application layer functionality outside of the traditional physical layer management application domain. That is the physical layer information is not retained in a PLM island used only for PLM purposes but is instead made available to other applications. In the particular embodiment shown in the system includes an aggregation point that is communicatively coupled to the connector assemblies via the IP network .

The aggregation point includes functionality that obtains physical layer information from the connector assemblies and other devices and stores the physical layer information in a data store.

The aggregation point can be used to receive physical layer information from various types of connector assemblies that have functionality for automatically reading information stored in or on the segment of physical communication media. Examples of such connector assemblies are noted above. Also the aggregation point and aggregation functionality can also be used to receive physical layer information from other types of devices that have functionality for automatically reading information stored in or on the segment of physical communication media. Examples of such devices include end user devices such as computers peripherals such as printers copiers storage devices and scanners and IP telephones that include functionality for automatically reading information stored in or on the segment of physical communication media.

The aggregation point can also be used to obtain other types of physical layer information. For example in this embodiment the aggregation point also obtains information about physical communication media segments that is not otherwise automatically communicated to an aggregation point . One example of such information is information about non connectorized physical communication media segments that do not otherwise have information stored in or on them that are attached to a connector assembly including for example information indicating which ports of the devices are connected to which ports of other devices in the network as well as media information about the segment . Another example of such information is information about physical communication media segments that are connected to devices that are not able to read media information that is stored in or on the media segments that are attached to their ports and or that are not able to communicate such information to the aggregation point for example because such devices do not include such functionality because such devices are used with media segments that do not have media information stored in or on them and or because bandwidth is not available for communicating such information to the aggregation point . In this example the information can include for example information about the devices themselves such as the devices MAC addresses and IP addresses if assigned to such devices information indicating which ports of the devices are connected to which ports of other devices in the network for example other connector assemblies and information about the physical media attached to the ports of the devices. This information can be provided to the aggregation point for example by manually entering such information into a file such as a spreadsheet and then uploading the file to the aggregation point for example using a web browser in connection with the initial installation of each of the various items. Such information can also for example be directly entered using a user interface provided by the aggregation point for example using a web browser .

The aggregation point can also obtain information about the layout of the building or buildings in which the network is deployed as well as information indicating where each connector assembly physical media segment and inter networking device is located within the building. This information can be for example manually entered and verified for example using a web browser in connection with the initial installation of each of the various items. In one implementation such location information includes an X Y and Z location for each port or other termination point for each physical communication media segment for example X Y and Z location information of the type specified in the ANSI TIA EIA 606 A Standard Administration Standard For The Commercial Telecommunications Infrastructure .

The aggregation point can obtain and maintain testing media quality or performance information relating to the various segments of physical communication media that exist in the network. The testing media quality or performance information for example can be results of testing that is performed when a particular segment of media is manufactured and or when testing is performed when a particular segment of media is installed or otherwise checked.

The aggregation point also includes functionality that provides an interface for external devices or entities to access the physical layer information maintained by the aggregation point . This access can include retrieving information from the aggregation point as well as supplying information to the aggregation point . In this embodiment the aggregation point is implemented as middleware that is able to provide such external devices and entities with transparent and convenient access to the PLI maintained by the access point . Because the aggregation point aggregates PLI from the relevant devices on the IP network and provides external devices and entities with access to such PLI the external devices and entities do not need to individually interact with all of the devices in the IP network that provide PLI nor do such devices need to have the capacity to respond to requests from such external devices and entities.

The aggregation point in the embodiment shown in implements an application programming interface API by which application layer functionality can gain access to the physical layer information maintained by the aggregation point using a software development kit SDK that describes and documents the API. Also in those embodiments where the connector assemblies include one or more light emitting diodes LEDs for example where each port has an associated LED the API and aggregation point can include functionality that enables application layer functionality to change the state of such LEDs using the API.

For example as shown in a network management system NMS includes physical layer information PLI functionality that is configured to retrieve physical layer information from the aggregation point and provide it to the other parts of the NMS for use thereby. The NMS uses the retrieved physical layer information to perform one or more network management functions for example as described below . In one implementation of the embodiment shown in the PLI functionality of the NMS retrieves physical layer information from the aggregation point using the API implemented by the aggregation point . The NMS communicates with the aggregation point over the IP network .

As shown in an application executing on a computer can also use the API implemented by the aggregation point to access the PLI information maintained by the aggregation point for example to retrieve such information from the aggregation point and or to supply such information to the aggregation point . The computer is coupled to the IP network and accesses the aggregation point over the IP network .

In the embodiment shown in one or more inter networking devices used to implement the IP network include physical layer information PLI functionality . The PLI functionality of the inter networking device is configured to retrieve physical layer information from the aggregation point and use the retrieved physical layer information to perform one or more inter networking functions. Examples of inter networking functions include Layer 1 Layer 2 and Layer 3 of the OSI model inter networking functions such as the routing switching repeating bridging and grooming of communication traffic that is received at the inter networking device. In one implementation of such an embodiment the PLI functionality uses the API implemented by the aggregation point to communicate with the aggregation point .

The PLI functionality included in the inter networking device can also be used to capture physical layer information associated with the inter network device and the physical communication media attached to it and communicate the captured physical layer information to the aggregation point . Such information can be provided to the aggregation point using the API or by using the protocols that are used to communicate with the connector assemblies .

The aggregation point can be implemented on a standalone network node for example a standalone computer running appropriate software or can be integrated along with other network functionality for example integrated with an element management system or network management system or other network server or network element . Moreover the functionality of the aggregation point can be distributed across many nodes and devices in the network and or implemented for example in a hierarchical manner for example with many levels of aggregation points .

Moreover the aggregation point and the connector assemblies are configured so that the aggregation point can automatically discover and connect with devices that provide PLI to an aggregation point such as the connector assemblies and inter network device that are on the network . In this way when devices that are able to provide PLI to an aggregation point such as a connector assembly or an inter networking device are coupled to the IP network an aggregation point is able to automatically discover the connector assembly and start aggregating physical layer information for that connector assembly without requiring the person installing the connector assembly to have knowledge of the aggregation points that are on the IP network . Similarly when an aggregation point is coupled to the IP network the aggregation point is able to automatically discover and interact with devices that are capable of providing PLI to an aggregation point without requiring the person installing the aggregation point to have knowledge of the devices that are on the IP network . Thus the physical layer information resources described here can be easily integrated into the IP network .

The IP network can include one or more local area networks and or wide area networks including for example the Internet . As a result the aggregation point NMS and computer need not be located at the same site as each other or at the same site as the connector assemblies or the inter networking devices .

Various conventional IP networking techniques can be used in deploying the system of . For example conventional security protocols can be used to secure communications if they are communicated over a public or otherwise unsecure communication channel such as the Internet or over a wireless communication link .

In one implementation of the embodiment shown in each connector assembly each port of each connector assembly and each media segment is individually addressable. Where IP addresses are used to individually address each connector assembly a virtual private network VPN dedicated for use with the various connector assemblies can be used to segregate the IP addresses used for the connector assemblies from the main IP address space that is used in the IP network .

Also power can be supplied to the connector assemblies using conventional Power over Ethernet techniques specified in the IEEE 802.3af standard which is hereby incorporated herein by reference. In such an implementation a power hub or other power supplying device located near or incorporated into an inter networking device that is coupled to each connector assembly injects DC power onto one or more of the wires also referred to here as the power wires included in the copper twisted pair cable used to connect each connector assembly to the associated inter networking device. The interface in the connector assembly picks the injected DC power off of the power wires and uses the picked off power to power the active components of that connector assembly . In the second and third connector assembly configurations and some of the connector assemblies are not directly connected to the IP network and therefore are unable to receive power directly from the power wires. These connector assemblies receive power from the connector assemblies that are directly connected to the IP network via the local connections that communicatively couple such connector assemblies to one another. In the fourth configuration the interface picks the injected DC power off of the power wires and supplies power to the master processor and each of the slave processors over the backplane.

In the particular embodiment shown in the system also supports conventional physical layer management PLM operations such as the tracking of moves adds and changes of the segments of physical media that are attached to the ports of the connector assemblies and providing assistance with carrying out moves adds and changes also referred to here as a MAC or move add change . PLI provided by the aggregation point can be used to improve upon conventional guided MAC processes. For example information about the location of the port and the visual appearance for example the color or shape of the relevant physical media segment or connector attached thereto can be communicated to a technician to assist the technician in carrying out a move add or change. This information can be communicated to a computer or smartphone used by the technician. Moreover the PLI functionality that resides in the system can also be used to verify that a particular MAC was properly carried out by checking that the expected physical media segment is located in the expected port . If that is not the case an alert can be sent to the technician so that the technician can correct the issue.

The PLM functionality included in the system can also support conventional techniques for guiding the technician in carrying out a move add change for example by illuminating one or more light emitting diodes LEDs to direct a technician to a particular connector assembly and or to a particular port or by displaying messages on a liquid crystal display LCD included on or near the connector assemblies .

Other PLM functions include keeping historical logs about the media connected to the connector assembly. In the embodiment shown in the aggregation point includes PLM functionality that implements such PLM functions. The PLM functionality does this using the physical layer information that is maintained at the aggregation point .

The IP network is typically implemented using one or more inter networking devices. As noted above an inter networking device is a type of connector assembly and a particular implementation of an inter networking device is referenced separately in for ease of explanation only . Generally an inter networking device can be configured to read media information that is stored in or on the segments of physical media that are attached to its ports and to communicate the media information it reads from the attached segments of media as well as information about the inter networking device itself to an aggregation point like any other connector assembly described here.

In addition to connector assemblies the techniques described here for reading media information stored in or on a segment of physical communication media can be used in one or more end nodes of the IP network . For example computers such as laptops servers desktop computers or special purpose computing devices such as IP telephones IP multi media appliances and storage devices can be configured to read media information that is stored in or on the segments of physical communication media that are attached to their ports and to communicate the media information they read from the attached segments of media as well as information about the devices themselves to an aggregation point as described here.

In one implementation of the system shown in the ports of each connector assembly are used to implement the IP network over which each connector assembly communicates physical layer information associated with that connector assembly . In such an implementation such physical layer information is communicated over the IP network just like any other data that is communicated over the IP network . As noted below the media interface determines if a physical communication media segment is attached to the corresponding port and if one is reads the identifier and attribute information stored in or on the attached segment if such information is stored therein or thereon without affecting the normal data signals that pass through that port . Indeed such physical layer information may actually pass through one or more of the ports of connector assemblies in the course of being communicated to and or from a connector assembly aggregation point network management system and or computer . By using the IP network to communicate physical layer information pertaining to it a separate network need not be provided and maintained in order to communicate such physical layer information. However in other implementations and embodiments the physical layer information described above is communicated using a network that is separate from the network to which such physical layer information pertains.

Each port comprises a first attachment point and a second attachment point . The first attachment point is used to attach a first segment of physical communication media to the port and the second attachment point is used to attach a second segment of physical communication media to the port .

In the particular embodiment shown in the first attachment point is located near the rear of the connector assembly. As a consequence the first attachment point and the first segment of physical media attached thereto are also referred to here as the rear attachment point and the rear media segment respectively. Also in this embodiment the rear attachment point is configured to attach the rear media segment to the port in a semi permanent manner. As used herein a semi permanent attachment is one that is designed to be changed relatively infrequently if ever. This is also referred to sometimes as a one time connection. Examples of suitable rear connectors include punch down blocks in the case of copper physical media and fiber adapters fiber splice points and fiber termination points in the case of optical physical media .

In the embodiment shown in the second attachment point is located near the front of the connector assembly . As a consequence the second attachment point and the second segment of physical media are also referred to here as the front attachment point and the front media segment respectively. In the embodiment shown in the front attachment point for each port is designed for use with connectorized front media segments that have identifier and attribute information stored in or on them. As used herein a connectorized media segment is a segment of physical communication media that includes a connector at at least one end of the segment. The front attachment point is implemented using a suitable connector or adapter that mates with the corresponding connector on the end of the front media segment . The connector is used to facilitate the easy and repeated attachment and unattachment of the front media segment to the port . Examples of connectorized media segments include CAT 5 6 and 7 twisted pair cables having modular connectors or plugs attached to both ends in which case the front connectors are implemented using compatible modular jacks or optical cables having SC LC FC LX.5 MTP or MPO connectors in which case the front connectors are implemented using compatible SC LC FC LX.5 MTP or MPO connectors or adapters . The techniques described here can be used with other types of connectors including for example BNC connectors F connectors DSX jacks and plugs bantam jacks and plugs and MPO and MTP multi fiber connectors and adapters.

Each port communicatively couples the respective rear attachment point to the respective front attachment point . As a result a rear media segment attached to the respective rear attachment point is communicatively coupled to any front media segment attached to the respective front attachment point . In one implementation each port is designed for use with a rear media segment and a front media segment that comprise the same type of physical communication media in which case each port communicatively couples any rear media segment attached to the respective rear attachment point to any front media segment attached to the respective front attachment point at the physical layer level without any media conversion. In other implementations each port communicatively couples any rear media segment attached to the respective rear attachment point to any front media segment attached to the respective front attachment point in other ways for example using a media converter if the rear media segment and the front media segment comprise different types of physical communication media .

In the exemplary embodiment shown in the port is configured for use with front media segments that include a storage device in which the media information for that media segment is stored. The storage device includes a storage device interface that when the corresponding connector is inserted into or otherwise attached to a front attachment point of the port communicatively couples the storage device to a corresponding media interface so that the associated programmable processor can read the information stored in the storage device . In one implementation of the embodiment shown in each connector itself houses the storage device . In another implementation of such an embodiment the storage device is housed within a housing that is separate from the connector . In such an implementation the housing is configured so that it can be snapped onto the media segment or the connector with the storage device interface positioned relative to the connector so that the storage device interface will properly mate with the media interface when the connector is inserted into or otherwise attached to the front attachment point . Although in the exemplary embodiment shown in only the front media segments include storage devices it is to be understood that in other embodiments connector assemblies and or other devices are configured to read storage devices that are attached to or otherwise included with rear media segments and or any auxiliary media segments for example media segments coupled to the network interface .

In some implementations at least some of the information stored in the storage device can be updated in the field for example by having an associated programmable processor cause additional information to be written to the storage device or changing or deleting information that was previously stored in the storage device . For example in some implementations some of the information stored in the storage device cannot be changed in the field for example identifier information or manufacturing information while some of the other information stored in the storage device can be changed in the field for example testing media quality or performance information . In other implementations none of the information stored in the storage device can be updated in the field.

Also the storage device may also include a processor or micro controller in addition to storage for the media information. In which case the micro controller included in the storage device can be used to execute software or firmware that for example controls one or more LEDs attached to the storage device . In another example the micro controller executes software or firmware that performs an integrity test on the front media segment for example by performing a capacitance or impedance test on the sheathing or insulator that surrounds the front physical communication media segment which may include a metallic foil or metallic filler for such purposes . In the event that a problem with the integrity of the front media segment is detected the micro controller can communicate that fact to the programmable processor associated with the port using the storage device interface . The micro controller can also be used for other functions.

The port connector storage device and media interface are configured so that the information stored in the storage device can be read without affecting the communication signals that pass through the media segments and .

Further details regarding system and the port can be found in the following United States Patent Applications all of which are hereby incorporated herein by reference U.S. Provisional Patent Application Ser. No. 61 152 624 filed on Feb. 13 2009 titled MANAGED CONNECTIVITY SYSTEMS AND METHODS also referred to here as the 624 application U.S. patent application Ser. No. 12 705 497 filed on Feb. 12 2010 titled AGGREGATION OF PHYSICAL LAYER INFORMATION RELATED TO A NETWORK is also referred to here as the 497 application U.S. patent application Ser. No. 12 705 501 filed on Feb. 12 2010 titled INTER NETWORKING DEVICES FOR USE WITH PHYSICAL LAYER INFORMATION also referred to here as the 501 application U.S. patent application Ser. No. 12 705 506 filed on Feb. 12 2010 titled NETWORK MANAGEMENT SYSTEMS FOR USE WITH PHYSICAL LAYER INFORMATION also referred to here as the 506 application U.S. patent application Ser. No. 12 705 514 filed on Feb. 12 2010 titled MANAGED CONNECTIVITY DEVICES SYSTEMS AND METHODS also referred to here as the 514 application U.S. Provisional Patent Application Ser. No. 61 252 395 filed on Oct. 16 2009 titled MANAGED CONNECTIVITY IN ELECTRICAL SYSTEMS AND METHODS THEREOF also referred to here as the 395 application U.S. Provisional Patent Application Ser. No. 61 253 208 filed on Oct. 20 2009 titled ELECTRICAL PLUG FOR MANAGED CONNECTIVITY SYSTEMS also referred to here as the 208 application U.S. Provisional Patent Application Ser. No. 61 252 964 filed on Oct. 19 2009 titled ELECTRICAL PLUG FOR MANAGED CONNECTIVITY SYSTEMS also referred to here as the 964 application U.S. Provisional Patent Application Ser. No. 61 252 386 filed on Oct. 16 2009 titled MANAGED CONNECTIVITY IN FIBER OPTIC SYSTEMS AND METHODS THEREOF also referred to here as the 386 application U.S. Provisional Patent Application Ser. No. 61 303 961 filed on Feb. 12 2010 titled FIBER PLUGS AND ADAPTERS FOR MANAGED CONNECTIVITY the 961 application and U.S. Provisional Patent Application Ser. No. 61 303 948 filed on Feb. 12 2010 titled BLADED COMMUNICATIONS SYSTEM the 948 application .

Each plug also comprises or is attached to a storage device for example an Electrically Erasable Programmable Read Only Memory EEPROM or other non volatile memory device . The media information described above for the patch cord is stored in the storage device . The storage device includes sufficient storage capacity to store such information. Each storage device also includes a storage device interface that when the corresponding plug is inserted into a front connector of a port communicatively couples the storage device to the corresponding media reading interface so that the programmable processor in the corresponding patch panel can read the information stored in the storage device .

Examples of such a patch cord and plug are described in the 395 application the 208 application and the 964 application.

Each LC connector also comprises or is attached to a storage device for example an Electrically Erasable Programmable Read Only Memory EEPROM or other non volatile memory device . The media information described above for the patch cord is stored in the storage device . The storage device includes sufficient storage capacity to store such information. Each storage device also includes a storage device interface that when the corresponding LC connector is inserted into a front connector of a port communicatively couples the storage device to the corresponding media reading interface so that the programmable processor in the corresponding fiber patch panel can read the information stored in the storage device .

In some implementations of the patch cords and the storage devices and are implemented using a surface mount EEPROM or other non volatile memory device. In such implementations the storage device interfaces and media reading interfaces each comprise four leads a power lead a ground lead a data lead and an extra lead that is reserved for future use. In one such implementation an EEPROM that supports a serial protocol is used where the serial protocol is used for communicating over the signal data lead. The four leads of the storage device interfaces come into electrical contact with four corresponding leads of the media reading interface when the corresponding plug or connector is inserted in the corresponding front connector of a port . Each storage device interface and media reading interface are arranged and configured so that they do not interfere with data communicated over the patch cord. In other embodiments other types of interfaces are used. For example in one such alternative embodiment a two line interface is used with a simple charge pump. In other embodiments additional lines are provided for example for potential future applications .

Examples of such fiber patch cords and connectors are described in U.S. Provisional Patent Application Ser. No. 61 252 386 filed on Oct. 16 2009 titled MANAGED CONNECTIVITY IN FIBER OPTIC SYSTEMS AND METHODS THEREOF also referred to here as the 386 application U.S. Provisional Patent Application Ser. No. 61 303 961 filed on Feb. 12 2010 titled FIBER PLUGS AND ADAPTERS FOR MANAGED CONNECTIVITY the 961 application and U.S. Provisional Patent Application Ser. No. 61 303 948 filed on Feb. 12 2010 titled BLADED COMMUNICATIONS SYSTEM the 948 application . The 386 application the 961 application and the 948 application are hereby incorporated herein by reference.

In some implementations of the patch cords and each plug or connector itself houses the respective storage device and storage device interface. In implementations each storage device and corresponding storage device interface are housed within a housing that is separate from the corresponding plug or connector. In such implementations the housing is configured so that it can be snapped onto or otherwise attached to the cable or the plug or connector with the storage device interface positioned relative to the plug or connector so that the storage device interface will properly mate with the relevant media reading interface when the plug or connector is inserted into the front connector of the corresponding port.

Moreover functionality described here as being implemented in software executing on a programmable processor can be implemented in other ways. For example such functionality can be implemented in hardware using discrete hardware application specific integrated circuits ASICS programmable devices such as field programmable gate arrays FPGAs or complex programmable logic devices CPLDs and or combinations of one or more of the foregoing and or combinations of one or more of the foregoing along with software executing on one or more programmable processors. For example the detection of the insertion of a connector into a port of a connector assembly and or the reading of information from any storage device attached to the connector can be implemented in hardware for example using one or more programmable devices and or an ASIC in addition to or instead of being implemented as software.

As noted above the aggregation point is configured to automatically discover and connect to devices such as connector assemblies that are able to provide PLI and other information to the aggregation point . In some embodiments of system the aggregation point is configured to monitor events occurring at each of the connector assemblies . For example where the connector assemblies comprise patch panels the aggregation point can be configured to monitor events associated with a patch cord being inserted into or removed from a port of that patch panel.

Some event monitoring schemes use the Simple Network Management Protocol SNMP . In some SNMP based event monitoring schemes an SNMP client is configured to send SNMP traps to a SNMP management station to notify the management station of the occurrence of events associated with that SNMP agent. However since SNMP is based on the User Data Protocol UDP which is a connection less and unreliable protocol SNMP traps may arrive out of order appear duplicated or go missing without the management station or SNMP agent noticing.

Also in some usage scenarios for embodiments of system a user such as a technician who is causing events to occur at a particular connector assembly for example by inserting or removing a patch cord into or from a port of a patch panel will use a laptop handheld computer smartphone or other device to establish a connection with an aggregation point and display on that device information about the current state of that particular connector assembly . For example a graphical representation of the patch panel and the status of the ports thereof can be displayed on the user s device with a visual indication of whether or not a patch cord is inserted into each port of the patch panel. When the user inserts a patch cord into a previously open port of the patch panel or removes a patch cord from a previously occupied port of the patch panel it is desirable that the graphical representation of the patch panel be updated sufficiently fast so that the user is unable to perceive any latency between inserting or removing the patch cord and the graphical representation of the patch panel being updated to reflect that event. This typically requires the update to take no more than 250 milliseconds.

In the exemplary embodiment shown in the aggregation point is described here as being implemented for use in the system of though other embodiments can be implemented in other ways. The aggregation point is typically implemented as software that executes on a workstation or other computer . The workstation comprises at least one programmable processor on which the software executes. The software comprises program instructions that are stored or otherwise embodied on an appropriate non transitory storage medium or media from which at least a portion of the program instructions can be read by the programmable processor for execution thereby. The storage medium on or in which the program instructions are embodied is also referred to here as a program product . Although the storage medium is shown in as being included in and local to the workstation it is to be understood that remote storage media for example storage media that is accessible over a network or communication link and or removable media can also be used. The workstation also comprises memory for storing the program instructions and any related data during execution of the software .

The workstation on which the aggregation point software executes also includes one or more interfaces that communicatively couple the aggregation point to devices or entities with which it communicates. More specifically the one or more interfaces communicatively couple the aggregation point to these devices or entities over the IP network . In one implementation of such an embodiment at least one of the interfaces comprises an ETHERNET network interface for coupling the aggregation point to the one or more IP networks which are implemented at least in part using ETHERNET local area networks .

The aggregation point software comprises aggregation software that enables the aggregation point to automatically discover and communicate with devices for example connector assemblies such as patch panels that are able provide PLI and other information to the aggregation point . The aggregation point and the aggregation software can be used to receive physical layer information from various types of connector assemblies that have functionality for automatically reading information stored in or on a segment of physical communication media. Examples of such devices are noted above and include for example patch panels and inter networking devices. Also the aggregation point and aggregation software can also be used to receive physical layer information from other types of devices that have functionality for automatically reading information stored in or on the segment of physical communication media. Examples of such devices include end user devices such as computers peripherals for example printers copiers storage devices and scanners and IP telephones that include functionality for automatically reading information stored in or on the segment of physical communication media.

In the exemplary embodiment shown in the aggregation software is configured to use one or more discovery protocols to discover devices that are able to provide PLI information to the aggregation point assuming those devices also support those discovery protocols . Likewise when the aggregation point is connected to the IP network the PLI aggregation software uses the discovery protocols to broadcast an informational message to all the nodes on the IP network . In this way when devices that are able to provide PLI to the aggregation point are coupled to the IP network the aggregation points is able to automatically discover the device and start aggregating physical layer information for that device without requiring a technician installing the device to know about the aggregation points that are on the network . Similarly when the aggregation point is coupled to the network the aggregation point is able to automatically discover and interact with devices that are capable of providing PLI to the aggregation point without requiring the technician installing the aggregation point to know about such devices that are on the network . Thus the physical layer information resources described here can be easily integrated into the network . Additional details regarding the discovery protocol are provided in the 497 application.

In the exemplary embodiment shown in the aggregation software is also configured to obtain physical layer information from the devices for example devices such as patch panels it has discovered using the discovery protocol. A database manager DBM is used to store the information that the aggregation software obtains in a database . In the exemplary embodiment shown in the database is shown as being stored on the same storage medium as the software though it is to be understood that this need not be the case. Moreover though the database is shown in as being stored on a storage medium that is included in and local to the workstation it is to be understood that remote storage media for example storage media that is accessible over a network or communication link and or removable media can also be used.

In the particular embodiment shown in the aggregation software uses one or more appropriate protocols to communicate physical layer information to and from such devices. The devices that the aggregation point receives information from also implement at least some of the protocols implemented by the aggregation point to organize track store and communicate physical layer information. Additional details regarding this are provided in the 497 application.

The aggregation point and aggregation software can also be used to obtain other types of physical layer information. For example in this embodiment the aggregation software also obtains information about physical communication media segments that is not otherwise automatically communicated to an aggregation point . One example of such information is information about non connectorized cables that do not otherwise have information stored in or on them that are attached to a patch panel or other connector assembly including for example information indicating which ports of the patch panel are connected to which ports of other devices in the network by a particular patch cord as well as media information about the patch cord .

Another example of such information is information about patch cords or other physical layer communication media that are connected to devices that are not able to read media information that is stored in or on the patch cords that are attached to their ports and or that are not able to communicate such information to the aggregation point for example because such devices do not include such functionality because such devices are used with patch cords that do not have media information stored in or on them and or because bandwidth is not available for communicating such information to the aggregation point . In this example this information can include for example information about the devices themselves such as the devices MAC addresses and IP addresses if assigned to such devices information indicating which ports of the devices are connected to which ports of other devices in the network and information about the physical media attached to the ports of the devices. This information can be provided to the aggregation point for example by manually entering such information into a file such as a spreadsheet and then uploading the file to the aggregation point in connection with the initial installation of each of the various devices. Such information can also for example be directly entered using a user interface provided by the aggregation point for example using a web browser . In the embodiment shown in the aggregation point software includes a web server to facilitate the upload of files and or the direct entry of such manually entered information.

The aggregation software can also obtain information about the layout of the building or buildings in which the network is deployed as well as information indicating where each patch panel or other connector assembly patch cord or other item of physical communication media and inter networking device is located within the building as well as testing media quality or performance information relating to the various items of physical communication media that exist in the network.

The aggregation software is also configured to provide an interface for external devices or entities to access the physical layer information maintained by the aggregation point . This access can include retrieving information from the aggregation point as well as supplying information to the aggregation point . In this embodiment the aggregation point is implemented as middleware that is able to provide such external devices and entities with transparent and convenient access to the PLI maintained by the access point . Because the aggregation point aggregates PLI from the relevant devices on the IP network and provides external devices and entities with access to such PLI the external devices and entities do not need to individually interact with all of the devices in the IP network that provide PLI nor do such devices need to have the capacity to respond to requests from such external devices and entities.

The aggregation software in the embodiment shown in implements an application programming interface API by which application layer functionality in such other devices can gain access to the physical layer information maintained by the aggregation point using a software development kit SDK that describes and documents the API. In one implementation of such an embodiment the aggregation software is configured to use the Simple Object Access Protocol SOAP protocol for communications between the aggregation point and such external devices or entities. In other implementations other protocols can be used for example the SNMP protocols .

For example an application shown in executing on a computer can use the API provided by the aggregation point to access the PLI information maintained by the aggregation point for example to retrieve such information from the aggregation point and or to supply information to the aggregation point . The computer is coupled to the network and accesses the aggregation point over the network . As noted above one example of such an application is configured to display for a user a graphical representation of a particular patch panel or other connector assembly and the status of the ports thereof with a visual indication of whether or not a patch cord or other item of physical communication media is inserted into each port of the patch panel.

In the particular exemplary embodiment shown in the aggregation software is also configured to monitor events occurring at each of the connector assemblies for which that aggregation point aggregates information. The software that is used to implement the aggregation point includes TCP software for example provided as a part of a TCP IP protocol stack included with the operating system executed by the workstation . The TCP software is also referred to here as the aggregation point TCP software . As described in more detail below the aggregation software uses the TCP protocol and the TCP software to monitor events occurring at the connector assemblies for which that aggregation point aggregates information.

In the exemplary embodiment shown in each programmable processor or associated with each of the connector assemblies runs software that interacts with the aggregation point . The software comprises program instructions that are stored or otherwise embodied on an appropriate non transitory storage medium or media from which at least a portion of the program instructions can be read by the programmable processor or for execution thereby. The storage medium on or in which the program instructions are embodied is also referred to here as a program product . Although the storage medium is shown in as being included in and local to the connector assembly it is to be understood that remote storage media for example storage media that is accessible over a network or communication link and or removable media can also be used.

The software is also referred to here as connector assembly software . The connector assembly software includes TCP software also referred to here as the connector assembly TCP software that implements the TCP protocol in order to communicate with the aggregation point TCP software . As described in more detail below the connector assembly software uses the connector assembly TCP software to notify the aggregation point more specifically the aggregation software of any events that occur at any associated connector assembly . For example in master slave connector assembly configurations such as configurations and shown in the programmable processor in the master connector assembly in the case of configuration and the master programmable processor in the case of configuration executes the connector assembly software for all of the connector assemblies that are included in that configuration . In connector assembly configurations where each connector assembly includes a peer programmable processor that communicates with the aggregation point such as configurations and shown in each programmable processor in each of the connector assemblies executes the connector assembly software .

One example of how event monitoring can be performed using a reliable packet based communication protocol is shown in . is a flow diagram of one exemplary embodiment of a method of aggregating information received from one or more connector assemblies . In this example the processing of method is described here as being performed by a particular entity in the system that is the software executing on the aggregation point though it is to be understood that other embodiments can be implemented in other ways. is a flow diagram of one exemplary embodiment of a method of reporting event information to an aggregation point . In this example the processing of method is described here as being performed by a second entity in the system that is an instance of the connector assembly software though it is to be understood that other embodiments can be implemented in other ways.

In the example shown in the reliable packet based communication protocol that is used is TCP. However it is to be understood that other reliable packet based communication protocols such as RUDP and reliable protocols built directly on top of the ETHERNET protocol can be used in other embodiments. Also this example is described here as being implemented in the embodiment of system described here in connection with though other embodiments can be implemented in other ways .

For ease of explanation the example shown in is described here with respect to a single instance of the connector assembly software executing on a programmable processor or . As noted above each such instance of the connector assembly software is associated with one or more connector assemblies . However it is to be understood that the processing described below in connection with is typically implemented for each instance of the connector assembly software that the aggregation point aggregates information for. Also the processing described below in connection with is implemented by each instance of the connector assembly software .

In the exemplary embodiment shown the aggregation software is configured to use the aggregation point TCP software to repeatedly initiate the establishment of a TCP connection with the connector assembly software block . TCP is used to establish the connection and as a result reliability features of TCP are used in connection with establishing the connection for example the use of acknowledgements . As a part of the TCP processing performed by the aggregation point TCP software in attempting to establish a TCP connection the aggregation point TCP software determines if each TCP connection was successfully established block . For example if a particular TCP connection is not established within a predetermined timeout period also referred to as the connection timeout period the aggregation point TCP software considers the attempted establishment of that TCP connection to have failed. A failure to successfully establish a TCP connection with the connector assembly software indicates that the connector assembly software and the associated one or more connector assemblies are not reachable at that time. If an attempt to successfully establish a TCP connection with the connector assembly software fails the aggregation software is configured to update the status of all the connector assemblies associated with that instance of the connector assembly software to an unreachable status block . The aggregation software can also be configured to raise an alarm and or take some action to confirm whether that instance of the connector assembly software is unreachable.

The aggregation point TCP software is configured to keep each TCP connection open for a first predetermined amount of time also referred to here as the connection period . TCP includes various features for keeping a connection alive or open for a predetermined period of time for example sending of and checking for keepalive messages and or using of various timers .

Also as described below in connection with the connector assembly software is configured for each connection that is established to send a no event message to the aggregation point using that TCP connection if a second predetermined amount of time also referred to here as the monitoring period elapses without the connector assembly software having sent any event information to the aggregation point using that TCP connection. The connection period is equal to the monitoring period plus a third predetermined amount time that is at least equal to the expected amount of time for the no event message to be reliably sent to the aggregation point on the TCP connection. In one exemplary implementation of such an embodiment a connection period of 40 seconds and a monitoring period 30 seconds are used. Other connection periods and or monitoring periods can also be used.

In the particular exemplary embodiment shown in the aggregation software and the connector assembly software are both configured to note when each respective TCP connection has been established per the TCP protocol and start a timer or similar timing mechanism to determine when the connection period and the monitoring period respectively have elapsed for that TCP connection.

Once a TCP connection is established the aggregation software sends a request to the connector assembly software for information about the next event block . In the exemplary embodiment described here in connection with each instance of the connector assembly software consecutively numbers the events that occur at an associated connector assembly . The event information provided to the aggregation software includes the event number of the event to which the event information relates. In this embodiment the request that the aggregation software sends to the connector assembly software specifies an event number. The event number specified in the request is one more than event number of the last event the aggregation software has received event information for. That is the next event is the event that has an event number that follows the event number of the last event the aggregation software has received event information for.

This request and the subsequent response can be implemented using various high layer protocols examples of which include without limitation the File Transfer Protocol FTP the Trivial File Transfer Protocol TFTP the Hypertext Transfer Protocol HTTP the Simple Network Management Protocol SNMP the Representational State Transfer REST protocol and the Simple Object Access Protocol SOAP . The request is sent over the currently established TCP connection.

Generally when the connector assembly software determines that an event has occurred at an associated connector assembly the connector assembly software obtains information about that event including PLI buffers the event information and when requested to do so by the aggregation software sends information about the event to the aggregation software over a TCP connection. Also as described below in connection with if the current monitoring period elapses without the requested next event having occurred at an associated connector assembly the connector assembly software sends a no event message to the aggregation software using the established TCP connection. In either case when data is received on the TCP connection from the connector assembly software block the aggregation software reads the data from the TCP connection block .

If the data read from the TCP connection is information about the requested next event block the aggregation software uses the database manager to update the database with the event information received from the connector assembly software block . Then the aggregation software uses the TCP protocol to reliably close the current TCP connection block . As a part of the TCP protocol each of the entities communicating over a TCP connection must independently send to the other entity a TCP CLOSE message the receipt of which is acknowledged per the TCP protocol. A failure to successfully close a TCP connection that was established with the connector assembly software checked in block indicates to the aggregation software that the connector assembly software is not reachable at that time and the aggregation software is configured to update the status of all the connector assemblies associated with the connector assembly software to an unreachable status block . The aggregation software can also be configured to raise an alarm and or take some action to confirm whether that instance of the connector assembly software is unreachable.

If however the data read from the TCP connection is not event information for the requested next event and is instead a no event message checked in block the aggregation software uses the TCP protocol to reliably close the current TCP connection as described above in connection with blocks .

After the current connection period elapses without the aggregation software having received any data from the connector assembly software on the current TCP connection checked in block the aggregation software considers the connector assembly software and the associated connector assemblies to be unreachable at that time and the aggregation software updates the status of all the connector assemblies associated with the connector assembly software to an unreachable status block . The aggregation software can also be configured to raise an alarm and or take some action to confirm whether that instance of the connector assembly software is unreachable. In this way the worst case time for the aggregation software to learn that a particular instance of the connector assembly software is unreachable is bounded by the connection period.

In some implementations of such an exemplary embodiment the event information requests sent by the aggregation software are made asynchronously. That is in such implementations the particular thread that makes a request does not block while waiting for a response to the request from the connector assembly software . Various techniques can be used to implement such an asynchronous approach including but not limited to using asynchronous request functionality included in TCP functionality otherwise provided in a standard application framework on which or with which the aggregation software is implemented and or implemented at the application layer as a part of the aggregation point software itself. In some other implementations of such an exemplary embodiment the event information requests sent by the aggregation software are made synchronously. That is in such implementations the particular thread that makes a request blocks while waiting for a response to the request from the connector assembly software . In some of those implementations using synchronous requests the aggregation software is implemented as a multi threaded application in which a separate thread is used for each instance of the connector assembly software the aggregation software communicates with.

As noted above one example of the processing performed by the connector assembly software is shown in .

In response to the aggregation software initiating the establishment of a TCP connection described above in connection with block of the connector assembly TCP software accepts the TCP connection with the aggregation software more specifically with the aggregation point TCP software block . If the TCP connection establishment process is successful a TCP connection will exist between the aggregation point TCP software and the connector assembly TCP software .

In the particular exemplary embodiment shown in the connector assembly software is configured to note when each respective TCP connection has been established per the TCP protocol and start a timer or similar timing mechanism to determine when the respective monitoring period has elapsed for that TCP connection.

If the TCP connection is successfully established block the connector assembly software then waits for an event information request from the aggregation software block . As noted above the event information request includes an event number for a next event that the aggregation software wishes to receive information about.

The connector assembly software continually checks for the occurrence of new events at any associated connector assembly . When the connector assembly software determines that an event has occurred at an associated connector assembly the connector assembly software obtains information including PLI about that event and buffers the event information.

After an event information request is received and while the TCP connection is established if the connector assembly software determines that the next event specified in the request has occurred at an associated connector assembly block the connector assembly software uses the connector assembly TCP software to reliably send information including PLI about that event to the aggregation software over the TCP connection that is currently established block . The reliability features included in the TCP protocol for example the sequence numbering and acknowledgment schemes are used to help ensure that such event information is received at the aggregation point in the proper order and without duplicates and to automatically detect and respond to any cases where such event information sent from the connector assembly software is not received by the aggregation software . This event information is sent from the connector assembly software as a response to the request for event information sent from the aggregation point software as described above in connection with block and is implemented using the same high layer protocol that was used to send the corresponding request.

After the event information is sent to the aggregation software using the current TCP connection the connector assembly software closes the current TCP connection block . As noted above as a part of the TCP protocol each of the entities communicating over a TCP connection must independently send to the other entity a TCP CLOSE message the receipt of which is acknowledged per the TCP protocol.

Also as noted above the connector assembly software buffers the event information it captures. So in the event that the event information sent from the connector assembly software is not successfully received at the aggregation software the aggregation software can re request information for that event and the connector assembly software can re send the event information for that event when a new TCP connection is established between the connector assembly software and the aggregation software .

If the current monitoring period elapses without the next event specified in the request having occurred at an associated connector assembly block the connector assembly software uses the connector assembly TCP software to reliably send a no event message to the aggregation software over the current TCP connection block . Then the connector assembly software closes the current TCP connection as described above in connection block .

Although was described in connection with a connector assembly it is to be understood that the processing associated with can be implemented by other types of devices that communicate information including PLI to an aggregation point . Examples of such other devices include without limitation end user devices such as computers peripherals for example printers copiers storage devices and scanners and IP telephones that include functionality for automatically reading information stored in or on the segment of physical communication media.

Further details embodiments and implementations can be found in the following United States Patent Applications all of which are hereby incorporated herein by reference U.S. Provisional Patent Application Ser. No. 61 252 964 filed on Oct. 19 2009 titled ELECTRICAL PLUG FOR MANAGED CONNECTIVITY U.S. Provisional Patent Application Ser. No. 61 253 208 filed on Oct. 20 2009 titled ELECTRICAL PLUG FOR MANAGED CONNECTIVITY U.S. patent application Ser. No. 12 907 724 filed on Oct. 19 2010 titled MANAGED ELECTRICAL CONNECTIVITY SYSTEMS U.S. Provisional Patent Application Ser. No. 61 303 948 filed on Feb. 12 2010 titled PANEL INCLUDING BLADE FEATURE FOR MANAGED CONNECTIVITY U.S. Provisional Patent Application Ser. No. 61 413 844 filed on Nov. 15 2010 titled COMMUNICATIONS BLADED PANEL SYSTEMS U.S. Provisional Patent Application Ser. No. 61 439 693 filed on Feb. 4 2011 titled COMMUNICATIONS BLADED PANEL SYSTEMS U.S. patent application Ser. No. 13 025 730 filed on Feb. 11 2011 titled COMMUNICATIONS BLADED PANEL SYSTEMS U.S. patent application Ser. No. 13 025 737 filed on Feb. 11 2011 titled COMMUNICATIONS BLADED PANEL SYSTEMS U.S. patent application Ser. No. 13 025 743 filed on Feb. 11 2011 titled COMMUNICATIONS BLADED PANEL SYSTEMS U.S. patent application Ser. No. 13 025 750 filed on Feb. 11 2011 titled COMMUNICATIONS BLADED PANEL SYSTEMS U.S. Provisional Patent Application Ser. No. 61 303 961 filed on Feb. 12 2010 titled Fiber Plug And Adapter For Managed Connectivity U.S. Provisional Patent Application Ser. No. 61 413 828 filed on Nov. 15 2010 titled Fiber Plugs And Adapters For Managed Connectivity U.S. Provisional Patent Application Ser. No. 61 437 504 filed on Jan. 28 2011 titled Fiber Plugs And Adapters For Managed Connectivity U.S. patent application Ser. No. 13 025 784 filed on Feb. 11 2011 titled Managed Fiber Connectivity Systems U.S. patent application Ser. No. 13 025 788 filed on Feb. 11 2011 titled Managed Fiber Connectivity Systems U.S. patent application Ser. No. 13 025 797 filed on Feb. 11 2011 titled Managed Fiber Connectivity Systems U.S. patent application Ser. No. 13 025 841 filed on Feb. 11 2011 titled Managed Fiber Connectivity Systems U.S. Provisional Patent Application Ser. No. 61 413 856 filed on Nov. 15 2010 titled CABLE MANAGEMENT IN RACK SYSTEMS U.S. Provisional Patent Application Ser. No. 61 466 696 filed on Mar. 23 2011 titled CABLE MANAGEMENT IN RACK SYSTEMS U.S. Provisional Patent Application Ser. No. 61 252 395 filed on Oct. 16 2009 titled MANAGED CONNECTIVITY IN ELECTRICAL SYSTEMS U.S. patent application Ser. No. 12 905 689 filed on Oct. 15 2010 titled MANAGED CONNECTIVITY IN ELECTRICAL SYSTEMS U.S. Provisional Patent Application Ser. No. 61 252 386 filed on Oct. 16 2009 titled MANAGED CONNECTIVITY IN FIBER OPTIC SYSTEMS and U.S. patent application Ser. No. 12 905 658 filed on Oct. 15 2010 titled MANAGED CONNECTIVITY IN FIBER OPTIC SYSTEMS .

A number of embodiments of the invention defined by the following claims have been described. Nevertheless it will be understood that various modifications to the described embodiments may be made without departing from the spirit and scope of the claimed invention. Accordingly other embodiments are within the scope of the following claims.

