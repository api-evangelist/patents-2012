---

title: Database versioning system
abstract: Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for identifying one or more rows in a relational database that have each been modified since a first point in time, wherein each of the rows is associated with a respective table in the relational database; for each of the identified rows, updating a respective file in an external representation of the table associated with the row to reflect the modification to the row wherein the respective file is not stored in the database; and creating a first version of the relational database in a version control system using the external representation including one or more of the updated files, wherein the first version of the database comprises one or more files in the version control system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08918429&OS=08918429&RS=08918429
owner: Autodesk, Inc.
number: 08918429
owner_city: San Rafael
owner_country: US
publication_date: 20120120
---
Under 35 U.S.C. 119 this application claims benefit of U.S. Provisional Application Ser. No. 61 565 472 filed Nov. 30 2011 the entire contents of which are hereby incorporated by reference.

This specification relates to digital information retrieval and particularly to providing versioning for databases.

In general one aspect of the subject matter described in this specification can be embodied in methods that include the actions of identifying one or more rows in a relational database that have each been modified since a first point in time wherein each of the rows is associated with a respective table in the relational database for each of the identified rows updating a respective file in an external representation of the table associated with the row to reflect the modification to the row wherein the respective file is not stored in the database and creating a first version of the relational database in a version control system using the external representation including one or more of the updated files wherein the first version of the database comprises one or more files in the version control system. Other embodiments of this aspect include corresponding systems apparatus and computer programs.

These and other aspects can optionally include one or more of the following features. A particular row of the identified rows is modified if the particular row has been created deleted or changed in the database since the first point in time. Each respective file stores a plurality of rows of a table in the database. Identifying the plurality of rows is performed by a database management system. Creating the new version is performed by a version control system. One or more differences are determined between one or more files of the first version of the relational database in the version control system and one or more files of a different second version of the relational database in the version control system and one or more database commands are executed based on the determined differences so that contents of the relational database are the same as the second version. A change to the relational database is detected and a second version of the database is created in the version control system based on the detected change. One or more database commands are executed based on one or more determined differences between the first version of the relational database and the second version of the relational database to restore the relational database to the first version of the database. One or more database commands are executed based on one or more determined differences between the first version of the relational database and the second version of the relational database to restore the relational database to the second version of the database.

Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. The version control system and database management system do not need to be modified in order to be used for database versioning. Database versions can be stored locally or in a central repository. Likewise the database itself can be stored locally or centrally. A database can be dynamically switched between versions using operations that minimize the amount of changes to the database in order to change it to a different version. Various implementations support undo and redo operations which rely on temporary versions of the database created in the version control system.

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

A Database Management System DBMS is software that controls the creation maintenance and the use of one or more underlying databases. Examples of databases include row or column oriented relational databases and object oriented databases. Other types of databases are possible. A relational database organizes information in tables rows and columns. An example is a list of customers which would be represented as a table which contains one row for each individual customer and each row has columns for name address phone number and so on. Another example is the set of tax parcels in a city in such a case each row may also contain a geometric description of the parcel in addition to columns for valuation owner address and so on. The DBMS provides functionality for inserting deleting updating and selecting rows from tables in a database. This can be done for example using an application programming interface provided by the DBMS or a query language like Structured Query Language SQL . Other types of query languages are possible however.

A Version Control System VCS is software that tracks and maintains control over changes to a set of one or more electronic files. A set of files in the VCS is referred to as a version or branch . The VCS allows users or software processes to create modify or delete files in a given version or create new version based on changes to files in an existing version. Different versions of a set of files can exist simultaneously. Each version is associated with a time stamp which indicates when the version was created or last modified in the VCS. Versions can be compared restored and in some cases merged. In various implementations a database can be exported from the DBMS to an external representation comprising a set of one or more electronic files and the external representation can then be created as a new version in the VCS. In further implementations each VCS version is a version of an entire database. Switching the a database s contents from one version to another in the DBMS is performed efficiently however as is described further below.

In some implementations a client includes software applications or modules that implement a version layer version layer a DBMS e.g. DBMS and a VCS e.g. VCS which execute on the client e.g. client . Clients can include local storage such as a hard disk Flash memory or other persistent storage for storing information used by the DBMS and the VCS . In other implementations clients can utilize non local storage accessible through the network by means of a distributed network file system or other type of network accessible storage system. Clients optionally include a software application that is configured to utilize the DBMS . In some implementations the software application is a Computer Aided Design CAD program. Alternatively the clients do not include software applications or modules that implement the DBMS and the VCS. Instead the server includes these software applications or modules DBMS and VCS and the clients issue requests to the DBMS and VCS on behalf of the application

The version layer uses the VCS to store retrieve and modify versions of databases in the DBMS. In some implementations the VCS stores database versions in local client storage . This allows differences between versions to be quickly computed on the client because the information needed to perform the difference is available locally. In other implementations the VCS or stores database versions centrally in a central storage system which is accessible through the server . The central storage system can implement a distributed network file system on top of persistent storage for example. Using built in remote distribution functionality of the VCS which replicates database versions to the central storage system users can choose to synchronize the contents of their VCS data stored in local storage with the contents of the central storage . This operation can be performed for example by issuing remote synchronization commands to the VCS.

In order to enable versioning for a database the contents of the database are inserted into the VCS. In various implementations this is accomplished by the version layer first creating an external representation of the database in a file system e.g. local storage or central storage that is outside of the control of the DBMS by commanding the DBMS to export data of the database. In some implementations each table in the database is represented by a directory in the file system representation . For example a database named X comprises three tables the Table Table and Table . In some implementations the name of the directory matches the name of the table. The external file system representation of the database includes a directory for Table directory Table directory and Table directory . Each table directory includes one or more files which store the serialized rows of the respective table. For example the Tabledirectory contains files the Tabledirectory contains files and the Tabledirectory contains files

In various implementations each file contains a table s rows with a fixed range of database row identifiers and the file s name reflects that range. For example a file named 0 contains rows 0 to 255 a file named 1 contains rows 256 to 511 and so on. The number of rows per file can be such that the resulting file size is approximately optimal for the VCS. Inside each file table rows can be serialized as text with column values listed in a way that is simple to convert back to a binary representation used by the DBMS. In some implementations the column names do not need to be explicitly stored for each row since they do not vary and knowing their order is sufficient to know the column corresponding to each value in the comma separated list.

In some implementations the version layer serializes the rows to JavaScript Object Notation JSON format one row per line in the file. Other formats are possible. The following shows four example table rows as they would be represented in such a file using JSON format note that new lines are marked with NL in order to distinguish them from line wrapping 

After serializing the table rows a file based external representation of the contents of the database exists. At this point the version layer can command the VCS e.g. using a commit operation to initialize a new version in the VCS using the set of files in the file based representation . By way of illustration VCS contains the following versions of database version 1.0 version 2 and version 3 . Version . contains sub version 1.1 and sub version 1.2 . In some implementations the VCS maintains each database version as a set of binary files on a file system e.g. local storage or central storage which the VCS manages independently of the application logic. For example subversion 1.2 can contain the contents of the external representation .

Once a new version of a database is active in the DBMS the user or the software application e.g. application is free to query and make changes to rows in the database using SQL commands or by using the software application in ways that result in updates to the database. To keep track of exactly which rows change in a database SQL triggers can be used so insert a row into so called journal tables whenever a row is inserted updated or deleted in a database tables. Triggers are commands executed automatically whenever certain operations or events happen in a given table or in the database in general. Journal tables contain the identifiers of rows that become dirty due to modification. For simplicity a separate journal table can be maintained for each database table that is versioned. The journal tables are not versioned they are automatically filled up with information about which rows change.

At a point in time when the application or the user decides to synchronize the data in the DBMS with a VCS version the rows identified in each journal table are serialized by the version layer to their respective external row text files corresponding to the tables to which the rows belong. This ensures that only rows that have been modified are serialized. After this partial serialization the external representation matches the database contents and a commit VCS operation is executed by the version layer to add the changed text files into the version control content store. The journal tables can then be emptied since the version in the VCS now exactly matches the current state of the database. In some implementations the VCS commit operations record checkpoints at which the DBMS and the VCS contents match and can then be used for switching between versions.

A database in the DBMS can be switched from one version to another by the version layer . Similar to the journaling scheme used for reflecting changes from the DBMS to the VCS the version layer identifies exactly what rows changed in the VCS representation of the database version from the last commit operation. To get the list of changes the version layer executes a diff operation which is a common way to list changes made to text files on a per line basis. The diff operation can be natively implemented by the VCS.

The output of the diff operation lists all text lines in row text files which changed from one commit A to another B between two versions or between the last commit and the current state of the serialized row files. To switch the DBMS from containing version commit A to version commit B the version layer executes a text diff from A to B using the VCS. The result of a diff might look as follows 

This diff shows an update made to row number of the BUILDINGS table and an insertion done to the ROADS table. The external files affected are BUILDINGS 3 and ROADS 3 . Note that the diff output includes a or character next to rows which are added and removed respectively. If a row was changed its from version appears with a and the to version appears with a .

Due to the intentional organization of row per line in the row text files each line or each two lines in case of updates in the diff text corresponds to an entire row of a database table. The version layer infers target table names from the diff text lines prefixed by and and interprets lines representing rows prefixed by single and as SQL insert update or delete commands and applies those to the DBMS. Once each line in the diff text stream is applied as command to the database in the DBMS the database contains exactly the rows of version B. Moreover the number of commands the version layer has to execute is minimal. Subsequently we also execute a VCS command to switch the external representation files to version B as well to be consistent with the database state this is an operation that can be performed automatically by the VCS.

A complication may arise when merging two versions for example when adding work from a work in progress version into the master version in the case when both versions contain independent modifications to the same row. In this case the version layer can use the diff3 which compares 3 files and determines differences between them output to first insert textual conflict markers into the external text representation usually sequences of and 

By way of illustration suppose a user wants to do an edit while they are working on Version B of a database in the DBMS. At this point the version layer will silently create another temporary version in the VCS Version B Undo History as indicated by timeline which will contain the undo history of the edits. At the moment of creation at time the Version B Undo History contains the same exact data as Version B branch at time . When the user edits the database in the DBMS the change is first done directly to the database by the DBMS application logic. At this time the DBMS contents are ahead of the contents of the VCS. This is when the version layer reads the journal table s to see what row identifiers the user modified and then writes the row s corresponding text files into the VCS. The edits are then committed to the VCS at time in Version B Undo History. An undo command by the user at that point will jump the contents of the database back to time . A redo command at time will jump the contents of the database to time again. At some point the user will exit their application e.g. application or perform a watershed operation that has to flush the undo history at which point the version layer merges the Version B Undo History back into its parent branch Version B at time . Note that the contents of the DBMS do not change between times and .

Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be or be included in a computer readable storage device a computer readable storage substrate a random or serial access memory array or device or a combination of one or more of them. Moreover while a computer storage medium is not a propagated signal a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate physical components or media e.g. multiple CDs disks or other storage devices .

The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources.

The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer a system on a chip or multiple ones or combinations of the foregoing The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment a virtual machine or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine object or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language resource in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few. Devices suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending resources to and receiving resources from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some embodiments a server transmits data e.g. an HTML page to a client device e.g. for purposes of displaying data to and receiving user input from a user interacting with the client device . Data generated at the client device e.g. a result of the user interaction can be received from the client device at the server.

A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

