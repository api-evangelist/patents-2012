---

title: Intelligent file management
abstract: In one example, an indication is detected that an application has performed a file operation on a file and a computing system determines whether a datastore includes an association between an application identifier that identifies the application and a file identifier that identifies the file. If not, the association between the application identifier and the file identifier is stored. A computing system also determines whether execution behavior of the application changes when the file is not accessible to the application. Responsive to a change in execution behavior of the application, a status indicator is associated with the file identifier to indicate that the execution behavior of the application changes when the file is not accessible to the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09594762&OS=09594762&RS=09594762
owner: International Business Machines Corporation
number: 09594762
owner_city: Armonk
owner_country: US
publication_date: 20120106
---
This disclosure relates to the management of data on computing devices. Data stored on computing devices may be organized into computers files. In some instances computer files may be data structures that organize data for easy management and modification by computing devices. The proliferation of computing devices has contributed to a substantial increase in the growth rate of data and therefore the number computer files used to organize such data. Consequently storage and energy costs have continued to increase as greater quantities of storage space are required to store the increasing amounts of data. Moreover the complexity of managing computer files has increased accordingly with the increasing amounts of data. In some instances the significance of a computer file to applications and or users may vary depending on how the computer file is used by such applications and or users. Thus some computer files may be more suitable for removal from a computing device than others when purging or deleting computer files from a computing device.

In one example a method includes detecting a file operation indication that an application executing on a computing device has performed a file operation on a file. The method also includes determining by the computing device whether a datastore includes an association between an application identifier that identifies the application and a file identifier that identifies the file. The method further includes storing in the datastore by the computing device the association between the application identifier and the file identifier when the datastore does not include the association. The method also includes determining by the computing device whether execution behavior of the application changes when the file is not accessible to the application in response to storing the association in the datastore. The method further includes associating by the computing device a status indicator with the file identifier to indicate that execution behavior of the application changes when the file is not accessible to the application when the execution behavior of the application changes.

In one example a computing device includes one or more processors. The computing device also includes a monitoring module executable by the one or more processors to detect a file operation indication that an application executing on a computing device has performed a file operation on a file. The computing device also includes a file management module executable by the one or more processors to determine whether a datastore includes an association between an application identifier that identifies the application and a file identifier that identifies the file. The file management module is executable by the one or more processors to store in the datastore the association between the application identifier and the file identifier when the datastore does not include the association. The file management module is further executable by the one or more processors to determine in response to storing the association in the datastore whether execution behavior of the application changes when the file is not accessible to the application. The file management module is also executable by the one or more processors to associate a status indicator with the file identifier to indicate that the execution behavior of the application changes when the file is not accessible to the application when the execution behavior of the application changes.

In one example a computer program product includes a computer readable storage medium having computer readable program code embodied therein the computer readable program code including computer readable program code to detect a file operation indication that an application executing on a computing device has performed a file operation on a file. The computer readable program code further includes computer readable program code to detect a file operation indication that an application executing on a computing device has performed a file operation on a file. The computer readable program code also includes computer readable program code to determine whether a datastore includes an association between an application identifier that identifies the application and a file identifier that identifies the file. The computer readable program code also includes computer readable program code to store in the datastore the association between the application identifier and the file identifier when the datastore does not include the association. The computer readable program code also includes computer readable program code to determine in response to storing the association in the datastore whether execution behavior of the application changes when the file is not accessible to the application. The computer readable program code also includes computer readable program code to associate a status indicator with the file identifier to indicate that the execution behavior of the application changes when the file is not accessible to the application when the execution behavior of the application changes.

The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

Techniques of the disclosure proactively manage computer files stored on a computing device to provide a user or automated agent with information that is usable to determine which files are suitable for deletion. For instance in accordance with techniques of the disclosure an advisor application executing on a computing device monitors file operations performed on files by various applications of the computing device. In some examples file operations include creating and or modifying a file. When the advisor application determines that an application has performed a file operation on a file the advisor application generates an association between the application and the file. The advisor application stores the association in a datastore. In this way the advisor application maintains information that describes the relationships of each file and application that has created or modified the file.

In some examples the advisor application also determines whether the execution behavior of an application changes when a file that has been created or modified by the application is not accessible to the application. In this way the advisor application is able to determine whether deleting the file from the computing device affects the execution behavior of the application. For instance the advisor application simulates an application executing without access to a file that the application has created or modified. If the execution behavior of the application changes when the application cannot access the file e.g. the application issues an error or other notification the advisor application associates a status indicator with a file identifier that identifies the file. The status indicator indicates that the execution behavior of the application changes when the file is not accessible to the application. Thus status indicators included in the datastore indicate whether each file if deleted affects the execution behavior of applications on the computing device.

In one example a user or automated agent determines that more storage space is needed on the computing device or that deletion of unnecessary files has been requested. In such examples the advisor application queries the datastore to select a subset of files that if deleted do not change the execution behavior of applications on the computing device. For instance the advisor application queries status indicators associated with file identifiers in the datastore to determine whether execution behavior of an application changes if a file associated with the application is not accessible to the application. Consequently the advisor application returns a subset of all files represented in the datastore. The subset of files provided to the user or automated agent includes files associated with status indicators that indicate execution behavior of applications will not change if files included in the subset of files are not accessible to the applications.

Techniques of the present disclosure may provide one or more advantages. For instance techniques of the disclosure may enable non technical users to safely clean up files on storage drives without removing important and or system required files that would change execution behavior of applications. By proactively tracking which applications perform file operations on each file techniques of the present disclosure may provide for granular file management and deletion. Moreover by simulating whether a file can be safely deleted from a computing device techniques of the disclosure provide useful information to the user to make informed decisions about which files are suitable for deletion. In this way user effort to clean up and delete files may be reduced thereby lowering storage costs and or energy consumption of storage devices.

In accordance with aspects of the disclosure examples of computing device include but are not limited to portable or mobile devices such as mobile phones including smart phones laptop computers personal digital assistants PDAs portable gaming devices portable media players e book readers servers mainframes or other computing devices. Computing device as shown in includes additional components not illustrated in such as one or more processors memory network interface storage device etc. further illustrates additional components that may be included in computing device .

Computing device as shown in includes input device . Input device may include a keyboard pointing device microphone and or camera capable of recording one or more images or video. Computing device also includes an output device . Examples of output device may include a video graphics card computer display sound card and or speakers. Input device and output device are further illustrated in .

As shown in computing device includes one or more applications such as application A. Applications may be one or more processes or threads that are executable by computing device . Applications in some examples perform file operations on files such as creating modifying reading and or deleting files. Examples of application A include but are not limited to word processor applications spreadsheet applications presentation applications web browser applications multimedia applications graphical design applications database applications operating systems and the like. More generally application A includes any process or thread capable of performing file operations on files such as file A.

Files such as file A as shown in may include any data structures that organize data for management and or modification via file operations performed by applications. Thus some examples of files include but are not limited to Hypertext Markup Language files log files dynamically and or statically linked library files word processor files multimedia files and the like. In some examples files are organized in directories that are further maintained by an operating system executing on computing device e.g. operating system as shown in . In one example application performs a file operation on file by modifying the data organized in file and saving modified file A on computing device . In some examples one or more files may be stored on a remote computing device that is operably coupled to computing device by a communication channel such as a network or other channel to communication information.

As previously stated computing device includes advisor application that implements techniques of the present disclosure and may include monitoring module file management module and display module as shown in . Each of modules and includes data and or instructions that are executable by computing device to perform operations of the various modules.

Monitoring module in some examples monitors file operations performed by applications on files. For instance monitoring module determines that application A has performed a file creation operation to create file A. In other examples monitoring module determines that application A has performed a file modification operation to modify file A.

To monitor file operations performed by applications monitoring module may be integrated with an operating system component such as file system module that manages a file system on computing device . In one example Application Programming Interfaces APIs of the file system module includes function calls that are invoked by applications to perform file system operations. For example an API of the file system module provides a function call to create a file. In some examples advisor application modifies the file system module to insert an event hook in a function call provided by the file system module. The event hook includes instructions that when executed by computing device cause the file system module to send an indication such as a file operation indication to monitoring module that indicates the function call has been invoked by an application. For instance application A may invoke a function call of a file system module to create file A. The function call may include an event hook that when executed sends an indication to monitoring module that indicates the function call has been invoked by an application. In some examples the indication indicates a file identifier that identifies file A and an application identifier that identifies application A. In an alternative example monitoring module may be implemented directly in application A. In such examples each application monitors file operations performed by the respective application on files.

In some examples monitoring module receives an indication that an application executing on computing device has performed a file operation on a file and communicates the indication to file management module . In some examples file management module uses the indication to determine whether file information datastore includes an association between a file identifier that identifies the file and an application identifier that identifies the application that performed the file operation on the file. For instance if the indication indicates that application A performed a modify file operation on file A file management module determines whether file information datastore includes an association between a file identifier that identifies file A and an application identifier that identifies application A. In one example file management module performs the determination by comparing a file identifier and or application identifier included in the indication with file identifiers and or application identifiers in file information datastore to identify a match.

If file management module determines that file information datastore does not include an association between file A and application A file management module stores an association between the application identifier and the file identifier in file information datastore . In some examples file management module further stores information such as the file operation date and or origin of the file e.g. a Uniform Resource Locator that indicates the location from which a file was downloaded . In this way file management module proactively manages relationships between files and application that perform file operations on such files. Consequently techniques implemented by file management module to store such associations provide knowledge of relationships between files and applications.

File management module further implements techniques of the disclosure that intelligently enable a user or automated agent to determine which files are suitable for deletion. For instance continuing with the current example file management module upon storing the association between file A and application A in file information datastore determines whether execution behavior of application A changes when the file A is not accessible to the application A.

Execution behavior of application A may refer to operations of application A that occur when instructions that comprise application A are executed by computing device . For instance execution behavior of application A may change if files relied upon by application A for execution are not accessible to application A. Thus in one example application A may provide an indication such as a warning notification or error if a file required for execution by application A is not accessible. Consequently execution behavior of application A may be said to change when application A provides the indication because the file is not accessible to application A.

More generally file management module implementing techniques of the disclosure simulates whether execution behavior of application A changes when a file on which application A has performed a file operation is not accessible to application A. In this way file management module may simulate whether a file associated with an application can be deleted without changing execution behavior of application A. If execution behavior of application A changes when a file associated with application A is not accessible to application A file management module A may indicate that the file is not suitable for deletion. By simulating whether each file associated with an application can be deleted without changing execution behavior of an application techniques of the present disclosure provide a proactive and granular file management of file to provide intelligent file deletion and cleanup techniques.

File management module may use numerous different example techniques to simulate whether execution behavior of application A changes when a file is inaccessible. In one example application A performs a file operation on file A and therefore is associated with file operation A. To simulate whether execution behavior of application A changes when file A is not accessible to application A file management module may generate a virtual computing environment e.g. a virtual machine that is the same or similar to an operating environment in which application A currently exists. In one example the operating environment is an operating system. For instance the virtual computing environment may replicate files applications and other computing components such that execution behavior of application A may be the same in the virtual computing environment as in the current operating environment. In the current example file management module deletes file A from the virtual computing environment e.g. file A is not accessible to application A and subsequently executes application A. If file management module determines that execution behavior application A in the virtual computing environment differs from execution behavior in the current operating environment file management module may conclude that execution behavior of application A changes when file A is not accessible to application A.

In an alternative example file management module simulate whether execution behavior of application A changes when file A is not accessible by temporarily moving file A changing permissions of file A or otherwise causing file A to be inaccessible to application A. For instance file management module can terminate application A and cause file A to be inaccessible to application A. File management module can then execute application A and detect whether application A provides an indication such as a warning notification or error that indicates a notification associated with application A. Thus when file management module causes file A to be inaccessible to application file management module can determine whether execution behavior of application changes when file A is inaccessible.

In any case when file management module determines that execution behavior of application changes when file A is inaccessible file management module associates a status indicator the file identifier and or application identifier that is stored in file information datastore . The status indictor indicates that execution behavior of application A changes when file A is not accessible to the application. For instance a status indicator may include a value of NOT DELETABLE or 0 if execution behavior of application A changes when file A is not accessible to the application. If execution behavior application A does not change when file A is inaccessible file management module may generate a status indicator that indicates the execution behavior of application A does not change. For instance a status indicator can include a value of DELETABLE or 1 if execution behavior of application A does not change when file A is not accessible to the application. File management module then associates the status indicate with the association between the application identifier of application A and the file identifier of file A that is stored in file information datastore .

In the previous example functionality of file management module was described as being included in advisor application . In other examples individual applications on computing device e.g. application A include functionality of file management module as described in the previous example. For instance each application individually maintains a group of file identifiers that identify files on which the respective application has performed file operations. In such examples an application upon performing a file operation on a file determines whether execution behavior of the application changes when the file is inaccessible to the application. The application also associates status indicators with the file identifiers maintained by the application that indicate whether execution behavior of the application changes when the file is inaccessible. In this way each application maintains its own group of files and corresponding status indicators that indicate whether files associated with the application can be deleted.

In some examples a user wishes to intelligently delete or cleanup files stored on computing device . Consequently the user provides a user input at input device to request to display representations of files for deletion. File management module in response to receiving the request queries file information datastore to select a subset of the files that may be deleted. In some examples a selected file in the subset of selected files is associated with a status indicator that indicate that execution behavior of each application associated with the selected file does not change when the selected file is not accessible to the application. Stated another way file management module queries file information datastore to identify files that if deleted do not cause execution behavior of a corresponding application to change.

In one example file information datastore includes associations between file identifiers application identifiers and status indicators. In one example an association associates a file identifier application identifier and status indicator. The status indicator indicates whether execution behavior of the application identified by the application identifier changes when the file identified by the file identifier is inaccessible to the application. File management module selects file identifiers of those files that are associated with status indicators that indicate execution behavior of applications associated with the file identifies do not change when the files associated with the file identifiers are inaccessible i.e. deleted . In this way file management module selects a subset of files that may be deleted without changing execution behavior of applications on computing device .

In some examples file information datastore communicates the file identifiers that identify files in the subset of selected files to display module . Display module causes output device to display a graphical user interface GUI that includes representations of the files that can be deleted. In some examples GUI includes representations of files and applications. Representations can include graphical controls such as text boxes images etc. that include information such as file identifiers values and application identifier values. Representations can also include a date the file was created or modified an origin of the file and or an application that has performed a file operation on the file. Representations may be associated with selector controls such as selector control . Selector control may be associated with representations . When selector control is selected representation can also be said to be selected. Thus when selector control is selected in response to a user input file management module deletes the file associated with the file identifier value included in representation . In some examples a user selects multiple selector controls and subsequently select delete control button . In such examples file management module deletes each of the files of representations associated with selected selector controls. Display module in one example provides functionality to enable a user to select how to sort the representations e.g. by file size file creation date file origin etc.

In some examples as previously described applications such as application A include functionality of monitoring module file management module and or display module . In such examples advisor application may not manage associations between files applications and status indicators in file information datastore . Rather in some examples each application maintains its own group of such associations Each application can further include one or more APIs that enable other applications to query one another when a user or automated agents wishes to delete a file.

In one example each application maintains associations between the application files on which the application performs file operations and status indicators. Each application stores and or manages the associations in a suitable data structure such as a list map table etc. When a user wishes to determine which files can be deleted the user provides a user input to advisor application . Advisor application sends a query to each application that maintains associations with files via an API and in return receives a group of indications such as file identifiers that identify files. For instance each application selects a group of file identifiers that are associated with status indicators that indicate execution behavior of the respective application does not change when the files are inaccessible to the application. Upon receiving the groups of file identifiers from the applications display module causes output device to display representations of the files.

As previously described advisor application may centrally manage some or all associations between files and application as described with respect to file information datastore . Furthermore applications may in some examples individually store and or manage some or all associations in suitable data structures that are managed separately by the application such as a list map table etc. Thus when a user provides a user input to request files that are deletable advisor application may query the centralized datastore e.g. file information datastore and or the individual data structures that are managed separately by the applications. In some examples the individual data structures that are managed separately by the applications indicate whether files associated with the application can be safely removed without changing the execution behavior of the applications e.g. deleting the file safely without breaking application functionality . In this way techniques of the present disclosure support environments where some applications manage associations individual file associations while other file associations with application are managed centrally. In such environments advisor applicant can query the centralized datastore data structures managed individually by the applications or a combination of the centralized datastore and individually managed data structures e.g. when some associations are centrally managed while other associations are individually managed by applications .

In an alternative example each application sends file identifiers of all files on which each respective application has performed a file operation to advisor application . Each application further sends a status indicator associated with each file identifier. In such examples file management module compares each file identifier against file identifiers in other groups. If a match exists between one or more file identifiers file management module evaluates the status indicator associated with each of the status indicators. If at least one of the status indicators indicates that execution behavior of an application changes when the file associated with the status indicator is inaccessible to the application file management module indicates that the file identified by the file identifier will not be displayed by display module for deletion. In this way advisor application queries each of the applications to cross check application dependencies on a file and determines whether deleting the file would cause execution behavior of the application to change.

In some examples when applications include functionality of monitoring module file management module and or display module each application designates files on each the application performs file operations as private or public. A private file may be a file on which only the application itself performs file operations. Public files by contrast may be files on which the application and at least one other application perform file operations. In some examples when advisor application queries each application for file identifiers that identify files which may change execution behavior of an application the application may not send file identifiers of files designated as private.

As previously mentioned is a block diagram illustrating further details of one example of a computing device shown in in accordance with one or more aspects of the present disclosure. illustrates one particular example of computing device and many other example embodiments of computing device can be used in other instances.

As shown in the specific example of computing device includes one or more processors memory a communication unit one or more storage devices input device and output device . Computing device also includes an operating system that is executable by computing device . Computing device in one example further includes communication applications advisor application and file information datastore . File information datastore further includes file data . As shown in storage devices include files in some examples.

As also shown in and as previously mentioned in connection with the description of advisor application of also includes monitoring module file management module and display module . Each of components and may be interconnected physically communicatively and or operatively by communication channels A B for inter component communications. In some examples communication channels A B may be a system bus network connection interprocess communication data structure or any other channel for communicating data.

Processors in one example are configured to implement functionality and or process instructions for execution within computing device . For example processors may be capable of processing instructions stored in memory or instructions stored on storage devices . In one example processors execute applications and advisor application . Examples of processors may include any one or more of a microprocessor a controller a digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or equivalent discrete or integrated logic circuitry.

Memory in one example is configured to store information within computing device during operation. Memory in some examples is described as a computer readable storage medium. In some examples memory is a temporary memory meaning that a primary purpose of memory is not long term storage. Memory in some examples is described as a volatile memory meaning that memory does not maintain stored contents when the computer is turned off. Examples of volatile memories include random access memories RAM dynamic random access memories DRAM static random access memories SRAM and other forms of volatile memories known in the art. In some examples memory is used to store program instructions for execution by processors . Memory in one example is used by software or applications running on computing device e.g. applications to temporarily store information during program execution.

Computing device in some examples also includes a communication unit . Computing device in one example utilizes communication unit to communicate with external devices via one or communication channels such as one or more wired and or wireless networks. Communication unit can be a network interface card such as an Ethernet card an optical transceiver a radio frequency transceiver Universal Serial Bus USB controller or any other type of device that can send and receive information. Other examples of such communication units may include 3G and WiFi radios in mobile computing devices.

Storage devices in some examples also include one or more computer readable storage media. Storage devices can be configured to store larger amounts of information than memory . As shown in storage devices stores files . Storage devices may further be configured for long term storage of information. In some examples storage devices include non volatile storage elements. Examples of such non volatile storage elements include magnetic hard discs optical discs floppy discs flash memories or forms of electrically programmable memories EPROM or electrically erasable and programmable EEPROM memories.

Computing device in one example also includes one or more input devices . Input device in some examples is configured to receive input from a user through tactile audio or video feedback. Examples of input device include a presence sensitive screen a mouse a keyboard a voice responsive system video camera microphone or any other type of device for detecting a command from a user.

One or more output devices may also be included in computing device . Output device in some examples is configured to provide output to a user using tactile audio or video stimuli. Output device in one example includes a presence sensitive screen a sound card a video graphics adapter card or any other type of device for converting a signal into an appropriate form understandable to humans or machines. Additional examples of output device include a speaker a cathode ray tube CRT monitor a liquid crystal display LCD organic light emitting diode OLED display or any other type of device that can generate intelligible output to a user.

Computing device may include operating system . Operating system in some examples controls the operation of components of computing device . For example operating system in one example facilitates the interaction of one or more applications and or modules with processors memory communication unit storage device input device and output device . In various examples operating system provides an operating environment for applications advisor application and or file information datastore .

Applications advisor application monitoring module file management module and display module shown in can each include program instructions and or data that are executable by computing device . For example applications advisor application monitoring module file management module and display module may include instructions that cause computing device to perform one or more of the operations and actions described in the present disclosure. File information datastore in some examples includes a relational database Online Analytical Processing OLAP database lookup table map or any other suitable data structure for storing data.

In accordance with techniques of the disclosure monitoring module initially detects an indication that one of applications has performed a file operation on one of files stored on storage device . Upon receiving the indication file management module queries file data included in file information datastore to determine whether file data includes an association between an application identifier that identifies the application and a file identifier that identifies the file. For example the indicator can include the file identifier and application identifier which is usable by file management module to query file information datastore . As shown in and file data includes associations between file identifiers application identifiers and status indicators as described in .

In the current example file management module determines that file data does not include the association between the file identifier and application identifier. Consequently file management module stores an association between the file identifier and application identifier in file data . In response to storing the association file management module determines whether execution behavior of the application changes when the file is not accessible to the application. File management module may implement one or more simulation techniques as described in to determine whether execution behavior of the application changes when the file is not accessible to the application. If the execution behavior of the application changes when the file is not accessible to the application file management module associates a status indicator with the application identifier and the file identifier in file data to indicate that execution behavior of the application changes when the file is not accessible to the application.

In some examples file management module uses file attributes associated with files to determine whether a file can be deleted. For instance an attribute such as a file extension of a file can provide information about whether the file may be deleted without changing an application s execution behavior. In another example an attribute such as a user identifier that identifies a user e.g. a user name who modified a file provides information about whether the file can be deleted without change an application s execution behavior. In another example an attribute such as an origin of the file e.g. a URL from which the file was received may similarly provide information about whether the file can be deleted.

In accordance with techniques of the disclosure file information datastore can include one or more rules applied by file management module to a file to determine whether an attribute associated with the file indicates that the execution behavior of the application changes when the file is not accessible to the application. For instance a rule may specify an attribute such as a single value e.g. file extension or an expression that matches multiple values e.g. wildcard value . In one example file management module selects an attribute associated with a file and determining whether the attribute indicates that the execution behavior of the application changes when the file is not accessible to the application. For instance file management module applies one or more rules to the file and detect whether one or more attributes of the file match one or more of the rules. If one or more attributes match one or more of the rules file management module associates a status indicator with the application identifier and or the file identifier stored in file information datastore to indicate that execution behavior of the application changes when the file is not accessible to the application.

In some examples rules can be configurable based on user input provided by a user. For instance display module can provide a rule editor that enables the user to create one or more rules that are based on one or more attributes. In other examples techniques of the disclosure enable file management module may apply a group of rules that are received by computing device using communication unit e.g. a group of pre defined rules received from another computing device .

In one example table may be a table in relational database. Table includes columns that store file identifiers application identifiers and status indicators as shown in . Each row that includes a file identifier application identifier and status indicator represents an association between the file identifier application identifier and status indicator. For instance file identifier FILE is associated with application identifier APP . In one example file management module stores the association by including file identifier and application identifier in the same row of table . In one example file management module stores association in table when file management module determines that an application identified by application identifier has performed a file operation on a file identified by file identifier . If file management module determines that execution behavior of the application changes when the file is not accessible to the application file management module associates status indicator with association for example by including status indicator in the same row as file identifier and application identifier . By storing associations between each file and application that performs a file operation on the file and by storing a status indicating whether the file can be deleted file data enables file management module to provide a user or automated agent with information to intelligently delete files from a computing device.

In some examples a user may wish to determine which files to delete from a computing device. In examples where multiple applications perform file operations on a single file file management module may select files to display for deletion that do not change execution behavior of any of the multiple applications. In other words file management module cross checks which applications have performed file operations on a file and if execution behavior of all the applications remains unchanged when the file is inaccessible to the applications e.g. deleted the file is selected for display to the use as being deletable.

In one example the user may initially provide a user input to request representations of files for deletion from a computing device. File management module selects a group of file identifiers from table wherein the file identifiers in the group of file identifiers each identify a common file. For instance file identifiers and each identify a common file FILE . File management module then determines whether each of file identifiers and are associated with status indicators and that indicate execution behavior of applications identified by application identifiers and do not change when common file FILE is not accessible to the applications.

In the current example status indicator indicates that execution behavior of application APP changes when common file FILE is not accessible to the application. Status indicator indicates that execution behavior of application APP does not change when common file FILE is not accessible to the application. Because execution behavior of at least one application associated with FILE changes when FILE is inaccessible file management module does not provide FILE as deletable to the user. In an alternative example if both of status indicators and indicated the execution behavior of APP and APP do not change when FILE is inaccessible file management module selects file identifiers that identify FILE for display as a deletable file to the user. As described throughout this disclosure a deletable file may be a file that if inaccessible to an application causes the execution behavior of the application to change.

File management module then determines whether a datastore includes an association between an application identifier that identifies the application and a file identifier that identifies the file . When file management module determines that the datastore includes the association between the application identifier and the file identifier file management module continues to detect further indications of file operations . When file management module determines that the datastore does not include the association between the application identifier and the file identifier file management module stores the association between the application identifier and the file identifier.

In response to storing the association in the datastore file management module determines whether execution behavior of the application changes when the file is not accessible to the application . If execution behavior of the application changes when the file is not accessible to the application file management module associates a status indicator with the application identifier and or the file identifier to indicate that execution behavior of the application changes when the file is not accessible to the application . In another example execution behavior of the application does not change when the file is not accessible to the application file management module associates a status indicator with the association between the application identifier and the file identifier to indicate that execution behavior of the application does not change when the file is not accessible to the application .

In some examples of the operations as shown in the file operation is an operation selected from a group consisting of creating modifying reading and deleting the file. In some examples the operations include terminating by the computing device execution of the application causing by the computing device the file to be inaccessible to the application in response to causing the file to be inaccessible to the application executing by the computing device the application and detecting by the computing device whether the application provides an indication that at least one of a notification warning and error associated with the application.

In some examples the operations include receiving by the computing device a request to display representations of files for deletion in response to receiving the request querying by the computing device the datastore to select a subset of the files wherein the subset of the files are associated with status indicators indicating that execution behavior of applications associated with the subset of the files do not change when the subset of the files are not accessible to the applications and displaying by the computing device representations associated with files of the subset of files. In some examples the operations include receiving by the computing device a user input to select at least one of the representations associated with the files of the subset of files and in response to receiving the user input deleting by the computing device a file associated with the at least one selected representation.

In some examples the operations include selecting by the computing device a group of file identifiers from the datastore wherein the file identifiers in the group of file identifiers each identify a common file determining by the computing device whether each of the file identifiers are associated with status indicators that indicate execution behavior of applications associated with the file identifiers do not change when the common file is not accessible to the applications and selecting by the computing device the group of file identifiers as the subset of files. In some examples the file is stored on a remote computing device.

The descriptions of the various embodiments of the present disclosure have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present disclosure are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

It will be understood that modules and components included in the figures of this disclosure are illustrated in various configurations and arrangements for example purposes. Such modules and components may be distributed among one or more computing devices in different example configurations and arrangements to perform the techniques as described herein. As such the example configurations and arrangements of the components as shown in the various figures should not be interpreted as the only such possible configurations and arrangements to perform the techniques of the disclosure.

The techniques described in this disclosure may be implemented at least in part in hardware software firmware or any combination thereof. For example various aspects of the described techniques may be implemented within one or more processors including one or more microprocessors digital signal processors DSPs application specific integrated circuits ASICs field programmable gate arrays FPGAs or any other equivalent integrated or discrete logic circuitry as well as any combinations of such components. The term processor or processing circuitry may generally refer to any of the foregoing logic circuitry alone or in combination with other logic circuitry or any other equivalent circuitry. A control unit including hardware may also perform one or more of the techniques of this disclosure.

Such hardware software and firmware may be implemented within the same device or within separate devices to support the various techniques described in this disclosure. In addition any of the described units modules or components may be implemented together or separately as discrete but interoperable logic devices. Depiction of different features as modules or units is intended to highlight different functional aspects and does not necessarily imply that such modules or units must be realized by separate hardware firmware or software components. Rather functionality associated with one or more modules or units may be performed by separate hardware firmware or software components or integrated within common or separate hardware firmware or software components.

The techniques described in this disclosure may also be embodied or encoded in an article of manufacture including a computer readable storage medium encoded with instructions. Instructions embedded or encoded in an article of manufacture including a computer readable storage medium encoded may cause one or more programmable processors or other processors to implement one or more of the techniques described herein such as when instructions included or encoded in the computer readable storage medium are executed by the one or more processors. Computer readable storage media may include random access memory RAM read only memory ROM programmable read only memory PROM erasable programmable read only memory EPROM electronically erasable programmable read only memory EEPROM flash memory a hard disk a compact disc ROM CD ROM a floppy disk a cassette magnetic media optical media or other computer readable media. In some examples an article of manufacture may include one or more computer readable storage media.

In some examples a computer readable storage medium may include a non transitory medium. The term non transitory may indicate that the storage medium is not embodied in a carrier wave or a propagated signal. In certain examples a non transitory storage medium may store data that can over time change e.g. in RAM or cache .

Various embodiments have been described. These and other embodiments are within the scope of the following claims.

