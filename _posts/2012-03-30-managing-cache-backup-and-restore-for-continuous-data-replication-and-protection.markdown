---

title: Managing cache backup and restore for continuous data replication and protection
abstract: A method is used for managing cache backup and restore for continuous data replication and protection. I/O operations are quiesced at a cache module. A first snapshot of a storage object and a second snapshot of an SSD cache object are taken. The I/O operations at the cache module are unquiesced. A single backup image comprising the first snapshot and the second snapshot is created. The single backup image is sent to a first data protection appliance (DPA) and recorded in a journal.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09317375&OS=09317375&RS=09317375
owner: LENOVOEMC LIMITED
number: 09317375
owner_city: Quarry Bay
owner_country: HK
publication_date: 20120330
---
This application is related to U.S. patent application Ser. No. 13 342 008 entitled MANAGING CACHE BACKUP AND RESTORE filed Dec. 31 2011 which is incorporated herein by reference for all purposes and U.S. patent application Ser. No. 13 432 637 entitled MANAGING INCREMENTAL CACHE BACKUP AND RESTORE filed Mar. 28 2012.

This application relates to managing cache backup and restore using continuous data replication and protection.

Computer data is vital to today s organizations and a significant part of protection against disasters is focused on data protection. Storage technology advancements have decreased the cost of memory to the point where organizations can afford to operate storage systems that store and process petabytes of data.

Storage devices are employed to store data that is accessed by computer systems. Examples of basic storage devices include volatile and non volatile memory floppy drives hard disk drives tape drives optical drives etc. A storage device may be locally attached to an input output I O channel of a computer. For example a hard disk drive may be connected to a computer s disk controller. A storage device may also be accessible over a network. Examples of such a storage device include network attached storage NAS and storage area network SAN devices. A storage device may be a single stand alone component or be comprised of a system of storage devices such as in the case of Redundant Array of Inexpensive Disks RAID groups.

Advances in semiconductor technology have lead to an increase in the use of a semiconductor solid state drive also known as a solid state disk or SSD which uses a flash memory as a storage device in areas such as computer systems. Thus in at least some cases there seems to be a trend towards the use of an SSD as a storage device instead of a magnetic disk. In spite of having features such as for example a relatively small storage capacity and a relatively high price the SSD has some other features that can make it more attractive as a storage device than the conventional magnetic disk in at least some cases.

Features that can make SSDs preferable as storage devices are for example a fast access rate high throughput a high integration density and stability against an external impact. SSDs can move much larger amounts of data and process far more I O requests per time period than conventional magnetic disks. This allows users to complete data transactions much more quickly. Furthermore advances in manufacturing technologies for SSDs may reduce the production costs of SSDs and also increase the storage capacities of SSDs. These developments may provide further incentive to use SSDs in place of magnetic disks in at least some cases. Storage systems often utilize the services of high performance storage devices as cache to store more frequently accessed data. These caches can include dedicated non volatile SSD memory. In this context caching is a technique to speed up data requests from application programs by saving frequently accessed data in memory for quick recall by the file system without having to physically retrieve the data from the storage devices. Caching is also useful during file writes the file system may write data to the memory cache and return control to the application before the data is actually written to non volatile storage. Eventually the cached data is written to the storage devices.

The state of the cache depends upon the consistency between the cache and the storage devices. A cache is clean when its contents are exactly the same as the data stored on the underlying storage devices. A cache is dirty when its data is newer than the data stored on storage devices a cache becomes dirty when the file system has written to the cache but the data has not yet been written to the storage devices. A cache is stale when its contents are older than data stored on the storage devices a cache becomes stale when it has not been updated to reflect changes to the data stored on the storage devices.

In order to maintain consistency between the caches and the storage devices file systems perform flush and invalidate operations on cached data. A flush operation writes dirty cached data to the storage devices before returning control to the caller. An invalidation operation removes stale data from the cache without invoking calls to the storage devices. File systems may flush or invalidate caches for specific byte ranges of the cached files.

Protecting data is a major concern to virtually every organization. Conventional data protection systems include tape backup drives for storing organizational production site data on a periodic basis. Such systems suffer from several drawbacks. First they require a system shutdown during backup since the data being backed up cannot be used during the backup operation. Second they limit the points in time to which the production site can recover. For example if data is backed up on a daily basis there may be several hours of lost data in the event of a disaster. Third the data recovery process itself takes a long time.

Another conventional data protection system uses data replication by creating a copy of the organization s production site data on a secondary backup storage system and updating the backup with changes. The backup storage system may be situated in the same physical location as the production storage system or in a physically remote location. Data replication systems generally operate either at the application level file system level or data block level.

Current data protection systems try to provide continuous data protection which enable the organization to roll back to any specified point in time within a recent history. Continuous data protection systems aim to satisfy two conflicting objectives as best as possible namely i minimize the down time in which the organization production site data is unavailable during a recovery and ii enable recovery as close as possible to any specified point in time within a recent history.

Continuous data protection typically uses a technology referred to as journaling whereby a log is kept of changes made to the backup storage. During a recovery the journal entries serve as successive undo information enabling rollback of the backup storage to previous points in time. Journaling was first implemented in database systems and was later extended to broader data protection.

A method is used for managing cache backup and restore using continuous data replication and protection. I O operations are quiesced at a cache module. A first snapshot of a storage object and a second snapshot of an SSD cache object are taken. The I O operations at the cache module are unquiesced. A single backup image comprising the first snapshot and the second snapshot is created. The single backup image is sent to a first data protection appliance DPA and recorded in a journal.

Solid state drives have become a cost effective power saving performance solution for consumers and businesses but can trail traditional hard drives in terms of cost of capacity. Having a flash cache feature in data storage device allows users to combine a single SSD with a traditional RAID configuration thereby realizing the performance benefits of the SSD without the added cost of moving to an entirely SSD based solution. SSD can be used for example as an SSD cache in a storage system and configured to store frequently accessed data. Less frequently accessed data may be stored on slower less expensive storage such as hard disk drives HDD . Such a configuration provides to a user the performance of an SSD based storage system with the cost and capacity of a HDD based system.

Protecting data stored on such systems has become critically important to users. Data protection systems typically include some form of replicating backing up and restoring data. However with conventional systems only non cache data is backed up and consequently only non cache data gets restored. That is data stored in cache such as an SSD cache is not backed up. Thus when data is restored the cache is essentially empty and must begin storing data. As a result the performance benefit of the previously populated SSD cache is lost when data is restored. By contrast current techniques enable an SSD cache to be backed up and restored thus preserving the cache performance benefit.

BACKUP SITE a facility where replicated production site data is stored the backup site may be located in a remote site or at the same location as the production site 

BLOCK VIRTUALIZATION may be a layer which take back end storage volumes and by slicing concatenating and striping creates a new set of volumes that serve as base volumes or devices in the virtualization layer 

CLONE a clone may be a copy or clone of the image or images drive or drives of a first location at a second location 

CONTINUOUS DATA PROTECTION CDP may refer to a full replica of a volume or a set of volumes along with a journal which allows any point in time access the CDP copy is at the same site and may be in the same storage array as the production volume CONTINUOUS REMOTE REPLICATION CRR may refer to a full replica of a volume or a set of volumes along with a journal which allows any point in time access at a site remote to the production volume and on a separate storage array 

DATA PROTECTION APPLIANCE DPA a computer or a cluster of computers that serve as a data protection appliance responsible for data protection services including inter alia data replication of a storage system and journaling of I O requests issued by a host computer to the storage system 

DELTA MARKING STREAM may mean the tracking of the delta between the production and replication site which may contain the meta data of changed locations the delta marking stream may be kept persistently on the journal at the production site of the replication based on the delta marking data the DPA knows which locations are different between the production and the replica and transfers them to the replica to make both sites identical 

DISTRIBUTED MIRROR may be a mirror of a volume across a distance either metro or geo which is accessible at all sites 

FAIL ALL MODE may be a mode of a volume in the splitter where all write and read I Os intercepted by the splitter are failed to the host but other SCSI command like read capacity are served 

GLOBAL FAIL ALL MODE may be a mode of a volume in the virtual layer where all write and read I Os to the virtual layer are failed to the host but other SCSI commands like read capacity are served 

HOST at least one computer or networks of computers that runs at least one data processing application that issues I O requests to one or more storage systems a host is an initiator with a SAN 

JOURNAL a record of write transactions issued to a storage system used to maintain a duplicate storage system and to rollback the duplicate storage system to a previous point in time 

LOGGED ACCESS may be an access method provided by the appliance and the splitter in which the appliance rolls the volumes of the consistency group to the point in time the user requested and let the host access the volumes in a copy on first write base 

LOGICAL UNIT a logical entity provided by a storage system for accessing data from the storage system 

MARKING ON SPLITTER may be a mode in a splitter where intercepted I Os are not split to an appliance and the storage but rather changes meta data are tracked in a list and or a bitmap and I Os are sent immediately down the I O stack 

PHYSICAL STORAGE UNIT a physical entity such as a disk or an array of disks for storing data in storage locations that can be accessed by address 

PRODUCTION SITE a facility where one or more host computers run data processing applications that write data to a storage system and read data from the storage system 

SAN a storage area network of nodes that send and receive I O and other requests each node in the network being an initiator or a target or both an initiator and a target 

SOURCE SIDE a transmitter of data within a data replication workflow during normal operation a production site is the source side and during data recovery a backup site is the source side 

SNAPSHOT a Snapshot may refer to differential representations of an image i.e. the snapshot may have pointers to the original volume and may point to log volumes for changed locations. Snapshots may be combined into a snapshot array which may represent different images over a time period 

SPLITTER PROTECTION AGENT may be an agent running either on a production host a switch or a storage array which can intercept I O and split them to a DPA and to the storage array fail I O redirect I O or do any other manipulation to the I O the splitter or protection agent may be used in both physical and virtual systems. The splitter may be in the I O stack of a system and may be located in the hypervisor for virtual machines.

STORAGE MEDIUM may refer to one or more storage mediums such as a hard drive a combination of hard drives flash storage combinations of flash storage combinations of hard drives flash and other storage devices and other types and combinations of computer readable storage mediums including those yet to be conceived a storage medium may also refer both physical and logical storage mediums and may include multiple level of virtual to physical mappings and may be or include an image or disk image 

STORAGE SYSTEM a SAN entity that provides multiple logical units for access by multiple SAN initiators 

TARGET SIDE a receiver of data within a data replication workflow during normal operation a back site is the target side and during data recovery a production site is the target side 

VIRTUAL ACCESS may be an access method provided by the appliance and the splitter in which the appliance exposes a virtual volume from a specific point in time to the host the data for the virtual volume is partially stored on the remote copy and partially stored on the journal 

VIRTUAL VOLUME may be a volume which is exposed to a host by a virtualization layer and may span across more than one site and

WAN a wide area network that connects local networks and enables them to communicate with one another such as the Internet.

A discussion of journaling and some techniques associated with journaling may be found in U.S. Pat. No. 7 516 287 entitled METHODS AND APPARATUS FOR OPTIMAL JOURNALING FOR CONTINUOUS DATA REPLICATION issued on Apr. 7 2009 and assigned to EMC Corporation of Hopkinton Mass. which is hereby incorporated by reference in its entirety.

A discussion of image access may be found in U.S. patent application Ser. No. 12 969 903 entitled DYNAMIC LUN RESIZING IN A REPLICATION ENVIRONMENT filed on Dec. 16 2010 and assigned to EMC Corp. which is hereby incorporated by reference in its entirety.

A discussion of journal based replication may be integrated with a virtual service layer. may be found in U.S. patent application Ser. Nos. 13 077 256 13 077 262 and 13 077 266 entitled CONSISTENT REPLICATION IN A GEOGRAPHICALLY DISPERSE ACTIVE ENVIRONMENT INVERSE STAR REPLICATION and NETWORKED BASED REPLICATION OF DISTRIBUTED VOLUMES respectively filed on Mar. 31 2011 and assigned to EMC Corp. which are hereby incorporated by reference in its entirety.

Reference is now made to which is a simplified illustration of a data protection system in accordance with an embodiment of the present invention. Shown in are two sites Site I which is a production site on the right and Site II which is a backup site on the left. Under normal operation the production site is the source side of system and the backup site is the target side of the system. The backup site is responsible for replicating production site data. Additionally the backup site enables rollback of Site I data to an earlier point in time which may be used in the event of data corruption or alternatively in order to view or to access data from an earlier point in time.

During normal operations the direction of replicate data flow goes from source side to target side. It is possible however for a user to reverse the direction of replicate data flow in which case Site I starts to behave as a target backup site and Site II starts to behave as a source production site. Such change of replication direction is referred to as a failover . A failover may be performed in the event of a disaster at the production site or for other reasons. In some data architectures Site I or Site II behaves as a production site for a portion of stored data and behaves simultaneously as a backup site for another portion of stored data. In some data architectures a portion of stored data is replicated to a backup site and another portion is not.

The production site and the backup site may be remote from one another or they may both be situated at a common site local to one another. Local data protection has the advantage of minimizing data lag between target and source and remote data protection has the advantage is being robust in the event that a disaster occurs at the source side.

The source and target sides communicate via a wide area network WAN although other types of networks are also adaptable for use with the present invention.

In accordance with an embodiment of the present invention each side of system includes four major components coupled via a storage area network SAN namely i a storage system ii a host computer iii a data protection appliance DPA and iv a secondary storage system connected to storage array via SAN NAS DAS. Specifically with reference to the source side SAN includes a source host computer a source storage system and a source DPA . Similarly the target side SAN includes a target host computer a target storage system and a target DPA .

Generally a SAN includes one or more devices referred to as nodes . A node in a SAN may be an initiator or a target or both. An initiator node is a device that is able to initiate requests to one or more other devices and a target node is a device that is able to reply to requests such as SCSI commands sent by an initiator node. A SAN may also include network switches such as fiber channel switches. The communication links between each host computer and its corresponding storage system may be any appropriate medium suitable for data transfer such as fiber communication channel links. In one example the primary and secondary storage systems may be connected via a transport connection.

In an embodiment of the present invention the host communicates with its corresponding storage system using small computer system interface SCSI commands.

System includes source storage system and target storage system . Each storage system includes physical storage units for storing data such as disks or arrays of disks. Typically storage systems and are target nodes. In order to enable initiators to send requests to storage system storage system exposes one or more logical units LU to which commands are issued. Thus storage systems and are SAN entities that provide multiple logical units for access by multiple SAN initiators. In addition or alternatively the source storage systems and or target storage system may also include one or more virtual LUN s not shown for example CDP LUNs.

Logical units are a logical entity provided by a storage system for accessing data stored in the storage system. A logical unit is identified by a unique logical unit number LUN . In an embodiment of the present invention storage system exposes a logical unit designated as LU A and storage system exposes a logical unit designated as LU B.

In an embodiment of the present invention LU B is used for replicating LU A. As such LU B is generated as a copy of LU A. In one embodiment LU B is configured so that its size is identical to the size of LU A. Thus for LU A storage system serves as a backup for source side storage system . Alternatively as mentioned hereinabove some logical units of storage system may be used to back up logical units of storage system and other logical units of storage system may be used for other purposes. Moreover in certain embodiments of the present invention there is symmetric replication whereby some logical units of storage system are used for replicating logical units of storage system and other logical units of storage system are used for replicating other logical units of storage system .

System includes a source side host computer and a target side host computer . A host computer may be one computer or a plurality of computers or a network of distributed computers each computer may include inter alia a conventional CPU volatile and non volatile memory a data bus an I O interface a display interface and a network interface. Generally a host computer runs at least one data processing application such as a database application and an e mail server.

Generally an operating system of a host computer creates a host device for each logical unit exposed by a storage system in the host computer SAN. A host device is a logical entity in a host computer through which a host computer may access a logical unit. In an embodiment of the present invention host device identifies LU A and generates a corresponding host device designated as Device A through which it can access LU A. Similarly host computer identifies LU B and generates a corresponding device designated as Device B.

In an embodiment of the present invention in the course of continuous operation host computer is a SAN initiator that issues I O requests write read operations through host device to LU A using for example SCSI commands. Such requests are generally transmitted to LU A with an address that includes a specific device identifier an offset within the device and a data size. Offsets are generally aligned to 512 byte blocks. The average size of a write operation issued by host computer may be for example 10 kilobytes KB i.e. blocks. For an I O rate of 50 megabytes MB per second this corresponds to approximately 5 000 write transactions per second.

System includes two data protection appliances a source side DPA and a target side DPA . A DPA performs various data protection services such as data replication of a storage system and journaling of I O requests issued by a host computer to source side storage system data. As explained in detail hereinbelow when acting as a target side DPA a DPA may also enable rollback of data to an earlier point in time and processing of rolled back data at the target site. Each DPA and is a computer that includes inter alia one or more conventional CPUs and internal memory.

For additional safety precaution each DPA is a cluster of such computers. Use of a cluster ensures that if a DPA computer is down then the DPA functionality switches over to another computer. The DPA computers within a DPA cluster communicate with one another using at least one communication link suitable for data transfer via fiber channel or IP based protocols or such other transfer protocol. One computer from the DPA cluster serves as the DPA leader. The DPA cluster leader coordinates between the computers in the cluster and may also perform other tasks that require coordination between the computers such as load balancing.

In the architecture illustrated in DPA and DPA are standalone devices integrated within a SAN. Alternatively each of DPA and DPA may be integrated into storage system and storage system respectively or integrated into host computer and host computer respectively. Both DPAs communicate with their respective host computers through communication lines such as fiber channels using for example SCSI commands.

In accordance with an embodiment of the present invention DPAs and are configured to act as initiators in the SAN i.e. they can issue I O requests using for example SCSI commands to access logical units on their respective storage systems. DPA and DPA are also configured with the necessary functionality to act as targets i.e. to reply to I O requests such as SCSI commands issued by other initiators in the SAN including inter alia their respective host computers and . Being target nodes DPA and DPA may dynamically expose or remove one or more logical units.

As described hereinabove Site I and Site II may each behave simultaneously as a production site and a backup site for different logical units. As such DPA and DPA may each behave as a source DPA for some logical units and as a target DPA for other logical units at the same time.

In accordance with an embodiment of the present invention host computer and host computer include protection agents and respectively. It should be noted that the protection agents may be located at different locations and as such may be host based e.g. application host fabric based e.g. fibre channel switch storage array based or VM based e.g. hypervisor .

Protection agents and intercept SCSI commands issued by their respective host computers via host devices to logical units that are accessible to the host computers. In accordance with an embodiment of the present invention a data protection agent may act on an intercepted SCSI commands issued to a logical unit in one of the following ways 

Split the SCSI command by sending it first to the respective DPA. After the DPA returns an acknowledgement send the SCSI command to its intended logical unit.

A protection agent may handle different SCSI commands differently according to the type of the command. For example a SCSI command inquiring about the size of a certain logical unit may be sent directly to that logical unit while a SCSI write command may be split and sent first to a DPA associated with the agent. A protection agent may also change its behavior for handling SCSI commands for example as a result of an instruction received from the DPA.

Specifically the behavior of a protection agent for a certain host device generally corresponds to the behavior of its associated DPA with respect to the logical unit of the host device. When a DPA behaves as a source site DPA for a certain logical unit then during normal course of operation the associated protection agent splits I O requests issued by a host computer to the host device corresponding to that logical unit. Similarly when a DPA behaves as a target device for a certain logical unit then during normal course of operation the associated protection agent fails I O requests issued by host computer to the host device corresponding to that logical unit.

Communication between protection agents and their respective DPAs may use any protocol suitable for data transfer within a SAN such as fiber channel or SCSI over fiber channel. The communication may be direct or via a logical unit exposed by the DPA. In an embodiment of the present invention protection agents communicate with their respective DPAs by sending SCSI commands over fiber channel.

In an embodiment of the present invention protection agents and are drivers located in their respective host computers and . Alternatively a protection agent may also be located in a fiber channel switch or in any other device situated in a data path between a host computer and a storage system.

What follows is a detailed description of system behavior under normal production mode and under recovery mode.

In accordance with an embodiment of the present invention in production mode DPA acts as a source site DPA for LU A. Thus protection agent is configured to act as a source side protection agent i.e. as a splitter for host device A. Specifically protection agent replicates SCSI I O requests. A replicated SCSI I O request is sent to DPA . After receiving an acknowledgement from DPA protection agent then sends the SCSI I O request to LU A. Only after receiving a second acknowledgement from storage system may host computer initiate another I O request.

When DPA receives a replicated SCSI write request from data protection agent DPA transmits certain I O information characterizing the write request packaged as a write transaction over WAN to DPA on the target side for journaling and for incorporation within target storage system .

DPA may send its write transactions to DPA using a variety of modes of transmission including inter alia i a synchronous mode ii an asynchronous mode and iii a snapshot mode. In synchronous mode DPA sends each write transaction to DPA receives back an acknowledgement from DPA and in turns sends an acknowledgement back to protection agent . Protection agent waits until receipt of such acknowledgement before sending the SCSI write request to LU A.

In asynchronous mode DPA sends an acknowledgement to protection agent upon receipt of each I O request before receiving an acknowledgement back from DPA .

In snapshot mode DPA receives several I O requests and combines them into an aggregate snapshot of all write activity performed in the multiple I O requests and sends the snapshot to DPA for journaling and for incorporation in target storage system . In snapshot mode DPA also sends an acknowledgement to protection agent upon receipt of each I O request before receiving an acknowledgement back from DPA .

For the sake of clarity the ensuing discussion assumes that information is transmitted at write by write granularity.

While in production mode DPA receives replicated data of LU A from DPA and performs journaling and writing to storage system . When applying write operations to storage system DPA acts as an initiator and sends SCSI commands to LU B.

During a recovery mode DPA undoes the write transactions in the journal so as to restore storage system to the state it was at at an earlier time.

As described hereinabove in accordance with an embodiment of the present invention LU B is used as a backup of LU A. As such during normal production mode while data written to LU A by host computer is replicated from LU A to LU B host computer should not be sending I O requests to LU B. To prevent such I O requests from being sent protection agent acts as a target site protection agent for host Device B and fails I O requests sent from host computer to LU B through host Device B.

In accordance with an embodiment of the present invention target storage system exposes a logical unit referred to as a journal LU for maintaining a history of write transactions made to LU B referred to as a journal . Alternatively journal LU may be striped over several logical units or may reside within all of or a portion of another logical unit. DPA includes a journal processor for managing the journal. In addition or alternatively the target storage system may also include one or more virtual LUN s e.g. CDP LUNs of LU A .

Journal processor functions generally to manage the journal entries of LU B. Specifically journal processor i enters write transactions received by DPA from DPA into the journal by writing them into the journal LU ii applies the journal transactions to LU B and iii updates the journal entries in the journal LU with undo information and removes already applied transactions from the journal. As described below with reference to journal entries include four streams two of which are written when write transaction are entered into the journal and two of which are written when write transaction are applied and removed from the journal.

Write transaction is transmitted from source side DPA to target side DPA . As shown in DPA records the write transaction in four streams. A first stream referred to as a DO stream includes new data for writing in LU B. A second stream referred to as an DO METADATA stream includes metadata for the write transaction such as an identifier a date time a write size a beginning address in LU B for writing the new data in and a pointer to the offset in the do stream where the corresponding data is located. Similarly a third stream referred to as an UNDO stream includes old data that was overwritten in LU B and a fourth stream referred to as an UNDO METADATA include an identifier a date time a write size a beginning address in LU B where data was to be overwritten and a pointer to the offset in the undo stream where the corresponding old data is located.

In practice each of the four streams holds a plurality of write transaction data. As write transactions are received dynamically by target DPA they are recorded at the end of the DO stream and the end of the DO METADATA stream prior to committing the transaction. During transaction application when the various write transactions are applied to LU B prior to writing the new DO data into addresses within the storage system the older data currently located in such addresses is recorded into the UNDO stream.

By recording old data a journal entry can be used to undo a write transaction. To undo a transaction old data is read from the UNDO stream in a reverse order from the most recent data to the oldest data for writing into addresses within LU B. Prior to writing the UNDO data into these addresses the newer data residing in such addresses is recorded in the DO stream. The journal LU is partitioned into segments with a pre defined size such as 1 MB segments with each segment identified by a counter. The collection of such segments forms a segment pool for the four journaling streams described hereinabove. Each such stream is structured as an ordered list of segments into which the stream data is written and includes two pointers a beginning pointer that points to the first segment in the list and an end pointer that points to the last segment in the list.

According to a write direction for each stream write transaction data is appended to the stream either at the end for a forward direction or at the beginning for a backward direction. As each write transaction is received by DPA its size is checked to determine if it can fit within available segments. If not then one or more segments are chosen from the segment pool and appended to the stream s ordered list of segments.

Thereafter the DO data is written into the DO stream and the pointer to the appropriate first or last segment is updated. Freeing of segments in the ordered list is performed by simply changing the beginning or the end pointer. Freed segments are returned to the segment pool for re use.

A journal may be made of any number of streams including less than or more than 5 streams. Often based on the speed of the journaling and whether the back up is synchronous or a synchronous a fewer or greater number of streams may be used.

A description of Image access follows. Herein some information is provided for conventional continuous data protection systems having journaling and a replication splitter which may be used in one or more embodiments is provided. A replication set may refer to an association created between the source volume and the local and or remote target volumes and a consistency group contains one or more replication sets. A snapshot may be the difference between one consistent image of stored data and the next. The exact time for closing the snapshot may determined dynamically depending on replication policies and the journal of the consistency group.

In synchronous replication each write may be a snapshot. When the snapshot is distributed to a replica it may be stored in the journal volume so that is it possible to revert to previous images by using the stored snapshots. As noted above a splitter mirrors may write from an application server to LUNs being protected by the data protection appliance. When a write is requested from the application server it may be split and sent to the appliance using a host splitter driver residing in the I O stack below any file system and volume manager and just above any multipath driver such as EMC POWERPATH through an intelligent fabric switch through array based splitter such as EMC CLARiiON .

There may be a number of image access modes. Image access may be used to restore production from the disaster recovery site and to roll back to a previous state of the data. Image access may be also to temporarily operate systems from a replicated copy while maintenance work is carried out on the production site and to fail over to the replica. When image access is enabled host applications at the copy site may be able to access the replica.

In virtual access the system may create the image selected in a separate virtual LUN within the data protection appliance. While performance may be constrained by the appliance access to the point in time image may be nearly instantaneous. The image may be used in the same way as logged access physical noting that data changes are temporary and stored in the local journal. Generally this type of image access is chosen because the user may not be sure which image or point in time is needed. The user may access several images to conduct forensics and determine which replica is required. Note that in known systems one cannot recover the production site from a virtual image since the virtual image is temporary. Generally when analysis on the virtual image is completed the choice is made to disable image access.

If it is determined the image should be maintained then access may be changed to logged access using roll to image. When disable image access is disabled the virtual LUN and all writes to it may be discarded.

In an embodiment of virtual access with roll image in background the system first creates the image in a virtual volume managed by the data protection appliance to provide rapid access to the image the same as in virtual access. Simultaneously in background the system may roll to the physical image. Once the system has completed this action the virtual volume may be discarded and the physical volume may take its place. At this point the system continues to function as if logged image access was initially selected. The switch from virtual to physical may be transparent to the servers and applications and the user may not see any difference in access. Once this occurs changes may be read from the physical volume instead of being performed by the appliance. If image access is disabled the writes to the volume while image access was enabled may be rolled back undone . Then distribution to storage may continue from the accessed image forward.

In some embodiments in physical logged access the system rolls backward or forward to the selected snapshot point in time . There may be a delay while the successive snapshots are applied to the replica image to create the selected image. The length of delay may depend on how far the selected snapshot is from the snapshot currently being distributed to storage. Once the access is enabled hosts may read data directly from the volume and writes may be handled through the DPA. The host may read the undo data of the write and the appliance may store the undo data in a logged access journal. During logged access the distribution of snapshots from the journal to storage may be paused. When image access is disabled writes to the volume while image access was enabled tracked in the logged access journal may be rolled back undone . Then distribution to storage may continue from the accessed snapshot forward.

Disable image access may mean changes to the replica may be discarded or thrown away. It may not matter what type of access was initiated that is logged or another type or whether the image chosen was the latest or an image back in time. Disable image access effectively says the work done at the disaster recovery site is no longer needed.

A description of delta marking follows. A delta marker stream may contain the locations that may be different between the latest I O data which arrived to the remote side the current remote site and the latest I O data which arrived at the local side. In particular the delta marking stream may include metadata of the differences between the source side and the target side. For example every I O reaching the data protection appliance for the source may be written to the delta marking stream and data is freed from the delta marking stream when the data safely arrives at both the source volume of replication and the remote journal e.g. DO stream . Specifically during an initialization process no data may be freed from the delta marking stream and only when the initialization process is completed and I O data has arrived to both local storage and the remote journal data may be I O data from the delta marking stream freed. When the source and target are not synchronized data may not be freed from the delta marking stream. The initialization process may start by merging delta marking streams of the target and the source so that the delta marking stream includes a list of all different locations between local and remote sites. For example a delta marking stream at the target might have data too if a user has accessed an image at the target site.

The initialization process may create one virtual disk out of all the available user volumes. The virtual space may be divided into a selected number of portions depending upon the amount of data needed to be synchronized. A list of dirty blocks may be read from the delta marker stream that is relevant to the area currently being synchronized to enable creation of a dirty location data structure. The system may begin synchronizing units of data where a unit of data is a constant amount of dirty data e.g. a data that needs to be synchronized.

The dirty location data structure may provide a list of dirty location until the amount of dirty location is equal to the unit size or until there is no data left. The system may begin a so called ping pong process to synchronize the data. The process may transfer the differences between the production and replica site to the replica.

In step I O operations flow from the application to the file system . In step the I O operation may flow from the file system to the storage object . In step I O operation may flow from the storage object to the SSD cache object . In step the I O operation flows from the SSD cache object back storage object . In step the I O operation flows from the storage object back to the file system . From there in step the I O operation is transmitted from the file system back to the application and processed accordingly. It should be noted that although the example employs a file system and therefore supports files this should not be construed as a limitation. Other known data protocols are supported such as for example blocks.

I O operations flow between the application and objects and as shown in the numbered steps. For example in step I O operations received from hosts at or generated by an application flow from the application to the raw storage object . In step I O operations may flow from the raw storage object to the SSD cache object . In step I O operations flow from the SSD cache object back to the storage object via for example an I O callback. In step an I O operation e.g. buffer is returned to the application .

The techniques described herein advantageously enable communication between the backup module and the cache module . Accordingly in step the backup module may issue a request to freeze or quiesce I O operations e.g. I O communications to the cache module . Freezing or quiescing I O operations may be performed to prepare the storage system for creating a consistent backup state. For example updates are not allowed to an object but reads are allowed. In some embodiments quiescing may be associated with performing one or more operations to ensure object consistency. In some embodiments quiescing a storage object includes performing one or more following flushing one or more buffers associated with the object disabling updates to the object and logging transactions associated with the object. In various embodiments the type of operations associated with performing quiescing is configurable. For example configuration parameters may be included with the request to specify the type of operations and or configuration associated with the operations performed during quiescing. Quiescing I O operations associated with applications running on a host may be coordinated by the host.

In step a response is sent from the cache module back to the backup module . In step a snapshot request is generated and forwarded to the storage object . Similarly in step another snapshot request is generated and forwarded to the SSD cache object . In step based on the received request a snapshot image of the storage object is created. In step based on the received request a snapshot image of the SSD cache object is created. In step I O operations are resumed i.e. unfrozen or unquiesced . In some embodiments unquiescing a component includes performing one or more of the following re enabling updates ending hot backup transaction logging and implementing changes requested to the object while quiesced. In step a response is sent from the cache module to the backup module . In step a backup request is forwarded from the backup module to the storage object snap . In various embodiments the type of backup method used is configurable and or specified by configuration preference included with the request. In some embodiments backup is initiated within a prescribed or indicated amount of time from unquiescing I O operations.

A complete backup of the storage object snap may be forwarded to the single backup image in step . In step a backup request is forwarded from the backup module to the SSD cache object snap. In step a backup of SSD cache dirty block and metadata dump of clean block is performed. Thus a single backup image of both the storage object snap and the SSD cache object snap may be created. The control module may communicate with the storage object and or the SSD cache object via control data signals which communications are represented via the dotted communication paths.

In operation at step a restore operation is initiated. At step the restore module reads restore data from the single backup image . At step the storage object is restored using the storage object portion of the single backup image and at step a storage object restore status is forwarded to the restore module . At step the SSD cache object is restored using the SSD cache object portion of the single backup image using a cache mapping technique described below with reference to . At step an SSD cache object restore status is forwarded to the restore module . At step cache mapping between restored SSD cache object and restored storage object is enabled. Upon completion a restore status value is forwarded to the restore module and at step the application is granted access to the restored storage object . Control and or data signals may be communicated between the cache module located at a SAN NAS array and the restored storage object as shown via the dotted communication paths. Thus the restored cache configured storage is exposed to application thereby resulting in an immediate SSD cache I O performance benefit. By contrast conventional systems do not have a cache module that communicates with a backup module and restore module in the manner described herein. Consequently when conventional systems restore a backup because the cache was not restored the cache must be rebuilt anew and as a result suffers performance degradation.

In an example embodiment the SSD cache backup and restore techniques described herein may be integrated with the CDP R system described above as follows. A storage array e.g. NAS SAN where the storage object and SSD cache object reside may be integrated with the CDP R system to provide a point in time SSD cache benefit associated with a restored storage object. Storage volumes at the source side and the target side may be assigned to a consistency group to define CDP R rules for the data set. The SSD cache object i.e. SSD LUN on DAS SAN storage array configured to a storage object i.e. production LUN may be added to consistency group along with its corresponding storage object i.e. production LUN . As a result all writes to the SSD cache will also be protected by the CDP R appliance.

CDP R Solution Management Interface I O Splitter Other Agents CDP R Appliance can be configured to detect the SSD cache configured production LUNS. In one implementation code changes may be made to system software so as to add the SSD Cache to a consistency group to provide protection replication of SSD I O using the CDP R appliance.

The CDP R system may use SSD or inexpensive hard disk drives to maintain time store volumes i.e. virtual LUN s for every SSD cache configured to each production LUN. The implementation choice regarding SSD and less expensive HDDs is based on cost vs. I O performance. Based on these choices the CDP R system can implement the appropriate storage devices for time store volumes.

Device discovery agents running on the storage array host may be able to detect SSD cache devices configured to a production LUN used by an application. In this case the properties of the device such as size type of device e.g. SSD cache and required parameters are sent to management software at the CDP Appliance along with production LUN information. Thus when system administrator configures protection to an application that uses SSD cache configured LUN a consistency group to protect the SSD cache of a production LUN will be created and the same information will be populated to all required components participating in the protection scheme.

The snapshot process described below may be taken by the CDP R appliance as well as any point in time snapshot of the cache configured volume. The CDP R appliance can communicate system with all necessary components to create point in time snapshots of a cache configured LUN i.e. production LUN and SSD Cache .

Snapshot request to an SSD cache configured LUN at the CDP R appliance can be made at the consistency group level and this ensures creation of individual snapshots of storage objects i.e. production LUN and the SSD cache object. The cache module can reside at the application server fabric switch or storage array.

Integration of the SSD cache backup restore techniques may modify consistency group fields to include the following 

The backup module at the CDP R as described above with reference to may communicate with the backup application accordingly to create a point in time backup image of a cache configured production volume for an application. The CDP R also helps the backup application create a single backup image of production LUN and SSD cache on a secondary storage. The backup module may also communicate with necessary components in the CDP R appliance to take a consistent snapshot of a cache configured volume i.e. snapshot of production LUN and SSD Cache LUN . The single backup image available at the first or second data protection appliance can be moved to a secondary storage system with the help of backup module at the data protection appliance. Alternatively CDP R policies can be set to backup application secondary storage at the first data protection appliance so that the single backup image would be protected by the CDP R system hence double protection of storage object and SSD cache is achieved.

Various embodiments utilizing techniques described herein may employ a cache algorithm such as that described in the following example. The algorithm may configure an SSD cache object of a size X to a storage object of size Y with block size B. Upon successful cache configuration a superblock having the following format may be maintained in the data storage system memory and stored persistently at SSD Cache Object Sector Z. An example on disk superblock format may include the following 

The cache dirty region logging DRL may be an on disk structure comprising a set of cache block entries where each entry contains cached block information state information i.e. dirty or clean and DRL entry size. Block mapping between an SSD cache object and storage object may be performed using known hash based algorithms so that the storage object block data will be cached in a corresponding SSD cache block. An example cache mapping table of an SSD cache and storage object is shown below.

The above table may be build using a linear probing algorithm and hash formula such as for example Storage Object LBA Total Number of SSD Cache Blocks 1 . A cache search module can be implemented using hashing and or various dynamic data structures. The cache search module maintains the locality of reference information of the cached data blocks.

As mentioned above cache e.g. SSD cache is commonly used in conventional data storage systems to store frequently accessed data on higher performance storage. When a system is first initialized cache is essentially empty but as data is read the storage system begins placing the frequently accessed data in the SSD cache. As the cache fills up system performance improves because the amount of data available in the SSD increases.

However in conventional systems when a backup is performed the performance advantage of cache is lost in that conventional methods do not backup the cache configured data. Consequently when a restore is performed SSD cache is essentially empty and the storage system must rebuild the cache. The rebuild process takes time and as a result the storage system will not be able to take full advantage of the performance benefit that the SSD cache can provide. This performance lag correspondingly increases as the size of cache increases because it takes longer to fill such large caches.

By contrast techniques described herein provide a method system and computer program to backup both standard storage objects and an SSD cache object. Advantageously when a restore is performed the SSD cache is loaded with the data that was present when the backup was performed. Consequently the performance lag is essentially eliminated thereby providing a significant performance boost when restoring data as compared with conventional methods. Integration of the current techniques with a CPD R appliance such as that described in provides an additional advantage of storing cache data on less expensive storage e.g. HDD . Furthermore because the I O protection is off hosted to the CPD R appliance the production host application I O performance is not degraded during this process. The techniques described below illustrate both full and incremental SSD cache backup and restore. Alternative example embodiments further illustrate techniques to reduce the amount of storage space required to perform a full or incremental backup.

The method begins at step S by reading I O for a block. At Step S a cache logical block address LBA search is executed. If at step S the LBA is found in the cache database the method proceeds to step S where the method reads from cache and then updates flags for the block according to the cache replacement algorithm and then proceeds to step S where a buffer is returned to the requestor. However if the LBA is not found at step S the method proceeds to step S and reads the storage object. At step a determination is made as to whether the storage object read was successful or not. If the read was not successful the method proceeds to step S where the read error is processed. If the read was successful the method proceeds to step S where the buffer is returned to the requestor. At step S a determination is made to see if the cache is full and if not at step S the method finds a free cache block to be updated with the storage object. However if at step S the cache is determined to be full the method proceeds to step S where based on the cache replenish mechanism the method locates the cache block to be updated with storage object data. In either case the method proceeds to step S where data is written to the identified cache block. At step S a determination is made as to whether the write was successful or not. If the read was successful the method proceeds to step S where various updates are performed including updating the cache search database with the new block updating flags and updating system memory and on disk cache superblock with the block information as clean. However if at step S the write was not successful the method proceeds to step S where the write error is processed.

However if the LBA is not found in the cache database at step S the method proceeds to step S and a determination to see if the cache is full. If the cache is full based on the cache replenish mechanism the method locates the cache block to be updated with write I O data and continues with step S. If the cache is not full at step S the method locates a free cache block to be updated with write I O data. At step S the data is written to the identified cache block.

At step S if the write was not successful the method proceeds to step S where the write error is processed. If the write was successful the method proceeds to step S where various updates are performed including updating the cache search database with the new block updating flags and updating system memory and on disk cache superblock with the required information. The method then proceeds to step where it returns to the requestor and a dirty threshold value is calculated and a cache flush daemon is invoked accordingly.

It should again be emphasized that the technique implementations described above are provided by way of illustration and should not be construed as limiting the present invention to any specific embodiment or group of embodiments. For example the invention can be implemented in other types of systems using different arrangements of processing devices and processing operations. Also message formats and communication protocols utilized may be varied in alternative embodiments. Moreover various simplifying assumptions made above in the course of describing the illustrative embodiments should also be viewed as exemplary rather than as requirements or limitations of the invention. Numerous alternative embodiments within the scope of the appended claims will be readily apparent to those skilled in the art.

More detailed examples of backup algorithms with reference to the general backup algorithm discussed above in are presented below. The algorithm below referred to herein as backup method 1 uses the backup image format shown in and proceeds as follows 

Two corresponding example restore algorithms with reference to the general restore algorithm discussed above in are presented below. The first restore algorithm referred to herein as restore method 1 may make utilize the backup image format shown in and may be used in conjunction with backup method 1 described above. Restore method 1 proceeds as follows 

The second example restore algorithm referred to herein as restore method 2 may utilize the backup image format shown in and may be used in conjunction with backup method 2 described above. Restore method 2 proceeds as follows 

In this embodiment incremental backup is supported through the use of an in memory and on disk bitmap to track all write operations of the storage object at the cache module. The size of the bitmap maintained by the cache module may be as follows Bitmap size in bits size of storage object in bytes block size of SSD cache object in bytes Bitmap size in bytes Bitmap size in bits 8 Bitmap size in sectors Bitmap size in bytes 512

The in memory and on disk i.e. on cache dedicated external volume storage object DRL bitmap of above size is maintained and the same is mutually exclusive of the cache DRL bitmap. That is bitmaps are maintained for both the disk and the cache.

The DRL bitmap tracks all writes going to the disk as well as the cache and are maintained in the cache module. These bitmaps are used when a backup is performed for the disk and cache. Thus they are maintained by the cache module because the cache module is aware of all writes going to the disk and cache. Conventionally only one bitmap i.e. only metadata of dirty blocks in the superblock of storage object is maintained as part of a standard backup procedure i.e. not maintained by the cache module and as a result conventional methods cannot avail point in time SSD cache benefit to a restored storage object.

A full backup of a cache configured storage object may be performed using backup techniques such as those described in the related U.S. patent application Ser. No. 13 342 008 entitled MANAGING CACHE BACKUP AND RESTORE. Consecutive incremental backups may follow the backup method described below.

More detailed examples of backup algorithms with reference to the general backup algorithm discussed above in are presented below. In one example embodiment the algorithm below referred to herein as backup method 1 uses the backup image format shown in and proceeds as follows 

It should be noted that the backup header cache superblock and DRL metadata blocks need not be written at the locations specified in above algorithm and the locations that consume less seek time during the backup restore can be standardized accordingly. The backup format shown in is but one example embodiment that can be implemented to achieve the functionality described herein.

An alternative example embodiment employing the backup image depicted in is described below. In this example the algorithm illustrated may use considerably less storage space than backup method 1. As described above the backup image of includes storage object data blocks SSD cache dirty data blocks backup header DRL metadata blocks cache superblock and storage object SO DRL metadata . The backup header DRL metadata block and cache superblocks include a number of fields and are of sufficient size to hold respective fields . The space efficient algorithm below referred to herein as backup method 2 uses the backup image format shown in 

A corresponding example restore algorithm with reference to the general restore algorithm discussed above in is presented below. The restore algorithm may utilize the backup image format shown in and may be used in conjunction with backup method 1 and backup method 2 as described above. The restore algorithm proceeds as follows 

The subject matter described herein for managing data backup and recovery in a data storage system may be implemented in hardware software firmware or any combination thereof. As such the terms technique or logic as used herein may refer to software in combination with hardware and or firmware for implementing the feature being described. In one example implementation the subject matter described herein may be implemented using a non transitory computer readable medium having stored thereon computer executable instructions that when executed by the processor of a computer perform steps.

Exemplary non transitory computer readable media suitable for implementing the subject matter described herein include disk memory devices chip memory devices programmable logic devices and application specific integrated circuits. In addition a computer program product that implements the subject matter described herein may be located on a single device or computing platform or may be distributed across multiple devices or computing platforms.

While the invention has been disclosed in connection with preferred embodiments shown and described in detail their modifications and improvements thereon will become readily apparent to those skilled in the art. Accordingly the spirit and scope of the present invention should be limited only by the following claims.

