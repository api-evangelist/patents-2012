---

title: Server-side suggestion of preload operations
abstract: An improved information retrieval system is provided that uses profile information indicating one or more possible destinations associated with a web page to assist in preloading. In one aspect, in response to detecting that the user has interacted with a display element in a first web page browser window, the system retrieves information from a second web page before the user requests that the second web page be displayed within the web browser window. This retrieval enables rapid access to various features of web pages in the web browser window.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08626763&OS=08626763&RS=08626763
owner: Google Inc.
number: 08626763
owner_city: Mountain View
owner_country: US
publication_date: 20120604
---
The present application is a continuation of U.S. patent application Ser. No. 13 478 504 filed May 23 2012 which is a continuation of U.S. patent application Ser. No. 12 182 124 filed Jul. 29 2008 which is a continuation of U.S. patent application Ser. No. 11 469 953 filed Sep. 5 2006 and issued as U.S. Pat. No. 7 467 137 on Dec. 16 2008 which is a continuation of U.S. patent application Ser. No. 10 611 077 filed Jul. 1 2003 and issued as U.S. Pat. No. 7 103 594 on Sep. 5 2006 which is a continuation of U.S. patent application Ser. No. 09 974 242 filed Oct. 9 2001 and issued as U.S. Pat. No. 6 604 103 on Aug. 5 2003 which is a continuation of U.S. patent application Ser. No. 09 620 651 filed Jul. 20 2000 which is a continuation of U.S. patent application Ser. No. 09 083 382 filed May 22 1998 which claims the benefit of the filing date of U.S. Provisional Application No. 60 047 554 filed May 22 1997 entitled Document Retrieval System Including Use of Profile Information the entire disclosures of which are hereby incorporated herein by reference.

The present invention relates to a system for retrieving from a database. More specifically the present invention improves a system s usability and or response time so that a user s request to view new information is serviced quickly and or efficiently.

The recent proliferation of electronic text and multimedia databases has placed at society s fingertips a wealth of information and knowledge. Typically a computer is employed that locates and retrieves information from the database in response to a user s input. The requested information is then displayed on the computer s monitor. Modern database systems permit efficient comprehensive and convenient access to an infinite variety of documents publications periodicals and newspapers. Yet retrieving information from databases is often slow. Sometimes this is caused by bandwidth limitations such as when information is retrieved from remotely located databases over an ordinary telephone line a very narrow bottleneck. In other cases slow retrieval is caused by a relatively slow local mass storage device e.g. a CD ROM drive .

There exists a compelling need for a database system that has better usability and or a quicker response time so that information is displayed very soon after the user requests it. In some embodiments the present invention takes advantage of the fact that it can be useful to have the user exercise some direct control over the retrieval of information. Some embodiments of the present invention could also take advantage of the fact that the time that the user spends viewing displayed information is often sufficient to advantageously preload a substantial amount of information.

With these and other objects advantages and features of the invention that may become hereinafter apparent the nature of the invention may be more clearly understood by reference to the following detailed description of the invention the appended claims and to the several drawings herein.

In a networked environment such as that of there are numerous ways in which software can be installed distributed and or executed on the various computers on the network. illustrates a conventional way in which desktop software is installed and executed. In a computer program is installed at the computer through some type of installation program typically started by the user of the computer and executed on the computer . During installation the program may need to be configured at the computer for use with the network in order to enable access to other computers on the network e.g. and . After installation the computer program resides and executes at the computer and is persistent. When the computer is shut down or restarted the program continues to be stored at the client on non volatile storage media. Upon restarting the computer the program is available for use without reinstallation.

The computer identifies at one or more programs embedded within the accessed object. The client computer then determines whether each embedded program has been installed previously on the computer . This can be done by searching the computer s storage or system registry for the program or for the program s identifying characteristics. In Microsoft s ActiveX COM architecture for example this is done by searching the registry for an instance of the program s globally unique identifier GUID in the system registry.

If the embedded program has been installed on the client computer the previously installed program is retrieved from local storage at and executed at . However if the program has not been already installed on the client computer it is retrieved over the network and installed on the client computer. The installation process will typically involve updating a system registry or other persistent storage with identifying information on the computer .

Preferably the program is installed at such that it need not be downloaded again over the network when it is encountered embedded within another object. For example if the computer were to access an object on computer that had program embedded within it the program would not need to be installed again because it has already been installed when computer was accessed.

A system in which software is downloaded over the network perhaps from an untrusted server has significant security risks associated with it and for this reason security restrictions may be placed on computer programs downloaded from the network. Thus a downloaded computer program may be unable access some of the resources of a client computer or of the network generally. In some embodiments however a downloaded program may be tested for authenticity and safety through a code signing procedure or through a code verifying procedure. If such a program passes such authenticity tests it may be given more complete access to system or network resources.

In yet another embodiment shown in the network connected computer connects to the remote computer over the network but the program executes on the remote computer . Display information and or instructions are sent from the remote computer to the computer and this information and or instructions are interpreted by a terminal program or a thin client program which updates the display. Input device events e.g. mouse clicks and keyboard events caused by the user at the computer are sent to the remote computer so as to appropriately alter the execution of the program executing at the remote computer. In some implementations it appears to the user of computer that the program is executing on computer even though the program is actually executing on the computer . This scenario or one similar to it is employed by some of the thin client computing environments such as Citrix Corporation s WinFrame solution or Microsoft s forthcoming Hydra initiative.

Each of the described techniques for installation and or use of software can be implemented in connection with the present invention. For example software used for carrying out one or more embodiments of the present invention may be installed and executed in accordance with the techniques described above.

In four documents that might correspond to search documents found as a result of a query are shown. The query may be formulated to find all the documents in a given database that include the phrase Hadley v. Baxendale. Each X in the search documents A A A and A represents an occurrence of the phrase Hadley v. Baxendale. As can be seen the phrase Hadley v. Baxendale can be found in search document A at two separate locations. Document A has six occurrences and search document A has three. Search document A has one occurrence the title of search document A is Hadley v. Baxendale. 

There are also related documents A A and A shown in . A related document is a document that is somehow explicitly associated linked or otherwise connected to one of the search documents. For example if search document A is a judicial opinion a related document might be a subsequent opinion in the same case e.g. an decision on appeal . Other related documents might be an opinion or scholarly article that cites or discusses search document A or a list of judicial opinions that cite the search document. Any document that is usefully associated with the search document can be considered a related document. Often the related document does not satisfy the query so it is usually not one of the search documents. In some circumstances however the related document might satisfy the query so it can be a search document.

Related documents may also be related only to a particular view within a search document. For example a search document that is a judicial opinion may have numerous other judicial opinions cited in the text of the opinion. These cited opinions may be related documents but often they relate only to a particular view within the document. Depending on the implementation of the database system they might not be considered to be related to the search document as a whole. Thus they are available as related documents only when the corresponding cite is within the currently displayed view. In such an implementation the related documents are dependent on the view shown on the monitor at any given time.

The user uses one or more input devices to request particular views. For example an input device might be a keyboard that includes a next page key and a next document key. The next page key requests the next successive view view A within the document currently being viewed document A . The next document view requests the first view view A of the next successive search document according to the ordering characteristic document A . Many database systems have next page and next document commands or keys e.g. Westlaw LEXIS NEXIS and West Publishing Company s CD ROM products as well as others e.g. previous document previous page . Westlaw also permits a user to request a particular search document or page by typing a command. For example to view search document three A the user types r3 to request page 2 i.e. view within the currently displayed document the user types p2. And in some systems multiple commands can be executed together by separating them with a semicolon so page two from document three view A can be requested with a single command r3 p2. 

In the systems of the prior art when the database system receives the command to display a different view the requested view must be loaded from the database before it can be displayed on the monitor or display. Since retrieving information from the database is time consuming this loading process is undesirably slow. But in a system employing the present invention the time required to respond to the user s request for a different view the requested view is reduced by taking advantage of the fact that it is often possible to predict the requested view before the user actually requests it. In the present invention the view s that the user is likely to next request are preloaded while the user is reading the displayed view.

Thus in one embodiment of the present invention the view or views i.e. anticipated view s that are likely to be next requested by the user are preloaded e.g. in the background to the extent permitted by the time the user spends reading or studying the display view. When the user does request that a different view be displayed i.e. the user requests a requested view the requested view can be very quickly displayed on the monitor if it has already been preloaded into memory. Thus if the requested view is one of the anticipated views the database system is able to quickly respond to the user s request for the requested view.

As shown in while the user is reading or studying the display view A view A is identified as an anticipated view signified by the arrow from view A to view A . View A is likely to be requested by the user because it is the first view of the next search document as defined by the ordering characteristic following search document A. And while the display view A is being viewed by the user the database system will preload view A from the database into memory before it is actually requested by the user. After view A is preloaded into memory the input device is checked to see if the user has requested that another view be displayed. If the user has requested that a requested view be displayed the database system checks to see if the requested view has been loaded into memory e.g. as the preloaded anticipated view . If the requested view is view A it will have been loaded into memory as the anticipated view so view A is retrieved from memory and displayed on the monitor. Since loading the requested view from memory is much faster than loading the requested view from the database the time required to respond to the user s request for the requested view is shortened dramatically. If the requested view is not in memory however it must be retrieved from the database.

Instead of loading the entire anticipated view before checking the input device in other embodiments of the present invention the input device is monitored during the time the anticipated view is being preloaded into the database. If the user requests a requested view the preloading of the anticipated view stops and the user s request is serviced. This ensures that the system is very responsive to the user s input. Such an embodiment can be implemented by checking the input device each time a segment i.e. a portion of the anticipated view is preloaded. If the computer retrieving information from the database is running a multitasking and or multithreading operating system such an embodiment can alternatively be carried out using the various techniques appropriate for such an operating system.

In the embodiment of the retrieval system will attempt to load as many of these anticipated views as possible while the user is studying the display view A. If enough time passes before the user requests a requested view the retrieval system may preload all four of the anticipated views thereby enhancing the likelihood that the next requested view will be in memory.

Once the user issues a request for a requested view the requested view is loaded from memory or from the database if necessary and displayed on the monitor. The process of determining and preloading anticipated views then starts over. For example if the requested view is view A the display view will then become view A shaded as shown in . The anticipated views would also change and might be identified as indicated by the arrows.

Subdocument views may be anticipated views because the user is often particularly interested in a particular portion of the search documents. If the search documents consist of a series of judicial opinions for example a user may only wish to view for each of the search documents the subdocument for the majority opinion and not the headnotes dissenting opinions etc. . Thus it may be appropriate for the anticipated views to be drawn primarily from a particular type of subdocument.

In other situations however the user may only wish to see the first subdocument view for each subdocument. It would be appropriate in these situations for the anticipated views to be primarily the first views from the various subdocuments within each document.

The retrieval system of the present invention identifies anticipated documents by focussing on the current display view. The current display view gives clues as to which view might be requested by the user because the display view identifies the user s progress in browsing the search documents. In other words the current display view identifies which search document in the sequence of search documents is currently being viewed. This information is useful because the search document immediately following and preceding the current search document as defined by the ordering characteristic is often the search document next requested by the user.

The view displayed just prior to the displayed view might also be a consideration in determining the anticipated views if it tends to show a pattern that can identify the user s next requested view. For example referring to if the user requests view of search document A and then requests view of search document A the retrieval system can consider these two consecutive display views and determine that an appropriate anticipated view is view of search document A. View is the first view of subdocument A which could be the same type as subdocuments and the two subdocuments previously viewed by the user. Since the goal is to accurately predict the next view considering the views that the user requested in the past may be helpful if it tends to identify the views that the user will request in the future.

In general any appropriate adaptive prediction scheme can be used that uses the user s history of requested views and display views to accurately determine which views are likely to be next requested by the user. It might be appropriate in some cases to consider many display views in determining appropriate anticipated views. Longer histories may tend to identify patterns that would not show up if only a small number of recent display views are considered.

Tendencies can even be monitored over more than one research session in situations where a particular user or group of users tend to request views in a particular pattern each time research is done. In addition the user could be prompted to indicate the type of research being undertaken which may give clues as to what type of anticipated views are appropriate for efficient operation. Finally the particular databases used or type of research being done can be monitored by the database system and advantageously taken into account in determining anticipated views.

In the preferred embodiments of the present invention the anticipated views are drawn from both related documents and search documents. A fundamental distinction between related documents and search documents is that related documents are statically related to the search documents whereas search documents are dynamically related to one another. This difference is significant because unlike statically related documents no predefined link needs to be set up for search documents. A statically related document is always associated with a particular document regardless of the query the related document is therefore statically related . The search documents on the other hand are related to each other by the query. Since the query changes with each search the search documents are considered dynamically related to one another.

Some of the recent CD ROM products have implemented features such as hyperlinked text and timeline linked text clicking on a timeline item will take the user to a relevant article . See The Top 100 CD ROMs PC Magazine Sep. 14 1994 p. 115. Links of this nature are static because they always apply and do not depend on any particular query run by the user.

The search documents are ordered by an ordering characteristic as described previously. Thus when a next document is requested it is assumed that the search document requested by a next document command is the search document that is next according to the ordering characteristic. If the search documents are ordered by publication date for example the next document will be interpreted as a request for the search document with the next oldest publication date.

In one embodiment of the present invention it is possible to make a number of different ordering characteristics available for use by the user in browsing the search documents. For example shows seven documents labeled a through g ordered according to four different ordering characteristics. When the display view is in document a the next document command can be a request for four different documents i.e. b e f or c depending on the particular ordering characteristic used. More than one ordering characteristic must therefore be considered when determining anticipated views if the user is capable of moving to a next document in the context of more than one ordering characteristic. This feature can be enabled by an input device command that allows the user to select the desired ordering characteristic.

The present invention is applicable to single user multiple user and many user databases but the present invention is most effective when used in connection with single user databases. The efficient operation of the invention depends on being able to retrieve data from the database very frequently perhaps continually. The present invention is quite effective with single user databases such as those on CD ROM or other mass storage devices this might also include a hard drive implementation . In a single user database no other demands are being made on the database by the other users so the database is often idle.

But since a many user or multiple user database must be shared among more than one user such a database will often be receiving simultaneous and continual requests for data. Databases in such a system are rarely idle so there is little time to preload anticipated views into memory. In such a situation the present invention will not be as effective in improving the response time to users requests for requested views. But in many user or multiple user database systems where the database is not as busy the present invention can be effective in reducing response times to users requests for information.

Both the search logic and the retrieval logic are often software but need not be. As one skilled in the art will recognize in a software implementation the search logic and the retrieval logic may or may not be integral or intertwined parts of the same computer program.

As dictated by the retrieval logic the database system then loads into memory a view from one of the search documents. See . This first display view is then displayed on the monitor. Normally the user will take a few moments to read or study the display view. During this time one or more anticipated views are identified. The anticipated views are views that the user is likely to request be displayed on the monitor after the display view.

The database system then begins to preload these anticipated views into memory from the database while also continually monitoring the input device to determine if the user has issued a request to display a different view i.e. a requested view on the monitor. Anticipated views are loaded into memory until the user requests a requested view.

When the user does makes such a request the database system then determines whether the requested view is in memory. The requested view may be in memory because it could have been preloaded into memory as an anticipated view. If the requested view is in memory the requested view becomes the new display view and it is displayed on the monitor. But if the requested view is not in memory the requested view must first be loaded from the database before it can be displayed on the monitor as the display view.

The anticipated views are a function of the display view because the views that the user is likely to request depend to some degree on the view the user is currently reading. In other words those views that are anticipated views when view A is the display view are not likely to be the same as the anticipated views when view A is the display view. Therefore as shown in the anticipated views are determined each time the display view changes.

When the display view is changed the anticipated views for the prior display view can remain in memory so that they are available if they are ever requested by the user. But if memory is limited the anticipated views for the prior display view can be deleted from memory preferably in an efficient matter e.g. anticipated views common to both the new display view and the prior display view are not deleted from memory . It is best to delete those views that are not likely to be requested by the user. It may also be appropriate to consider whether a view is likely to become an anticipated view in the future.

The number of anticipated views for a given display view does not have to be a predetermined or constant number but rather can vary depending on memory available. Typically the number of anticipated views for a display view is a trade off between the amount of memory available and the desired speed of retrieval. In instances where memory is plentiful where the number of search documents is few and or where the search documents are small it may be possible for all of the search documents to be completely loaded into memory. In such a situation the number of anticipated views for a given display view could be as high as the total number of views in the search documents. At the other end of the spectrum there might be only one or two anticipated views for each display view if memory is limited.

Embodiments of the present invention can vary as to how anticipated views are preloaded into memory. In the embodiments of one anticipated view at a time is preloaded into memory and the retrieval system does not begin preloading a second anticipated view into memory until the prior anticipated view is completely preloaded into memory. In other embodiments anticipated views are simultaneously preloaded.

Simultaneous preloading of multiple anticipated views can be done in a number of ways. In a multitasking operating system for example an appropriate time slicing procedure can be used to preload the anticipated views so that they are preloaded simultaneously. In another embodiment one segment from each anticipated view is preloaded in turn and the cycle is repeated until all the anticipated views are fully preloaded into memory or until the user s request for a requested view interrupts the preloading process . A segment is any portion of an anticipated view such as one or two lines or even a single byte of the anticipated view.

In another embodiment of the invention the use of profile information is employed to assist in the selection of views or documents to preload as illustrated in and . For example is a diagram of the relationships between six objects or documents . The six documents are linked to each other in the manner shown and hereinafter described. Document contains three links and one to each of the documents and . Document contains two links one link to document and another link to document . Document contains a link back to document and document contains a link to document . Each of these documents is stored on a server within a network and may incorporate or have embedded within it objects stored on other servers. The documents may be stored on the same server or may be stored on various computers distributed throughout the network.

Shown within the document viewing area of the window in is the contents of the document from . The document has been displayed in the window in response to a user query which might involve a key word search or might involve the user specifying the identity address or resource locator of document . The document could be also be displayed within the window in response to the selection of a link in another document not shown that points to the document .

At the document viewing program renders document in the window as shown in . Once document is retrieved the viewing program begins at retrieving from the network the document . During this time document continues to be displayed in window and the user is free to read scroll through or otherwise interact with the document shown in the window in . Thus document is retrieved over the network and stored into the memory or local storage while the user is viewing document .

After document has been retrieved if the user has not requested e.g. through the input device at that another document be displayed the document viewing program at retrieves document over the network and this document is then stored in memory or local storage. The document is still displayed in the window at this point. If the user still has not requested that another document be displayed at the document is retrieved from the network and stored in memory or local storage by the document viewing program in .

At the document viewing program in the embodiment of stops preloading documents and waits until the user requests that a new document be displayed. When the user does request that a new document be displayed in the viewing program at the viewing program determines at whether the requested document is one of the documents that has already been retrieved and stored in local storage. If so then the locally stored version of the requested document is retrieved from memory or local storage at . The locally stored version of the requested document is then checked at to see if it is out of date. If the requested document has content that may change often it may be that the version of the requested document that is stored in local storage is not sufficiently new and is out of date or stale. This condition can be determined by monitoring the amount of time since the document was originally preloaded or by inspecting the time stamp on the requested document stored on the network and comparing it to the time stamp for the locally stored version to determine whether the locally stored version has changed.

If the locally stored version of the requested document at is not out of date then it is displayed at . If the preloaded version at is out of date or if the requested document has not been preloaded at all then the requested document is retrieved over the network and is displayed at .

In another embodiment the document viewing program may continue preloading additional documents at in . For example the document viewing program could begin to preload the documents that are linked to by the documents that are already preloaded i.e. documents and . In the set of documents shown in this would mean that the document viewing program would download over the network additional documents and . Thus the present invention need not be limited to the preloading of only a single level of linked documents but rather could extend to the preloading of two or more levels.

As described in connection with the document viewing program retrieves over the network documents and while the user is viewing document . And as shown in document is preloaded first followed by document and then by document . In some embodiments the document viewing program executing on the client computer in uses the profile information to determine the order in which the documents and are to be retrieved. In other words in some embodiments the database server determines the order in which the document viewing program executing on the client preloads the links within document . This procedure can be quite effective because the database server may have useful information that can help to predict the documents that the user will request be displayed at the client computer. For example a server that keeps track of the frequency that users select the links within document may find that one or two links are selected very often whereas other links are selected rarely. The server can use this information to instruct the client as to the most efficient order in which to preload documents.

Other data that might be included in the document profile might be the server or database in which each document is stored. This information is shown in and identifies the document as being from the server gaylords.com and document as being from the same database server which means the database server from which document has been retrieved. Normally the profile information of would be stored in a particular format or data structure or even as source code and either embedded within the document or downloaded by the document viewing program along with the document .

In operation the server sends to the document viewing program the information of and the document viewing program can choose to ignore it or could choose to act upon it in some way. Thus the document viewing program in one embodiment engages in some form of interpretation of the profile information and it exercises some control over how the information is used. In another embodiment however the profile information could simply consist of a list of documents that the document viewing program uses to select what documents to preload. The list of documents might be ordered so the document viewing program could determine relative priorities among the documents but the document viewing program may not engage in interpretation of any statistical data or other data sent from the server. Such an embodiment may be implemented by actually programming a program embedded within a document to retrieve certain documents thus effectively hard coding the documents that are to be preloaded. Another embodiment may use a program embedded within an object or a document that reads a parameter list and uses the parameter list to select the documents to be preloaded. Where the profile information is not used some type of predefined procedure could be followed for selecting documents to preload and this procedure may involve preloading the documents that are linked to by the document the displayed document .

When the user does request that a different document be displayed in the viewing program determines at whether the requested document has been already loaded into local storage. If it has been loaded into local storage the requested document is retrieved from the higher speed local storage and the contents of the requested document are analyzed to determine if the information in the preloaded version is out of date . If not the preloaded version of the document is rendered in the window . Otherwise the document is retrieved over the network and then rendered in the window .

When the user requests a new document the document viewing program checks at to determine whether the requested document has been preloaded . If it has the preloaded version is retrieved at and analyzed to determine whether it is out of date at . If the preloaded document is not out of date it is displayed at . Otherwise the document is retrieved over the network at and displayed at .

In an alternate embodiment shown in a separate thread of execution is started for retrieving each of the embedded objects. This embodiment recognizes that it may be more efficient to download the embedded objects simultaneously rather than one at a time as shown in . The embodiment of however has the advantage that it may be able to completely download at least one of the embedded objects before it is interrupted by a request to display another document. Depending on the implementation of the viewing program a fully preloaded object may be more useful than a partially preloaded object. Preloading documents simultaneously may increase the chance of having a large number of partially preloaded objects and fewer fully preloaded objects. Thus where partially preloaded objects are less useful than fully preloaded objects the embodiment of may be more efficient than . The elimination of field oxide also enables elimination of conventional active area stagger within the array thus eliminating area consumed by word lines and of the embodiment. Thus the 4F lateral expanse consumed by a memory cell of is capable of being reduced to 3F in the embodiment see dashed outline in . This results in the area consumed by a single cell of 6F as compared to the 8Fof the embodiment.

A third thread of execution in monitors the user s actions e.g. manipulation of the input device to determine if the user has requested that a different document be displayed. When the user does request a document at the system e.g. the document viewing program determines whether the requested document has been at least partially preloaded. Where it has not the requested document is retrieved over the network at and displayed at .

However if the requested document has been at least partially preloaded the preloaded version is checked for staleness at . At the document viewing program determines whether the requested document has been partially or fully preloaded. If the requested document has been fully preloaded it is retrieved from local storage and rendered on the display . If it has been only partially preloaded the partially preloaded version is retrieved from local storage and any portion not in local storage is retrieved from the network and then rendered on the display .

In some situations it may be useful to have the user exercise some direct control over the preloading process. For example shows a screen having a window which includes a title bar and an area in which to visually render the contents of a document. A cursor corresponding to a pointing type input device is also shown in the embodiment of . The document shown in the window includes hypertext links and and the document also comprises graphical object which includes area . The graphical object also acts as a link to another document. Also shown in the window are buttons and which each correspond to one of the hypertext links. Button corresponds to link button corresponds to link and button corresponds to link .

In the cursor has been moved to the button so that the button is selected. Upon selection the document viewing program begins preloading the document linked by the forecast hyperlink which corresponds to the button . The forecast document is not yet displayed within the window however and the News Items document shown in and continues to be displayed. While the document corresponding to link is retrieved over the network the progress of the preloading operation is displayed on the button . At the point shown in the document corresponding to the forecast link is 7 retrieved.

In the embodiment of the user requests a document to be displayed by selecting a hypertext link or by selecting the graphical object . When the user has requested a document to be displayed the viewing program determines at whether the requested document has already been retrieved into local memory or storage. If it has been preloaded it is retrieved from local storage and displayed in the window .

In some embodiments the document may also be checked at to determine whether it is sufficiently new or current. If its download date modification date or other information indicates that the contents of the document are not sufficiently new or are out of date the requested document is again retrieved over the network at .

When the user selects a link to preload at such as by selecting one or more of the buttons or in the viewing program begins preloading the selected link and does so at a higher priority at than any of the other links that are being preloaded at . In other words when the user selects a link to be preloaded the viewing program allocates more resources to preloading the selected document at than to any other preloading operations it is carrying out on any other documents at .

Where more than one link has been selected by the user each could be preloaded at a priority higher than that of the documents being preloaded at . In another embodiment the document most recently selected for preloading could be given a priority higher than any other so that the resources of the document viewing program are being applied to the preloading of the most recently selected document.

Once the user selects a document to be displayed the viewing program determines at whether the document has been preloaded into local storage. If so the preloaded version is retrieved from local storage and displayed . Otherwise the requested document is retrieved over the network and displayed .

In the embodiments described in and the user selects the document that he or she wishes to preload and in the embodiments of and this is done by selecting button that corresponds to the desired link. In other embodiments selecting the link that the user wishes to preload can be done in a number of other ways. For example selection of a link to preload could be carried out by simply passing the mouse or pointing device cursor over the desired link or over an object that corresponds to the link. Such an action could communicate to the document viewing program the link that the user wishes to preload. In another embodiment the user could select the desired link with a right mouse click or some other keyboard or pointing device action or by directing the document viewing program to preload a given link by selecting an appropriate option from a menu that is displayed when the link is selected with the pointing device.

In selection of the document linked to by the graphical object is carried out by the selection of the space within the object or by passing the cursor over the area in . Selection of any other portion of the object constitutes a request that the document corresponding to the document to the object be displayed rather than preloaded. shows one way in which the progress of the preloading can be communicated to the user. and show other embodiments in which the progress being made in the preloading operation is communicated to the user. In the graphical object from and has been selected for preloading and a progress gauge has a shaded area which is used to show what portion of the document has been preloaded. When the shaded area fills the gauge entirely the document linked to by the graphical object has been preloaded.

The button in operates in a manner similar to the button of but it changes colors to indicate the progress of the preloading operation. For example the button could get progressively darker or lighter while the linked document is being preloaded. shows a text button that is used as a hyperlink. Selection of the button for preloading e.g. by passing the cursor over the button causes the button to change color or shade see as the preloading proceeds. Any type of visual or audio progress indicator could be used to indicate progress of the preloading and is useful to the user because he or she will know when a desired document has been preloaded. The user can continue to read or interact with the currently displayed document until the visual or audio indicator signifies that the document has been preloaded. Thus the user can be assured that when the preloaded document is selected for display it will be quickly displayed.

In some document retrieval systems the user may incur a cost for each document or set of information that he or she retrieves from a database or over a network. In such a system preloading documents before they are requested by the user could incur fees for documents that the user has never intended to see use or retrieve from the network. In other words some documents may be retrieved in such a system simply because they are linked or otherwise related to one of the documents that the user did retrieve. This can undesirably increase costs for the user.

When the user selects a document to be displayed at the viewing program determines at whether an encrypted version of the requested document has been preloaded. If so the viewing program retrieves the password or key required to decrypt the encrypted version of the document and at that time the cost of retrieving the document is incurred at . The encrypted version of the document stored locally is decrypted at and then displayed at .

By retrieving only the password or key over the network and then decrypting the locally stored encrypted version of the requested document the document will typically be displayed much more quickly than if the entire document would have to be retrieved from the network. Normally the size of the key will be much smaller than the size of the document. Retrieving only the key and processing the encrypted document at the client will therefore typically be much faster than retrieving the unencrypted version of the document over the network upon receiving a request for it.

The use of the procedures described herein may in some environments substantially increase the number of requests that are issued to network servers and may also increase the amount of bandwidth required for a given network. This can be exacerbated where each document has embedded within it additional objects that must be separately requested from the server. Thus it may be desirable to implement techniques to alleviate eliminate or avoid these effects. In one embodiment of the present invention each time a request is issued to a network server additional information is included within the request so that the database server or any other network hardware or resources is notified of the type of the request. This will allow requests to be prioritized so that server and or other network resources are not allocated to tasks that may have less priority e.g. a request to preload a document than other tasks e.g. a normal document request .

The document viewing program then starts a thread that monitors the user input at to determine whether the user has requested a document for display. Another thread is also started and this thread at issues a low priority request to the server for document B one of the documents it seeks to preload . The user at this point has not requested that document B be displayed so the retrieval of document B is done based on the expectation that the user may wish to view document B at some point. For this reason the request for document B is issued on a low priority basis. Document B may be a document that is linked to document A that is identified in profile information or that is otherwise related to document A. When the server responds to the request document B is downloaded over the network at and stored locally at .

The low priority request allows the network server to respond to other normal or high priority requests in advance of responding to the low priority request for document B. This can be used to ensure that when the user actually requests a document from the server the server will service that request before other low priority requests by either that user or by other users. This information can also be used by the network hardware e.g. network routers itself to prioritize the routing of the requests or the routing of packets of data.

When a request that a document be displayed is made by the user at the document viewing program determines whether the requested document is in local storage at . If it is it is retrieved from local storage at and displayed at . However if the requested document is not stored in local storage a normal priority request is issued to the server at . The request is a normal priority request because the user has actually requested a document in contrast to the request made at of . The document is then retrieved over the network at and then displayed at .

When the user requests a document for display the document viewing program determines whether the requested document has already been preloaded. If necessary the requested document is retrieved over the network at otherwise it is retrieved from local storage at . After it is retrieved it is displayed at .

Once document A is displayed at in the document viewing program monitors the user at for a request to display a new document. At the same time i.e. in another thread of execution an object that contains document B and the objects embedded within it is retrieved over the network at . This object may also include one or more documents that are linked to by document B. When the object is downloaded it is parsed at the client computer at so as to extract document B and the embedded objects which are then stored at on the client computer. When the user requests a document for display the document viewing program determines at whether the requested document has already been preloaded. If necessary requested document is retrieved over the network but if possible it is retrieved from local storage . After it is retrieved it is displayed at .

The present invention is suitable for implementation as an ActiveX or Java control which could be downloaded as part of a web page into a browser or an operating system for execution on a client computer. In such an embodiment there may be security restrictions placed on the downloaded control. Appendix A is an outline of a Java program or psuedocode for applet written in Java that can be inserted into a web page and appears on the web page as a button that it is associated with an HTML link. When the button is selected the document corresponding to the associated link is preloaded onto the client and the base HTML document and at least some of the embedded objects are stored on the client s local file storage system. The client s file system is typically much faster than the network.

In some Java environments the client s local file system is not accessible because of security restrictions if the applet is downloaded from a remote host. These security restrictions can be avoided by using an insecure environment or by using a code signing technique that allows the user to verify the author of the applet. Once the code is identified as being written by a trusted author the security restrictions can be safely eased or eliminated.

In another embodiment a secure means of accessing the client s file system can be used to securely and safely store data on the client s file system. In such a system the applet may only be allowed to write files to certain directories. The applet may also be limited to reading only files that it had created. One such secure file system for Java has been referred to as protected domains and can be useful in implementing some embodiments of the present invention.

Appendix B is another listing of Java code psuedocode in an implementation of the computer program or applet that does not use the local file system for storing preloaded documents. Instead the Java program in Appendix B stores preloaded documents in memory and implements a web server on the client to serve the documents back to the document viewing program running on the client. Thus when the user selects a link the link is redirected to the server running on the client and that local server responds with the preloaded document if it is available. The document viewing program would in effect be retrieving preloaded documents from local memory thereby making access to preloaded documents quite fast. Such an implementation may also avoid the security restrictions placed on accesses to the local file system in some embodiments.

When the user selects a document for display at the request is routed to the local server if the requested document had been stored locally. Otherwise the a request for the document requested by the user is issued to the server usually a remote server on the network . When the document is retrieved or as it is retrieved the document is displayed at .

Because a web page control may have to be downloaded with each page it may be desirable to implement techniques to speed the amount of time that a user has to wait for a document to be retrieved from the network. One such procedure is to embed a small applet into the web page that is downloaded by the user where the small applet then retrieves a larger program that carries out the remaining steps. Such a procedure will allow the user to begin interacting with the web page after the small applet is downloaded and will not require that the user wait for a larger program to be downloaded before interacting with the web page. Once the small applet is downloaded the larger applet is downloaded in the background while the user is viewing or interacting with the web page.

Because the initializing program is small it takes relatively little time to download and the document viewing program is able to promptly start the execution of the initializing program. This may allow the display of the document at to take place more quickly. The effect is a more responsive program that does not cause the user significant delay while an applet implementing the present invention is being downloaded.

Many embodiments of the present invention have been described as storing preloaded documents into local storage at the client computer. However the present invention need not be limited to contexts in which information is stored at the client computer or in local storage at the client computer. The present invention is useful in any environment where it is possible to store preloaded information in an area where access to the preloaded information is faster than that of the original location for the information. For example shows a network where computer is preloading a document on server while viewing another document on the network. In the embodiments described previously the document is retrieved over the network and stored in local storage at the computer . However other embodiments of the present invention can be performed by storing the preloaded document elsewhere but still in a location that can be accessed quickly.

An example is shown in where the computer retrieves document from the server as part of a preloading procedure. At the direction of computer the preloaded document is retrieved and stored in the computer which is accessible by the computer over the LAN. Information on computer can be accessed by the computer quickly because these two computers are connected over a relatively fast local network. This is unlike the connection between the computers and which are connected over the lower speed WAN.

When the preloaded document is stored on the computer it can be more quickly retrieved from computer than from computer . Thus significant enhancements to the responsiveness of the document viewing program can be made in the present invention even if the preloaded documents or objects are not stored directly in local storage but instead are stored elsewhere where they can be retrieved quickly.

Some embodiments of the present invention have been described in the context of accessing the database and identifying search documents through a search term query. The present invention can be applicable in other research related contexts where search documents are identified using another type of entry path. For example a time line can be used for locating information or documents that are associated with a given time or time frame. Another information access method uses a topic tree that permits a user to choose from successively narrowing topics until the desired topic is located. It is possible for the present invention to be applicable even in other non research contexts where similar preloading techniques may permit efficient navigation of information and or short response times. The present invention can also be used in combination with caching systems where previously displayed documents or views are stored for repeated use.

The present invention has been primarily described in the context of a general purpose computer implementation. As one skilled in the art will recognize however it is possible to construct a specialized machine that can carry out the present invention.

The additional references listed below are hereby fully incorporated by reference to the extent that they enable provide support for provide a background for or teach methodology techniques and or procedures employed herein.

Although the present invention has been shown and described with respect to preferred embodiments various changes and modifications even if not shown or specifically described herein are deemed to lie within the spirit and scope of the invention and the following claims. Any specific features or aspects of the embodiments described or illustrated herein are not intended to limit the scope and interpretation of the claims in a manner not explicitly required by the claims.

