---

title: Communicating large amounts of data over a network with improved efficiency
abstract: Disclosed herein are systems, methods, and computer-readable storage media for communicating large amounts of data. A system can first receive a request for data and determines if the data requested is above a threshold size. If the data is above the threshold size, the system can then prepare a message containing header information following a standard file transfer protocol. The system can also prepare metadata indicating a storage location and a size of the data requested. The message and the metadata can then be separately communicated to the requester. Upon receiving the metadata, a data stream can initiate the transfer of the data from the storage location to the requester, where the data stream removes unnecessary or redundant header information during the transfer from the storage location.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09432238&OS=09432238&RS=09432238
owner: Dropbox, Inc.
number: 09432238
owner_city: San Francisco
owner_country: US
publication_date: 20121220
---
The present disclosure relates to communications of large amounts of data over a network and more specifically to a protocol that improves the efficiency of the communications when the data is above a threshold value.

When storing data it is often desirable to have the data stored in multiple locations. Multiple storage locations ensure accessibility should one or more of the locations become unavailable and can in some cases provide for increased customization in how the data is stored and or retrieved. However storing the data at multiple locations whether those locations are physically distinct or are co located partitions of a single data storage device often leads to delays in both storage and recovery of data. These delays often originate in the duplication of instructions and or data for each location. While for relatively small data sizes these duplication delays may be negligible to a given user as the size of the data increases any duplication delay in storing or retrieving data can result in delays that can be detected by the user.

With cloud computing and network based storage services these delays can impact customer perceptions of the service. A network based storage service allows users to store access and manipulate data on databases and servers maintained across a network thereby freeing users from being concerned with where the data will be physically stored while giving users near instantaneous access to the data from virtually any network access point. However users using network based storage services generally want access to their data to be near instantaneous not delayed or slow. When customers begin to experience substantial delays in storing and retrieving data customer confidence and satisfaction wanes.

Standard data transfer protocols utilize communication layers and levels such as the physical level the frame level and the packet level to indicate where each piece of data is sent. Each layer results in increased information being added to the transmitted packets as headers indicating where the data is being transmitted to and depending on the protocol where the data is being transmitted from. These headers are then unwrapped and interpreted one layer at a time for each and every frame of the data being communicated until the data arrives at its destination at which point a response or an acknowledgment signal can be sent. When considering the overall use of network bandwidth the header information associated with each layer can result in significant bandwidth consumption and ultimately result in extra costs delays or communication time.

Features and advantages of the disclosure will be set forth in the description which follows and in part will be obvious from the description or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out hereinafter. These and other features of the disclosure will become more fully apparent from the following description and accompanying drawings or can be learned by the practice of the principles set forth herein.

Disclosed are systems methods and non transitory computer readable storage media for communicating large amounts of data. A system practicing the method disclosed herein can first receive a request for data and determines if the data requested is above a threshold size. If the data is above the threshold size the system can then prepare a message containing header information following a standard file transfer protocol. The system can also prepare metadata indicating a storage location and a size of the data requested. The message and the metadata can then be separately communicated to the requester. Upon receiving the metadata a data stream can initiate the transfer of the data from the storage location to the requester where the data stream can remove unnecessary or redundant header information during the transfer from the storage location.

Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the art will recognize that other components and configurations may be used without departing from the spirit and scope of the disclosure.

A system method and computer readable media are disclosed which can communicate large amounts of data over a network with increased efficiency. A system practicing the method disclosed herein can first receive a request for data and determine if the data requested is above a threshold size. The requester can be an entity such as a human being operating a user device such as a terminal smartphone computer or other form of computing device or the requester can be a database or server operating according to specified instructions. The request for data may often although not always be associated with a specific file. For example the requester can send a request for the file ABC.doc. The system upon receiving the request can attempt to locate the data within a data storage space. This data storage space can be an online data storage space a specific database or server or can be a specific hard drive or hard drive partition. In various embodiments the data storage space can be part of a remote shared content item storage system. The system can then consider the overall size of the data requested. When the size of the data requested is below a threshold the system can in certain configurations determine that the data should be transferred using standard file transfer protocols.

When the data is above the threshold size the system can prepare a message containing header information following a standard file transfer protocol. The size of the data as well as the format of the data can also be included in the message. However rather than including the data within the message the system can instead prepare metadata indicating the storage location of the data. The message and the metadata can then be communicated to the requester. Upon receiving the metadata a data stream can begin that transfers the data from the storage location to the requester where the data stream can omit unnecessary or redundant header information during the transfer.

An exemplary system configuration is shown in wherein electronic devices communicate via a network for purposes of exchanging content and other data. System can be configured for use on a wide area network such as that shown in . However the present principles are applicable to a wide variety of network configurations that facilitate the intercommunication of electronic devices such as a local area network wireless network etc. For example each of the components of system in can be implemented in a localized or distributed fashion in a network.

In system a user can interact with content management system through client devices . . . collectively connected to network by direct and or indirect communication. Content management system can support connections from a variety of different client devices such as desktop computers mobile computers mobile communications devices e.g. mobile phones smart phones tablets smart televisions set top boxes and or any other network enabled computing devices. Client devices can be of varying type capabilities operating systems etc. Furthermore content management system can concurrently accept connections from and interact with multiple client devices .

A user can interact with content management system via a client side application installed on client device . In some embodiments the client side application can include a content management system specific component. For example the component can be a stand alone application one or more application plug ins and or a browser extension. However the user can also interact with content management system via a third party application such as a web browser that resides on client device and is configured to communicate with content management system . In either case the client side application can present a user interface UI for the user to interact with content management system . For example the user can interact with the content management system via a client side application integrated with the file system or via a webpage displayed using a web browser application.

Content management system can make it possible for a user to store content as well as perform a variety of content management tasks such as retrieve modify browse and or share the content. Furthermore content management system can make it possible for a user to access the content from multiple client devices . For example client device can upload content to content management system via network . The content can later be retrieved from content management system using the same client device or some other client device .

To facilitate the various content management services a user can create an account with content management system . The account information can be maintained in user account database . User account database can store profile information for registered users. In some cases the only personal information in the user profile can be a username and or email address. However content management system can also be configured to accept additional user information.

User account database can also include account management information such as account type e.g. free or paid usage information e.g. file edit history maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc. Account management module can be configured to update and or obtain user account details in user account database . The account management module can be configured to interact with any number of other modules in content management system .

An account can be used to store content such as documents text files audio files video files etc. from one or more client devices authorized on the account. The content can also include folders of various types with different behaviors or other mechanisms of grouping content items together. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access the contents of the public folder. In another example an account can include a photos folder that is intended for photos and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio files and perform other audio related actions or other special purpose folders. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder.

The content can be stored in content storage . Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible via one or more communications networks. Content management system can hide the complexity and details from client devices so that client devices do not need to know exactly where the content items are being stored by content management system . In one variation content management system can store the content items in the same folder hierarchy as they appear on client device . However content management system can store the content items in its own order arrangement or hierarchy. Content management system can store the content items in a network accessible storage SAN device in a redundant array of independent disks RAID etc. Content storage can store content items using one or more partition types such as FAT FAT32 NTFS EXT2 EXT3 EXT4 ReiserFS BTRFS and so forth.

Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one variation each content item stored in content storage can be assigned a system wide unique identifier.

Content storage can decrease the amount of storage space required by identifying duplicate files or duplicate segments of files. Instead of storing multiple copies content storage can store a single copy and then use a pointer or other mechanism to link the duplicates to the single copy. Similarly content storage can store files more efficiently as well as provide the ability to undo operations by using a file version control that tracks changes to files different versions of files including diverging version trees and a change history. The change history can include a set of changes that when applied to the original file version produce the changed file version.

Content management system can be configured to support automatic synchronization of content from one or more client devices . The synchronization can be platform agnostic. That is the content can be synchronized across multiple client devices of varying type capabilities operating systems etc. For example client device can include client software which synchronizes via a synchronization module at content management system content in client device s file system with the content in an associated user account. In some cases the client software can synchronize any changes to content in a designated folder and its sub folders such as new deleted modified copied or moved files or folders. The client software can be a separate software application can integrate with an existing content management application in the operating system or some combination thereof. In one example of client software that integrates with an existing content management application a user can manipulate content directly in a local folder while a background process monitors the local folder for changes and synchronizes those changes to content management system . Conversely the background process can identify content that has been updated at content management system and synchronize those changes to the local folder. The client software can provide notifications of synchronization operations and can provide indications of content statuses directly within the content management application. Sometimes client device may not have a network connection available. In this scenario the client software can monitor the linked folder for file changes and queue those changes for later synchronization to content management system when a network connection is available. Similarly a user can manually stop or pause synchronization with content management system .

A user can also view or manipulate content via a web interface generated and served by user interface module . For example the user can navigate in a web browser to a web address provided by content management system . Changes or updates to content in the content storage made through the web interface such as uploading a new version of a file can be propagated back to other client devices associated with the user s account. For example multiple client devices each with their own client software can be associated with a single account and files in the account can be synchronized between each of the multiple client devices .

Content management system can include a communications interface for interfacing with various client devices and can interact with other content and or service providers . . . collectively via an Application Programming Interface API . Certain software applications can access content storage via an API on behalf of a user. For example a software package such as an app on a smartphone or tablet computing device can programmatically make calls directly to content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content storage through a web site.

Content management system can also include authenticator module which can verify user credentials security tokens API calls specific client devices and so forth to ensure only authorized clients and users can access files. Further content management system can include analytics module that can track and report on aggregate file operations user actions network usage total storage space used as well as other technology usage or business metrics. A privacy and or security policy can prevent unauthorized access to user data stored with content management system .

Content management system can include sharing module for managing sharing content publicly or privately. Sharing content publicly can include making the content item accessible from any computing device in network communication with content management system . Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The sharing can be performed in a platform agnostic manner. That is the content can be shared across multiple client devices of varying type capabilities operating systems etc. The content can also be shared across varying types of user accounts.

In some embodiments content management system can include a content management module for maintaining a content directory. The content directory can identify the location of each content item in content storage . The content directory can include a unique content entry for each content item stored in the content storage.

A content entry can include a content path that can be used to identify the location of the content item in a content management system. For example the content path can include the name of the content item and a folder hierarchy associated with the content item. For example the content path can include a folder or path of folders in which the content item is placed as well as the name of the content item. Content management system can use the content path to present the content items in the appropriate folder hierarchy.

A content entry can also include a content pointer that identifies the location of the content item in content storage . For example the content pointer can include the exact storage address of the content item in memory. In some embodiments the content pointer can point to multiple locations each of which contains a portion of the content item.

In addition to a content path and content pointer a content entry can also include a user account identifier that identifies the user account that has access to the content item. In some embodiments multiple user account identifiers can be associated with a single content entry indicating that the content item has shared access by the multiple user accounts.

To share a content item privately sharing module can be configured to add a user account identifier to the content entry associated with the content item thus granting the added user account access to the content item. Sharing module can also be configured to remove user account identifiers from a content entry to restrict a user account s access to the content item.

To share content publicly sharing module can be configured to generate a custom network address such as a uniform resource locator URL which allows any web browser to access the content in content management system without any authentication. To accomplish this sharing module can be configured to include content identification data in the generated URL which can later be used to properly identify and return the requested content item. For example sharing module can be configured to include the user account identifier and the content path in the generated URL. Upon selection of the URL the content identification data included in the URL can be transmitted to content management system which can use the received content identification data to identify the appropriate content entry and return the content item associated with the content entry.

In addition to generating the URL sharing module can also be configured to record that a URL to the content item has been created. In some embodiments the content entry associated with a content item can include a URL flag indicating whether a URL to the content item has been created. For example the URL flag can be a Boolean value initially set to 0 or false to indicate that a URL to the content item has not been created. Sharing module can be configured to change the value of the flag to 1 or true after generating a URL to the content item.

In some embodiments sharing module can also be configured to deactivate a generated URL. For example each content entry can also include a URL active flag indicating whether the content should be returned in response to a request from the generated URL. For example sharing module can be configured to only return a content item requested by a generated link if the URL active flag is set to 1 or true. Thus access to a content item for which a URL has been generated can be easily restricted by changing the value of the URL active flag. This allows a user to restrict access to the shared content item without having to move the content item or delete the generated URL Likewise sharing module can reactivate the URL by again changing the value of the URL active flag to 1 or true. A user can thus easily restore access to the content item without the need to generate a new URL.

While content management system is presented with specific components it should be understood by one skilled in the art that the architectural configuration of system is simply one possible configuration and that other configurations with more or less components are also possible.

Having disclosed some system the disclosure now turns to which shows exemplary system interactions . Requester can send request via a network to server such as content management system shown in . Request can specify that requester desires certain data stored at and or controlled by server . In most configurations this request can be made in the form of a file name. For example the requester can request that the file Jamaca.jpg be transferred from the server or a storage space under the server s control to the requester s device. The request also can identify the file in some other way such as by providing a unique file identifier a path and a file name a data block stored at an online storage provider and so forth.

Server can then locate and identify data step . For example as shown data is located in data storage space that is separate from server . In other configurations data can be located within server or the address can be a non specific address such as with cloud computing. When server identifies data server can also identify the size of data . When the size of the file or files is below a threshold value server can initiate a transfer of data to the requester using standard file transfer protocols. The requested data can be a single file a collection of files a storage block that can contain many files a compressed or uncompressed archive of files a subcomponent of a file or any other data storage unit.

However when the size of data requested is above the threshold server can instead prepare a message and metadata . This threshold can be determined based on system bandwidth bus capacities requester and or server capabilities a time requirement a file request type a type of file requested metadata describing the file requested or any combination thereof. As an example a system could have a threshold of 500 gigabytes or the threshold could be met if the file transfer will have a duration of 5 minutes or more. In addition the threshold could be both the 500 gigabytes and the 5 minute time cap. In one variation the system can service all requests for files in this manner regardless of a threshold.

A second threshold can also exist the second threshold being a sub threshold to the first threshold. This second threshold can apply to files or partitions within the requested data. For example consider where data is requested amounting to 1.2 terabytes of information with 2 files each having a size of 600 gigabytes. The first threshold might be 2 terabytes and not be exceeded. However a second sub threshold might be exceeded where the second threshold places a 500 gigabyte cap on any single file to be transferred. As with the first threshold the second threshold can be based on system bandwidth bus capacities requester and or server capabilities a time requirement or combination thereof.

When the system determines that a threshold has been exceeded server can prepare the message and metadata . The message can be header information associated with a file transfer protocol. The metadata can indicate the location of the data. The metadata can further include the size of the data a format of the data as well as an indication that the data has triggered a threshold. Server can then communicate message and metadata separately to requester via a network without transferring the actual data.

When requester receives metadata it can initiate the transfer of data from data storage location to requester via direct data stream over a network. Data stream can omit various protocols headers and other consumers of bandwidth thereby reducing bandwidth overhead. Server can service requests from multiple requesters by instructing multiple data storages to transmit data streams . Server can identify and select data storage to service request based on which data is available at the data storage a current or forecasted load of data storage available bandwidth between the requester and data storage and so forth. Data storage location can be a network attached storage NAS an online storage provider a storage device attached to server or some other storage device or service. Server can communicate and interface with multiple different types of data storage locations . Server and data storage location can communicate directly or via a network using a wired or wireless connection.

Having disclosed some basic system components and concepts the disclosure now turns to the exemplary method embodiment shown in . For the sake of clarity the method is described in terms of exemplary content management system as shown in configured to practice the method. The steps outlined herein are exemplary and can be implemented in any combination thereof including combinations that exclude add or modify certain steps.

Content management system can receive a request for data having a data size above a threshold . This threshold can for example be a terabyte. Other configurations can have thresholds not directly tied to the data size such as a bandwidth size a time for data transfer a number of files within the data or thresholds based on the location of the data a time for retrieval and a number of locations from which the data has to be gathered. Sub thresholds can also exist below the threshold and be tied to specific aspects of the data. For example a second sub threshold can be present in content management system that can be specific to the format of the data or the number of files within the data or the size of those files. The threshold can be implied as being satisfied based on the type of request or the server to which a request is directed.

Upon receiving the request content management system can identify the location the size and the format of the data. Content management system can then prepare a message the message including header information associated with a file transfer protocol . This file transfer protocol can be any appropriate protocol. However whereas most standard file transfer protocols can include the data separated into frames directly following the initial header information with each subsequent frame containing additional header information identifying the frame as belonging to the data content management system may not attach the data to the message.

Instead content management system can prepare metadata indicating the location and the size of the data . In other configurations the size of the data can be removed whereas yet other configurations may include the format of the data in the metadata. Content management system can then communicate the message and the metadata to the requesting entity separately . Upon communicating the metadata content management system can initiate communication of the data to the requester as a data stream. This data stream may omit many of the headers and other bandwidth constricting data often used by file transfer protocols to direct network communications

To enable user interaction with the computing device an input device can represent any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems can enable a user to provide multiple types of input to communicate with the computing device . The communications interface can generally govern and manage the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

Storage device is a non volatile memory and can be a hard disk or other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards solid state memory devices digital versatile disks cartridges random access memories RAMs read only memory ROM and hybrids thereof.

The storage device can include software modules for controlling the processor . Other hardware or software modules are contemplated. The storage device can be connected to the system bus . In one aspect a hardware module that performs a particular function can include the software component stored in a computer readable medium in connection with the necessary hardware components such as the processor bus display and so forth to carry out the function.

Chipset can also interface with one or more communication interfaces that can have different physical interfaces. Such communication interfaces can include interfaces for wired and wireless local area networks for broadband wireless networks as well as personal area networks. Some applications of the methods for generating displaying and using the GUI disclosed herein can include receiving ordered datasets over the physical interface or be generated by the machine itself by processor analyzing data stored in storage or . Further the machine can receive inputs from a user via user interface components and execute appropriate functions such as browsing functions by interpreting these inputs using processor .

It can be appreciated that exemplary systems and can have more than one processor or be part of a group or cluster of computing devices networked together to provide greater processing capability.

For clarity of explanation in some instances the present technology may be presented as including individual functional blocks including functional blocks comprising devices device components steps or routines in a method embodied in software or combinations of hardware and software.

In some embodiments the computer readable storage devices mediums and memories can include a cable or wireless signal containing a bit stream and the like. However when mentioned non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

Methods according to the above described examples can be implemented using computer executable instructions that are stored or otherwise available from computer readable media. Such instructions can comprise for example instructions and data which cause or otherwise configure a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Portions of computer resources used can be accessible over a network. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language firmware or source code. Examples of computer readable media that may be used to store instructions information used and or information created during methods according to described examples include magnetic or optical disks flash memory USB devices provided with non volatile memory networked storage devices and so on.

Devices implementing methods according to these disclosures can comprise hardware firmware and or software and can take any of a variety of form factors. Typical examples of such form factors include laptops smart phones small form factor personal computers personal digital assistants and so on. Functionality described herein also can be embodied in peripherals or add in cards. Such functionality can also be implemented on a circuit board among different chips or different processes executing in a single device by way of further example.

The instructions media for conveying such instructions computing resources for executing them and other structures for supporting such computing resources are means for providing the functions described in these disclosures.

Although a variety of examples and other information was used to explain aspects within the scope of the appended claims no limitation of the claims should be implied based on particular features or arrangements in such examples as one of ordinary skill would be able to use these examples to derive a wide variety of implementations. Further and although some subject matter may have been described in language specific to examples of structural features and or method steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to these described features or acts. For example such functionality can be distributed differently or performed in components other than those identified herein. Rather the described features and steps are disclosed as examples of components of systems and methods within the scope of the appended claims.

