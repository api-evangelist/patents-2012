---

title: Cloud-based data backup and sync with secure local storage of access keys
abstract: Methods and systems are provided for secure online data access. In one embodiment, three levels of security are provided where user master passwords are not required at a server. A user device may register with a storage service and receive a user device key that is stored on the device and at the service. The user device key may be used to authenticate the user device with the storage service. As data in the storage service is encrypted with a master password, the data may be protected from disclosure. As a user master key or derivative thereof is not used in authentication, the data may be protected from a disclosure or breach of the authentication credentials. Encryption and decryption may thus be performed on the user device with a user master key that may not be disclosed externally from the user device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09330245&OS=09330245&RS=09330245
owner: Dashlane SAS
number: 09330245
owner_city: Puteaux
owner_country: FR
publication_date: 20121203
---
This application claims the benefit of U.S. Provisional Application No. 61 565 729 filed Dec. 1 2011 which is hereby incorporated by reference in its entirety for all purposes.

The present invention relates to the field of online server storage generally and in particular to online server storage using locally stored access keys.

It has become quite popular to use online storage for anywhere access to data and easy synchronization. In some configurations this is referred to as cloud storage. In most cases where individual persons organizations and or companies want to securely store their data there is some authentication needed for access to the data and authentication can be in the form of an access key such as a password.

As used herein user can refer to individual persons organizations companies entities or the like be they humans using computer interfaces or computers using computer interfaces that desire or need to store data in online storage. Online storage refers to storage that is accessible from more than one location or device via a network or other electronic communications medium. In many cases the online storage is partitionable so that more than one user can access their distinct partitions. So that authorized users can access a given partition of online storage and unauthorized users cannot in most cases that are within security expectations access that partition some sort of access control is provided. Access can include the ability to read data from the partition write data to the partition modify data in the partition possibly also reading writing and or modifying metadata about the data and to delete data metadata. The stored data can be in the form of data records files blobs or other data structures. Access might also be to resources other than just data such as computing equipment cloud computing capabilities network connected devices printers other equipment money the ability to control a transaction etc.

Access to a partition or even to online storage elements as a whole might be controlled by a server router device software etc. that decides whether to allow access to particular users. Partitions might be hard coded e.g. each user has a fixed 100 MB portion of memory managed on the storage server or just logically partitioned e.g. each user can upload some number of photos up to some designated limit onto a photo album server and those uploaded photos are associated with the user who which uploaded them .

Access might be determined by the controller based on authentication wherein a particular user uses a computing device or other input means to identify to the controller that the user is actually that user and not a hacker poser or unauthorized person which may be someone within the company running the controller and cloud servers or someone outside the company . One method of authentication is to assign or generate an access key provide the access key to an authorized user with the understanding that each authorized user will not share the access key with an unauthorized user so that the controller can assume that a user is authorized if the user proves access to the access key.

In recent years the Internet and especially the Web the collection of HTML and similarly formatted possibly interlinked set of documents that are typically accessed using a browser or app or similar tool over a network or storage element has become an important media present in the daily life of a majority of people and useful for interfaces to online storage. These services often require user authentication requiring entering of a username and a password to allow access to the customer account for each service including personal and confidential data.

A very specific example is an online file storage server that controls access using passwords and is accessible through the Internet. The storage server might maintain a list of users and the file areas they are allowed access to and the user list might include the passwords of all of the users. Then when someone connects over a public Internet connection to the storage server and attempts to access a particular file the server could hold off on the request until the user provides a user identifier such as a username and a password. Once those are provided the storage server looks up the username in the user list checks the provided password against the password stored in the user list for that user and if the passwords match the storage server then looks up in the user list to determine what partitions or files the user has the authority to access and serves the requested content file data to the user if the requested content file data is within that user s authority.

There are a number of known problems with this approach. First it is often an expectation of users that their online storage is accessible only to them and not necessarily to employees of the company or entity that operates the online storage server. This expectation is not met if those employees have ready access to user passwords as then they would be able to pose as those users typically outside the scope of their actual employment responsibilities. Also if an interloper is able to watch network traffic the interloper may be able to grab usernames and passwords thereby violating the security assumption that only authorized users will have access to secured data.

One partial solution that has been in use is to eliminate the storage of passwords at the storage server and instead just store hashes of passwords. A hash of some data item is a function of that data item that is one way in that computing the data item having only the hash of it is considerably harder or perhaps impossible than computing the hash having only the data item.

In a hash based storage system the data to be stored on the storage server is encrypted using the user s password and the encryption is done at the user s local device. Examples of local devices are computers laptops smart phones tablets and other computing devices under local control of the user. When the data is initially sent to the storage server to be written to the user s partition it is sent already encrypted and the user also provides a hash of the user s password. Of course this might all be done behind the scenes by client software that simply asks a user to specify the file to upload and does the rest.

In any case the storage server stores the encrypted data and the hash of the user s master password used to encrypt the data. Later when the user wants to read or download that data the user supplies the user master password to the storage server the storage server computes the hash or perhaps the hash of the password is created at the user s side and sent to the storage server compares it to the stored hash and if there is a match it serves the requested file to the user s client software so the user can have the data locally. The client software may also automatically decrypt the served data again using the master password.

While this is better than straight storage of master passwords in the clear at the storage server and transmission of the data when the storage server handles the encryption decryption there are still problems. When the master password is used both for authentication to the server and for data decryption the master password will typically be stored on the server. This can create problems because if the user list is hacked into by unauthorized agents or accessed by a sabotaging employee many passwords can be compromised. Even where only the hashes are stored there is a risk because with enough time and computing power an unauthorized agent can run analysis on tables of password hashes to guess weak passwords that would hash to the values stored in the password hash table.

Thus there is a need for a more secure storage and online access solutions especially where the data being stored is of a sensitive nature.

In one embodiment three levels of security are provided where user master passwords or a derivative thereof are not required at a server. A user device may register with a storage service and receive a user device key that is stored on the device and at the service. The user device key may be used to authenticate the user device with the storage service. As data in the storage service is encrypted with a master password the data may be protected from disclosure. As a user master key or derivative thereof is not used in authentication the data may be protected from a disclosure or breach of the authentication credentials. Encryption and decryption may thus be performed on the user device with a user master key that may not be disclosed externally from the user device. In another embodiment a computerized system is provided for components implementing the method described above.

In one embodiment a client device requests access to a storage server on behalf of a particular user. When the storage server determines that a new client device is used or is new for the particular user authorization is required via a side channel. The client device authenticates for that user. A unique user device key is generated specific to that user and that device. The unique user device key identifier is stored in a user database of the storage server. The unique user device key identifier is provided to the client device. The unique user device key identifier is encrypted with a user master password at the client device. User access to elements controlled by that user is provided when the client device provides the unique user device key identifier to the storage server.

As explained herein methods systems and apparatus are provided that provide for secure online storage and access to data and or resources. Those skilled in the art will appreciate that logic and examples used to handle online storage described herein have many applications and that improvements inspired by one application have broad utility in diverse applications that employ techniques used in other applications. Below example hardware is described that might be used to implement aspects of the present invention followed by a description of software elements.

Storage system may include one or more clients . For example a desktop web browser client may be coupled to Internet via a network gateway. In one embodiment the network gateway can be provided by Internet service provider ISP hardware coupled to Internet . In one embodiment the network protocol used by clients is a TCP IP based protocol such as HTTP. These clients can then communicate with web servers and other destination devices coupled to Internet .

An online storage system might include an access control server that operates with an HTTP Web server front end so that users interact using a client browser. Thus a client can communicate with storage server via its connectivity to Internet . Storage server can be one or more computer servers load balanced to provide scalability and fail over capabilities to clients accessing it.

A web server can also be coupled to Internet . Web server is often connected to the Internet via an ISP. Client can communicate with web server via its connectivity to Internet . Web server can be configured to provide a network interface to program logic and information accessible via a database server . Web server can be one or more computer servers load balanced to provide scalability and fail over capabilities to clients accessing it.

In one embodiment web server houses parts of the program logic that implements the storage access control described herein. For example it might allow for downloading of software components e.g. client side plug ins and other applications required for the systems described herein and synching data between the clients running such a system and associated server components.

Web server in turn can communicate with database server that can be configured to access data . Database server and data can also comprise a set of servers load balanced to meet scalability and fail over requirements of systems they provide data to. They may reside on web server or on physically separate servers. Database server can be configured to facilitate the retrieval of data . For example database server can retrieve data requested by users as described herein and forward it to clients communicating with web server .

One of the clients can include a desktop personal computer workstation laptop personal digital assistant PDA cell phone or any WAP enabled device or any other computing device capable of interfacing directly or indirectly to Internet . Web client might typically run a network interface application which can be for example a browsing program such as Microsoft s Internet Explorer Netscape Navigator browser Mozilla s Firefox browser Opera s browser Google s Chrome browser Apple s Safari browser and or a WAP enabled browser executing on a cell phone PDA other wireless device or the like. The network interface application can allow a user of web client to access process and view information and documents available to it from servers in the system such as web server .

Web client also typically includes one or more user interface devices such as a keyboard a mouse touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. monitor screen LCD display etc. in conjunction with pages forms and other information provided by servers. Although the system is described in conjunction with the Internet it should be understood that other networks can be used instead of or in addition to the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment web client and all of its components are operator configurable using an application including computer code run using a central processing unit such as an Intel Pentium processor an AMD Athlon processor or the like or multiple processors. Computer code for operating and configuring client system to communicate process and display data and media content as described herein is preferably downloaded and stored on a processor readable storage medium such as a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as a compact disk CD medium a digital versatile disk DVD medium a floppy disk and the like. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source e.g. from one of the servers over the Internet or transmitted over any other network connection e.g. extranet VPN LAN or other conventional networks using any communication medium and protocols e.g. TCP IP HTTP HTTPS FTP Ethernet or other media and protocols .

It should be appreciated that computer code for implementing aspects of the present disclosure can be C C HTML XML Java JavaScript etc. code or any other suitable scripting language e.g. VBScript or any other suitable programming language that can be executed on a client or server or compiled to execute on a client or server.

Using the hardware described above or other hardware users might upload data securely and access that data securely even with a risk of interlopers sniffing the network and unethical operators with access to the hardware at an online storage server facility.

In the approach described in this section storage of user master passwords may be avoided by the storage server as well as derivatives of the user master passwords. To access encrypted data stored on a secured storage servers the user s client device first authenticates with the storage server. Each client device one user might have multiple devices or change from device to device may be separately authenticated.

Using this process the user master password does not need to be stored not even at the client devices that the user might use and if it is held in memory temporarily it can be discarded. The user master password also does not need to be transferred through the network because it is not used for online authentication. Thus while each user may have a user master password that does not travel there are also Unique User Device Keys UDKs per user and per device that may be stored. Thus a user and or device may have multiple UDKs. In some embodiments the UDKs may be referred to as unique device indicators UDI .

Examples of UDKs might include a random or pseudorandom number sent with the one time password message or otherwise generated possibly with another part derived from hardware and or software characteristics of the user s device. In some embodiments the UDK may be unique for all devices.

In one embodiment instead of sending the Unique UDK directly to the server the server may send a One Time Challenge to the client. The client may modify the challenge using the UDK and return it to the server. The server may then verify the challenge was completed successfully. This use of a challenge may secure the authentication process against a replay attack. In another embodiment the UDK may be different on the server than on the client. The server or client may generate a public key and a private key the private key may be sent to and or stored by the client using Public Key Infrastructure. The system may also use a similar challenge system as described.

Thus while the UDKs are used to authenticate the user device and other keys might be used for logging in and other actions that require some validation at the storage server the user s master password is only used to encrypt and decrypt the user s data and since encryption and decryption only occurs at the user side neither the user master password nor any hash or any part of it need be stored at the storage server.

For example illustrates an example flow of a storage access process. This process may be accomplished by computing resources such as those seen in including client devices webserver and ISP . A user requests to login to a storage service. If the login format is not valid the request may fail as the account does not exist with an invalid format. If the format is valid a local device may determine if account and or data files exist in a local folder. If they exist the master password may be verified and user data may be unserialized. If unserialization is unsuccessful failure may be due to a wrong master password. However if unserialization is successful a session may be opened to the storage service. If the device UDK exists and matches the device and is authorized a backup and or sync may be launched as authenticated by the UDK. An application may then be launched to facilitate further operations of the process such as managing the backup and or sync.

In the event that the account and or data files are not in a local folder or the UDK does not exist and match the device the storage system may be queried to see if the account exists remotely. If not the process may fail because no account exists. However if the account does exist a token may be sent to the user such as by SMS or email. The user may then be asked to input the token . After the user inputs the token the storage system may process the token. If the token is not validated the storage system may stop due to a failure of token verification. However if the token validates at least a portion of the user s data may be downloaded from the storage server to the device. The user may then use a mater password to unserialize user data. If not successful the user may be prompted to attempt another master password and receive the master password. If there is success in unserializing the data a session may be opened between the client and the storage server. A UDK may be generated and sent to the storage server. An application may then be opened to aid in furthering the management and or use of the user data. In some embodiments a password change may cause local data to be deleted before checking if the account exists remotely.

In one embodiment such as the one shown in a process of authentication used by a storage service system is shown. A user interacts with a browser to access a storage application over a secure connection. The user may use a private key to request operations from the storage application and ensure data distribution to authenticated user devices having UDKs . Data may be encrypted by a master password that is not communicated externally from the device. The device may communicate with services and running on servers to provide storage services. Services may include application services that include updates application files and registration services. Other services may include synchronization services that store encrypted data authorize devices based on UDKs.

In another example a user stores data credit card information personal information etc. securely. The data may be available on a variety of user devices as part of the system. However an attack on a storage server may fail. The data may be protected from attackers inside and outside a security border of the storage server. For example if non employees and employees of a company hosting and operating the storage server attempt to access the user s data the data may be unavailable to them.

In the architectural model described in this section protection of user data stored by the storage server relies on two separate secrets 1 a user master password and 2 a unique user device key UDK for each device enabled by a user for accessing the user s data. A user master password is not needed to be stored locally or remotely as the UDK may be used in authentication. The user master password may be used to generate cryptographic keys for encrypting decrypting the user data. One UDK might be present for each device enabled by a user with the UDK being auto generated as part of a device authentication process.

At least some of the user s data may be stored locally. Other user data might be stored elsewhere. In a first operation in an authentication process the user side process such as a client app accesses that user data. That user side process might prompt the user for the user master password to decrypt the user data. The user side process might generate from the user master password and possibly also a salt value a symmetric AES advanced encryption standard 256 bit key for ciphering and deciphering the user s personal data on the user s device.

In one embodiment the data ciphering and deciphering might be performed using functions of the OpenSSL protocol such as generating a 32 byte salt value using the OpenSSL RAND bytes function ciphering or reading it from the AES ciphertext deciphering . The user master password may be used with the salt to generate the AES 256 bit key that will be used for de ciphering. This generation might be performed using the OpenSSL PKC5 PBKDF2 HMAC SHA1 function using more than 10 000 iterations in some implementations. A 32 byte initialization vector is generated with the OpenSSL EVP BytesToKey function using SHA1. Then the data is ciphered or deciphered using CBC mode. When ciphering the salt can be written into the AES file. While this is a description of one ciphering algorithm other ciphering algorithms or hash algorithms may be used.

With this approach the user master password need never be stored anywhere not on the storage server not locally in a user device and does not need to transit over a network.

The storage server might be part of a larger system such as a task and shopping automation and assistance system or a data synchronization system. An example system might be file synchronization services between devices. Users may authenticate to the storage server in order to get controlled access. Authentication of the user may be based on the UDK and may have no relationship with the user master password. In some embodiments a device is prevented from using the master password. When a user creates an account or adds a new device to synchronize his or her data a new UDK is generated to apply to a device.

In a specific example the UDK comprises two parts 1 a first part which is a predictable part based on some hardware and software characteristics of the user s device and 2 a second part being a 38 character string possibly comprising lowercase letters capital letters and numbers generated using the OpenSSL RAND byte function. This UDK is then stored locally in the user data ciphered as with other user data as explained earlier and sent to the storage server. When a user has gained access to his or her data using his or her user master password the client software and the storage server can then access the user s UDK to authenticate him on the storage server without requiring any user interaction. As a result the storage server does not need access to or storage for the user master password to perform authentication.

Communications between the user side application such as the client application or other client and the storage server may be secured with HTTPS. For example HTTPS connections on the client side can be performed using the OpenSSL protocols. On the server side the servers may use a Verisign Class 3 Extended Validation SSL certificate or a DigiCert High Assurance CA 3 certificate with key length of 2048 bits and SHA1 RSA for a signature algorithm. The HTTPS communications between the user side application and the storage servers might use the SSLv3 protocol with TLS RSA WITH AES 256 CBC SHA connections.

Today cloud based services make various choices to encrypt their user data such as how many secrets to use and where the secrets are stored. These choices have certain important consequences in terms of security. Cloud Services may use a single private secret usually under their control to encrypt all user data. As a simpler choice from an implementation standpoint it offers the advantage of facilitating deduplication of data which can provide important economic benefits when the user data volume is important. However a single secret is not an optimal scenario from a security standpoint. If the key is compromised by a hacker attack or rogue employee all user data may be exposed.

For example a single secret breach is shown in . An employee or hacker may obtain access to user data secured by encryption such as AES. A brute force attack without the secret key may lead to access of user data as only one key need be found. If the secret key is compromised then user data may also be compromised.

A better alternative is to use a different key for each user. The most common practice is to ask the user to provide a strong master password and to derive the encryption key for each user from his or her master password. However to keep things simple for the user many services or applications tend to also use the user s master password or a derivative as an authentication key for the connection to their services. This implies that they have to store some kind of hash of the user s master password on their servers which makes them potentially subject to certain attack scenarios such as a Rainbow Table attack as illustrated in .

For example a rogue employee or external hacker may breach the storage service. If the user data is taken access to all of the user data may be difficult because each user secures their data with a different user master password. However if the user master passwords are stolen from the authentication part of a storage system access to the user data may be accomplished as the user master passwords are now available for use.

For example a rogue employee or external hacker may breach the storage service. If the user data is taken access to all of the user data may be difficult because each user secures their data with a different user master password. However if the authentication keys are stolen such as the UDKs and the user data files stolen a brute force attack would be difficult . The UDKs are not used in encryption and therefore only provide authenticated access to the encrypted files not the decrypted files. Decryption is with a separate master password that is unknown to a storage server.

Even if this scenario happens a rogue employee or an external hacker would have a very hard time executing a brute force or a dictionary attack on the AES user data files. For example a PBKDF2 algorithm Password Based Key Derivation Function 2 from RSA Laboratories Public Key Cryptography Standards PKCS might be used with more than 10 000 iterations. As the user data is encrypted using a key which is a derived from their user master password a large scale attack is difficult.

As an example a benchmark of attempts to decipher AES encrypted files using a Xeon 1.87 GHz processor 4 cores is shown in Table 1 

Table 1 represents the time it would take on a Xeon 1.87 GHz processor with 4 cores to determine a password used to protect user data. Without using PBKDF2 those numbers show that even with a strong password an attacker may be able to determine the user password within less than a month. Using PBKDF2 and given that the storage server enforces reasonably strong password requirements e.g. requiring at least one uppercase letter one lowercase letter and one digit and at least eight characters to avoid a user master password being contained in a dictionary an attack may be impractical.

There may be a limit to any security architecture. If the user s computer is physically compromised and an attacker is able to install a keylogger allowing the attacker to capture all keystrokes then a password based security system may not prevent data theft or piracy. An end user still remains responsible for physically protecting a computer from non authorized access and for making sure he is not installing potentially infected software. Yet an advantage of many of the embodiments is that a storage server user may be more secure than if sensitive personal data was stored in documents or passwords that were cached in a browser cache.

The initial registration for a user follows the flow described in . is a flowchart illustrating a possible authentication flow. As can be seen in the user master password is never user to perform server authentication and the only keys stored on the servers are the UDKs.

A client may perform registration and authentication with a server . This process may be accomplished by computing resources such as those seen in including client devices webserver and ISP . During registration a client may generate a new UDK . The UDK may be encrypted on the client using a key that derives from the user master password. The server may then receive a request from the client to add the UDK to an account. Using a second channel of communication such as e mail or SMS the server may verify the client should be added to the account. The account may then be successfully created.

During authentication the client may use the UDK previously created to authenticate to the server . The server may verify the UDK is stored as associated with the account and the data requested. If verified the server may then provide access to the client to operate on the data.

As shown in when a client is attempting to connect to a storage server account on a device that has not yet been authorized for this account the storage server generates a One Time Password such as a token that is sent to the account owner. The One Time Password may be sent via message to the email address used to create the storage server account initially or by text message to the user s mobile phone if the user has chosen to provide his mobile phone number.

In one embodiment the user enters both a user master password and the received One Time Password to enable the new device. After this two factor authentication has been performed the storage servers may start synchronizing the user data on the client . Communication can be handled with HTTPS and the user data may be traveling in AES 256 encrypted form.

An advantage to this system is that complexities may be hidden to the user. The operations of may be performed in the background to secure the user device with a user responsible for determining a secure user master password. Other keys can be generated by the application without user intervention. When adding an additional device the complexities may also be hidden while remaining secure through the use of two factor authentication described in . An example process from a user perspective is shown in and . represents an embodiment of a set of operations for registration as with . represents an embodiment of a set of operations for registration as with .

For example actions of a user may include registration and authentication as seen in . For registration a user may choose a login identifier and a strong password. The user may then create the account and become authenticated by providing the credentials. For authentication the user may enter the login identifier and the password selected previously. The user may then become authenticated to the system. It should be noted that while the user may perceive the password providing access to storage servers the password may actually never leave the device. Instead in some embodiments the password simply decrypts the UDK which is then transmitted to the storage server to authenticate the device.

In another example actions of a user may include adding a second device. A user may enter a login and password which results in a one time password being generated and sent to the client. The user may then enter the one time password in the device. The user device may then be authenticated to the storage server. While the user may perceive the login and password providing access to the storage server the credentials may not leave the user device. Instead in some embodiments a challenge may be issued to the user device to prove access to the password. Should the challenge pass the one time password may be sent to complete the process.

In one embodiment a computer system executing secure storage and communication between a user device and a storage server is provided. This system implements the computerized method for processes previously described. Such a system may include at least one multimedia device with a screen a hardware interface connected to said multimedia device means of connection to the internet a computer processor in electronic link with a computer program stored on a storage medium readable by said multimedia device said computer program comprising instructions that when executed by the processor implement the method of the invention. In one embodiment the multimedia device is a computer or mobile phone.

Further embodiments can be envisioned to one of ordinary skill in the art after reading this disclosure. In other embodiments combinations or sub combinations of the above disclosed invention can be advantageously made. The example arrangements of components are shown for purposes of illustration and it should be understood that combinations additions re arrangements and the like are contemplated in alternative embodiments of the present invention. Thus while the invention has been described with respect to exemplary embodiments one skilled in the art will recognize that numerous modifications are possible.

For example the processes described herein may be implemented using hardware components software components and or any combination thereof. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims and that the invention is intended to cover all modifications and equivalents within the scope of the following claims.

