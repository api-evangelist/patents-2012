---

title: Graphical user interface for viewing or editing an executable block diagram model
abstract: In one embodiment, a method for displaying elements of an attribute in an executable block diagram model is provided. The method may include displaying an executable block diagram model in a first window and receiving a first input from an input device, wherein the first input associates with a first parameter of a block diagram modeling component in the executable block diagram model, the first parameter is represented in the executable block diagram model by a first graphical affordances. The method may include triggering the display of a value of a first parameter in a first user interface widget in the first window.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08855983&OS=08855983&RS=08855983
owner: The MathWorks, Inc.
number: 08855983
owner_city: Natick
owner_country: US
publication_date: 20120611
---
This Application claims priority to and the benefit of U.S. patent application Ser. No. 11 974 740 titled GRAPHICAL USER INTERFACE FOR VIEWING OR EDITING AN EXECUTABLE BLOCK DIAGRAM MODEL which was filed on Oct. 16 2007 now U.S. Pat. No. 8 019 579. The above identified application is hereby incorporated by reference in its entirety as though fully set forth herein.

In an executable block diagram model there may be multiple blocks and lines connecting the blocks. Dialog boxes are often used to view and or edit parameters used in the executable block diagram model. Conventional configurations may require that a user switch focus between the model window and the dialog box windows for viewing and or editing parameter values.

In one embodiment a computer readable medium holding computer executable instructions for displaying one or more attributes associated with one of one or more block diagram modeling components of an executable block diagram model may be provided. The medium may include instructions for displaying an executable block diagram model in a first window the executable block diagram model comprising a first block diagram modeling component having a first attribute. The first block diagram modeling component may be associated with a first graphical affordance. The first block diagram modeling component may be displayed with the first graphical affordance. The first graphical affordance may be activated. The medium may further include instructions for displaying a first widget in response to activating the first graphical affordance the first widget displaying one or more attribute values associated with the first block diagram modeling component.

Yet in another embodiment a computer readable medium holding computer executable instructions for causing a computing device to display one or more attributes associated with one or more block diagram modeling components of an executable block diagram model where at least one of the one or more attributes has one or more attribute values may be provided. The medium may include instructions for displaying an executable block diagram model in a first window where the executable block diagram model comprises a first block diagram modeling component that includes a first attribute having one or more attribute values. One or more hotspot regions around the first block diagram modeling component may be identified. The identifying may include associating one of the one or more hotspot regions with the first attribute. The identifying may further include associating another of the one or more hotspot regions with a second attribute when a second attribute is associated with the first block diagram modeling component. The medium may also include instructions for receiving a first input for the first attribute or the second attribute where the first input modifies one or more attribute values of the first attribute or the second attribute. The one or more attribute values associated with the first attribute or the one or more attribute values associated with the second attribute may be displayed via a first widget in the first window where the displaying provides updated information about the first block diagram modeling component or the executable block diagram model.

Still in another embodiment a computer readable medium holding computer executable instructions for searching one or more attributes associated with one or more block diagram modeling components of an executable block diagram model may be provided. The medium may hold instructions for displaying an executable block diagram model in a first window wherein the executable block diagram model comprises one or more block diagram modeling components having one or more attributes the one or more attributes having one or more attribute values. The medium may further hold instructions for displaying a search tool in the first window wherein the search tool includes a category option that comprises a search category or a text field for receiving a search string the search string relating to one or more attribute values. The attributes of the executable block diagram model may be searched to match the search category or the search string with the one or more attribute values. One or more block diagram modeling components having one or more attributes with attribute values matching to the search category or the search string may be located. The one or more located block diagram modeling components may be displayed in the first window.

In another embodiment a computer readable medium holding computer executable instructions for viewing different layers of detail of one or more block diagram modeling components of an executable block diagram model may be provided. The medium may include instructions for displaying an executable block diagram model with one or more block diagram modeling components the one or more block diagram modeling components having at least a normal viewing mode. The executable block diagram model may be navigated using a multi level detail viewer. One of the one or more block diagram modeling components may be selected by positioning the multi level detail viewer on the selected block diagram modeling component. The medium may also include instructions for displaying a first level of detail of the selected block diagram modeling component the first level of detail illustrating one or more attributes of the selected block diagram modeling component. The one or more block diagram modeling components may be displayed in the normal viewing mode when the one or more block diagram modeling components are not selected.

In still another embodiment a system for displaying one or more attribute values of one or more attributes of a block diagram modeling component in an executable block diagram model is provided. The system may include a display device that displays an executable block diagram model having one or more block diagram modeling components in a window wherein the one or more block diagram modeling components have one or more attributes and a model editor that associates one or more block diagram modeling components or regions around the one or more graphical components with one or more graphical affordances. The system may further include an attribute value viewer that in response to activating the one or more graphical affordances displays a first widget for illustrating one or more attribute values of a first attribute associated with a first block diagram modeling component and an input device for entering input to modify the one or more attribute values displayed on the first widget. The system may also include an updating logic that updates the display of the block diagram with the input entered using the input device.

Exemplary embodiments may provide techniques computer based mediums systems and or devices for viewing and or editing of attributes of components of an executable block diagram model. The attributes may be but are not limited to for example parameters subsystem elements representations generated via a scripting language or generated code. In one embodiment a user can view and edit attributes in the same window where the executable block diagram model is displayed. Hence a user does not need to switch between windows to view and or edit attributes.

A dynamic system either natural or man made is a system whose response at any given time is a function of its input stimuli its current state and the current time. Physical dynamic systems include for example a falling body the rotation of the earth bio mechanical systems muscles joints etc. bio chemical systems gene expression protein pathways weather and climate pattern systems etc. Examples of man made or engineered dynamic systems include a bouncing ball a spring with a mass tied on an end automobiles airplanes control systems in major appliances communication networks audio signal processing nuclear reactors a stock market etc.

An executable block diagram model of a dynamic system is represented schematically as a collection of blocks interconnected by lines that represent signals. A signal represents the input and output of a dynamic system. Each block represents an elemental dynamic system. A line emanating at one block and terminating at another signifies that the output of the first block is an input to the second block. Each distinct input or output on a block is referred to as a port. Signals correspond to the time varying quantities represented by each line connection and are assumed to have values at each time instant. The source block of a signal writes to the signal at a given time instant when its system equations are solved. The destination blocks of this signal read from the signal when their system equations are being solved. Those skilled in the art will recognize that the term blocks does not refer exclusively to elemental dynamic systems but may also include other modeling elements that aid in readability and modularity of block diagrams.

In an embodiment the user interface widgets can be used to display the attributes. These widgets can be repositioned by a user request e.g. such as a drag and drop function performed by the user . In another embodiment the user interface widgets may be moved to another window or to the desktop. In one embodiment a user can determine if a user interface widget such as a tooltip should be persistently visible in the executable block diagram model and the user can also determine the layout of the user interface widget with respect to the executable block diagram model. Some embodiments may also provide techniques and or devices for searching for a specific parameter type and value in the executable block diagram model.

Other embodiments may provide techniques computer readable mediums systems and or devices for providing a multi level detail viewer for displaying different levels of detail for a block diagram modeling component. For example different levels of detail may be displayed as a user browses navigates in an executable block diagram model. In one embodiment different types of block diagram modeling components may have different levels of detail. In one embodiment the specified level of detail may be displayed directly on top of the corresponding block diagram modeling component. In another embodiment the specified level of detail may be displayed in another window that is embedded in the model window. The model window displays the executable block diagram model. In one embodiment a property setting displayed in the specified level of detail may be modified.

The computing device can be running substantially any operating system such as a version of the Microsoft Windows operating systems Unix operating system Linux operating systems MacOS operating system etc. Implementations of computing device may further operate an embedded operating system a real time operating system an open source operating system a proprietary operating system an operating system for mobile computing devices and or another type of operating system capable of running on computing device and or performing operations described herein.

Other computing resources such as Field Programming Gate Array FPGA Application Specific Integrated Circuit ASIC Application Specific Instruction Processor ASIP Digital Signal Processor DSP graphics processing unit GPU and General Purpose Processor GPP may also be used for executing code and or software. A hardware accelerator such as implemented in an ASIC FPGA or the like can additionally be used to increase a processing rate of the computing device .

Computing device includes memory on which software according to one embodiment of the present invention may be stored processor s for executing software stored in the memory and other programs for controlling system hardware.

The memory may include among other things a computer system memory or random access memory RAM such as dynamic random access memory DRAM static random access memory SRAM Magnetoresistive Random Access Memory MRAM extended data out random access memory EDO RAM etc. A user may interact with the computing device through a keyboard a pointing device and or a visual display device such as a computer monitor which may include a user interface . The user interface enables the user to interact with the modeling environment through the computing device . The user may send an input to manipulate an element of the modeling environment using the user interface . The user interface may also display the effects of the user input. Other input devices such as accelerometer and gyroscope based input devices active whiteboards cameras microphones neuro interface devices may also be used with computing device .

The computing device may further include a storage device such as a hard drive compact disc read only memory CD ROM or other computer readable medium for storing an operating system and other related software and for storing the modeling environment . Additionally the operating system and modeling environment may be run from a computer readable media such as for example KNOPPIX a bootable CD for GNU Linux.

In one embodiment model editor provides graphical user interface widgets to display parameter values. The graphical user interface widgets may be repositioned in the executable block diagram model or moved to a different window or moved to a desktop. In one embodiment specific to Microsoft Windows graphical user interface widgets may be placed on the desktop using the Active Desktop interface provided by the Microsoft Windows Shell Application Programming Interface API . In another embodiment graphical user interface widgets may be moved from a first window to a second window using dynamic data exchange or the Component Object Model COM interface. For example the dynamic data exchange technique allows different Windows applications to share data or send commands to one another.

In another embodiment a multi level detail viewer may be provided in modeling environment so that different levels of detail of a block diagram modeling component may be displayed. In one embodiment one or more details of a block diagram modeling component are categorized into a certain level of detail. For different types of block diagram modeling components different types of level of detail and different quantities of level of detail may be provided. For example in one embodiment modeling environment may have a set of predetermined levels of detail for a block diagram modeling component. Modeling environment may display relevant information for a selected level of detail for the corresponding block diagram modeling component based on a selected level of detail.

Parameter value viewer search tool and multi level detail viewer can be adapted to be included as part of the modeling environment or they can each be a stand alone application module script plug in or program that responds to calls from the modeling environment .

Additionally the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connection types including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 802.16 T1 T3 56 kb X.25 broadband connections e.g. Integrated Services Digital Network ISDN Frame Relay asynchronous transfer mode ATM wireless connections etc. or some combination of any or all of the above.

The network interface may include a built in network adapter network interface card NIC Personal Computer Memory Card International Association PCMCIA network card card bus network adapter wireless network adapter Universal Serial Bus USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing operations described herein.

Virtualization can be employed in computing device so that infrastructure and or resources in computing device can be shared. Virtualized processors may also be used with modeling environment and or other software in storage . A software referred as a virtual machine may be used to create a virtualized environment between the computing device and the infrastructure and or resources of the computing device . A virtual machine can be provided to handle a process running on multiple processors so that the process appears to be using only one computing resource rather than multiple computing resources. Multiple virtual machines can also be used with one processor.

A signal as used herein represents a set of values. For example a signal may be a set of values that can be stored read from storage manipulated sent from a source to a destination etc. For example a signal may be associated with a path e.g. a connection line in an executable block diagram model. The path may indicate a source location for the signal and a destination for the signal. In one implementation the signal may be read from the source location and stored at the destination. In another implementation the signal may propagate from the source location to the destination along the path. Signals that can be used with exemplary embodiments may take on different values as a model executes. Signals may have attributes such as dimensionality data type sample rate etc.

When signal is selected a user interface widget such as a tooltip or balloon help appears and displays information about the signal parameter values of signal . For example signal may be a graphical affordance that acts as a control that may trigger the display of widget . A widget is an interface element that a computer user interacts with such as a window a text box or the like. A graphical affordance is used to indicate to the user that when activated the graphical affordance will result in an action. The graphical affordance indicates an ability to control or trigger an action. Widget displays signal parameter values at a given time during the simulation of the executable block diagram model . Scroll bar is provided to allow a user to scroll through the history of signal parameter values for signal . The scroll bar helps the user to see the information that does not fit in the display area of the widget . The scroll bar may take other forms such as a slider a dial or the like. User interface widget displays signal parameter values for signal . Widgets and may be resized at a user s request such as for example by dragging and dropping the borders of the widget.

Signal is a graphical affordance that acts as a control that may trigger the display of widget . Widget may also include scroll bar for viewing different signal parameter values at different simulation times. Both widgets and are embedded in the model window so that a user does not need to switch windows to view signal parameter values. Exemplary implementations allow a user to view parameter values in the same window as the model.

Widgets and may utilize references or pointers to memory or storage where the values of signals are stored so that widgets and can reflect any changes in the respective signal values. Alternatively modeling environment may supply the signal values for widgets and for display. The positioning size elements and display time of the widgets and may be controlled by the modeling environment . Modeling environment may also provide options for a user to customize the positioning size elements and display time of the widgets and .

The parameter value viewer may provide menus e.g. right click menus for some or all of the widgets . For example widget can have a right click menu that allows a user the option to plot signal values in a figure to save the value signals to a workspace or to change logging options.

Parameter value viewer can also allow widgets to have icons other than a scroll bar . For example widget can have a plot icon . When a user clicks on the plot icon a window appears to display a plot of the signal parameter values. Plot may be drawn by feeding signal values and their corresponding time data into a plot function in a programming software. The plot may be a dynamic plot reflecting simulation data of the signal as the simulation progresses. In another example a connection icon may be provided in widget to connect signal to a scope block in a modeling environment for a user to view how the signal value changes as a function of time.

Furthermore an option can be provided such as via a button to allow signal values of signal to be exported or saved into a workspace so that a user can manipulate the signal data as desired in the corresponding programming environment. Widgets and may include additional information such as the name of the corresponding signal the source of the signal the destination of the signal etc. Widgets and may also include less information than what is illustrated in . Widgets and may include any type of text graphics or hyperlinks to display or manipulate information related to corresponding graphical affordances i.e. signals and respectively in this case .

Once block is selected one or more hotspots may be displayed in the model window. As used herein a screen hotspot hotspot is referred to as a region of a block diagram modeling component an icon a pop up display or other graphical affordances. A hotspot may be represented without using a special icon to indicate its location. The hotspot may be visually distinct or a user action may reveal the hotspot for example by changing the shape of the arrow cursor. Block has hotspot hotspot and hotspot . In one embodiment all hotspots are displayed when block is selected. In another embodiment only certain hotspots are displayed. In still another embodiment broken lines e.g. dashed dotted etc. may be used to illustrate the location and or region of the hotspot or different shades or color may also be used to illustrate the location and or region of the hotspot. One of ordinary skill in the art will appreciate that there are many different ways to graphically represent a hotspot.

In an exemplary embodiment a hotspot may act as a control that triggers the display of an associated user interface widget. For example when arrow cursor is navigated into a hotspot a user interface widget such as a tooltip can appear and may display the associated parameter name and or value. In one embodiment when arrow cursor is navigated over a hotspot the border of the hotspot area may change appearance such as becoming a solid red line to provide feedback to the user that the arrow cursor has entered a region that can activate the hotspot. Alternatively the solid red line may appear when the arrow cursor moves within the block outline or other regions that has a relation to the hotspot. As the arrow cursor hovers over the hotspot area the hovering may trigger the display of the corresponding GUI widget such as a tooltip. The user interface widget may disappear once the arrow cursor moves away from the hotspot and moves out a region of the hotspot that triggers the display of the user interface widget.

When arrow cursor is navigated to the hotspot user interface widget may be displayed to show the parameter name as Operator and parameter value as AND . When the arrow cursor is on the hotspot user interface widget indicates the name of the associated parameter is Num of ports and the value of the associated parameter is 2 . As the arrow cursor moves into hotspot a user interface widget appears and displays the associated parameter name Sample time and value 1 .

In one embodiment a user can view parameter values as he she navigates through an executable block diagram model. The user interface widget appears in the same window as the executable block diagram model. The parameter value is displayed on a separate window such as a dialog box window. In one embodiment each hotspot has a 1 to 1 relationship with the associated parameter or can alternatively be associated with a set of parameters.

When hotspot is selected a user interface widget appears to show the associated parameter name and value. User interface widget may provide a drop down list for changing the associated parameter value. A user can use a pointing device to move the cursor to activate the drop down list and choose a new value from the options provided in the drop down list. In a new value of OR is selected and the drop down list returns to its inactive state and the appearance of the user interface widget is updated to reflect the change i.e. showing OR instead of AND .

A user interface widget can include any type or number of graphical user interface elements that can allow a user to modify a parameter value. Although a drop down list is shown in as the user interface element for a user to edit a parameter value one of ordinary skill in the art will appreciate that the present invention is not limited to a specific kind of graphical user interface widget to edit a parameter value.

Referring back to user interface widget shows that keystroke t is the hotkey associated with the sample time parameter by being shown in bold. Widget shows that key p is the hotkey associated with the number of ports parameter whereas widget shows that O is the hotkey associated with the operator parameter. In a case insensitive implementation a single key o can be the hotkey associated with the operator parameter while in a case sensitive implementation key SHIFT o or other methods of producing an upper case O can be used as the hotkey.

In one embodiment the letter or symbol representing the hotkey can be recognized in the displayed parameter name in the widget so that a user does not need to look up or search for a hotkey that is related to a parameter of a selected block diagram modeling component. In the letter representing the hotkey has a bold font. In another embodiment the letter s and or symbol s representing the hotkey can have a different font a different color underlined highlighted a different background color etc. There are many ways to make the letter s and or symbol s that represents the hotkey recognizable in the displayed parameter name or the component icon and the present invention is not limited to the exemplary embodiments.

Referring back to once a block diagram modeling component is selected pressing a hotkey may display the corresponding user interface widget that displays the name and value of the associated parameter. In key p is pressed to initiate editing of the parameter value field in widget . A vertical line cursor is automatically presented in the text field in widget . One of ordinary skill in the art will appreciate that the specific cursors used in the illustrative embodiments are not meant to limit the scope of the present invention and other cursors may also be used with the present invention. Alternatively the text field may be displayed without a visual appearance such as a cursor. The user may edit the parameter by simply entering the new parameter in the text field provided in proximity of the widget .

After pressing the key p the value of the parameter number of ports is changed to 3 by pressing key 3 . By pressing Enter key on a keyboard the parameter value is updated and the appearance of hotspot is updated to show there are three ports instead of two . In other words once block is selected a user can press p 3 and Enter keys in sequence to change a parameter value and the change may be reflected in the appearance of the hotspot. In one embodiment users can view and or modify parameter values in an executable block diagram model quickly with the use of hotkeys.

Parameter value viewer can provide a right click menu to the widget that displays the parameter and its value to allow a user to have the option of making the widget selectively visible and hence displaying the parameter name and value at all times until the users indicates otherwise. In hotspot has a right click menu showing three options always visible remove hotspot and customize. In one embodiment by activating the always visible option widget is selectively displayed in the model window. An x may be provided at the upper right hand corner of widget once widget is selectively displayed so that a user can choose to make widget disappear by selecting the x with a pointing device. In another embodiment a user may make widget disappear to deselect the always visible option in the right click menu .

Once widget is selectively displayed widget may be moved to other locations in the window displaying the executable block diagram model. In another embodiment widget may be moved to other windows or dialogs associated with the executable block diagram model. In still another embodiment widget may be moved to the desktop or a window of another application. By placing the cursor over widget repositioning icon is displayed that allows a pointing device to drag or move widget to other locations within the executable block diagram model. In another embodiment when repositioning icon appears a widget may be copy cut from one location and pasted into another location. In one embodiment widget maintains a relative position with respect to the belonging block in this case block .

In one embodiment the upper limit and the lower limit shown in the text field may be changed by mouse movement such as increasing a value of the upper limit or the lower limit by moving the scroll wheel of a mouse. In another embodiment an input device such as a stylus may be used to draw a number that is adopted as the new parameter value.

In one embodiment graphical user interface may be a dialog box that is displayed in a separate window from the model window. In another embodiment graphical user interface may be displayed in the same model window. Graphical user interface includes a text field for entering drawing commands for hotspot . Text field has a MATLAB command that outputs sample time and the value of a variable with the name sample time . The MATLAB command determines the text that is displayed in hotspot .

Graphical user interface may include a check box that allows a user to select if hotspot should be always visible. Graphical user interface further includes a relative x position text field and a relative y position text field for customizing a relative location in pixels of the hotspot with respect to its belonging block i.e. block . The relative x position text field shows a value of 0 while the relative y position text field shows a value of 30. It is noted that are not drawn to scale. Graphical user interface includes a field for customizing a keyboard shortcut i.e. a hotkey for selecting hotspot from a keyboard when block is selected. Field may include one or more key strokes to be used as a hotkey.

The present invention is not limited to the specific GUI widgets illustrated or mentioned herein and any suitable GUI widget may be used in the present invention for displaying and editing parameter values.

Widget may have a pin button that provides an always visible option that a user may select. Widget may have a hyperlinked title that may provide a hyperlink to the documentation for block . Widget shows in entry an input type parameter with vector as its value. Entry shows input mode parameter with the value being one based. Entry shows that parameter index as starting value has the value true. Entry indicates that the parameter source of elements index is set to Internal. Widget also has entry showing parameter elements having value 1 and entry showing parameter sample time having value of 1. Each parameter in the widget may have an associated hotkey that is illustrated by the bolded letter corresponding to the hotkey in the parameter name. Hence instead of using a pointing device keystrokes can be used to select an entry in the widget to start the editing of the associated parameter value.

Widget further includes input type parameter input mode parameter index as starting value parameter source parameter elements parameter and sample time parameter . Input type parameter has a combo box that allows a user to select a desired parameter value. Input mode parameter and source parameter have respectively combo box and combo box for selecting a desired parameter value. Index as starting value parameter has a check box for selecting or deselecting the option of using index as starting value parameter . Elements parameter and sample time parameter have respectively text field and text field for a user to enter a desired parameter value.

The search tool may provide a text field for a user to enter a name and or a value of a configuration preference block a search category or a parameter. Search results can be highlighted such as by using a box to show the block diagram modeling component s that matches the search results. illustrates an alternative method for displaying search results.

In step modeling environment receives a first input from an input device where the first input associates with a first parameter of a block diagram modeling component in the executable block diagram model . In one embodiment the first input may be from a pointing device where the first input is a selection of a hotspot associated with the first parameter. A selection may be made by having a cursor hovering over the hotspot or having a pointing device clicking on the hotspot . In another embodiment the first input may be from a keyboard where the first input is a hotkey associated with the first parameter.

In still another embodiment the first input may be a selection of a block diagram modeling component such as a signal . A selection of the block diagram modeling component in the executable block diagram model may be received in step . The user may enter a first input associating the block diagram modeling component with a first parameter in step . The first input may trigger a first user interface widget to be displayed in the model window i.e. the first window . In one embodiment no additional window such as a dialog is needed to view and or edit a value of a parameter. The first parameter is represented in the executable block diagram model by a first graphical affordance. The first graphical affordance can be a hotspot or a block diagram modeling component in the executable block diagram model .

In step a value of the first parameter may be displayed by a parameter value viewer in the first user interface widget . The value displayed in the first user interface widget may be editable. The first user interface widget may be always visible in the executable block diagram model . In one embodiment the first user interface widget may be displayed in the vicinity of the first graphical affordance. In another embodiment the first user interface widget may be a bar displayed at a side of the first window.

In step a history of values of the first parameter may be optionally displayed in the first user interface widget . The history of values may include simulation values user defined values values from different simulation runs etc. The first user interface widget is continuously updated with new simulation and or execution values. In step simulation and or execution values of the first parameter may be optionally displayed in the first user interface widget during simulation and or execution of the executable block diagram model . Exemplary embodiments may provide a convenient and easy to use mechanism that allows a user to view how a parameter value changes during simulation and or execution of the executable block diagram model .

In step the first user interface widget may be optionally repositioned with respect to the executable block diagram model in the first window according to a second input from an input device. Inputs from an input device such as a keyboard a pointing device or a touchpad may be used to reposition the user interface widget. The first input and the second input may be received from different input devices. In step the first user interface widget may optionally display a name of the first parameter.

In step the first graphical affordance associated with the first parameter may optionally be updated in the executable block diagram model . In step an associated hotkey of the first parameter or an appearance of the first user interface widget may be optionally customized. In step a name and a value of a second parameter may optionally be displayed in the first user interface widget . The first user interface widget may be an editable pop up table. Alternatively a second user interface widget may be used in the first window to display the second parameter in step . The second parameter may be represented by a second graphical affordance in the executable block diagram model. In one embodiment the second parameter may have a different hotkey than the first parameter.

In step a search result may be displayed in the window . The search result may be displayed by highlighting one or more block diagram modeling components or one or more hotspots in the executable block diagram model . The search result may alternatively be displayed in a panel in the window . In another aspect the search result may be displayed in a status bar . In step a next button may be optionally provided in a status bar to show additional search result that is not able to be displayed in the status bar . In one embodiment the status bar shows one search result at a time and the next button is used to browse through the list of search results. In another embodiment a previous button an end and being button and or a button to move forward and backward by multiple results may be provided.

A control panel may be provided to let a user change properties related to lens like widget . Control panel includes a lens size control slider and detail level control slider . Lens size control slider enables a user to adjust the size i.e. diameter of the lens like widget while detail level control slider enables a user to select a specific detail level of block to display in the lens like widget . Each block in an executable block diagram model may have different levels of details. For example a block may have a parameter level showing details regarding the parameter values and a generated code level showing details regarding the generated code from the block. Although exemplary embodiments are discussed with specific level of details the invention is not limited to these specific levels of details discussed herein. There may be other embodiments where users may configure the parameters to create a fisheye view using the lens like widget .

Viewer widget includes a radio button for selecting a parameter level of detail a radio button for selecting an algorithm level of detail a radio button for selecting a generated code level of detail. For each level of detail specific information regarding a block diagram modeling component can be displayed. The parameter radio button is selected in and hence parameters such as numerator coefficient and its corresponding value denominator coefficient and its corresponding value absolute tolerance and its corresponding value are displayed in viewer widget . A user can modify a value of numerator coefficient denominator coefficient and absolute tolerance via text fields and respectively.

One of ordinary skill in the art will appreciate that although are discussed with exemplary GUI widgets the present invention is not limited to the exemplary GUI widgets described herein.

One of ordinary skill in the art will appreciate that although show two specific levels of detail the present invention is not limited to the specific levels of detail discussed herein. Although are discussed with exemplary GUI widgets the present invention is not limited to the exemplary GUI widgets described herein.

In one embodiment the use of different levels of details of a block diagram modeling component may help in identifying a problematic part of a model. In one embodiment an evaluation such as a check or test may be run on a model and one or more links may be provided to a level of detail that shows the problematic part of the model. In one embodiment the problematic part of the model may be highlighted in the level of detail so that a user can easily identify the problematic part that needs to be fixed instead of searching through the model to determine what aspect of a block is problematic.

In radio button for selecting a parameter level of detail is selected and various parameters and their corresponding values are displayed in viewer widget . Viewer widget displays port number parameter icon display parameter output when disabled parameter and initial output parameter . A warning pop up is displayed to show that the value of initial output parameter should be set to empty. The message shown in the warning pop up is consistent but may differ with the message shown in text field of graphical user interface in .

In one embodiment when hyperlink is selected by a user using a pointing device viewer widget is automatically displayed in the model window to show a user which parameter is causing a check to fail. More than one parameter may cause a check to fail and that data other than parameters such as unconnected block inputs or outputs improper block usage mismatch of port and signal names crossing transitions in a state transition diagram multiple writes to a data store automatic insertion of rate transitions wrong uses of a mux block for creating buses may also cause a check to fail.

Exemplary embodiments described herein may be implemented in a technical computing environment TCE . A TCE may include hardware and or software based logic that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc.

In one implementation a TCE may include a dynamically typed language that can be used to express problems and or solutions in mathematical notations familiar to those of skill in the relevant arts. For example a TCE may use an array as a basic element where the array may not require dimensioning. In addition a TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and design state based analysis and design etc.

A TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In one implementation a TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting distributed processing etc. . In another implementation a TCE may provide these functions as block sets. In still another implementation a TCE may provide these functions in another way such as via a library etc. a TCE may be implemented as a text based environment a graphically based environment or another type of environment such as a hybrid environment that is both text and graphically based.

A TCE may be implemented in a number of forms such as a text based form a graphically based form etc. For example a TCE may be implemented using one or more graphically based products. For example a graphically based TCE may be implemented using products such as but not limited to Simulink Stateflow SimEvents etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim Extend from Imagine That Inc. SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent System VIEW from Elanix Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhopsody or Tau from Telelogic or aspects of a Unified Modeling Language UML or SysML environment. The graphically based TCE may support code generation constraints generation constraints checking etc.

A TCE may further be implemented as a hybrid TCE that combines features of a text based and graphically based TCE. In one implementation one TCE may operate on top of the other TCE. For example a text based TCE e.g. MATLAB may operate as a foundation and a graphically based TCE e.g. Simulink may operate on top of MATLAB and may take advantage of text based features e.g. commands to provide a user with a graphical user interface and graphical outputs e.g. graphical displays for data dashboards to monitor performance of generated code etc. .

In an alternative embodiment aspects of the invention may be implemented in a language that is compatible with a product that includes a TCE such as one or more of the above identified text based or graphically based TCE s. For example SIMULINK a graphically based TCE may be used to practice exemplary embodiments described herein. A SIMULINK compatible modeling environment provides means e.g. via hardware or software based logic to use a SIMULINK model and or features in the SIMULINK compatible modeling environment. For example a SIMULINK compatible modeling environment may provide hardware and or software based logic to interface with a SIMULINK model to import or export a SIMULINK model to translate a SIMULINK model to integrate a SIMULINK model etc. Although exemplary embodiments may be described relative to a SIMULINK compatible modeling environment the present invention is not limited to these embodiments and may be applied to block diagram modeling and or computing tasks via other block diagram modeling environments.

Many alterations and modifications may be made by those having ordinary skill in the art without departing from the spirit and scope of the invention. Therefore it must be expressly understood that the illustrated embodiments have been shown only for the purposes of example and should not be taken as limiting the invention which is defined by the following claims. These claims are to be read as including what they set forth literally and also those equivalent elements which are insubstantially different even though not identical in other respects to what is shown and described in the above illustrations.

