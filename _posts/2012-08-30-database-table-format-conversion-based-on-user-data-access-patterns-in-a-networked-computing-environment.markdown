---

title: Database table format conversion based on user data access patterns in a networked computing environment
abstract: An approach for conversion between database formats (e.g., from a relational database format to a hash table or a “big table” database format) based on user data access patterns in a networked computing environment is provided. A first set of database tables having a first format is identified based on a set of access patterns stored in a computer storage device. A second set of database tables having a second database format corresponding to the first set of database tables may then be provided (e.g., accessed, augmented, and/or generated). A mapping between the first set of database tables and the second set of database tables may then be created. A column set may then be generated based on at least one condition of the set of queries. The column set may then be used as a key for the second set of database tables.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09053161&OS=09053161&RS=09053161
owner: International Business Machines Corporation
number: 09053161
owner_city: Armonk
owner_country: US
publication_date: 20120830
---
In general the present invention relates to database table format conversion. Specifically embodiments of the present invention relate to generation of a hash table a.k.a. big table database table from one or more relational database tables based on user access patterns e.g. queries insertions updates or deletions in a networked computing environment e.g. a cloud computing environment .

The networked computing environment e.g. cloud computing environment is an enhancement to the predecessor grid environment whereby multiple grids and other computation resources may be further enhanced by one or more additional abstraction layers e.g. a cloud layer thus making disparate devices appear to an end consumer as a single pool of seamless resources. These resources may include such things as physical or logical computing engines servers and devices device memory and storage devices among others.

Cloud computing models provide a convenient tool for application hosting. Challenges may exist however in applying cloud computing models to database architectures because many databases hosted in cloud environments follow a tabular database model. That is a traditional relational database model may not be applicable in designing an application that is to be hosted in a cloud environment. Accordingly it often falls upon a user customer to comprehend the concepts involved with a tabular database format. As such conversion from a relational database format to a tabular database format is often performed manually which can be time consuming and prone to error.

In general embodiments of the present invention relate to approaches for conversion between database formats e.g. from a relational database format to a hash table or a big table database format based on user data access patterns e.g. a set of queries insertions updates or deletions in a networked computing environment e.g. a cloud computing environment . In a typical embodiment a first set of database tables having a first format is identified based on a set of access patterns stored in a computer storage device. A second set of database tables having a second database format corresponding to the first set of database tables may then be provided e.g. accessed augmented and or generated . A mapping between the first set of database tables and the second set of database tables may then be created. A column set may then be generated based on at least one condition of the set of access patterns. The column set may then be used as a key for the second set of database tables.

A first aspect of the present invention provides a computer implemented method for converting database formats based on user data access patterns in a networked computing environment comprising identifying a first set of database tables based on a set of access patterns stored in a computer storage device the first set of database tables having a first format and the set of access patterns indicating a set of user data queries insertions updates or deletions to data stored in the first set of database tables providing a second set of database tables having a second database format corresponding to the first set of database tables creating a mapping between the first set of database tables and the second set of database tables and generating a key for the second set of database tables based on at least one condition of the set of access patterns.

A second aspect of the present invention provides a system for converting database formats based on user data access patterns in a networked computing environment comprising a memory medium comprising instructions a bus coupled to the memory medium and a processor coupled to the bus that when executing the instructions causes the system to identify a first set of database tables based on a set of queries stored in a computer storage device the first set of database tables having a first format and the set of access patterns indicating a set of user data queries insertions updates or deletions to data stored in the first set of database tables provide a second set of database tables having a second database format corresponding to the first set of database tables create a mapping between the first set of database tables and the second set of database tables and generate a key for the second set of database tables based on at least one condition of the set of access patterns.

A third aspect of the present invention provides a computer program product for converting database formats based on user data access patterns in a networked computing environment the computer program product comprising a computer readable storage media and program instructions stored on the computer readable storage media to identify a first set of database tables based on a set of access patterns stored in a computer storage device the first set of database tables having a first format and the set of access patterns indicating a set of user data queries insertions updates or deletions to data stored in the first set of database tables provide a second set of database tables having a second database format corresponding to the first set of database tables create a mapping between the first set of database tables and the second set of database tables and generate a key for the second set of database tables based on at least one condition of the set of access patterns.

A fourth aspect of the present invention provides a method for deploying a system for converting database formats based on user data access patterns in a networked computing environment comprising providing a computer infrastructure being operable to identify a first set of database tables based on a set of access patterns stored in a computer storage device the first set of database tables having a first format and the set of access patterns indicating a set of user data queries insertions updates or deletions to data stored in the first set of database tables provide a second set of database tables having a second database format corresponding to the first set of database tables create a mapping between the first set of database tables and the second set of database tables and generate a key for the second set of database tables based on at least one condition of the set of access patterns.

The drawings are not necessarily to scale. The drawings are merely schematic representations not intended to portray specific parameters of the invention. The drawings are intended to depict only typical embodiments of the invention and therefore should not be considered as limiting the scope of the invention. In the drawings like numbering represents like elements.

Illustrative embodiments will now be described more fully herein with reference to the accompanying drawings in which embodiments are shown. This disclosure may however be embodied in many different forms and should not be construed as limited to the embodiments set forth herein. Rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of this disclosure to those skilled in the art. In the description details of well known features and techniques may be omitted to avoid unnecessarily obscuring the presented embodiments.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of this disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. Furthermore the use of the terms a an etc. do not denote a limitation of quantity but rather denote the presence of at least one of the referenced items. The term set is intended to mean a quantity of at least one. It will be further understood that the terms comprises and or comprising or includes and or including when used in this specification specify the presence of stated features regions integers steps operations elements and or components but do not preclude the presence or addition of one or more other features regions integers steps operations elements components and or groups thereof.

Embodiments of the present invention relate to approaches for conversion between database formats e.g. from a relational database format to a hash table or a big table database format based on user data access patterns e.g. a set of queries in a networked computing environment e.g. a cloud computing environment . In a typical embodiment a first set of database tables having a first format is identified based on a set of access patterns stored in a computer storage device. A second set of database tables having a second database format corresponding to the first set of database tables may then be provided e.g. accessed augmented and or generated . A mapping between the first set of database tables and the second set of database tables may then be created. A column set may then be generated based on at least one condition of the set of access patterns. The column set may then be used as a key for the second set of database tables.

In general a hash table or big table database format maps two arbitrary string values e.g. row key and column key and timestamp hence a three dimensional mapping into an associated arbitrary byte array. The big table format may be defined as a sparse distributed multi dimensional sorted map. A big table format is generally designed to scale across a high volume of machines and make it more convenient to add more machines without significant reconfiguration. Each table may have multiple dimensions e.g. one of which is a field for time to allow for versioning and garbage collection . Tables may be optimized for various file systems by being split into multiple tablets e.g. segments of the tables may be split along a row chosen such that the tablet will be a certain size e.g. about 200 megabytes .

When sizes of tables have a potential to grow beyond a specified limit the tablets may compressed using various algorithms e.g. BMDiff the Zippy compression algorithm open sourced as Snappy . Locations in tablets may be recorded as database entries in multiple special tablets which are called META1 tablets. META1 tablets may be found by querying a META0 tablet which typically resides on a server of its own since it may often be queried by clients as to the location of the META1 tablet. Along these lines the META0 server is not generally a bottleneck since the processor time and bandwidth necessary to discover and transmit META1 locations is typically minimal and clients may cache locations to minimize queries.

It is understood in advance that although this disclosure includes a detailed description of cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active consumer accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based email . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited consumer specific application configuration settings.

Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.

Referring now to a schematic of an example of a cloud computing node is shown. Cloud computing node is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless cloud computing node is capable of being implemented and or performing any of the functionality set forth hereinabove.

In cloud computing node there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in cloud computing node is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

The embodiments of the invention may be implemented as a computer readable signal medium which may include a propagated data signal with computer readable program code embodied therein e.g. in baseband or as part of a carrier wave . Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination of the foregoing.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a consumer to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

Referring now to illustrative cloud computing environment is depicted. As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example personal digital assistant PDA or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. Nodes may communicate with one another. They may be grouped not shown physically or virtually in one or more networks such as private community public or hybrid clouds as described hereinabove or a combination thereof. This allows cloud computing environment to offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A N shown in are intended to be illustrative only and that computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser .

Referring now to a set of functional abstraction layers provided by cloud computing environment is shown. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes. In one example IBM zSeries systems and RISC Reduced Instruction Set Computer architecture based servers. In one example IBM pSeries systems IBM System x servers IBM BladeCenter systems storage devices networks and networking components. Examples of software components include network application server software. In one example IBM WebSphere application server software and database software. In one example IBM DB2 database software. IBM zSeries pSeries System x BladeCenter WebSphere and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide. 

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients.

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. Consumer portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provides pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA. Further shown in management layer is database format conversion which represents the functionality that is provided under the embodiments of the present invention.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing transaction processing and consumer data storage and backup. As mentioned above all of the foregoing examples described with respect to are illustrative only and the invention is not limited to these examples.

It is understood that all functions of the present invention as described herein typically may be performed by the database format conversion functionality of management layer which can be tangibly embodied as modules of program code of program utility . However this need not be the case. Rather the functionality recited herein could be carried out implemented and or enabled by any of the layers shown in .

It is reiterated that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather the embodiments of the present invention are intended to be implemented with any type of networked computing environment now known or later developed.

As indicated above embodiments of the present invention enable big table creation based on a relational database model e.g. expressed in a ddl or xml schema file and data access patterns. In general the embodiments of the present invention will leverage users data access patterns e.g. queries insertions updates or deletions to create big tables. That is data from table and joints involved in queries insertions updates or deletions is examined analyzed and used to construct big tables.

Referring now to a system diagram describing the functionality discussed herein according to an embodiment of the present invention is shown. It is understood that the teachings recited herein may be practiced within any type of networked computing environment e.g. a cloud computing environment . A computer system server which can be implemented as either a stand alone computer system or as a networked computer system is shown in . In the event the teachings recited herein are practiced in a networked computing environment each client need not have a database format conversion engine engine . Rather engine could be loaded on a server or server capable device that communicates e.g. wirelessly with the clients to provide database format conversion therefor. Regardless as depicted engine is shown within computer system server . In general engine can be implemented as program utility on computer system of and can enable the functions recited herein. As further shown engine in one embodiment comprises a rules and or computational engine that processes a set at least one of rules logic and or provides database format conversion hereunder.

Along these lines engine may perform multiple functions similar to a general purpose computer. Specifically among other functions engine may among other things identify a first set of database tables A N e.g. stored in one or more computer storage devices having a first format e.g. a relational database based on a set of access patterns A N e.g. although not shown set of access patterns A N may also stored and or accessed from one or more computer storage devices the set of access patterns A N a set of user data queries insertions updates and or deletions to data stored in first set of database tables A N provide a second set of database tables A N having a second database format e.g. a big hash table database format corresponding to the first set of database tables A N generate a set of de normalized tables from the first set of database tables A N augment at least one table of the first set of database tables A N to yield the second set of database tables A N create a mapping between the first set of database tables A N and the second set of database tables A N generate a key for the second set of database tables based on at least one condition of the set of access patterns generate a column set based on at least one condition of the set of access patterns A N use the column set as a key for the second set of database tables A N and or propagate at least one data operation e.g. a data deletion operation a data insertion operation etc. to the second set of database tables A N based on at least one of the key the mapping or the at least one condition.

Referring now to a component flow diagram according to one embodiment of the present invention is shown. It is understood in advance that one or more of the components shown in may be implemented via or in conjunction with any of the components of e.g. program of engine and or computer storage device of etc. Regardless as shown generally shows the following components 

Relational data model and access pattern A relational data model can be represented by data definition language DDL . Access patterns generally represents one or more operations against the relational data model e.g. queries data insert operations data update operations data deletion operations etc. 

Big table solution generator By taking the relational data model and the access pattern as input two or more objects may generated such as a cloud data table repository configuration and hash table definition that defines big table name table structure e.g. hash table definition key definition etc. and or a data service application programming interface API definition and implementation logic e.g. a method and or logic that implements the access pattern .

Cloud data server By deploying data service API definition and implementation logic cloud data server may provide a data service for one or more client applications . Such service may include operations that are described in the access pattern.

Step P Based on relational data model and access patterns big table solution generator may create cloud data repository configuration and hash table definition and data service API definition and implementation logic .

Step P Cloud data repository configuration and hash table definition is deployed into cloud data repository .

This section will describe an illustrative algorithm process for carrying out at least one embodiment of the present invention. The algorithm will utilize the following input and or output 

In addition the mapping between each of the identified relational tables and the updated or newly generated big table is created.

It may be noted that at the end of this step if a relational database table has not been mapped to a big table then a big table with that table will be created and the corresponding mapping will be created.

Referring now to a method flow diagram according to an embodiment of the present invention is shown. In step S a first set of database tables having a first format e.g. a relational database format based on a set of user access patterns stored in a computer storage device is identified e.g. the set of user access patterns indicating a set of user data retrieval operations to data stored in the first set of database tables . In step S a second set of database tables having a second database format e.g. big table format corresponding to the first set of database tables is provided. In step S a mapping between the first set of database tables and the second set of database tables is created. In step S a column set is generated based on at least one condition of the set of user access patterns. In step S the column set is used as a key for the second set of database tables.

While shown and described herein as a database format conversion solution it is understood that the invention further provides various alternative embodiments. For example in one embodiment the invention provides a computer readable useable medium that includes computer program code to enable a computer infrastructure to provide database format conversion functionality as discussed herein. To this extent the computer readable useable medium includes program code that implements each of the various processes of the invention. It is understood that the terms computer readable medium or computer useable medium comprise one or more of any type of physical embodiment of the program code. In particular the computer readable useable medium can comprise program code embodied on one or more portable storage articles of manufacture e.g. a compact disc a magnetic disk a tape etc. on one or more data storage portions of a computing device such as memory and or storage system e.g. a fixed disk a read only memory a random access memory a cache memory etc. .

In another embodiment the invention provides a method that performs the process of the invention on a subscription advertising and or fee basis. That is a service provider such as a Solution Integrator could offer to provide database format conversion functionality. In this case the service provider can create maintain support etc. a computer infrastructure such as computer system that performs the processes of the invention for one or more consumers. In return the service provider can receive payment from the consumer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

In still another embodiment the invention provides a computer implemented method for database format conversion. In this case a computer infrastructure such as computer system can be provided and one or more systems for performing the processes of the invention can be obtained e.g. created purchased used modified etc. and deployed to the computer infrastructure. To this extent the deployment of a system can comprise one or more of 1 installing program code on a computing device such as computer system from a computer readable medium 2 adding one or more computing devices to the computer infrastructure and 3 incorporating and or modifying one or more existing systems of the computer infrastructure to enable the computer infrastructure to perform the processes of the invention.

As used herein it is understood that the terms program code and computer program code are synonymous and mean any expression in any language code or notation of a set of instructions intended to cause a computing device having an information processing capability to perform a particular function either directly or after either or both of the following a conversion to another language code or notation and or b reproduction in a different material form. To this extent program code can be embodied as one or more of an application software program component software a library of functions an operating system a basic device system driver for a particular computing device and the like.

A data processing system suitable for storing and or executing program code can be provided hereunder and can include at least one processor communicatively coupled directly or indirectly to memory elements through a system bus. The memory elements can include but are not limited to local memory employed during actual execution of the program code bulk storage and cache memories that provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution. Input output and or other external devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening device controllers.

Network adapters also may be coupled to the system to enable the data processing system to become coupled to other data processing systems remote printers storage devices and or the like through any combination of intervening private or public networks. Illustrative network adapters include but are not limited to modems cable modems and Ethernet cards.

The foregoing description of various aspects of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed and obviously many modifications and variations are possible. Such modifications and variations that may be apparent to a person skilled in the art are intended to be included within the scope of the invention as defined by the accompanying claims.

