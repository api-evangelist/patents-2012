---

title: Computer program code and method for delivering external data to a process running on a virtual machine
abstract: A method and system for delivering external data to a process running on a virtual machine, the virtual machine running on an operating system. The method includes the steps of executing instructions on the virtual machine that obtain state data related to the process; querying the virtual machine to obtain component data related to the state data; and manipulating the component data to deliver the external data to the process. In one example, the system provides a single sign-on application that passes user credentials to a Java applet running on a Java virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08966481&OS=08966481&RS=08966481
owner: ActivIdentity (Australia) Pty. Ltd.
number: 08966481
owner_city: Deakin Australian Capital Territory
owner_country: AU
publication_date: 20120426
---
This application is a continuation of U.S. application Ser. No. 12 498 130 filed Jul. 6 2009 pending which is a continuation of U.S. application Ser. No. 10 369 268 filed Feb. 14 2003 abandoned the entire contents of which are incorporated by reference herein.

The present invention relates to computer program code and a method for communicating with a process running on a virtual machine. By way of illustrative example of a preferred embodiment of the present invention reference will be made to a single sign on application that passes user credentials to a Java applet running on a Java Virtual Machine. It is to be understood however that the present invention is applicable for communicating with a process running on a virtual machine in contexts other than single sign on applications.

It is also to be understood that the term process it to be understood as having a broad meaning encompassing any executable computer code or data whether compiled or interpreted including but not limited to threads procedures scripts and programs.

When computers were first deployed such as in a work environment there was generally a single computer such as mainframe or minicomputer shared by a number of users who accessed the computer via dumb terminals. A user would authenticate their identity when logging in by entering a user name and password into their terminal and thereby gaining access to the resources i.e. programs and data of the computer. Since there was only a single computer the authentication process only had to be performed once per user session.

With the establishment of local area networks linking PCs and or workstations minicomputers and mainframes users often had to authenticate themselves to their own workstation to gain initial access to the network and then separately to each network node on which a required resource resided. However the maximum number of nodes on local area networks was fairly constrained meaning that the number of different log in names and passwords that a user needed to know was manageable.

Most local area networks are now connected to wide area networks and principally the Internet. With Internet connectivity users have access to effectively limitless resources residing on globally dispersed network nodes. For example as illustrated in a user workstation such as a PC is connected to a network . Typically the workstation is connected to a local area network LAN . In turn the LAN is connected via an Internet Service Provider ISP not shown to a router not shown that provides access to the Internet. The LAN may also be connected via the telephone system to other LANs to form extranets. The network illustrated in refers to LANs including extranets wide area networks and the Internet.

Network connectivity allows user access to resources residing on an Application Server that runs applications for the user and delivers output to the user workstation . Applications may also run directly on the user workstation and have access to file servers print servers and email servers residing on the LAN or on other networks including the Internet.

The user workstation also has access to resources on a mainframe Unix Host that are accessed via terminal emulator software using a protocol such as TN 3270 running on the user workstation. Network connectivity also allows access to any number of services available on the World Wide Web such as internet banking online auctions online retailers commercial databases such as Lexis or Dialog and web mail

Potentially a user may have to authenticate themselves each time they wish to access a particular resource meaning that a large volume of authentication credentials such as user names and passwords needs to be remembered. Additionally for security purposes many services require that a password be changed on a regular basis thus adding to the confusion and difficulty in managing authentication credentials.

In an attempt to better manage authentication of user credentials Single Sign On SSO systems have been developed. SSO allows automation of the authentication process whereby users authenticate themselves once with the SSO system then managing subsequent authentications if and when required. In some cases SSO is provided by an authentication server accessible to the user work station over the network . Alternatively the SSO system can run directly on the user workstation or on both the workstation and server . A database such as an X.500 based Directory of authentication credentials is accessible to the SSO system. For security purposes the authentication credentials are stored in encrypted form.

An overview of an SSO system is given by reference to . Generally the SSO system runs as a background process on the user workstation in step . At step data that is indicative of the state of a user interface hereinafter referred to as user interface state data presented on the user workstation is examined to detect whether there is a log in opportunity. This step is typically implemented via services provided by the operating system as understood by those skilled in the art. For example the Windows operating system provides application programming interfaces API s that allow an application to be notified of various user interface events. This mechanism known as Windows hooking allows the application to determine when a window is created what the window contains and properties of the window such as its title position and others. After detecting a log in opportunity at step the SSO system determines the particular resource related to the log in opportunity such as application mainframe web service etc and retrieves the relevant authentication credentials from the database . These credentials are then applied at step to the user interface object such as by entering the user name and password to thereby complete the authentication process. The user is thus relieved from having to remember and enter the correct user name and password to access a particular resource.

The resources accessed by the SSO system may exist on the user workstation as an application program as is illustrated in . In this case an application program for example a terminal emulator or email client uses operating system services such as a user interface to perform its tasks. The SSO system is also an application program that as noted above uses operating system services to authenticate the user to particular resources.

However some resources do not exist as an application program running directly on the operating system but rather as a process running on a virtual machine . A virtual machine can be described as a software simulated machine providing the operational equivalent of a real machine that does not exist as a physical entity per se. A virtual machine takes instructions from a process and converts them to instructions that are recognisable by the operating system and hardware on which the virtual machine runs.

For example as illustrated in a web browser such as Microsoft Internet Explorer exists as an application program running on an operating system such as Microsoft Windows which in turn is running on particular hardware such as an Intel processor with memory and peripherals . The web browser implements a virtual machine on which processes may be run. In particular a Java applet delivered as part of a web page to the web browser over the internet exists as a process that runs on the virtual machine for example the JVM developed by Sun Microsystems .

The Java applet uses services provided by the virtual machine to instructions recognisable by the operating system and hardware implementing the virtual machine . The Java programming language was developed by Sun Microsystems and has been successful due to its cross platform portability in that a single Java program may be written for any platform that implements the JVM. Thus the same applet may be written for and run on a platform employing for example the Microsoft Unix Linux or Macintosh operating system or indeed any platform that implements a JVM.

Numerous web based services provide authentication prompts such as requests for user names and passwords via a Java applet that is downloaded to the user s browser and runs on a virtual machine. An effective SSO system would allow authentication to any resource irrespective of how the resource exists on a user workstation . Whilst current SSO systems allow accurate authentication to a resource existing as an application program they are less successful where the resource exists as a process running on a virtual machine. Thus SSO systems could be improved to allow authentication into a virtual machine. Also it would be advantageous to communicate with processes running on virtual machines for other purposes.

The present invention aims to provide an alternative to known software products and methods of the type referred to above. More particularly the invention aims to provide a computer software product and method that allows communication with a process running on a virtual machine.

According to a first aspect of the present invention there is provided a method for delivering external data to a process running on a virtual machine said virtual machine running on an operating system the method including the steps of 

Typically the process implements a user interface and the state data is user interface state data. The user interface is generally a graphical user interface GUI and the user interface state data preferably indicates the creation of a top level window in the GUI.

Optionally the instructions utilise an applications program interface API running on the virtual machine to obtain the state data. It has been found that an accessibility API is a suitable API and that the state data may be obtained by using an accessibility API to hook the virtual machine process.

Prior to the querying step the method may include the optional steps of calling a second process that executes outside the virtual machine and obtaining attribute data relating to the state data from the second process.

Preferably the attribute data is forwarded for use by the instructions executing on the virtual machine and may be forwarded in a UDP packet.

determine the unique identifier allocated by the operating system to a parent window of the applet and

confirm that the unique identifier determined by the virtual machine instructions matches the unique identifier allocated externally by the operating system.

The external data could for example be a login script for entering authentication credentials into the process.

According to a second aspect of the present invention there is provided computer program code for carrying out the method of the first aspect of the invention.

According to a third aspect of the present invention there is provided a Single Sign On System including 

a Java applet stored at the server the applet including instructions that when executed on a virtual machine define a user interface

a browser installed on said computer terminal operative to download the Java applet from the server and run the Java applet on the virtual machine 

The software product method and system of the present invention allows communication with a process running on a virtual machine and can be used to implement an SSO system. In addition the present invention could be utilised in any situation where communication with virtual machine processes is required such as for testing software code written to be executed on a virtual machine.

Turning to there is illustrated the user workstation which is a PC having conventional hardware on which an Operating System such as Microsoft

Windows is running. Two application programs being a web browser and an SSO system are running on the Operating System . A virtual machine such as the JVM is implemented within the web browser that allows a Java applet downloaded from the Internet with a web page to run on the user workstation. The applet is written in the Java programming language and uses services provided by the virtual machine to perform its tasks and actually runs on the virtual machine as a thread inside the browser process . The program instructions of the applet will be converted by the virtual machine into instructions that can be executed by the operating system . The conversion process however is hidden from the applet that needs only to call services that are provided by the virtual machine. In turn the operating system implements the necessary routines from the hardware to execute the converted instructions.

The task of the applet in this example is to request the entry of a user name and password from the user of the workstation to allow the user access to resources provided at the web server from which the web page was obtained. To accomplish this task a user interface object such as a window with text entry boxes to receive a user name and password must be created in a graphical user interface. Application programs running on the operating system utilise APIs provided by the operating system to create such objects. In the case of Microsoft s 32 bit Windows Operating Systems the relevant APIs are known as Win32 and application programs that rely on these APIs are known as Win32 applications. Also as was noted above the operating system may also provide APIs that allow an application program to be notified of user interface events such as the creation of a window in the graphical user interface GUI .

However in recent Java graphical user interface GUI frameworks only the browser window that contains the top level Java window the applet frame window is a Win32 window with other user interface objects appearing to the operating system as a privately managed screen area. Thus where a window other than an applet frame window is created by the Java applet running inside the virtual machine data that is indicative of the state of a user interface the user interface state data except for title of the Window is not accessible to application programs including the SSO system . It is for this reason that current SSO systems are not suited to authenticating users to services that exist as processes running on a virtual machine.

To provide access to this user interface state data an Accessibility API also runs on the virtual machine . An example of an Accessibility API that is suitable for implementing the present invention is the Java Accessibility API that was designed by Sun Microsystems to allow third party applications and in particular those used by the disabled for example Braille readers speech synthesisers image enlargers etc to interact with Java applets. It has been surprisingly found that an Accessibility API provides access to crucial user interface state data that can be used by the SSO system to pass data from a process running outside the virtual machine external data into the applet.

The present invention works best with versions and above of Microsoft s Internet Explorer having the Javasoft Runtime Environment JRE plugin with Accessibility API installed. Accessibility should be appropriately enabled through the awt.properties and Accessibility.properties files residing on the appropriate JRE.

An SSO Hook written in the Java programming language also runs on the virtual machine with the applet and the Accessibility API . The SSO Hook can be registered with the Accessibility API to obtain state data relevant to the applet . Additionally the SSO Hook also includes instructions for forwarding external data from the SSO System to the applet by manipulating the state data obtained from the Accessibility API .

Also running on the virtual machine is a Java Native Interface JNI Component the functionality of which is detailed below.

Outside the virtual machine is a Win32 Component Object Model COM component known as a Browser Helper Object BHO again having functionality that is detailed further below.

A high level view of the operation of the components of the invention described in is given by reference to . At step the SSO System causes the SSO Hook to execute on the virtual machine as a background process. User Interface State Data is then received at step and examined by the SSO Hook . At step a test is carried out to determine whether the User Interface State Data defines a login opportunity related to the Java applet running on the virtual machine . In the event that a login opportunity is defined the relevant authentication credentials are retrieved from the database at step . These credentials are then applied to the Java applet in step to effect the authentication.

The initial stage of the process commences when the SSO Hook executes on the virtual machine and this stage is illustrated in more detail by reference to . At step the SSO Hook uses the Accessibility API to determine if there is any relevant user interface state data from the Java applet running on the virtual machine . Specifically the Accessibility API will notify the SSO Hook whenever a top level window being the main window in the window hierarchy for the applet is created by a Java applet. Although the creation of a top level Window is often discoverable using the standard Win32 hooking mechanisms only the title of the window is available to an application. This is not the case where an Accessibility API is used. Upon notification by the Accessibility API the SSO Hook examines various attributes of the top level window discovered by the Accessibility API including but not limited to its title class child windows and controls.

In the case of a Java Application Program as opposed to an applet it has been found that sufficient component data can be obtained from the state data to enable sign on data to be passed to the Application Program at this point. Where the process is an applet further steps need to be taken as is further described below.

A test is performed at step to determine whether the user interface state data received from the Accessibility API indicates that a top level window has been created by the applet. In the event that such a window has been created a job is created on an internal queue and a thread is triggered for that job at step . The BHO is then called at step followed by the JNI component at step . Subsequent to calling these components the SSO Hook waits at step to receive attribute data from the BHO and the JNI component . After receiving the attribute data at step the SSO Hook is ready to pass external data to the Java applet .

As just noted the BHO is called by the SSO Hook after the SSO Hook has detected the opening of a top level window by the applet . The processes carried out by the BHO are described in more detail by reference to . The BHO checks at step whether a new job has been placed on the queue by the SSO Hook . For each new job the BHO obtains attribute data about the relevant applet at step . The BHO hooks into the browser running the virtual machine to obtain the discovery information. The practice of hooking was discussed above and uses an interface supplied by the Microsoft Corporation that is documented in the Microsoft Developer Network Manuals the contents of which are hereby incorporated by reference.

The attribute data such hooked from the browser includes firstly a full URL that completely specifies the directory containing the main Class file of the applet . A correct URL of the applet is required to know which credentials from the database to apply to the applet .

Secondly the attribute data includes the Codebase attribute of the applet which is the name of the main. Class file located in the directory identified by the URL. Actual execution of the applet on the virtual machine begins with the main Class file.

Thirdly the attribute data includes a unique identifier allocated by the operating system of the frame window of the browser housing the applet which is also the parent window of the applet . In the case of a Windows Operating System this identifier is a variable of type HWND and is also know as a window handle . This data is particularly important where there is more than one browser running at once as it ensure that the user credentials from the database are forwarded to the correct window.

Fourthly the attribute data includes the exact time when the GUI objects created by the applet were loaded and been displayed.

A unique port number is calculated for the applet at step . The calculation of the unique port number relies on the fact that each of the applet BHO and SSO Hook are all identified by the same operating system process number. The port number is then used for communications between the BHO and SSO Hook. A Transmission Control Protocol TCP packet is formed at step that contains the attribute data obtained at step . The attribute data is forwarded at step to the port number created at step .

The TCP packet is forwarded back inside the virtual machine for use by the SSO Hook as described by reference to . After receiving the TCP packet the discovery packet from the BHO at step the SSO Hook parses the discovery packet at step to extract the attribute data contained within the discovery packet of the window or other GUI elements related to the Java applet . As noted above one of the items of attribute data is the window handle of the browser window that houses the top level Java window of the applet . Since there could be more than one browser running of the operating system at any one time the SSO Hook needs to ensure that the correct credentials from the database are being forwarded to the window. Hence at step the SSO Hook also determines the handle of the browser window housing the top level Java Window. The SSO Hook utilised the JNI Component to make this determination as is further described below.

The window handle determined by the SSO Hook is then matched at step against the window handle forwarded to the SSO Hook in the discovery packet. In the event of a match the SSO Hook will know that the window identified by the handle is the correct window to receive the authentication credentials. Thus at step the SSO Hook dispatches the discovery packet containing the attribute data to with window identified by the handle at step . As noted above with reference to the SSO Hook maintains an internal queue of jobs that represent discovered applets and it is to one of these pending jobs to which attribute data is forwarded.

The SSO Hook utilises the JNI Component to independently determine the handle of the browser window that is hosting the Java applet. This process is now explained with reference to . At step the JNI Component receives the window handle from the SSO Hook . At step a Java Window type is mapped into the window handle. This step enables the JNI Component to determine whether the window handle forwarded by the SSO Hook relates to the same window that hosts the top level Java window of the applet. At step the window handle is then forwarded back to the SSO Hook .

After the attribute data is dispatched to the applet the SSO Hook and the JNI Component are able to pass the authentication credentials to the applet and thereby affect sign on to the resource. This process is described by reference to . The SSO Hook at step obtains a component tree from the attribute data. The component tree is obtained by querying the Virtual Machine in a manner familiar to those skilled in the art. At step the component tree is manipulated by the SSO System Scripting Engine . Manipulation of the component tree of a graphical user interface window by an SSO Scripting Engine actually carries out the sign and thus enables access to the relevant resource. It is again a process familiar to those skilled in the art and will not be further detailed here.

Several benefits arise from the computer program code and method of the present invention in comparison to the programs and methods of the prior art. Principally the computer program code and method allow Single Sign On systems to be used to access resources provided processes running on a virtual machine. Additionally the computer program code and method allow communication with processes running on a virtual machine for other purposes for example for testing virtual machine processes.

It will be realised that the present invention has been described by reference to a preferred embodiment and that any alterations and modification that are apparent to those skilled in the art are included within the spirit and scope of the invention as defined solely by the claims appended hereto.

