---

title: System and method for replicating offline scheduling transactions from a client to a server
abstract: A facility for replicating offline scheduling transactions directed to a server is provided. The facility is implemented as a client-side application that integrates with and utilizes components of a store-and-forward application, which is operable to execute on a client to guarantee that transactions submitted on the client are replicated and carried out on a service hosted on a remote server even in light of intermittent connectivity between the client, the server, and networks. Records describing transactions intended remote service are written to an outbox of the store-and-forward application on the client. If the item is intended for the scheduling application, the facility is invoked by the store-and-forward application to send the item to the scheduling application. Otherwise, the facility returns the item to the outbox for processing by other components of the store-and-forward application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183547&OS=09183547&RS=09183547
owner: Microsoft Technology Licensing, LLC
number: 09183547
owner_city: Redmond
owner_country: US
publication_date: 20120522
---
The present application is a Continuation of U.S. patent application Ser. No. 11 004 315 filed Dec. 2 2004 and entitled SYSTEM AND METHOD FOR REPLICATING OFFLINE SCHEDULING TRANSACTIONS FROM A CLIENT TO A SERVER which is incorporated herein in its entirety by reference.

The described technology is directed generally to scheduling services and more particularly to replicating offline transactions to a remote service.

Efficient communication and collaboration among members of an organization is critical to the organization s success. Among organization members face to face meetings have been the traditional manner of communicating but with the organizations becoming increasing geographically dispersed these meetings often require travel on the part of attendees and thus are becoming increasingly cost prohibitive. The proliferation of computers and the advent of the Internet and in particular the maturing of the World Wide Web web has brought about a number of alternatives to the traditional face to face meeting.

Various scheduling applications such as web conferencing are available on the web and provide a less expensive alternative to the traditional face to face meeting. These scheduling applications are typically server applications that require network or web connectivity to access the provided services. For example a user at a client computer needs to be online i.e. there is an operable line of communication with the remote server typically via a network in order to access a scheduling application provided on a remote server. In the example of a web conferencing application which provide synchronous or live two way online meetings and presentations a user needs to be online to perform transactions on the remote web conferencing application such as schedule a web conference invite attendees change or cancel a scheduled web conference participate in a scheduled web conference etc.

Even though these scheduling applications provide increased efficiency and benefits for example by not requiring travel on the part of attendees these scheduling applications still require users to be online to transact with the application. Because current networks and servers do not provide 100 reliability there is no guarantee that users will always be online and able to transact with the remote server and the applications provided on the remote server. There may be instances where users transact with the remote application while offline i.e. an operable line of communication with the remote server does not exist. Moreover with the increasing use of wireless devices to access the scheduling applications the ability for the scheduling applications to support offline transactions becomes even more desirable.

Before describing the details of the current invention some terminology used herein is described. The term offline generally refers to the absence of an operable line of communication between a client and a remote server. For example when a mail client is offline this indicates an absence of an operable line of communication between the mail client and a remote mail server. Conversely the term online generally refers to the existence of an operable line of communication between the client and the remote server regardless of whether the operable line of communication is being utilized.

A software facility for replicating offline transactions directed to a scheduling service the facility is described. In some embodiments the facility is implemented as a client side application that integrates with and utilizes components of a store and forward application such as a mail delivery application on a client to guarantee that transactions submitted on the client can be carried out on a service hosted on a remote server even in light of intermittent connectivity between the client the server and networks. The guaranteed delivery feature provided by store and forward applications such as conventional mail delivery applications a mail outbox and a transport extensibility mechanism such as by way of example Messaging Application Programming Interface MAPI provide a reliable infrastructure for extending the benefits of guaranteed delivery to scheduling services such as collaboration applications scheduling applications calendaring applications planning applications etc.

A user utilizes a client device and transacts with a scheduling service hosted on a remote server by submitting requests directed to the scheduling service. Transactions submitted while the client device is online are sent to the scheduling service on the remote server through a connected network or multiple networks. Conversely transactions submitted while the client device is offline are stored on the client device and sent to the scheduling service when the client device becomes online.

For example records describing transactions intended for a scheduling application are written to an outbox of a mail delivery application on the client. The mail delivery application makes a determination of whether the client is online. If the mail delivery application determines that the client is online the mail delivery application invokes the facility to process the contents of the outbox. When invoked the facility iteratively retrieves items from the outbox and for each item determines whether the item is a transaction intended for the scheduling application. If the item is intended for the scheduling application the facility sends the item to the scheduling application. Otherwise if the item is not intended for the scheduling application the facility returns the item to the outbox for processing by for example another process such as a mail spooler component of the mail delivery application a transport or delivery component of another remote service or application etc.

Conversely if the mail delivery application on the client determines that the client is offline the mail delivery application does not invoke the facility. Rather the mail delivery application continues to place transactions made while the client is offline into the outbox while checking for online connectivity. Once the client becomes online the mail delivery component invokes the facility to process the contents of the outbox. Thus the mail delivery application ensures that the facility has a chance to process the contents of the outbox prior to the spooler component of the mail delivery application. In this manner the facility enables a user to submit offline transactions destined for remote services and ensures that the submitted offline transactions are replicated on the destined services when the client becomes online.

The various embodiments of the facility and its advantages are best understood by referring to of the drawings. The elements of the drawings are not necessarily to scale emphasis instead being placed upon clearly illustrating the principles of the invention. Throughout the drawings like numerals are used for like and corresponding parts of the various drawings.

The facility may be described in the general context of computer readable instructions such as program modules executed by computer systems or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Memory and persistent storage device are computer readable media that may contain instructions that implement the facility. It will be appreciated that memory and persistent storage may have various other contents in addition to the instructions that implement the facility.

It will be appreciated that computer systems may include one or more display devices for displaying program output such as video monitors or LCD panels and one or more input devices for receiving user input such as keyboards microphones or pointing devices such as a mouse. While computer systems configured as described above are typically used to support the operation of the facility it will be appreciated that the facility may be implemented using devices of various types and configurations and having various components.

In the discussion that follows various embodiments of facility are further described in conjunction with a variety of illustrative examples. It will be appreciated that the embodiments of facility may be used in circumstances that diverge significantly from these examples in various respects.

For example although various embodiments of the facility are described in conjunction with a scheduling service such as a meeting planner integrated into a mail delivery application the facility is not to be limited to only those services and applications. As such it will be appreciated that the facility including the various features can be adapted to work as a component of or in conjunction with applications that provide store and forward functionality.

In general terms store and forward application is a client application that comprises the facility and provides the infrastructure necessary to 1 enable a user to submit transactions while the client is offline 2 store the transactions during the time the client is offline and 3 send or transmit the stored transactions to an appropriate remote service when the client becomes online. Store and forward application generally functions to store transactions on the client determine the status of the network connectivity of the client and ensure that the facility has a chance to process the transactions prior to processing by other components of store and forward application . As depicted store and forward application comprises a scheduling service user interface an outbox an inbox a scheduling service delivery component and a store and forward delivery component .

Scheduling service user interface generally functions to provide an interface through which a user can transact with scheduling service . Scheduling service user interface may be implemented as one or more graphical user interfaces that enable a user to submit transactions for a remote service. Upon receiving a transaction scheduling service user interface appropriately identifies the transaction as a transaction intended for the remote service and places the transaction in outbox for further processing. In one embodiment scheduling service user interface identifies the transaction by impliedly addressing the intended remote service for example as an implied recipient of the transaction. For example if the remote service is a meeting scheduling application scheduling service user interface may address the remote service as an implied attendee of a meeting.

Outbox and inbox generally function as a repository for the items that are processed by store and forward application . By way of example in a mail delivery application such as Microsoft Outlook outbox and inbox are designated as the folders that messages are sent from and delivered to respectively. Outbox and inbox are folders that are used to hold messages while performing the call sequences i.e. logic to send and receive messages.

In general terms scheduling service delivery component comprises the facility. As such scheduling service delivery component generally functions to deliver transactions to a corresponding remote service. Store and forward application invokes scheduling service delivery component prior to invoking its own transport or delivery component upon determining that the client is online and there is an item to process in outbox . By way of example if store and forward application is a mail delivery application store and forward application invokes scheduling service delivery component prior to invoking its mail spooler which functions to deliver the messages from outbox .

In some embodiments when invoked scheduling service delivery component retrieves an item such as a message from outbox checks the item to determine whether the item is intended for processing by its corresponding service and either sends the item to its corresponding service for processing or returns the item back into outbox . Scheduling service delivery component may also place an item or multiple items in inbox to inform the user of the results of the processing of the transaction.

In various embodiments depending on the functionality of the scheduling service scheduling service delivery component may need to place the item retrieved from outbox back into outbox subsequent to processing by the remote service. By way of example the remote service may be a meeting application that is integrated into a mail delivery application and the meeting application enables a user to schedule modify change meetings by specifying a date and time of a meeting or otherwise identifying the meeting and one or more attendees or requested attendees. In this example store and forward application may create a meeting item addressed to the requested attendees and place the meeting item in outbox . Store and forward application may also address a remote meeting service corresponding to the meeting application as an implied attendee of this meeting. Subsequently scheduling service delivery component that corresponds to the remote meeting service retrieves the meeting item from outbox determines that the meeting item is for processing by its corresponding remote meeting service and sends the meeting item to the remote meeting service for processing. The remote meeting service accordingly processes the meeting item and sends a response which indicates the results of the processing to scheduling service delivery component . Based on the received response scheduling service delivery component may place the meeting item back in outbox for processing by store and forward application e.g. the mail delivery application. For example the mail delivery application may then send the meeting item to each of the requested attendees.

A property associated with each item in outbox may indicate whether the item is intended for processing by scheduling service delivery component . In some embodiments for example where store and forward application is a mail delivery application addressing of the remote service as an implied recipient of the item may serve as an indication that the item is for processing by an appropriate scheduling service delivery component .

In other embodiments store and forward application may retrieve the item from outbox check to determine if the item is to be first processed by scheduling service delivery component and if it is to be first processed by scheduling service delivery component pass the item to scheduling service delivery component for processing. For example store and forward application may maintain a list comprising of a type or multiple types of addresses that are appropriate for processing by scheduling service delivery component . Here scheduling service delivery component only receives items from store and forward application that are appropriate for processing and does not need to bother with items that are not intended for processing by scheduling service delivery component .

One skilled in the art will appreciate that store and forward application may comprise multiple scheduling service delivery components . For example store and forward application may function as an interface to a plurality of remote services in addition to the store and forward service. In this instance store and forward application may comprise a distinct delivery component for each supported service. Here store and forward application may invoke each of the delivery components according to a predetermined sequence prior to invoking its own transport or delivery component.

Store and forward delivery component generally functions as a transport for store and forward application . For example in the example where store and forward application is a mail delivery application store and forward delivery component functions as a mail spooler.

In general terms scheduling service is the remote scheduling service to which the facility ensures delivery and replication of the offline transactions made on the client when the client becomes online. Scheduling service may be any application whose operations are required to be carried out in a coherent manner. Stated anther way scheduling service can be any service that requires operations to be in order such as scheduling applications in general.

Network is a communications link that facilitates the transfer of electronic content between for example the attached computers. In one embodiment network includes the Internet. It will be appreciated that network may be comprised of one or more other types of networks such as a local area network a wide area network a point to point dial up connection and the like. It will also be appreciated that network may not be present. For example store and forward application and scheduling service may both reside on the same computing system and communicate via communication mechanisms such as interprocess communication remote function call internal communication buses etc. typically supported on the computing system.

The aforementioned aspects of the facility and store and forward application which hosts the facility are only illustrative and are not intended to suggest any limitation as to the implementation of the illustrated components and or the scope of use or functionality of the facility or store and forward application . For example in some embodiments scheduling service user interface need not be implemented as part of or integral to store and forward application but may be implemented separate of or outside store and forward application for example as a client application and user interface which receives as input and passes to store and forward application transactions intended for a remote service.

If at step host client store and forward application determines that it is connected i.e. it is online then at step host client store and forward application invokes scheduling service delivery component . For each message in outbox scheduling service delivery component performs steps to . At step scheduling service delivery component retrieves the next message form outbox and checks the message to determine if it is a scheduling operation e.g. a scheduling transaction intended for processing by its corresponding remote scheduling service. If the message is not a scheduling operation then at step scheduling service delivery component leaves the message in or returns the message to outbox and processes the next message in outbox at step .

Otherwise if at step scheduling service delivery component determines that the message is a scheduling operation intended for processing by its corresponding remote scheduling service then at step scheduling service delivery component sends the message to the scheduling service for processing. At step scheduling service delivery component checks to determine whether the scheduling operation is successfully processed by the scheduling service. This may be indicated by a response message sent by the scheduling service to scheduling service delivery component . If scheduling service delivery component determines that the scheduling operation is successfully processed then scheduling service delivery component processes the next message in outbox at step .

Otherwise if at step scheduling service delivery component determines that the scheduling operation is unsuccessful then at step scheduling service delivery component performs any necessary error processing. In some embodiments scheduling service delivery component may place a message in inbox informing of the resulting error and or error condition. In other embodiments depending on the encountered error and or error condition scheduling service delivery component may pop e.g. display an error box informing the user of the encountered error and help the user fix the problem. Subsequent to performing the error processing scheduling service delivery component processes the next message in outbox at step .

One skilled in the art will appreciate that for this and other processes and methods disclosed herein the functions performed in the processes and methods may be implemented in differing order. Furthermore the outlined steps are only exemplary and some of the steps may be optional combined with fewer steps or expanded into additional steps without detracting from the essence of the invention.

In order to further describe the implementation and operation of the facility it is hereafter discussed in the context of an example whose aspects are shown in . In the example store and forward application is a mail application that provides an integrated calendaring application for a remote calendaring service. The calendaring application provides meeting request invitation update and cancellation mechanisms which are used by its users to create or schedule meetings to participants modify scheduled meetings or the list of participants and cancel scheduled meetings. Further these mechanisms are used to determine which changes should be made to the remote calendaring service and to queue those changes for later processing when store and forward application is offline.

When a user utilizes one of the mechanisms to create modify or change a meeting a corresponding message which is addressed to one or more recipients is placed in an outbox for delivery to the addressed recipients by the mail application. In this manner the participants of a meeting are notified of a creation of a meeting and their requested participation in the meeting or of modifications to including cancellations of scheduled meetings. In this example it is assumed that either the calendaring application or the mail application provides an indication that these messages are to be first processed by the remote calendaring service prior to processing by the mail application e.g. prior to delivery of the message to the addressed recipients. For example the remote calendaring service may be included as an implied recipient of the message which can serve as an indication to the facility to send the message to the remote calendaring service.

If at step the facility determines that the request to create a new meeting was unsuccessful on the remote calendaring service then at step the facility checks to determine whether the remote calendaring service was partially successful in processing the request to create the new meeting. For example the remote calendaring service may have booked or scheduled the requested meeting and determined that the meeting requires certain access rights which may not be possessed by one or more of the invitees to the meeting. If the facility determines that the request was only partially successful then at step the facility creates a non delivery receipt message in the inbox queue of the mail application. The non delivery receipt message provides details regarding the error.

If at step the facility determines that the remote calendaring service was not even partially successful in processing the request to create the new meeting then at step the facility processes the rejection. Rejection processing is further discussed below in conjunction with method .

If at step the facility determines that the request to modify the scheduled meeting was unsuccessful on the remote calendaring service then at step the facility checks to determine whether this was the result of a version conflict and further whether the version conflict was resolved in favor of the client i.e. resolved in favor of the request to modify. If the facility determines that the version conflict was resolved in favor of the client then at step the facility sets the version number on the client to match the version number maintained by the service and returns to step to send the request to modify the scheduled meeting to the remote calendaring service. Version conflict processing is further discussed below in conjunction with method . If at step the facility determines that there was no version conflict or that there was a version conflict but the version conflict was not resolved in favor of the client then at step the facility processes the rejection.

If at step the facility determines that the request to modify the scheduled meeting was unsuccessful on the remote calendaring service then at step the facility checks to determine whether this was the result of a version conflict and further whether the version conflict was resolved in favor of the client i.e. resolved in favor of the request to cancel. If the facility determines that the version conflict was resolved in favor of the client then at step the facility sets the version number on the client to match the version number maintained by the service and returns to step to send the request to cancel the scheduled meeting to the remote calendaring service. Version conflict processing is further discussed below in conjunction with method . If at step the facility determines that there was no version conflict or that there was a version conflict but the version conflict was not resolved in favor of the client then at step the facility processes the rejection.

At step the remote calendaring service checks to determine whether the difference between the server modification time and the client modification time i.e. the modification time associated with the client request are different by at least some predetermined value i.e. number of minutes. If the difference between the times is not within the predetermined number of minutes then at step the calendaring service resolves the conflict in favor of the most recent modification time. Alternatively if the difference between the times is within the predetermined number of minutes then at step the calendaring service resolves the conflict in favor of the service. Within the predetermined number of minutes there is a risk that the calendaring service may make the wrong decision because of clock drift thus within this window the calendaring service resolves the conflict in favor of the service over the client.

From the foregoing it will be appreciated that embodiments of the invention have been described herein for purposes of illustration but that various modifications may be made without deviating from the spirit and scope of the invention. Accordingly the invention is not limited except in accordance with elements explicitly recited in the appended claims.

