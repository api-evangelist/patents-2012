---

title: Discovering boot order sequence of servers belonging to an application
abstract: A survey tool for use in a Recover to Cloud (R2C) replication service environment that determines configuration information automatically (such as through SNMP messaging or custom APIs) and stores it in a survey database. A Virtual Data Center (VDC) representation is then instantiated from the survey database, with the VDC being a virtual replica of the production environment including dormant Virtual Machine (VM) definition files, applications, storage requirements, VLANs firewalls, and the like. The survey tool determines the order in which the replicas are brought on line to ensure orderly recovery, by determining the order in which each machine makes requests for connections to other machines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09021294&OS=09021294&RS=09021294
owner: Sungard Availability Services LP
number: 09021294
owner_city: Wayne
owner_country: US
publication_date: 20120316
---
Replication of data processing systems to maintain operational continuity is now required almost everywhere. The costs incurred during downtime when information technology equipment and services are not available can be significant and sometimes even cause an enterprise to halt operations completely. With replication aspects of data processing machines that may change rapidly over time such as their program and data files physical volumes file systems etc. are duplicated on a continuous basis. Replication may be used for many purposes such as assuring data availability upon equipment failure site disaster recovery or planned maintenance operations.

Replication may be directed to either the physical or virtual processing environment and or different abstraction levels. For example one may undertake to replicate each physical machine exactly as it exists at a given time. However replication processes may also be architected along virtual data processing lines with corresponding virtual replication processes with the end result being to remove the physical boundaries and limitations associated with particular physical machines.

Use of a replication service as provided by a remote or hosted external service provider can have numerous advantages. Replication services can provide continuous availability and failover capabilities that are more cost effective than an approach which has the data center operator owning operating and maintaining a complete suite of duplicate machines at its own data center. With such replication services physical or virtual machine infrastructure is replicated at a remote and secure data center.

In the case of replication services to virtual target a virtual disk file containing the processor type and configuration operating system data and applications for each data processor in the production environment is created and retained in a dormant state. In the event of a disaster the virtual disk file is moved to a production mode within a Virtual Data Center VDC environment at the remote and secure data center. Applications and data can then be accessed on the remote VDC enabling the service customer to continue operating from the cloud while recovering from a disaster.

From the perspective of the service customer the replication service provider thus offers a Recover to Cloud R2C service that is provided much like an on demand utility much like the electricity grid over a network typically the Internet . This enables a data center operator to replicate critical servers and applications in his production environment to the cloud with the VDC environment being activated to bring up the corresponding virtual machines and applications via the cloud in the event of a disaster.

One of the key aspects of recovering an application is understanding what constitutes an application. For example What are the servers that belong to an application What are the various networks and subnets on which these servers reside Another important aspect is to determine the order in which these servers should be recovered. For example in a typical three tiered application it is usually necessary for the database servers to be recovered first then the app servers and then the web servers. The discovery of the various components of an application and the possible order of recovery of those servers is the focus area of this patent.

Briefly the present disclosure is directed to a survey tool for use a data processing environment such as a Recover to Cloud R2C replication service. The survey tool automatically determines configuration information for a production environment. The configuration information may identify server s applications storage security and network device information. The configuration information is preferably determined automatically such as through Simple Network Management Protocol SNMP messaging or custom Application Programming Interfaces APIs and stored in a configuration survey database. The automatically discovered information may be augmented with manually entered information such as server names .

A Virtual Data Center VDC representation of the production environment is then instantiated from the survey database. The VDC is a virtual replica of the production environment and may include dormant Virtual Machine VM definition files applications storage requirements and the like. Changes to the production environment are continuously written to the VDC replica s . When a disaster occurs in the production environment the dormant VMs are moved to active status and the replication service thus on line a system on line accessible to the customer in the cloud that replicates the production environment.

In a usual scenario the customer s production environment is discovered to have multiple physical and virtual machines. A typical environment could have multiple applications and there could be multiple servers within each application. The survey tool discovers the servers that belong to an application.

The survey tool also discovers a proper order in which the servers belonging to an application should be recovered. This order would be then preserved and used for activating dormant VM replicas for access in the cloud in several ways. One way is to analyze machine in the production environment specifically looking for the order in which each machine makes requests for connections to other physical or virtual machines. The requests for connections can be detecting using agents that are deployed in the production environment. The agents may in turn spawn other agents to any discovered machines with the spawning process tree limited by specification of one or more subnets known to contain the servers of interest.

This connection information is used to build a dependency tree that then indicates which machines must be brought on line and in which order first when the VDC goes live. This dependency information can also be further refined in other ways such as by looking at up time timestamps in server logs in the production environment.

An application will require more than one server for proper operation. The survey tool described herein automates discovery of various servers that could belong to an application and the order in which those servers could be recovered.

In one embodiment the server discovery tool is a process initiates by identifying one or more server s that host the database s for the application. One such tool for example can be an agent process referred to as a database agent DBA that is deployed on one or more database server s . The DBA monitors the servers that initiate connections to the database server recording information to identify those other servers such as each server s hostname IP address whether the connection was persistent or temporary the number of connections in a given time frame and so forth .

The DBA may also attempt to identify the type of Operating System OS of each connecting server such as a Windows or non Windows machine. This can be done by using the Windows Management Instrumentation WMI protocol or by using a Secure Shell ssh protocol.

The DBA then spawns another agent called a BOT agent BOTA on other servers that initiated connection to the database server. The BOTAs are customized depending on the type of OS determined for the other server e.g. Windows BOTAs are deployed on Windows machines Linux BOTAs on Linux machines and so forth .

BOTAs may then be further spawned to develop a tree of server dependencies. In particular as the other server s detect connection requests from still other servers this process of logging connections and spawning BOTAs continues.

The spawning of BOTAs is preferably limited by having an administrative user specify one or more subnets addresses for which the servers of interest are known to live and therefore the extent to which BOTA spawning can stop.

The process is allowed to run for some length of time such as a week to ensure that all possible servers associated with an application have attempted connections.

A cleanup process may involve the root level DBA signaling its first level of deployed BOTA s that the server discovery process is ending. This can in turn cause the first level of BOTAs in the tree to inform the next level of BOTAs and so forth down to leaf node BOTAs. Once a BOTA leaf is reached it reports its list of observed connections up to its parent and the parent BOTA issues an uninstall command to the leaf BOTA. The parent eventually itself becomes a leaf and this process repeats until all BOTAs are cleaned and the tree of connections reported to the DBA.

The DBA itself may not be uninstalled until an administrative user is presented with a display of the overall tree showing all of the discovered servers such as with database server as the root and the servers interacting with each other and the direction of interaction only those servers present in the subnets which user specified are displayed in the tree.

Once discovery of the servers belonging to an application is complete the user can now choose which server s are actually critical for the application recovery. Those servers would typically considered for replication and high availability. To determine an order of recovery of the critical servers the list of connections made to each one is considered as follows.

If two servers A and B have never initiated connections to each other then they are not dependent on each other for recovery order.

If however a Server A has always initiated a connection to Server B and B has never initiated a connection to A then Server B needs to be recovered first.

Finally if Servers A and B each initiate connections to one another boot order is considered to determine which server needs to be recovered first. For example if the system up time of Server B is smaller than the up time for Server A then Server A most probably needs to boot first and then Server B.

There is a possibility of cyclic dependency where the logic could deduce that Server A depends on B B depends on C and C depends on A. In these situations the server that has a database installed is assigned a higher weight of being the first to be recovered. A greater weight would be provided to the server that had the longest system up time. The weights of both the presence of database and the weigh of system up time could also be combined to determine the order of recovery.

Using the above logic for pair of servers while traversing the tree one can therefore discover the correct order in which servers need to be recovered.

As shown a production side environment that is the customer s side from the perspective of a replication service provider includes a number of data processing machines such as servers . . . . The production servers may be physical machines or virtual machines VMs . An administrator node initiates the survey tool and provides access to certain functions as described below in more detail.

The production servers . . . may implement any sort of data processing function such as a web server database server application server media server etc. the specific end use of the servers is typically not important. An example production server is a database server that has a database application program operating system and other data processor resources such as memory local storage network connections etc. An example VM may include an application memory data and other resources .

More specifically the production servers . . . are connected to a wide area network WAN connection such as provided by the Internet a private network or other network to a replication service environment that provides one or more Virtual Data Centers VDCs . The service customer does not really care where or how the VDCs are implemented and so from the customer s perspective they are located at the service provider environment and accessible in the network cloud somewhere to provide a Recover to Cloud R2C service.

In such a virtualized computing environment with virtual machines operating in a cloud infrastructure multiple computation stacks including operating system middleware and applications can operate together in a single server or set of servers. The cloud system s are therefore virtualized environments where virtual machines can elastically and dynamically scale to match the load or performance demands where access to the cloud service is through a public network and where the number and capability of virtual machines can be measured by the cloud provider and made available to the specifications of the customer using the cloud according to Service Level Agreements or other contractual arrangements.

In a typical scenario an example VDC includes a dedicated virtual physical firewall some specific VLANs one or more dedicated storage devices that may be high capacity storage network devices one or more dedicated live virtual machines and a number of dormant virtual machines VMs . . . . An example dormant VM includes at least an application data and an operating system however other elements may also be defined. The dormant VMs may be in various file formats as specified depending on the type of virtual infrastructure utilized such as VMware Virtual Machine Disk VMDK files Amazon AMI files Microsoft VHD files or other suitable VM formats.

At least one of the VDCs is a failover environment . It too has a physical machine virtual machine definition files virtual firewall s and storage and other data processing devices. At a time of disaster ATOD the dormant VM definition files are transferred to one or more on demand active physical machines or active virtual machines . . . in the failover environment forming part of the replication service environment . The failover environment is also accessible to the customer via the cloud preferably through a secure network connection such as may be provided by firewalls or VLANs .

The specific mechanism s for replication and or disaster recovery are not of particular importance to the present disclosure which is focused on how to determine an order in which the servers in the failover environment should be restarted in the event of a failover in the production environment. It should also be understood that there may be a number of additional data processors and other elements of a commercial replication service such as recovery systems storage systems monitoring and management tools that are not shown in detail in which are not needed to be specified in detail to understand the present embodiments.

As mentioned above an example VM definition file specifies application programs data and an operating system. However additional elements are required for each replicated dormant VM to be activated in the failover environment . These may include specific storage elements network elements security elements and other elements that correspond to infrastructure and or hardware that are necessary to actively operate the VMs such as VLAN IDs firewalls port groups in a VMware based environment or other resources necessary to implement each machine needed in failover environment .

In the event of a disaster the dormant VM files specified by the respective VM definition files are promoted to live VMs and access is provided to the customer in a replicated failover environment via secure connections via the cloud . For these activated VMs the service provider provides public IP addresses for those VMs which are public internet facing and may also provide multiple VLAN IDs for the failed over VMs and may also provide another dedicated resources such as a virtual firewall to support for example VLANs behind which the failed over virtual machines exist.

In order to determine the attributes of the VDC to run in the failover environment a survey tool is run on administrative node and automatically discovers at least some configuration information for the elements of the production environment . The configuration information may include identification of server s applications storage security and network device information for production environment . The configuration information is preferably determined automatically such as through Simple Network Management Protocol SNMP messaging or custom Application Programming Interfaces APIs and stored in a configuration survey database on administrative node . The information automatically discovered may be augmented with manually entered information such as server names .

However even if the configuration of the various VMs and physical machines can be determined it is necessary to ascertain an order in which such corresponding replica machines should be brought on line in the failover environment . While this can be determined by having a user specify the same some administrative users are not sophisticated enough to know what the order should be or may make errors. It is therefore desirable if the order of activation can be determined at least semi automatically.

Turning attention now to the survey tool process for determining server dependencies to recover a specific type of application for example a database application will be described in more detail. It should be understood that an application being recovered typically will depend on more than one server . . . in the production environment but not all of them. Thus there are two important elements of application recovery.

Second what is the order in which those servers should be recovered and brought on line in the failover environment 

The processes of automates discovery of the various servers that could possibly belong to an application and the order in which those servers could possibly be recovered. Those potential recovery scenarios are then presented to the customer for verification and development of a specific recovery plan to be used for failover environment .

Referring to more particularly the customer has access to a administrator management node and initiates the survey tool . The survey tool at a first step determines one or more servers that the administrative user already knows are accessed by the database application. This information can be provided through input from administrative user at management node or collected in other ways. In the example of the administrative user may know that his critical application of interest uses the database server but is not sure whether any other servers are needed to recover the database application.

In an optional step subnet identifies for the various servers known to belong to the application are identified and used as will be understood below. This step is used later to limit processing of the automatic discovery of a server dependency tree. Here the user may specify subnet addresses for machines located on a VLAN in the production environment .

In a next step a database agent DBA is deployed by the survey tool on the particular server being examined database server . The DBA executes on database server and monitors which other servers initiate connections to the database server . These other servers may be servers within the production environment such as any or all of servers . . . . Thus for example in state the DBA running on the database server keeps track of specific information pertaining to other servers that initiate connects to the database server. This specific information may include a hostname Internet Protocol IP address whether the connection was a persistent or temporary connection number of connections made in a given time frame and other connection parameters.

In state the DBA for example then attempts to identify if the other server making a connection to the database server is a windows or non Windows machine. To do so the DBA may use a protocol such as Windows Management Instrumentation WMI for discovering if the other server is a Windows based machine.

In state if the other server is not a Windows machine then the DBA can use other protocols such as Secure Shell SSH to connect to the non Windows server to determine for example if it is a Linux Solaris AIX HP or other server type.

In state having determined the type of other server the DBA may then deploy another agent called a bot agent BOTA herein to the other server e.g. server that initiated the connection to the database server . The nature of the BOTA deployed will vary depending upon the type of OS that the other server is using.

In a preferred embodiment the BOTA will only be deployed if the other server is within subnet s identified in state .

In state the process now repeats deploying a new BOTA on each newly discovered server. For example the BOTA running on the other server monitors its own connections keeping track of still other servers that initiate connections e.g. in states etc. . This information maintained may again include host name IP address whether the connection is persistent or temporary the number of connections in a given time frame and other connection parameters. The subnet information collected can also limit the iterative spiraling out of BOTA s to yet still other servers so that when any newly discovered server is outside of the subnet address ranges specified then a new BOTA will not be deployed in state .

The processes in states and are allowed to run for a relatively long period of time such as a week to ensure that all servers needed to support the application have been discovered.

Eventually in state sufficient time has passed for the DBA and all BOTAs that it is spawned to discover all other servers that connect to DB server .

In state the DBA signals the first highest or parent level BOTA that it is to initiate clean up and cease logging new server connections. The first level BOTA then informs state its next level BOTAs until eventually the bottom level or leaf node BOTA signals its corresponding parent that it is a leaf. The leaf BOTA then reports its collected server connection information to the parent and terminates. Its respective parent BOTA can issue an uninstall in state of the leaf BOTA.

The parent BOTA itself then eventually becomes a leaf reporting the leaf nodes that it discovered the connections that it has collected from the leaf nodes and its own connections. This process repeats states etc. until all BOTA s are eventually terminated and all connection information is reported to the DBA .

At this point in state a report is made back to the administrative node by the DBA that has completed its task.

This report may preferably result in a visual representation of the discovered structure of server connections such as may be represented in . In this particular example a server A and server E are child nodes of DBA root server with server A have its own respective leaf node servers B C and H . Server E has a child server F which in turn has child sever G which in turn has leaf node .

The user interface may therefore allow the user to visualize all the discovered servers with the database as the root and all the servers that interacted with another and the direction of interaction. The display is of course limited to those servers in the tree which were present in the subnets that the user originally specified. The discovered tree can typically be stored in administrative mode for future reference

For example when the BOTA processes are being installed the tree is traversed until a leaf node such as node is reached. The BOTA running in node reports itself and then when finished signals its parent node to uninstall itself. The parent node uninstalls the BOTA from leaf . The parent node either before or after handing node also discovers leaf and waits for leaf and then uninstalls its corresponding BOTA . Once node has uninstalled all of its leaf nodes it reports to its own parent DBA root node which in turn uninstalls node . This process repeats until only the DBA remains. The user then typically uninstalls the DBA from node .

While reviewing the graphical tree of the administrative user reaches an optional state see where he selects which servers in the tree are actually critical enough to consider for replication and R2C services. Please note that even though the DBA agent is uninstalled the collected tree information will still remain in a file on administrative node . This way the data center administrator can review the tree of and can see the tree whenever he wants to even though the BOTA clean up process was done a while ago.

The result in is a table linked list or other data structure listing the critical servers that have been discovered which belong to the database application including an entry representing the root database server and other entries . . . representing all other servers to which the root server connects any other servers to which those other servers connect which servers are leaf nodes and so on down the tree of servers and for which the user has decided such servers are critical enough to be included in the replication processes. Server A is an example entry in the table of . It may include a host name as well as IP address uptime number of connections whether the connection is permanent or temporary if a database is present and so forth. The other server entries in the table may include similar information in the table entries about the other servers servers B C D etc. but are not shown in detail in for the sake of clarity.

The next task for survey tool is to determine an order in which the servers now need to be recovered by traversing the list of . is sequence of operations that can be automatically executed to analyze the server table of . Briefly the list is analyzed to determine if no communication was made between server pairs unidirectional communication initiation was or bi directional communication was initiated.

In this example embodiment a first state is entered for an example critical server such as Server A in the table of . In state if no communication was made between Server A and another given server such as Server B it is concluded that these two servers are not dependent on one another for recovery order. It is then recorded that Server A and Server B can therefore be recovered in any order with respect to one another.

However if in state it is determined that Server A initiates a connection to Server B but that Server B never initiated a connection to Server A then in state it is recorded that Server B will need to be placed in a server order recovery table ahead of Server A somewhere.

Finally in state where Server A initiates connections to Server B and Server B also initiates connections to Server A then the recovery order process takes additional steps. In particular a boot order must be determined so that one can suggest which server needs to be recovered first. This can be determined by consulting a system up time for each of Server A and Server B. If for example the system up time of Server A is smaller than the uptime of Server B then most probably Server B needs to be booted first.

There is a possibility of cyclic dependency where the logic could deduce that Server A depends on B B depends on C and C depends on A. In these situations the server that has a database installed would be assigned a higher priority or weight of being the first to be recovered. A greater weight would be provided to server that had the longer system up time. The weights of both the presence of database and the weigh of system up time could also be combined to calculate the order of recovery.

Eventually a server order recover table is thereby determined as shown in with a particular sequence of servers and their dependencies. This server recovery table is then consulted in a disaster recovery or disaster test situation to determine the order in which the replicated servers in the VDC must be brought online and go live in the recovery environment of .

The server order recovery table not only specifies a list of Servers H I and J have been given order 0 meaning they are not dependent on other servers and thus can be recovered at any time. So for example in a system with ten total servers A J an example server named Server A must be recovered first. Servers B C and D are all of order 2 so they may not be recovered and recovered together. Similarly Servers E F and G are order 3 and can be recovered together but only after Servers B C and D are recovered.

The teachings of all patents published applications and references cited herein are incorporated by reference in their entirety.

It should be understood that the example embodiments described above may be implemented in many different ways. In some instances the various data processors described herein may each be implemented by a physical or virtual general purpose computer having a central processor memory disk or other mass storage communication interface s input output I O device s and other peripherals. The general purpose computer is transformed into the processors and executes the processes described above for example by loading software instructions into the processor and then causing execution of the instructions to carry out the functions described.

As is known in the art such a computer may contain a system bus where a bus is a set of hardware lines used for data transfer among the components of a computer or processing system. The bus or busses are essentially shared conduit s that connect different elements of the computer system e.g. processor disk storage memory input output ports network ports etc. that enables the transfer of information between the elements. One or more central processor units are attached to the system bus and provide for the execution of computer instructions. Also attached to system bus are typically I O device interfaces for connecting various input and output devices e.g. keyboard mouse displays printers speakers etc. to the computer. Network interface s allow the computer to connect to various other devices attached to a network. Memory provides volatile storage for computer software instructions and data used to implement an embodiment. Disk or other mass storage provides non volatile storage for computer software instructions and data used to implement for example the various procedures described herein.

Embodiments may therefore typically be implemented in hardware firmware software or any combination thereof.

The computers that execute the processes described above may be deployed in a cloud computing arrangement that makes available one or more physical and or virtual data processing machines via a convenient on demand network access model to a shared pool of configurable computing resources e.g. networks servers storage applications and services that can be rapidly provisioned and released with minimal management effort or service provider interaction. Such cloud computing deployments are relevant and typically preferred as they allow multiple users to access computing resources as part of a shared marketplace. By aggregating demand from multiple users in central locations cloud computing environments can be built in data centers that use the best and newest technology located in the sustainable and or centralized locations and designed to achieve the greatest per unit efficiency possible.

In certain embodiments the procedures devices and processes described herein are a computer program product including a computer readable medium e.g. a removable storage medium such as one or more DVD ROM s CD ROM s diskettes tapes etc. that provides at least a portion of the software instructions for the system. Such a computer program product can be installed by any suitable software installation procedure as is well known in the art. In another embodiment at least a portion of the software instructions may also be downloaded over a cable communication and or wireless connection.

Embodiments may also be implemented as instructions stored on a non transient machine readable medium which may be read and executed by one or more procedures. A non transient machine readable medium may include any mechanism for storing or transmitting information in a form readable by a machine e.g. a computing device . For example a non transient machine readable medium may include read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices and others.

Furthermore firmware software routines or instructions may be described herein as performing certain actions and or functions. However it should be appreciated that such descriptions contained herein are merely for convenience and that such actions in fact result from computing devices processors controllers or other devices executing the firmware software routines instructions etc.

It also should be understood that the block and network diagrams may include more or fewer elements be arranged differently or be represented differently. But it further should be understood that certain implementations may dictate the block and network diagrams and the number of block and network diagrams illustrating the execution of the embodiments be implemented in a particular way.

Accordingly further embodiments may also be implemented in a variety of computer architectures physical virtual cloud computers and or some combination thereof and thus the computer systems described herein are intended for purposes of illustration only and not as a limitation of the embodiments.

While this invention has been particularly shown and described with references to example embodiments thereof it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention encompassed by the appended claims.

