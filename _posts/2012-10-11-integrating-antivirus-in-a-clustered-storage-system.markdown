---

title: Integrating anti-virus in a clustered storage system
abstract: A method and system for integrating anti-virus in a clustered storage system. A clustered storage system provides anti-virus scanning with third-party software components. Specifically, the clustered storage system receives a request for data from a client, identifies the data requires scanning and scans the data for viruses with third party software components that have been previously provided by any one of a number of third party software vendors.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09208291&OS=09208291&RS=09208291
owner: NetApp, Inc.
number: 09208291
owner_city: Sunnyvale
owner_country: US
publication_date: 20121011
---
This application is a continuation application that claims the priority benefit of U.S. application Ser. No. 12 113 074 filed Apr. 30 2008 which application is incorporated herein by reference in its entirety.

The present disclosure relates generally to storage systems and more specifically to integrating anti virus in a clustered storage system.

A clustered storage system typically provides data storage and retrieving services. For example a client may request access to data that is stored on the clustered storage system and the clustered storage system may respond to the request by retrieving the data for the client. In addition a clustered storage system may concurrently provide others services that may be desired by the client.

An aspect of the present disclosure overcomes the disadvantages of the prior art by providing a technique whereby data is scanned for viruses on a clustered storage system with third party software components. Specifically the clustered storage system scans the data for viruses with third party software components that are provided by a third party vendor. As a result the producers of the cluster storage system are not required to continually develop software components to combat new viral threats but may rely on any one of a number of third party vendors that specialize in monitoring the emergence of new viral threats and developing such software components to effectively counter such threats.

In general the word virus refers to a program or piece of code that is loaded onto a computer without the computer user s knowledge and runs against their wishes. Most viruses can also replicate themselves and the more dangerous types of viruses are capable of transmitting themselves across networks and bypassing security systems. A virus can also include any malicious code program or other internal component including but not limited to a computer virus computer worm computer time bomb Trojan horse or component with similar effect that could damage destroy alter or take control of software firmware or hardware or could in any manner reveal damage destroy or alter any data or other information accessed through or processed by the computer in any manner. Accordingly the above described virus represent an imminent danger to clients that utilize the data storage and retrieval services provided by a clustered storage system.

Merely for example a clustered storage system may provide anti virus scanning with third party software components as follows. The clustered storage system receives a request for data from a client. The request may be to read data write data or to perform another operation. Further the request may be for a file or a block of data. Next the clustered storage system identifies whether the request for data includes data that should be scanned. For example the clustered storage system may use a policy that is associated with the data or a persistently stored status to identify whether the data is scanned for viruses. If so determined the clustered storage system scans the data for viruses with third party software components that have been previously provided any one of a number of third party software vendors. If the data is free of viruses the clustered storage system communicates the data to the client. Otherwise the clustered storage system attempts to apply remedial actions to the infected file. For example the clustered storage system may attempt to repair the file by removing the virus. If remedial action successfully removes the virus the clustered storage system communicates the requested data to the client. Otherwise the clustered storage system communicates an access denied message to the client.

The advantages of the present technique are realized in a reduction of cost and increased performance. The present technique reduces cost by providing a platform whereby third party software vendors may compete to provide the third party software components for the scanning of viruses. Specifically the clustered storage system is free to acquire the third party components from any one of a number of third party software vendors thereby creating effective competition between third party software vendors. The present technique further increases the performance of the producers of the clustered storage system who may apply their engineering resources to subject matter which they have specialized knowledge the storage and retrieval of data.

The present disclosure provides a technique for integrating anti virus in a clustered storage system comprising nodes that communicate over a communication fabric to facilitate storage of data on the clustered storage system.

A storage system comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes a storage operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage operating system of the storage system may implement a high level module such as a file system to logically organize the information stored on the disks as a hierarchical structure of data containers such as directories files and blocks. For example each on disk file may be implemented as set of data structures i.e. disk blocks configured to store information such as the actual data for the file.

A known type of file system is a write anywhere file system that does not overwrite data on disks. If a data block is retrieved read from disk into a memory of the storage system and dirtied i.e. updated or modified with new data the data block is thereafter stored written to a new location on disk to optimize write performance. A write anywhere file system may initially assume an optimal layout such that the data is substantially contiguously arranged on disks. The optimal disk layout results in efficient access operations particularly for sequential read operations directed to the disks. An example of a write anywhere file system that is configured to operate on a storage system is the Write Anywhere File Layout WAFL file system available fromNetApp Inc. Sunnyvale Calif.

The storage system may be configured to operate according to a client server model of information delivery to thereby allow many clients to access data containers such as directories files and blocks stored on the system. In this model the client may comprise an application such as a database application executing on a computer that connects to the storage system over a computer network such as a point to point link shared local area network LAN wide area network WAN or virtual private network VPN implemented over a public network such as the Internet. Each client may request the services of the file system by issuing file based and block based protocol messages in the form of packets to the storage system over the network. By supporting a plurality of file system protocols such as the conventional Common Internet File System CIFS and the Network File System NFS protocols the utility of the storage system is enhanced.

Further a plurality of storage systems may be interconnected as a clustered storage system to provide a storage system environment configured to service many clients. Each storage system may be configured to service one or more volumes wherein each volume stores one or more data containers that contains data that may be scanned for viruses.

The clients may be general purpose computers configured to interact with the node in accordance with a client server model of information delivery. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories. Alternatively the client may issue packets including block based access protocols such as the Small Computer Systems Interface SCSI protocol encapsulated over TCP iSCSI and SCSI encapsulated over Fibre Channel FCP when accessing information in the form of blocks.

The management station sometimes referred to as an M host is operated and controlled by an administrator who may send instructions in a maintenance mode of the cluster whereby the administrator can assign disks reassign disks or otherwise modify the disk topology or other configuration of the cluster . Further the administrator may configure an anti virus configuration information or request third party software components from vendor repositories . The third party software components may include anti virus scan engines and virus definitions provided by third party vendors such as SYMANTEC a computer software company in Cupertino Calif. MCAFEE an antivirus software and computer security company in Santa Clara Calif. TREND MICRO a company in Tokyo Japan that develops software to protect against computer viruses malware span and Web based threats SOPHOS a public limited company based in Oxfordshire England and Burlingon Mass. USA considered a world leader in IT security and control and COMPUTER ASSOCIATES a company based in Islandia N.Y. providing information technology management software. The management station illustratively contains a graphic user interface GUI or command line interface CLI not shown whereby the administrator can interact with the software on the management station in order to maintain configure and control the cluster . For example the administrator can issue a command that requests the cluster to scan a set of files for viruses.

The NVRAM is a non volatile random access memory device that is used inter alia in a performance enhancement manner to avoid the latency which can be associated with writing data to disks. More specifically as will be understood by those skilled in the art a write request issued by a client is not acknowledged as having been received successfully until the write data has been persistently stored on the storage system. Illustratively in the present cluster environment the write data of a client issued write request is first persistently stored in the NVRAM of the node having the D module that currently owns the relevant disk. The write data is also written to a backup NVRAM of another D module in the cluster prior to the write request being acknowledged to the client. Later at a consistency point the write data is written from the NVRAM on the owner D module to the actual disk. However in order to avoid latency associated with this procedure the cluster may be configured such that an acknowledgement to the client that the write request has completed may be sent as soon as the data is first persistently stored to the NVRAM of the owner D module in the cluster. Later the new write data stored in the NVRAM of the D module is replayed and written persistently to its respective disk s .

Each node is illustratively embodied as a triple processor storage system executing a storage operating system that implements a high level module such as a file system to logically organize the information as a hierarchical structure of named data containers such as directories files and special types of files called virtual disks hereinafter generally blocks on the disks. However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single two or more than three processor system. Illustratively one processor executes the functions of the N module on the node one processor executes the functions of the D module and one processor executes the functions of the M module .

The memory illustratively comprises storage locations that are addressable by the processors and adapters for storing software program code and data structures associated with the present disclosure. For example a portion of the memory may be organized as a raid label cache having locations used to store raid label data structures in accordance with the present disclosure. The processor and adapters may in turn comprise processing elements and or logic circuitry configured to execute the software code and manipulate the data structures. The storage operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the node by inter alia invoking storage operations in support of the storage service implemented by the node. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the disclosure described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over point to point links wide area networks virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the computer network may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as video tape optical DVD magnetic tape bubble memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

Storage of information on each array is preferably implemented as one or more storage volumes that comprise a collection of physical storage disks cooperating to define an overall logical arrangement of volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . Most RAID implementations such as a RAID 4 level implementation enhance the reliability integrity of data storage through the redundant writing of data stripes across a given number of physical disks in the RAID group and the appropriate storing of parity information with respect to the striped data. An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations may be used in accordance with the inventive principles described herein.

To facilitate access to the disks the storage operating system implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named data containers such as directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored. The virtualization module s allow the file system to further logically organize information as a hierarchical structure of data containers such as blocks on the disks that are exported as named logical unit numbers luns .

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available fromNetApp Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the inventive principles described herein. As such where the term WAFL is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of this disclosure.

In addition the storage operating system includes a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server includes a file system in cooperating relation with a volume striping module VSM a RAID system module and a disk driver system module . The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol. The VSM illustratively implements a striped volume set SVS of the present disclosure. As described further herein the VSM cooperates with the file system to enable storage server to service a volume of the SVS. In particular the VSM implements a Locate function to compute the location of data container content in the SVS volume to thereby ensure consistency of such content served by the cluster.

The file system implements a virtualization system of the storage operating system through the interaction with one or more virtualization modules illustratively embodied as e.g. a virtual disk vdisk module not shown and a SCSI target module . The vdisk module enables access by administrative interfaces such as a user interface of a management framework see in response to a user system administrator issuing commands to the node . The SCSI target module is generally disposed between the FC and iSCSI drivers and the file system to provide a translation layer of the virtualization system between the block lun space and the file system space where luns are represented as blocks. The file system further includes an anti virus on access module that may identify whether a file requires scanning based on anti virus attributes stored with the requested file as described later. To this end the anti virus on access module having identified scanning is required for a file may communicate the request along with the previously generated parameters to the M module .

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. That is in addition to providing file system semantics the file system provides functions normally associated with a volume manager. These functions include i aggregation of the disks ii aggregation of storage bandwidth of the disks and iii reliability guarantees such as mirroring and or parity RAID . The file system illustratively implements the WAFL file system hereinafter generally the write anywhere file system having an on disk format representation that is block based using e.g. 4 kilobyte kB blocks and using index nodes inodes to identify files and file attributes such as creation time access permissions size and block location . The file system uses files to store meta data describing the layout of its file system these meta data files include among others an inode file. A file handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk.

Broadly stated all inodes of the write anywhere file system are organized into the inode file. A file system fs info block specifies the layout of information in the file system and includes an inode of a file that includes all other inodes of the file system. Each logical volume file system has an fsinfo block that is preferably stored at a fixed location within e.g. a RAID group. The inode of the inode file may directly reference point to data blocks of the inode file or may reference indirect blocks of the inode file that in turn reference data blocks of the inode file. Within each data block of the inode file are embedded inodes each of which may reference indirect blocks that in turn reference data blocks of a file.

It should be noted that the software path through the storage operating system layers described above needed to perform data storage access for the client request received at the node may alternatively be implemented in hardware. That is in an alternate embodiment of the disclosure a storage access request data path may be implemented as logic circuitry embodied within a field programmable gate array FPGA or an application specific integrated circuit ASIC . This type of hardware implementation increases the performance of the storage service provided by node in response to a request issued by client . Moreover in another alternate embodiment of the disclosure the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware or software.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

In addition it will be understood to those skilled in the art that the disclosure described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this disclosure can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present disclosure may be utilized with any suitable file system including a write in place file system.

The present disclosure is implemented in the context of a configuration management framework used to implement the RAID system in the storage operating system . In an embodiment the configuration management framework provides an object oriented approach to RAID configuration management as described herein with respect to an implementation of the RAID system.

Referring again to the storage server is illustratively embodied as D module of the storage operating system to service one or more volumes of array . In addition the multi protocol engine is illustratively embodied as N module to i perform protocol termination with respect to a client issuing incoming data access request packets over the network as well as ii redirect those data access requests to any storage server of the cluster . Moreover the N module D module and M Module cooperate to provide a highly scalable distributed storage system architecture of the cluster . To that end each module includes a cluster fabric CF interface module adapted to implement intra cluster communication among the modules.

The protocol layers e.g. the NFS CIFS layers and the iSCSI FC layers of the N module function as protocol servers that translate file based and block based data access requests from clients into CF protocol messages used for communication with the D module . That is the N module servers convert the incoming data access requests into file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission to the D modules of the cluster . Notably the CF interface modules cooperate to provide a single file system image across all D modules in the cluster . Thus any network port of an N module that receives a client request can access any data container within the single file system image located on any D module of the cluster.

Further to the illustrative embodiment the N module D module and M module are implemented as separately scheduled processes of storage operating system however in an alternate embodiment the modules may be implemented as pieces of code within a single operating system process. Communication between an N module D module and M module is thus illustratively effected through the use of message passing between the modules although in the case of remote communication between an N module and D module of different nodes such message passing occurs over the cluster switching fabric . A known message passing mechanism provided by the storage operating system to transfer information between modules processes is the Inter Process Communication IPC mechanism. The protocol used with the IPC mechanism is illustratively a generic file and or block based agnostic CF protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic protocol are the SpinFS and SpinNP protocols available fromNetApp Inc. The SpinFS protocol is described in the above referenced U.S. Patent Application Publication No. US 2002 0116593.

The CF interface module implements the CF protocol for communicating file system commands among the modules of cluster . Communication is illustratively effected by the D module exposing the CF API to which an N module or another D module or M module issues calls. To that end the CF interface module is organized as a CF encoder and CF decoder. For example the CF encoder of e.g. CF interface on N module encapsulates a CF message as i a local procedure call LPC when communicating a file system command to a D module residing on the same node or ii a remote procedure call RPC when communicating the command to a D module residing on a remote node of the cluster . In either case the CF decoder of CF interface on D module de encapsulates the CF message and processes the file system command.

The management framework provides a user interface GUI to manage the cluster as described further later. The management framework is shown to include an anti virus on demand module an anti virus update module and an anti virus administration module . The anti virus administration module may be used to provide an interface to the GUI where an administrator may enter anti virus configuration information enter a demand to scan one or more files for viruses and request retrieval of third party software components from a vendor repository.

The anti virus administration module may receive anti virus configuration information in the form of on access policy information. The anti virus administration module may case the on access policy information to be stored on the local storage . The anti virus filter module on the N module in turn may retrieve the on access policy information in the form a predetermined criteria to identify whether a file requires scanning for viruses.

The anti virus administration module may further receive a demand to scan one or more files for viruses. The anti virus administration module may communicate the demand to the anti virus on demand module that in turn retrieves the requested file s via the file system on the D module and requests the anti virus server module to scan the retrieved file s for viruses.

The anti virus administration module may further receive configuration information in the form of a request to retrieve third party software components from a remotely located vendor repository . The anti virus administration module may communicate the request to the anti virus update module . The anti virus update module in turn retrieves the requested third party software components from the vendor repository stores the third party software component on the local storage communicates the third party software component to the anti virus server module and communicates the third party software component to the D module that in turn stores the third party software component on a storage device e.g. disk array .

The anti virus server module includes third party software components that are used to scan files for viruses. Specifically the third party software components may include an anti virus scan engine and virus definitions that have been provided over a network by any one of a plurality of vendor repositories that are remotely located to the clustered storage system. As illustrated the anti virus server module includes a single anti virus scan engine with virus definitions however other embodiments may include multiple anti virus scan engines each associated with virus definitions . The anti virus server module may receive a request to scan a file for viruses from the anti virus on access module or the anti virus on demand module . The anti virus server module may further receive a file from the D module read data from the file and utilize the anti virus scan engine and the virus definitions to scan the data for viruses. The anti virus server module may respond to the identification of an infected file by utilizing quarantine information to identify the appropriate response e.g. repair delete quarantine as described further later. The anti virus server module may further generate antivirus attributes based on the results of the scanning and cause the anti virus attributes to be persistently stored with the file on a storage device e.g. disk array .

It will be appreciated that in view of the described CF the N module provides an abstraction layer by receiving a request in any one of a plurality of network protocols e.g. NFS CIFS and communicating the request over the CF in a CF message that is independent of the network protocols. Accordingly the CF of the clustered storage system serves to decouple of anti virus components that process network protocols from the anti virus components which do not process network protocols the advantage being to isolate the mentioned components from each other and thereby facilitate relatively independent development of the respective components.

In the illustrative embodiment a data container such as a file is accessed in the file system by a data container handle and the data container is represented in the write anywhere file system as an inode data structure adapted for storage on the disks . The in core and on disk format structures of the WAFL file system including the inodes and inode file are disclosed and described in the previously incorporated U.S. Pat. No. 5 819 292 titled METHOD FOR MAINTAINING CONSISTENT STATES OF A FILE SYSTEM AND FOR CREATING USER ACCESSIBLE READ ONLY COPIES OF A FILE SYSTEM by David Hitz et al. issued on Oct. 6 1998.

A file system layout is provided that apportions an underlying physical volume into one or more virtual volumes or flexible volume of a storage system such as node . An example of such a file system layout is described in U.S. patent application Ser. No. 10 836 817 titled EXTENSION OF WRITE ANYWHERE FILE SYSTEM LAYOUT by John K. Edwards et al. and assigned to NetApp Inc. The underlying physical volume is an aggregate comprising one or more groups of disks such as RAID groups of the node. The aggregate has its own physical volume block number pvbn space and maintains meta data such as block allocation structures within that pvbn space. Each flexible volume has its own virtual volume block number vvbn space and maintains meta data such as block allocation structures within that vvbn space. Each flexible volume is a file system that is associated with a container file the container file is a file in the aggregate that contains all blocks used by the flexible volume. Moreover each flexible volume comprises data blocks and indirect blocks that contain block pointers that point at either other indirect blocks or data blocks. In one embodiment one or more the above described physical volume may along with a set of data interfaces be referred to as a virtual server.

In one embodiment pvbns are used as block pointers within buffer trees of files such as file stored in a flexible volume. This hybrid flexible volume embodiment involves the insertion of only the pvbn in the parent indirect block e.g. inode or indirect block . On a read path of a logical volume a logical volume vol info block has one or more pointers that reference one or more fsinfo blocks each of which in turn points to an inode file and its corresponding inode buffer tree. The read path on a flexible volume is generally the same following pvbns instead of vvbns to find appropriate locations of blocks in this context the read path and corresponding read performance of a flexible volume is substantially similar to that of a physical volume. Translation from pvbn to disk dbn occurs at the file system RAID system boundary of the storage operating system .

In an illustrative dual vbn hybrid flexible volume embodiment both a pvbn and its corresponding vvbn are inserted in the parent indirect blocks in the buffer tree of a file. That is the pvbn and vvbn are stored as a pair for each block pointer in most buffer tree structures that have pointers to other blocks e.g. level 1 L1 indirect blocks inode file level 0 L0 blocks.

The pvbns reference locations on disks of the aggregate whereas the vvbns reference locations within files of the flexible volume. The use of pvbns as block pointers in the indirect blocks provides efficiencies in the read paths while the use of vvbn block pointers provides efficient access to required meta data. That is when freeing a block of a file the parent indirect block in the file contains readily available vvbn block pointers which avoids the latency associated with accessing an owner map to perform pvbn to vvbn translations yet on the read path the pvbn is available.

The anti virus log may be used to store time stamped events that chronicle activities performed by the anti virus services. For example an event may be logged that chronicles receipt of a request to access a file receipt of a demand to access a file or the update of third party software components . The anti virus log may be advantageously used to identify the operations performed by the anti virus services for a particular file.

The anti virus configuration information stores information entered by an administrator that may be utilized to configure the operation of the anti virus services on the clustered storage system. The anti virus configuration information includes quarantine information and anti virus scan policy information . The quarantine information includes information and business rules to remediate a virus. For example the quarantine information may specify that a file infected with a virus may be repaired or not repaired. If the quarantine information specifies a repair is appropriate then the quarantine information may further specify whether an attempt is made to remove the virus from the file delete the file or quarantine the file. If the quarantine information specifies a quarantine is appropriate then the quarantine information may further specify the form of quarantine. For example the form of quarantine may include moving the file to a specified folder or other location renaming the file or changing the sector that is used to store the file.

The anti virus scan policy information includes multiple on access policy information entries that respectively contain on access policies. Each on access policy may be configured to be associated with one or more virtual servers. Further the anti virus filter module may compare the one or more configured virtual servers in each on access policy with a requested virtual server to identify the appropriate on access policy. In other words the anti virus filter module may receive a request for data map the data to a requested virtual server and identify the appropriate on access policy based on the requested virtual server and the virtual server associated with the on access policy.

Each on access policy may further include one more business rules that may be applied to the request. The respective business rules may include predetermined criterion or criteria that may be applied to the request to identify whether the requested data is to be scanned for viruses. For example an administrator may utilize the management station to configure the criterion or criteria e.g. predetermined criterion or criteria in the form of business rules that may include a file extension business rule a shared mount point business rule a permission level business rule a protocol business rule and a file operation profile business rule.

The file extension business rule may be executed to identify whether any one of enumerated file extensions e.g. .doc .pdf etc. in the business rule matches an extension appended to a file that contains the requested data. A match may trigger or block scanning of the file. Accordingly the file extension business rule provides the advantage of providing administrator control over ant virus scanning based on file type.

The shared mount point business rule may be executed to identify whether a request for data is associated with a file that is stored in a predetermined location such as a shared mount point. For example the shared mount point may be a set of files or a file directory included within the virtual server associated with the on access policy. Identification of the file being stored in such a predetermined location may trigger or block scanning of the file. Accordingly the shared mount point business rule provides the advantage of providing administrator control over ant virus scanning of a file based on a predetermined location such as a file directory that is used to store the file.

The permission level business rule may be executed to identify whether a request for data is associated with a file that is associated with a specified permission. Merely for example the NFS file system protocol provides for file permission levels including read and or write and or execute permissions. Identification of a file associated with the execute permission level may trigger scanning. Accordingly the permission level business rule provides the advantage of providing administrator control over anti virus scanning of a file based on a permission level associated with the file.

The network protocol business rule may execute to identify whether a request for data is received in a specified network protocol. Merely for example the request for data may be received in file based network protocols such as the NFS or CIFS or block based protocols such as SCSI Fibre Channel iSCSI etc. . . . . Identification of the request for data being received in a network protocol that is also an identified network protocol may trigger or block scanning of the file. Anti virus scanning services are not provided for block based protocols which are considered to be low risk with regard to viruses. Accordingly the network protocol business rule provides the advantage of providing administrator control over anti virus scanning of a file based on network protocol utilized to communicate the request for data to the clustered storage system.

The file operation business rule may be used to identify a file operation profile to process the request for data. For example the file operation business rule may identify an optimal type of file operation profile e.g. NFS CFS Hybrid that may be used to process the request. To this end the file operation profile includes a set of commands that are economized for the clients operational environment e.g. NFS CFS Hybrid . Accordingly the file operation business rule provides the advantage of identifying a file operation profile that includes an optimal set of commands to process the request for data.

Whereas the aggregate is analogous to a physical volume of a conventional storage system a flexible volume is analogous to a file within that physical volume. That is the aggregate may include one or more files wherein each file contains a flexible volume and wherein the sum of the storage space consumed by the flexible volumes is physically smaller than or equal to the size of the overall physical volume. The aggregate utilizes a physical pvbn space that defines a storage space of blocks provided by the disks of the physical volume while each embedded flexible volume within a file utilizes a logical vvbn space to organize those blocks e.g. as files. Each vvbn space is an independent set of numbers that corresponds to locations within the file which locations are then translated to dbns on disks. Since the flexible volume is also a logical volume it has its own block allocation structures e.g. active space and summary maps in its vvbn space.

A container file is a file in the aggregate that contains all blocks used by a flexible volume. The container file is an internal to the aggregate feature that supports a flexible volume illustratively there is one container file per flexible volume. Similar to a pure logical volume in a file approach the container file is a hidden file not accessible to a user in the aggregate that holds every block in use by the flexible volume. The aggregate includes an illustrative hidden meta data root directory that contains subdirectories of flexible volumes 

Specifically a physical file system WAFL directory includes a subdirectory for each flexible volume in the aggregate with the name of subdirectory being a file system identifier fsid of the flexible volume. Each fsid subdirectory flexible volume contains at least two files a file system file and a storage label file. The storage label file is illustratively a 4 kB file that contains meta data similar to that stored in a conventional raid label. In other words the storage label file is the analog of a raid label and as such contains information about the state of the flexible volume such as e.g. the name of the flexible volume a universal unique identifier uuid and fsid of the flexible volume whether it is online being created or being destroyed etc.

Operationally a request from the client is forwarded as a packet over the computer network and onto the node where it is received at the network adapter . A network driver of layer or layer processes the packet and if appropriate passes it on to a network protocol and file access layer for additional processing prior to forwarding to the write anywhere file system . Here the file system generates operations to load retrieve the requested data from disk if it is not resident in core i.e. in memory . If the information is not in memory the file system indexes into the inode file using the inode number to access an appropriate entry and retrieve a logical vbn. The file system then passes a message structure including the logical vbn to the RAID system the logical vbn is mapped to a disk identifier and disk block number disk dbn and sent to an appropriate driver e.g. SCSI of the disk driver system . The disk driver accesses the dbn from the specified disk and loads the requested data block s in memory for processing by the node. Upon completion of the request the node and operating system returns a reply to the client over the network .

The VLDB is a database process that tracks the locations of various storage components e.g. SVSs flexible volumes aggregates etc. within the cluster to thereby facilitate routing of requests throughout the cluster. In the illustrative embodiment the N module of each node accesses a configuration table that maps the SVS ID of a data container handle to a D module that owns services the data container within the cluster. The VLDB includes a plurality of entries which in turn provide the contents of entries in the configuration table among other things these VLDB entries keep track of the locations of the flexible volumes hereinafter generally volumes and aggregates within the cluster. The VLDB illustratively implements a RPC interface e.g. a Sun RPC interface which allows the N module to query the VLDB . When encountering contents of a data container handle that are not stored in its configuration table the N module sends an RPC to the VLDB process. In response the VLDB returns to the N module the appropriate mapping information including an ID of the D module that owns the data container. The N module caches the information in its configuration table and uses the D module ID to forward the incoming request to the appropriate data container. All functions and interactions between the N module and D module are coordinated on a cluster wide basis through the collection of management processes and the RDB library user mode applications on the M Module .

To that end the management processes have interfaces to are closely coupled to RDB . The RDB comprises a library that provides a persistent object store storing of objects for the management data processed by the management processes. Notably the RDB replicates and synchronizes the management data object store access across all nodes of the cluster to thereby ensure that the RDB database image is identical on all of the nodes . At system startup each node records the status state of its interfaces and IP addresses those IP addresses it owns into the RDB database.

At operation at the cluster the N module receives the request and the anti virus filter module identifies whether the requested file requires scanning. Specifically the anti virus filter module may communicate over the CF with the M module to retrieve the appropriate on access policy that is utilized to determine whether the requested file requires scanning for viruses. Merely for example the anti virus filter module may receive the request for data and identify a virtual server based on the location of the data. Next the anti virus filter module may identify the appropriate on access policy by matching the virtual server associated with the request for data with the virtual servers respectively associated with the on access policy. The anti virus filter module utilizes matching virtual servers to identify the appropriate on access policy. Next the anti virus filter module may execute the business rules in the on access policy to generate a scan flag with a status that indicates whether the file requires scanning or does not require scanning generate parameters that may be used to optimize scanning services and identify a file optimization profile that includes commands that may be executed to further process the request for data. Finally the anti virus filter module communicates the results e.g. scan flag the parameters and the request for data in the form of second result information to the D module .

The parameters may for example include a priority that enables the anti virus scanning services to generate a sequence or a queue that includes a plurality of requests ordered according to the priority. Accordingly the priority parameter provides the advantage of expediting critical requests. Further the parameters may include a flag that indicates a type of request for data. Specifically the flag may indicate a file read or a file write. The flag may signal to the D module and the M module to block a response until the scanning operation is complete e.g. read request . Specifically a client that requests a write to a file is not required to wait for the scanning to be completed because the clustered storage system may asynchronously scan the file for viruses independent of the client request. Accordingly asynchronous virus scanning as provided by the cluster provides the advantage of reducing the latency in responding to the client .

At operation at the D module the anti virus on access module identifies whether the file requires scanning based on anti virus attributes stored with the file. Specifically the anti virus on access module identifies the file requires scanning based on the scan flag received from the N module . Next the anti virus on access module may identify that the file requires scanning based on the scan status associated with the file. Merely for example the anti virus on access module may identify the file requires scanning based on a scan status of UNKNOWN and conversely does not require scanning based on a scan status of CLEAN and INFECTED. In another embodiment the anti virus on access module may further identify whether files associated with the scan status of CLEAN and INFECTED are associated with an anti virus version identifier that matches the anti virus version identifier of the third party software components presently executing in the anti virus server module . Non matching versions may indicate the anti virus server module has been updated with a more recent version of third party software components . At operation the anti virus on access module communicates the results e.g. scan flag parameters and request in the form second result information to the M module .

At operation at the M module the anti virus server module receives the scan flag parameters and the request. Next the anti virus server module communicates a request for the file over the CF to the file system on the D module . At operation the anti virus server module reads the data from the file and causes the anti virus scan engine to scan the data. The anti virus scan engine utilizes the virus definitions to scan the data for viruses and generate a scan status that is communicated to the anti virus server module . At decision operation the anti virus server module identifies whether a virus has been found based on the scan status e.g. INFECTED . If a virus has been found processing continues at operation . Otherwise processing continues at operation .

At operation the anti virus server module utilizes the quarantine information to identify whether a repair of the file is attempted and the type of repair attempted as previously described. At operation the anti virus server module generates anti virus attributes for the file. Specifically the anti virus server module generates anti virus attributes by utilizing the scan status received from the anti virus scan engine and the anti virus version identifier associated with the anti virus scan engine and the virus definitions used to scan the file for viruses. At operation the anti virus server module communicates a command s to the D module to update the generated anti virus attributes on the storage device e.g. cache disk array .

At operation at the D module the file system receives the request and updates the anti virus attributes on the storage device e.g. cache disk array corresponding to the scanned file.

At operation at the M module the anti virus server module communicates the scan status to the D module . At operation at the D module the anti virus on access module receives the scan status and at operation the anti virus on access module communicates the data and or the scan status to the N module . At operation at the N module the anti virus filter module receives the data and or the scan status and communicates the data or a message to the client .

At operation at the client the data is received or a message indicating access denied is displayed and the process ends.

The method commences at the M module with the anti virus update module communicating a request for third party software components to the vendor repository . In one embodiment the anti virus update module may communicate the request responsive to receiving a command from an administrator who operates the management station . In another embodiment the anti virus update module may communicate the request responsive to a schedule timeout. It will be appreciated that the anti virus update module is not limited to any single vendor repository and may request third party software components from any one of a plurality of vendor repositories .

At operation the vendor repository receives the request and at operation the vendor repository communicates third party software components based on the request. Specifically the vendor repository may communicate an anti virus scan engine the virus definitions and an anti virus version identifier that uniquely identifies the engine and definitions. In one embodiment the request received at the vendor repository may specify communication of the most recent version of third party software components . In another embodiment the request received at the vendor repository may specify a specific version of third party software components .

At operation at the M module the anti virus update module receives the third party software components and at operation the anti virus update module updates the third party software components in the anti virus server module . Specifically the update effectively installs the third party software components such that the anti virus server module may execute the third party software components to scan data for viruses. At operation the anti virus update module communicates the third party software components to the D module . At operation at the D module the file system stores the third party software components on the local storage .

The foregoing description has been directed to particular embodiments of the disclosure. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically it should be noted that the principles of the disclosure may be implemented in a non distributed file system. Furthermore while this description has been written in terms of D N and M modules the teachings of the present disclosure are equally suitable to systems in which the functionality of the N D and M modules are implemented in a single system. Alternatively the functions of the N D and M modules may be distributed among a number of separate systems wherein in each system performs one or more functions. Additionally the features of the present disclosure have been described with respect to a cluster containing two nodes however it is equally applicable to clusters including a plurality of nodes which allow for an n way failover. Additionally the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions for one or a combination thereof. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the disclosure.

