---

title: Computer network, computer system, computer-implemented method, and computer program product for managing session tokens
abstract: A computer network for managing session tokens may include a client operable to run a client application; a web server hosting at least one web service; and a session token manager. The session token manager may be operable to receive a check out message along with user credentials from the client application, wherein the user credentials identify a user operating the client application; process the check out message to determine a session token from a pool of session tokens managed for the user; and send a token identifier (token ID) to the client application pointing to the determined session token, wherein the session token can be used by the client application to point to and/or to re-use a previously established session with the web service without re-establishing a new session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09058214&OS=09058214&RS=09058214
owner: ACCENTURE GLOBAL SERVICES LIMITED
number: 09058214
owner_city: Dublin
owner_country: IE
publication_date: 20120301
---
In the World Wide Web WWW service providers often offer their services through specific application programming interfaces APIs that are accessible via the Hypertext Transfer Protocol HTTP . The services are executed on a remote system or server hosting the requested service. Such APIs are referred to as web services. Orchestrated web services can be for example implemented in a loosely coupled architecture according to service oriented architecture SOA principals. In a SOA based implementation of orchestrated web services the basic unit of communication is a message rather than an operation.

According to the SOA principals web services comprise loosely coupled units of functionality that have no calls to each other embedded in them. Each service implements one action such as filling out an online application for an account or viewing an online bank statement or placing an online booking or airline ticket order. The web services use defined protocols that describe how services pass and parse messages using description metadata. For example the Web Services Description Language WSDL can be used to describe the web services themselves while the Simple Object Access Protocol SOAP can describe communications protocols between web services.

Accessing a web service from an entity e.g. a client application operated by a user typically requires being compliant with security requirements. For example before executing some requested functionality of a web service a web server hosting the web service aka web service provider may need to check if the user is allowed to invoke the web service and or the requested functionality. In other words web services providers may authorize or not access to a web service and or requested functionality. Granting a user access to a web service and or related functionality is typically related to establishing a session between the client application operated by the user and the web service provider. During the session the client application and the web service provider may exchange one or more messages in the same session without the need to grant access again as long as the session is active.

A session may relate to a semi permanent interactive information interchange between two or more entities including e.g. a server computer a client computer hosting a client application a communication device etc. . A session may be set up or established at a certain point in time and torn down at a later point in time. An established session may involve more than one message between the involved entities in each direction. When security requirements impose a web service interaction to set up a session to enable client and server to exchange messages client application has to implement all the logic and functionalities to manage set up renewal expiration of a session. When a session is or has been established it usually associated with a token also referred to as a session token . Tokens or session tokens are the unique identifiers of the session and must be passed in the body of the messages as a form of certificates to exchange messages with the server inside the same session. In most web service implementations session management is however often performed in a less optimized and rather inefficient manner. For example by opening a new session for each message exchanged by each client invoking the web services. Indeed session management of the web server usually generates a new session token for a user each new session. Session management might be therefore inefficient with regard to processing resources such as time memory and or performance in particular when a user is invoking and or running a plurality of different sessions.

Consequently there is a need to provide an efficient mechanism for managing user s session tokens for client applications interactions that can improve performance regarding time and or memory consumptions

According to one general aspect a computer network for managing session tokens is provided. The network may comprise a client operable to run a client application a web server hosting at least one web service and a session token manager operable to receive a check out message along with user credentials from the client application wherein the user credentials identify a user operating the client application process the check out message to determine a session token from a pool of session tokens managed for the user and send a token identifier token ID to the client application pointing to the determined session token wherein the session token can be used by the client application to point to and or to re use a previously established session with the web service without re establishing a new session.

According to another general aspect a computer implemented method for managing session tokens is provided. The method may comprise receiving a check out message along with user credentials e.g. a username and or a password of the user from a client application wherein the user credentials identify a user operating the client application processing the check out message to determine a session token from a pool of session tokens managed for the user and sending a token identifier token ID to the client application pointing to the determined session token wherein the session token can be used by the client application to point to and or to re use a previously established session with the web service without re establishing a new session.

In one implementation of the session token manager using an object oriented programming language such as C or Java etc. the check out message may be implemented by a check out method.

The pool of session tokens managed for a user at a session manager may be implemented by a table and or a list e.g. in the form of a hash table comprising a possibly empty list of sessions tokens which have been or which are currently in use by the user. For example the list of sessions may be empty when initializing the pool of session tokens and or when a user starts up a first session with a web service. If the list of session tokens for the user i.e. the pool of session tokens is empty i.e. no session token exists for the user then no token ID and or an empty token ID may be returned. In this case there has been no already initialized session and hence no session token for the user available. Therefore the client application operated by the user may need to call the web service along with the user credentials for initializing a new session and hence for generating a corresponding session token for the user.

If the list of session tokens for the user i.e. the pool of session tokens managed for the user is not empty and hence comprises at least one session token then for the user there may be two lists available. Similar to the pool of session tokens said two lists may also be implemented in terms of hash tables and or hash structures. One of the two lists may comprise available and therefore unlocked session tokens of the user and the other of the two lists may comprise session tokens currently in use in a session of the user and therefore locked session tokens.

The method for managing session tokens may be implemented by a session token manger which is operable to manage a pool of session tokens for a user. A pool of session tokens may relate to a gathering and or managing entity for session tokens. The session token manager and hence the method executed by the session token manager provides a management of session tokens generated for and associated with a specific user having generated the session token. For example using an available session management mechanism each of the session tokens comprises an encrypted string including the session ID user credentials such as a username and a password and or a timestamp extracted from the request of the user to initiate a session with the web service. A session token is unique with regard to a user to preserve integrity context. For example data access with a session token can be used by the user for whom the session token is generated. The method for managing session tokens may enable to manage a plurality of session tokens for a user operating and or initiating different sessions.

In this way session management may become more efficient and more flexible. Session management using session tokens according to the method may be more efficient with regard to processing time and or required memory resources since resources and or time required to establish a session may only be consumed once at the beginning of interactions of a user with a web service when a web client application and web server provider exchange a first message in a first session.

The client application may use the returned session token to invoke the requested web service again without set up a new session. The token ID corresponding to the session token uniquely represents a session already established by the client application with the web service. The session token establishes a pointer to the determined session. Hence the invocation may take place without the requirement of any further specification of a username and or a password so that the web service can be invoked without any session initialization of the corresponding session. In this way significant processing time can be saved.

According to another aspect processing the check out message to determine a session token from a pool of session tokens managed for the user may comprise determining whether there exists at least one session token in a hash structure comprising unlocked session tokens session tokens which are currently not in use in another session of the user and therefore available for the user who wants to invoke the new session .

According to yet another aspect session tokens currently in use in a session of the user may be stored in a hash structure comprising locked session tokens.

According to yet another aspect each of the hash structures may comprise a list of one or more pairs in the form wherein the key represents a token ID e.g. a string of a session token and the value the associated session token.

The check out method may be provided by a session pool component of the session token manager. The check out method of the session pool component may operate on a hash structure which implements a collection of pairs wherein the key is represented by a username of the user taken from the user credentials and the value is represented by an object instantiated from a user session pool component. The user session pool component may be also provided by the session token manager. In other words a session token is associated with a corresponding username of a user having generated the session token. Then to determine a session token for the user from the pool of session tokens the check out method of the session pool component may determine a session token by calling a check out method provided by the user session pool component. For example the check out method may call the check out method of the user session pool component with the object instantiated from a user session pool component from a pair of its

hash structure. In other words the hash structure used by the check out method called by the client application provides a data structure which can be used to handle session tokens as generated in a session management system wherein a session token is generated with regard to a specific user who has requested the session token for a session. The check out method of the user session pool component may operate on the hash structures representing locked and unlocked session tokens respectively for the user.

The hash structure comprising unlocked session tokens and the hash structure comprising locked session tokens may be implemented as lists of pairs wherein in such a pair the key may specify a token string and the value may specify a corresponding session token. The token string in a pair of a hash structure may represent a token ID corresponding to a session token specified in the value of the pair.

The hash structures may increase the reuse of code and eases user based management of session tokens. This may represent a great benefit for the design process and enables to adapt this solution to new kinds of problems that have similar features.

According to yet another aspect the session token may be a valid session token if the session token is not expired.

The check out method of the user session pool component may search the unlocked hash structure. The unlocked hash structure may comprise possible available and thus usable session tokens for the user. In case a session token taken from the unlocked hash structure is not expired and therefore valid the session token fulfills the following first requirement An expiration time of the considered session token from the unlocked hash structure should not be expired. That means an expiration time of the session token should be less then a specified expiration time for the session token.

According to yet another aspect the valid session token may have been used less than or equal to a pre defined maximum usage value.

A session token may be considered as a valid session token only in case the session token additionally to the first requirement may also fulfill a second requirement The session token being considered has been used a number of times less or equal than the value of a specified maximum usage.

According to yet another aspect if the session token is not a valid session token the token ID in particular the pair token ID session token i.e. the pair comprising the token ID and the corresponding session token may be empty.

According to yet another aspect the session token corresponding to the empty token ID may be removed from the pool of session tokens.

According to yet another general aspect a computer system for managing session tokens is provided. The system may comprise a session token manager operable to receive a check out message along with user credentials from a client application wherein the user credentials identify a user operating the client application process the check out message to determine a session token from a pool of session tokens managed for the user and send a token identifier token ID to the client application pointing to the determined session token wherein the session token can be used by the client application to point to and or to re use a previously established session with the web service without re establishing a new session.

According to yet another aspect the computer network and the computer system may be further operable to perform any of the methods as described.

In yet another general aspect there is provided a computer program product comprising computer readable instructions which when loaded and run in a computer system and or computer network system cause the computer system and or the computer network system to perform a method as described.

The subject matter described in this specification can be implemented as a method or as a system or using computer program products tangibly embodied in information carriers such as a CD ROM a DVD ROM a semiconductor memory signal and or data stream and a hard disk. Such computer program products may cause a data processing apparatus to conduct one or more operations described in this specification.

In addition the subject matter described in this specification can also be implemented as a system including a processor and a memory coupled to the processor. The memory may encode one or more programs that cause the processor to perform one or more of the method acts described in this specification. Further the subject matter described in this specification can be implemented using various MRI machines.

Details of one or more implementations are set forth in the accompanying exemplary drawings and exemplary description below. Other features will be apparent from the description and drawings and from the claims.

Following technical terms are widely used throughout the description. The terms may refer to but are not limited to the subsequently given explanations.

In general a web service may relate to an application programming interface API that can be accessed for example via the hypertext transfer protocol HTTP and executed on a remote system e.g. a web server which is operable to host the requested web service. More specifically according to a definition of web services given by the W3C the World Wide Web Consortium a web service may relate to a software system designed to support interoperable machine machine interaction over a network. It has an interface described in a machine processable format e.g. the Web Services Description Language WSDL . Other systems interact with the web service in a manner prescribed by its description using Simple Object Access Protocol SOAP messages typically conveyed using Hypertext Transfer Protocol HTTP with an eXtensible Markup Language XML serialization in conjunction with other Web related standards . The W3C also states We can identify two major classes of Web services REST compliant Web services in which the primary purpose of the service is to manipulate XML representations of Web resources using a uniform set of stateless operations and arbitrary Web services in which the service may expose an arbitrary set of operations. Web services may also be used to implement architecture according to Service Oriented Architecture SOA principals wherein the basic unit of communication is a message rather than an operation. Web services orchestrated in a SOA are often referred to as message oriented services.

SOAP is specified in a W3C recommendation and may basically relate to a protocol specifying exchanging structured information in the implementation of web services in computer networks. SOAP relies on XML and for its message format it may rely on other application layer protocols such as Remote Procedure Call RPC and or HTTP for message negotiation and transmission. SOAP can form the foundation layer of a web services protocol stack providing a basic messaging framework upon which web services can be built. This XML based protocol may comprise three parts an envelope which defines what is in the message and how to process it a set of encoding rules for expressing instances of application defined data types and a convention for representing procedure calls and responses.

A SOAP message may comprise two SOAP specific sub elements within the overall env Envelope element namely an env Header element i.e. a SOAP header and an env Body element i.e. the SOAP Body . The contents of these elements are defined depending on a specific application. A SOAP header may relate to an extension mechanism that provides a way to pass information in SOAP messages that is not application payload. Said control information includes for example passing directives or contextual information related to the processing of the message. This allows a SOAP message to be extended in an application specific manner. The immediate child elements of the env Header element are called header blocks and represent a logical grouping of data which can individually be targeted at SOAP nodes that might be encountered in the path of a message from a sender to an ultimate receiver. SOAP headers may be inspected inserted deleted or forwarded by SOAP nodes encountered along a SOAP message path. The SOAP body is the mandatory element within the SOAP env Envelope element which implies that this is where the main end to end information conveyed in a SOAP message must be carried out.

In computer networks a session may relate to a semi permanent interactive information interchange between two or more entities such as communicating devices a computer and or a user who operates through a client application hosted on a client computer etc. A session may be set up or established at a certain point in time and torn or shut down at a later point in time. A session may establish a connection between two parties e.g. a client application and a web service and may allow said two parties to exchange messages among them. An established communication session may involve more than one message in each direction. A session may be stateful or stateless. In a stateful session at least one of the communicating parts needs to save information about the session history in order to be able to communicate and or to exchange multiple independent messages within the established session. In a stateless session communication between entities may consist of independent sessions established for each request response pair between the two parties. In a stateless session the two parties involved in the session may need to set up a new session every time a new message is exchanged.

A session token also referred to as a token may relate to a unique identifier that is generated and sent from a web server or server computer hosting at least one web service to a client application operated on a client computer to identify the current interaction session. The current interaction session may be established between the client application and the web service. The client application may store and send the session token as an HTTP cookie and or sends the session token as a parameter in GET or POST requests to the server. A reason to use session tokens may be that the client application may only need to handle an identifier of the session token wherein other or further session data may be stored on the server linked to said identifier. The further session data associated and or linked to the session token may be stored in a database to which the client application may not have direct access.

Basically session management may relate to a process of keeping track of a user s activity across sessions of interaction with a computer system. In one example the user s activities may be performed through a client application hosted on a client computer and the computer system may be a web service hosted on a web server. Session management tasks may include keeping track of which applications and or web services are open and which documents each application has opened so that the same state can be restored when the user logs out and logs in later. For a website and or for a web service session management may involve requiring the user to re login if the session has expired e.g. a certain time limit has passed without user activity .

In the context of web servers session management may be operated using HTTP. In general HTTP is stateless. Therefore a client computer running a web browser may need to establish a new Transmission Control Protocol TCP network connection to the web server with each new HTTP GET or POST request. The web server therefore cannot rely on an established TCP network connection for longer than a single HTTP GET or POST operation.

Session management may relate to a technique used by web developers to allow the stateless HTTP protocol to support a session state. For example once a user has authenticated himself to a web server the next HTTP request GET or POST of the user should not cause the web server to ask the user for his username and password again. Such session information may be stored on the web server using a session identifier session ID generated as a result of the first request from the user. The first request may be the first authenticated request. Storing of session IDs and the associated session data username account number etc. on the web server may be accomplished using a variety of techniques including but not limited to local memory flat files and or databases.

If session information is considered transient volatile data that may not be required for non repudiation of transactions and may not comprise data that is subject to compliance auditing then any method of storing session information can be used.

However if session information may be subject to audit compliance consideration should be given to the method used for session storage replication and or clustering. In a SOA SOAP messages constructed with XML messages may be used by client applications to cause web servers to create sessions.

In the following a detailed description of examples will be given with reference to the figures. It should be understood that various modifications to the examples may be made. In particular elements of one example may be combined and used in other examples to form new examples.

To organize and manage user sessions for web services hosted on one or more web servers a mechanism referred to as session management can be implemented. Session management for web services is usually connected to authentication when a user requests and or accesses a web service. In one exemplary implementation a user authentication against a web service may be realized by an appropriate specification within a SOAP header.

In general an authentication mechanism to authenticate a user against a web service and session management may be used in combination to send and or receive user credentials and session information. User credentials may comprise different mechanisms for identification against a web server hosting a web service such as a username and a password. User credentials for log in at a web service that calls either a stateful session or a stateless session may be sent. A session that closes after a outbound response is sent may be referred to as a stateful session. A session that remains open after a outbound response is sent may be referred to as a stateless session.

An example of generating a session token based on a SOAP message sent by a client application operated by a user to request a web service is shown with reference to .

For example a client application operated by a user may send a request e.g. in a header of a message together with a username e.g. in a username token and a password e.g. in a password token to a web service and may call a stateless session e.g. using the SOAP message type stateless . A web server hosting the web service then may generate an encrypted session token e.g. the session token that comprises the user credentials i.e. the username and the password of the user using the client application . The web server may include the session token in the SOAP header of the response. The client application is responsible for capturing the session token which is returned in the response from the web server. Furthermore the client application includes the session token in the SOAP header of a subsequent request against said web service.

A manager component for session management connected to the web service extracts the user credentials and the ID or token ID of the session token and reconnects to the session on the web service. If the initial or original session corresponding to the session token has been closed or expired the session manager informs the web service to respond to the client request with error messages informing that the session associated with the session token is expired. Then the client application is forced to send a new message with user credentials of the user to set up a new session for the user.

In one exemplary implementation as shown in SOAP headers may be used to call different types of sessions and to pass authentication credentials within session management of web services. The Session Type SOAP header can be used to define the type of a session. Using SOAP valid values for a session may comprise none stateless or stateful. An exemplary SOAP header of a SOAP message defining the session type of a stateless session and comprising the username and the password of a user operating a client application to authenticated against a web server hosting a web service can be used to invoke a web service.

According to the session type none which is usable in the Session Type SOAP header a new session is opened for each request from a user operating a client application and then closed after a response is sent out. The session type none may or may not include SOAP headers for a username and a password of the user which can be specified in the SOAP headers UsernameToken and PasswordText . When the SOAP header comprises a username and a password header said credentials are used for user authentication. If the username and password headers are not used in the SOAP header anonymous login may be assumed.

According to the session type stateless which is usable in the Session Type SOAP header a new session is opened for an initial request against a web service and the session remains open for subsequent requests. A re login of the user at the web service occurs automatically if the session is closed. The re login may be transparent to the user. Username and password SOAP headers are included in the initial request against the web service to open a stateless session. Using the stateless type for session management the client application operated by the user provides the username and the password of the user only once for the initial request. A session is opened on the web server hosting the requested web service and is dedicated for this user. In response to the request the web service returns a session token to the client application. The session token may comprise an encrypted string including the information about username password and or timestamp. Said information may be extracted from the request SOAP header. Furthermore the session token may comprise a session identifier session ID . The session ID may be used to reconnect to an existing session or automatically log in again if the session has been terminated. For subsequent requests the client application uses the session token to reuse the session initiated with the initial request. In order to increase security session tokens may be regenerated for each response. In this way the client application needs to provide the last received session token for the next request.

According to the session type stateful which is usable in the Session Type SOAP header a new dedicated session is opened for an initial request of a user from a client application for a web service hosted at a web server and the session remains open for subsequent requests. A re login for the user does not occur automatically if the session is closed. The username and password headers are included in the initial request to open a stateful session. The web service returns a session token corresponding to the request in the response to the client application. The session token may comprise an encrypted string including the information about username password and or timestamp. Said information may be extracted from the request SOAP header. Furthermore the session token may comprise a session identifier session ID . For subsequent requests the client application uses the session token to reuse the session. Unlike stateless sessions transparent failover i.e. automatic re login is not foreseen within stateful sessions. Rather stateful sessions may store state information that makes it mandatory to connect to the same web service for each request.

According to the exemplary implementation of the session type SOAP header shown in a session token as shown in is generated. The session token comprises an encrypted string including the information about the username and the password of the user having sent the request to the web server. Furthermore the session token comprises in the encrypted string a timestamp specifying when the session token has been generated.

Session tokens generated as described above and as shown in may be generated so that every session token can be used only by the user that has generated the session token when having performed a initial request to a web server hosting a requested web service. This is due to the fact that each of the generated session tokens comprises an encrypted value including a session ID a username a password and or a timestamp extracted from the request SOAP header of the request from the user to a web service. Such an encrypted value representing a session token is shown in .

Session tokens e.g. session token generated for session management for web services as previously described with reference to should be managed and organized in a reusable and scalable environment so as to enable efficient and fast transactions from and or to web services. Furthermore governance of the environment for session token management should be eased to easily detect anomalies and to achieve a better performance. An exemplary implementation of session token management of such session tokens is described in the following with reference to .

One implementation of a session token manager which overcomes the above mentioned disadvantages and which is operable to manage session tokens which are generated for specific users is shown in . The session token manager implements a way to manage session tokens initially generated as described with reference to so that the session tokens become re usable by the user. In other words the session token manager implements components and or methods to make a diversification of session tokens for users possible.

For this purpose the session token manager implements a mechanism to manage a pool of session tokens implemented by a token object component a user session pool component and a session pool component . The session pool component is visible to a client application operated by a user for requesting a web service hosted on a web server. The session pool component calls and or imports the user session pool component to perform its operations. The token object component is used by the two other pools and respectively to perform their respective operations.

A client application may communicate with the session token manager and in particular with the session pool component by using specific messages exposed by the session pool component . The client application may use the exposed messages to request a session token identifier token ID for invoking a session with a web service to return a refreshed session token to the web service during a session and or to remove expired session tokens from the pool of session tokens managed by the session token manager . The messages exposed to a client application by the session pool component may comprise a check out message a check in message and or a remove message .

In one exemplary implementation the software components of the session token manager shown in can be implemented in an object oriented programming language such as Java C C . In the exemplary Java implementation of the session token manager the token object component is implemented by a class TokenObject the user session pool component is implemented by a class UserSessionPool and the session pool component is implemented by a class SessionPool. Implementing the session token manager using an object oriented programming language the above mentioned messages may be implemented by corresponding methods exposed by the session pool component .

In the session token manager session tokens may be implemented in terms of token objects being instances of the token object component and having the therein specified properties and or methods. In the following the term session token is used for token objects as implemented in the session token manager .

The token object component represents session tokens. The session tokens can be used by client applications when requesting a web service in a session.

The token object component comprises information for specifying session tokens. The information specifying session tokens may be implemented by one or more properties and . A token property may be used to implement a string representing a session token. A usage counter property may be used to implement a number of times a session token has been used. For example as a default value for the usage counter property 1 is defined. A last time usage property is used to determine whether a session token can be further used in a session. The last time usage property may be implemented by a Boolean wherein the value false is set as a default value for said property . If the value of the last time usage property is true then the corresponding session token is already in use and cannot be further used in a subsequent client transaction. An expiration time property can be implemented to specify a period of validity for a session token. Furthermore a session may comprise a specified time out i.e. a time period a session can remain inactive before a client application having initiated the session is logged out and the session is closed. Additionally a session token for a session may comprise a time out i.e. a time period within which the session token can be inactive before the session token s validity period is expired i.e. if the session token s expiration time is exceeded. In one implementation the validity period of a session time is expired and the session token is therefore rejected if the session token is inactive for more than the value set for the expiration time of the session token. Whenever the session token is used the expiration time associated with the session is refreshed i.e. a value of the expiration time property of the session token is refreshed and hence re set to a new value.

Furthermore the token object component comprises getter and setter methods for each of the properties to set and get the corresponding values of the one or more properties associated with a session token. If the values of the properties may be implemented as private in a corresponding Java implementation the getter and setter methods are required. Accordingly the token property comprises associated get and set methods to get and set values for the token property of a session token getToken and setToken The usage counter property comprises associated get and set methods to get and set the usage counter property of a session token getUsageCounter and setUsageCounter The last time usage property has associated get and set properties to get and set last time usage property of a session token getLastTimeUsage and setLastTimeUsage The expiration time property has associated get and set properties to get and set the expiration time property of a session token getExpirationTime and setExpirationTime 

Getter and setter methods which are also referred to as accessor methods provide access to an object s properties e.g. to the one or more properties of a session token . A get method returns the value of a property held by an object e.g. a session token which is an instance of the token object component . A get method has a return type matching the type of the associated member variable. Get methods typically do not take any parameters. A set method has a void return type and takes a parameter of the appropriate type to assign to the associated member variable. Getter and setter methods are usually written only for values that need to be accessed externally.

The user session pool component is operable to implement processes required to manage a pool of session tokens. The pool of session tokens managed by the user session pool component are instances of the token object component and therefore session tokens generated by the token object component and then managed in the user session pool component .

The user session pool component comprises one or more properties and . An expiration time property represents a period of validity of a session token. The expiration time property may correspond to the expiration time property of the object token component . The lock property and the unlocked property are implemented by corresponding hash structures. The locked and unlocked properties and may also be referred to as hash structures comprising locked and unlocked session tokens respectively. The lock and unlock properties and allow to administrate and separate session tokens that are currently in use from session tokens that are available for session management of a user session with a web service. The lock and unlock properties and may be implemented as instances of the java.util.Hashtable class in a Java implementation of the session token manager . Using said Java implementation the lock and unlock properties and may be implemented as collections of pairs wherein in such a pair the key may specify a token string and the value may specify a corresponding instance of the token object component i.e. a session token. For example the token string in a pair of a hash structure may represent a token ID corresponding to a session token specified in the value of the pair. In another example a token ID may relate to a pointer pointing to a session token as organized and or managed by the session token manager . The maximum usage property specifies a maximum number of times a session token can be used.

Interactions of the user session pool component is implemented by one or more methods and operating on one or more of the properties and of said component . The methods and of the user session pool component comprise logics necessary for managing session tokens in the session token manager .

A constructor of the class i.e. the user session pool component may be implemented by a UserSessionPool method. The constructor receives as input parameter two values that are used to set the expiration time property and the maximum usage property for a session token in the session token pool. After having set said two properties and hash structures for the lock and unlock properties and of the session token are initialized.

A remove method is implemented with the functionality to remove from a locked property i.e. from the corresponding hash structure or hash table implementing the locked property of session token a session token that the remove method receives as input parameter.

An expire method determines during the process when a user checks out from a session whether there exist one or more session tokens that are expired in time . Each session token which is expired is then removed from the unlocked property i.e. the hash structure representing and storing unlocked session tokens.

A check in method specifies and or implements operations that allow releasing a used session token. A used session token may be released if the session token is no longer used in a session. The input parameter of the check in method is a session token that has to be released and a string representing the session token according to the token property of the token object component .

For example if there exists an input session token i.e. if the input session token is not null and or empty then the session token is removed from the locked hash structure represented by the locked property and inserted in the unlocked hash structure represented by the unlocked property through the check in method . Furthermore the check in method sets the expiration time property to the current time the session token is checked in. Additionally the string represented in the token property of the token object component is set to the token string of the session token being the input parameter to the check in method .

In other words according to the check in method the released session token is moved from the hash structure representing locked session tokens e.g. session tokens currently used in a session to the hash structure representing unlocked session tokens e.g. session tokens currently not in use for a session . A session token is released if a session token which was previously in use in a session is no longer in use for the session.

A corresponding token string being represented in the token property is set to the token string input parameter of the session token. The session token is inserted into the unlocked hash structure represented in the unlocked property .

A check out method specifies and or implements a process to retrieve a session token which can be used in a session by a user. For this purpose the check out method searches the unlocked hash structure implemented in the unlocked property . The unlocked hash structure comprises possible available session tokens for the user.

To be valid i.e. not expired a session token in the unlocked hash structure satisfies at least one of the following two requirements Firstly an expiration time property of a considered session token from the unlocked hash structure should not be expired referred to as the first requirement . Secondly the session token being considered has been used a number of times less or equal than the value of the maximum usage property associated with the considered session token referred to as the second requirement .

Each of the session tokens in the unlocked hash structure specified in the unlocked property is inspected with regard to the two requirements.

In one exemplary implementation if a session token does not satisfy both of the requirements the session token is considered to be expired not valid . The expired or non valid session token is removed from the unlocked hash structure represented in the unlocked property . Otherwise if a session token from the unlocked hash structure satisfies the requirements the respective session token is removed from the unlocked hash structure represented by the unlocked property and inserted into the locked hash structure represented by the locked property . Said session token is then returned as an output parameter by the check out method . If the unlocked property is empty i.e. does not comprise any session token in its hash structure then the check out method returns a session token that comprises as a token property the string NullToken which represents an empty session token and hence a corresponding empty token ID .

In another implementation only one of the two requirements e.g. the first one needs to be satisfied by a session token to be considered as a valid or non expired session token.

More particular to implement the check out method a validate method is called during execution of the check out method . The validate method verifies whether the considered session token is still valid or not expired . In particular the validate method examines whether the second requirement is fulfilled by a considered session token. To validate the session token the usage counter property of the session token is increased by one. Then the validate method examines the new value of the usage counter property . If the new value of the usage counter property exceeds the maximum usage property then the validate method returns false i.e. the considered session token is not valid. The not valid session token is removed from the unlocked hash structure represented in the unlocked property . If the value of the usage counter property for the session token is less than the maximum usage property the validate method returns true. If the value of the usage counter property for the session token is however equal to the maximum usage property then the last time usage property for the session token is set to true and the validate method returns true.

A clean up method executes a process of cleaning up the locked and unlocked properties and associated with session tokens. The clean up method removes expired session tokens comprised either in the locked property or in the unlocked property from the corresponding hash structure i.e. from the locked hash structure or from the unlocked hash structure respectively . The clean up method may be called from an external environment at regular time intervals in order to keep session tokens coherent.

The session pool component is operable to implemented processes required to manage sessions of a user through a plurality of session tokens. The session pool component provides an interface to a client application operated by a user who wants to request a web service and provides the user with a session token for the requested session. The session pool component may be implemented by calling and or importing the properties and or methods of the user session pool component and or those of the token object component .

The session pool component comprises one or more properties and . The properties and correspond to the properties and of the user session pool component however with some differences in their implementation. In particular the session pool component comprises a hash session pool property which basically replaces the hash structures of the locked and unlocked properties and of the user session pool by a single hash structure in the hash session pool property . The hash structure implementing the hash session pool property implements a collection of pairs wherein the key is represented by a username and the value is represented by an object instantiated from the session pool component . The username may be comprised in the user credentials a user has provided when initializing a session with a web service. In other words by implementing the hash session pool property the session pool component enables and or allows to handle session tokens according to the identity of a user that has performed the authentication e.g. by providing his user credentials . Furthermore by calling the user session pool component use of program code can be increased and or session token management can be performed easier and therefore less complex and or difficult. Therefore the implementation of the session pool component and in particular its hash session pool property may provide a great benefit for a design and or implementation process of session token management and may also enable to adapt said approach to new kinds of problems that comprise similar aspects.

By providing the hash session pool property the session pool component allows for handling and or managing session tokens according to the identity of a user that has performed an initial request against a web service to open and or initiate a session and has authenticated himself against the web server hosting the requested web service. For the session initiated by the user a corresponding session token is generated which is then handled in the hash session pool property as described.

In other words the hash session pool property provides a data structure which can be used to handle session tokens as generated in a session management system wherein a session token is generated with regard to a specific user who as requested the session token for a session. Furthermore since the session pool component interacts with the user session pool component and or the token object component session tokens generated for the user can be managed in a more efficient manner. For example use of the user session component may increase the reuse of code and eases user based management of session tokens.

An expiration time property corresponds to the expiration time property of the user session pool component and a maximum usage property corresponds to the maximum usage property of the user session pool component .

Interactions and operations of the session pool component are implemented by one or more methods and .

A class constructor of the session pool component which may be referred to as SessionPool receives two input parameters to initialize the class properties expiration time of the corresponding expiration time property and a maximum usage of the corresponding maximum usage property of a session token.

A remove method basically allows for removing a session token from the locked hash structure implemented in the locked property . In particular the remove method retrieves from the hash structure implemented in the hash session pool property an object of the user session pool component which is associated with a specific user. Subsequently the remove method calls on the retrieved object the remove method of the user session pool component .

A check in method which may be implemented similar to the check in method of the user session pool component implements a process of checking in a session token. In one implementation the check in method retrieves an object of the user session pool component associated with a specific user from the hash session pool property . With the retrieved parameters the check in method calls the check in method of the user session pool component . As described in detail above the check in method checks in a session token into the unlocked hash structure implemented in the unlocked property provided for handling session tokens of the user which are currently in use.

A check out method executes a process of checking out a session token. However unlike the check out method of the user session component the check out method takes into account the session token generated by a specific user. In this way the check out method provides an interface of session tokens associated with the user having initially generated the session token session token management in the locked and unlocked hash structures of the user session pool component . This enables a more efficient implementation of session token management.

In one implementation the check out method retrieves an object of the user session pool component which is associated with the input username of a user to the initiated session of the corresponding session token generated by the user. The hash session pool property can be implemented by a collection of pairs wherein the key is represented by a specific username and the value is an instance of the user session pool component . The hash session pool property is used to handle the session tokens generated by the user that has the input username. In other words by providing the hash session pool property the session token manager provides a mechanism to manage session tokens generated for a specific user by a web service invoked by the specific user. Availability of the session tokens of the users stored and or managed in the hash session pool property are then organized by the hash structures and comprising locked and unlocked session tokens respectively of the user.

If there does not exists a session token associated with the input username in the hash structure of the hash session pool then a new instance or object of the user session pool component is created and inserted into said hash structure.

The check out method of the user session pool component is called with the input parameter of the hash structure according to the hash session pool property i.e. an object instantiated from the user session pool component by the check out method of the session pool component . The check out method returns as an output parameter an object instantiated from the token object component i.e. a session token for the associated username of a user.

The clean up method is implemented by substantially the same operations executed by the clean up method exposed by the user session pool component . The clean up method is called on every object of the user session pool component stored for every single user.

It should be understood that a username and or a password also referred to as user credentials is associated with the user operating the client application wherein any communication between the user and the web service is performed through the client application since a user needs a computer to interact with a web service . It should be further understood that the session token manager may be implemented and may comprise the components and with the corresponding properties and or methods as described with reference to .

Operations that may be performed by the client application with and or on session tokens in communication with the session token manager may comprise a check in message or method a check out message or method and or a remove message or method as exposed by the session pool component of the session token manager as described above with reference to .

A client application initiates a session and or interacts with the web service during a session for which a session token is required. At the client invokes the session token manager . In particular the client application sends a check out method of the session pool component as a particular check out message by passing a corresponding username and optionally also a password e.g. user credentials of the user operating the client application to the session token manager . When receiving the username and the password in the check out method at the session token manager as a particular check out message it is checked by calling methods and or properties of the user session pool component whether there exist a valid or non expired session token in the unlocked hash structure of the unlocked property . Session tokens available in the unlocked hash structure are session tokens which are available and therefore unlocked and hence not in current use in a session of the user operating the client application . The check out method of the session pool component operates on the hash session pool component as described with reference to . In case the hash session pool component is empty for the received username a new session token is generated for the user based on his credentials and stored in the hash session pool component . In case the hash session pool component is empty for the received username the corresponding check out method of the user session pool component which operates on the locked and unlocked hash structures i.e. properties and is called to determine a session token for the user for use in the requested session.

In particular in case there is a session token in the unlocked hash structure of the unlocked property a token ID for the session token is sent to the calling client application from the session token manager . Furthermore said session token is removed from the unlocked hash structure of the unlocked property and moved to the locked hash structure of the locked property since the session token is now in use by the client application . The session token taken from the unlocked hash structure is then examined with regard to whether the session token is not expired and thus considered to be valid. The session token is considered to be a valid or non expired session token if the session token satisfies the first requirement and or the second requirement described above with reference to . For example the session token is valid if a value of an expiration time property for the session token is less than a value of an expiration time property for the session token in the user session pool component first requirement . Furthermore a session token may additionally need to satisfy the following requirement in order to be valid A value of the usage counter property of the session token is less than a value of the maximal usage property for the session token in the user session pool component second requirement . The second requirement for a valid session token may be implemented from a best practice experience. Said experience suggests using the same session token only for a limited number of times.

In case there is a valid session token for the request from the client application in the unlocked hash structure represented in the unlocked property the steps to are performed.

In case a non empty token ID is returned by the check out method to the client application as a particular check out message at step the client application uses said returned token ID for the session token to invoke the requested web service . Hence the invocation may take place without the requirement of any further specification of a username and or a password so that the web service is invoked without any session initialization of the corresponding session. In this way significant processing time can be saved. The web service may be further invoked by passing additional service input parameters to the web service at .

If the token ID received at the web service is not expired the web service performs the one or more actions required to answer the request from the client application and returns the answer along with a new or refreshed session token to the client application .

Having received the refreshed session token from the web service the client application passes or sends the refreshed session token including a new token ID to the session token manager and thereby calls the check in method of the session pool component as a particular check in message . In response to receiving the check in method as a particular check in message the session token manager substitutes the previous originally send token ID for the session token with the new token ID as received from the web service . Subsequently the refreshed session token including the new token ID is made available for the client application .

In case there is no valid session token for the request from the client application in the unlocked hash structure represented in the unlocked property an empty token ID is returned to the client application . In this case e.g. there does not exists a valid session token for the request from the client application and an empty token ID is therefore returned to the client application the steps to are performed.

If the token ID more specifically the pair comprising the token ID and the session token returned at and sent from the client application to the web service at is empty the client application calls the web service with user credentials to initialize a new session. The web service performs the one or more actions required to answer the request from the client application and the web service returns the answer along with a new session token to the client application .

If the token ID returned at and sent from the client application to the web service at is expired the web service returns an exception indicating an invalid session token with an invalid token ID at . The client application calls the remove method of the session component as a particular remove message to clean and or remove the corresponding session token that is expired from the pool of session tokens as managed by the token object component . For example the session token corresponding to the empty token ID is removed from the hash structures e.g. the hash session pool component and or the locked and or unlocked properties and as described above with reference to .

After having received an indication from the session token manager that the session token has been removed the client application calls the check out method as a particular check out message asking for a new session token and the described process may be repeated in the above described manner at step .

The personal computer may further include a hard disk drive for reading from and writing to a hard disk not shown and an external disk drive for reading from or writing to a removable disk . The removable disk may be a magnetic disk for a magnetic disk driver or an optical disk such as a CD ROM for an optical disk drive. The hard disk drive and the external disk drive are connected to the system bus by a hard disk drive interface and an external disk drive interface respectively. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the personal computer . The data structures may include relevant data for the implementation of the method for session token management as described above. The relevant data may be organized in a database for example a relational database management system or an object oriented database management system.

Although the exemplary environment described herein employs a hard disk not shown and an external disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks random access memories read only memories and the like may also be used in the exemplary operating environment.

A number of program modules may be stored on the hard disk external disk ROM or RAM including an operating system not shown one or more application programs other program modules not shown and program data . The application programs may include at least a part of the functionality as depicted in B and .

A user may enter commands and information as discussed below into the personal computer through input devices such as keyboard and mouse . Other input devices not shown may include a microphone or other sensors joystick game pad scanner or the like. These and other input devices may be connected to the processing unit through a serial port interface that is coupled to the system bus or may be collected by other interfaces such as a parallel port interface game port or a universal serial bus USB . Further information may be printed using printer . The printer and other parallel input output devices may be connected to the processing unit through parallel port interface . A monitor or other type of display device is also connected to the system bus via an interface such as a video input output . In addition to the monitor computing environment may include other peripheral output devices not shown such as speakers or other audible output.

The computing environment may communicate with other electronic devices such as a computer telephone wired or wireless personal digital assistant television or the like. To communicate the computer environment may operate in a networked environment using connections to one or more electronic devices. depicts the computer environment networked with remote computer . The remote computer may be another computing environment such as a server a router a network PC a peer device or other common network node and may include many or all of the elements described above relative to the computing environment . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in offices enterprise wide computer networks intranets and the Internet and may particularly be encrypted.

When used in a LAN networking environment the computing environment may be connected to the LAN through a network I O . When used in a WAN networking environment the computing environment may include a modem or other means for establishing communications over the WAN . The modem which may be internal or external to computing environment is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computing environment or portions thereof may be stored in a remote memory storage device resident on or accessible to remote computer . Furthermore other data relevant to the method for optimization of evaluation of a policy described above may be resident on or accessible via the remote computer . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the electronic devices may be used.

The above described computing system is only one example of the type of computing system that may be used to implement the method for session token management.

