---

title: Para-virtualized high-performance computing and GDI acceleration
abstract: The present invention extends to methods, systems, and computer program products for para-virtualized GPGPU computation and GDI acceleration. Some embodiments provide a compute shader to a guest application within a para-virtualized environment. A vGPU in a child partition presents compute shader DDIs for performing GPGPU computations to a guest application. A render component in a root partition receives compute shader commands from the vGPU and schedules the commands for execution at the physical GPU. Other embodiments provide GPU-accelerated GDI rendering capabilities to a guest application within a para-virtualized environment. A vGPU in a child partition provides an API for receiving GDI commands, and sends GDI commands and data to a render component in a root partition. The render component schedules the GDI commands on a 3D rendering device. The 3D rendering device executes the GDI commands at the physical GPU using a sharable GDI surface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08941670&OS=08941670&RS=08941670
owner: Microsoft Corporation
number: 08941670
owner_city: Redmond
owner_country: US
publication_date: 20120117
---
Computer systems and related technology affect many aspects of society. Indeed the computer system s ability to process information has transformed the way we live and work. Computer systems now commonly perform a host of tasks e.g. word processing scheduling accounting etc. that prior to the advent of the computer system were performed manually. More recently computer systems have been coupled to one another and to other electronic devices to form both wired and wireless computer networks over which the computer systems and other electronic devices can transfer electronic data. Accordingly the performance of many computing tasks is distributed across a number of different computer systems and or a number of different computing environments.

Some computer systems are configured to provide para virtualized execution environments which allow guest software to share hardware devices of a single computer system in an isolated manner. Generally para virtualized execution environments provide a plurality of partitions supported by a hypervisor. The partitions provide isolation between different guest software. The partitions generally include a root partition and one or more child partitions. The root partition runs a host operating system and manages a virtualization stack. The root partition may gain access to physical devices. Each child partition hosts guest software e.g. guest operating systems and guest applications . Child partitions are provided access to physical devices through virtual devices and software interfaces of the hypervisor.

Some para virtualized execution environments provide child partitions and guest software executing therein with para virtualized access to one or more physical graphics processing units GPUs . Generally each implementation of para virtualized access to physical GPUs supports particular three dimensional rendering framework s . As such guest software may be unable to access capabilities of a physical GPU if that guest software is executing within a para virtualized execution environment that does not support those capabilities. In some cases the guest software may rely on using a virtualized CPU to perform tasks not supported para virtualized access to a physical GPU incurring a potentially significant performance penalty.

The present invention extends to methods systems and computer program products for providing high performance computing and graphics device interface GDI acceleration in a para virtualized environment.

Some embodiments include a method for providing graphics processing unit GPU accelerated computing functionality to a guest application executing in a child partition of a para virtualized execution environment. A virtual machine session is instantiated. A hypervisor in the virtual machine session provides i a root partition which has access to a physical GPU and ii the child partition which executes the guest application .

A virtualized graphics processing unit vGPU executing within the child partition is presented to the guest application. A user mode driver UMD of the vGPU presents compute shader device driver interfaces DDIs to the guest application. The compute shader DDIs provide an application programming interface API that enables the guest application to send compute shader commands to the vGPU. The compute shader commands are used to perform general purpose graphics processing unit GPGPU computations at the physical GPU using a compute shader. A render component executing within the root partition receives a physical GPU specific compute shader command from the vGPU and schedules the command for execution at the physical GPU.

Additional embodiments include a method for providing GPU accelerated GDI functionality to a guest application executing in a child partition of a para virtualized execution environment. A virtual machine session is instantiated. A hypervisor in the virtual machine session provides i a root partition having access to a physical GPU and ii the child partition which executes the guest application.

A vGPU which executes within the child partition is presented to the guest application. An API of a kernel mode driver KMD of the vGPU enables the guest operating system to accelerate GDI rendering commands submitted by a guest application. These commands are then processed by the KMD of the vGPU.

A render component executing within the root partition receives a GDI acceleration rendering command from the vGPU. In response the render component schedules the GDI acceleration rendering command on a GDI composition device within the root partition. The GDI composition device is configured to execute the GDI acceleration rendering command at the physical GPU. The GDI composition device marks a GDI surface corresponding for the GDI command as sharable for composition by the desktop.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Additional features and advantages of the invention will be set forth in the description which follows and in part will be obvious from the description or may be learned by the practice of the invention. The features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. These and other features of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

The present invention extends to methods systems and computer program products for providing high performance computing and graphics device interface GDI acceleration in a para virtualized environment.

Some embodiments include a method for providing graphics processing unit GPU accelerated computing functionality to a guest application executing in a child partition of a para virtualized execution environment. A virtual machine session is instantiated. A hypervisor in the virtual machine session provides i a root partition which has access to a physical GPU and ii the child partition which executes the guest application .

A virtualized graphics processing unit vGPU executing within the child partition is presented to the guest application. A user mode driver UMD of the vGPU presents compute shader device driver interfaces DDIs to the guest application. The compute shader DDIs provide an application programming interface API that enables the guest application to send compute shader commands to the vGPU. The compute shader commands are used to perform general purpose graphics processing unit GPGPU computations at the physical GPU using a compute shader. A render component executing within the root partition receives a physical GPU specific compute shader command from the vGPU and schedules the command for execution at the physical GPU.

Additional embodiments include a method for providing GPU accelerated GDI functionality to a guest application executing in a child partition of a para virtualized execution environment. A virtual machine session is instantiated. A hypervisor in the virtual machine session provides i a root partition having access to a physical GPU and ii the child partition which executes the guest application.

A vGPU which executes within the child partition is presented to the guest application. An API of a kernel mode driver KMD of the vGPU enables the guest operating system to accelerate GDI rendering commands submitted by a guest application. These commands are then processed by the KMD of the vGPU.

A render component executing within the root partition receives a GDI acceleration rendering command from the vGPU. In response the render component schedules the GDI acceleration rendering command on a GDI composition device within the root partition. The GDI composition device is configured to execute the GDI acceleration rendering command at the physical GPU. The GDI composition device marks a GDI surface corresponding for the GDI command as sharable for composition by the desktop.

Embodiments of the present invention may comprise or utilize a special purpose or general purpose computer including computer hardware such as for example one or more processors and system memory as discussed in greater detail below. Embodiments within the scope of the present invention also include physical and other computer readable media for carrying or storing computer executable instructions and or data structures. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer readable media that store computer executable instructions are computer storage media devices . Computer readable media that carry computer executable instructions are transmission media. Thus by way of example and not limitation embodiments of the invention can comprise at least two distinctly different kinds of computer readable media computer storage media devices and transmission media.

Computer storage media devices includes RAM ROM EEPROM CD ROM solid state drives SSDs e.g. based on RAM Flash memory phase change memory PCM other types of memory other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer.

A network is defined as one or more data links that enable the transport of electronic data between computer systems and or modules and or other electronic devices. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a transmission medium. Transmissions media can include a network and or data links which can be used to carry desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer readable media.

Further upon reaching various computer system components program code means in the form of computer executable instructions or data structures can be transferred automatically from transmission media to computer storage media devices or vice versa . For example computer executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module e.g. a NIC and then eventually transferred to computer system RAM and or to less volatile computer storage media devices at a computer system. Thus it should be understood that computer storage media devices can be included in computer system components that also or even primarily utilize transmission media.

Computer executable instructions comprise for example instructions and data which when executed at a processor cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language or even source code. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather the described features and acts are disclosed as example forms of implementing the claims.

Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations including personal computers desktop computers laptop computers message processors hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers mobile telephones PDAs tablets pagers routers switches and the like. The invention may also be practiced in distributed system environments where local and remote computer systems which are linked either by hardwired data links wireless data links or by a combination of hardwired and wireless data links through a network both perform tasks. In a distributed system environment program modules may be located in both local and remote memory storage devices.

Physical GPU is a processing device configured to perform parallel processing tasks such as graphics rendering. Physical GPU includes support for executing a compute shader which enables physical GPU to perform general purpose i.e. non graphics rendering calculations. In other words physical GPU supports GPGPU computation on a compute shader device.

Computer architecture also includes hypervisor . Hypervisor executes on top of physical hardware and supports a virtualization platform. The virtualization platform provides a plurality of partitions. Each partition provides a logical unit of isolation in which guest software can be executed. For example computer architecture includes root partition and child partition .

Root partition executes a host operating system and has direct access to physical hardware as depicted by root partition appearing over physical hardware . Each child partition provides an execution environment for executing guest software e.g. operating systems and or applications and may access physical hardware indirectly in a para virtualized manner. That is through hypervisor each child partition provides one or more software interfaces e.g. virtualized hardware to guest software. The guest software in turn uses the software interface s to access physical hardware . Hypervisor can provide support for a plurality of child partitions.

As depicted guest software executes within child partition . Guest software comprises any appropriate guest software such as an operating system and or an application program executing within an operating system. Guest software includes or uses graphics runtime . Graphics runtime provides a framework e.g. APIs for rendering graphics and or performing GPGPU computation.

Child partition provides guest software access to vGPU . vGPU virtualizes physical GPU enabling guest software to indirectly access physical GPU . As such vGPU is configured to expose all or a subset of the functionality of at least one rendering framework corresponding to graphics runtime to guest software along with any corresponding functionality of physical GPU

In particular vGPU is configured to expose one or more software interfaces that enable guest software to call vGPU to access compute shader functionality of physical GPU for performing GPGPU computation at physical GPU . vGPU in turn works in conjunction with a render component in root partition to perform compute shader functionality on physical GPU . As depicted for example root partition includes render component . Render component in turn includes compute shader component for handing compute shader commands and data. vGPU remotes compute shader commands and data to render component to perform the rendering on physical GPU

Render component schedules any graphics commands received from vGPU for execution on physical GPU . Render component also creates proper context for executing those commands. As such render component is configured to use compute shader component to schedule execution of compute shader related commands that are received from vGPU in child partition on physical GPU

As depicted vGPU includes user mode driver executing in a user mode of child partition and kernel mode driver executing in a kernel mode of child partition . User mode driver exposes device driver interfaces DDIs of at least one rendering framework including DDIs related to compute shader GPGPU functionality depicted as compute shader DDIs . Compute shader DDIs enable guest software to make calls to vGPU for performance of GPGPU computations.

In some embodiments user mode driver exposes DDIs of a rendering framework that supports compute shader functionality e.g. DirectX versions 10 and or 11 from Microsoft Corporation . For example in embodiments when user mode driver exposes compute shader functionality of DirectX versions 10 and 11 user mode driver may expose the one or more of the following DDIs as part of compute shader DDIs 

In some embodiments vGPU may also include legacy user mode driver executing in user mode of child partition . Legacy user mode driver may expose DDIs of a legacy version of one or more rendering frameworks. For example legacy user mode driver may support a legacy version of DirectX e.g. DirectX version 9 or a legacy version any other rendering framework e.g. OpenGL from Silicon Graphics Inc. .

Generally user mode driver is configured to construct hardware contexts and command buffers. In particular user mode driver converts graphic commands issued by guest software or graphics runtime of guest software into hardware specific commands. For example user mode driver may receive graphics commands relating to GPGPU computations using a compute shader from guest software . User mode driver is configured to convert graphics commands into hardware specific commands i.e. commands that are specific to physical GPU . As part of the conversion user mode driver maintains proper hardware context for physical GPU . For example user mode driver translates logical values for settings affecting a graphics pipeline into values and corresponding physical settings. User mode driver is also configured to store converted hardware specific commands in command buffer and send command buffer to kernel mode driver .

In addition vGPU includes kernel mode driver executing in kernel mode of child partition which includes compute shader component . Kernel mode driver is configured to receive command buffers e.g. command buffer and to construct corresponding direct memory access DMA buffers. When it is time for a DMA buffer to be processed a GPU scheduler calls kernel mode driver . Kernel mode driver then handles the specifics of actually submitting the DMA buffer to physical GPU

Method includes an act of instantiating a virtual machine session including instantiating a hypervisor that provides i a root partition having access to the physical GPU and ii the child partition which executes the guest application act . For example computing environment can instantiate hypervisor as part of instantiating a virtual machine session. Hypervisor provides root partition and child partition . Root partition has access to physical GPU . Child partition executes one or more guest applications including guest application and has indirect access to physical GPU

Method also includes an act of presenting a vGPU to the guest application the vGPU executing within the child partition including presenting a plurality of compute shader DDIs to the guest application as part of a UMD of the vGPU the plurality of compute shader DDIs providing an API that enables the guest application to send compute shader commands to the vGPU for performing GPGPU computations at the physical GPU using a compute shader act . For example child partition can present vGPU to guest software . vGPU includes user mode driver . User mode driver presents compute shader DDIs which enable guest software to call vGPU to perform compute shader GPGPU calculations at physical GPU . For example guest software or graphics runtime can send graphics commands to vGPU for performance of GPGPU calculations at physical GPU

User mode driver converts received graphics commands to physical hardware specific commands e.g. as part of command buffer . vGPU then remotes compute shader commands and data including physical hardware specific commands to render component .

Method also includes an act of a render component executing within the root partition receiving a physical GPU specific compute shader command from the vGPU act . For example render component which executes in root partition can receive compute shader commands and data including a physical GPU specific compute shader command from vGPU .

Method also includes an act of the render component scheduling the physical GPU specific compute shader command for execution at the physical GPU act . For example compute shader component can schedule the received physical GPU specific compute shader command for execution on a compute shader device at physical GPU . In doing so compute shader component can configure and maintain appropriate context for execution of the physical GPU specific compute shader command.

In addition to providing guest software para virtualized compute shader access to physical GPU i.e. GPGPU computational ability embodiments extend to providing guest software para virtualized GDI acceleration at a physical GPU. illustrates an alternate computer architecture that enables para virtualized GDI acceleration by physical GPU hardware. Thus computer architecture enables guest software to request GDI command acceleration using a physical GPU as opposed to handling GDI commands with a physical or virtual central processing unit.

Within child partition computer architecture provides components that enable accelerated rendering of GDI commands on physical GPU when those commands are issued by guest software . As depicted for example child partition includes GDI interface which is configured to communicate with graphics runtime e.g. a graphics runtime that is part of a guest operating system . Furthermore vGPU is configured to process GDI acceleration commands received from GDI interface at GDI component of kernel mode driver .

GDI interface is configured to expose one or more GDI command interfaces to graphics runtime and to forward GDI accelerated commands received from graphics runtime to kernel mode driver of vGPU . Thus at the request of guest software graphics runtime is enabled to send GDI accelerated graphics commands to kernel mode driver of vGPU via GDI interface to accelerate GDI command execution at physical GPU

GDI component of kernel mode driver is configured to implement one or more GDI command interfaces along with corresponding hardware rendering operation s . In some embodiments vGPU implements and exposes GDI commands corresponding to a particular version of DirectX e.g. DirectX versions 10 and or 11 . For example GDI component may expose and implement a DxgkDdiRenderKm interface along with corresponding hardware rendering operations. While GDI component may implement any appropriate GDI operations in some embodiments GDI component implements the following operations 

Kernel mode driver is configured to send GDI commands and data to render component within root partition . GDI commands and data include information relating to 3D rendering devices and contexts for executing GDI acceleration commands. Render component includes GDI component which is configured to receive GDI commands and data and to execute received GDI acceleration commands at physical GPU

In particular GDI component is configured to create a GDI surface and a corresponding 3D rendering or composition device e.g. a D3D device . The 3D rendering device is configured to provide appropriate context for executing GDI accelerated commands. The GDI surface can comprise any appropriate GDI surface such as any of the following GDI surface types 

Method includes an act of instantiating a virtual machine session including instantiating a hypervisor that provides i a root partition having access to the physical GPU and ii the child partition which executes the guest application act . For example computing environment can instantiate hypervisor as part of instantiating a virtual machine session. Hypervisor provides root partition and child partition . Root partition has access to physical GPU . Child partition executes one or more guest applications including guest application and has indirect access to physical GPU

Method also includes an act of presenting a vGPU to the guest application the vGPU executing within the child partition including presenting an API of a KMD of the vGPU that enables a guest operating system to accelerate GDI rendering commands used by the guest application to the vGPU for processing by the KMD of the vGPU act . For example child partition presents vGPU and GDI interface to guest software . GDI interface enables graphics runtime e.g. a graphics runtime of an operating system to accelerate GDI rendering commands used by guest software to vGPU for processing by kernel mode driver and for acceleration by physical GPU . For example graphics runtime can send graphics commands to kernel mode driver through GDI interface for performance of GDI acceleration commands. vGPU uses GDI component of kernel mode driver to process received GDI commands and to send GDI commands and data to render component in root partition .

Method also includes an act of a render component executing within the root partition receiving a GDI acceleration rendering command from the vGPU act . For example render component which executes in root partition can receive GDI commands and data from vGPU .

Method also includes an act of the render component scheduling the GDI acceleration rendering command on a GDI composition device within the root partition the GDI composition device being configured to execute the at least one GDI acceleration rendering command at the physical GPU the GDI composition device also being configured to mark a GDI surface corresponding to the at least one GDI acceleration rendering command as sharable for composition by a desktop act . For example GDI component can create a 3D rendering composition device and a GDI surface for execution of GDI acceleration commands and can schedule the GDI acceleration commands for execution on the 3D rendering composition device. The GDI surface can be marked as sharable for composition at the desktop.

In some embodiments a single computer architecture can provide both compute shader GPGPU functionality and para virtualized GDI acceleration. illustrates an example computer architecture that enables para virtualized access to compute shader functionality and para virtualized GDI acceleration by physical GPU hardware. For example computer architecture includes GDI interface and vGPU . vGPU contains user mode driver which includes compute shader DDIs . vGPU also contains kernel mode driver that includes both compute shader component and GDI component .

vGPU executing in child partition can communicate both compute shader commands and data and GDI commands and data to render component executing in root partition . Render component includes both compute shader component and GDI component for executing compute shader and GDI commands at GPU . It will be appreciated that computer architecture by including both compute shader and GDI functionality can provide increased functionality and greater compatibility with particular rendering frameworks.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

