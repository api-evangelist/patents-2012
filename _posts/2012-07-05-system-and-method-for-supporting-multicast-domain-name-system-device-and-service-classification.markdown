---

title: System and method for supporting multicast domain name system device and service classification
abstract: According to one embodiment, a digital device is adapted to support one or more network services. The digital device comprises processing circuitry, and a memory coupled to the processing circuitry. The memory comprises logic that, when executed by the processing circuit, is configured to (i) detect, in response to a triggering event, one or more network services advertised by at least one digital device within a network, and (ii) store information only directed to the one or more network services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09350815&OS=09350815&RS=09350815
owner: ARUBA NETWORKS, INC.
number: 09350815
owner_city: Sunnyvale
owner_country: US
publication_date: 20120705
---
Embodiments of the present disclosure relate to the field of network communications and in particular a system and method for supporting multicast domain name system mDNS message exchanges across different subnetworks and or different virtual local area networks VLANs .

A Domain Name System is a hierarchical distributed naming system that is utilized by network devices to locate services or other network devices through the use of a domain name. As commonly known a domain name is an alphanumeric string that represents an Internet Protocol IP resource such as a server hosting a web site for example. An important function of domain names is to provide users with an easily recognizable and memorable name for the IP resource instead of using a forgettable numeric based address.

Domain names are usually organized into various sub domain levels including a top level domain e.g. com org net along with a second level domain being the wording directly to the left of the top level domain name. For instance example.com features the second level domain example separated from the top level domain com by a delimiter . .

Typically a Domain Name System DNS features a centralized DNS server that is adapted to translate a received domain name into a corresponding IP address. Furthermore the DNS server is responsible for storing DNS records for a domain name e.g. address records name server NS records and mail exchanger MX records within an internal database and answering queries against the database. Therefore the addressing information is used for the purpose of locating services as well as other network devices.

Over a decade ago a derivative DNS scheme was developed. Referred to as Multicast Domain Name System mDNS this communication protocol enables the use of DNS programming interfaces and packet formats but operates without the need for a dedicated DNS server. The conventional mDNS protocol is devised to operate for mDNS devices on a shared local area network wherein all devices talk to each other directly using a specified mDNS multicast group address. This conventional functionality is limited to a single subnet where all mDNS capable devices can communicate directly with each other only within a subnet.

Currently mDNS fails to provide any device classifications. Therefore as the mDNS proxy supports multicast mDNS packets across subnet boundaries the large number of mDNS records for storage and maintenance would become a memory and processing bottleneck. An improved mechanism for managing mDNS records through device and service classification is needed.

In the following description several specific details are presented to provide a thorough understanding of the invention. While the context of the disclosure is directed to a scheme for supporting mDNS type multicast Domain Name System communications within a network extending across network boundaries one skilled in the relevant art may recognize however that the concepts and techniques disclosed herein can be practiced without certain details such as the exclusion of one or more operations logic unit s or the like.

Herein certain terminology is used to describe features for embodiments of the disclosure. For example the term digital device generally refers to any hardware device that includes a processor. Examples of digital devices include a computer a tablet a laptop a desktop a netbook a server a web server authentication server an authentication authorization accounting AAA server a Domain Name System DNS server a Dynamic Host Configuration Protocol DHCP server an Internet Protocol IP server a Virtual Private Network VPN server a network policy server a mainframe a television a content receiver a set top box a video gaming console a television peripheral such as Apple TV a printer a mobile handset a smartphone a personal digital assistant PDA a wireless receiver and or transmitter an access point a base station a communication management device a router a switch and or a controller.

An access point is a digital device which may be communicatively coupled to one or more networks e.g. Internet an intranet etc. . The access point also referred to as AP communicates with a wired network and client devices over an interconnect.

A controller is a combination of hardware software and or firmware that is configured to process and route information between digital devices within a network. In an example a controller receives information from digital devices within a network and forwards the information to a target access point. In another example the controller receives information from an access point and forwards the information to digital devices within a network. A controller may support an access point by one or more of handling network security enforcing policies managing authentication encryption virtual private network VPN connections IPv4 and IPv6 Layer 3 networking a Policy Enforcement Firewall PEF Adaptive Radio Management ARM Spectrum Analysis admission control Quality of Service QoS and Wireless Intrusion Protection capabilities.

When a digital device is adapted for communications with a network in accordance with multicast Domain Name System mDNS protocol the digital device referred to as mDNS device may be configured as a server a client or both. A server mDNS device is a digital device that may be configured to provide a network service. A client mDNS device is a digital device that may be configured to receive a network service.

It is contemplated that a digital device may include hardware logic such as one or more of the following i processing circuitry ii one or more communication interfaces such as a radio e.g. component that handles the wireless data transmission reception and or a physical connector to support wired connectivity and or iii a non transitory computer readable storage media e.g. a programmable circuit a semiconductor memory such as a volatile memory such as random access memory RAM or non volatile memory such as read only memory power backed RAM flash memory phase change memory or the like a hard disk drive an optical disc drive etc. or any connector for receiving a portable memory device such as a Universal Serial Bus USB flash drive portable hard disk drive or the like.

Herein the term logic or logic unit is generally defined as hardware and or software. For example as hardware logic may include processing circuitry e.g. a microcontroller any type of processor a programmable gate array an application specific integrated circuit etc. semiconductor memory combinatorial logic or the like. As software logic may be one or more software modules such as executable code in the form of an executable application an application programming interface API a subroutine a function a procedure an object method implementation an applet a servlet a routine source code object code a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory computer readable transmission media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals .

The term interconnect is a communication path between two or more digital devices. The communication path may include wired and or wireless segments. Examples of wired and or wireless segments include electrical wiring optical fiber cable bus trace or a wireless channel using infrared radio frequency RF or any other wired wireless signaling mechanism.

The term message is a grouping of information which may be placed in the form of a packet a stream e.g. a sequence of packets a frame an Asynchronous Transfer Mode ATM cell or any other series of bits having a prescribed format. An example of a type of message is an mDNS message having a format in compliance with the mDNS protocol or a protocol based at least in part on the mDNS protocol.

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

Certain details are set forth below in order to provide a thorough understanding of various embodiments of the disclosure albeit the invention may be practiced through many embodiments other that those illustrated. Well known logic and operations may not be set forth in detail in order to avoid unnecessarily obscuring this description. Moreover the illustrated embodiments of the disclosure and the description associated therewith should be considered as examples of the principles of the invention and not intended to limit the disclosure to those specific embodiments. It should be understood that this disclosure covers all modifications equivalents and alternatives falling within the spirit and scope of the present disclosure.

According to one embodiment of the disclosure mDNS proxy logic may be adapted to process records based on a service name. The service name is part of the mDNS Pointer PTR record and happens to be the first record in the list of records advertised by an mDNS device for a given service. The mDNS proxy logic may be adapted to record a Media Access Control MAC address of a first PTR record for a given service. This would thus identify the server device for a service.

The mDNS proxy logic classifies records to be associated with a server device based on server s MAC address. Once the server s MAC address is known records only from that server are cached by the mDNS proxy logic. All other records are discarded by the mDNS proxy logic.

A second level of memory and processing optimization is done by further classifying all records received from a server mDNS device. The mDNS proxy logic will discard records received from a server mDNS device that are not directed to a requested service as some server mDNS devices may support multiple services.

The third level of classification is done when the mDNS proxy logic is adapted to store specific records from a server mDNS device. According to one embodiment of the disclosure the record storage is directed to those records that are needed by an intended user to successfully use the advertised service.

Accordingly the mDNS proxy logic may support 1000 server mDNS devices and 10 000 client mDNS devices while consuming only few megabytes MB of memory 

Referring to a general block diagram of an extended local area network operating in accordance with a communication protocol that is based on multicast Domain Name System mDNS is shown. This communication protocol referred to herein as an enhanced mDNS protocol supports conventional mDNS protocol and or additional capabilities such as device classification an optimized record handling and or unicast response messaging as described below.

Herein network comprises a controller in communications with one or more wireless transceivers N 1 over a wired network . Wireless transceivers e.g. access points etc. are adapted to provide wireless connectivity to a plurality M of mDNS devices M 2 M 6 which may be members of the same virtual local area network VLAN A or perhaps different VLANs VLAN A VLAN B VLAN C . As further shown in controller may be adapted for communications with a first mDNS device e.g. networked printer and or a second mDNS device e.g. Apple TV both of which are directly coupled to wired network and are members of different VLANs VLAN D VLAN E .

In accordance with the enhanced mDNS protocol all mDNS messages terminate on controller . In other words controller operates as an enhanced mDNS proxy for mDNS devices and and thus is configured to receive all mDNS messages transmitted over network from a source mDNS device. These mDNS messages may include but are not limited or restricted to i mDNS Response messages that are adapted to advertise records identifying one or more services offered by a particular mDNS device and ii mDNS Request messages that are adapted to request one or more services identified in that message.

Based on the type of mDNS message received from a source mDNS device controller is configured to classify that device as either a server mDNS device or a client mDNS device. For instance upon determining that mDNS device is advertising records related to one or more services controller may classify this source mDNS device as a server mDNS device. Similarly upon determining that mDNS device is interested in consuming the services provided by one or more server mDNS devices controller may classify mDNS device as a client mDNS device.

According to one embodiment of the disclosure it is contemplated that controller performs device classification at least partially based on i whether any services are being advertised by the source mDNS device and ii what type of services if any are being advertised. For instance as an illustrative example controller may classify an mDNS device as a server mDNS device upon receipt of an mDNS Response message accompanied by a record directed to a service e.g. AirPlay configured to be supported by controller . Similarly controller may classify an mDNS device as a client mDNS device upon receipt of an mDNS Request message requesting a service or receipt of an mDNS Response message accompanied by a record directed to a service e.g. AirPrint that is not configured as being supported by controller .

It is noted that these device classes are not mutually exclusive as the source mDNS device may operate in one or both of these classes. For instance mDNS device could operate as a user by requesting particular services but may advertise a different service.

Referring now to an exemplary block diagram of controller operating as an enhanced mDNS proxy for network of is shown. Herein controller comprises processing circuitry and memory which are coupled via interconnects to one or more interfaces that enable controller to communicate with other networking devices. For instance interface may be implemented as a physical interface including one or more ports for wired connectors. Additionally or in the alternative interface may be implemented with one or more antenna units for transmitting and or receiving wireless signals from other networking devices.

As shown in according to one embodiment of the disclosure processing circuitry is coupled to memory for execution of enhanced mDNS proxy logic which is stored in memory . Enhanced mDNS proxy logic comprises a plurality of logic units configured to perform device classification and optimal mDNS record storage operations in accordance with the enhanced mDNS protocol as described below. These logic units include but are not limited or restricted to service configuration logic network discovery logic device classification logic record storage logic and server record maintenance logic .

Service configuration logic is adapted to enable an administrator to control which services are supported by controller . Such control may be conducted through command line interface CLI commands for example. For instance according to one embodiment of the invention CLI commands may be used to enable disable enhanced mDNS proxy logic see CLI command 1 below as well as to enable disable different enhanced mDNS proxy services as shown in CLI commands 2 where a first type of service is enabled while a second service type is disabled.

Additionally certain enhanced mDNS proxy services may be pre configured and made available as a part of a factory default configuration. Examples of these pre configured services may include AirPlay and AirPrint services.

The AirPlay service is a protocol that allows for wireless streaming of audio and or video content between two mDNS devices. One type of mDNS device Apple TV provides AirPlay services that will enable a user to seamlessly discover Apple TVs and do mirroring of audio and video content. As identified above AirPlay service may have the following factory default service ids  airplay.tcp.

The AirPrint service is a protocol that enables printing of data sent over a wireless interconnect to specific printers without previous installation of printer specific drivers. The AirPrint service may have a number of factory default service ids including  ipp. tcp and  pdl datastream. tcp as shown above.

Referring still to the conventional mDNS protocol is devised to operate for mDNS devices on a shared local area network wherein all devices talk to each other directly using a specified mDNS multicast group address. In contrast the enhanced mDNS protocol introduces the concept of a proxy namely enhanced mDNS proxy logic which is responsible for disseminating the required filtered mDNS records to requesting client mDNS devices. This additional concept now formulates a set of requirements where network discovery is one of these requirements.

Unlike the conventional mDNS protocol the enhanced mDNS protocol supports communications across networks including but not limited or restricted to subnets and or VLANs without any reconfiguration of local area network of . In an attempt to mitigate mDNS multicast traffic that will increase as wireless connectivity demands grow the enhanced mDNS protocol relies on unicast messaging except for a few noted exceptions. According to one embodiment the unicast message is an Open System Interconnect OSI Layer 2 L2 unicast message containing the embedded L3 multicast packet without any modifications. A header of the L2 unicast message would contain the Media Access Control MAC address for the destination mDNS device instead of the mDNS multicast MAC address.

While controller normally relies on unicast messaging in providing service records to client mDNS devices it is contemplated that in response to certain events discovery network processes are conducted by network discovery logic to learn the network topology. According to one embodiment of this disclosure these events may include but are not limited or restricted to the following 1 discover network topology when enhanced mDNS proxy logic is initialized 2 discover network topology when enhanced mDNS proxy logic on controller is restarted 3 discover VLAN topology when a VLAN is configured 4 discover network topology when a new enhanced mDNS service is configured and or 5 discover server records when a new enhanced mDNS server is added to the network.

When initialized on controller enhanced mDNS proxy logic needs to learn the network topology as to which mDNS devices across different VLANs are advertising services and what records are being maintained by these server mDNS devices. As a result network discovery logic is controlled to send out Query messages for each VLAN interface. These messages force the server mDNS devices on the network to respond with their latest status which is stored by enhanced mDNS proxy logic for use in responding to subsequent Request messages from client mDNS devices. Network discovery logic uses a multicast Query message for initial network discovery.

Enhanced mDNS proxy logic is adapted to receive VLAN operation state change information. As a result when a new VLAN is configured on controller network discovery logic performs a network discovery for this VLAN. More specifically network discovery logic sends out a multicast Query message to learn about all server mDNS devices on this particular VLAN. The Query message forces the server mDNS devices on this VLAN to respond with their latest status which is stored by enhanced mDNS proxy logic for use in responding to subsequent Request messages from client mDNS devices deployed across VLANs. This assists enhanced mDNS proxy logic to be synchronous with server mDNS devices on a newly configured VLAN.

The enhanced mDNS protocol optimizes record storage through a matching and coordination of enhanced mDNS services. In other words enhanced mDNS proxy logic considers only those server mDNS devices which advertise records pertaining to configured services. As a result when a new enhanced mDNS service is configured to be supported by controller network discovery logic attempts to discover all server mDNS devices across all VLANs which are relevant in the context of this service. Network discovery logic may be adapted to use a multicast Query packet to be sent out for each VLAN.

Network discovery logic receives information that indicates authentication of a new mDNS device. In response network discovery logic sends a unicast Query packet to this new mDNS device to obtain information associated with the new mDNS device. If the mDNS device is classified as a server mDNS device network discovery logic obtains only those mDNS records directed to service s supported by enhanced mDNS proxy logic . If the mDNS device is classified as a client mDNS device network discovery logic stores at least the MAC and VLAN information for client mDNS device within a second storage area of storage .

Referring still to device classification logic is adapted to detect from messages received from mDNS device whether the source mDNS device should be classified as a server mDNS device or a client mDNS device. According to one embodiment of the disclosure an mDNS device is classified as a server upon receipt of an mDNS message including a record directed to a service supported by controller . The classification of the mDNS device as a server is important as this classification enables all subsequent mDNS records from this server mDNS device to be stored by device classification logic within first storage area of storage also referred to as the server storage area .

As shown in enhanced mDNS proxy logic comprises record storage logic which is adapted to process and store records based on a service name. As shown in a service name may be part of an mDNS Pointer PTR record that is part of a group of records advertised by a server mDNS device. Record storage logic is adapted to maintain a list of device identifiers providing a particular enhanced mDNS service based on the MAC addresses for these devices.

Record storage logic is further adapted to classify all records to be associated with the identified server based on the identifier of the server mDNS device. Once the identifier for the server mDNS device is known records only from that server are stored within storage unit by record storage logic . All other non relevant mDNS records are discarded.

Furthermore record storage logic may perform an optional second level record storage operation in order to optimize record processing and usage of internal storage. This operation involves the classification of all records received from a server mDNS device. Record storage logic is adapted to discard records received from the server mDNS device that are not associated with a configured mDNS service.

For instance a server mDNS device may provide multiple services of which only one of these services is configured to be supported by controller . As illustrated above the server mDNS device may provide services for both AirPlay and AirPrint although only the records associated with AirPlay would be stored as the AirPlay service is enabled while the AirPrint service is disabled.

Controller also may perform an optional third level record storage operation in order to optimize record processing and usage of internal storage. This operation involves record storage logic only storing specific records from the server mDNS device which are needed for the client mDNS devices to successfully use the configured services. There could be a few optional records e.g. DNSEC security which acts as supporting records and may not be required to fulfill the service requested. Those records directed to be unnecessary to the successful operation of a configured service is not stored to optimize internal storage.

If upon expiration of an age out timer set to the TTL value the server record maintenance logic does not receive an mDNS Response message from the source mDNS device the record is removed from first storage area . Additionally all records associated with this source mDNS device may be removed whereby the source mDNS device is blacklisted. Of course if an mDNS Response message is received prior to expiration of the age out timer the age out timer would be reset with the new TTL value.

It is contemplated that different TTL values may be assigned to different records as different records tend to be more static in content than other records.

Referring to exemplary flowcharts of mDNS device classification and optimal mDNS record storage operations performed by the controller in accordance with the enhanced mDNS protocol is shown. At block the enhanced mDNS proxy logic is configured to enable selected services that are to be supported by the network. These services may be configured at manufacture of the controller pre configured and or may be configured after deployment through the use of CLI commands. The CLI commands enable a user to alter the state of a selected mDNS service s from a first state e.g. default state where the corresponding service is disabled to a second state e.g. active state where the corresponding service is enabled .

Upon receipt of an mDNS message originating from an mDNS device block a determination is made whether the mDNS message advertising at least one of the configured services block . This determination may be performed by analyzing the type of mDNS message received. For instance if an mDNS Request REQ message is received it can be determined that the REQ message is not involved in the advertising of services. In this situation the controller returns to await receipt of another mDNS message line . Optionally although not shown the controller may classify the mDNS device transmitting the message as a client mDNS device.

Alternatively upon receipt of an mDNS Response RESP message and records accompany the message it can be determined that the mDNS RESP message is involved in the advertising of services. This causes the controller to determine whether a guidance record namely the record used to identify a service advertised by an mDNS device such as a Pointer PTR record is the first record of a series of records provided with the received mDNS message block . If not the controller re fetches all of the records associated with the received mDNS RESP message that relates to the configured service and analyzes the records to ensure access to all of the records associated with the advertised service prior to determining which records are to be stored block .

If the PTR record is the first record or the records associated with the received mDNS RESP message have been re fetched the controller classifies the source mDNS device that is advertising the configured service as a server mDNS device block . As a result an identifier of the server mDNS device such as its MAC address is stored within the server storage area block . The storage of the MAC address of the server mDNS device is to identify which devices are classified as servers so that subsequent receipt of records from such mDNS devices which pertain to other configured services can be immediately stored.

Thereafter all records associated with the server mDNS device are classified block . After such classification a first subset of records from the server mDNS device that are associated with a configured service are identified block . In contrast all remaining records that are not associated with any configured service are discarded block .

Next with respect to the first subset of records a determination is made to identify a second subset of records that are required for successful use of one or more of the configured services block . After such determination the second subset of records are stored within the server storage area within internal memory of the controller for subsequent use in answering mDNS Query messages concerning services associated with these records block .

Referring now to an exemplary embodiment of a data structure for an mDNS record is shown. Herein mDNS record comprises an identity field an age out field and a data field .

As shown identity field comprises three sub fields namely a name sub field a type sub field and a class sub field . Name sub field comprises a pointer to the name of the record while type sub field identifies the particular type of record. Various types of records may include but are not limited or restricted to Address A IPv6 Address AAAA Pointer PTR Service Locator SRV and Text TXT . Class sub field simply identifies the network class e.g. Internet IN .

Age out field comprises a value that is used to set the longevity for the record before a refresh is required. According to one embodiment of the disclosure the value may be set by a Time to Live TTL value with address records tending to have the smallest TTL value to ensure timely detection whether or not the associated record is available on the sourced mDNS device.

The contents of data field depend on the particular type of mDNS record. For instance data field for an A type record and an AAAA include 32 bit and 128 bit IP addresses respectively. Data field for PTR type records include a pointer to a name. Pseudo code illustrating a composition of a record is set forth below in Table 1.

Referring to an exemplary embodiment of a record list maintained by controller within first storage area of . Record list comprises one or more record entries R 1 R 9 where each record entry comprises information extracted from messaging transmitted from the server mDNS device and collected by the controller.

As an illustrative example as shown record entry includes 1 address information extracted from an mDNS Response message advertising a particular service supported the enhanced mDNS proxy logic e.g. IP address MAC address state e.g. whether valid or invalid due to blacklisting and 2 information e.g. name type class TTL value and or and data extracted from a record corresponding to one of the configured services.

Referring now to an exemplary flowchart of the operations performed of the controller of for responding to an mDNS Request message is shown. The mDNS Request message is used by an mDNS device to request records associated with a particular service and mDNS device offering that service.

Initially an mDNS Request message is received from an mDNS device block . Upon receipt of this message the controller classifies the mDNS device as a client due to the fact that the mDNS Request message has no involvement in the advertisement of services block . Thereafter a determination is made as to whether a storage entry within the server storage area of internal storage identifies the server mDNS device that provides such services block . If not the mDNS Request message is dropped block . Otherwise the controller sends an mDNS Response message that includes the required records to perform such services and or an identifier of the server providing the requested service block .

As previously described enhanced mDNS proxy logic is initially configured to support one or more services. These services may be pre configured or configured using CLI commands. Herein enhanced mDNS proxy logic is initially configured to support a single service AirPlay .

After initialization at time t first mDNS device issues an mDNS Request message for AirPrint service  ipp. tcp.local . Upon receipt of mDNS Request message enhanced mDNS proxy logic ignores the request as it is directed to a service AirPrint that is not currently supported.

At time t third mDNS device issues an mDNS Response message which advertising AirPlay services. In particular mDNS Response message includes a series of records including Pointer PTR record an IPv4 address A record a Text TXT record a Service Locator SRV record and the like. As these records are deemed to be necessary to the successful operation of the AirPlay service these records are stored in the server storage area within storage memory of the controller.

At time t second mDNS device issues an mDNS Response message advertising a service e.g. AirPrint . Upon receipt of mDNS Response message enhanced mDNS proxy logic ignores the message as it is directed to a service AirPrint that is not currently supported by enhanced mDNS proxy logic .

At time t first mDNS device issues an mDNS Request message requesting information associated with AirPlay services. In response at time t enhanced mDNS proxy logic returns information associated with third mDNS device e.g. MAC address that provides such services along with records needed by first mDNS device to perform AirPlay services.

At time t first mDNS device issues another mDNS Request message for AirPrint services. Upon receipt of mDNS Request message enhanced mDNS proxy logic again ignores the request as it is directed to a service AirPrint that is not supported by enhanced mDNS proxy logic .

At time t third mDNS device issues an mDNS Response message advertising Remote Audio Output Protocol RAOP services. Upon receipt of mDNS Response message enhanced mDNS proxy logic ignores the message as it is directed to a service RAOP that is not currently supported by enhanced mDNS proxy logic .

At time t third mDNS device issues an mDNS Response message which advertising AirPlay services. In particular mDNS Response message includes a Domain Name System Security Extensions DNSSEC record which identifies a particular security scheme utilized by third mDNS device . As this record is not necessary for the successful operation of the AirPlay service DNSSEC record is not stored in the server storage area within the storage memory of the controller. Rather DNSSEC record is discarded.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. For instance multiple controllers may be deployed where one of the controllers is responsible for controlling the enhanced mDNS protocol while another controller is responsible for wireless local area network operations. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

