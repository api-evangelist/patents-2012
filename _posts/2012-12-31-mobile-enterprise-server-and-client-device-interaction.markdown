---

title: Mobile enterprise server and client device interaction
abstract: A system includes an application server that hosts a plurality of enterprise applications and stores enterprise data associated with each of the enterprise applications. A client device executes a client application that can provide access to each of the enterprise applications. The client application includes a memory protection engine that allocates a first memory location for the enterprise data transmitted to the client device so the enterprise data is accessible to each of the plurality of enterprise applications through the client application. A second allocated memory location is allocated for non-enterprise data. A mobile enterprise server transmits the enterprise data to the client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839354&OS=08839354&RS=08839354
owner: Verizon Patent and Licensing Inc.
number: 08839354
owner_city: Basking Ridge
owner_country: US
publication_date: 20121231
---
Under a Bring Your Own Device BYOD policy businesses provide email and other information to employee owned mobile devices or computers. Without a BYOD policy some businesses required employees to carry two cell phones one for business use and one for personal use. A BYOD policy however allows employees to user their own cell phone tablet computer personal computer etc. for both personal and business use. Businesses can also benefit from a BYOD policy. For example a BYOD policy may reduce operating expenses because the devices and associated data plans are owned and paid for by the employee.

While both businesses and employees can benefit from a Bring Your Own Device BYOD policy implementing a BYOD policy can present some challenges. For example business servers must accommodate different types of devices each with different hardware components operating systems memory capabilities networking capabilities and the like. Securing employee owned devices is also a challenge. One solution is a system that has a mobile enterprise server that facilitates communication between client devices and servers storing business application and information.

The exemplary system described below includes an application server that hosts a plurality of enterprise application and stores enterprise data associated with the enterprise application. A client device executes a client application that can provide access to the plurality of enterprise applications. The client application includes a memory protection engine that allocates one memory location for the enterprise data transmitted to the client device so the enterprise data is accessible to each of the plurality of enterprise applications through the client application. Another memory location is allocated for non enterprise data. A mobile enterprise server transmits the enterprise data to the client device. With the client application the mobile enterprise server can provide enterprise applications and enterprise data to client devices with different operating systems which is helpful when putting a BYOD policy into practice. The client application itself may be platform dependent and may be downloaded to the client device when the client device registers with the mobile enterprise server. Moreover the mobile enterprise server retains control over the security of the enterprise applications and enterprise data provided through the client application. The mobile enterprise server may apply different security policies to different types of client devices or for different users. The exemplary system described may take many different forms and include multiple and or alternate components and facilities. While an exemplary system is shown in the Figures the exemplary components illustrated are not intended to be limiting. Indeed additional or alternative components and or implementations may be used.

As illustrated in the system includes a client device an application server a mobile enterprise server and a security server in communication over a communication network .

The client devices A and B collectively may each include any number of components configured to execute computer readable instructions. In general the client device may include a mobile smartphone a tablet computer a laptop computer a desktop computer or the like. Exemplary components of the client device are discussed below with reference to and exemplary modules of the client device are discussed below with reference to . Although only two client devices are shown in the system may include any number of client devices .

The client device may be configured to execute a client application . The client application may allow the client device to access one or more enterprise applications collectively shown at hosted by the application server . Enterprise applications may include applications configured to implement a business tool. Examples of enterprise applications may include an email application a calendar application a document management system a billing application a project management application an information processing application e.g. a word processing application a spreadsheet application etc. or any other type of application that a business may wish to provide to employees. Examples of enterprise data include the information associated with each enterprise application in electronic form. For instance for an email application the enterprise data may include emails and attachments email addresses and the like. Some enterprise applications may share enterprise data. For instance an email application and address book application may share contact information stored as enterprise data.

The client device may store one or more enterprise applications enterprise data or both locally and the client application may allow an authorized user to use the enterprise application and view the enterprise data on the client device . The executable code to execute the enterprise application may be stored locally on the client device . The location of the enterprise application the enterprise data or both may be decided by a developer of the enterprise application . In one possible implementation the client application may access the enterprise application and enterprise data remotely through a web server via e.g. the Internet or another network. In this example implementation the executable code for the enterprise application may be stored on the web server such as the application server and the client application may include a link to the web server hosting the enterprise application . In a hybrid approach certain aspects of the enterprise application and enterprise data may be stored locally on the client device while others are stored remotely on the web server. In this hybrid approach the executable code for the enterprise application may be stored locally on the client device . The enterprise data may be retrieved from the application server and stored temporarily on the client device when the enterprise application is executed. Alternatively in the hybrid approach the enterprise application may be hosted on a web server such as the application server while the enterprise data is stored on the client device .

The client application may be device dependent meaning that the client application installed on the client device may depend upon the hardware or operating system of the client device . For example a client device with a mobile based operating system may use a different client application than a client device with a laptop or desktop computer based operating system. In addition client devices with different mobile operating systems may receive different versions of the client application . The operation of the client application may be generally the same regardless of the type of client device or operating system however. In one exemplary approach a user may access the client application from different client devices using e.g. the same credentials at each client device . Each client device may be subject to a different security policy discussed in greater detail below. In short the security policy for user s mobile phone may be different from the security policy for a user s desktop computer. In addition different types of client devices may format the enterprise applications and enterprise data differently for presentation to the user. For instance the client device may be configured to present the enterprise applications and enterprise data in a mobile format designed to be viewed on a smaller screen or presented in either portrait or landscape mode when the client device includes a mobile phone or tablet computer. A different format may be used when the enterprise application and enterprise data is presented to the user on a larger screen of a desktop or laptop computer. Furthermore different types of client devices may be configured to access the enterprise applications and enterprise data through the mobile enterprise server differently. Mobile phones and some table computers for example may be configured to generally access enterprise applications and enterprise data through a cellular telecommunications network while desktop computers laptop computers and some tablet computers may be configured to generally access enterprise applications and enterprise data through a wired or wireless computer network such as the Internet or a local area network LAN .

The application server may include any number of processing devices A and databases configured to host enterprise applications and enterprise data. The application server may provide access to the enterprise applications and enterprise data either by making the enterprise applications and enterprise data to the client device or by acting as a web server. Although only one application server is shown the system may include any number of application servers .

The mobile enterprise server may include any number of processing devices B configured to facilitate encrypted and secure communication between the client device and the application server . The mobile enterprise server may be configured to transmit enterprise applications encrypted enterprise data or both from the application server to the client device and vice versa. The mobile enterprise server may facilitate communication between the client device and the application server in accordance with a security policy stored on the mobile enterprise server and synchronized with the client device that governs interactions between the client device and application server .

The requirements of the security policy may be determined by an administrator of the mobile enterprise server and the security policy may be periodically or occasionally updated depending on various circumstances or type of client device . For instance the security policy for mobile phones may be different from the security policy for desktop computers. Further the security policy may be different for different users of the same type of client device or for the different types of client devices used by the same user e.g. a user s mobile phone may be subject to one security policy while the user s desktop computer may be subject to a different security policy . Also the security policy applied to the client device may depend on the information stored on the client device as discussed in greater detail below.

The security policy may require that only authorized client devices or authorized users of client devices receive enterprise applications and enterprise data. The mobile enterprise server may determine whether the client device is authorized based on credentials received from the client device . The credentials which may be generated by the client device or provided by a user may be received by the mobile enterprise server for authentication. The mobile enterprise server may authenticate the credentials or transmit the credentials to the security server discussed below for authentication.

The security policy may also require that the client device implement particular features to use the enterprise applications and enterprise data. The mobile enterprise server may be configured to only transmit enterprise applications and enterprise data to the client device if the client device implements those features in accordance with the security policy. For example the security policy may require that the client device encrypt stored enterprise data and allow the stored enterprise data to be remotely deleted in response to a command received from the mobile enterprise server . The mobile enterprise server may prohibit communication between the client device and the application server if these or other features are not implemented by the client device .

In one possible approach the mobile enterprise server may be configured to interact with any number of client devices . The actions of one client device may dictate how the mobile enterprise server manages enterprise data of another client device . For example a security breach of one client device may cause the mobile enterprise server to delete some or all enterprise data on one or more other client devices . This may occur if for instance sensitive information that could be used to access enterprise data stored on one or more client devices becomes compromised.

Other features of the mobile enterprise server are discussed below with reference to the modules shown in .

The security server may include a processing device C configured to authenticate the client device the user of the client device or both. The security server may be configured to receive credentials associated with the client device from mobile enterprise server . The security server may be configured to compare the received credentials with security information which may be stored in a database on the security server and may identify authorized client devices users or both. The security server may authenticate a client device or authorized user if the credentials indicate that authorization should succeed in view of the security information.

The network interface device may include computing hardware that allows the client device to communicate with other devices over the communication network . The network interface device may include an antenna for wireless communication and may be configured to generate signals in accordance with one or more communication protocols such as those for communicating over a packet switched network or a cellular network. The network interface device may be configured to receive messages from and transmit messages to the mobile enterprise server via the communication network .

The memory device may include any volatile or non volatile memory configured to electronically store information or computer executable instructions. The memory device may store enterprise applications enterprise data or both. In addition the memory device may store credentials or other authentication information used to authenticate the client device the user or both. Example instructions stored in the memory device may include instructions for allocating a memory location of the memory device for enterprise data encrypting the enterprise data decrypting the enterprise data preventing unauthorized access to the enterprise data receiving the security policy from the mobile enterprise server applying the security policy to the enterprise data and selectively deleting the enterprise data from the allocated memory location. The memory device may store additional or different instructions and information such as instructions and information directed to non enterprise applications that may be executed by the client device as well. The non enterprise instructions and information may include information about the owner of the client device or identification information of the client device . The instructions and information for non enterprise applications may depend on the client device . For instance if the client device includes a mobile phone the non enterprise applications stored in the memory device may include a phone application a camera application a social networking application productivity applications a messaging application etc. The memory location of the memory device may be allocated by reference to one or more adjacent or non adjacent memory addresses within the memory device . The amount of memory to allocate may be designated by the client application the enterprise application the application server or the mobile enterprise server . While only one memory device is shown in the client device may include any number of memory devices .

The user interface device may be configured to facilitate interaction between the client device and the user. The user interface device may include a display screen for presenting information to a user and an input device for receive inputs from the user. In one possible approach the user interface device may include a touch sensitive display that can present information to the user via e.g. a graphical user interface and receive user inputs through e.g. a virtual keyboard or other data representation such as a virtual button or icon. The user interface device may be configured to convert the user inputs received into signals representing the user s intent for interacting with the client device . The user interface device may be configured to identify certain gestures performed by the user as the user input. Example gestures may include dragging a data representation such as an icon to a different part of the touch sensitive screen or selecting a data representation. The user interface device may be configured to prompt the user to provide certain information such as credentials and present various types of information to the user such as a list of enterprise applications available via the client device and enterprise data associated the enterprise application .

The processor may include any processing device in communication with the network interface device the memory device and the user interface device . The processor may be configured to access and execute instructions stored in the memory device . In accordance with the instructions stored in the memory device the processor may allocate a memory location of the memory device for enterprise data encrypt the enterprise data decrypt the enterprise data prevent unauthorized access to the enterprise data receive and apply the security policy and selectively delete enterprise data from the allocated memory location. The processor may be configured to receive and interpret signals generated by the network interface device and the user interface device . Also the processor may be configured to output signals to e.g. present information to the user via the user interface device and communicate with the mobile enterprise server . The processor may include one or more modules to carry out these features and other features of the client device as discussed in greater detail below with respect to .

The communication engine may manage communications received from or transmitted to the mobile enterprise server and the processor may call the communication engine each time the client application is launched. When the client application is launched the communication engine may initiate communication with the mobile enterprise server or the security server to generate a session token. The session token may be used to authenticate communications between the mobile enterprise server and the client device during a communication session. The communication engine may be configured to parse Extensible Markup Language XML to decode certain communications from the mobile enterprise server . If the user has not provided credential to log into the client application the communication engine may call the log in engine to authenticate the user as discussed below.

The log in engine may be configured to retrieve credentials that can authenticate the user or the client device . Example credentials may include a username password encryption key token or biometric input. The log in engine may be configured to prompt the user to provide the credentials and any number of credentials may be required for authentication. The log in engine may transmit the credentials to the mobile enterprise server for authentication. In addition to the credentials the log in engine may further transmit other authentication information about the client device . Other authentication information may include a serial number device type i.e. laptop mobile phone tablet computer etc. operating system and version or the like. The log in engine may provide sufficient credentials and authentication information for the mobile enterprise server or security server to authenticate the client device the user or both. The mobile enterprise server or the security server may generate and transmit the session token after the client device is authenticated based on the information provided from the log in engine . The session token as discussed above may be used by the communication engine .

The log in engine may be called at various times during operation of the client device . For example the log in engine may be called when the client application or any enterprise application is launched to check whether a valid session token exists prior to allowing access to the enterprise application or any enterprise data via the client application . If the session token is invalid the log in engine may prompt the user to provide credentials for authentication and complete the authentication process described above. If the session token is valid the processor may transmit the session token to the mobile enterprise server to retrieve the latest cookie for the client application or enterprise application . The information contained within the cookie may be used when the client application or enterprise application is launched.

The log in engine may provide the client device with other features. The log in engine may for instance supply credentials for applications that are not accessed through the client application e.g. applications that are not enterprise applications . The log in engine may be configured to determine whether a launched application is an enterprise application . If the log in engine determines that a launched application is not an enterprise application the log in engine may provide credentials to the launched application to generate a corresponding session token. Otherwise the log in engine may proceed as previously described.

The memory protection engine may be configured to manage the allocation of memory for enterprise applications . For instance the memory protection engine may split the memory device into an enterprise area e.g. a first memory location and a personal area e.g. a second memory location . The enterprise area may be for storing enterprise applications and enterprise data. The personal area may be for storing other types of information unrelated to the enterprise application and enterprise data on the client device . The split between the enterprise area and personal area may through the use of virtual memory. The memory protection engine may allocate one or more memory locations in the enterprise area for enterprise applications and enterprise data and control access to those memory locations. As discussed above the amount of memory to allocate may be designated by the client application the enterprise application the application server or the mobile enterprise server . The particular memory locations which may be designated by adjacent or non adjacent memory addresses may be determined by the memory protection engine . The memory protection engine may consult and apply the security policy to determine whether to allow access to the enterprise data. Sometimes unauthorized applications attempt to access enterprise data. The memory protection engine may be configured to detect a request from an unauthorized application and deny the request as a violation of the security policy. In one possible implementation the memory protection engine may be configured to delete the requested enterprise data from the client device in response to a security policy violation or unauthorized application request. In accordance with the security policy the memory protection engine may alternatively delete only the enterprise data requested by the unauthorized application or in violation of the security policy from the allocated memory location instead of all enterprise data from the client device . For instance the memory protection engine may select one or more memory addresses which may or may not be adjacent to one another associated with a particular enterprise application or the enterprise data requested by the unauthorized application or in violation of the security policy. Only the memory at the selected memory addresses may be deleted so that allocated memory locations for e.g. other enterprise applications or non enterprise applications may remain on the client device .

The data protection engine may be configured to encrypt and decrypt the enterprise data stored on the client device . The data protection engine may be configured to encrypt the enterprise data when stored in the memory device at the allocated memory location and decrypt the enterprise data when the enterprise data is retrieved from the memory device for presentation to the user via the user interface device . The data protection engine may be called in response to launching or closing the client application or one of the enterprise applications . When the client application or enterprise application is launched the data protection engine may decrypt the enterprise data stored in the memory device . If the decryption is unsuccessful the data protection engine may attempt to retrieve and decrypt the enterprise data again. If the data protection engine is unable to decrypt the enterprise data a predetermined number of times the data protection engine may generate an error message indicating that the enterprise data cannot be decrypted. The error message may be transmitted to the mobile enterprise server and the data protection engine may call the exception engine discussed in greater detail below. When the client application is closed the data protection engine may encrypt the enterprise data and store the encrypted enterprise data at the allocated memory location in accordance with the memory protection engine . If the data protection engine is unable to encrypt the enterprise data an error message may be generated and sent to the mobile enterprise server and the data protection engine may call the exception engine .

The data wiping engine be configured to manage the deletion of enterprise data and possibly other types of data from the client device . The data wiping engine may be configured to selectively delete any data stored on the client device regardless of where the data is stored. Thus the effectiveness of the data wiping engine is not limited to certain types of data such as messages stored on the client device . The data wiping engine may selectively delete enterprise data from the allocated memory location in response to a command or other indication that the enterprise data should be deleted. Example commands or indications may include a user input commanding that the enterprise data be deleted a signal indicating that the client application or an enterprise application was closed and an instruction from the mobile enterprise server to delete the enterprise data. The data wiping engine may delete enterprise data based on a state of the client device such as when the client device is turned off or in response to removal of a battery of the client device . When the battery is reinserted or power is otherwise restored or made available to the client device the data wiping engine may determine that the shutdown of the client device was caused by a battery removal and may delete some or all of the enterprise data such as orphaned data before booting an operating system of the client device . Furthermore the data wiping engine may delete enterprise data in response to a security policy violation. The data wiping engine may employ various methods to delete enterprise data. In one possible implementation the data wiping engine may encrypt the enterprise data marked for deletion and overwrite the encrypted enterprise data. The data wiping engine may be configured to iteratively encrypt and overwrite the enterprise data a predetermined number of times before deleting the enterprise data from the memory device . In one possible approach the data wiping engine may iteratively encrypt and overwrite the enterprise data a minimum of ten 10 times.

The profile engine may be configured to manage one or more profiles each associated with a particular user of the client device . The profile may record user preferences user privileges that may define the rights of the user to access certain enterprise applications and certain enterprise data and security policy compliance information such as password policies encryption policies etc. The profile engine may be configured to synchronize the profile stored on the client device with a corresponding profile stored at the mobile enterprise server .

The locking engine may be configured to prevent unauthorized user access to the enterprise data even if the client device and a previous user of the client device have been authenticated. The locking engine may be configured to identify when a present user of the client device is not authorized to use the client device if the present user is unable to provide sufficient credentials or biometric information when prompted e.g. the present user fails to provide an accurate username and password combination after a certain number of attempts facial or fingerprint recognition fails to identify the present user as the authorized user etc. . The locking engine may monitor user inputs provided by the present user via the user input device. The locking engine may be configured to determine whether the present user is the previous user when the client device was authorized. If not the locking engine may prevent the client device and thus the present user from accessing the enterprise data. The locking engine may further lock the client application by closing the client application and all enterprise applications . While locked the client device may be unable to launch the client application or any enterprise applications . The locking engine may also delete all enterprise data from the client device either directly or by calling the data wiping engine .

The policy enforcer engine may be configured to receive the security policy transmitted by the mobile enterprise server and apply the security policy to enterprise data stored on the client device . The security policy may be pushed to the client device from the mobile enterprise server each time the client application is launched and the user is authenticated e.g. by logging into the client application . The policy enforcer may continually monitor actions of the client device to determine whether the security policy has been violated. If the security policy is violated the policy enforcer may take an appropriate action such as calling the memory protection engine the log in engine the data wiping engine the data protection engine the locking engine etc.

The reporting engine may be configured to generate and transmit reports or charts to the mobile enterprise server . The report or chart may include all or a subset of the enterprise data stored on the client device or the application server associated with one or more client applications . The report or chart may organize the enterprise data in a particular way for presentation to a user of the client device or administrator of the mobile enterprise server . The reporting engine may be configured to request that the mobile enterprise server generate a report or chart and have the generated report or chart transmitted to the client device . The reporting engine may present the report or chart on the client device .

The exception engine may be configured to implement exception handling for the client device . The exception engine may be configured to collect and consolidate error messages or other exceptions to generate exception data. The exception engine may designate processes for handling the exception data. In one possible approach the exception engine may transmit the exception data to the mobile enterprise server for forwarding to the application server . The exception engine may transmit other information to the application server with the exception data. The other information may include for example details about the client device such as a device type a phone number for the client device if e.g. the client device is a mobile phone a model name an exception stack trace and coordinates of the client device by e.g. latitude and longitude. The exception engine may receive an acknowledgement from the application server that the exception data and other information was received.

The update engine may be configured to update the enterprise applications and enterprise data on the client device . The update engine may synchronize the enterprise applications and enterprise data between the client device and the mobile enterprise server application server or both.

The application stacking engine may be configured to link multiple enterprise applications to one parent application such as the client application . Through the application stacking engine the mobile enterprise server may be configured to allow a logged in user to download and configure enterprise applications from the application server via the client application . The application stacking engine may also be configured to apply default configurations to any one or more of the enterprise applications linked to the client application . The application stacking engine may allow for any number of applications in a frame and any number of frames within a stack. In one possible approach the application stacking engine may stack up to twelve 12 applications in a frame and the stack may include up to five 5 frames. Different numbers of applications per frame and frames per stack however are possible. The number of applications per frame and frame per stack may be based on various factors such as available memory or other hardware limitations. The application stacking engine may receive notifications from the mobile device manager for locking upgrading and deleting enterprise applications without user interaction.

The application stacking engine may be configured to manage memory settings of one or more of the enterprise applications and expose an application programming interface API to modules of the client device such as the reporting engine the exception engine the data wiping engine the locking engine the data sharing engine etc. The application stacking engine may manage secure socket layer security at the SSO engine for enterprise applications that are configured via the client application . The application stacking engine may be further configured to capture information such as device usage memory usage memory management user profile and services such as session data exception and data loss prevention due to e.g. an application crash by for instance providing local cache support.

The data sharing engine may be configured to share common data among various enterprise applications such as enterprise applications in the application stacking engine . The common data may include client device information application request information work order information prints utilities files such as camera files picture files secure digital SD files shared database information and the like. The data sharing engine may be configured to allow application stacking engine and possibly other modules and applications running on the client device to share the common data and reduce memory duplication. The data sharing engine may further allow the sharing of session information among various enterprise applications and possible non enterprise applications running on the client device .

The web service engine may be configured to provide an interface at the mobile enterprise server for enabling communication between the client device and the application server . The mobile enterprise server may call the web service engine in response to receiving a request to access the application server from an enterprise application run on a client device . The web service engine may receive an Extensible Markup Language XML script representing the request and push the request to the application server . If the application server validates the request the application server may generate a response to the request that is transmitted back to the client device via the mobile enterprise server .

The masking engine may be configured to mask enterprise data transmitted to the client device . In one possible approach the masking engine may mask all data transmitted to web servers or otherwise associated with web based applications desktop applications or both. Alternatively or in addition the masking engine may mask data associated with any secure application executed by the client device . Masking may include a bitwise operation applied to the enterprise data intended to obscure the enterprise data during transmission. The masking engine may be invoked each time enterprise data is transmitted to the client device in accordance with a security policy or a user preference. The masking engine may mask the enterprise data at runtime by selecting and applying a masking heuristic to the enterprise data.

The mobile device manager may be configured to manage user profiles stored at the mobile enterprise server . Each user profile may be associated with a particular user of the client devices in communication with the mobile enterprise server . The profile may record user preferences user privileges that may define the rights of the user to access certain enterprise applications and certain enterprise data and security policy compliance information such as password policies encryption policies etc. The profile engine may be configured to synchronize the profile stored at the mobile enterprise server with a corresponding profile stored at the client device .

When a client device logs into the mobile enterprise server by e.g. providing credentials for authentication the mobile device manager may be called to determine whether a user profile exists and if not create a new user profile. The mobile device manager may also create a new user profile the first time a client device or user logs launches and logs into the client application . The mobile device manager may update the user profile when necessary and transmit the updated user profile to the client device for handling by e.g. the profile engine of the client device . The mobile device manager may further determine whether the client device can access the enterprise applications enterprise data and security policies based on information contained in the user profile. In some instances the mobile device manager may require the user to provide credentials before the mobile device manager will determine whether the client device can receive enterprise application and enterprise data.

The markup language engine may be configured to parse markup language contained in messages transmitted to or from the mobile enterprise server . For example the markup language engine may be configured to parse Extensible Markup Language XML to encode communications to and decode communications from the client device . Instead of acting as a standalone module the markup language engine may be incorporated into another module such as the mobile gateway engine .

The exception engine may be configured to implement exception handling for the mobile enterprise server . The exception engine may be configured to receive exception data from the client device . The exception engine may designate processes for handling the exception data. The exception engine may forward the exception data to the application server along with other information related to the exception data received from the client device . The other information may include for example details about the client device such as a device type a phone number for the client device if e.g. the client device is a mobile phone a model name an exception stack trace and coordinates of the client device by e.g. latitude and longitude. The exception engine may transmit an acknowledgement from the application server that the exception data and other information was received to the client device .

The exception engine may be configured to capture all exceptions raised by the client application of the client device as well as any other applications. Example exceptions may include data exceptions between applications via interfacing applications runtime exceptions via web services and data parsing application exceptions user security exceptions and user access exceptions interface specific exceptions application access exceptions and device specific exceptions. Some or possibly all exceptions received by the exception engine may be captured analyzed and processed by the exception engine of the client device prior to receipt at the exception engine of the mobile enterprise server .

The authentication engine may be configured to grant the client device access to enterprise applications which may include native enterprise applications primarily stored on the client device web based enterprise applications primarily stored on a web server such as the application server or native enterprise applications with components stored both on the client device and a web server such as the application server . To authenticate the client device the authentication engine may communicate with the SSO engine discussed below. The authentication engine may maintain a registry of the enterprise applications available to the client device via the client application . The authentication engine may be configured to determine whether the enterprise application is registered with the authentication engine . If registered when the client application is launched the authentication engine may receive credentials from the client device and use the credentials to grant the client device access to registered enterprise applications . The registry may contain non enterprise applications as well. Non enterprise applications may refer to applications that are hosted by servers other than the application server . The authentication engine may also grant access to registered non enterprise applications when launched.

The authentication engine may be configured to generate a template that defines the log in requirements for each enterprise application and non enterprise application registered. The template may be based on the type of application. For instance one template may be used for native applications which may include enterprise applications and non enterprise applications stored on the client device while other types of templates may be generated for web applications and hybrid applications. Web applications may include enterprise applications or non enterprise applications that require significant interaction with a web server such as the application server . Hybrid applications may include enterprise applications or non enterprise applications that have native and web components. That is hybrid applications may be partially stored on the client device but still require significant interaction with a web server. Each generated template may be stored in a database.

The authentication engine may receive an encrypted version of the credentials in the form of a policy file generated by the client device and transmitted to the mobile enterprise server . The authentication engine may decrypt the policy file and provide the credentials to the SSO engine to authenticate the client device for the enterprise application or non enterprise application if registered each time the client application an enterprise application or non enterprise application is launched at the client device .

The policy enforcement engine may be configured to manage enforce and report the security policy for each client device in communication with the mobile enterprise server . The policy enforcement engine may initially apply a default policy to all client devices until the policy enforcement engine determines to apply a different policy. The policy enforcement engine may be configured to prevent access to one or more enterprise applications or delete enterprise data from the client device in response to a policy violation. The policy enforcement engine may disable enterprise applications or delete enterprise data from the client device following privilege escalation which is also called jailbreaking or rooting. The policy enforcement engine may push the security policy to the client device under certain circumstances such as each time the security policy is updated or when the policy enforcement engine determines that the client device has an outdated or expired security policy stored locally.

The reporting engine may be configured to receive reports or charts transmitted from the client device to the mobile enterprise server . The reporting engine may be configured to receive a request to generate a report or chart from the client device . In response to the request the reporting engine may generate the report or chart and transmit the report or chart to the client device . As discussed above the report or chart may include all or a subset of the enterprise data stored on the client device or the application server associated with one or more client applications . The report or chart may organize the enterprise data in a particular way for presentation to a user of the client device or administrator of the mobile enterprise server .

The mobile gateway engine may be configured to facilitate communication between the mobile enterprise server and the client device . The mobile gateway engine may confirm that the mobile enterprise server is communicating with the intended client device based on information from the client device . The information may include a unique identifier such as an International Mobile Equipment Identity IMEI number if the client device includes a mobile phone. If the identity of the client device cannot be confirmed from the unique identifier the mobile gateway engine may reject the communications from the client device . If the identity of the client device is confirmed the mobile gateway engine may receive a certificate from the security server and process the certificate for validation and verification of the certificate for every session level secure connection between the client device and the mobile enterprise server . After verification the mobile gateway engine may initiate communication with the client device receive credentials from the client device and redirect the credentials to the SSO engine to carry out additional authentication. The mobile gateway engine may be configured to call the web service engine to establish two way communication between the mobile enterprise server and the client device . Once communication between the client device and the mobile enterprise server has been established the mobile gateway engine may search for various privacy breaches such as a man in the middle attack and reject such communications if possible. The mobile gateway engine may monitor communications for various attacks until the communication between the client device and the mobile enterprise server is closed. The mobile gateway engine may employ secure sockets layer SSL encryption to encrypt communications between the client device and the mobile enterprise server at the transport layer level.

The single sign on SSO engine may authenticate the client device based on credentials received from the client device . For example if the mobile enterprise server receives a request from the client device without a security token which may indicate that the client device was previously authenticated the request may be forwarded to the SSO engine for authentication. The SSO engine may require the user to provide credentials via e.g. a log in screen presented on the client device . The SSO engine may authenticate the client device based on the credentials and generate the security token as discussed above. The security token may expire after a predetermined amount of time and future communications between the client device and mobile enterprise server may commence without additional authentication by the SSO engine so long as the security token is valid. The SSO engine therefore may determine whether the security token is valid when each communication session commences. The SSO engine may be configured to provide subsequent security tokens for subsequent communication sessions between the client device and the mobile enterprise server .

The exemplary modules shown in may be provided as software when executed by the processor of the client device or processing device B of the mobile enterprise server . Alternatively the modules may be provided as hardware or firmware or combinations of software hardware or firmware. Although particular modules are shown and described features of the client device mobile enterprise server or both may be provided by fewer greater or differently named modules.

At block the client device may receive a request to access the client application . The request may be from a user and may be provided to the client device via e.g. the user interface device . The request may be the result of the user pressing a virtual button representing the client application . The request may represent the user s desire to launch the client application to access one or more enterprise applications enterprise data or both.

At block the client device may prompt the user for credentials. The prompt may be presented to the user via the user interface device . The credentials may include a username password or biometric identifier. Additional credentials such as an encryption key or token that may be necessary for authentication may be accessed from the memory device of the client device . In one possible approach the processor may call the log in engine to prompt the user for credentials.

At block the client device may transmit the request and the credentials to the mobile enterprise server for authentication. Authentication may be based on whether the credentials prove that the client device or user of the client device is authorized to access the client application and enterprise applications contained within the client application . The communication between the client device and the mobile enterprise server may be managed at least in part by the communication engine .

At decision block the client device may determine whether the credentials provided are valid. For instance the client device may receive a message from the mobile enterprise server indicating whether or not the credentials were valid. If so the process may continue at block . If not the process may return to block to give the user another opportunity to provide valid credentials.

At block the client device may load available enterprise applications into the client application . The available enterprise applications may include enterprise applications that the client device user or both are authorized to view and use through the client application . Loading the available enterprise applications may include presenting a list of available enterprise applications or icons that virtually represent the available enterprise applications . Additionally or in the alternative loading the available enterprise applications may include receiving updates upgrades and possibly other information from the mobile enterprise server for the available enterprise applications .

At block the client device may receive a selection of one or more of the enterprise applications . The selection may be from a user via e.g. the user interface device . For instance the selection may include the user selecting an icon or other virtual data representation associated with one of the available enterprise applications .

At block the client device may launch the selected enterprise application . When launched the processor may execute one or more of the modules discussed above. For instance the processor may call the memory protection engine to allocate a memory location of the memory device for the enterprise data of the selected enterprise application . The data wiping engine may be called to selectively delete the enterprise data from the allocated memory location in due course. The data protection engine may be called to encrypt the enterprise data for storage in the memory device at the allocated memory location and decrypt the enterprise data for presentation to a user via e.g. the user interface device . The locking engine may be called to prevent unauthorized user access to the enterprise data. The policy enforcer engine may be called to apply the security policy to the enterprise data.

At block the mobile enterprise server may receive a request to access the client application and credentials transmitted from the client device . The credentials may include a username password encryption key token or biometric identifier. The mobile enterprise server may call the SSO engine the mobile gateway engine the authentication engine or any combination of these engines at block .

At block the mobile enterprise server may authenticate the credentials received from the client device at block . The mobile enterprise server may transmit the credentials or a subset of the credentials to the security server for authentication. The mobile enterprise server may be configured to implement two factor authentication. For example the mobile enterprise server may authenticate the client device based on the username and password while the security server may authenticate the client device in accordance with the encryption key. The mobile enterprise server may also or alternatively call the SSO engine the authentication engine or both to authenticate the client device .

At decision block the mobile enterprise server may determine whether the client device is authenticated. For instance the mobile enterprise server may make this determination based on the output of the SSO engine authentication engine or a signal received from the security server . If the client device could not be authenticated or if the authentication failed the process may continue at block . If the mobile enterprise server determines that the client device is authenticated the process may continue at block .

At block the mobile enterprise server may require that the client device transmit new or updated credentials. For instance the mobile enterprise server may transmit a signal to the client device requesting that the user enter the username password or both again. Alternatively or in addition the mobile enterprise server may request that the client device send the encryption key or token again. The process may return to block after requesting that the client device provide new credentials.

At block the mobile enterprise server may identify enterprise applications that are available for the client device to launch through the client application . The available enterprise applications may be based on permissions associated with the user the client device or both. Additionally or in the alternative the available enterprise applications may be based on hardware characteristics of the client device . For instance some enterprise applications may be configured for mobile devices while others may be configured for desktop and laptop computers.

At block the mobile enterprise server may transmit updates upgrades and possibly other information associated with the available enterprise applications to the client device . Versions of the enterprise applications and enterprise data may therefore be synchronized with versions of the enterprise applications and enterprise data stored in the application server .

At block the mobile enterprise server may facilitate communication between the client device and the application server . When the client device launches one or more of the enterprise applications enterprise data is transmitted to and from the client device and the application server . The mobile enterprise server may facilitate the communication of the enterprise data in accordance with the modules described previously with reference to .

In general computing systems and or devices such as the client device the application server the mobile enterprise server and the security server may employ any of a number of computer operating systems including but by no means limited to versions and or varieties of the Microsoft Windows operating system the Unix operating system e.g. the Solaris operating system distributed by Oracle Corporation of Redwood Shores Calif. the AIX UNIX operating system distributed by International Business Machines of Armonk N.Y. the Linux operating system the Mac OS X and iOS operating systems distributed by Apple Inc. of Cupertino Calif. the BlackBerry OS distributed by Research In Motion of Waterloo Canada and the Android operating system developed by the Open Handset Alliance. Examples of computing devices include without limitation a computer workstation a server a desktop notebook laptop or handheld computer or some other computing system and or device.

Computing devices generally include computer executable instructions where the instructions may be executable by one or more computing devices such as those listed above. Computer executable instructions may be compiled or interpreted from computer programs created using a variety of programming languages and or technologies including without limitation and either alone or in combination Java C C Visual Basic Java Script Perl etc. In general a processor e.g. a microprocessor receives instructions e.g. from a memory a computer readable medium etc. and executes these instructions thereby performing one or more processes including one or more of the processes described herein. Such instructions and other data may be stored and transmitted using a variety of computer readable media.

A computer readable medium also referred to as a processor readable medium includes any non transitory e.g. tangible medium that participates in providing data e.g. instructions that may be read by a computer e.g. by a processor of a computer . Such a medium may take many forms including but not limited to non volatile media and volatile media. Non volatile media may include for example optical or magnetic disks and other persistent memory. Volatile media may include for example dynamic random access memory DRAM which typically constitutes a main memory. Such instructions may be transmitted by one or more transmission media including coaxial cables copper wire and fiber optics including the wires that comprise a system bus coupled to a processor of a computer. Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM DVD any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM an EPROM a FLASH EEPROM any other memory chip or cartridge or any other medium from which a computer can read.

Databases data repositories or other data stores described herein may include various kinds of mechanisms for storing accessing and retrieving various kinds of data including a hierarchical database a set of files in a file system an application database in a proprietary format a relational database management system RDBMS etc. Each such data store is generally included within a computing device employing a computer operating system such as one of those mentioned above and are accessed via a network in any one or more of a variety of manners. A file system may be accessible from a computer operating system and may include files stored in various formats. An RDBMS generally employs the Structured Query Language SQL in addition to a language for creating storing editing and executing stored procedures such as the PL SQL language mentioned above.

In some examples system elements may be implemented as computer readable instructions e.g. software on one or more computing devices e.g. servers personal computers etc. stored on computer readable media associated therewith e.g. disks memories etc. . A computer program product may comprise such instructions stored on computer readable media for carrying out the functions described herein.

With regard to the processes systems methods heuristics etc. described herein it should be understood that although the steps of such processes etc. have been described as occurring according to a certain ordered sequence such processes could be practiced with the described steps performed in an order other than the order described herein. It further should be understood that certain steps could be performed simultaneously that other steps could be added or that certain steps described herein could be omitted. In other words the descriptions of processes herein are provided for the purpose of illustrating certain embodiments and should in no way be construed so as to limit the claims.

Accordingly it is to be understood that the above description is intended to be illustrative and not restrictive. Many embodiments and applications other than the examples provided would be apparent upon reading the above description. The scope should be determined not with reference to the above description but should instead be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled. It is anticipated and intended that future developments will occur in the technologies discussed herein and that the disclosed systems and methods will be incorporated into such future embodiments. In sum it should be understood that the application is capable of modification and variation.

All terms used in the claims are intended to be given their broadest reasonable constructions and their ordinary meanings as understood by those knowledgeable in the technologies described herein unless an explicit indication to the contrary in made herein. In particular use of the singular articles such as a the said etc. should be read to recite one or more of the indicated elements unless a claim recites an explicit limitation to the contrary.

The Abstract of the Disclosure is provided to allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in various embodiments for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separately claimed subject matter.

