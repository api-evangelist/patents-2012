---

title: Partitioning of a transmission control protocol window in a virtual system
abstract: A mechanism for partitioning of a transmission control protocol (TCP) window in a virtual system is disclosed. A method includes estimating effective bandwidth of a communication link between a group of client devices at a first location and at least one host machine at a second location, wherein each client device of the groups of client devices maintains a communication session over the communication link with one of the at least one host machine, partitioning a transport control protocol (TCP) window of the communication link into portions based on quality of service (QoS) policy data of the communication sessions, where each portion is associated with one of the communication sessions, and sending, to each client device in the group of client devices, a parameter identifying the portion of the TCP window partitioned for the client device, the parameter sent to communication endpoints of each communication session.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09160810&OS=09160810&RS=09160810
owner: Red Hat Israel, Ltd.
number: 09160810
owner_city: Raanana
owner_country: IL
publication_date: 20121025
---
The embodiments of the disclosure relate generally to virtualization system and more specifically relate to a mechanism for partitioning of a transmission control protocol TCP window in a virtual environment.

A virtual machine VM is a portion of software that when executed on appropriate hardware creates an environment allowing the virtualization of an actual physical computer system. Each VM may function as a self contained platform running its own operating system OS and software applications processes . Typically a hypervisor manages allocation and virtualization of computer resources and performs context switching to cycle between various VMs.

A host machine e.g. computer or server is typically enabled to simultaneously run multiple VMs where each VM may be used by a local or remote client. The host machine allocates a certain amount of the host s resources to each of the VMs. Each VM is then able to use the allocated resources to execute applications including operating systems known as guest operating systems. The hypervisor virtualizes the underlying hardware of the host machine or emulates hardware devices.

In a virtualized data center clients may connect to VMs using a remote access protocol such as Virtual Network Computing VNC Remote Desktop Protocol RDP Independent Computing Architecture ICA or Simple Protocol for Independent Computing Environments SPICE . The remote access protocol provides client access to a remote machine display and devices e.g. keyboard mouse audio to allow the user to experience a similar interaction as with a local machine while offloading most of the intensive CPU and GPU tasks from the VM to the client device.

In a virtualization topology communication bandwidth between clients and VMs may be limited when communicating over a Wide Area Network WAN . Bandwidth sometimes defines the net bit rate also known as peak bit rate information rate or physical layer useful bit rate channel capacity or the maximum throughput of a logical or physical communication path in a digital communication system. In some cases multiple client devices may share a communication connection to a data center providing VMs communicating with the client devices over the communication connection. These multiple client devices compete for the shared bandwidth on the communication connection.

Currently different service levels in terms of bandwidth use of the communication connection to the different client devices may be provided by solutions such as a traffic control tc component or through use of existing facilities in routers and switches implementing the communication connection. These solutions limit and control the bandwidth to provide a specific service level for the multiple client devices in terms of communication bandwidth. However these solutions have associated costs of performance inefficiency and overhead.

Embodiments of the disclosure provide a mechanism for partitioning of a transmission control protocol TCP window in a virtual environment. A method of embodiments of the disclosure includes estimating effective bandwidth of a communication link between a group of client devices at a first location and at least one host machine at a second location wherein each client device of the groups of client devices maintains a communication session over the communication link with one of the at least one host machine partitioning a transport control protocol TCP window of the communication link into portions based on quality of service QoS policy data of the communication sessions where each portion is associated with one of the communication sessions and sending to each client device in the group of client devices a parameter identifying the portion of the TCP window partitioned for the client device the parameter being sent to communication endpoints of each communication session.

Embodiments of the disclosure provide a mechanism for partitioning of a transmission control protocol TCP window in a virtual environment. The communication sessions between a spice server and clients may be assessed and monitored in order to dynamically adjust a TCP window of the session. The TCP window is allotted to different remote access protocol server client connections according to priority information provided by a virtualization controller managing the virtual environment. In one embodiment Quality of Service QoS policy data associated with virtual machines VMs provided over the communication connections is used to partitioning the TCP window into associated portions for the VMs. The monitoring of effective bandwidth of a communication connection between a remote access protocol server client and partitioning of the TCP window may be dynamic because the bandwidth estimation and TCP window partitioning occur on an on going and or periodic basis.

VM may include one or more applications executed and hosted by a guest operating system OS within the VM . The VM OS and the VM itself may be controlled by another operating system not shown of the host machine that runs off of a hardware platform of the host machine . Typically a host OS may execute a hypervisor also referred to as a virtual machine monitor VMM for monitoring the hosted VM . A guest OS may be of the same or different type with respect to the host OS. For example a guest OS may be a Windows operating system from Microsoft and a host OS may be a Linux operating system available from Red Hat Inc. . In addition the guest OSes running on the different VMs on the same host machine may be of the same or different types.

VM may be for example hardware emulation full virtualization paravirtualization and operating system level virtualization VMs. Different VMs hosted by host machine may have the same or different privilege levels for accessing different resources.

In one embodiment VM hosts or maintains a desktop environment providing virtual desktops for remote clients including client devices . A virtual desktop can represent an output such as virtual machine graphical user interface GUI e.g. an image or UI to be displayed in order to represent the VM at the client device generated by a desktop application running within virtual machine . Graphics data associated with the virtual desktop can be captured and transmitted to client device where the virtual machine GUI i.e. virtual desktop may be rendered by a rendering agent and presented by a client application.

It should be noted that functionality provided to client device by VM is not limited to virtual desktops and may include a wide variety of other server based virtualization functions made available to the clients.

In some embodiments client side resources also include a remote access protocol client that is implemented to improve end user experience of the virtual machine interface associated with the virtual machine . In particular a remote access protocol client may work in tandem with a remote access protocol server of the host machine and a remote access protocol driver of the VM to determine a most efficient place to process graphics to maximize an end user experience and minimize system load. VM may maintain connections with the remote access protocol client and or the remote connection protocol driver via individual channels.

In one embodiment VM communicates with a remote access protocol server using a multi channel protocol e.g. Remote Desktop Protocol RDP Simple Protocol for Independent Computing Environments SPICE that allows for connection between VM and end user devices of the client device via remote access protocol client executing on client device . The VM may include a virtual device e.g. virtual device drivers or a paravirtual device e.g. using a paravirtual device drivers for each end user device to allow the VM access to control and management functions of the end user devices.

Embodiments of the disclosure utilize a communication session grouping agent a bandwidth estimation agent and a TCP enforcement agent of host machine to customize a Transport Control Protocol TCP window of a WAN based communication session established between a VM and a client device . A TCP window is a parameter of a TCP IP communication session describing an amount of outstanding data unacknowledged by the recipient that can remain in the network as part of communication connection. After sending the amount of data configured in the TCP window a sender of the data stops and waits for acknowledgment back from the receiver that the receiver has received some or all of the data. The TCP window is negotiated at the beginning of every communication connection during the TCP handshake stage.

In previous virtualization systems multiple communication sessions between VMs and client devices utilizing a same WAN based pipeline of network components that support the communication links of the communication sessions would compete against each other for the available configured TCP window. As a result the TCP window was typically divided evenly amongst the competing communication sessions. Embodiments of the disclosure allow the TCP window to be dynamically partitioned according to Quality of Service QoS policies of the VMs or according to any other priority ranking mechanism so that each VM communication session utilizing the WAN based link is configured with a specific and not necessarily equal portion of the TCP window. As a result different service levels may be dynamically provided to different VM client device connections.

In one embodiment the communication session grouping agent identifies network communication sessions between VMs and client devices and groups these sessions based on locality of the VMs and client devices . The communication session grouping agent may reside in the host machine as illustrated or may reside at the virtualization controller .

In one embodiment the remote access protocol clients and remote access protocol servers are the end points of the communication sessions connections. Although one remote access protocol server is illustrated per host machine this remote access protocol server can execute multiple remote access protocol server processes with one remote access protocol server process associated with each VM hosted by host machine . Each remote access protocol server process is the end point for all communication connections channels to the associated VM and is in charge of adjusting the TCP window for that VM .

In one embodiment the communication sessions are grouped according to location of both endpoints so that all communication connections belonging to the same branch office and communicating with one or more host machine s at a same data center would belong to a same group of connections. For example if there are two groups of communication sessions belonging to two different branch offices these different groups of communication sessions are handled separately in embodiments of the disclosure in terms of bandwidth estimation and bandwidth partitioning perspectives. More specifically if different client devices in a branch office connect via remote access protocol clients to remote access protocol servers located in different data centers then those client devices are classified into different groups because each corresponding remote access protocol client competes on available bandwidth only with other remote access protocol clients connecting to the same data center of host machines .

In some embodiments classification of the clients according to their locations can be done based on a static configuration Internet Protocol IP address subnets of the client devices physical location of the client devices such as in case of mobile clients having Global Positioning System GPS device or based on measuring round trip time RTT latency between the client devices and so on.

After clients have been grouped based on their location for each identified group of connections the bandwidth estimation agent assesses an effective bandwidth that is currently available between the two sites of the connection. Bandwidth is a term used to refer to a hit rate measure representing the available or consumed data communication resources of the communication link between two communication endpoints. In one embodiment the bandwidth estimation agent may utilize any available network monitoring tool and or agent that assess and determine the effective bandwidth. The network monitoring tool may use various techniques and heuristics such as RTT between the sites or information and statistics queried from network entities e.g. WAN accelerator etc. .

Because effective bandwidth of a communication connection varies over time due to changing network conditions and network loads e.g. equipment errors network congestion load fluctuations due to time of day and so on the bandwidth estimation agent may perform the effective bandwidth estimation in an ongoing and or periodic basis. Once an effective bandwidth is determined the bandwidth estimation agent passes this information on to the TCP enforcement agent .

In one embodiment the TCP enforcement agent may reside on the same host machine as the bandwidth estimation agent . However in other embodiments the TCP enforcement agent may reside on a different host machine than the bandwidth estimation agent . Furthermore in some embodiments the bandwidth estimation agent and the TCP enforcement agent may individually or together operate on the virtualization controller .

When the TCP enforcement agent receives the effective bandwidth data for a group of communication connections e.g. between VMs and client devices the TCP enforcement agent determines the optimal TCP window that should be configured for the pipeline having the effective bandwidth. For example the TCP enforcement agent may use the effective bandwidth as an input to determine an optimal TCP window size. In some embodiments an optimal TCP window size may be a function of a bandwidth delay product of the connection which is in turn a function of the effective bandwidth. For example if effective bandwidth is 10 Mbits sec and the round trip time is 200 ms then the TCP window size would be 10 Mbits s 200 ms 2 1 Mbit 100 KB.

In one embodiment once the optimal TCP window size is determined the TCP enforcement agent uses QoS policy information about each communication session utilizing the effective bandwidth in order to partition the optimal TCP window among the sessions. In one embodiment the TCP enforcement agent receives QoS policy information about each VM from a policy management agent at the virtualization controller . In some embodiments the TCP enforcement agent requests this information from the policy management agent . In other embodiments the policy management agent may send the information to the TCP policy enforcement agent upon initialization of each new communication session of a VM .

In one embodiment the QoS policy information may detail QoS profiles or classes. For example a QoS policy manager can define platinum gold silver and bronze QoS profiles. Each profile specifies a certain QoS Service Level Agreement SLA level and in turn each connection or VM is assigned with the appropriate profile. The QoS profile may detail specific performance guarantees such as but not limited to priority including strict priority minimum nominal bandwidth guaranteed minimum percentage of bandwidth guaranteed maximum bandwidth and so on.

Using the QoS policy data the TCP enforcement agent can partition the determined optimal TCP window into portions that accurately reflect the QoS policy configured for the communication sessions that are sharing the effective bandwidth. For example assume that the effective bandwidth for three communication sessions is determined to be 10 Mbits sec and the optimal TCP window for this effective bandwidth is determined to be 100 KB. The TCP enforcement agent may then reference the QoS policies for each of the VMs associated with the communication sessions and determine that the first session should receive a 50 KB of the TCP window the second session should receive 30 KB of the TCP window and the third session should receive 20 KB of the TCP window in order to satisfy the QoS parameters established for the sessions.

Once the TCP window is partitioned the TCP enforcement agent may then send a notification to the remote access protocol clients associated with each session and the remote access protocol server s associated with each session. In one embodiment the notification includes the specific TCP window parameter to be configured for the particular communication sessions. Using this parameter information the remote access protocol clients and servers may then dynamically adjust the receive transmit TCP windows according to the provided TCP window parameters. One skilled in the art may utilize various application programming interfaces API and network configuration utilities that can configure the TCP window for the individual communication session.

In some embodiments the bandwidth estimation and TCP window partitioning are performed on a periodic and or on going basis in order to respond to the changing nature of the effective bandwidth over a WAN connection as well as to the changing nature of communication sessions between VMs and client devices e.g. VM shut downs new VM initializations VM migration and so on .

In some embodiments the bandwidth estimation agent and the TCP enforcement agent may monitor and enforce TCP window policies on multiple VMs running on multiple different host machines . If there are multiple host machines then one host machine may be selected at each site e.g. data center to execute the bandwidth estimation agent and TCP enforcement agent for the VMs hosted at that site. In some embodiments for example if a data center is large then more than one bandwidth estimation agent and TCP enforcement agent may be executed on more than one host machine at the data center.

In embodiments of the disclosure there may be various scenarios in which the TCP window adjustment can be used to differentiate and divide the total estimated effective bandwidth among different connections channels competing on it. For example one scenario includes multiple channels belonging to the same session one client and VM that differentiate between display and video channels within the same session. In this case the TCP window adjustment of embodiments of the disclosure may apply to the different channels of the single communication session. Another scenario includes multiple channels belonging to different sessions where the VMs are hosted on the same hypervisor and the clients are located at the same remote branch office and or multiple channels belonging to different sessions where the VMs are hosted on different hypervisors and the clients are located in the same remote branch office. The above described TCP window adjustment is equally applicable to these scenarios.

A further scenario may include multiple channels belonging to different sessions where the VMs are hosted on different hypervisors and the clients are located in different branch offices. For example three clients may connect to a host machine at a data center from a branch office 1 and another three clients may connect to the same host machine from a branch office 2. In this scenario per the above description the clients are classified to their different locations that they are connecting from in order to correctly partition the estimated effective bandwidth between a certain branch office and the data center.

Method begins at block where client devices which are connected to one or more host machines at a same location are placed into groups based on the location of the client devices. If different clients in a branch office connect to remote access protocol servers located in different data centers then those clients are classified into different groups. In some embodiments classification of the clients according to their locations can be done based on client IP address subnets client physical location e.g. based on GPS or RTT latency between the clients and so on.

Then at block for each group of client devices an effective bandwidth is estimated between the host machine site and the site of the group of client devices. In one embodiment a network monitoring tool and or agent that assess effective bandwidth of a communication connection may be used to estimate effective bandwidth. For example the network monitoring tool may use various techniques and heuristics such as RTT between the sites or information and statistics queried from network entities e.g. WAN accelerator etc. .

At block a QoS policy for the group of client devices is received. In one embodiment the QoS policy information about each VM is received from a policy management agent at a virtualization controller. In some embodiments this QoS policy information is requested from the policy management agent. In other embodiments the policy management agent may send the QoS policy information to the TCP policy enforcement agent upon initialization of each new communication session of a VM at the host machine. In one embodiment the QoS policy information may detail SLA guarantees for a particular connection such as priority level e.g. strict priority minimum nominal bandwidth guaranteed minimum percentage of bandwidth guaranteed maximum bandwidth and so on.

Subsequently at block an optimal TCP window for the group of client devices is determined. In one embodiment the optimal TCP window calculation is a function of the estimated effective bandwidth. At block the optimal TCP window is then partitioned among the communication connections of the client devices based on the received QoS policy. For example based on the QoS policy associated with each VM the communication sessions of the group of client devices can be ranked in a hierarchical fashion. The TCP window may then be partitioned according to this ranking so that higher ranking VM communication sessions receive a larger portion of the TCP window and lower ranking communication sessions receive a smaller portion. In other embodiments the QoS policy may guarantee a particular TCP window size and the partitioning of the TCP window may then be made in a way that satisfies the guaranteed TCP window for the communication session s .

Lastly at block the partitioned TCP window parameters are sent to the remote access protocol connection endpoints e.g. remote access protocol server process and remote access protocol client associated with each communication connection of the group of client devices. Blocks and are performed for each group of client devices. Furthermore because effective bandwidth of a communication connection varies over time due to changing network conditions and network loads e.g. equipment errors network congestion load fluctuations due to time of day and so on method may be performed on a periodic basis such a few times a day to as much as many times an hour for example in order to continually assess the changing bandwidth and dynamically adjust TCP window partitions based on the changing bandwidth.

Method begins at block where a communication session is established to communicate data to a virtual desktop for a VM. Then at block a TCP window parameter is received from a host machine. In one embodiment the TCP window parameter identifies a portion of a larger TCP window where the portion is specifically allotted to the VM based on a QoS policy associated with the VM. The host machine providing the TCP window parameter may include a TCP policy enforcement agent that is responsible for partitioning a TCP window for a WAN connection that the communication session utilizes.

Then at block the TCP window of the specific communication session is adjusted according to the received TCP window parameter. Lastly at block the communication session proceeds by using the TCP window parameter that was configured for the session.

The computer system includes a processing device processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processor is configured to execute instructions for performing the operations and steps discussed herein illustrated in by depicting instructions within processor .

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD a cathode ray tube CRT or a touchscreen an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine readable storage medium also known as a computer readable storage medium on which is stored software e.g. one or more sets of instructions software etc. embodying any one or more of the methodologies or functions described herein. The software may also reside completely or at least partially within the main memory e.g. instructions and or within the processor e.g. processing logic during execution thereof by the computer system the main memory and the processor also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface device .

In one embodiment the software include instructions for a bandwidth estimation agent and or a TCP enforcement agent which may correspond to the similarly named components of and or a software library containing methods that call the bandwidth estimation agent and or a TCP enforcement agent . While the machine readable storage medium is shown in an example embodiment to be a single medium the term machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term machine readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that the present disclosure may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present disclosure.

Some portions of the detailed description have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as estimating partitioning determining enabling identifying modifying sending receiving or the like refer to the actions and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical e.g. electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The present disclosure may be provided as a computer program product or software that may include a machine readable storage medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present disclosure. A machine readable storage medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable storage medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

Reference throughout this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. Thus the appearances of the phrase in one embodiment or in an embodiment in various places throughout this specification are not necessarily all referring to the same embodiment. In addition the term or is intended to mean an inclusive or rather than an exclusive or. 

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the disclosure should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

