---

title: Dynamic scripts to extend static applications
abstract: One or more processors receive (a) first software written in a first computer language, (b) user input identifying a first name of a first method in a plurality of methods defined in the first software, and (c) user input identifying a location within a second software that is written in a second computer language different from the first computer language. In response, the one or more processors automatically prepare and store at the user-identified location in the second software, a new instruction formatted in a syntax of the second computer language that invokes the first method identified in the first software by the first name. The second software may be initially created with a first instruction to include at least a first additional name (e.g. “main”) used to invoke execution of the second software, and as a parameter thereof a second additional name identifying the first software.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08966441&OS=08966441&RS=08966441
owner: Oracle International Corporation
number: 08966441
owner_city: Redwood Shores
owner_country: US
publication_date: 20120712
---
It is well known in the prior art to use business rules in application programs that are executed in computers as described in an article entitled Smart Business Processes using Oracle Business Rules by Gary Hallmark 16 pages published December 2008 that is incorporated by reference herein in its entirety as background. This article describes application logic that is modeled visually in Oracle JDeveloper and deployed to Oracle Fusion Middleware featuring Oracle WebLogic application servers. Such application logic can be designed changed and understood by business people as well as IT information technology people. Oracle JDeveloper 11g is a tool that can be used for modeling business terms rules and processes. Modeling is an iterative activity. A new rule might require a new business term or specify an outcome that requires a change to the business process. Integrated tools make business analysts more productive. Hence a Graphical User Interface GUI of the prior art can be used to prepare and or modify such rules.

Moreover prior art application programs such as compensation software applications used by corporations to manage salaries and bonuses of their employees may use formulae written in a proprietary language using a tool called Fast Formula in Oracle Human Resource Management System HRMS as described in the book Oracle FastFormula User s Guide Release 11.0 Part No. A58346 01 published 1995 pages 105 that is incorporated by reference herein in its entirety as background. Oracle FastFormula can get values for the variables in three ways 1 receive them as input when the formula is called 2 find the values in the database from database items 3 use global values which are entered in a Globals window. To get values from database items the user clicks on a Show Items button in a formula window to display a window of available database items. The user must then copy and paste items from this window into a window in which the formula is being composed Edit Formula window .

For illustrative details on prior art application programs see the US Patent Application Publication 2010 0198634 A1 by Ty Hayden et al. entitled Dynamic Calculations in an Employee Compensation System published Aug. 5 2010 that is incorporated by reference herein in its entirety as background.

Such prior art methods have several drawbacks. Many such application programs are proprietary with capabilities limited to certain software available at the time of development of these application programs. Moreover such application programs may be integrated at the back end with software of other technologies such as PL SQL and or relational databases which can making these tools inefficient for use in other environments such as Java.

Furthermore software of such prior art application programs is typically compiled and deployed which makes it difficult to change instructions therein because any change to instructions requires re compilation and re deployment of the application program resulting in long delays in its use in production computer systems. Such software may be customized in a limited manner by use of property files and or command line input used by instructions of the application program. However to the knowledge of the current inventor there appears to be no good solution in the prior art to enable changes to instructions of an application while deployed as described below.

In several embodiments in accordance with the invention one or more processors are programmed to receive software first software written in a predetermined computer language first computer language in a process called registration. After registration the one or more processors prepare and display to the user one or more new instructions in response to receiving at least two user inputs as follows one user input first user input identifies a name first name of a method first method in a plurality of methods that are defined in the first software and another user input second user input identifies a location within additional software second software that is written in another predetermined computer language second computer language and which is executed in combination with the first software.

Specifically in response to receipt of at least the first and second user input s one or more processors of some embodiments automatically modify a prior version of the second software at the user identified location by preparing and adding thereto at least one new instruction that is automatically formatted in a syntax of the second computer language to obtain and display a new version of the second software. The new instruction that is included in the new version of the second software is prepared by the one or more processors to use at least the first name identified by the first user input to invoke execution of the first method in the first software. The new version of the second software may be changed by additional user input from users who know the second computer language but lack knowledge of the first computer language.

In some embodiments the new instruction identifies a name of a set of instructions class in the first software wherein the class is identified by the one or more processors performing introspection on the first software e.g. using Java reflection. In these embodiments the first software is identified by the one or more processors from among multiple first softwares that may be registered by an association between the first software and the second software which association is initially made by the one or more processors in response to receipt of additional user input third user input prior to receipt of the first user input and the second user input.

Also in response to receipt of the third user input described above an initial version of the second software may be created automatically in several such embodiments to include another instruction top level instruction that in turn includes at least one additional name e.g. main that is predetermined by its use in one or more processors programmed to invoke execution of the second software. Such a top level instruction may be prepared by the one or more processors to include as a parameter thereof another additional name that identifies an instance of the first software e.g. based on an association that was made on receipt of the third user input .

Execution of a combination of first software and second software as described above enables program functionality of an application program that is written in a compiled language as the first computer language to be modified at run time by user input e.g. through a GUI browser interface based on any scripting language as the second computer language and have the modified program functionality instantly available in a production computer system without having to compile or deploy any part of the change as described briefly above and in further detail below.

One or more computers are programmed in several embodiments of the invention to receive software such as a specific set of classes Z written in a predetermined computer language first computer language such as Java in a process called registration as per act in . Examples of classes that may be registered are illustrated in . The registration process is implemented in some embodiments by a script generator that when executed by computer s generates one or more portions of a graphical user interface including many screens of the type illustrated in and described below.

As illustrated in user input received via a screen e.g. as a string of characters typed by a human on a keyboard during registration identifies at least a name class name of the set of classes Z to be registered in a field . In some embodiments user input in field received in registration as per act is stored in a column of a table of a relational database for use during execution as shown in pseudo code in . Additional user input in screen also identifies a path class path from which the set of classes Z is to be retrieved in another field . In screen additional user input may be received e.g. to identify a status of the set of classes Z and a description of the set of classes Z.

In some embodiments the set of classes Z being registered in screen constitutes software first software that is written in a specific computer language first computer language such as any high level programming language. Therefore a set of multiple classes Z received in registration constitute one first software that has been compiled and deployed in computer s . Several such first softwares may be registered in the above described manner by repeated use of screen . Hence in several embodiments a set of classes Z that is identified in each use of screen is one among multiple sets Z Z and C which constitute corresponding first softwares each of which is compiled at least partially ahead of time.

As will be readily apparent in view of this description the multiple first softwares collectively identified in as softwares may be compiled in whole or in part depending on the first computer language in which the various sets of classes Z Z and C are written. Also depending on the embodiment classes Z Z and C can all be written in a first computer language such as Java that is common relative to one another or alternatively each first software e.g. each of sets Z Z and C may be written in different first computer languages such as Java C Objective C etc . Although in several embodiments a first computer language of the type described herein is object oriented alternative embodiments may use non object oriented languages.

Regardless of which language is used as the first computer language each of first softwares of many embodiments is prepared individually by a human such as software developer e.g. Java developer then compiled and tested followed by installation in the one or more computer s prior to its registration in screen . Hence each of first softwares of such embodiments cannot be changed after deployment in computer s without another cycle of development compilation testing and installation. Therefore in numerous embodiments of the invention each of first softwares remains unchanged static relative to additional software second software such as any of multiple softwares A N A N and A N typically prepared and changed repeatedly i.e. multiple times.

In several embodiments second softwares A N A N and A N are written in another computer language that is also predetermined second computer language which is different from the first computer language. The second computer language may be selected to facilitate repeated changes to one or more second softwares A N while the corresponding first software Z is kept unchanged after compilation and deployment in computer s of a production system in normal every day use such as a web server used to sell books or another web server used to run payroll . Hence any one or more of scripting languages such as Groovy JavaScript jRuby etc can be used as the second computer language in combination with a programming language such as Java used as the first computer language in some illustrative embodiments.

In several embodiments one of the first softwares e.g. a specific set of classes Z is used in combination with one set of second softwares e.g. software A N another of the first softwares e.g. another specific set of classes Z is used in combination with another set of second softwares e.g. softwares A N while still another of the first softwares e.g. still another specific set of classes Z is used in combination with still another set of second softwares e.g. softwares A N . Hence each of application programs and includes its own combination of one first software and a set of second softwares that may be changed repeatedly relative to the first software which remains static during the changes to the second softwares . In addition to a first software and corresponding second softwares as just described each of application programs and of some embodiments may further include and share with one another in common certain third software which is illustrated in by classes also called script supporting classes . Examples of script supporting classes are illustrated in .

In several embodiments computer s includes fourth software illustrated in as a set of instructions in the form of a virtual machine such as Java VM that executes script code which is a form of second software by execution of a script engine I which in turn executes first software and classes which is a form of third software . Such fourth software in turn may use and interoperate with additional software such as operating system and relational database management system . In such embodiments softwares and A N constitute compiled code which results from compilation in whole or in part of source code written in one or more high level computer language s such as the first computer language and this compiled code is kept unchanged while changing second softwares A N A N and A N that are source code written in other high level computer languages such as second computer languages that are easy to change such as any scripting language e.g. Groovy jRuby JavaScript .

Using a combination of the type described above enables program functionality of application programs and written in Java or other compiled language to be dynamically modified through a GUI browser interface as illustrated in using any scripting language and have the modified program functionality instantly available without having to compile or deploy any part of the change as described below.

Therefore in one illustrative embodiment a specific set of classes Z are prepared to implement various portions of a specific application program and for this reason these classes are also referred to herein as application specific classes . One example of such an application program uses as inputs the employees in an organization the number of years each employee has worked the department of each employee and the base salary of each employee and calculates and outputs bonuses and raises for each employee. In the just described example a specific set of application specific classes Z may be named in a Class Name field of screen during registration see . Moreover user input in Class Path field identifies a location at which a file containing the specific set of application specific classes Z is available.

In one illustrative example a class containing errors has been identified by user input in field as shown in for the class Payroll Salary API . On clicking the Add button in screen the one or more computers validate a path received via user input in Class Path field as being accessible to computer s followed by validation of the first software identified by user input in Class Name field of screen . The just described validation may be performed by script generator which may invoke an operation in a dynamic script processor in computer s . In performing operation computer s check that all classes referenced are available either as classes also referred to as script supporting classes and or as classes not shown in a library of a virtual machine such as Java VM. Any errors during such validation are displayed by computer s in a pop up screen as illustrated in via a browser . In some embodiments a human such as a Java developer uses browser to correct such errors as shown in field of FIG. B followed by re submission of application specific classes Z by clicking on button as illustrated by loop L in . As noted above multiple sets of application specific classes may be registered by repeated use of screen as per loop L in although each set of application specific classes must be registered with its own unique name such as Sample Payroll API in Class Name field and a corresponding path in Class Path field .

In several embodiments of the type described above a human such as a script writer identifies in a graphical user interface generated by script generator of a second software such as any of softwares A N A N and A N to be created or modified as illustrated in . Specifically one or more computers are programmed in several embodiments of the invention to receive as per act in user input e.g. in the form of a mouse click with a cursor on an item in a drop down list box identifying another computer language second computer language in which the second software is written or is to be written . As illustrated in user input received via another screen with a function to add a new script identifies at least another name script name of the second software and also identifies the second computer language. The second computer language identified by user input e.g. a mouse click in act in some embodiments may be a scripting language such as Groovy that is different from the first computer language such as Java.

Such a second computer language may be identified by user selection of one specific language from among multiple such languages which are displayed via a browser as items of a drop down list box as illustrated in . In such embodiments softwares A N A N and A N are implemented as scripts in files that together constitute script code that can be easily modified by a user who knows one of the scripting languages i.e. a script writer who may or may not know the language e.g. Java in which one or more of first softwares may be written.

On clicking the Add button in screen the one or more computers display via browser another screen to receive details on a to be created second software. Screen of some embodiments includes a field to receive user input as per act identifying one of first softwares having a set of application specific classes to be used in a second software which is to be changed repeatedly while the classes being used remain static . In one such illustrative embodiment user input e.g. mouse click in field identifies one specific set of application specific classes Z selected from among multiple first softwares that has been previously registered e.g. as per act in . Specifically names of multiple sets of classes Z Z Z of first software are displayed in as items in another drop down list box in screen of . Also in screen a script writer may provide optional user input such as an effective start date and an effective end date for use of to be created second software.

In one illustrative embodiment script generator stores a script name received in act e.g. identifying a script A and an identifier of the specific set of application specific classes Z received in act in association with one another in a row of a table of a relational database such as table . This association is thereafter used in computer s whenever necessary to identify a first software e.g. one set of application specific classes that is associated with a second software e.g. a script or vice versa. Such associations may be displayed to the user in a window in a screen used to manage second softwares and their associations to first software as illustrated in .

In response to clicking the Save button the one or more computers of certain embodiments automatically create and display via browser as per act an initial version of second software A as illustrated in . The initial version of second software A has only one instruction A also referred to as a top level instruction which includes one or more names and in some embodiments as follows.

One name also called top level function name that is used in top level instruction A of such embodiments is predetermined ahead of time by its use by script processor to initiate execution of second software A by an engine also called script engine N in computer s . Another name may be additionally used in some embodiments to identify an instance of first software that is received e.g. the name coreApi including a specific set of application specific classes Z that were previously identified by user input in field in screen to form an association with second software A. Field in is populated by user selection of an item in a drop down list box not shown which displays as items the names of sets Z Z and Z previously registered individually by repeated use of screen as multiple first softwares .

As noted above top level function name which is automatically included by computer s in instruction A as per act is predetermined for use in an operation of processor also called dynamic script processor to invoke execution of second software A an initial version of which has just been created . Hence top level function name is used in top level instruction A by computer s to identify a set of instructions that are invoked first in execution of second software A. Accordingly first name of such embodiments is similar or identical to a reserved word in the second computer language which cannot be changed or otherwise used by a script writer in instructions added to second software A to form later versions. In two examples of these embodiments the same word main is used as the first name or top level function name in two second softwares A and I written in two different languages wherein corresponding instructions A and I are used as top level instructions although these two instructions use different formats as shown in respectively.

As will be readily apparent in view of this detailed description other embodiments of computer s may use another word as the top level function name in a top level instruction A or I for example the word Start when this same top level function name is also used e.g. in processor to begin execution of instructions in second software A. In such embodiments instruction A and processor use the same name also called common name to identify a specific set of instructions in the second computer language at which a script engine I for that second computer language is to begin executing. Furthermore although in certain embodiments described above the top level function name is predetermined to be one specific word that is commonly used in multiple second softwares other embodiments permit flexibility by use of indirection as follows.

In one embodiment of indirection first name is stored as a string that can be changed by user input and a variable also called pointer that identifies the string is used by script processor to initiate execution of second software A. In this embodiment such a string pointer is used in processor to invoke execution of second software A and used as the top level function name in top level function instruction A. Such indirection enables this embodiment of computer s to use one word e.g. Start in one application program when beginning execution of its second softwares A . . . I . . . N in combination with first software Z and additionally use another word MAIN all letters upper case in another application program when beginning execution of its second softwares A . . . I . . . N in combination with first software Z .

Moreover in some embodiments an additional name is included by computer s in top level instruction A formatted therein as a parameter of a top level function identified by the top level function name as per a syntax of the second language so that an instance of a class identified by this additional name instance name is passed and received in its entirety when beginning execution of second software A. In the example illustrated in first instruction A includes as instance name the word coreApi which identifies a set of application specific classes Z that were previously registered and this same word is now identified in top level instruction A as a parameter of the function main identified by name . Hence an instance of classes Z is being passed in its entirety to a set of instructions identified by name main which is a first name or top level function name in this example executed by a script engine N for the scripting language Groovy in beginning the execution of second software A.

In many embodiments an instance of a specific set of application specific classes Z is newly created e.g. in operation of immediately prior to execution of second software A and this newly created instance of a first software is passed in its entirety into an execution environment of second software A. In such embodiments a script writer may provide user input to computer s to add any instructions desired to second software A to use and or extend objects in classes Z of the first software in the normal manner as if these objects were instantiated in second software A when the syntax of the second computer language supports object oriented programming. In alternative embodiments wherein the second computer language does not support object oriented programming instead of passing an entire instance of first software Z certain information needed to interface with classes Z may be passed in first instruction A as will be readily apparent to the skilled artisan 

The above described first and second names in top level instruction A are formatted automatically by the one or more computer s in accordance with a syntax of a specific second computer language that has been previously identified by user input in act . In one example these two names are formatted to form instruction A which is expressed in the scripting language Groovy as shown in . Specifically in the two names and in instruction A are formatted as per a syntax of the language Groovy by use of a left curly brace therebetween without quotations . In the illustrated example name is followed by a dash and a greater than symbol followed by a right curly brace all without quotations which are used for convenience of description herein. To accommodate user input on additional instructions in second software A one or more blank lines are included by script generator between the greater than symbol also without quotations and the right curly brace . In another example these same two names and are formatted by the one or more computer s differently to form another instruction I e.g. by use of a left parenthesis therebetween when expressed in the scripting language JavaScript as shown in . In the just described example name is followed by a right parenthesis followed by a left curly brace followed by one or more blank lines followed by a right curly brace .

At this stage a script writer can make any changes to second software A which is displayed by browser in a window of a visual editor in . Also shown in is another window which includes multiple panels and all shown collapsed for use by a script writer to add instructions to the initial version of second software A displayed in window . Although some embodiments use three panels and as shown in window of other embodiments may use additional panels or fewer panels depending on the embodiment.

In response to receipt of a mouse click to open a panel called input attributes panel computer s identify and display multiple variables A I that have been made public in the user identified classes Z such as variable A called Employee Name and variable I called Department as shown in . The variables being displayed are normally not visible to a script writer who is developing software in a second computer language which is different from a first computer language in which classes Z are written. Specifically computer s execute an introspection operation on an instance of classes Z to obtain such variables for display and based on user input these variables are then used to prepare new instructions added to second software A.

Script generator when executed by computer s also performs introspection of classes Z which are available therein on registration as per act . Introspection of classes Z can be performed by computer s in different ways depending on the embodiment and in some embodiments introspection is performed using Java reflection e.g. as illustrated by the pseudo code in . Accordingly script generator is also referred to herein as a class revealing script generator. Script generator does not display in window any variables that are private i.e. not public to classes Z under introspection including any classes referenced therein such as script supporting classes . As noted below in some embodiments introspection using Java reflection is also performed by dynamic script processor prior to execution of a script.

Referring to based on the results of introspection as noted above computer s display as per act in in window multiple variables that have been made public by a first software Z and hence available for selection by a script writer for preparation of new instructions by computer s to be added to second software A. At this stage during creation or modification of second software A script generator does not perform introspection on and hence does not display variables in other first softwares Z and A as they are not associated with the second software A being created or changed even though the classes may already be deployed in computer s . Display of names and receipt of input by computer s in act may be implemented similar or identical to the software called JDeveloper available from Oracle Corporation or any other Integrated Development Environment IDE .

Computer s respond to receipt of user input e.g. generated by a script writer clicking on variable I named Department see in window by automatically preparing and inserting as per act in a new instruction into second software A in window at a specific location identified by user input by placement of a cursor also called insertion cursor in window . In some embodiments insertion cursor only identifies one dimension e.g. along the y axis namely a line within second software A such as line 3 shown in at which new instruction is to be inserted. Computer s may be programmed to automatically position new instruction on another dimension e.g. along the x axis e.g. by appropriate indentation within a line identified by cursor in the normal manner of any code editor such as JDeveloper . Although some embodiments use an insertion cursor as illustrated and described herein other embodiments use a drag and drop mechanism wherein a user selected item in window is dragged by keeping a mouse button pressed while moving the mouse until the mouse cursor reaches a user selected location in second software A in window .

New instruction which is inserted at such a user selected location is prepared by programming computer s to perform act by use of an appropriate method such as a getter method of classes Z in first softwares to obtain a value of the user selected variable also called input attribute . As noted above a specific method that is used in act may be identified in some embodiments by introspection of classes Z. Specifically the just described value is obtained in some embodiments from an instance of classes Z created by operation in . In the example illustrated in new instruction is prepared by computer s to use a method getInputValue in an instance of classes Z to obtain the value of the user selected variable I named Department. 

New instruction which is added to an initial version of second software A shown in is formatted by computer s in a syntax of the second computer language e.g. in Groovy this instruction is formed as follows instance name as the word coreApi followed by a dot character . followed by the method name getInputValue followed by a left parenthesis followed by a single quotation mark followed by the user selected variable I as the word Department followed by a right parenthesis followed by a semicolon as illustrated by a new version of second software A shown in .

In a manner similar to that described above for panel a script writer clicking on another panel called output attributes panel causes computer s to display as per act in multiple variables not shown that can be output on execution of instructions of second software A. Such variables may be used in instruction s that are prepared by computer s as per act in for insertion into the current version of second software A at a user identified location therein by invoking another appropriate method such as a setter method of classes Z to set the value of a variable called output attribute that is not shown selected by the screen writer.

Referring back to also included in window is a panel that can be opened up by a script writer double clicking it to cause computer s to display and therefore reveal multiple methods A B I as illustrated by act . Note that methods A B I which are displayed must be public to first software Z that is to be used in combination with a second software A that is being created and or changed. Accordingly methods that are private to classes Z are not displayed in window . Also not displayed are any classes that are defined in other first softwares Z and Z that are not associated with a second software A that is being created and or revised.

Any method displayed in window can be selected by a script writer and on receipt of such user input as per act in computer s performs an act to prepare a corresponding instruction in the second computer language to second software A in window . In an example the initial version of software A is displayed in window and the script writer is shown selecting the method I named debug in window in and computer s respond by adding a new instruction to second software A at a user identified location therein to obtain a revised version of second software A which is saved to memory followed by displaying the revised second software A in window as illustrated in . In the above described manner second software A may be repeatedly revised any number of times by additional user input s while first software Z used therein remains unchanged i.e. static .

Each new instruction that is automatically prepared and inserted by computer s into second software A for use of first software Z includes the instance name I namely coreApi which is commonly used in all such instructions and this same name is also used as instance name in top level instruction . The instance name which is commonly used in instructions and identifies an instance of classes Z that are instantiated by computer s specifically for use in execution of second software A.

One example of new instruction as initially inserted by computer s is a template which includes a descriptor D in the form a character string that describes a parameter to be used in execution of the user selected method e.g. the method debug in . In some embodiments descriptor D is initially populated in instruction by computer s to document that a character string is the data type of an input parameter of the method in first software Z thereby to notify the user as to the user input to be supplied to customize the template.

Hence in this example the character string java.lang.String is used as descriptor D in instruction to initially display to a user e.g. a script writer the data type expected by method debug for its input parameter which is to be identified by the user as illustrated in . In an alternative embodiment the descriptor in instruction may be populated by computer s to be of a data type in the second computer language such as Gstring in Groovy which is a Groovy version of the Java String data type .

At this stage a script writer may edit second software A in window to change the instruction displayed in template form in by inclusion of descriptor D. Computer s is programmed to replace descriptor D in response to receipt of user input in window to overwrite descriptor D with a variable name or a value to be used as the input parameter of method debug . For example a script writer may supply user input in the form of string Hello Groovy World as shown in which is used in second software A as a value for input parameter S. Instead of a value as just described a variable name such as sqltxt in second software A may be used to overwrite descriptor D as illustrated in .

After second software A is revised any number of times as desired by a script writer based on user input e.g. in window to add instructions based on a first software Z and or in window to change instructions in second software A a script writer may click on a button to validate a current version of second software A as illustrated in . In response computer s perform an operation to check syntax of second software A to ensure conformance with the second computer language. In some embodiments operation includes use of javax.tools to validate the syntax e.g. based on introspection to obtain interfaces of classes Z in one of first softwares previously identified by the user in field of screen . Any methods and attributes in classes Z that are used in software A may be checked in operation see to ensure they are properly extended and or used therein as illustrated by pseudo code in used to validate script syntax .

Application specific classes Z of some embodiments are written to extend one or more script supporting classes and hence introspection of classes Z for validation in some embodiments includes performance of introspection of classes see . In such embodiments multiple sets of application specific classes Z Z and Z in first softwares share a single set of script supporting classes that implement functions that are commonly used in interoperation with and support of second softwares A N A and A N such as syntax checking evaluating errors and interface to a relational database. Such sharing of classes between multiple sets of classes Z Z and Z reduces programming work that is otherwise required by developers of different applications in the absence of sharing .

To sum up computer s respond to a command generated by a user clicking button in by checking syntax of a current version of second software A in window and display the results of syntax checking in a window e.g. as a message in . In this example message indicates that the code in window has been verified as being syntactically correct i.e. that there are no syntax issues.

At this stage a script writer may click on button to generate another command to computer s to execute a current version also called changed version of second software A without changing the first software. Computer s respond to the command generated from clicking button in by executing second software A and display the results of execution in window e.g. as a message in . The execution of second software A automatically causes execution of first software associated therewith namely application specific classes Z and or script supporting classes . In this example computer s display a message in the form of the string Hello Groovy World that had been used as a value of an input parameter of the user selected method I named debug .

The just described process enables a script writer to easily change an application program even after deployment e.g. in a production system. Specifically the script writer may change only script code that contains second software and do so without changing any of the first software in the compiled code. For example classes Z and or classes that are executed with a current version of second software A are same as classes Z and or classes that were executed previously with an earlier version or even the initial version of second software A prior to preparation of the new instruction. Hence first software is executed unchanged relative to changes to a prior version of the second software even when first software is used in combination with a changed version of second software resulting from preparation and storage of the new instruction .

Note that although input values for second software A are specified in some embodiments in a user selected first software Z certain embodiments of computer s display input values in a tab of window as name value pairs i.e. name of input variable and its value . In such embodiments computer s receive user input in this tab identifying values to be input to second software A and it is these user input values from tab that are thereafter used e.g. the next time second software A is executed. Moreover such embodiments of computer s also display in another tab values output by execution of second software A. Values can be input in tab and output in tab in any of several different ways as will be readily apparent in view of this detailed description. Hence a specific layout of fields of name value pairs in tabs and is not a critical aspect in many embodiments unless described otherwise herein.

A specific manner in which second software A is executed by computer s is different in different embodiments. Computer s of some embodiments are programmed to implement a dynamic script processor that performs one or more of operations illustrated in . In one illustrative embodiment when second software A is to be executed a script generator of notifies script processor to begin execution. In turn script processor responds to such notification by performing validation operations and . As noted above operation validates second software A e.g. in the form of a script A by use of javax.tools . Moreover table is used by script processor to identify and validate the first software Z that is associated with and used in second software A e.g. validate classes Z identified by user input in field in screen . Operations and may be performed by dynamic script processor in any order relative to one another.

When the results of operations and indicate no errors then dynamic script processor performs operation A to instantiate by name the specific set of application specific classes Z. For example the method forName in a Java class may be used in some embodiments. One embodiment of processor instantiates classes Z as illustrated by instructions and in . Instantiation by name as just described enables dynamic script processor to be used with any set of classes Z Z and Z that may be selected by user input in field of screen in contrast to hard coding of a set of class names requiring a different version of instantiation instructions for each set of class names .

After instantiation of the specific set of application specific classes Z dynamic script processor performs operation to identify and instantiate and or initialize one of script engines A N for use in execution of instructions in a script A expressed in the second computer language e.g. Groovy . For example the name of script A may be used with a lookup of a table in a relational database to identify the language of instructions in script A which language was originally received as user input in screen and thereupon stored in table . As noted herein each script engine I implements an interface from instructions in first computer language namely the language of application specific classes Z e.g. Java to instructions in one of multiple second computer languages such as Groovy jRuby JavaScript . At this stage script engine I may be instantiated as illustrated by an example of operation shown in pseudo code in in Java.

In some embodiments each of multiple script engines A N implements for a corresponding scripting language functionality to support the Java Scripting API application programming interface framework defined in JSR 223 e.g. as described in the package javax.script for the Java Platform Standard Ed. 6 available from Oracle Corporation. For more details see Specification JSR 223 Scripting for the Java Platform Specification by Mike Grogan released Jul. 31 2006 that is incorporated by reference herein in its entirety. The Java Scripting API consists of interfaces and classes that define the Java Scripting Engines and provides a framework for use in Java applications. One embodiment of processor invokes execution of a JavaX language specific engine by using Invocable mInvocableEngine as illustrated by instruction in .

Referring to after act dynamic script processor performs operation to instantiate and or initialize resources for use in application specific classes Z instantiated in act A so that the resources can be used in execution of second software A. One embodiment of processor initializes one or more class resources and script resources as illustrated by operation in pseudo code of . Examples of class resources are illustrated in and examples of script resources are illustrated in . In some embodiments class resources are used to store objects that are passed to application specific classes also called custom classes as shown in pseudo code of by item . Such a processor may also instantiate a base interface as illustrated by operation in pseudo code of .

At this stage script engine N e.g. for the language Groovy is ready in some embodiments and so processor performs act B to use the engine N to invoke a top level function in second software A as shown in . Any of acts A B and or operation may implemented in different embodiments in combination with one another to share instructions that may be commonly used by script generator and script processor . As will be readily apparent in view of this detailed description the functionality of script generator shown in and the functionality of script processor shown in can be all integrated together and implemented as a single piece of software or divided up differently and implemented as other pieces of software depending on the embodiment.

As noted above a top level function at which all execution initially begins in second software A is identified by a name also called top level function name . One embodiment of script processor uses engine N to invoke the top level function main as illustrated by instruction in . Results of execution of the main function are thereafter conveyed by script processor as per act in to script generator . In the pseudo code of act is implemented to get a log file created by the script processor and results of execution stored in the class. Script generator displays the results of execution in window e.g. as a message in .

The above described operation of script processor implements two way visibility between the first computer language and the second computer language. Specifically software in a first computer language e.g. Java in the form of script engine N invokes execution of software in script A in the second computer language e.g. Groovy . Moreover as illustrated in an instruction within script A in the second computer language e.g. Groovy may itself invoke a method e.g. debug in a set of classes e.g. coreAPI in the first computer language e.g. Java . Such two way visibility provides flexibility as described herein in use of scripts e.g. in script code to dynamically extend application programs that are otherwise static.

Although many features that illustrate certain embodiments are described above other features of some embodiments also in accordance with the invention are described below. For example illustrates introduction of a syntax error in line 3 of second software A by the script writer adding the string v at the end of the instruction. After doing so and clicking the validate button in generates a command to cause computer s to check syntax and display multiple messages documenting the syntax error s in window as shown in .

Next in this example the script writer replaces a data type in the third instruction in line 4 with the variable sqltxt that was defined in line 3 resulting in a fourth revised version of second software A as shown in . Then as shown in the script writer adds at line 5 in the second software A a fourth instruction in the second computer language to access an array that is returned in the row set on execution of the query to the relational database described above to initialize the variable names resulting in a fifth revised version of second software A. Finally as shown in the script writer adds a fifth instruction in the second computer language to second software A in line 6 to print out the names using the debug method in the first computer language described above .

Second software A illustrated in although written in the scripting language Groovy uses and or extends functionality of one or more classes Z in first software written in the programming language Java. Although FIGS. K and R V illustrate only five 5 instructions in second software A as will be readily apparent to a skilled artisan in view of this detailed description such user input in the second computer language may add to second software A any number of instructions Ni e.g. one or more orders of magnitude larger than shown in and any number of variables Nv also one or more orders of magnitude larger than shown in which are interrelated with one another in second software A. The Ni instructions added by user input to second software A may be written to use and interrelate with any number of methods Nm and any number of attributes Na of a first software Z which are displayed to the user and so documented in window .

Thus embodiments of the type described above combine execution of second software A which can be changed during normal operation of computer s with execution of first software Z which is kept unchanged during normal operation of computer s . Such a combination of second software and first software can be used to implement application programs with any amount of programming logic of any complexity while keeping first software static and changing only the second software which supports instant customization of the application programs even when the first software is already deployed and currently in use in a production system. However the first software can also be changed in alternative embodiments e.g. by a user who is a programmer e.g. Java developer to support customization of application specific classes Z Z and Z in a specific production system while other software such as classes are kept unchanged relative to first softwares . In the just described alternative embodiments the changed classes are typically re deployed by halting operation of the specific production system which is re started after the re deployment at which time another user who is a script writer e.g. in Groovy may prepare second software as described above.

One illustrative embodiment that uses the Java Scripting API is described in pseudo code shown in that can be readily understood by any Java developer in view of this description.

Use of scripts A N with a specific set of classes Z for an application program enables a human being script writer to quickly and easily change run time behavior of the combination of first and second software i.e. classes Z and scripts A N. The script writer can quickly and easily prepare and or change the second software scripts A N and do so without changing or even knowing how to change the first software i.e. classes Z. Moreover scripts A N can be written in any one of several scripting languages that may be object oriented enabling the combination of the first software and the second software to be changed by any script writer who knows one of the scripting languages.

The methods of may be used to program one or more computer s each of which may be implemented by a computer system of the type illustrated in which is discussed next. Specifically a computer system includes a bus or other communication mechanism for communicating information and one or more processor s coupled with bus for processing information. Computer system uses as the above described memory a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions e.g. for the methods of C to be executed by processor .

Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor such as script processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display device or video monitor such as a cathode ray tube CRT or a liquid crystal display LCD for displaying information to a computer user may be displayed on display . An input device including alphanumeric and other keys e.g. of a keyboard is coupled to bus for communicating information to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

As described elsewhere herein class revealing script generator and dynamic script processor are implemented by computer system in response to processor executing one or more sequences of one or more instructions that are contained in main memory . Such instructions may be read into main memory from another non transitory computer readable storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the operations of a process described herein and illustrated in . In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term computer readable non transitory storage medium as used herein refers to any non transitory storage medium that participates in providing instructions to processor for execution. Such a non transitory storage medium may take many forms including but not limited to 1 non volatile storage media and 2 volatile storage media. Common forms of non volatile storage media include for example a floppy disk a flexible disk hard disk optical disk magnetic disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes a PROM and EPROM a FLASH EPROM any other memory chip or cartridge that can be used as storage device . Volatile storage media includes dynamic memory such as main memory which may be implemented in the form of a random access memory or RAM.

Instructions to processor can be provided by a transmission link or by a non transitory storage medium from which a computer can read information such as data and or code. Specifically various forms of transmission link and or non transitory storage medium may be involved in providing one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be comprised in a non transitory storage device such as a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory RAM and send the instructions over a telephone line using a modem.

A modem local to computer system can receive information about a change to a collaboration object on the telephone line and use an infra red transmitter to transmit the information in an infra red signal. An infra red detector can receive the information carried in the infra red signal and appropriate circuitry can place the information on bus . Bus carries the information to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . Local network may interconnect multiple computers as described above . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and network both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit information retrieved from RDBMS database through Internet ISP local network and communication interface . The instructions for performing the operations of may be executed by processor as they are received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may additionally or alternatively obtain instructions and any related data in the form of a carrier wave.

Note that is a very low level representation of many hardware components of a computer system. Several embodiments have one or more additional software components in main memory as shown in . Specifically in such embodiments computer system of implements a relational database management system to manage data in one or more tables such as table in of a relational database of the type illustrated in . Such a relational database management system may manage a distributed database system that includes multiple databases each table being stored on different storage mechanisms.

In some embodiments the multiple databases are made to appear to SDA as a single database. In such embodiments script generator and or a script processor can access and modify the data in a database via RDBMS that accepts queries in conformance with a relational database language the most common of which is the Structured Query Language SQL . The commands are used by script generator and or a script processor of some embodiments to store modify and retrieve data about an application program in the form of rows in a table in relational database . Relational database management system further includes output logic that makes the data in database table available to a user via a graphical user interface that generates a display on a video monitor . In one example the output logic of computer provides results via a web based user interface that depicts in a browser information related to scripts and classes as illustrated in . Additionally and or alternatively screens responsive to a command in a command line interface and display on a video monitor may be generated in a graphical user interface of the type described above in reference to .

Numerous modifications and adaptations of the embodiments described herein will become apparent to the skilled artisan in view of this disclosure. Numerous modifications and adaptations of the embodiments described herein are encompassed by the scope of the invention.

