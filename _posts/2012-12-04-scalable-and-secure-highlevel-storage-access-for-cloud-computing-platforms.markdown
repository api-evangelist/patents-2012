---

title: Scalable and secure high-level storage access for cloud computing platforms
abstract: An untrusted component exposing a high level storage object interface within an untrusted client virtual machine accepts application level storage object operations. Responsive to a storage object operation, the untrusted component passes a message through the underlying hypervisor to an associated trusted component. The trusted component processes the message by authenticating the client virtual machine and locating an internal mapping between the client virtual machine and an associated customer-specific set of backend storage resources to which the requested storage object operation is to be applied. The trusted component uses a trust relationship with the backend storage system to securely communicate the storage object operation to the backend storage system, and passes the operation results through the hypervisor back to the untrusted component in the source client virtual machine from which the storage object request originated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08997096&OS=08997096&RS=08997096
owner: EMC Corporation
number: 08997096
owner_city: Hopkinton
owner_country: US
publication_date: 20121204
---
The disclosed system relates generally to cloud computing platforms and applications and more specifically to methods and systems for providing scalable and secure high level storage access for cloud computing platforms.

As it is generally known cloud computing typically refers to the use of remotely hosted resources to provide services to customers over one or more networks such as the Internet. Resources made available to customers are typically virtualized and dynamically scalable. Cloud computing services may include any specific type of application. Some cloud computing services are for example provided to customers through client software such as a Web browser. The software and data used to support cloud computing services are located on remote servers owned by a cloud computing service provider. Customers consuming services offered through a cloud computing platform need not own the physical infrastructure hosting the actual service and may accordingly avoid capital expenditure on hardware systems by paying only for the service resources they use and or a subscription fee. From a service provider s standpoint the sharing of computing resources across multiple customers aka tenants improves resource utilization. Use of the cloud computing service model has been growing due to the increasing availability of high bandwidth communication making it possible to obtain response times from remotely hosted cloud based services similar to those of services that are locally hosted.

Cloud computing infrastructures often use virtual machines to provide services to customers. A virtual machine is a completely software based implementation of a computer system that executes programs like an actual computer system. One or more virtual machines may be used to provide a service to a given customer with additional virtual machines being dynamically instantiated and or allocated as customers are added and or existing customer requirements change. Each virtual machine may represent all the components of a complete system to the program code running on it including virtualized representations of processors memory networking storage and or BIOS Basic Input Output System . Virtual machines can accordingly run unmodified application processes and or operating systems. Program code running on a given virtual machine executes using only virtual resources and abstractions dedicated to that virtual machine. As a result of such encapsulation a program running in one virtual machine is completely isolated from programs running on other virtual machines even though the other virtual machines may be running on the same underlying hardware. In the context of cloud computing customer specific virtual machines can therefore be employed to provide secure and reliable separation of code and data used to deliver services to different customers.

A hypervisor or virtual machine monitor is a system program that provides a virtual environment in which multiple virtual machines can concurrently execute in isolation. The hypervisor provides the virtual execution environment over a physical hypervisor domain made up of one or more underlying host computer systems. The hypervisor manages allocation of physical resources from the hypervisor domain to the virtual machines executing in the virtual environment in a way that maintains code and data isolation between virtual machines. Physical resources in the hypervisor domain that are virtualized by the hypervisor for allocation to virtual machines include processor memory and other physical resources. Hypervisors referred to as Type 1 native or bare metal hypervisors run directly on the host s hardware as a hardware control and guest operating system monitor. Other hypervisors referred to as Type 2 or hosted hypervisors are software applications running within a conventional operating system environment. In addition to physical resource virtualization and allocation hypervisors may also provide virtual machines with other specific services such as transport services enabling communication between virtual machines.

Traditional approaches to storage virtualization in virtual execution environments offer block level storage i.e. virtual block devices. Such storage is easily used by one virtual machine but cannot be easily shared in a secure and scalable way as is. This results in problems when it is desirable to have higher level sharing e.g. at the file system and or database level. For example a customer using a collection of virtual machines located within the service provider cloud may desire to store computation results persistently within the cloud at the file or database level in order to allow convenient high level data sharing across multiple virtual machines. With existing systems such higher level sharing must be implemented either by the cloud based service consumer for example using clustered file system or clustered database software in the virtual machine cluster or by the cloud based service provider using consolidated shared back end storage systems. In the former case the responsibility for configuration and management of the shared storage falls on the service consumer meaning that the cloud computing platform fails to deliver the truly virtualized storage service desired by the service consumer and does not reduce the consumers management tasks to a minimum. In the latter case a straightforward application of physical world technologies needed to support secure multi tenant cloud consumer virtual machine access to consolidated shared backend storage incurs significant overhead for network traffic separation encryption and protocol security requiring highly complex security and networking infrastructure to ensure the privacy of storage related communications within the customer domains. Such complexity of implementation can be excessively costly using existing approaches when potentially thousands of customer partitions i.e. dedicated subsets of infrastructure must be supported by the cloud service provider.

One example of an existing cloud based storage solution is Amazon Elastic Block Store EBS which is part of the Amazon Web Services offered over the Internet by Amazon.com Inc. EBS provides persistent block level storage volumes for virtual private servers in the computer cloud. However EBS cannot be shared by virtual machines as is. As a result virtual machines need to run a distributed file system or the EBS block storage needs to be exported over a Network Attached Storage NAS protocol. Existing solutions such as EBS disadvantageously require the service customer to implement any higher level data sharing that may be needed to support distributed applications executing across the customer s multiple physical and or virtual machines.

It would accordingly be desirable to have a new method and system for providing scalable and secure high level storage access for cloud computing platforms that addresses the aforementioned and other shortcomings of prior approaches.

To address the above described and other shortcomings of previous approaches a new method and system are disclosed for providing scalable and secure high level storage access for cloud computing platforms. In the disclosed system a component that is untrusted from the perspective of the cloud service provider an untrusted component and exposes a high level storage object interface is contained within an untrusted client virtual machine executing in a hypervisor based virtual environment. The untrusted component accepts application level storage object operations such as file system or database commands that are submitted to its storage object interface. In response to receipt of a storage object operation the untrusted component passes a message through a secure hypervisor based transport service to an associated component that is deployed and managed by the cloud service provider a trusted component . The trusted component may for example be contained in a separate virtual machine or within the hypervisor itself. The message passed through the hypervisor identifies the source client virtual machine from which the storage operation was received by the hypervisor allowing straightforward enforcement of multi tenant isolation.

The secure hypervisor based transport through which the storage object operation is passed may take various specific forms. Examples include a hypervisor call hypercall a special purpose shared memory based transport and hypervisor local virtual networking services provided by the hypervisor to virtual machines in the virtual environment. Hypervisor services may also be used as a basis for authentication of the requesting client virtual machine for example by using virtual machine identifiers issued by the hypervisor that cannot be forged.

The trusted component processes the message received from the hypervisor in part by locating an internal mapping between the identity of the source client virtual machine for the operation and an indication of a customer specific set of backend storage resources to which the requested storage object operation is to be applied. The trusted component may also use the source client virtual machine identity to determine one or more virtual machine specific storage access parameters. The storage access parameters may for example include storage access rights and or traffic shaping parameters associated with the requesting client virtual machine and that are to be applied to the request within the trusted component and or within the backend storage system.

The trusted component uses an established trust relationship with the backend storage system to communicate the storage object operation to the backend storage system e.g. using protocols internal to the backend storage system . The trusted component indicates the customer specific set of back end storage resources that the operation is to be applied to when it passes the storage operation to the back end storage system. For example in the case where the back end storage system natively supports multi tenancy such indication may be made by including an identifier of the customer specific set of back end storage resources with the operation such as a tenant identifier or the like. In this case the resource set identifier is understood by the back end storage system and used by the back end storage system to identify the customer specific set of back end storage resources to which the operation is to be applied. Alternatively in the case where the back end storage system does not natively support multi tenancy the trusted component may indicate the customer specific set of back end storage resources by directing the operation directly to the customer specific set of back end storage resources for example by sending the operation to a specific instance of back end storage resources e.g. file system instance database instance etc. that is known by the trusted component to be within or make up the customer specific set of back end storage resources associated with the requesting client virtual machine.

When the results of the storage object operation are communicated from the backend storage system to the trusted component e.g. again using the backend storage system s internal protocols the trusted component passes the results through the hypervisor back to the source client virtual machine from which the storage object request originated. The untrusted component receives the operation results and passes them to the requesting client application program.

In the disclosed system the storage software stack is effectively split into open generic and private protected portions. The untrusted component is exposed directly to the application in the untrusted client virtual machine offering native application programming interfaces APIs to client applications for access to storage e.g. file system or database . The trusted component privately maintains a mapping between client virtual machines and corresponding shares of the backend storage resources thus supporting secure isolation of virtualized storage resources between customers.

The disclosed system offers multiple advantages over previous solutions. These advantages include providing higher level access to customer specific virtual storage such as through file system and or database level commands. The disclosed system also effectively leverages a two tier cloud communications infrastructure for communications between client virtual machines and trusted components and communications between trusted components and backend cloud storage. In the first tier customer specific client virtual machines communicate with trusted components over a secure hypervisor based transport with high bandwidth and low latency. In the second tier trusted components communicate with the backend store over networking provided within the cloud storage trusted environment. The trusted components accordingly form an edge of the storage cloud and present a scalable caching layer that moderates the load on the networking infrastructure and backend store itself.

The disclosed system leverages hypervisor based transport security to communicate messages between the open and trusted components. Networking provisioning and management complexity are reduced and virtual machine based authorization of access to shared storage is used providing protection against compromised or malicious customer side virtual machines. The disclosed system further supports convenient addition of multi tenancy capabilities to backend storage systems and further facilitates delivery of legacy storage services in a cloud computing environment.

In order to provide each one of the Cloud Service Customers with individualized service the Compute Cloud instantiates one or more virtual machines for each one of the Cloud Service Customers . As shown in Virtual Machines are used exclusively to provide a service to Cloud Service Customer Virtual Machines are used exclusively to provide a service to Cloud Service Customer and Virtual Machines are used exclusively to provide a service to Cloud Service Customer . By dedicating a set of virtual machines to each individual customer the Compute Cloud ensures that any computational activity e.g. application program execution involved in servicing one customer cannot interfere with service delivery to another customer and that all such computational activity is private to each customer. Moreover as the computation needs of a given customer change the number of virtual machines assigned to that customer can be dynamically adjusted as needed within the Compute Cloud .

Data used by cloud based services provided to Cloud Services Customers is stored within a Storage Cloud which may similarly include a number of storage devices and associated server computer systems also managed by the same cloud service provider business entity within the same or another data center owned and operated by the cloud service provider. The Storage Cloud is shown including at least one Backend Storage System including one or more network file systems and or database management systems. As described further below the disclosed system conveys high level storage object commands e.g. file system and or database commands and associated results between applications executing on virtual machines in the Compute Cloud and Backend Storage System as shown in by Storage Operations for example over a private LAN or other type of private network that is under the control of the cloud service provider. The disclosed system also supports partitioning of storage resources within the Storage Cloud e.g. directories databases file systems etc. into private customer specific back end storage resource sets that are each only accessible to corresponding ones of the Cloud Service Customers . Various specific types of back end storage resources may be partitioned into the customer specific back end storage resource sets of the disclosed system including disk sets storage object sets directory sub trees database tables or portions of database tables and or instances of file systems or databases.

Those skilled in the art will recognize that each of Cloud Service Customers may include one or more customer computer systems and or intelligent electronic devices such as desktop laptop or palmtop computer systems personal digital assistants cell phones or other electronic devices. Each such customer system may include or control a display device capable of displaying a graphical user interface including data and or information generated at least in part based on a cloud based service provided through the Compute Cloud and or Storage Cloud such as a liquid crystal display LCD cathode ray tube CRT interferometric modulator display IMOD light emitting diode LED or the like. Those skilled in the art will further recognize that the aforementioned customer systems as well as server computer systems in the Compute Cloud and Storage Cloud may each include one or more processors program and or data storage such as memory for storing program code executable on such processors and input output devices and or interfaces. The systems within each of the Cloud Service Customers the Compute Cloud and the Storage Cloud are all communicably connected by one or more communication networks such as for example a Local Area Network LAN the Internet and or some other specific type of communication network.

During operation of the components shown in Application executes within Client Virtual Machine to perform computations supporting a service provided to a cloud service customer over Communications . Communications include communications over one or more networks external to the Cloud Storage Trusted Environment for example including public networks such as the Internet and or one or more customer operated and controlled networks. The Untrusted Component includes an application programming interface API that can accept high level storage object operations including high level file system and or database operations from the Application .

For example the high level storage object operations accepted by the Untrusted Component may generally be any specific type of storage operations providing application access to storage objects such as files directories and or database records and or to collections of such objects. Examples of a storage object collection include a file system instance a record set a table of records and a database instance. The storage object operation interface provided by the Untrusted Component may advantageously be compatible with interfaces that would alternatively be available to the application from native file system or database clients such as POSIX Portable Operating System Interface for Unix file system APIs Microsoft SQL Native Client APIs and others.

Various specific types of high level storage object operations may be accepted by the Untrusted Component of the disclosed system. For example the Untrusted Component may accept file level file system API calls such as file create file read file open file write and or file delete operations. Other examples of file system storage object operations that may be accepted by the Untrusted Component include file attribute get and or set operations file directory commands e.g. change directory make directory etc. and or file system mount and unmount commands. In one embodiment processing of a file system mount request includes taking steps to make a file system hosted in the back end storage system ready for use by the requesting client virtual machine for example including reading certain index data structures from the back end storage into the client virtual machine in anticipation of future operations performed on the file system. The access rights granted to the requesting client virtual machine for a mount operation may for example be the lesser of the rights requested by the client virtual machine and access rights specified for the requesting client virtual machine in an Access Control Table see . Examples of database system storage object operations that may be accepted by the Untrusted Component include a database session login a database query and or insertion removal of database records from a table.

Upon receipt of a storage object operation from Application the Untrusted Component passes the storage object operation through the Hypervisor to the Trusted Component . In the illustrative embodiment of the Trusted Component is located within the Access Point Virtual Machine . As shown in the Untrusted Component uses a secure Hypervisor based Transport to pass a message containing the storage object operation to the Trusted Component . The Hypervisor based Transport may for example be a shared memory type of communication provided between virtual machines in the Hypervisor based Virtual Environment by the Hypervisor and accordingly accessible through a message passing or other specific type of interface provided by the Hypervisor to the Untrusted Component .

Specifically by virtue of having full control over the physical resources of the hypervisor domain and over access to those resources by all virtual machines in the hypervisor based virtual environment the Hypervisor is able to effectively maintain the privacy and security of the Hypervisor based Transport such that so long as the Hypervisor is not compromised i.e. the hypervisor security measures are not defeated communications between the Untrusted Component and the Trusted Component over the Hypervisor based Transport cannot be intercepted or interfered with by other virtual machines. The Hypervisor may also form a basis for authentication of Client Virtual Machine by providing virtual machine identifiers that cannot be forged again assuming that the Hypervisor itself is not compromised . For example the Hypervisor may assign a virtual machine transport address to each virtual machine to be used as the basis for communications between virtual machines and that cannot be forged by virtual machines in the Hypervisor based Virtual Environment . When used as virtual machine identifiers by the disclosed system such un forgeable transport addresses assigned by the Hypervisor may be used as the basis for strong authentication by Trusted Component . Examples of secure hypervisor based transports include VMware VMCI Virtual Machine Communication Interface and VmWare local within a single hypervisor virtual networking. Examples of hypervisor assigned transport addresses that cannot be forged include VmWare vNIC Ethernet addresses when used in combination with VmWare vSwitch security settings that prevent changes of vNIC Ethernet addresses.

The message passed by the Untrusted Component to the Trusted Component may for example be formatted by the Untrusted Component as a remote procedure call RPC . The message passed by the Untrusted Component to the Trusted Component may further include credentials e.g. user name and password of a user that requested or is otherwise associated with the storage object operation as passed to the Untrusted Component from the Application . For example if the interface provided by the Untrusted Component to the Application includes an explicit user session login e.g. in the case of some database system operations then user name password or other user authentication tokens are received from the Application passed from the Untrusted Component to the Trusted Component and then conveyed to the backend storage system for application level authentication. Alternatively in the case of file system operations where the user has previously been authenticated user credentials passed from Untrusted Component to Trusted Component and on to the back end storage system may include user and group IDs that can be used by the backend storage system to authorize access to specific storage objects.

When the Trusted Component receives the message from Untrusted Component it determines the identity of the client virtual machine that originated the storage object operation contained in the message for example using an identifier uniquely identifying Client Virtual Machine and contained in the message. Using the identity of the source client virtual machine the Trusted Component determines a set of backend storage resources dedicated to providing service to a customer associated with that client virtual machine. The Trusted Component then uses Trusted Communications between the Access Point Virtual Machine and the backend storage system shown in as Distributed Storage Backend to pass the storage object operation and user credentials to the backend storage system in a way that ensures that the operation will be applied to the correct customer specific set of storage resources.

In an embodiment in which the back end storage system implements multi tenancy natively the client virtual machine identifier is translated to a tenant identifier uniquely associated with the customer for the client virtual machine and the tenant identifier is passed to the back end storage system and the back end storage system maps the tenant identifier to the correct customer specific set of storage resources to which the operation is to be applied. Alternatively in an embodiment in which back end storage system does not natively support multi tenancy the client virtual machine identifier is mapped to an instance or partition of the back end storage system to which the storage operation is directly conveyed by the Trusted Component . In either case steps may be taken to authenticate the requesting client virtual machine identifier prior to forwarding the storage object operation to the back end storage system. In the case where hypervisor based authentication is used the client virtual machine identifier received by the Trusted Component may be guaranteed to be authentic and no further authentication is necessary. Alternatively if hypervisor based authentication is not available the disclosed system may be embodied such that other techniques are used for client virtual machine identity authentication such as authentication based on keyed HMACs Hashed Message Authentication Codes which are a digital signature on a part of the message created using a shared secret key.

Trusted Communications may for example be based on internal protocols specific to the Distributed Storage Backend e.g. a distributed file system protocols passed over a network based transport e.g. over an Internet Protocol IP based transport . In the illustrative embodiment of Trusted Communications occur within a single data center over private high speed LAN connections internal to the data center taking advantage of co location of the compute cloud and storage cloud resources. Additional security features such as encryption and strong authentication are accordingly not required to protect the storage system internal protocols as would be necessary in an untrusted networking environment. In this way communications within the Cloud Storage System Trusted Environment such as the Trusted Communications may conveniently be protected using networking traffic separation provided within the communication infrastructure of the Cloud Storage System Trusted Environment . The illustrative networking traffic separation measures include physical isolation of the networking infrastructure used to communicate within the Cloud Storage System Trusted Environment using VLANs Virtual Local Area Networks .

Upon receipt of the communication from the Access Point Virtual Machine over Trusted Communications the Distributed Storage Backend determines whether the user indicated by the credentials passed with the message is authorized to perform the requested operation. If so the Distributed Storage Backend performs the requested storage object operation on the customer specific set of storage resources to which the operation is directed.

For example as shown in Distributed Storage Backend includes 1 Storage Resources for Customer 2 Storage Resources for Customer and 3 Storage Resources for Customer . If the message passed from the Trusted Component over Trusted Communications indicates that the storage object operation is to be performed on Storage Resources e.g. because the source Client Virtual Machine for the request was mapped to that resource set in the Access Control Table then the Distributed Storage Backend checks the credentials passed with the message against access authorizations specifically associated with Storage Resources .

The results of the storage object operation are passed back from the Distributed Storage Backend to the Trusted Component in the Access Point Virtual Machine . The operation results are passed from the Trusted Component through the Hypervisor based Transport to the Untrusted Component which may in turn pass them to the requesting Application to support the cloud based service provided to the service customer over Communications .

In one embodiment requests for storage object operations can be satisfied by the Trusted Component using information which was cached from earlier replies received from the Distributed Storage Backend . In such a case the Untrusted Component does not have to go beyond the Trusted Component into the Distributed Storage Backend to fulfill application level storage object operation requests. This in turn results in a caching layer made up of trusted components that reduces moderates the load on the Distributed Storage Backend and the networking infrastructure that connects the trusted components to the Distributed Storage Backend e.g. Trusted Communications .

In an embodiment in which the back end storage system natively supports multi tenancy indication of the customer specific set of storage resources for a given client virtual machine may be maintained in the Access Control Table as a tenant identifier or the like that is passed to and understood by the backend storage system. Alternatively in an embodiment in which the back end storage system does not natively support multi tenancy indication of the customer specific set of storage resources for a given client virtual machine may be maintained in the Access Control Table as a name and or address of the customer specific set of storage resources as required by the backing store access protocols such as for example an or tuple for a backing store access point a root directory location or any other specific type of name and or address to which the trusted component will pass the storage object operation directly.

Also contained in the Access Control Table are a number of storage access parameters shown in as client virtual machine specific access rights and traffic shaping parameters. When processing a received storage object operation the trusted component refers to the storage access parameters associated with the requesting client virtual machine and applies the associated storage access parameters to the operation. For example when a storage object operation is received from Client Virtual Machine A that operation is processed by the trusted component and or backend storage system subject to Access Rights for Client Virtual Machine A. If the Access Rights for Client Virtual Machine A do not indicate that the requested operation is permitted on the object indicated in the request then the trusted component and or backend storage system will prevent the operation from being performed e.g. the trusted component will not forward the operation to the backend storage system .

Similarly when a storage object operation is received from Client Virtual Machine A that operation is processed by the trusted component and or backend storage system subject to the Traffic Shaping Parameters for Client Virtual Machine A. Traffic shaping parameters that may be stored in the Access Control Table include parameters for shaping storage object request traffic on a per client virtual machine basis for example based on request bandwidth and request rate. The trusted component applies the client virtual machine specific traffic shaping parameters on a per storage object message basis. For example a given request metric may be shaped using three stored parameters setting limits on storage object request traffic between the trusted component and the back end storage system 1 sustained average 2 peak maximum and 3 burst size i.e. how much traffic above average is allowed at once . Accordingly for request bandwidth the stored limits would be 1 average bandwidth bytes sec 2 peak bandwidth bytes sec and 3 burst size bytes . Analogously for request rate the stored limits would be 1 average rate requests sec 2 peak rate requests sec and 3 burst size requests . Traffic shaping by the trusted component with regard to request bandwidth advantageously limits I O Input Output load on the back end storage system while traffic shaping with regard to request rate advantageously limits metadata processing load on the back end storage system.

In one embodiment the Access Control Table or its equivalent may be stored within the trusted component or elsewhere within the access point virtual machine. Alternatively the Access Control Table or its equivalent may be stored within the hypervisor. In an embodiment in which the Access Control Table is stored within the hypervisor and the trusted component is contained within an access point virtual machine the Access Control Table may be accessed by the trusted component using hypervisor provided interfaces.

While for purposes of explanation a table data structure is shown for mapping client virtual machines to customer specific sets of backend storage resources in those skilled in the art will recognize that any other specific type of structure may be used in the alternative to provide such mappings.

The values in the Access Control Table may for example be made accessible to a system administrator through a system administrator user interface or the like. Such accessibility advantageously allows the system administrator to dynamically control access rights and traffic shaping parameters on a per virtual machine basis and to control the mappings of specific virtual machines to customer specific sets of backend storage resources.

The VFS Kernel Subsystem receives a storage object operation through the System Call Interface . As shown at in a VFS like RPC Remote Procedure Call style protocol is used to communicate the storage object operation over a hypervisor based transport e.g. Hypervisor based Transport in . The storage object operation is received by a VFS like Request Dispatch layer . The VFS like Request Dispatch layer determines the appropriate storage resource set for the storage object operation based on the identity of the requesting client virtual machine and uses an FS File System Backend Access Point Implementation 82 to communicate with an FS File System Cluster Subsystem using distributed file system DFS protocols over a network transport e.g. IP as shown in at . In the embodiment of the layers and are contained within a trusted component e.g. Trusted Component in .

The FS Cluster Subsystem determines whether the requested storage object operation is authorized with regard to the specified set of storage resources. If so the operation is performed and the results passed back through layers and to the User Application . As shown in the FS Cluster Subsystem is partitioned into sets of storage resources used to provide services for corresponding customers such as Storage Resources for Customer A Storage Resources for Customer B Storage Resources for Customer C and so on.

At step in response to a high level storage object operation being requested by application code in the Client Virtual Machine while providing the cloud based service to the user credentials associated with Client Virtual Machine and the user s credentials are made available to entities in cloud storage administrative domain e.g. within the Cloud Storage System Trusted Environment of . In the case where hypervisor based authentication of client virtual machine identifiers is available i.e. client virtual machine identifiers are guaranteed not to be forged credentials associated with the Client Virtual Machine may be made up of the virtual machine identifier of Client Virtual Machine . Alternatively in the case where hypervisor based authentication of client virtual machine identifiers is not available credentials associated with the Client Virtual Machine may include both the virtual machine identifier of Client Virtual Machine and a digital signature e.g. HMAC signature . In either case the credentials of the Client Virtual Machine and the user credentials may be passed from the Client Virtual Machine through an underlying hypervisor to a trusted component e.g. Trusted Component in .

At step Client Virtual Machine is authenticated within the Cloud Storage System Trusted Environment for example by the Trusted Component based on the provided client virtual machine credentials. As described above in the case where the hypervisor guarantees that virtual machine identifiers cannot be forged the Trusted Component relies on the virtual machine identifier provided from the client virtual machine through the hypervisor to be authentic. Alternatively where the hypervisor does not provide a guarantee that the virtual machine identifier provided by the Client Virtual Machine has not been forged then Client Virtual Machine may be authenticated as an additional part of sending by way of a message passing or other specific type of operation the storage object operation and user credentials from the Client Virtual Machine to the Trusted Component through the hypervisor for example based on a digital signature contained in the message e.g. HMAC and an associated shared secret i.e. secret key shared by the Client Virtual Machine and the Trusted Component .

If the Client Virtual Machine is successfully authenticated then the identity of the Client Virtual Machine is used in the Cloud Storage System Trusted Environment to determine a customer specific set of backend storage resources associated with a customer to which Client Virtual Machine belongs e.g. Cloud Service Customer of . The determination of the tenant identifier address and or name of such customer specific set of backend storage resources may for example be performed by the Trusted Component . For example a tenant identifier determined in this way identifies storage resources in a backend storage system that are dedicated to providing service to Cloud Service Customer . The storage object operation is then passed to the backend storage system with the tenant identifier and the user credentials. At step the backend storage system uses the provided user credentials to authorize access to the specific storage objects accessed by the requested storage object operation.

Thus there is disclosed a system and method that offers a file level or database level scalable and secure storage virtualization solution for use by virtual machines used to provide cloud based services. The disclosed approach effectively para virtualizes a client virtual machine storage software stack by splitting a portion of the stack into open and trusted components. The untrusted component is exposed in the untrusted client virtual machines. The untrusted component can offer completely unchanged application APIs to applications and communicates with the trusted component over a secure hypervisor based transport. The trusted component is deployed in trusted access point virtual machines that communicate with the distributed storage backend. Advantageously if the distributed storage backend does not offer multi tenancy natively the disclosed system allows for the convenient addition of the multi tenancy feature. The disclosed system also allows for enforcing client virtual machine specific access rights to the backend storage system thus limiting the effect of malicious actions should a customer s client virtual machine become compromised and allows for traffic shaping of request streams on a per client virtual machine basis.

The disclosed system can take the form of an entirely software based embodiment an entirely hardware based embodiment or an embodiment containing both software and hardware elements. The figures include block diagram and flowchart illustrations of methods apparatus s and computer program products according to an embodiment of the invention. It will be understood that each block in such figures and combinations of these blocks can be implemented by computer program instructions. These computer program instructions may be loaded onto a computer or other programmable data processing apparatus to produce a machine such that the instructions which execute on the computer or other programmable data processing apparatus create means for implementing the functions specified in the block or blocks. These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function specified in the block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the block or blocks.

Those skilled in the art should readily appreciate that programs defining the functions of the present invention can be delivered to a computer in many forms including but not limited to a information permanently stored on non writable storage media e.g. read only memory devices within a computer such as ROM or CD ROM disks readable by a computer I O attachment b information alterably stored on writable storage media e.g. floppy disks and hard drives or c information conveyed to a computer through communication media for example using wireless baseband signaling or broadband signaling techniques including carrier wave signaling techniques such as over computer or telephone networks via a modem.

While the invention is described through the above exemplary embodiments it will be understood by those of ordinary skill in the art that modification to and variation of the illustrated embodiments may be made without departing from the inventive concepts herein disclosed.

