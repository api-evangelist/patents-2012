---

title: Application security testing
abstract: Example embodiments disclosed herein relate to real-time modification of an application under test (AUT). A security rest is performed on the AUT. A real-time modifier determines that a portion of a function to be executed by the AUT is unsafe. The real-time modifier modifies execution of the AUT to not execute the portion.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09438617&OS=09438617&RS=09438617
owner: Hewlett Packard Enterprise Development LP
number: 09438617
owner_city: Houston
owner_country: US
publication_date: 20120928
---
Software security testing is used to identify vulnerabilities in an application such as a Web application. Traditional black box security testing for Web based software works by using a security testing application often referred to as a scanner which poses as an attacker. In a black box approach the scanner explores an Application Under Test AUT by making HTTP requests and evaluating the HTTP responses or the lack thereof in order to find all of the URLs where the AUT accepts input. The URLs where the AUT accepts input may be referred to the attack surface of the AUT. The scanner then creates attacks based on the attack surface and likely categories of vulnerabilities. The scanner applies the attacks to diagnose the presence or absence of vulnerabilities by evaluating the program s HTTP responses.

Embodiments described herein provide techniques for performing testing of applications such as web applications. When a company desires to know how secure a web application the company has in production is or going to be put into production the company often uses a security testing solution such as a penetration testing solution e.g. use of a scanner fuzz testing vulnerability testing software security testing website security testing combinations thereof or the like. The company may wish to use a copy of the application in production as an Application Under Test AUT . A reason to use an application in production or an application that is going to be put into production for testing is that the company may desire to test the same code. Using an AUT that is going to be the application in production at a quality assurance stage ensures that the application used in production has been tested. Throughout this description scanners are referred to however it should be noted that other testing solutions may similarly be used.

During dynamic web application scanning a scanner imitates actions of a user working with the application to discover application attack surfaces and to perform a multitude of attacks on discovered attack vectors. Because scanners are not aware of logic of the application that the scanner is testing some of those operations may be damaging to the AUT or to its environment.

In one example during the scan of an enterprise application the application may send numerous emails to various employees once the scanner discovered a contact us page. However in the point of view of the scanner the test was just another Hypertext Transfer Protocol HTTP POST attack vector.

In another example the goal of a Denial of Service DoS attack is to hang or bring down the application. A penetration testing solution wants to find these vulnerabilities and does that by sending out these attacks that can bring down the application. When succeeding the application goes down or hangs which takes away from further testing.

The dangerous and disruptive nature of scans can lead to customers spending a large amount of time sandboxing applications under test. This may not be successful because of the internal complexity of the application and lack of complete knowledge of its functionality. The task of reverting the application back to original state after each scan can be time consuming and any mistake during the process may lead to inter scan inconsistencies confusing the consumer of vulnerability reports. Further if the AUT s state is disrupted by security testing the test may fail prematurely for example due to the AUT crashing becoming non responsive application logic being skewed by attacks etc. As such the security test may fail to find critical vulnerabilities of the AUT because the AUT may fail before such tests are executed.

Accordingly benefits of the approach introduced herein would include fixing the DoS problem on the fly but still report the problem back to the testing solution and dynamically modifying execution of the AUT to keep the AUT from performing actions deemed unsafe. The approach can ensure that the application stays up and running while it still points out how an attacker may take advantage of any problems in the application. Other damaging or unsafe operations may include wiping database records modifying database records polluting databases with multiple records created during application crawling and audit unexpected operations with a server side file system exhaustion of server side resources e.g. available sockets etc.

The AUT can execute in a real time modifier environment. As such the outcomes of functions within the AUT can be changed or modified. For example by instrumenting Application Programming Interfaces APIs in the application the behavior of the AUT can be modified on the fly. For example if an unsafe procedure is called the real time modifier can emulate the procedure s execution without actually performing the dangerous operations. In certain examples the real time modifier environment can have access to the APIs employed by the AUT. Examples of real time modifier solutions can facilitate implementation include Java and .NET frameworks. These frameworks may be used to provide database email and communication services to developers.

As illustrated in the system may include a computing device which can include a processor connected through a bus to a presentation device such as a display a keyboard and one or more input devices such as a mouse touch screen or keyboard. In an embodiment the computing device is a general purpose computing device for example a desktop computer laptop computer server and the like. The computing device can also have one or more types of non transitory computer readable media such as a memory that may be used during the execution of various operating programs including operating programs used in embodiments of the present invention. The memory may include read only memory ROM random access memory RAM and the like. The computing device can also include other non transitory computer readable media such as a storage system for the long term storage of operating programs and data including the operating programs and data used in embodiments of the present invention.

In an embodiment the computing device includes a network interface controller NIC for connecting the computing device to a server . The computing device may be communicatively coupled to the server through a network such as the internet a local area network LAN a wide area network WAN or another network configuration. The server may have a non transitory computer readable media such as storage device for storing data buffering communications and storing operating programs of the server . Communications between the computing device and the server may be conducted using a request response protocol such as the Hyper Text Transfer Protocol HTTP or another API.

The server may be an application server that hosts an AUT . The server also includes a real time modifier that can monitor and or modify execution of the AUT . In certain examples the real time modifier acts as an environment for the AUT to execute. The real time modifier can be implemented using a software framework such as the .NET framework the Java Virtual Machine or other similar engines. In other examples aspect oriented programming or other software may be used. In some examples the server can be implemented as a computing device such as computing device a laptop a desktop computer a workstation or other computing device.

In one example Java Virtual Machine instrumentation is used. An API Called Instrument can be used to monitor and or manage APIs that are called. Here when a particular API or set of APIs is called the instrument can substitute code variables etc. into execution and or otherwise modify the execution of the AUT . For example if a part of the API is called code associated with the real time modifier can be executed to facilitate choosing of a desired path. Similar approaches can be used in other software frameworks such as .NET. Here the changes can be performed in memory. As such the AUT need not be modified directly.

In another example aspect oriented programming features may be used. APIs to be monitored can be specified. At runtime changes can be implemented on the fly based on programmed settings.

The computing device may include a security test module such as a scanner fuzzing vulnerability tester etc. that performs a security test against the AUT . In one example a vulnerability tester looks for known vulnerabilities in an AUT and reports potential exposures. In another example a penetration tester or scanner is a test that looks for ways to exploit a normal course of business associated with the AUT . In yet another example fuzz testing can be a technique that involves providing invalid unexpected or random data to inputs of an AUT. The AUT can then be monitored for issues.

The security test module may send HTTP requests to the AUT through the network wherein the HTTP request is configured to attempt to expose a vulnerability of the AUT . The HTTP requests may include HTTPS requests which combine the Hypertext Transfer Protocol with the SSL Secure Sockets Layer and TLS Transport Layer Security protocols to provide encrypted communication and secure identification of a network Web server.

During the processing of the HTTP request by the AUT an observer not shown can monitor the internal processes performed by the AUT . For example the observer can identify lines of code that are executed by the AUT files that are accessed database queries that are performed and the like. Both the observer and the AUT may be configured to communicate with the security test module over a same HTTP channel.

As described further in reference to some requests sent from the security test module to the server may target the AUT to elicit a response from the AUT in accordance with its programming. Other requests sent from the security test module to the server may target the observer to obtain additional information regarding the effect that a particular request had on the operations performed by the AUT or other information related to the AUT the observer or the server hosting the AUT . Data received by the security test module in responses to application requests and service requests may be used by the security test module to generate vulnerability reports. Vulnerability reports may be displayed to the user though a user interface provided by the security test module .

As noted above in certain scenarios the security test module performs a security test on the AUT communicatively coupled to the computing device . During the test the real time modifier can monitor the execution of the AUT and can be capable of determining whether a function or portion of a function to be executed by the AUT is safe or unsafe. The real time modifier can determine that a function executed by the AUT is unsafe. Accordingly in one embodiment the real time modifier can modify execution of the AUT by not performing a portion of the function deemed unsafe. In one example the portion is the entire function. In another example the portion can be part of the function.

A recognition module can determine whether a function to be called by the AUT is safe or unsafe. In one example the function or portion can be considered unsafe based on a type of process to be performed by the function and or portion. In one embodiment a portion can be considered unsafe if it performs an unwanted action. The unwanted action can be related to communications and or storage. Further the unwanted action can be associated with modifying the test bed to make it more difficult to perform additional test. In certain examples if the type of process used is configured to perform at least one or more of the following delete a database record modify another database record pollute a database send an outgoing message e.g. an email a text message etc. exhaust one or more resources of the server or the like the process can be considered unsafe. In one example deletion of files on the server can be caused by the result of a successful attack. In another example removing database entries can be a result of a successful attack. Further spamming external email boxes and or text messaging phones can be a result of application surface discovery and attack. Moreover some unsafe functions can deal with certain attacks that are known to bring the AUT down e.g. parseDouble in the Java environment .

In another embodiment the function is considered unsafe based on an API called by the function. In this example the API can be flagged as unsafe to call. Example APIs can be associated with modification of a database and or communications to an outside environment.

The real time modifier can emulate the portion without performing the portion of the function that is deemed unsafe. In one example this can be done by determining what the response the AUT would make to the security test module and sending that response. As such a function that calls for an email to be sent to a particular person or entity for example a president of a company that has an email address available on a contact page the portion that controls the email can be modified during execution to not send the email while sending a response to the security test module . The response can include for example a confirmation that the email has been sent. Such emulation can be performed for other types of processes considered unsafe by returning expected outcomes without performing the portion s deemed unsafe. By preventing disruptive operations from occurring and by keeping the rest of the AUT intact e.g. by simulating unsafe operation s actions so that high level code will keep functioning properly can help ensure the AUT s stability under the security test.

In other scenarios the real time modifier does not perform the portion of the function deemed unsafe. Instead the real time modifier blocks the portion from being executed. In some examples this can occur by blocking the whole function. In other examples this can be performed by keeping portions of code from being called or executed for example by keeping API calls to I O storage or external communications from being called and or executed.

Further in some scenarios the real time modifier and or another portion of the server such as an observer application which may be included as part of the real time modifier can report a vulnerability associated with the portion to the security test module . As noted above the security test can be a penetration test. In one example when an unsafe function is called the observer can take note of what the likely outcome of the unsafe function would be and record it. If the unsafe function is also a vulnerability it can be reported. Further activity of more than one function when combined can indicate a vulnerability. For example multiple calls to the same function may be used to consume too many system resources. As such in some examples the real time modifier and or observer can perform as part of emulation emulation of usage of the server resources.

The AUT may be encoded in any suitable Web based computer language such as JAVA or .NET among others. The AUT may operate within an suitable software framework such as Struts Struts 2 ASP .NET MVC Oracle WebLogic and Spring MVC among others. The software framework includes a set of common code modules that provide generic functionality which can be selectively overridden or specialized by user code to providing specific functionality. The AUT may be configured to execute one or more instances of a Java Virtual Machine JVM Common Language Runtime CLR and or other runtime environment for processing requests from the scanner . The programming instructions provided by the common code modules of the software framework or runtime environment may be referred to as container code. The custom programming instructions specific to the AUT may be referred to as user code.

During testing a scanner can explore the AUT by making HTTP requests and evaluating the HTTP responses or the lack thereof in order to find all of the URLs where the AUT accepts input. A lack of response may provide useful information for example information to determine that the tested application has failed and or the server hosting the application has failed. Even though examples discussed herein are directed to a scanner it is contemplated other security testing engines modules and or techniques can be used.

The AUT includes a network interface not shown for enabling communications between the scanner and the AUT through the network. The network interface exposes the attack surface of the AUT and is the same interface that would eventually be used to provide access to the AUT when the AUT is made available for general use. Communication between the scanner and the AUT over the network interface may be conducted through application e.g. via HTTP requests issued from the scanner to the AUT and HTTP responses issued from the AUT to the scanner . Requests targeting the AUT may be referred to as application requests and responses received from the AUT may be referred to as application responses. The application requests generated by the scanner may be configured to expose potential vulnerabilities of the AUT to respond to tests posed by the AUT or the like.

The real time modifier and or observer can operate within the execution environment of the AUT and has access to the internal operations performed by the AUT . For example the real time modifier may modify the bytecode of the AUT by injecting additional code such as a JAVA class at various program points. The injected code acts as a monitor that observes the AUT . The injected monitor code may be located at strategic program points in the AUT for example application programming interface API calls that perform specific operations that may be deemed unsafe such as modification of a database communications with outside individuals or the like.

Communications between the scanner and the observer may be implemented through the use of custom request and response headers. Custom headers may be added to the application requests by the scanner and custom headers may be added to the application responses by the observer . In this way at least some of the communications between the scanner and the observer may be piggy backed on normal communications with the AUT . Using a single channel of communication eliminates any problems with opening a dedicated secondary channel and adding HTTP headers typically does not interfere with the normal operation of the AUT .

In one example the scanner performs a test on the AUT . Application requests can be sent to the AUT and application responses can be received. The scanner can send application requests and receive responses to find possible security vulnerability areas for example locations where input can be provided to the AUT . Then the scanner can attack the locations using attack vectors. The attack vectors can include attempting to cause the AUT to perform unsafe functions.

In one example the scanner asks the AUT to perform an unsafe function. The real time modifier can detect that the unsafe function or portion of the function may be called. As such the real time modifier can modify execution of the AUT to prevent the unsafe portion from being executed. Examples of such modification are further detailed in and described above. Further as noted above the observer can track calls to the unsafe portions and provide test information and or analysis to the scanner . Moreover the real time modifier may emulate responses from the portion without performing unsafe functionality.

The observer may be used to provide the information analysis to the scanner to facilitate testing of the AUT . The scanner can communicate with the observer by using service requests and responses. The service requests and responses can be implemented using for example custom headers.

In some examples the real time modifier can also be used to modify other aspects of the AUT during execution. For example code for debugging can be added to the execution of the AUT if one or more functions or program segments are dynamically compiled. As such an on the fly compiler can compile code with debug information. With this approach the observer can have access to detailed information about the executed code. The detailed information can be provided to the scanner . The scanner can use the debugging information in its testing of the AUT .

During the test code of the AUT can be executed. When a function or portion of the function is executed at certain decision points the real time modifier can act to determine whether the next operation of the function is safe or unsafe. As noted above an API Called Instrument or similar tool can be used to monitor and or manage APIs that are called by the function.

In certain examples code is executed and the real time modifier decides whether the operation is safe or unsafe. In one example the real time modifier determines that the operation is an unsafe operation . Because the operation is unsafe the real time modifier changes execution to return without further propagating hi some examples the real time modifier may also insert code to be executed to emulate the unsafe operation without performing it or return an expected value to emulate the unsafe operation. Further the real time modifier can provide a report with the information that the unsafe operation was to be performed to the scanner. In another example the operation can be determined to be a safe operation . Because the operation is determined to be safe the real time modifier can allow the code to continue to propagate to processing. As such in the case of calling an API the relevant safe API can be called.

At a server can host an AUT using a real time modifier . The server can communicate with other devices and or programs for example via a network. In one example a security test module can be used to communicate with the AUT .

The security test module can communicate using a computing device to perform a security test on the AUT . As such at the server can receive communications from the computing device which can be communicatively coupled to the AUT to perform the security test. As noted the security test can include a unit test a penetration test fuzz testing vulnerability testing software security testing website security testing combinations thereof or the like.

During the test the AUT can perform various tasks receive communications from the security test module and respond to the security test module . In one example execution of the tasks can lead to a point where the AUT may be prepared to perform a task that the real time modifier may determine to be unsafe. As such at a recognition module of the real time modifier can determine that a portion of a function to be executed by the AUT is unsafe based on a type of activity caused by the portion. In one example the activity can be pre flagged as unsafe by a tester. In another example the activity can be determined to be unsafe based on a set of APIs that are flagged as unsafe by the tester another person a developer etc. The activity can be considered unsafe because it involves a communication with an entity outside of the test it involves direct modification of a database it includes a known vulnerability or otherwise performs an unwanted action. Example actions include polluting a database rendering the test bed unusable without a restore sending text messages and or spam email etc.

At the real time modifier can then modify an execution of the AUT to no execute the portion. As noted above the modification can include immediately returning without executing the portion replacing the portion with other code returning expected results emulating the portion without performing the unsafe operation or the like. As such in certain scenarios the real time modifier can emulate a functionality or multiple functionalities of the portion to provide a response to the security test. Moreover as noted above the server for example using an observer can monitor and or report one or more vulnerabilities caused by the portion to the security test.

Processor may be at least one central processing unit CPU at least one semiconductor based microprocessor at least one graphics processing unit GPU other hardware devices suitable for retrieval and execution of instructions stored in machine readable storage medium or combinations thereof. For example the processor may include multiple cores on a chip include multiple cores across multiple chips multiple cores across multiple devices e.g. if the computing device includes multiple node devices or combinations thereof. Processor may fetch decode and execute instructions to implement modify execution of an AUT based on a determination of the safety of the code to be executed for example as in method . As an alternative or in addition to retrieving and executing instructions processor may include at least one integrated circuit IC other control logic other electronic circuits or combinations thereof that include a number of electronic components for performing the functionality of instructions .

Machine readable storage medium may be any electronic magnetic optical or other physical storage device that contains or stores executable instructions. Thus machine readable storage medium may be for example Random Access Memory RAM an Electrically Erasable Programmable Read Only Memory EEPROM a storage drive a Compact Disc Read Only Memory CD ROM and the like. As such the machine readable storage medium can be non transitory. As described in detail herein machine readable storage medium may be encoded with a series of executable instructions for implementing method .

The processor can execute instructions to host an AUT. In some examples the AUT can be compiled with a flag set to enable debugging observing code to be executed. In other examples the AUT can execute in a runtime environment that can perform the debugging observing. A security test for example a penetration test or scan can be performed on the AUT.

Communication instructions can be used to communicate with the security test. As such the computing device can receive communications from a computing device hosting the security test. These communications can be used to cause execution of parts e.g. functions APIs portions of code etc. of the AUT in response.

During execution of the AUT recognition instructions can be executed to determine whether portions of code are safe. The recognition instructions can cause the processor to determine for example at a real time modifier that a portion of a function executed by the AUT is unsafe.

In one example the determination that the portion is unsafe is based on a type of process associated with the portion e.g. a file delete an external communication etc. . Examples of unsafe processes can include at least one of a delete of a database record a modification of a database record polluting a database sending an outgoing message and exhausting resources of the computing device . In another example the determination that the portion is unsafe can be based on an API called by the function as described above.

Modification instructions can be executed to modify by the real time modifier an execution of the AUT to not execute the portion determined to be unsafe. Further in some examples the real time modifier can emulate the function without performing the portion of the function that is deemed unsafe. Moreover the computing device can generate and keep track of vulnerabilities that may be associated with the unsafe portions of code. In certain scenarios the computing device can report one or more vulnerabilities associated with the portion to the security test.

With the above approaches a real time modifier prevents an AUT from damaging itself and or its partners in the course of a dynamic security scan or other security test by excluding damaging code from execution while keeping the original application logic intact. Further this approach can prevent attempted communication with the world outside of the test bed. Moreover the approaches can eliminate additional manual and or automatic maintenance of the application s state and environment by keeping the environment intact.

