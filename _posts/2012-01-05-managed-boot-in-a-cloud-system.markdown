---

title: Managed boot in a cloud system
abstract: Techniques and systems for managed boot are described. A described technique includes creating, at a server system, a boot image based on one or more user-specified parameters associated with virtual machine booting, providing a first virtual drive that includes the boot image, booting a virtual machine using the boot image on the first virtual drive, and providing a second virtual drive to the virtual machine, where the virtual machine mounts the second virtual drive as a root file system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08874888&OS=08874888&RS=08874888
owner: Google Inc.
number: 08874888
owner_city: Monutain View
owner_country: US
publication_date: 20120105
---
This patent document claims the benefit of the priority of U.S. Provisional Application Ser. No. 61 432 553 filed Jan. 13 2011 and entitled MANAGED BOOT IN A CLOUD SYSTEM which is incorporated herein by reference in its entirety.

Cloud computing is network based computing in which typically large collections of servers housed in data centers or server farms provide computational resources and data storage as needed to remote end users. Some cloud computing services allow end users to run user provided server software applications e.g. e commerce server application web server or file server in the cloud. Some other cloud computing services provide access to software applications such as word processors and other commonly used applications to end users who interface with the applications through web browsers or other client side software. Users electronic data files are usually stored in the server farm rather than on the users computing devices. Maintaining software applications and user data on the server farm may simplify management of end user computing devices. Some cloud computing services allow end users to execute software applications in virtual machines.

This document describes technologies relating to virtual machine boot management in a cloud system. An aspect of the described technologies can be implemented in a method that includes creating at a server system a boot image based on one or more user specified parameters associated with virtual machine booting providing a first virtual drive that includes the boot image booting a virtual machine using the boot image on the first virtual drive and providing a second virtual drive to the virtual machine where the virtual machine mounts the second virtual drive as a root file system. Other implementations can include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage mediums.

These and other implementations can include one or more of the following features. One or more parameters can include an identifier of an operating system kernel. Creating the boot image can include an operating system kernel in the boot image. One or more parameters can include an identifier of a kernel module. Creating a boot image can include including a kernel module in the boot image. In some implementations one or more parameters include a size parameter of a random access memory RAM disk. Booting a virtual machine can include initializing a RAM disk in accordance with the size parameter. In some implementations the one or more parameters include an image for a RAM disk. Booting the virtual machine can include initializing the RAM disk with the image. In some implementations a virtual machine is configured to allow kernel modules to be loaded after the booting is complete. In some implementations a virtual machine is configured to restrict user provided kernel modules from being loaded after the booting is complete. Implementations can include receiving one or more user specified parameters via a network. Creating a boot image can be in response to receiving one or more user specified parameters. Implementations can include providing via the network a web based user interface. One or more user specified parameters can be specified via the web based user interface. In some implementations the virtual machine is configured to restrict all kernel modules from being loaded after the booting is complete. Implementations can include providing via the network an application programming interface. The one or more user specified parameters can be specified via the application programming interface.

Particular embodiments of the subject matter described in this document can be implemented so as to realize one or more of the following advantages. A managed virtual machine boot environment can minimize or eliminate an attack surface associated with running applications. The environment can provide an interface for customizing one or more boot parameters of a virtual machine. The environment can provide an efficient mechanism for creating and launching virtual machines based on respective user customized boot configurations. The environment can provide a mechanism to specify and package up a boot image that is separate from a root file system.

The details of one or more embodiments of the subject matter described in this document are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

Cloud computing services provide execution environments such as virtual machines for running software applications. A user can customize an execution environment to meet user specific requirements via a cloud interface provided by a cloud computing service. The user can use the cloud interface to specify parameters such as a type of operating system for running a software application. In some implementations a cloud interface can accept user provided software applications for execution on cloud computing resources. For example a cloud computing service can create a virtual machine with a user specified operation system image. The cloud computing service can launch the virtual machine to run a user provided software application.

The host machines included in the server system can contain one or more data processing apparatuses such as rack mounted servers or other computing devices. Host machines can have different capabilities and computer architectures. Host machines can communicate with each other through an internal data communications network . The internal network can include one or more wired e.g. Ethernet or wireless e.g. WI FI networks for example. In some implementations the internal network is an intranet. Host machines can also communicate with devices on external networks such as the Internet through one or more gateways which are data processing apparatus responsible for routing data communication traffic between the internal network and the Internet . Other types of external networks are possible.

Each host machine executes a host operating system . A host operating system manages host machine resources. In this example host operating systems run software that virtualizes the underlying host machine hardware and manages concurrent execution of one or more virtual machines VMs . For example the host operating system manages two VMs VM and VM while a different host operating system manages a single VM . A host machine can in general manage larger quantities of virtual machines however the quantity may be limited based on physical resources of the host machine.

In some implementations a host operating system can boot a virtual machine using a virtual boot disk. A virtual boot disk can be a digital file such as a bootable disk image. The virtual boot disk can be provided by a web server . In some implementations the web server can control a host machine to boot a virtual machine based on user specified boot parameters.

The VMs provides a simulated version of an underlying host machine hardware and referred to as virtual hardware e.g. virtual hardware and . Software that is executed by the virtual hardware can be referred to as guest software. In some implementations guest software cannot determine if it is being executed by virtual hardware or by a physical host machine. If guest software executing in a VM or the VM itself malfunctions or aborts other VMs executing on the host machine will not be affected. A host machine s microprocessor s can include processor level mechanisms to enable virtual hardware to execute software applications efficiently by allowing guest software instructions to be executed directly on the host machine s microprocessor without requiring code rewriting recompilation or instruction emulation.

Each VM e.g. VMs and is allocated a set of virtual memory pages from the virtual memory of the underlying host operating system and is allocated virtual disk blocks from one or more virtual disk drives for use by the guest software executing on the VM. For example host operating allocates memory pages and disk blocks to VM and VM and host operating system does the same for VM . In some implementations a given VM cannot access the virtual memory pages assigned to other VMs. For example VM cannot access memory pages that have been assigned to VM . A virtual disk drive can be persisted across VM restarts. Virtual disk blocks are allocated on physical disk drives coupled to host machines or available over the internal network for example. In addition to virtual memory and disk resources VMs can be allocated network addresses through which their respective guest software can communicate with other processes reachable through the internal network or the Internet . For example guest software executing on VM can communicate with guest software executing on VM or VM . In some implementations each VM is allocated one or more unique Internet Protocol IP version 4 or version 6 addresses and one or more User Datagram Protocol UDP port numbers. Other address schemes are possible. The VM IP addresses are visible on the internal network and in some implementations are visible on the Internet if the addresses are advertised using a suitable routing protocol for instance.

A VM s guest software can include a guest operating system e.g. guest operating systems and which is software that controls the execution of respective guest software applications e.g. guest applications and within the VM and provides services to those applications. For example a guest operating system can be an operating system such as a variant of the UNIX operating system. Other operating systems are possible. Each VM can execute the same guest operating system or different guest operating systems. Booting a VM can include using a virtual boot disk to load a kernel image associated with a guest operating system into memory. A guest operating system s access to resources such as networks and virtual disk storage is controlled by the underlying host operating system.

By way of illustration and with reference to virtual machine when the guest application or guest operating system attempts to perform an input output operation on a virtual disk initiate network communication or perform a privileged operation for example the virtual hardware is interrupted so that the host operating system can perform the action on behalf of the virtual machine . The host operating system can perform these actions with a process that executes in kernel process space user process space or both.

The kernel process space is virtual memory reserved for the host operating system s kernel which can include kernel extensions and device drivers for instance. The kernel process space has elevated privileges sometimes referred to as supervisor mode that is the kernel can perform certain privileged operations that are off limits to processes running in the user process space . Examples of privileged operations include access to different address spaces access to special functional processor units in the host machine such as memory management units and so on. The user process space is a separate portion of virtual memory reserved for user mode processes. User mode processes cannot perform privileged operations directly.

The server system at receives one or more user specified parameters associated with virtual machine booting. In some implementations receiving parameters can include receiving parameter values receiving parameter indices values that correspond to parameter values or a combination thereof. For example a parameter can indicate a use of a specific kernel image such as XYZ kernel image 2.9 where XYZ represents a name of an operating system. A received parameter value can be a text string with XYZ2.9 whereas a received parameter index value such as 5 can correspond to XYZ2.9. Other techniques for conveying user specified parameters are possible.

At the server system creates a boot image based on the one or more user specified parameters. A boot image in general is used for booting a machine and includes operating system software. A boot image can include a boot loader a configuration file a kernel image and one or more kernel modules. The kernel image includes one or more operating system elements such as a task scheduler and a memory allocator. Creating a boot image can include writing a kernel image to a boot image the identity of the kernel image being specified by one of the parameters. Creating a boot image can include writing one or more kernel modules to a boot image. The layout of a boot image can be based on a layout of a bootable medium e.g. a physical disk that is bootable by a computer.

At the server system provides a first virtual drive that includes the boot image. A virtual drive that includes a boot image can be referred to as a virtual boot disk. A virtual boot disk can include a boot loader a configuration file a kernel image and one or more kernel modules. Providing a first virtual drive can include simulating a physical drive e.g. a hard disk drive HDD a solid state device SSD or an optical disk drive using an underlying data store e.g. one or more files residing on a file system accessible by the server system. A provided virtual drive for example can appear as a physical device to the virtual machine via an interface such as a Small Computer System Interface SCSI or AT Attachment Packet Interface ATAPI . Other types of interfaces are possible.

At the server system boots a virtual machine using the boot image on the first virtual drive. In some implementations a process running on a server system can control a virtual machine process to boot from the first virtual drive. In some implementations a server system boots a virtual machine by loading a boot loader included in the boot image into a memory of the virtual machine. For example a virtual machine having a virtual basic input output system BIOS in a virtual machine can be programmed to access a drive e.g. the first virtual drive and load from the drive a boot loader into a memory of the virtual machine. The boot loader can load a kernel image from the first virtual drive into a memory of the virtual machine. In some implementations the one or more parameters include an image for a RAM disk. Booting the virtual machine can include accessing a RAM disk image creating the RAM disk in a computer memory and initializing the RAM disk with the image. In some implementations RAM disk image is a binary that gets expanded after being initialized as a RAM disk which then provides the initial file system before the root file system can be mounted. In some implementations a boot loader initializes a RAM disk in accordance with a RAM disk size parameter. In some cases a boot loader can load one or more files e.g. a kernel module or a configuration file into a storage area such as a RAM disk. The kernel image can include instructions to search for and load one or more kernel modules residing on the RAM disk.

At the server system provides a second virtual drive to the virtual machine for mounting the second virtual drive as a root file system. After the virtual machine starts running an operation system the operating system can mount one or more drives. Mounting a drive can include mounting one or more partitions of the drive. A drive can include a partition with a file system that once mounted provides a root file system to the operating system. The root file system can include one or more operating system components which are in addition to those provided by a kernel image. The root file system can include application executable files and application data files. The virtual machine s operating system can send requests such as read or write request to a virtual drive of the virtual machine. The server system can transform requests to a virtual drive into requests that read or write a file stored in a physical drive of the server system.

A server system can use one or more security mechanisms to protect itself from malicious behavior originating from a virtual machine. For example a server system can implement a mechanism that restricts a virtual machine s ability to communicate with networked hosts and to access underlying physical resources. Moreover a server system can configure a virtual machine based on one or more security related policies. For example a virtual machine can be configured to allow kernel modules to be loaded after the booting is complete. In another example a virtual machine can be configured to restrict user provided kernel modules from being loaded after the booting is complete. In some implementations the kernel image loaded by a virtual machine provides one or more security mechanisms that protect a server system from malicious code executing on a virtual machine. For example a security mechanism can prevent kernel modules from being loaded or modified. In another example a security mechanism can implement a firewall that restricts one or more types of incoming or outgoing network activity. In some implementations the virtual machine is configured to restrict all kernel modules from being loaded after the booting is complete.

A system can include a network interface to receive data the data including one or more user specified parameters associated with virtual machine booting and processor electronics configured to create at a server system a boot image based on one or more user specified parameters associated with virtual machine booting provide a first virtual drive that includes the boot image boot a virtual machine using the boot image on the first virtual drive and provide a second virtual drive to the virtual machine. The virtual machine can mount the second virtual drive as a root file system. In some implementations processor electronics includes one or more processors.

Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be or be included in a computer readable storage device a computer readable storage substrate a random or serial access memory array or device or a combination of one or more of them. Moreover while a computer storage medium is not a propagated signal a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate physical components or media e.g. multiple CDs disks or other storage devices .

The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources.

The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer a system on a chip or multiple ones or combinations of the foregoing. The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment a virtual machine or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine object or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few. Devices suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some embodiments a server transmits data e.g. an HTML page to a client device e.g. for purposes of displaying data to and receiving user input from a user interacting with the client device . Data generated at the client device e.g. a result of the user interaction can be received from the client device at the server.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

