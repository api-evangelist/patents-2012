---

title: Virtual machine service access
abstract: Methods, systems, and apparatus, including computer programs encoded on computer storage media, for accessing services from a virtual machine. One of the methods includes receiving requests for long-term security tokens from a host machine, each request comprising authentication information for a respective service account. The method include providing long-term security tokens to the host machine, wherein the long-term security tokens can be used to generate short-term security tokens for a virtual machine executing on the host machine. The method also includes generating by a process executing in a host operating system of the host machines a short-term security token based on a long-term security token of the long-term security tokens for use by a virtual machine executing on the host machine to access one of the respective service accounts, wherein the short-term security token is useable for a pre-determined amount of time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08800009&OS=08800009&RS=08800009
owner: Google Inc.
number: 08800009
owner_city: Mountain View
owner_country: US
publication_date: 20120223
---
Under 35 U.S.C. 119 this application claims the benefit of and priority to prior U.S. provisional application 61 581 993 filed on Dec. 30 2011 which is incorporated in its entirety herein by reference.

This patent document relates to digital data processing and in particular to virtual machine communication security.

Cloud computing is network based computing in which typically large collections of servers housed in data centers or server farms provides computational resources and data storage as needed to remote end users. Some cloud computing services allow end users to run user provided server software applications e.g. e commerce server applications web servers or file servers in the cloud. Some other cloud computing services provide access to software applications such as word processors and other commonly used applications to end users who interface with the applications through web browsers or other client side software. Users electronic data files are usually stored in the server farm rather than on the users computing devices. Maintaining software applications and user data on the server farm may simplify management of end user computing devices. Some cloud computing services allow end users to execute software applications in virtual machines. Access to cloud computing services may be limited to users who are authorized to access the cloud computing services.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. A virtual machine may access services without having direct access to long term credentials. Security may be improved. Credentials that are provided to the VM may be time limited. Access to services may be time limited. Credentials may be added or revoked at run time.

In general one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving a plurality of requests for long term security tokens from a host machines each request comprising authentication information for a respective service account. The methods include the actions of providing one or more of the long term security tokens to host machine based on the requests wherein the one or more long term security tokens can be used to generate short term security tokens for a virtual machine executing on the host machine wherein a virtual machine is a hardware virtualization on the host machine and cannot access the one or more long term security token provided to the host machine. The methods also include the actions of generating by a process executing in a host operating system of the host machine a respective short term security token based on a long term security token of the one or more long term security tokens for use by a virtual machine executing on the host machine to access one of the respective service accounts wherein the short term security token is useable for a pre determined amount of time

Other embodiments of this aspect include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular actions by virtue of having software firmware hardware or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other embodiments can each optionally include one or more of the following features alone or in combination a particular request of the plurality of requests may include scope information and wherein the scope information identifies limits of access to one of the respective service accounts. A distinct long term security token may be provided for each service account and corresponding scope information. Providing the one or more long term security tokens may include determining that a long term security token is not available for a respective service account and generating the long term security token. The process executing in the host operating system may execute in user process space of the host operating system. The methods may also include the actions of receiving a request to modify service accounts associated with a virtual machine executing on a host machine obtaining a long term security token based on the request and providing the long term security token to the host machine. The methods may also include the action of receiving a request for the respective short term access token from the virtual machine. The request may be received by a virtualized network service.

The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

The distributed system can provide a virtual network to the virtual machines for Internet Protocol IP based communications. The VMs are assigned network addresses e.g. an IPv4 address or IPv6 address that are routable on a virtual network . In some implementations the virtual network includes a private subnet e.g. 192.168.0.0 16 10.0.0.0 8 .

In some implementations IP traffic on the virtual network is carried by IP tunnels. Host machines perform IP encapsulation and de encapsulation for IP traffic to and from each VM . An IP tunnel provides a transport layer. For example IP tunneling can include sending an IP tunnel packet that includes an encapsulated packet. The encapsulated packet can be an IP packet. Other types of encapsulated packets are possible. In some cases an IP tunnel can both originate and terminate on the same host machine e.g. source and destination VMs are on the same host machine . In some cases an IP tunnel can originate at one host machine and terminate at a different host machine e.g. source and destination VMs are on different host machines . IP tunnel traffic between the host machines can be carried over a virtual private network VPN via a network such as the Internet or a data center network walled off from the Internet.

Based on the virtual network spanning multiple host machines in geographically separate areas VM migration can occur with minimal or zero disruption to IP traffic from or to a VM migrated that has been migrated between geographically separate areas. For example a VM can be migrated from a first host machine at a first location to a second host machine at a second location. Endpoints for the tunnels associated with VM can be updated to reflect the change in the host machine. In some implementations the host machines can run multiple virtual networks. For example two virtual machines can be on the same physical machine but attached to different virtual networks. Furthermore a virtual machine can have one or more virtual network interface cards NICs that are attached to one or more virtual networks. Each virtual network interface can be assigned a network address e.g. IPv4 address IPv6 address or a layer 2 Media Access Control address . In some implementations a virtual machine stores virtual network addresses and their associated network identifiers.

The private network can include one or more wired e.g. Ethernet or wireless e.g. WI FI networks. In some implementations the private network includes physical communication assets such as optical fiber or copper wire that connect two data centers. In some implementations the private network is implemented over an external network such as the Internet . In some implementations data centers have respective local area networks LANs that are aggregated together to form a private network . IP traffic between data centers can be routed for example by using Multiprotocol Label Switching MPLS . Other types of routing are possible.

Each host machine executes a host operating system . A host operating system manages host machine resources. In this example host operating systems run software that virtualizes the underlying host machine hardware and manages concurrent execution of one or more VMs. For example the host operating system manages two VMs VM and VM while a different host operating system manages a single VM . A host machine can in general manage larger quantities of virtual machines however the quantity may be limited based on physical resources of the host machine.

The VMs use a simulated version of an underlying host machine hardware which can be referred to as virtual hardware e.g. virtual hardware and . In some implementations the VMs can be used to simulate other hardware configurations including hardware that is different from the hardware of the underlying host machine. Software that is executed by the virtual hardware can be referred to as guest software. In some implementations guest software cannot determine if it is being executed by virtual hardware or by a physical host machine. If guest software executing in a VM or the VM itself malfunctions or aborts other VMs executing on the host machine will not be affected. A host machine s microprocessor s can include processor level mechanisms to enable virtual hardware to execute software applications efficiently by allowing guest software instructions to be executed directly on the host machine s microprocessor without requiring code rewriting recompilation or instruction emulation.

Each VM e.g. VMs and is allocated a set of virtual memory pages from the virtual memory of the underlying host operating system and is allocated virtual disk blocks from one or more virtual disk drives for use by the guest software executing on the VM. For example host operating system allocates memory pages and disk blocks to VM and VM and host operating system does the same for VM . In some implementations a given VM cannot access the virtual memory pages assigned to other VMs. For example VM cannot access memory pages that have been assigned to VM . A virtual disk drive can be persistent across VM restarts. In some implementations virtual disk blocks are allocated on physical disk drives coupled to host machines. VMs can be allocated network addresses through which their respective processes can communicate with other processes via a virtual network. For example guest software executing on VM can communicate with guest software executing on VM or VM via the virtual network using the allocated network addresses.

A VM s guest software can include a guest operating system e.g. guest operating systems and which is software that controls the execution of respective guest software applications e.g. guest applications and within the VM and provides services to those applications. For example a guest operating system can be an operating system such as a variant of the UNIX operating system. Other operating systems are possible. Each VM can execute the same guest operating system or different guest operating systems. Booting a VM can include using a virtual boot disk to load a kernel image associated with a guest operating system into memory. A guest operating system s access to resources such as networks and virtual disk storage is controlled by the underlying host operating system.

By way of illustration and with reference to virtual machine when the guest application or guest operating system attempts to perform an input output operation on a virtual disk initiate network communication or perform a privileged operation for example the virtual hardware is interrupted so that the host operating system can perform the action on behalf of the virtual machine . The host operating system can perform these actions with a process that executes in kernel process space user process space or both.

The kernel process space is virtual memory reserved for the host operating system s kernel which can include kernel extensions and device drivers. The kernel process space has elevated privileges sometimes referred to as supervisor mode that is the kernel can perform certain privileged operations that are off limits to processes running in the user process space . Examples of privileged operations include access to different address spaces access to special functional processor units in the host machine such as memory management units and so on. The user process space is a separate portion of virtual memory reserved for user mode processes. User mode processes cannot perform privileged operations directly.

In various implementations authorization and authentication to services is provided by a virtual machine authorization process e.g. the virtual machine authorization process . In some implementations the virtual machine authorization process executes in the user process space e.g. user process space of a host operating system e.g. host operating system . In other implementations the virtual machine authorization process can execute in the kernel process space e.g. kernel process space of the host operating system.

The virtual machine authorization process can communicate with an authorization service to provide access to services. For example the authorization service may provide a virtual machine with access to a cloud storage system.

In some implementations a service account has an access control list ACL indicating which users can generate refresh tokens for that service account. The permissions are established such that the users who can launch VMs are the same users that can act as the service account.

The request can include one or more service accounts and one or more scopes associated with the service account. A scope is a mechanism for segmenting the permissions associated with a service account. A service account may have the ability to access a service in different manners for example the service account can access a cloud storage service with read write scope or read only scope . For example the request may specify that the virtual machine is to have access to the cloud storage service a cloud storage service account but limited to read only access a read only scope .

The virtual machine management service determines if a long term security token exists for each requested service account and corresponding set of scopes in the request . A virtual machine management service is a service that coordinates and controls the lifecycle of the virtual machine. The virtual machine management service is starts virtual machines monitors the health of the virtual machine and may coordinate shutting down the virtual machine. The virtual machine management service may store long term security tokens in a cache represented in as a table . A long term security token is a credential provided by an authorization server that permits a virtual machine to use a service account. Generally the long term security token is valid for an indefinite period but may be revoked by an authorization server. In some implementations the long term security token may expire after a relatively long period of time for example a day two days a week . A long term security token may be an alpha numeric sequence of characters that is used by an authorization server to authenticate a service account. Other types of long term security tokens are possible. A long term security tokens may be for example a refresh token or credentials used to obtain access tokens. Refresh tokens are issued to the client by the authorization server and are used to obtain a new access token when the current access token becomes invalid or expires or to obtain additional access tokens with identical or narrower scope access tokens may have a shorter lifetime and fewer permissions than authorized by the resource owner .

If the virtual machine management service determines that a long term security token for the service account and corresponding set of scopes does not exist the virtual machine management service sends the credentials in a request to an authorization service . The authorization service controls access to services by providing and verify the validity of credentials such as long term security tokens.

The authorization service generates one or more long term security tokens for the requested service accounts and any corresponding set of scopes and sends the generated long term security tokens in a response to the virtual machine management service . In some implementations a long term security token is shared by two or more service accounts. The virtual machine management service stores the long term security tokens in the cache for later access.

In some implementations there is not a trust relationship between the authorization service and the virtual machine management service . The authorization service may only provide a long term security token if the virtual machine management service demonstrates that there is a user actively requesting for the long term security token. For example by forwarding cryptographic proof derived from when the user authorizations with the virtual machine management service .

If the virtual machines that implement a service account do so for a same set of scopes the virtual machines can share the same long term security token. For example a new VM starts with the authority to act as a service account and set of scopes that has a long term security token assigned the assigned long term security token is provided to the host operating system of the VM.

The virtual machine management service sends the long term security token to the host machine that will execute the virtual machine. In some implementations the host machine starts the virtual machine and a corresponding virtual machine authorization process not shown . The long term security token is stored on the Host machine by the virtual machine authorization process. The virtual machine authorization process restricts the VM from accessing the long term security token as will be described below.

A VM requests access to a service by sending a request to the host operating system of the host machine on which the VM executes. The request includes a service identifier that identifies the service to be accessed and one or more scopes associated with the request. In general a scope is a parameter that specifies a type of access requested. Scopes may vary from service to service. A scope may represent for example a role in a role based security system or may otherwise specify a level of access such as read only or read write access. In some implementations the request does not include scopes. In some implementations the request includes a service account under which the VM is requesting access.

The VM may send the request to a virtual machine authorization process executing on the host operating system . In some implementations each VM is associated with a distinct virtual machine authorization process . The VM can send a query to the virtual machine authorization process to obtain a list of service accounts and corresponding scopes as to which the VM is authorized to act.

The virtual machine authorization process may expose a Hypertext Transfer Protocol HTTP interface to the VM . In some implementations the HTTP interface is protected so that only virtual machines executing on the same host machine as the virtual machine authorization process can access the HTTP interface. In some implementations the virtual machine authorization process may be accessed using a virtualized network service. For example a virtual network interface of the virtual hardware receives an HTTP request directed to an IP address associated with virtual machine authorization processes. The virtual hardware intercepts the request and redirects it to the virtual machine authorization process associated with the VM .

The virtual machine authorization process identifies the long term security token associated with the service account and set of scopes . The virtual machine authorization process stores long term security tokens associated with each service account associated with the virtual machine. The long term security token is issued to the VM by an authorization service for example when the VM is created. In general long term security tokens can be used to obtain short term security tokens which in turn can be used to access services. In some implementations the virtual machine authorization process restricts the VM from directly accessing the long term security token. In various implementations the long term security token is not exposed or supplied to the VM but is instead stored in the user process space of the host operating system . Short term security tokens may be for example credentials used to access protected resources. An access token is a string representing an authorization issued to the client. The string is usually opaque to the client. Tokens represent specific scopes and durations of access granted by the resource owner and enforced by the resource server and authorization server.

In some implementations the VM may be associated with one or more service accounts. A service account may be a specialized account that has access to a particular set of services. The services may include for example the service . Service accounts may be associated with the VM when the VM is started or may be added at a later time. For example when launching a virtual machine a user may specify a list of service accounts. For each service account the user may be able to specify a set of scopes.

Each service account may have its own long term security token. In implementations where the user specifies a set of scopes for a long term security token each service account and corresponding set of scopes may have its own long term security token.

The virtual machine authorization process sends the long term security token and the service identifier to an authorization service . The authorization service verifies that the long term security token has the right to access the identified service and the supplied scopes . The authorization service then generates a short term security token .

In implementations where multiple VMs share a common long term security token the virtual machine management service e.g. VMM service in keeps track of which VMs that have access to the long term security token. When no VM with the long term security token remains active for example when all the VMs have been shut down the long term security token is revoked by making a request to the authorization service.

The short term security token is supplied to the virtual machine authorization process which in turn supplies it to the VM . Allowing a VM access to short term security tokens presents less security risk than allowing the VM access to long term security tokens. A short term security token is limited in time that is the short term security token expires after a period for example one hour.

In scenarios where the VM does not have authorization to access the service the authorization service provides an error to the virtual machine authorization process . In turn the virtual machine authorization process sends an error to the VM. For example the virtual machine authorization process may send an HTTP 403 error.

The VM sends the short term security token to the service for example as part of an HTTP header. The service then allows the VM access to the service .

In other implementations the virtual machine management service can provide updated long term security tokens to virtual machine authorization processes. For example a host machine is running VM A and VM B . The host machine includes a host operating system . The host operating system includes a virtual machine authorization process associated with VM A and a virtual machine authorization process associated with VM B . The virtual machine authorization process stores long term security tokens for the VM A . The virtual machine authorization process stores long term security tokens for the VM B .

The virtual machine management service includes a list of all VMs that have been provided the long term security token . In this example the list includes VM A and VM B . The virtual machine management service provides the updated token to the virtual machine authorization process associated with VM A and the virtual machine authorization process associated with VM B .

Referring to the process receives a request to grant a virtual machine access to a service account e.g. a virtual machine management service may receive the request . The service account may be authorized to access a service for example a service provided by a cloud computing environment. The request may further limit the access of the virtual machine a set of scopes for the service account. For example the request may limit the virtual machine to read only access to services accessible by the service account. In one implementation referring to an API client requests a VM from a virtual machine management service . The service accounts and scopes may be provided as part of the request.

The process obtains a long term security token for the service account e.g. the virtual machine management service may obtain the long term security token . In some implementations the process may store long term security tokens for service accounts in a data cache. In one implementation referring to the virtual machine management service checks a cache to determine if a long term security token is available for the particular service account and set of scopes if applicable . If such a security token is not available the virtual machine management service may request a long term security token for the service account and any provided set of scopes from an authorization service . After verifying the request the authorization service provides the long term security token to the virtual machine management service . The virtual machine management service may store the long term security token in its cache.

The process provides the long term security token to a virtual machine authorization process e.g. the virtual machine management service may provide the long term security token to the virtual machine authorization process . The virtual machine authorization process restricts the virtual machine from directly accessing the long term security token. Instead the virtual machine authorization process acts as an intermediary when the virtual machine requests access to a service as discussed below with respect to . In one implementation the virtual machine management service launches a VM on a host machine with the long term security token. The host machine may establish a authorization process for the VM and store the long term security token within the authorization process.

In some implementations the virtual machine authorization process is not executed by the virtual machine. For example the virtual machine authorization process may execute in the user process space of the operating system of the virtual machine s host machine. In some implementations each virtual machine authorization process is used by one and only one virtual machine.

Referring to the process receives a request for access to a service e.g. an authorization process may receive the request . The request may come from a virtual machine. The request may include a service account and set of scopes associated with the request. The set of scopes may be a subset of the scopes for which the virtual machine is authorized. For example a virtual machine that has read write access to a cloud storage service may request read only access to that service. In one implementation referring to virtual machine A requests a short term security token from the host machine .

The process identifies a long term security token corresponding to the request e.g. the authorization process may identify the long term security token . For example the process may identify a refresh token associated with the service account specified by the request. The refresh token may have been obtained using the process described above with respect to . In one implementation referring to the host machine checks the cache for the short term security token. If the short term security token is in the cache the host machine provides the short term security token to Virtual Machine A .

The process sends the long term security token to an authorization server e.g. the authorization process may send the long term security token . The long term security token may be sent to the authorization server along with the request. Alternatively the long term security token may be sent along with an identifier of the service and any scopes associated with the request. In one implementation referring to the host machine requests a short term security token from the authorization service . The request includes the long term security token.

The process receives a short term security token e.g. the authorization process may receive the short term security token . The token may be provided by the authorization server. For example the authorization server may verify that the refresh token is valid to access the service consistent with the provided scopes. The authorization server may generate a short term security token which grants temporary for example for one hour access to the service consistent with any provided scopes and any scope limitations in the service account. In one implementation referring to the authorization service sends the short term security token to the host machine .

The process provides the short term security token e.g. the authorization process may provide the short term security token to the requesting VM . For example the process may provide the short term security token to the requesting virtual machine. The virtual machine may use the short term security token to access the service for example by including the short term security token in a header of the HTTP request. In one implementation the host machine sends the short term security token to Virtual Machine A . Virtual Machine A makes a service request to a service . The request including the short term security token.

The process receives requests for long term security tokens from distinct host machines e.g. a virtual machine management service such as the virtual machine management service of may receive requests for long term security tokens from distinct host machines. Each of the requests can include authentication information for a respective service account.

The process provides one or more long term security tokens to each of the host machines based on the requests e.g. a virtual machine management service may provide security tokens for each of the host machines . A long term security token may be used to generate a short term security token for a virtual machine executing on the host machine wherein a virtual machine is a hardware virtualization of the host machine and cannot access the long term security token provided to the host machine.

The process generates a respective short term security token for use by a virtual machine executing on the host machine e.g. an authorization service such as the authorization service of may generate short term security tokens . The short term security tokens may be used by a virtual machine executing on the host machine to access one of the service accounts. The short term security token may be useable for a pre determined amount of time.

Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be or be included in a computer readable storage device a computer readable storage substrate a random or serial access memory array or device or a combination of one or more of them. Moreover while a computer storage medium is not a propagated signal a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate physical components or media e.g. multiple CDs disks or other storage devices .

The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources.

The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer a system on a chip or multiple ones or combinations of the foregoing The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment a virtual machine or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine object or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language resource in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few. Devices suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending resources to and receiving resources from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some embodiments a server transmits data e.g. an HTML page to a client device e.g. for purposes of displaying data to and receiving user input from a user interacting with the client device . Data generated at the client device e.g. a result of the user interaction can be received from the client device at the server.

A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

