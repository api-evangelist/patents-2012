---

title: Communication between web applications
abstract: In an embodiment, communication is controlled between a service provider web application executed in a first web browser instance on a device platform of the device and a partner web application executed in a second web browser instance on the device platform. A signal is received, at a control module at the device, from the partner web application, the signal for initiating communication between the partner web application and the service provider web application. The control module, provided by the service provider and installed on the device, uses technology that is native to the device platform. The control module uses a list of partners approved by the service provider to determine whether the partner web application is approved for communication with the service provider web application. If the control module determines the partner web application is approved, the control module allows communication to proceed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009853&OS=09009853&RS=09009853
owner: Microsoft Technology Licensing, LLC
number: 09009853
owner_city: Redmond
owner_country: US
publication_date: 20120307
---
Web applications can be downloaded to a device over the Internet and then executed in a web browser instance implemented on a device platform of the device. The device may for example be a PC laptop mobile phone or any other suitable device which is capable of connecting to the Internet. Web applications are executed at the device using a web based technology e.g. in accordance with the HTML 5 standard . A web browser instance may refer to any separate interface of a web browser with which a user can interact such as a window tab or frame of a web browser or to instances of different web browsers from different vendors such as Microsoft Internet Explorer and Mozilla Firefox.

A service provider can provide a service for a user of a device by providing a service provider client application for execution on the device. The service provider client application includes web components e.g. a web application which execute in a web browser instance at the device both as pure web components e.g. implemented as HTML Javascript and CSS artifacts dynamically downloaded from a web server and includes installed native components deployed at the device in the form of browser plugins and other installed software that augments the pure web components of the service provider client application.

Similarly a partner web application from another entity may be provided for execution in a web browser instance on the same device wherein the partner web application may comprise web components with or without native enhancements. The other entity from which the partner web application is provided may be a partner of the service provider and may be trusted by the service provider in which case it may be useful for the service provider web application to be able to communicate with the partner web application on the device. However in other situations the other entity from which a partner web application is provided might not be trusted by the service provider in which case it might be useful to prevent communication between the service provider web application and the partner web application on the device.

A mash up occurs when the service provider web components and the partner web components exchange signaling at the device thereby conveying some useful data between the service provider web application and the partner web application. Mash ups can be particularly beneficial since they provide the user of the device with a combination of information that may be absent in both the service provider web application and the partner web application if they were to execute separately. Particular benefit in mash ups manifests itself when web applications are combined in creative ways. In order to implement mash ups and thereby achieve the benefits associated therewith cross provider signaling is a necessary facility that enables communication between web applications executing simultaneously on the device. It is therefore beneficial to be able to allow the service provider web application to conduct secure client side i.e. implemented at the device signaling with a partner web application.

According to a first aspect of the invention there is provided a method of controlling communication between a service provider web application executed in a first web browser instance implemented on a device platform of a device and a partner web application executed in a second web browser instance implemented on the device platform of the device the method comprising receiving at a control module implemented at the device a signal from the partner web application for initiating communication between the partner web application and the service provider web application said control module being provided by the service provider and installed on the device and being implemented using technology that is native to the device platform using a list of partners approved by the service provider the control module determining whether the partner web application is approved for communication with the service provider web application and if the control module determines that the partner web application is approved for communication with the service provider web application the control module allowing communication to proceed between the partner web application and the service provider web application.

Advantageously the control module determines whether the partner web application is approved for communication with the service provider web application before allowing the communication between the partner web application and the service provider web application to proceed. In this way in preferred embodiments the control module assures a managed environment where only desired partner web applications are allowed to communicate with the service provider web application. Any other web application other than those on the list of partners approved by the service provider may be prevented from participating in communication with the service provider web application.

Preferred embodiments provide a communication or signaling facility between the service provider web application and web applications of partners of the service provider that has fewer constraints than in the prior art.

The method may further comprise if the control module determines that the partner web application is not approved for communication with the service provider web application the control module preventing communication between the partner web application and the service provider web application.

Preferably a respective browser plugin is implemented for each of the first and second web browser instances wherein each browser plugin is implemented for communicating between the respective web browser instance and the control module.

Preferably the service provider web application and the partner web application implement respective application programming interfaces for communicating with each other via the control module. The application programming interfaces may be downloaded from a server of the service provider.

The list of partners approved by the service provider may be stored at a server of the service provider and the step of using the list of partners approved by the service provider may comprise the control module communicating with the server of the service provider over a network to access the list of partners approved by the service provider. Alternatively or additionally the list of partners approved by the service provider may be downloaded from a server of the service provider and stored in a memory of the device and the step of using the list of partners approved by the service provider may comprise the control module accessing the list of partners approved by the service provider from the memory of the device.

In preferred embodiments the communication between the service provider web application and the partner web application proceeds using a publish subscribe signaling scheme. The signal received at the control module from the partner web application may be a subscribe request or a publish request of the publish subscribe signaling scheme.

The first and second web browser instances may be implemented with web browsers from different vendors. Furthermore the first and second web browser instances might not have a parent child relationship.

The determining whether the partner web application is approved for communication with the service provider web application may comprise comparing a domain associated with the partner web application with the entries of the list of partners approved by the service provider.

The service provider may be an Internet communication service provider and the method may further comprise the partner web application communicating over the internet using the communication between the partner web application and the service provider web application.

According to a second aspect of the invention there is provided a computer program product for controlling communication between a service provider web application executed in a first web browser instance implemented on a device platform of the device the computer program product being embodied on a computer readable medium and configured so as when executed on a processor of the device to implement a control module at the device for performing the operations of receiving a signal from the partner web application for initiating communication between the partner web application and the service provider web application said control module being provided by the service provider and installed on the device and being implemented using technology that is native to the device platform using a list of partners approved by the service provider to determine whether the partner web application is approved for communication with the service provider web application and if the control module determines that the partner web application is approved for communication with the service provider web application allowing communication to proceed between the partner web application and the service provider web application.

According to a third aspect of the invention there is provided a device configured to control communication between a service provider web application executed in a first web browser instance implemented on a device platform of the device and a partner web application executed in a second web browser instance implemented on the device platform of the device the device being configured to implement a control module to receive a signal from the partner web application for initiating communication between the partner web application and the service provider web application said control module being provided by the service provider and installed on the device and being implemented using technology that is native to the device platform use a list of partners approved by the service provider to determine whether the partner web application is approved for communication with the service provider web application and allow communication to proceed between the partner web application and the service provider web application if the control module determines that the partner web application is approved for communication with the service provider web application.

The device may be further configured to implement the control module to prevent communication between the partner web application and the service provider web application if the control module determines that the partner web application is not approved for communication with the service provider web application.

The device may be further configured to implement a respective browser plugin for each of the first and second web browser instances wherein each browser plugin may be configured to communicate between the respective web browser instance and the control module.

The device may be further configured to implement respective application programming interfaces in the service provider web application and the partner web application for communication between the service provider web application and the partner web application via the control module.

The device may further comprise a memory configured to store the list of partners approved by the service provider wherein the device may be further configured to download the list of partners approved by the service provider from a server of the service provider and store said list in the memory of the device.

According to a fourth aspect of the invention there is provided a system comprising a device configured to execute a service provider web application in a first web browser instance implemented on a device platform of the device and to execute a partner web application in a second web browser instance implemented on the device platform of the device and a server of the service provider comprising a memory for storing a list of partners approved by the service provider wherein the device is configured to implement a control module to receive a signal from the partner web application for initiating communication between the partner web application and the service provider web application said control module being provided by the service provider and installed on the device and being implemented using technology that is native to the device platform access the list of partners approved by the service provider by communicating with the server of the service provider over a network to thereby determine whether the partner web application is approved for communication with the service provider web application and allow communication to proceed between the partner web application and the service provider web application if the control module determines that the partner web application is approved for communication with the service provider web application.

The service provider web application and the control module may be parts of a hybrid service provider client application downloaded to the device from a server of the service provider.

In some prior art systems web mash up allowing web applications to communicate with each other focuses on pure web solutions not supported by any installed components at the device implemented using a technology that is native to the device platform of the device e.g. C . An example of such a prior art system is an Open Ajax Hub designed by the Open Ajax Alliance. Although web browsers in general preclude interactions between web applications sourced from different Internet domains i.e. cross domain interactions due to security reasons the Open Ajax Hub system enables a controlled signaling between web applications sourced from different Internet domains. In order to achieve this the Open Ajax Hub employs so called URL fragment messaging to facilitate data transfers across domains.

The Open Ajax hub system relies on certain relationships between the web browser instances that host the cross domain web applications in order for the cross domain web applications to be able to communicate with each other 

 i the web browser instances must come from the same web browser type e.g. the same vendor such as Microsoft Internet Explorer or Mozilla Firefox 

 ii the web browser instances e.g. frames must have a parent child relationship either by a one web browser instance being embedded in another web browser instance e.g. using the iFrame tag or ii one web browser instance being a pop up child window spawned by the parent web browser instance.

Therefore in the Open Ajax hub system constraints are placed on the web instances which may be used in order for the web mash up to be implemented successfully.

Preferred embodiments of the invention will now be described by way of example only which remove constraints with the Open Ajax hub system while maintaining the security of the communication between web applications that is while managing which web applications e.g. sourced from which domains can communicate with each other.

In the preferred embodiments described herein the network is the Internet. As shown in the system includes four servers on the network a server SP operated by a service provider server X server Y and server Z . The system is arranged so that the device can communicate with the servers and over the network such that data can be transmitted between the device and the servers and . As an example the service provider server has a web address i.e. a domain name of sp.com the server has a web address i.e. a domain name of x.com the server has a web address i.e. a domain name of y.com and the server has a web address i.e. a domain name of z.com . In the preferred embodiments described herein the service provider server can provide a service provider client application for installation on the device which includes web components referred to herein as a service provider web application whereas the servers and are web servers allowing the device to download web applications for execution in web browser instances at the device . For example the web applications may be web pages downloaded over the network for display on the display of the device . The service provider client application is downloaded from the service provider server at sp.com to the device .

The preferred embodiments described herein relate to controlling communication between the service provider web application and other web applications executing at the device .

As shown in a first web browser instance and a second web browser instance are implemented on a device platform of the device . As described above the web browser instances and may be separate interfaces of a web browser with which a user can interact such as a window tab or frame of a web browser or the web browser instances and may be instances of different web browsers from different vendors such as Microsoft Internet Explorer and Mozilla Firefox. The service provider web application which is part of the service provider client application is executed in the first web browser instance . The service provider web application includes a widget which is a Javascript Application Programming Interface API . The widget allows the service provider web application to communicate using the publish subscribe signaling scheme. A publish subscribe browser plugin is implemented in the first web browser instance as described in more detail below. A web application provided by a partner of the service provider is executed in the second web browser instance . The partner web application includes a widget which is a Javascript Application Programming Interface API . The widget allows the partner web application to communicate using the publish subscribe signaling scheme. A publish subscribe browser plugin is implemented in the second web browser instance as described in more detail below.

A control module referred to herein as a publish subscribe daemon application is implemented at the device . The publish subscribe daemon application is part of the service provider client application downloaded from the service provider server . The publish subscribe daemon application includes a memory e.g. a cache memory. The cache memory may or may not be a part of the main memory of the device .

The server which resides on the network is hosted by the service provider and includes a memory for storing a database . The database includes a list of domains which are trusted by the service provider and which is maintained and kept up to date by the service provider. If a domain of a partner of the service provider is trusted by the service provider then communication is allowed to proceed between the service provider web application and the partner web application at the device i.e. client side signaling is allowed to occur . Indications of the trusted partners of the service provider are stored in the database as an Access Control List ACL defining which partners are allowed for mash up with the service provider web application at the device .

As shown in the publish subscribe daemon application and the publish subscribe browser plugins and are implemented using a native technology that is a technology that is native to the device platform of the device e.g. C . The publish subscribe daemon application is a native part of the service provider client application and is always running in the background at the device when the service provider client application has been downloaded to and is implemented at the device . In contrast the web browser instances and the web applications and the widgets and and the service provider server are implemented using web based technology e.g. in accordance with the HTML 5 standard .

Signals can be transmitted between the publish subscribe daemon application and the publish subscribe browser plugin and between the publish subscribe daemon application and the publish subscribe browser plugin using the publish subscribe signaling scheme. This may be achieved by establishing respective Transport Control Protocol TCP connections between the publish subscribe daemon application and the publish subscribe browser plugin and between the publish subscribe daemon application and the publish subscribe browser plugin . The publish subscribe browser plugins and provide bridges between the respective web applications and and the publish subscribe daemon application . The publish subscribe daemon application is also arranged to communicate with the service provider server over the Internet .

Preferred embodiments provide a secure client side signaling facility between the service provider web application and the separate partner web application . The publish subscribe model is used to frame the signaling between the web applications. Publish subscribe signaling is known to a person skilled in the art. In a publish subscribe signaling scheme web applications can communicate with each other using the following two operations provided to them by the publish subscribe service 

When a publisher invokes the publish operation the publish subscribe service broadcasts the associated data payload to all subscribers of the indicated channel by invoking their notification functions. There is also an unsubscribe operation which is complementary to the subscribe operation. Given a simple and general facility like the publish subscribe signaling scheme one can build arbitrary signaling on top of it. An example of some Javascript code illustrating the details of the API and an example usage of the publish subscribe signaling scheme is provided below 

In the example code given above the publish operation the subscribe operation and the unsubscribe operation are defined in accordance with the description given above and an example usage of the signaling scheme to do something useful with the data hello world included in the publish operation on a channel called myChannel is provided as would be apparent to a person skilled in the art.

With reference to the flow chart shown in there is now described a preferred method for secure communication between the service provider web application and the partner web application using the publish subscribe signaling scheme for implementing a web mash up including the service provider web application and the partner web application .

In step S the partner web application invokes the subscribe operation of the publish subscribe signaling scheme using the Javascript API downloaded from the service provider server . The subscribe request is transmitted via the publish subscribe browser plugin to the publish subscribe daemon application . As described above the subscribe request will indicate that the request is a subscribe request rather than a publish request or any other type of request and will also indicate a channel name and a function to perform on data that may be received on the indicated channel. The function may for example be to send the published data to the partner web application for display in the second web browser instance .

It is assumed that the user has previously installed the native components of the service provider client application on the device including the publish subscribe daemon application and the publish subscribe browser plugins and . The widget is implemented as a publish subscribe.js library and maintains a list of Javascript notification functions subscribed on a channel. Before the subscribe request is sent to the publish subscribe daemon application the widget adds the notification function provided by the partner web application in the subscribe request to the list of Javascript notification functions subscribed on the channel indicated in the subscribe request. Then the widget delegates the subscribe request to the native publish subscribe browser plugin . It is noted that the publish subscribe browser plugins and may include multiple versions for implementation on different types of web browser instances. For example the publish subscribe browser plugins and may have an Active X version for implementation on an instance of Internet Explorer and a Netscape Plugin Application Programming Interface NPAPI version for implementation on an instance of a Mozilla type browser such as Firefox or Safari.

As described above the publish subscribe browser plugins and maintain respective TCP connections using a socket API with the publish subscribe daemon application . If this is the first publish subscribe request sent from the partner web application to the publish subscribe daemon application then the publish subscribe browser plugin sets up the TCP connection to the publish subscribe daemon application otherwise the publish subscribe browser plugin uses the TCP connection that is already established between the publish subscribe browser plugin and the publish subscribe daemon application . The publish subscribe browser plugin transmits the subscribe request message over the TCP connection to the publish subscribe daemon application . Arbitrary serialization formats may be employed including JavaScript Object Notation JSON or Extensible Markup Language XML . The subscribe request message includes the publish subscribe operation details in the case of subscribe it means the operation type and the channel name as provided by the partner web application in the subscribe API call. In addition the publish subscribe browser plugin detects the Internet domain of the web page loaded into the second web browser instance whose Javascript is making the subscribe request. The publish subscribe browser plugin adds an indication of the domain to the subscribe request message.

In step S upon receiving the subscribe request message from the publish subscribe browser plugin the publish subscribe daemon application accesses the list i.e. the ACL of approved partners of the service provider from the database . This is done by communicating with the service provider server over the Internet to thereby implement a lookup of the ACL database hosted on the service provider server . This can be done in many ways. One possible approach involves invoking a HTTP web service hosted on the service provider server that is also deployed on the service provider backend fronting the ACL database. To improve the performance of the system the publish subscribe daemon application may temporarily store the results of the lookup of the ACL in the ACL cache e.g. with some expiration time. In this way if the publish subscribe daemon application needs to access the ACL again at some subsequent time then step S can be performed by accessing the cache memory on the device rather than needing to access the database on the service provider server . In this way the need to communicate over the Internet is removed or at least reduced thereby allowing the method to be performed without the device needing to communicate over the Internet which is particularly beneficial when the device is offline in other words when the device is not engaging in communication over the Internet .

When the ACL has been accessed then in step S the publish subscribe daemon application determines whether the domain of the partner associated with the partner web application which was indicated in the subscribe request message is present in the ACL i.e. whether the service provider has approved the partner web application for communication with the service provider web application . The determination performed in step S as to whether the partner web application is approved is preferably performed by checking that the partner web application is associated with an entry in the list of partners approved by the service provider which may be stored in the database or in the cache memory associated with the publish subscribe daemon application .

If it is determined in step S that the partner web application is approved for communication with the service provider web application then the method proceeds from step S to step S. In step S the publish subscribe daemon application allows communication to proceed between the partner web application and the service provider web application . The publish subscribe daemon application registers the TCP connection using its socket representation linking it with the subscribing browser plugin in the list of TCP connections subscribed to the indicated channel. When the subscribing browser plugin is in the list of TCP connections subscribed to the indicated channel and a publish request operation is implemented for the indicated channel the data in the publish request operation will be sent to the subscribing browser plugin for communication to the partner web application .

For example another web application such as the service provider web application may invoke a publish request message on the same channel as the partner web application has subscribed to. The publish request message is delivered to the publish subscribe daemon application in the same way as described above for the subscribe request message invoked by the partner web application . The publish request message may undergo a domain check corresponding to that performed for the subscribe request as described above. Where the publish request message has been invoked by the service provider web application the publish subscribe daemon application may automatically determine that the service provider web application is allowed to communicate without needing to check that the service provider is included in the ACL stored in the database or in the cache memory . The domain of the service provider e.g. sp.com may be automatically included in the ACL such that if the publish subscribe daemon application does perform a check of the ACL it will determine that the service provider web application is allowed to communicate with other web applications executed at the device .

If the publish subscribe daemon application has received a publish request and a subscribe request on the same channel from approved web applications it sends the publish message in a serialized format over each of the TCP connections to the allowed subscribing web applications. Each subscribed publish subscribe browser plugin e.g. publish subscribe browser plugin receives the publish message and delivers it to the publish subscribe.js library provided by the widget e.g. widget in the respective web application e.g. partner web application . The publish subscribe.js library e.g. widget looks up the list of Javascript notification functions subscribed to the indicated channel and then calls each notification function on the list including the publish data payload from the publish message as an argument. The notification is then processed by the code of the web application e.g. web application .

If it is determined in step S that the partner web application is not approved for communication with the service provider web application then the method proceeds from step S to step S. In step S the publish subscribe daemon application prevents communication from proceeding between the partner web application and the service provider web application . This may be achieved by the publish subscribe daemon application ignoring the subscribe request message from the partner web application . In this way a web application from an unapproved partner is not able to participate in publish subscribe communication with the service provider web application neither in the publisher nor subscriber role.

There is therefore described a secure client side communication facility for allowing communication between the service provider web application and an approved partner web application e.g. using a publish subscribe signaling scheme which prevents communication between the service provider web application and unapproved partner web applications. This is achieved without placing constraints on the web browser instances and and may for example be used when the web browser instances and are implemented with web browsers from different vendors e.g. Microsoft Internet Explorer and Mozilla Firefox or Safari and may be used when the web browser instances and do not have a parent child relationship. For completeness we note that the methods may be used when the web browser instances and are implemented with web browsers from the same vendor and may be used when the web browser instances and do have a parent child relationship.

The following example highlights some of the benefits of the methods described herein. The user may open the service provider web application sourced from the service provider server at sp.com in an Internet Explorer web browser instance . The user may then open the web application of approved partner X who is approved by the service provider and therefore whose domain appears in the ACL stored in the database sourced from the server at x.com in an unrelated new window of the Internet Explorer web browser. The user may then open a web application of another approved partner Y who is approved by the service provider and therefore whose domain appears in the ACL stored in the database sourced from the server at y.com in a new window of the Firefox web browser. With the publish subscribe mash up infrastructure described herein all of these web applications will be able to communicate client side as required by the mash up using the publish subscribe methodology described herein. At the same time the user may open a web application of unapproved partner Z who is not approved by the service provider and therefore whose domain does not appear in the ACL stored in the database sourced from the server at z.com . The web application of unapproved partner Z will be blocked from participating in the client side signaling with the server provider web application and with the other web applications of partners X and Y . Such control over the communication between web applications of these web browser instances for mash ups at a device is not possible with the prior art mash up systems such as the Open Ajax hub system.

The methods described herein have strengths associated with a hybrid service provider client application that is a service provider client application which has web components such as the service provider web application combined with native components such as the publish subscribe daemon application and the publish subscribe browser plugins and . Some existing sophisticated web application service provider client applications have a hybrid nature including native client side components in order to implement features of the service provider client application which may be hard or impossible to provide in a pure web architecture without native enhancements. For these service provider client applications it would be simple and beneficial to enhance the service provider client application by inclusion of the publish subscribe signaling infrastructure described herein to thereby provide a secure method for signaling between web applications for mash ups. In particular it is beneficial to use the methods described herein rather than a pure web mash up architecture since the methods described herein do not place restrictions on the types of web browser instances that can be used e.g. unlike in a pure web mash up architecture in the methods described herein the web browser instances and may be implemented with web browsers from different vendors e.g. Microsoft Internet Explorer and Mozilla Firefox or Safari and the web browser instances and may have a relationship that is not a parent child relationship.

Some prior art systems use server side solutions to enable cross domain web application signaling. These systems involve HTTP push technologies such as websocket or comet long polling . The methods described herein are superior to such server side solutions in the following ways 

 i Higher performance the device is not required to communicate with a server of the service provider except for the first domain authorization check which is then stored in the cache 

 ii Lower delay with no communication over the network being required the methods can be performed faster 

 iii Lower cost little or no server processing capacity needs to be provisioned to perform the methods and

 iv the methods work in an offline mode e.g. when the device is not connected to the network . In contrast server side solutions are cut off from the server when the device is offline and hence cease to work until the connection to the network is restored.

An example of how the methods described herein may be used for a web mash up when the service provider is an Internet communication service provider such as Skype is given here. The Internet communication service provider client application is installed on the device . The user is an authorized user of the Internet communication service provider and executes the service provider web application at the device . The user simultaneously executes another web browser instance to display a web page of a partner e.g. an airline such as continental.com. Continental.com is included in the list of partners approved by the service provider such that the web application for continental.com will be allowed to communicate with the service provider web application at the device . The methods described herein allow the user to use the Internet Communication service to get help from a customer support on the continental.com website. On the continental.com website there would be a chat with customer representative widget through which the user can get help on the issue at hand. If the user activates the chat with customer representative widget the chat widget would communicate client side with the service provider web application using the publish subscribe signaling described herein. This is allowed since the continental.com domain is included in the service provider s list of approved partners. If continental.com was not included in the list of partners who are approved by the service provider then the continental.com web application would not be able to communicate with the Internet communication service provider web application . The Internet communication service provider web application signals to the native backend of the Internet communication service provider client application installed at the device and from there the chat messages goes to the customer representative over the Internet using the Internet communication system e.g. Skype associated with the Internet communication service provider. In this arrangement the partner continental.com does not need to invest in or develop any server infrastructure for implementing the chat over the Internet communication system. All the partner is required to do is include a piece of Javascript in its web application for the chat widget that is programmed to talk over the publish subscribe signaling scheme to Internet communication service provider client application.

In the examples described above the partner web application sends a subscribe request to the publish subscribe daemon application such that it can receive published data on a channel indicated in the subscribe request. The partner web application may additionally or alternatively invoke a publish request message for publishing data on a particular channel and deliver the publish request message to the publish subscribe daemon application in the same way as described above for the subscribe request message invoked by the partner web application . The publish request message may undergo a domain check corresponding to that performed for the subscribe request as described above. In particular the publish subscribe daemon application may determine whether the partner web application which sent the publish request message is allowed to communicate using the publish operation by checking that the domain of the partner web application is included in the ACL stored at the database or in the cache memory . Based on the determination the publish subscribe daemon application then either allows or prevents communication from the partner web application using the publish request. The publish request may for example be for sending data to the service provider web application using the publish subscribe signaling scheme wherein the service provider web application can act as a subscriber on the particular channel for receiving the data published by the partner web application .

The components to shown in are preferably implemented in software for execution by the CPU on the device . As an example the publish subscribe daemon application may be provided by way of a computer program product embodied on a non transient computer readable medium which is configured so as when executed on the CPU of the device to perform the method steps described herein in relation to the publish subscribe daemon application and shown in .

The device may be of any suitable type on which the web applications described herein can be implemented. For example the device may be a mobile phone a personal computer a laptop a television or any other device which can store and execute the applications described herein and can also connect to and communicate with the network .

The ACL that is the list of partners who are approved by the service provider may be arranged as any set of indications of the partners which are approved by the service provider. No specific structure is required for the list it is just necessary for the publish subscribe daemon application to be able to determine from the list whether partner web applications are associated with entries in the list to thereby determine whether the partner web applications are allowed to communicate with the service provider web application at the device .

Furthermore while this invention has been particularly shown and described with reference to preferred embodiments it will be understood to those skilled in the art that various changes in form and detail may be made without departing from the scope of the invention as defined by the appendant claims.

