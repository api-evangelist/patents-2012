---

title: Controlling a network interface using virtual switch proxying
abstract: Methods and systems for permitting a controller within a virtualization environment to control access to devices virtualized within hardware are described herein. For example, a NIC may be able to request rules that define how network traffic is managed at the NIC's virtual switch. In some arrangements, the NIC may transmit a query for the matching rule to a proxy, which may determine whether it has a rule matching the request. If the proxy does not have a matching rule, the proxy may query a controller for the matching rule, which may transmit the rule to the proxy. The proxy may update its store of rules and transmit the matching rule to the NIC. Upon receipt of the matching rule, the NIC may update the rules stored in its virtual switch and may process the packet in accordance with the matching rule.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09083651&OS=09083651&RS=09083651
owner: Citrix Systems, Inc.
number: 09083651
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20121206
---
This application is a non provisional of and claims priority to U.S. provisional application Ser. No. 61 568 104 filed Dec. 7 2011 entitled CONTROLLING HARDWARE VIRTUALIZED NETWORK INTERFACE CARDS USING VIRTUAL SWITCH PROXYING herein incorporated by reference in its entirety.

This disclosure generally relates to facilitating network communications within a computing environment such as a virtualization environment. For example some aspects permit a controller within a virtualization environment to control access to devices virtualized within hardware such as by using a proxy in communication with the controller and a network interface card that includes a virtual switch.

Virtualization environments can typically take advantage of Single Root Input Output Virtualization SR IOV to virtualize physical devices that have a single port in order for the physical device to appear to have multiple ports. For example SR IOV can be used to virtualize network interface cards NICs such that a NIC having a single port can appear as though it has multiple ports. This low level virtualization of the NIC increases the speed with which a virtual machine can access and use the NIC and may provide control virtual machines within the ability to segregate and partition network traffic. While there are advantages to virtualizing NICs and other single port devices within the hardware layer there are disadvantages to having the virtualized NIC controlled at the hardware level rather than being controlled by a control virtual machine within the virtualization environment.

The following presents a simplified summary of the disclosure in order to provide a basic understanding of some aspects. It is not intended to identify key or critical elements of the disclosure or to delineate the scope thereof. The following summary merely presents some concepts of the disclosure in a simplified form as a prelude to the more detailed description provided below regarding a need to support SR IOV within a virtualization environment while permitting a controller within the virtualization environment to have a measure of control over access to the SR IOV enabled NIC from within the virtualization environment among other advantages.

Various aspects described herein relate to permitting a controller within a virtualization environment to control access to devices virtualized within hardware such as a Single Root I O Virtualization SR IOV enabled network interface card. In some arrangements a proxy such as an OpenFlow proxy may be in communication with one or more controllers using an OpenFlow protocol. The proxy may include rules that define how network traffic is managed at one or more virtual switches such as a virtual switch of the SR IOV enabled NIC. The proxy may also be in communication with the one or more virtual switches each of which may conform to an OpenFlow specification.

Rules for managing how network traffic should be managed may be distributed between the controllers NICs and proxies. For example a network interface card may be able to request rules that define how network traffic is managed at the network interface card s virtual switch. In some arrangements the network interface card may transmit a query for the matching rule to a proxy which may determine whether it has a rule matching the request. If the proxy does not have a matching rule the proxy may query a controller for the matching rule which may transmit the rule to the proxy. The proxy may update its store of rules and transmit the matching rule to the network interface card. Upon receipt of the matching rule the network interface card may update the rules stored in its virtual switch and may process the packet in accordance with the matching rule.

Details of the above aspects and others will be apparent by the various embodiments described herein.

In the following description of the various embodiments reference is made to the accompanying drawings which form a part hereof and in which is shown by way of illustration various embodiments in which aspects described herein may be practiced. It is to be understood that other embodiments may be utilized and structural and functional modifications may be made without departing from the scope and spirit of the present disclosure.

As will be appreciated by one of skill in the art upon reading the following disclosure various aspects described herein may be embodied as a method a data processing system or a computer program product. Accordingly those aspects may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment combining software and hardware aspects. Furthermore such aspects may take the form of a computer program product stored by one or more computer readable storage media having computer readable program code or executable instructions embodied in or on the storage media. Any suitable computer readable storage media may be utilized including hard disks CD ROMs optical storage devices magnetic storage devices and or any combination thereof. In addition various signals representing data or events as described herein may be transferred between a source and a destination in the form of electromagnetic waves traveling through signal conducting media such as metal wires optical fibers and or wireless transmission media e.g. air and or space .

I O module may include a mouse keypad touch screen scanner optical reader and or stylus or other input device s through which a user of generic computing device may provide input and may also include one or more of a speaker for providing audio output and a video display device for providing textual audiovisual and or graphical output. Software may be stored within memory and or other storage to provide instructions to processor for enabling generic computing device to perform various functions. For example memory may store software used by the generic computing device such as an operating system application programs and an associated database . Alternatively some or all of the computer executable instructions for generic computing device may be embodied in hardware or firmware not shown .

The generic computing device may operate in a networked environment supporting connections to one or more remote computers such as terminals also referred to as client devices . The terminals may be personal computers or servers that include many or all of the elements described above with respect to the generic computing device . The network connections depicted in include a local area network LAN and a wide area network WAN but may also include other networks. When used in a LAN networking environment the generic computing device may be connected to the LAN through a network interface or adapter . When used in a WAN networking environment the generic computing device may include a modem or other network interface for establishing communications over the WAN such as computer network e.g. the Internet . It will be appreciated that the network connections shown are illustrative and other means of establishing a communications link between the computers may be used.

Generic computing device and or terminals may also be mobile terminals e.g. mobile phones smartphones PDAs notebooks etc. including various other components such as a battery speaker and antennas not shown .

The disclosure is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with the disclosure include but are not limited to personal computers server computers hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like.

As shown in one or more client devices may be in communication with one or more servers generally referred to herein as server s . In one embodiment the computing environment can include an appliance installed between the server s and client machine s . This appliance can manage client server connections and in some cases can load balance client connections amongst a plurality of backend servers .

The client machine s can in some embodiment be referred to as a single client machine or a single group of client machines while server s may be referred to as a single server or a single group of servers . In one embodiment a single client machine communicates with more than one server while in another embodiment a single server communicates with more than one client machine . In yet another embodiment a single client machine communicates with a single server .

A client machine can in some embodiments be referenced by any one of the following terms client machine s client s client computer s client device s client computing device s local machine remote machine client node s endpoint s endpoint node s or a second machine. The server in some embodiments may be referenced by any one of the following terms server s local machine remote machine server farm s host computing device s or a first machine s .

In one embodiment the client machine may be a virtual machine. The virtual machine may be any virtual machine while in some embodiments the virtual machine may be any virtual machine managed by a hypervisor developed by Citrix Systems IBM VMware or any other hypervisor. In some aspects the virtual machine may be managed by a hypervisor while in aspects the virtual machine may be managed by a hypervisor executing on a server or a hypervisor executing on a client .

The client machine may execute operate or otherwise provide an application that can be any one of the following software a program executable instructions a virtual machine a hypervisor a web browser a web based client a client server application a thin client computing client an ActiveX control a Java applet software related to voice over internet protocol VoIP communications like a soft IP telephone an application for streaming video and or audio an application for facilitating real time data communications a HTTP client a FTP client an Oscar client a Telnet client or any other set of executable instructions. Still other embodiments include a client device that displays application output generated by an application remotely executing on a server or other remotely located machine. In these embodiments the client device can display the application output in an application window a browser or other output window. In one example the application is a desktop while in other examples the application is an application that generates a desktop. A desktop may include a graphical shell providing a user interface for an instance of an operating system in which local and or remote applications can be integrated. Applications as used herein are programs that execute after an instance of an operating system and optionally also the desktop has been loaded.

The server in some embodiments executes a remote presentation client or other client or program that uses a thin client or remote display protocol to capture display output generated by an application executing on a server and transmits the application display output to a remote client . The thin client or remote display protocol can be any one of the following protocols the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash.

The computing environment can include more than one server A N such that the servers A N are logically grouped together into a server farm for example in a cloud computing environment. The server farm can include servers that are geographically dispersed and logically grouped together in a server farm or servers that are located proximate to each other and logically grouped together in a server farm . Geographically dispersed servers A N within a server farm can in some embodiments communicate using a WAN MAN or LAN where different geographic regions can be characterized as different continents different regions of a continent different countries different states different cities different campuses different rooms or any combination of the preceding geographical locations. In some embodiments the server farm may be administered as a single entity while in other embodiments the server farm can include multiple server farms .

In some embodiments a server farm can include servers that execute a substantially similar type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. UNIX LINUX or SNOW LEOPARD. In other embodiments the server farm can include a first group of servers that execute a first type of operating system platform and a second group of servers that execute a second type of operating system platform. The server farm in other embodiments can include servers that execute different types of operating system platforms.

The server in some embodiments can be any server type. In other embodiments the server can be any of the following server types a file server an application server a web server a proxy server an appliance a network appliance a gateway an application gateway a gateway server a virtualization server a deployment server a SSL VPN server a firewall a web server an application server or as a master application server a server executing an active directory or a server executing an application acceleration program that provides firewall functionality application functionality or load balancing functionality. In some embodiments a server may be a RADIUS server that includes a remote authentication dial in user service. In embodiments where the server comprises an appliance the server can be an appliance manufactured by any one of the following manufacturers the Citrix Application Networking Group Silver Peak Systems Inc. Riverbed Technology Inc. F5 Networks Inc. or Juniper Networks Inc. Some embodiments include a first server A that receives requests from a client machine forwards the request to a second server and responds to the request generated by the client machine with a response from the second server . The first server A can acquire an enumeration of applications available to the client machine and well as address information associated with an application server hosting an application identified within the enumeration of applications. The first server A can then present a response to the client s request using a web interface and communicate directly with the client to provide the client with access to an identified application.

The server can in some embodiments execute any one of the following applications a thin client application using a thin client protocol to transmit application display data to a client a remote display presentation application any portion of the CITRIX ACCESS SUITE by Citrix Systems Inc. like the METAFRAME or CITRIX PRESENTATION SERVER MICROSOFT WINDOWS Terminal Services manufactured by the Microsoft Corporation or an ICA client developed by Citrix Systems Inc. Another embodiment includes a server that is an application server such as an email server that provides email services such as MICROSOFT EXCHANGE manufactured by the Microsoft Corporation a web or Internet server a desktop sharing server a collaboration server or any other type of application server. Still other embodiments include a server that executes any one of the following types of hosted servers applications GOTOMEETING provided by Citrix Online Division Inc. WEBEX provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office LIVE MEETING provided by Microsoft Corporation.

Client machines can in some embodiments be a client node that seeks access to resources provided by a server . In other embodiments the server may provide clients or client nodes with access to hosted resources. The server in some embodiments functions as a master node such that it communicates with one or more clients or servers . In some embodiments the master node can identify and provide address information associated with a server hosting a requested application to one or more clients or servers . In still other embodiments the master node can be a server farm a client a cluster of client nodes or an appliance.

One or more clients and or one or more servers can transmit data over a network installed between machines and appliances within the computing environment . The network can comprise one or more sub networks and can be installed between any combination of the clients servers computing machines and appliances included within the computing environment . In some embodiments the network can be a local area network LAN a metropolitan area network MAN a wide area network WAN a primary network comprised of multiple sub networks located between the client machines and the servers a primary public network e.g. the Internet with a private sub network a primary private network with a public sub network or a primary private network with a private sub network. Still further embodiments include a network that can be any of the following network types a point to point network a broadcast network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network a wireline network or a network that includes a wireless link where the wireless link can be an infrared channel or satellite band. The network topology of the network can differ within different embodiments possible network topologies include a bus network topology a star network topology a ring network topology a repeater based network topology or a tiered star network topology. Additional embodiments may include a network of mobile telephone networks that use a protocol to communicate among mobile devices where the protocol can be any one of the following AMPS TDMA CDMA GSM GPRS UMTS or any other protocol able to transmit data among mobile devices.

Illustrated in is an embodiment of a computing device where the client machine and server illustrated in may be deployed as and or executed on any embodiment of the computing device illustrated and described herein. Included within the computing device is a system bus that communicates with the following components a central processing unit a main memory storage memory an input output I O controller display devices A N an installation device and a network interface . In one embodiment the storage memory includes an operating system software routines and a client agent . The I O controller in some embodiments is further connected to a keyboard and a pointing device . Other embodiments may include an I O controller connected to more than one input output device A N.

Embodiments of the computing machine can include a central processing unit characterized by any one of the following component configurations logic circuits that respond to and process instructions fetched from the main memory unit a microprocessor unit such as those manufactured by Intel Corporation those manufactured by Motorola Corporation those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor such as those manufactured by International Business Machines a processor such as those manufactured by Advanced Micro Devices or any other combination of logic circuits. Still other embodiments of the central processing unit may include any combination of the following a microprocessor a microcontroller a central processing unit with a single processing core a central processing unit with two processing cores or a central processing unit with more than one processing core.

While illustrates a computing device that includes a single central processing unit in some embodiments the computing device can include one or more processing units . In these embodiments the computing device may store and execute firmware or other executable instructions that when executed direct the one or more processing units to simultaneously execute instructions or to simultaneously execute instructions on a single piece of data. In other embodiments the computing device may store and execute firmware or other executable instructions that when executed direct the one or more processing units to each execute a section of a group of instructions. For example each processing unit may be instructed to execute a portion of a program or a particular module within a program.

In some embodiments the processing unit can include one or more processing cores. For example the processing unit may have two cores four cores eight cores etc. In one embodiment the processing unit may comprise one or more parallel processing cores. The processing cores of the processing unit may in some embodiments access available memory as a global address space or in other embodiments memory within the computing device can be segmented and assigned to a particular core within the processing unit . In one embodiment the one or more processing cores or processors in the computing device can each access local memory. In still another embodiment memory within the computing device can be shared amongst one or more processors or processing cores while other memory can be accessed by particular processors or subsets of processors. In embodiments where the computing device includes more than one processing unit the multiple processing units can be included in a single integrated circuit IC . These multiple processors in some embodiments can be linked together by an internal high speed bus which may be referred to as an element interconnect bus.

In embodiments where the computing device includes one or more processing units or a processing unit including one or more processing cores the processors can execute a single instruction simultaneously on multiple pieces of data SIMD or in other embodiments can execute multiple instructions simultaneously on multiple pieces of data MIMD . In some embodiments the computing device can include any number of SIMD and MIMD processors.

The computing device in some embodiments can include a graphics processor or a graphics processing unit Not Shown . The graphics processing unit can include any combination of software and hardware and can further input graphics data and graphics instructions render a graphic from the inputted data and instructions and output the rendered graphic. In some embodiments the graphics processing unit can be included within the processing unit . In other embodiments the computing device can include one or more processing units where at least one processing unit is dedicated to processing and rendering graphics.

One embodiment of the computing machine includes a central processing unit that communicates with cache memory via a secondary bus also known as a backside bus while another embodiment of the computing machine includes a central processing unit that communicates with cache memory via the system bus . The local system bus can in some embodiments also be used by the central processing unit to communicate with more than one type of I O device . In some embodiments the local system bus can be any one of the following types of buses a VESA VL bus an ISA bus an EISA bus a MicroChannel Architecture MCA bus a PCI bus a PCI X bus a PCI Express bus or a NuBus. Other embodiments of the computing machine include an I O device that includes a video display that communicates with the central processing unit . Still other versions of the computing machine include a processor connected to an I O device via any one of the following connections HyperTransport Rapid I O or InfiniBand. Further embodiments of the computing machine include a processor that communicates with one I O device using a local interconnect bus and a second I O device using a direct connection.

The computing device in some embodiments includes a main memory unit and cache memory . The cache memory can be any memory type and in some embodiments can be any one of the following types of memory SRAM BSRAM or EDRAM. Other embodiments include cache memory and a main memory unit that can be any one of the following types of memory Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM Ferroelectric RAM FRAM or any other type of memory. Further embodiments include a central processing unit that can access the main memory via a system bus a memory port or any other connection bus or port that allows the processor to access memory .

One embodiment of the computing device provides support for any one of the following installation devices a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device a bootable medium a bootable CD a bootable CD for GNU Linux distribution such as KNOPPIX a hard drive or any other device suitable for installing applications or software. Applications can in some embodiments include a client agent or any portion of a client agent . The computing device may further include a storage device that can be either one or more hard disk drives or one or more redundant arrays of independent disks where the storage device is configured to store an operating system software programs applications or at least a portion of the client agent . A further embodiment of the computing device includes an installation device that is used as the storage device .

The computing device may further include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 SNA DECNET broadband connections e.g. ISDN Frame Relay ATM Gigabit Ethernet Ethernet over SONET wireless connections or some combination of any or all of the above. Connections can also be established using a variety of communication protocols e.g. TCP IP IPX SPX NetBIOS Ethernet ARCNET SONET SDH Fiber Distributed Data Interface FDDI RS232 RS485 IEEE 802.11 IEEE 802.11a IEEE 802.11b IEEE 802.11g CDMA GSM WiMax and direct asynchronous connections . One version of the computing device includes a network interface able to communicate with additional computing devices via any type and or form of gateway or tunneling protocol such as Secure Socket Layer SSL or Transport Layer Security TLS or the Citrix Gateway Protocol manufactured by Citrix Systems Inc. Versions of the network interface can comprise any one of a built in network adapter a network interface card a PCMCIA network card a card bus network adapter a wireless network adapter a USB network adapter a modem or any other device suitable for interfacing the computing device to a network capable of communicating and performing the methods and systems described herein.

Embodiments of the computing device include any one of the following I O devices a keyboard a pointing device mice trackpads an optical pen trackballs microphones drawing tablets video displays speakers inkjet printers laser printers and dye sublimation printers or any other input output device able to perform the methods and systems described herein. An I O controller may in some embodiments connect to multiple I O devices to control the one or more I O devices. Some embodiments of the I O devices may be configured to provide storage or an installation medium while others may provide a universal serial bus USB interface for receiving USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. Still other embodiments include an I O device that may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCl LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

In some embodiments the computing machine can connect to multiple display devices in other embodiments the computing device can connect to a single display device while in still other embodiments the computing device connects to display devices that are the same type or form of display or to display devices that are different types or forms. Embodiments of the display devices can be supported and enabled by the following one or multiple I O devices the I O controller a combination of I O device s and the I O controller any combination of hardware and software able to support a display device any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . The computing device may in some embodiments be configured to use one or multiple display devices A N these configurations include having multiple connectors to interface to multiple display devices A N having multiple video adapters with each video adapter connected to one or more of the display devices A N having an operating system configured to support multiple displays A N using circuits and software included within the computing device to connect to and use multiple display devices A N and executing software on the main computing device and multiple secondary computing devices to enable the main computing device to use a secondary computing device s display as a display device A N for the main computing device . Still other embodiments of the computing device may include multiple display devices A N provided by multiple secondary computing devices and connected to the main computing device via a network.

In some embodiments the computing machine can execute any operating system while in other embodiments the computing machine can execute any of the following operating systems versions of the MICROSOFT WINDOWS operating systems such as WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE WINDOWS XP and WINDOWS VISTA the different releases of the Unix and Linux operating systems any version of the MAC OS manufactured by Apple Computer OS 2 manufactured by International Business Machines any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system. In still another embodiment the computing machine can execute multiple operating systems. For example the computing machine can execute PARALLELS or another virtualization platform that can execute or manage a virtual machine executing a first operating system while the computing machine executes a second operating system different from the first operating system.

The computing machine can be embodied in any one of the following computing devices a computing workstation a desktop computer a laptop or notebook computer a server a handheld computer a mobile telephone a portable telecommunication device a media playing device a gaming system a mobile computing device a netbook a device of the IPOD family of devices manufactured by Apple Computer any one of the PLAYSTATION family of devices manufactured by the Sony Corporation any one of the Nintendo family of devices manufactured by Nintendo Co any one of the XBOX family of devices manufactured by the Microsoft Corporation or any other type and or form of computing telecommunications or media device that is capable of communication and that has sufficient processor power and memory capacity to perform the methods and systems described herein. In other embodiments the computing machine can be a mobile device such as any one of the following mobile devices a JAVA enabled cellular telephone or personal digital assistant PDA such as the i55sr i58sr i85s i88s i90c i95cl or the im1100 all of which are manufactured by Motorola Corp the 6035 or the 7135 manufactured by Kyocera the i300 or i330 manufactured by Samsung Electronics Co. Ltd the TREO 180 270 600 650 680 700p 700w or 750 smart phone manufactured by Palm Inc any computing device that has different processors operating systems and input devices consistent with the device or any other mobile computing device capable of performing the methods and systems described herein. In still other embodiments the computing device can be any one of the following mobile computing devices any one series of Blackberry or other handheld device manufactured by Research In Motion Limited the iPhone manufactured by Apple Computer Palm Pre a Pocket PC a Pocket PC Phone or any other handheld mobile device.

In some embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computing device is a TREO 180 270 600 650 680 700p 700w or 750 smart phone manufactured by Palm Inc. In some of these embodiments the TREO smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device.

In other embodiments the computing device is a mobile device such as a JAVA enabled cellular telephone or personal digital assistant PDA such as the i55sr i58sr i85s i88s i90c i95cl or the im1100 all of which are manufactured by Motorola Corp. of Schaumburg Ill. the 6035 or the 7135 manufactured by Kyocera of Kyoto Japan or the i300 or i330 manufactured by Samsung Electronics Co. Ltd. of Seoul Korea. In some embodiments the computing device is a mobile device manufactured by Nokia of Finland or by Sony Ericsson Mobile Communications AB of Lund Sweden.

In still other embodiments the computing device is a Blackberry handheld or smart phone such as the devices manufactured by Research In Motion Limited including the Blackberry 7100 series 8700 series 7700 series 7200 series the Blackberry 7520 or the Blackberry Pearl 8100. In yet other embodiments the computing device is a smart phone Pocket PC Pocket PC Phone or other handheld mobile device supporting Microsoft Windows Mobile Software. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

In some embodiments the computing device is a digital audio player. In one of these embodiments the computing device is a digital audio player such as the Apple IPOD IPOD Touch IPOD NANO and IPOD SHUFFLE lines of devices manufactured by Apple Computer of Cupertino Calif. In another of these embodiments the digital audio player may function as both a portable media player and as a mass storage device. In other embodiments the computing device is a digital audio player such as the DigitalAudioPlayer Select MP3 players manufactured by Samsung Electronics America of Ridgefield Park N.J. or the Motorola m500 or m25 Digital Audio Players manufactured by Motorola Inc. of Schaumburg Ill. In still other embodiments the computing device is a portable media player such as the Zen Vision W the Zen Vision series the Zen Portable Media Center devices or the Digital MP3 line of MP3 players manufactured by Creative Technologies Ltd. In yet other embodiments the computing device is a portable media player or digital audio player supporting file formats including but not limited to MP3 WAV M4A AAC WMA Protected AAC RIFF Audible audiobook Apple Lossless audio file formats and .mov .m4v and .mp4MPEG 4 H.264 MPEG 4 AVC video file formats.

In some embodiments the computing device comprises a combination of devices such as a mobile phone combined with a digital audio player or portable media player. In one of these embodiments the computing device is a Motorola RAZR or Motorola ROKR line of combination digital audio players and mobile phones. In another of these embodiments the computing device is an iPhone smartphone manufactured by Apple Computer of Cupertino Calif. While may be described with respect to specific examples of hardware and or software that may be used such examples are in no way limiting but instead are merely illustrative of the type of resources that may be utilized as technology progresses.

Illustrated in is one embodiment of a computer device configured as a virtualization server in a virtualization environment for example a single server multi server or cloud computing environment. The virtualization server illustrated in can be deployed as and or implemented by one or more embodiments of the server illustrated in or the computing devices and illustrated in . Included in virtualization server is a hardware layer that can include one or more physical disks one or more physical devices one or more physical processors and a physical memory . In some embodiments firmware can be stored within a memory element in the physical memory and can be executed by one or more of the physical processors . The virtualization server may further include an operating system that may be stored in a memory element in the physical memory and executed by one or more of the physical processors . Still further a hypervisor may be stored in a memory element in the physical memory and can be executed by one or more of the physical processors . Executing on one or more of the physical processors may be one or more virtual machines A C generally . Each virtual machine may have a virtual disk A C and a virtual processor A C. In some embodiments a first virtual machine A may execute on a virtual processor A a control program that includes a tools stack . In other embodiments one or more virtual machines B C can executed on a virtual processor B C a guest operating system A B.

Further referring to and in more detail the virtualization server may include a hardware layer with one or more pieces of hardware that communicate with the virtualization server . In some embodiments the hardware layer can include one or more physical disks one or more physical devices one or more physical processors and one or more memory . Physical components and may include for example any of the components described above in . For instance physical disks may include permanent memory storage temporary memory storage disk drives e.g. optical floppy tape hard disks external hard drives flash memory network attached storage a storage area network or any other storage repository that the virtualization server can access. Physical devices may include any device included in the virtualization server and or any combination of devices included in the virtualization server and external devices that communicate with the virtualization server . A physical device may be for example a network interface card a video card a keyboard a mouse an input device a monitor a display device speakers an optical drive a storage device a universal serial bus connection a printer a scanner a network element e.g. router firewall network address translator load balancer virtual private network VPN gateway Dynamic Host Configuration Protocol DHCP router etc. or any device connected to or communicating with the virtualization server . The physical memory in the hardware layer may include any type of memory. The physical memory may store data and in some embodiments may store one or more programs or set of executable instructions. illustrates an embodiment where firmware is stored within the physical memory of the virtualization server . Programs or executable instructions stored in the physical memory can be executed by the one or more processors of the virtualization server .

Virtualization server may also include a hypervisor . In some embodiments hypervisor may be a program executed by processors on the virtualization server to create and manage any number of virtual machines . The hypervisor can be referred to as a virtual machine monitor or platform virtualization software. In some embodiments a hypervisor can be any combination of executable instructions and hardware that monitors virtual machines executing on a computing machine. Hypervisor may be Type 2 hypervisor or a hypervisor that executes within an operating system executing on the virtualization server . A Type 2 hypervisor in some embodiments executes within an operating system environment and virtual machines execute at a level above the hypervisor. In many embodiments the Type 2 hypervisor executes within the context of a user s operating system such that the Type 2 hypervisor interacts with the user s operating system. In other embodiments one or more virtualization servers in a virtualization environment may include a Type 1 hypervisor Not Shown . A Type 1 hypervisor may execute on the virtualization server by directly accessing the hardware and resources within the hardware layer . That is while a Type 2 hypervisor accesses system resources through a host operating system a Type 1 hypervisor may directly access all system resources without needing a host operating system . A Type 1 hypervisor may execute directly on one or more physical processors of the virtualization server and may include program data stored in the physical memory .

The hypervisor in some embodiments can provide virtual resources to operating systems or control programs executing on virtual machines in any manner that simulates the operating systems or control programs having direct access to system resources. System resources can include physical devices physical disks physical processors physical memory and any other component included in the virtualization server hardware layer . In these embodiments the hypervisor may be used to emulate virtual hardware partition physical hardware virtualize physical hardware or execute virtual machines that provide access to computing environments. In still other embodiments the hypervisor controls processor scheduling and memory partitioning for a virtual machine executing on the virtualization server . Hypervisor may include those manufactured by VMWare Inc. of Palo Alto Calif. the XEN hypervisor an open source product whose development is overseen by the open source Xen.org community HyperV VirtualServer or virtual PC hypervisors provided by Microsoft or others. In some embodiments a virtualization server executes a hypervisor that creates a virtual machine platform on which guest operating systems may execute. In these embodiments the virtualization server can be referred to as a host server. An example of such a virtualization server is the XEN SERVER provided by Citrix Systems Inc. of Fort Lauderdale Fla.

The hypervisor may create one or more virtual machines B C generally in which guest operating systems execute. In some embodiments the hypervisor may load a virtual machine image to create a virtual machine . In other embodiments the hypervisor may executes a guest operating system within the virtual machine . In still other embodiments the virtual machine may execute the guest operating system .

In addition to creating virtual machines the hypervisor may control the execution of at least one virtual machine . In other embodiments the hypervisor may presents at least one virtual machine with an abstraction of at least one hardware resource provided by the virtualization server e.g. any hardware resource available within the hardware layer . In other embodiments the hypervisor may control the manner in which virtual machines access the physical processors available in the virtualization server . Controlling access to the physical processors may include determining whether a virtual machine should have access to a processor and how physical processor capabilities are presented to the virtual machine .

As shown in the example of the virtualization server may host or execute one or more virtual machines . A virtual machine is a set of executable instructions that when executed by a processor imitate the operation of a physical computer such that the virtual machine can execute programs and processes much like a physical computing device. While illustrates an embodiment where a virtualization server hosts three virtual machines in other embodiments the virtualization server can host any number of virtual machines . The hypervisor in some embodiments provides each virtual machine with a unique virtual view of the physical hardware memory processor and other system resources available to that virtual machine . In some embodiments the unique virtual view can be based on any of the following virtual machine permissions application of a policy engine to one or more virtual machine identifiers the user accessing a virtual machine the applications executing on a virtual machine networks accessed by a virtual machine or any other similar criteria. For instance the hypervisor may create one or more unsecure virtual machines and one or more secure virtual machines . Unsecure virtual machines may be prevented from accessing resources hardware memory locations and programs that secure virtual machines may be permitted to access. In other embodiments the hypervisor may provide each virtual machine with a substantially similar virtual view of the physical hardware memory processor and other system resources available to the virtual machines .

Each virtual machine may include a virtual disk A C generally and a virtual processor A C generally . The virtual disk in some embodiments is a virtualized view of one or more physical disks of the virtualization server or a portion of one or more physical disks of the virtualization server . The virtualized view of the physical disks can be generated provided and managed by the hypervisor . In some embodiments the hypervisor provides each virtual machine with a unique view of the physical disks . Thus in these embodiments the virtual disk included in each virtual machine can be unique when compared with the other virtual disks .

A virtual processor can be a virtualized view of one or more physical processors of the virtualization server . In some embodiments the virtualized view of the physical processors can be generated provided and managed by the hypervisor . In some embodiments the virtual processor has substantially all of the same characteristics of at least one physical processor . In other embodiments the virtual processor provides a modified view of the physical processors such that at least some of the characteristics of the virtual processor are different than the characteristics of the corresponding physical processor .

Illustrated in is an embodiment of a computing device that executes a virtualization environment and that has a hardware layer that can include multiple network interface cards NIC A N. The virtualization environment can include a controller such as control virtual machine one or more additional virtual machines A B and a hypervisor . While a type 1 hypervisor no O S is shown in a type 2 hypervisor may also be used as described above. In some instances each additional virtual machine can execute a guest operating system guest OS A B and can include one or more virtual interface VIF objects A N. The control virtual machine can execute a control program and a network policy engine . In some instances the control program can include a tool stack and one or more network objects A B that include or implement network policies A B.

Further referring to and in more detail in one embodiment the computing device can be any computing device described herein. In some embodiments the computing device can be a server or a client machine. The computing device can be referred to a host a computer a first computer a second computer a third computer etc.

As the computing device can be any computing device described herein so too the hardware layer can be any hardware layer described herein and can include any computer hardware described herein. In one embodiment the hardware layer can include one or more NICs A N. The computing device can include a single NIC two NICs or any other number of NICs . The NIC can be any NIC such as an SR IOV enabled NIC and each NIC included in the hardware layer can either be the same NIC or can be different types of NICs.

The virtualization environment executing on the computing device can be any virtualization environment described herein. The virtualization environment can include any hypervisor configuration such as the hypervisor configuration illustrated in . In one embodiment the hypervisor included in the virtualization environment can be any hypervisor or any hypervisor described herein.

In some embodiments the tool stack can include metadata that describes the objects included in one or more of the virtual machines of the virtualization environment . The metadata for example can include information about the current configuration of each virtual machine . Configuration information can include network configurations used by objects within a virtual machine the number and type of interface objects within a virtual machine what objects are currently running in a virtual machine and which external machines and networks are currently interfacing with the virtual machine . In one embodiment the metadata can include network objects and network policies . The tool stack in some embodiments can be used to generate a network implementation for a virtual machine to use to communicate with other virtual machines or to access a public network.

Tool stack metadata in some embodiments can be stored in a storage repository of the control virtual machine . The metadata can be generated by the virtual machines and objects executing within the virtualization environment . In other embodiments the tool stack metadata can be dynamically obtained from a storage repository remotely located from the host machine . For example the control program can stream or download the metadata from a remote computer that stores the tool stack metadata for a virtualization system. In other embodiments the tool stack metadata can be updated or generated using metadata downloaded or streamed from a remote computer. For example when a control virtual machine boots or executes a control program the control virtual machine or control program can query a remote computer for tool stack metadata updates. In response the remote computer can transmit stream or otherwise send the control virtual machine metadata relating to the virtualization environment .

The control program can further include one or more network objects A B. Although illustrates network objects A B hereinafter generally referred to as network objects included in the control program in other embodiments the network objects can be stored in any of the following places the control virtual machine the tool stack metadata or a remote storage repository located on a remote virtual machine or a remote physical machine. A network object in some embodiments can be an object configured to connect to one or more VIF objects . In still other embodiments the network object can execute one or more network policies A B. The network object can define a particular network policy. In another embodiment the network object can define a network configuration that includes one or more network policies A B. Thus when a VIF object connects to a network object that VIF object can function according to the network policy or configuration included within the network object .

Network policies e.g. A B in some embodiments can be one or more policies associated with a particular network configuration. For example a network policy can include a set of guidelines or rules by which an object executing within a virtual machine can interact with other objects within other virtual machines . In some embodiments a network policy can be used to specify the attributes of a network that can be created between one or more virtual machines and or define how network traffic can be managed. These attributes can include whether and how to encrypt data transmitted over the connection which NIC cards to use to establish the connection whether to restrict network traffic to a particular physical computer whether to avoid transmitting network traffic to a particular virtual machine whether network traffic can or should be transmitted over a physical NIC to virtual machines executing on a remote physical computer whether to compress data before transmitting over the network any other network attribute. Configuring the attributes of a network connection can further include specifying sub attributes such as the type of encryption algorithm the type of NIC card and other similar sub attributes.

Network policies can be written in one or more policy languages and can be configured by administrators using a configuration application that interfaces with the control program . In some embodiments the network objects can implement a single network policy that specifies one or more attributes of a network configuration. In other embodiments the network objects can implement one or more network policies that together create a network configuration that specifies one or more attributes of a particular network.

Specifying attributes such as those requiring that network traffic not be transmitted to or generated by a particular virtual machine or physical machine can be accomplished by associating the virtual or physical object with a tag. When creating the network policy the policy language can reference the tag associated with the object. For example an identification tag can be stored on or otherwise associated with a virtual machine . When a network policy is created that specifies that network traffic should not be transmitted to the tagged virtual machine the network policy can identify the virtual machine using the tag. Thus if the network object that includes the network policy is moved to a different virtualization environment or computer the network object does not need to be reconfigured. Rather the network object will continue to implement a network configuration that prevents network traffic from being routed or otherwise transmitted to a virtual machine containing the specified tag. Therefore when the network policy is implemented any virtual machine in the new virtualization environment or computer that stores or is associated with the specified tag will be avoided such that it will not receive network traffic.

The above code illustrates one embodiment of a network policy that specifies that one or more virtual machines which reside on an appliance can reside on separate physical computers which are connected via a network. In this embodiment the network traffic should be encrypted e.g. REQUIRE ENCRYPTION true and the traffic should be serviced by network interface cards that have or are associated with the following tags testdev network and testdev network. Further this embodiment illustrates a restriction on network traffic where the network traffic cannot traverse any network that is connected to a virtual machine or appliance with the tag my insecure vm. 

The control virtual machine in some embodiments can execute a network policy engine that can be used to enforce or implement one or more network policies . The network policy engine can interface with one or more network objects and one or more network policies of the network objects . These policies can be stored in a storage repository such as cache memory and can be stored in a data element such as a database a list a table or any other storage element. In some embodiments the policy engine can be invoked by a control virtual machine when the control virtual machine receives an API call to change the state of one or more virtual machines . In other embodiments the policy engine can be invoked by the virtualization environment or directly by the virtual machine experiencing the lifecycle event. Upon being invoked the network policy engine can perform one or more functions including identifying one or more network objects that correspond to the VIF object s included in the virtual machine experiencing the life event. When the network policy engine fails to identify a network object that includes a network configuration that matches up with one or more VIF objects of the virtual machine an error can be thrown by the network policy engine indicating that a network configuration could not be assembled.

While illustrates a network policy engine executing on a controller in some embodiments an instantiated instance of a network policy engine can execute on any virtual machine . In still other embodiments the network policy engine can execute on the hypervisor .

In other embodiments each virtual machine can include one or more virtual interface VIF objects . A VIF object can be used to establish a local network between two or more virtual machines . In some embodiments the VIF object can interface with a network object such that the network object enforces a network policy that dictates what the attributes of the network connecting the VIF objects should be. In other embodiments one or more VIF objects can register with a network object such that the network object can facilitate the creation of a local network between the VIF objects registered with that network object. A VIF object in some embodiments can communicate with other VIF objects over a local network. In other embodiments the VIF object can communicate with other VIF objects on a remote physical computer such that a local network is established between the VIF objects however the local network requires interfacing with a NIC to establish the local network with those VIF objects on the remote computer. The network policy or configuration of the network object can outline the attributes of the network created between the VIF objects .

In some embodiments each virtual machine can generate a notification when a lifecycle event occurs. A lifecycle event can include starting or restarting a virtual machine stopping a virtual machine migrating a virtual machine or other similar lifecycle events. The notification can include the generation of an alert that the virtual machine can transmit to a control virtual machine . When a lifecycle event occurs a determination can be made by a virtualization environment as to whether a networking topology is required for that virtual machine . The networking topology can be created using network policies and in some embodiments can include establishing a local network between the virtual machine and other virtual machines or establishing a connection between the virtual machine and a physical network interface card . The control program or virtualization environment can create the network topology in accordance with one or more network policies .

Illustrated in is one embodiment of a virtualization system that includes one or more computing devices A N and a control computing device that includes tool stack metadata and a network interface card . Each computing device A N can include a virtualization environment that includes a control virtual machine and one or more additional virtual machines one or more NIC s and a control virtual machine that further includes tool stack metadata .

Further referring to and in more detail in one embodiment the virtualization system can be an environment where multiple computing device executing their own virtualization environment can communicate with one another and with a control computer that provides each computing device with access to shared resources. In some embodiments the computing devices and the control computer can communicate via a network such as any network described herein. In other embodiments the computing devices A N and the controller can be any computing device described herein. In some embodiments the computing devices A N can communicate with one another via a network and a NIC .

The control computer in some embodiments can include a NIC such as any NIC described herein. Further the control computer can communicate with the other computer via a network and the NIC of the control computer .

In some embodiments the control computer can further include tool stack metadata that can be a collection of metadata for each computing device in the system . The tool stack metadata in some embodiments is a combination of the tool stack metadata for each computing device . When a control virtual machine boots or when a virtualization environment executes the control virtual machine or another application executing in the virtualization environment can obtain metadata from the pool of metadata stored on the control computer . The obtained metadata can be stored on the virtual machine requesting the metadata and can be used to update the metadata stored on the virtual machine . When a control virtual machine stops executing the metadata can be transmitted to the metadata pool. In some embodiments the metadata can store network objects . Creating a local network that includes virtual machines executing on remote physical computers can require using a centralized network object stored in the tool stack metadata of the control computer .

In some instances a local network can be created between one virtual machine A on one computer A and a second virtual machine B on a second computer B remotely located from the first computer A. In this instance the local network can be created using VIF objects in each virtual machine A B. The VIF objects can register with a network object such that the network object can create a local network between the VIF objects in accordance with a network policy or configuration of the network object . In this example the network object can be part of metadata that is downloaded from a main metadata store or the network object can be accessed by the computing device A B through a network between the computers A B and the control computer .

Modifications may be made to the example configurations of . For example as will be discussed further below a proxy may be inserted into the virtualization environment such as for example by being inserted between one or more controllers and one or more NICs. The proxy may be located such that it may communicate with the controller and the NICs and may be configured to facilitate the communication between the controller and NIC.

Example embodiments using NICs including SR IOV NICs OpenFlow controllers and proxies that can communicate with the NICs and the OpenFlow controllers will now be discusses.

OpenFlow is a standard that can be included in various network devices including switches routers and wireless access points. An OpenFlow switch for example may separate a data path from a control path. The data path may still reside on the switch but some routing decisions may be controlled by a separate controller e.g. OpenFlow controller . An OpenFlow switch such as any of OpenFlow clients and may communicate with OpenFlow controller using a version of the OpenFlow protocol.

OpenFlow controller may store various rules for routing certain types of packets. For example a controller may include rules that define various actions that should be performed for a packet. In some embodiments the rules may be stored as a table with fields defining packet identifiers and one or more actions to take for each packet identifier. Actions may include such things as send out port modify field drop etc. and various action types may be defined in an OpenFlow specification.

As shown in the OpenFlow controller comprises one or more rules or policies that define how network traffic should be managed such as by defining actions that should be taken when an OpenFlow client receives a packet. The OpenFlow controller may broadcast these rules and policies to any of the OpenFlow clients such as OpenFlow client . In turn the OpenFlow client may store the rules in either a user space component or a kernel component . illustrates user space component and kernel component having different rules stores rules and . While rules and rules may both be included on OpenFlow client an OpenFlow client may include only one rules store in either the user space component or the kernel component. Upon storing the rules and policies OpenFlow client may use the rules and policies to manage network traffic. In some instances the OpenFlow client may update the rules stored by the OpenFlow controller with new rules or with adjustments to attributes of the actions.

When an OpenFlow client such as example OpenFlow client receives a packet the client may first check its local rules to determine if the switch already knows how to process the packet check for a match in rules and or rules . The OpenFlow client may determine it can handle processing of the packet if one of the rules stored in the switch s local rule set matches a packet identifier of the packet. If OpenFlow client does not find a match in the local rule set the OpenFlow client may query a controller for the matching rules such as by sending the packet to the OpenFlow controller . The OpenFlow controller may search the controller s rules to determine if an entry matches. If an entry matches in rules the entry and or the action set for the entry may be sent to the OpenFlow client . The packet may also be transmitted from the OpenFlow controller to the OpenFlow client with the rule or entry set. The OpenFlow client upon receiving the action set may update its local rule set with a new entry matching the current packet and may execute the action set to appropriately process the packet. An action set can include one or more actions that should be executed upon receiving a packet. For example the packet may be modified decrement a time to live field or change a destination address or forwarded to a port.

When an OpenFlow client or receives a packet the client may search its local rules for an entry matching the packet. If a match is not found the OpenFlow client or may send the packet to the OpenFlow proxy in order to query for rules defining how to process the packet.

Like a controller and client OpenFlow proxy may include rules that define how network traffic should be managed at one or more OpenFlow clients. Accordingly when the packet is received at OpenFlow proxy rules may be searched to determine if an entry matches the packet.

In some embodiments a rules backup may also provide a secondary store of rules for the OpenFlow proxy . Further rules backup may be a backup copy for rules or rules may include additional rules that can be retrieved by the OpenFlow proxy when needed such as when OpenFlow proxy determines that rules does not include a matching entry for a packet. In such cases rules may be retrieved or searched to determine if a matching entry for the packet exists.

If a matching rule is found by the OpenFlow proxy the OpenFlow proxy may transmit the rule s or action set to the OpenFlow client or . Otherwise the OpenFlow proxy may query the OpenFlow controller for a rule by sending the packet to OpenFlow controller . Upon the OpenFlow controller receiving the packet the rules local to the controller may be searched and if a matching entry in the rules is found the matching rule or event set may be transmitted to the OpenFlow proxy .

Upon receiving a rule or event set from the OpenFlow controller OpenFlow proxy may update rules and rules appropriately such as by storing the received rule or creating a new entry with the received action set in rules or rules . OpenFlow proxy may also transmit the rule or action set to OpenFlow client or .

Upon the OpenFlow client or receiving the rule or action set from the OpenFlow proxy the rules of the client may be updated such as by storing the received rule or creating a new entry with the received action set in the client s rules. The OpenFlow client may also execute the rule or action set to process the packet.

Trusted domain may also be referred to as domain zero Dom0 and may perform management and administrative functions of the virtualization environment in order to perform various virtualization functions such as executing one or more guest domains e.g. virtual machines A and B .

In the depicted embodiment virtual machines A and B may access the network via Dom0. In this embodiment there is no requirement that a guest driver be installed to achieve network functionality within virtual machine A or B and the virtualization environment may include host switching. For example interfaces A and B of the virtual machines may communicate along a network path with interface of the trusted domain . In some arrangements interfaces A and B may both include NetFront processes while interface may include NetBack processes. Open vSwitches A and B may perform switching from the trusted domain to a corresponding NIC. As illustrated Open vSwitch A is mapped to NIC A and Open vSwitch B is mapped to B.

By using SR IOV virtual machines may be able to bypass the virtual switch provided by the virtualization environment e.g. a Citrix XenServer environment and controlled by the control virtual machine.

However SR IOV provides some difficulties when used in a virtualization environment. For example when guests migrate between hosts the virtual function that the virtual machine had on the previous host may not be carried to the new host. Further the new host may not support SR IOV by lacking the appropriate cards or drivers . Additionally in some embodiments using SR IOV such as cloud deployments there may be a need to install guest drivers to the virtualization environment which may require a manual install . illustrate embodiments that use SR IOV but exhibit one or more of the above disadvantages or others. illustrates an example embodiment that improves on arrangements using SR IOV.

As depicted SR IOV NIC may be accessed by a virtual machine using PF via trusted domain or directly using VF A B. The switching used by the trusted domain to communicate with NIC may be unavailable when communicating with the SR IOV NIC e.g. SR IOV NIC may not be accessible via a switch similar to Open vSwitch . Direct communication to the SR IOV NIC may require additional functionality. Accordingly such embodiments may require creation of a special driver e.g. by a NIC vendor for an operating system e.g. Windows driver to manage the interface of a virtual machine in order for the virtual machine B to communicate with the SR IOV enabled NIC either via the trusted domain or directly with the SR IOV NIC using VF B. For example a driver to manage interface B may need to be installed. Such a driver in some arrangements may manage NetFront processes which communicates with NetBack of Dom0 include a virtual function driver to facilitate the direct communication to SR IOV NIC from virtual machine B.

The embodiment of may also be extended to have multiple domains or DomNets where there are multiple SR IOV enabled NICs segregation and partitioning of data may also be maintained . Like this virtualization environment also may not integrate with host switching thereby making virtual machine migration from one domain to another.

An OpenFlow proxy can be situated within for example a switch domain or domain e.g. DomNet . Here a virtual machine A may be in communication with domain which provides access to VF on SR IOV enabled NIC . NIC in some cases may have virtual switching capabilities as depicted by virtual switch which is in communication with VF and network . In some arrangements the DomNet may provide a well defined set of application programming interfaces APIs to allow domains to be created as drop in appliances. In such cases there might be capabilities available to allow stacking or layering of domains to combine functionality. In some arrangements the domains e.g. 803 830 and 840 proxy NIC and virtual switches e.g. may be included in the same host.

Control over the access provided the virtual machines may be provided via a control plane shown by the dotted lines between virtual switch OpenFlow proxy and OpenFlow controller . As depicted in OpenFlow proxy is included in a switch domain DomSwitch provided by a host. Using the control plane initial programming of the virtual switch may allow it to become part of the switching infrastructure in which the host participates. The host may be participating in an infrastructure where OpenFlow controller is operated by a third party which can be remote from the other devices of the virtualization environment including the switch domain the SR IOV NIC and the virtual machine A. Additionally the OpenFlow proxy may be in communication with virtual switches of another host in addition to virtual switch .

At step a packet may be received at a NIC. In some arrangements the NIC which may be SR IOV enabled NIC of may have arrived at VF via domain and from virtual machine A of .

At step the NIC may determine whether rules stored by the NIC match the packet or a packet identifier included or based on the packet . For example the rules may be stored by the virtual switch of the SR IOV enabled NIC and may be the same or similar to the rules discussed above in connection with . If no matching rule is found in the NIC s rules the method may proceed to step . If a matching rule is found the method may proceed to step . In some instances the rules of the virtual switch may be a set of reduced width rules or exception rules.

At step the NIC has determined that no matching rule can be found in the rules local to the NIC and the NIC may query a proxy for the matching rules for processing the packet. For example when a packet is received by SR IOV enabled NIC for which virtual switch has no matching rule the virtual switch can query the switch which includes the OpenFlow proxy by sending the packet to switch .

OpenFlow proxy may have its own repository of rules. Thus at step the OpenFlow proxy may determine whether rules stored by the NIC match the packet which was received from the NIC . If a matching rule is found the method may proceed to step . If no matching rule is found the method may proceed step .

At step a matching rule has been found by the OpenFlow proxy and the proxy may transmit the matching rule or rules in some instances where multiple rules match the packet to the NIC. For example the OpenFlow proxy may cause switch to transmit the matching rules to the virtual switch of the SR IOV enabled NIC . The transmission may include one or more matching rules and the packet. Communication between the OpenFlow proxy and the NIC may be encrypted.

At step the OpenFlow proxy did not find a match in its local rules. Accordingly the OpenFlow proxy may transmit a query to an OpenFlow controller e.g. OpenFlow controller for the matching rules. In some instances the rules stored by the OpenFlow proxy may be different than rules stored by the Open Flow controller. For example a set of local rules may be stored at the OpenFlow proxy and because the OpenFlow proxy receives the query from the NIC before the OpenFlow controller the rules of the OpenFlow proxy can take priority e.g the proxy s rules can be searched for a match before querying the controller . In some embodiments communication between the OpenFlow proxy and the OpenFlow controller may be encrypted. The encryption keys may be the same as the keys used for encrypting communication between the OpenFlow proxy and the NICs however different encryption keys could also be used.

Additionally in some instances the communication link with the OpenFlow controller may not be reliable or may sometimes be broken. Providing a NIC with the OpenFlow proxy over a more reliable communication link can provide for faster and more reliable rule retrieval. Moreover the OpenFlow proxy may improve fault tolerance because rules can be distributed as long as there is a link between the OpenFlow controller and the OpenFlow proxy and a link between the OpenFlow proxy and the NICs or virtual switches.

In some arrangements the OpenFlow controller and the NIC may be incompatible with each other. For example the network segment where the controller is resident and the network segment where the NIC is resident may be incompatible with each other. As another example the OpenFlow controller may use an OpenFlow protocol that is different than the one used by the NIC e.g. they use different versions or variants of OpenFlow . Accordingly the OpenFlow proxy may need to convert communication from the controller NIC so that it is compatible with the NIC controller.

At step the OpenFlow controller may locate a matching rule from its rules and once the matching rule or rules is found the OpenFlow controller may transmit the matching rule to the OpenFlow proxy. In some arrangements the transmission may include one or more matching rules and the packet.

At step the OpenFlow proxy has received the matching rule from the OpenFlow controller and the OpenFlow proxy may update its rules with the matching rule and transmit the matching rule to the NIC or the virtual switch of the NIC . In some instances the transmission to the NIC may include one or more matching rules and the packet.

In some embodiments one or more OpenFlow controllers may be used and each of the OpenFlow controllers may be queried for a matching rule by the OpenFlow proxy. For example controllers and proxies could be arranged in a hierarchy with different responsibilities being defined for each controller and proxy in the hierarchy. As one particular example where multiple controllers are used a first OpenFlow controller may provide default rules for all devices while a second OpenFlow controller may provide rules specific to a device or protocol such as voice over IP VoIP . In an instance where both controllers include a matching rule the OpenFlow proxy may receive a matching rule from the first OpenFlow controller and a matching rule from the second OpenFlow controller. These rules may define different actions. The OpenFlow proxy may be able to determine which of the matching rules should have primacy in order to select whether the matching rule from the first OpenFlow controller or the matching rule from the second OpenFlow controller should be used to update the proxy s rules and be transmitted to the NIC. In some embodiments the OpenFlow proxy could make this determination based on various criteria including traffic levels of the network time of day or a controller priority.

At step the NIC or virtual switch of the NIC has received the matching rule from the OpenFlow proxy and the NIC or virtual switch may update its rules with the matching rule. For example virtual switch of SR IOV enabled NIC may receive one or more matching rules from switch and may update the rules of the virtual switch with the received one or more matching rules.

At step the NIC or virtual switch may have updated its rules with the one or more matching rules. Accordingly the NIC or virtual switch may proceed with processing the packet according to the matching rules and the actions specified by the rules. Actions can include for example actions to modify the packet such as by decrementing a time to live field changing a destination address. Actions may also include actions to transmit or drop a packet such as by forwarding the packet to a port.

While illustrates the steps of the example method as occurring in a particular order modifications may be made to the order of steps. For example in some embodiments the NIC or virtual switch may perform step prior to performing step .

Aspects of the disclosure have been described in terms of illustrative embodiments thereof. Numerous other embodiments modifications and variations within the scope and spirit of the appended claims will occur to persons of ordinary skill in the art from a review of this disclosure. For example one of ordinary skill in the art will appreciate that the steps illustrated in the illustrative figures may be performed in other than the recited order and that one or more steps illustrated may be optional in accordance with aspects of the disclosure. Modifications may be made by those skilled in the art particularly in light of the foregoing teachings. For example each of the elements of the aforementioned embodiments may be utilized alone or in combination or sub combination with elements of the other embodiments. It will also be appreciated and understood that modifications may be made without departing from the spirit and scope of the following claims.

