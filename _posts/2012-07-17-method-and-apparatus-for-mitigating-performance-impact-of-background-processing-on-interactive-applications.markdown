---

title: Method and apparatus for mitigating performance impact of background processing on interactive applications
abstract: A method and apparatus for mitigating the performance impact of background or idle time processing during interactive computing sessions. One embodiment of the present invention is a method for mitigating performance impact of background or idle time processing on interactive applications comprising identifying executable and data pages in physical memory that are associated with an interactive application that is temporarily unused and preventing any of the identified executable and data pages from paging out.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08769220&OS=08769220&RS=08769220
owner: Symantec Corporation
number: 08769220
owner_city: Mountain View
owner_country: US
publication_date: 20120717
---
This application is a continuation CON application of U.S. patent application Ser. No. 12 004 865 entitled Method and Apparatus for Mitigating Performance Impact of Background Processing on Interactive Applications filed Dec. 21 2007 now issued as U.S. Pat. No. 8 225 053 and claims benefit to U.S. Provisional Patent Application No. 60 976 418 filed Sep. 29 2007 all of which are herein incorporated by reference.

Embodiments of the present invention generally relate to computer memory management and more particularly to a method and apparatus for mitigating performance impact of idle or background processing on interactive applications.

In a computing environment many tasks or processes are performed in the background or during idle time. For example tasks or processes are performed invisibly or when the user is not actively involved with an interactive application for some period of time. Many of the tasks or processes are non critical but time memory and or processor intensive activities e.g. backup programs scheduled jobs cleaning files Anti Virus scan screen saver program web page serving email transfer processes file synchronization among others .

Often such background or idle tasks or processes cause the working sets of executable and data pages associated with the interactive applications to become paged out of the local memory i.e. removed from local memory such as RAM . For example the working set may be paged out to free up memory for the working set associated with the background or idle tasks or processes. However when the user returns to using the interactive application a significant amount of sluggishness is experienced due to the subsequent paging in of the working set of the interactive application that was previously paged out. The manner in which memory pages are managed in a Windows environment are described in an article entitled The NT Insider Vol. 6 Issue 1 January February 1999 published in Windows NJ Virtual Memory Part II .

Therefore there exists a need for a method and apparatus of mitigating the adverse performance impact of background or idle time processing on interactive applications.

Embodiments of the present invention generally relate to a method and apparatus for mitigating the performance impact of background or idle time processing during interactive computing sessions. One embodiment of the present invention is a method for mitigating performance impact of background or idle time processing on interactive applications comprising identifying executable and data pages in physical memory that are associated with an interactive application and preventing the identified executable and data pages from paging out.

While the invention is described herein by way of example using several embodiments and illustrative drawings those skilled in the art will recognize that the invention is not limited to the embodiments of drawing or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit the invention to the particular form disclosed but on the contrary the invention is to cover all modification equivalents and alternatives falling within the spirit and scope of the present invention as defined by the appended claims.

The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to. Further the word a means at least one.

The memory may comprise random access memory read only memory optical memory disk drives removable memory and the like. Various types of software packages and information are resident within the memory . For example an operating system an interactive application a memory manager a cache manager a background idle process and a prioritization module are stored in the memory .

The operating system manages the allocation or sharing of various resources e.g. local memory data storage devices processors and the like of the computer . The operating system processes raw system data and user input and responds by allocating and managing tasks and internal system resources as a service to users and programs of the system. It performs basic tasks such as controlling and allocating memory prioritizing system requests controlling input and output devices facilitating networking and managing file systems. Most operating systems come with an application that provides a user interface for managing the operating system.

The interactive application may be any application of interest to the user of computer e.g. word processing e mail software and the like . The interactive application may have one or more windows visible at a display of the computer that are actively receiving input and utilizing resources e.g. CPU time from the operating system .

In addition the computer may execute certain applications in the background or during idle time which are not visible to the user of computer e.g. the background idle process . Many of these applications are non critical but are time and computing intensive activities e.g. backup programs scheduled tasks updating of an Anti Virus clean file cache performing an Anti Virus scan screen saver program web page access email transfer file synchronization and the like . For example an anti virus application may scan the memory when the interactive application becomes idle for some period of time.

The memory manager provides the operating system with dynamic memory allocation. The memory manager processes read write requests by the operating system the interactive application the background idle process and any other application or process that uses the memory . Generally a working set is used by the memory manager to keep track of the pages that are associated with any given application. Each time a new data and executable page is allocated to a given process the page is added to its working set. Thus the memory manager controls an amount of physical memory each process or application consumes. The working set of executable and data pages associated with the interactive application may be modified and or prioritized through operation of the memory manager and or the prioritization module according to embodiments of the present invention.

The cache manager manages the random access memory that is set aside as specialized temporary buffer storage that is continually updated. This memory is used to optimize data transfers between system elements with different characteristics. The cache manager cooperates with the memory manager to control the swapping i.e. paging in and paging out of data between various levels of memory e.g. swapping pages between a disk drive and local memory .

The prioritization module may be a software package stored and executed by the computer . The prioritization module is configured to identify one or more data and executable pages associated with the interactive application and prevent the identified pages from paging out. Alternatively the prioritization module may form a portion of the background idle process . In one embodiment the prioritization module is used to mitigate the performance impact of the background idle process e.g. an anti virus scan executed in idle time on the interactive application . In another alternative embodiment the prioritization module may be included within the operating system and or the memory manager . In such embodiments the prioritization module is implemented as a modification to the paging scheme e.g. swapping page fault handing of the operating system and or the memory manager .

When a process is first created it is assigned two physical memory related quotas a minimum working set size and a maximum working set size. The exact values of these two quotas vary over time and may even be changed programmatically.

Because physical memory must be shared between all processes within the system the memory manager is used to reclaim executable and data pages from some processes to make those pages available to other processes. By reclaiming physical memory a process that is idle or presently unused may have pages become paged out of the memory. As described in detail below the present invention controls the page out process to protect certain pages.

In step an interactive application is executed and loaded into a memory e.g. the memory of the computer . In step the memory manager allocates space for pages required by the interactive applications e.g. the memory manager allocates page space for the interactive application . In step a determination is made as to whether the interactive application is idle or presently unused e.g. the user is not actively engaged with the interactive application . If the interactive application is actively being used option No the method returns to step where the user continues to use the interactive application and access the pages established by the memory manager for the interactive application . If the interactive application is idle option Yes the method proceeds to step . At step the method executes the prioritization module operation as shown.

In step the first task for the prioritization module operation is the identification of an idle interactive application e.g. the interactive application . Then at step the memory manager will identify and enumerate executable and data pages that are associated with active use of the now idle interactive application e.g. the established executable and data pages or working set from step . The user can profile the paging characteristics of the interactive application over various sampling schemes such as during periods of activity or at regular intervals over the entire lifetime of a typical application session .

Next at step the prioritization module in conjunction with the memory manager prevents one or more of the identified pages from paging out. In one embodiment the identified pages are prioritized to indicate that the identified pages are least likely to be paged out by the memory manager . In another embodiment the identified pages are prioritized by modifying page table entries related to the identified pages e.g. using the memory manager as described herein . In yet another embodiment the identified pages are prioritized by injecting a user mode thread into a virtual address space of the interactive application where the user mode thread periodically accesses the identified pages. Accordingly the memory manager views the pages as fresh and will not page out the fresh pages.

At step a determination is made as to whether use of the interactive application has recurred. The computer will wait option No and allow background or idle processing to occur e.g. by the background idle process if the interactive application remains idle e.g. use of the interactive application has not recurred . At step if use of the interactive application recurs the prioritization module will return the modified identified pages e.g. pages that were protected from paging out to their original paging state. For example the access bit the dirty bit and any other information used to describe each of the identified pages within each page table entry will return to the original settings or markings in place before the completion of step by the prioritization module . Since the identified pages have been prevented from being paged out e.g. prioritized and are still resident in the memory the identified pages may be loaded spontaneously. Thus sluggishness normally attributed to the subsequent paging in of any of the identified pages upon recurrence of use of the interactive application is lessened if not eliminated.

According to one embodiment the method selects a first option and proceeds to step . At step the pages are periodically accessed to avoid being paged out Thus the pages would appear to be important and or fresh to the cache manager and not be paged out. Then the method proceeds to step where the method returns to step in the method .

According to another embodiment the method selects a second option and proceeds to step . At step the identified pages are locked in order to prevent the identified pages from being paged out. Alternatively the identified pages could be marked as non pageable. Both may be achieved using an Application Programming Interface API designed to manipulate the data and executable pages. Then the method proceeds to step where the method returns to step in the method .

According to yet another embodiment the method selects a third option and proceeds to step . At step a user mode thread is injected into the virtual address space of the interactive application . The identified pages are accessed from within the virtual address space of the interactive application . Accordingly the user mode thread prioritizes the identified pages by periodically accessing the identified pages. Then the method proceeds to step where the method returns to step in the method .

Alternatively the method selects a fourth option and proceeds to step . At step a page fault handler e.g. associated with the memory manager and or the operating system is hooked to modify the paging scheme and prioritize the pages associated with the interactive application . In one embodiment the hooked page fault handler may issue a page fault when a page cannot be accessed because the page is either invalid or not present in local memory. Then instead of swapping any of the identified pages e.g. lowest priority or least recently used page with a page from a disk drive during the page fault the prioritization module prevents the page fault handler from paging out the identified page. In one embodiment the page fault handler pages out another page that is not associated with the interactive application . Then the method proceeds to step where the method returns to step in the method .

In one embodiment the method selects a fifth option and proceeds to step . At step the memory manager is accessed to traverse the page table at step . In one embodiment the prioritization module cooperates with the memory manager to modify the page table entries related to the identified pages to reduce the likelihood that the identified paged will be paged out. At step the memory manager marks the identified pages as accessed by altering the access bit of the related page table entries. At step if the page has the accessed bit set then the memory manager clears the bit but does not remove the page from the working set e.g. the page remains valid . Then the method proceeds to step where the method returns to step in the method .

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

