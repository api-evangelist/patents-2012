---

title: Incremental speech recognition for dialog systems
abstract: A system and method for integrating incremental speech recognition in dialog systems. An example system configured to practice the method receives incremental speech recognition results of user speech as part of a dialog with a user, and copies a dialog manager operating on the user speech to generate temporary instances of the dialog manager. Then the system evaluates actions the temporary instances of the dialog manager would take based on the incremental speech recognition results, and identifies an action that would advance the dialog and a corresponding temporary instance of the dialog manager. The system can then execute the action in the dialog and optionally replace the dialog manager with the corresponding temporary instance of the dialog manager. The action can include making a turn-taking decision in the dialog, such as whether, what, and when to speak or whether to be silent.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015048&OS=09015048&RS=09015048
owner: Oregon Health and Science University
number: 09015048
owner_city: Portland
owner_country: US
publication_date: 20121130
---
The present disclosure relates to dialog management and more specifically to incorporating incremental speech recognition output into a dialog management system.

Speech can provide a natural human machine interface. Speech interaction rely on turn taking behavior. Appropriate turn taking is difficult for spoken dialog systems. Some speech interface systems use a straightforward approach to turn taking. The dialog system plays a prompt and upon detecting any user speech the dialog system switches off the prompt and waits to reply until the user stops speaking. This simplistic approach starts and stops the system prompt mechanically without considering what the user is saying. Turn taking errors are a common cause of failed interactions with spoken dialog systems.

Incremental speech recognition can enable the dialog system to reason about what the user has said while the user is still speaking. However the partial speech recognition results are often unstable and highly inaccurate. Instability refers to the tendency of the partial recognition result to revise itself as more speech is decoded. For example traveling from would be a revision of traveling to . Inaccuracy refers to partial recognition that is sometimes semantically incomplete and may not reflect what the user intends to say. Conventional dialog management systems cannot handle revisions as the dialog state transitions following the system s reaction to the utterance which leads to low recognition accuracy and improper turn taking.

A system method and non transitory computer readable media are disclosed that integrate incremental speech recognition results into turn based spoken dialog. Incremental speech recognition refers to returning partial or complete recognition results while audio is still being decoded. Integrating incremental speech recognition can advance the turn taking behavior of spoken dialog systems where turn taking refers to the system s decision of when to speak and when to be silent. When making turn taking decisions current systems only consider when the user is speaking Incremental speech recognition can enable spoken dialog systems to consider also what the user is saying.

Effective integration of incremental speech recognition with dialog management can be accomplished without restructuring and redesigning spoken dialog systems. Further the semantic accuracy of partial results can be improved to achieve more successful spoken dialog interactions. The approaches set forth herein include new types of dialog mangers known as Incremental Interaction or Dialog Managers or augmented dialog managers. Incremental or augmented dialog managers can provide the turn taking benefits of incremental speech recognition while maintaining the simplicity of existing dialog system designs and therefore avoiding the significant complexity of systems designed specifically to accept incremental input. Such dialog managers can handle revisions gracefully especially when the dialog system has already started reacting to partial recognition result.

Incremental interaction or dialog managers IIMs can handle partial speech recognition inputs which may be unstable and change as additional speech is decoded. The IIM enables the addition of incremental input support to an existing conventional dialog manager thus transforming the existing dialog manager in to an incremental interaction or dialog manager. Changes in partial speech recognition results are called revisions. Incremental interaction or dialog managers can enable the use of incremental speech recognition with any conventional turn based dialog system. Thus the majority of the turn taking benefits of incremental speech recognition can be achieved without adjustments to existing dialog systems.

The incremental interaction or dialog manager IIM can manage communication between the recognizer SLU components and the dialog manager. In another embodiment incremental speech recognition is integrated with a Partially Observable Markov Decision Process POMDP based dialog manager. A POMDP dialog manager keeps a probability distribution over user states and allows a number of current and past dialog and recognition features to be used when considering the meaning of a recognition result. Combining a POMDP dialog system with incremental speech recognition can substantially increase recognition accuracy. Incremental speech recognition integration can reduce customer care costs when spoken dialog systems are employed to handle all or part of customer service calls. Further better turn taking can yield faster interactions in which users are less likely to abandon automation so potential cost savings can be coupled with an increase in customer satisfaction. Integrating incremental speech recognition with spoken dialog managers can enhance turn taking for virtually any interactive spoken dialog system such as a voice activated remote control for a television in car applications such as driving directions safer hands free text message handling and mobile voice search on mobile platforms.

The approaches set forth herein include integrating incremental speech recognition and SLU with conventional dialog systems and leveraging available dialog context to increase partial recognition accuracy. A POMDP based dialog manager is one example of a dialog manager that can leverage and incorporate context. The IIM speculatively advances the dialog manager to obtain a potential action for a partial result and can revert this advancement if the potential action is rejected. In one embodiment the IIM creates a temporary copy or a logical copy of a currently active state of the dialog manager to which it provides a partial result and obtains a potential action. An actual copy copies all the bytes of the dialog manager state whereas with a logical copy the system behaves as if a copy is made but only actually copies those parts that cannot be shared between the original and the temporary copy. If the action does not meet the criteria the IIM rejects the action and discards the temporary copy of the dialog manager. If the action meets the criteria then the IIM executes the action.

An incremental result that triggers a new action may be revised. When a revision is received the IIM can create a second copy of the original dialog manager and pass the new partial result to that second copy. If that second copy takes an action that advances the dialog and is different from the action generated by the first copy then the IIM terminates the first action and discards the first copy of the dialog manager. Then the IIM starts the second action and the second copy assumes the position held by the first copy. Any additional revisions to the incremental result can be handled by following the same procedure so that a current revision that advances the dialog and is different from the action of the previous revision replaces the previous version. Once recognition is complete the IIM discards the original dialog manager and installs the copied dialog manager.

Many partial results can be discarded before passing them to the original or the copied instance of the dialog manager. In one embodiment only incremental results that could correspond to complete user turns are considered. The IIM can discard incomplete results which may never be passed to the dialog manager. In addition acting on partial incremental speech recognition results which are unstable and likely to be revised can reduce efficiency of the dialog manager. As a way to increase efficiency candidate results can be scored for stability and the IIM can reject candidate results with low stability scores.

In another embodiment incremental speech recognition is integrated with partially observable Markov decision process POMDP based dialog managers. A POMDP based dialog manager uses a probability distribution over multiple hidden dialog states called a belief state or a dialog state. A belief state may be more closely associated with a POMDP based dialog manager whereas a dialog state is a more generic term. As such a POMDP based dialog manager makes use of the entire N Best list of recognition results even for low confidence results. The confidence level of each N Best list item contributes proportionally to the probability of its corresponding hidden state. Each item on the N Best list of an incremental result is assigned a confidence score and passed to the dialog manager triggering a belief state update. A belief state generated from an incremental speech recognition result incorporates all or part of the contextual information available to the system from the beginning of the dialog. If the probability models in the POMDP are accurate belief states reflecting this lengthier context are more accurate than incremental results in isolation.

One benefit of integrating incremental speech recognition with dialog systems is improved turn taking decisions without restructuring the entire dialog management architecture. Further partial recognition accuracy can be increased by using POMDP based dialog managers. Proper turn taking is important functionality for multi modal applications on mobile devices such as smartphones GPS units laptops home automation systems security systems and tablet computing devices. For example consider a driver speaking with a speech enabled driving directions application running on a GPS device or smartphone. The dialog manager copes with constant but varied background noise side conversations among passengers and the driver pausing mid utterance while speaking to focus on an important driving maneuver. Even with a push to talk interface determining when the driver has started and finished speaking is crucial. Voice enabled remote controls can encounter difficulty in busy family rooms multi modal search applications used in noisy public spaces and other services. Numerous speech applications can benefit from graceful handling of turn taking.

These and various additional embodiments of the disclosure are described in detail below. While specific implementations are described it should be understood that this is done for illustration purposes only. Other components and configurations may be used without parting from the spirit and scope of the disclosure. A brief introductory description of a basic general purpose system or computing device in which can be employed to practice the concepts is disclosed herein. A more detailed description of the improved MAC will then follow. The disclosure now turns to .

With reference to an exemplary system includes a general purpose computing device including a processing unit CPU or processor and a system bus that couples various system components including the system memory such as read only memory ROM and random access memory RAM to the processor . The system can include a cache of high speed memory connected directly with in close proximity to or integrated as part of the processor . The system copies data from the memory and or the storage device to the cache for quick access by the processor . In this way the cache provides a performance boost that avoids processor delays while waiting for data. These and other modules can control or be configured to control the processor to perform various actions. Other system memory may be available for use as well. The memory can include multiple different types of memory with different performance characteristics. It can be appreciated that the disclosure may operate on a computing device with more than one processor or on a group or cluster of computing devices networked together to provide greater processing capability. The processor can include any general purpose processor and a hardware module or software module such as module module and module stored in storage device configured to control the processor as well as a special purpose processor where software instructions are incorporated into the actual processor design. The processor may essentially be a completely self contained computing system containing multiple cores or processors a bus memory controller cache etc. A multi core processor may be symmetric or asymmetric.

The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. A basic input output BIOS stored in ROM or the like may provide the basic routine that helps to transfer information between elements within the computing device such as during start up. The computing device further includes storage devices such as a hard disk drive a magnetic disk drive an optical disk drive tape drive or the like. The storage device can include software modules for controlling the processor . Other hardware or software modules are contemplated. The storage device is connected to the system bus by a drive interface. The drives and the associated computer readable storage media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computing device . In one aspect a hardware module that performs a particular function includes the software component stored in a non transitory computer readable medium in connection with the necessary hardware components such as the processor bus display and so forth to carry out the function. In another aspect the system can use a processor and computer readable storage medium to store instructions which when executed by the processor cause the processor to perform a method or other specific actions. The basic components and appropriate variations are contemplated depending on the type of device such as whether the device is a small handheld computing device a desktop computer or a computer server.

Although the exemplary embodiment described herein employs the hard disk other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards digital versatile disks cartridges random access memories RAMs read only memory ROM a cable or wireless signal containing a bit stream and the like may also be used in the exemplary operating environment. Non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

To enable user interaction with the computing device an input device represents any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems enable a user to provide multiple types of input to communicate with the computing device . The communications interface generally governs and manages the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

For clarity of explanation the illustrative system embodiment is presented as including individual functional blocks including functional blocks labeled as a processor or processor . The functions these blocks represent may be provided through the use of either shared or dedicated hardware including but not limited to hardware capable of executing software and hardware such as a processor that is purpose built to operate as an equivalent to software executing on a general purpose processor. For example the functions of one or more processors presented in may be provided by a single shared processor or multiple processors. Use of the term processor should not be construed to refer exclusively to hardware capable of executing software. Illustrative embodiments may include microprocessor and or digital signal processor DSP hardware read only memory ROM for storing software performing the operations described below and random access memory RAM for storing results. Very large scale integration VLSI hardware embodiments as well as custom VLSI circuitry in combination with a general purpose DSP circuit may also be provided.

The logical operations of the various embodiments are implemented as 1 a sequence of computer implemented steps operations or procedures running on a programmable circuit within a general use computer 2 a sequence of computer implemented steps operations or procedures running on a specific use programmable circuit and or 3 interconnected machine modules or program engines within the programmable circuits. The system shown in can practice all or part of the recited methods can be a part of the recited systems and or can operate according to instructions in the recited non transitory computer readable storage media. Such logical operations can be implemented as modules configured to control the processor to perform particular functions according to the programming of the module. For example illustrates three modules Mod Mod and Mod which are modules configured to control the processor . These modules may be stored on the storage device and loaded into RAM or memory at runtime or may be stored in other computer readable memory locations.

The IASR module analyzes speech input and provides incremental speech recognition results such as incremental textual transcriptions of the speech input as output. The IASR module can generate the incremental textual transcriptions on a periodic basis such as every milliseconds or when a threshold amount of additional speech has been received. SLU module can receive the transcribed input and can use a natural language understanding model to analyze the group of words that are included in the transcribed input to derive a meaning from the input. The role of the DM module is to interact in a natural way including deciding whether and when to take a dialog turn and help the user to achieve the task that the system is designed to support. The DM module receives the meaning of the speech input from the SLU module and determines an action such as for example providing a response based on the input. The SLG module generates a transcription of one or more words in response to the action provided by the DM . The synthesizing module receives the transcription as input and provides generated audible speech as output based on the transcribed speech.

Thus the modules of system recognize speech input such as speech utterances transcribe the speech input identify or understand the meaning of the transcribed speech determine an appropriate response to the speech input generate text of the appropriate response and from that text generate audible speech from system which the user then hears. In this manner the user can carry on a natural language dialog with system . Those of ordinary skill in the art will understand the programming languages for generating and training IASR module or any of the other modules in the spoken dialog system. Further the modules of system can operate independent of a full dialog system. For example a computing device such as a smartphone or any processing device having a phone capability can include an IASR module wherein a user says call mom and the smartphone acts on the instruction without a spoken dialog. IIM can interact with any of the other modules of the system at any point or at multiple points such as the SLU processing partial results from IASR and providing results to IIM . Further all or part of the functionality of IIM as described herein can be incorporated in one or more other modules of the system . In one embodiment IIM is offered as a service such as via a network or via the Internet which is performed on a remote computer for the system. Thus any network enabled existing spoken dialog system can communicate with a network based IIM service via an application programming interface API so that the spoken dialog system can rely on computing tasks which are executed elsewhere to process the incremental automatic speech recognition results efficiently.

IIM can gracefully handle revisions following a premature action execution and a copying procedure is a viable solution for any DM . When a revision or incremental speech recognition result is received the DM duplicator makes a second copy of the original DM and the new ISR result is passed to that second copy. If that second copy takes an action that advances the dialog and is different from the action generated by the first copy then the first action is terminated the first copy of the DM is discarded the second action is initiated and the second copy assumes the position of the first copy. Additional revisions can be handled by following the same procedure. Terminating a speech action and immediately starting another speech action can be jarring to a user. For example if the system responds to a user saying Boston with the prompt Ok Austin. Ok Boston the user may feel that he or she is rudely interrupted. The jarring effect on users can be mitigated by preceding actions with either a sound or simple silence at the expense of some response delay resulting in the prompt Ok Boston . Once recognition is complete the copied DM is installed as the new original DM or as a replacement for the original DM .

As an optimization for efficiency some ISR results can be discarded before passing them to the DM . For example only incremental results that could correspond to complete user utterance can be considered. Incomplete results can be discarded and never passed to the DM . In addition ISR results which are unstable and thus undesirable because of the high likelihood of revision can be discarded when the instability of the results exceeds a particular threshold. Thus each candidate ISR result can be scored for stability so that IIM discards results with scores below a threshold.

Table 1 above shows example ISR results from an incremental automatic speech recognizer the IIM and the DM . For the sake of clarity stability scores are not shown. The system asks Where are you leaving from and the user answers Mckeesport Center. IIM receives five incremental speech recognition results called partials rejecting the first yew because its stability score not shown is too low. With the second ridge IIM copies the DM passes ridge to the copy and discards the action of the copied DM which is itself also discarded because it does not advance the dialog. IIM accepts and begins to execute the action generated by the third partial mckee. The fourth partial revises the action and the fifth action is rejected since it is the same. The original DM is then discarded and the copied DM state is put in its place. IIM enables a turn based DM to enjoy many of the benefits of incremental speech recognition in particular the ability to make turn taking decisions with a complete account of the dialog history.

The system evaluates actions the temporary instances of the dialog manager would take based on the incremental speech recognition results . In one variation the system starts up the temporary instances and processes the incremental speech recognition results using the temporary instances to determine their outputs. The temporary instances can execute in a scratch space in a virtual machine or some other location possibly on one or more separate computing devices. The temporary instances can execute on the system that runs the dialog manager or on a separate device. As one way to increase efficiency of evaluating these actions the system can discard temporary instances of the dialog manager that do not sufficiently advance the dialog. In another variation the system discards incremental speech recognition results that do not correspond to a complete user utterance. Further the system can receive a stability score for each incremental speech recognition result and discard incremental speech recognition results having a corresponding stability score below a threshold. The system can increase efficiency by identifying temporary instances of the dialog manager that can be culled from consideration and removing them before significant resources are expended to analyze or process them. Thus an initial round of testing using algorithms or approaches that require a smaller amount of CPU power or RAM may be used to decide which to discard and which to keep then a more CPU intensive analysis or processing can be applied to the instances that remain.

The system identifies an action that would advance the dialog and a corresponding temporary instance of the dialog manager and executes the action in the dialog . For example executing the action can include making a turn taking decision in the dialog such as whether to speak or be silent. Instead of speaking the system can alternatively decide whether to execute some other non speech type of action such as displaying a graphical prompt to the user. Executing the action can include determining what response to prepare in answer to the user s current utterance and providing the spoken response to the user in the dialog. As part of the action or prior to executing the action the system can optionally replace the dialog manager with the corresponding temporary instance of the dialog manager.

In a slightly different variation the system receives an incremental speech recognition result of user speech as part of a dialog with a user and copies a dialog manager operating on the user speech to generate a temporary dialog manager. The system evaluates an action of the temporary dialog manager based on the incremental speech recognition result. When the system determines that the action would advance the dialog and that the action is different than an existing action of the dialog manager the system can execute the action in the dialog and replace the dialog manager with the temporary dialog manager.

Then the system can update a belief state associated with the dialog based on the respective confidence scores and the incremental speech results and further based on an assumption that the incremental speech results are complete . The system can also advance the dialog based on the belief state such as by executing in the dialog an action associated with the belief state. The system can update the belief state by copying the dialog manager operating to generate temporary instances of the dialog manager evaluating actions the temporary instances of the dialog manager would take based on the incremental speech recognition results and updating the belief state based on the actions evaluated.

This approach integrates incremental speech recognition into a conventional dialog system and increase the accuracy of the partial results. The IIM operates by supporting the production of speculative dialog actions by the dialog manager. The combination of incremental speech recognition with POMDPs facilitated by the IIM can increase the accuracy of partial results by leveraging additional available contextual information up to and including all available contextual information.

While the examples provided herein primarily discuss speech processing these principles can be applied to one or more other input modalities with any respective modifications to accommodate processing of the other input modalities. For example the system can receive an N best list of recognition results for gesture input touchscreen input pen or electronic ink input and so forth. The dialog manager can manage speech non speech or mixed modality dialogs with one or more users by boosting the recognition accuracy of a dialog turn using the entire dialog context.

Embodiments within the scope of the present disclosure may also include tangible and or non transitory computer readable storage media for carrying or having computer executable instructions or data structures stored thereon. Tangible computer readable media can exclude transitory signals. Such non transitory computer readable storage media can be any available media that can be accessed by a general purpose or special purpose computer including the functional design of any special purpose processor as described above. By way of example and not limitation such non transitory computer readable media can include RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to carry or store desired program code means in the form of computer executable instructions data structures or processor chip design. When information is transferred or provided over a network or another communications connection either hardwired wireless or combination thereof to a computer the computer properly views the connection as a computer readable medium. Thus any such connection is properly termed a computer readable medium. Combinations of the above should also be included within the scope of the computer readable media.

Computer executable instructions include for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Computer executable instructions also include program modules that are executed by computers in stand alone or network environments. Generally program modules include routines programs components data structures objects and the functions inherent in the design of special purpose processors etc. that perform particular tasks or implement particular abstract data types. Computer executable instructions associated data structures and program modules represent examples of the program code means for executing steps of the methods disclosed herein. The particular sequence of such executable instructions or associated data structures represents examples of corresponding acts for implementing the functions described in such steps.

Other embodiments of the disclosure may be practiced in network computing environments with many types of computer system configurations including personal computers hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers and the like. Embodiments may also be practiced in distributed computing environments where tasks are performed by local and remote processing devices that are linked either by hardwired links wireless links or by a combination thereof through a communications network. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

The various embodiments described above are provided by way of illustration only and should not be construed to limit the scope of the disclosure. For example the principles herein can be applied to any speech application which involves a dialog manager. Various modifications and changes that may be made to the principles described herein without following the example embodiments and applications illustrated and described herein and without departing from the spirit and scope of the disclosure.

