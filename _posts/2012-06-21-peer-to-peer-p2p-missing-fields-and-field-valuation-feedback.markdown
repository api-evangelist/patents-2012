---

title: Peer to peer (P2P) missing fields and field valuation feedback
abstract: Methods, systems, and apparatus for processing data, and more specifically to retrieving results for a query from one or more devices coupled to a network. A first device may receive an abstract query including logical fields defined by a first data abstraction model and retrieve query results stored in the first device. The query may be sent to one or more other devices via the network. The one or more other devices may be configured to convert the abstract query to local abstract queries including logical fields defined in local data abstraction models. The local queries may be issued against local databases to retrieve additional results for the query. The local queries may not include all the fields of the abstract query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08713041&OS=08713041&RS=08713041
owner: International Business Machines Corporation
number: 08713041
owner_city: Armonk
owner_country: US
publication_date: 20120621
---
This application is a continuation of co pending U.S. patent application Ser. No. 12 767 497 filed Apr. 26 2010. The aforementioned related patent application is herein incorporated by reference in its entirety.

The present invention is generally related to data processing and more specifically to retrieving data from a database.

Databases are computerized information storage and retrieval systems. A relational database management system is a computer database management system DBMS that uses relational techniques for storing and retrieving data. The most prevalent type of database is the relational database a tabular database in which data is defined so that it can be reorganized and accessed in a number of different ways. A distributed database is one that can be dispersed or replicated among different points in a network. An object oriented programming database is one that is congruent with the data defined in object classes and subclasses.

Regardless of the particular architecture in a DBMS a requesting entity e.g. an application or the operating system demands access to a specified database by issuing a database access request. Such requests may include for instance simple catalog lookup requests or transactions and combinations of transactions that operate to read change and add specified records in the database. These requests are made using high level query languages such as the Structured Query Language SQL and application programming interfaces API s such as Java Database Connectivity JDBC . The term query denominates a set of commands for retrieving data from a stored database. Queries take the form of a command language such as SQL that lets programmers and programs select insert update find the location of data and so forth.

Any requesting entity including applications operating systems and at the highest level users can issue queries against data in a database. Queries may be predefined i.e. hard coded as part of an application or may be generated in response to input e.g. user input . Upon execution of a query against a database a query result is returned to the requesting entity.

The present invention is generally related to data processing and more specifically to retrieving data from a database.

One embodiment of the invention provides a method for retrieving query results. The method generally comprises receiving a first abstract query comprising one or more logical fields defined by a first data abstraction model comprising a plurality of first logical field definitions mapped to physical fields of a first database in a first device wherein one or more of the first logical fields definitions associate respective first logical fields to respective concepts of a predefined set of concepts the concepts being standardized metadata. For each of the one or more logical fields of the first abstract query the method comprises determining whether a second data abstraction model comprises a logical field associated with a concept associated with the respective logical field of the abstract query wherein the second data abstraction model comprises a plurality of second logical field definitions mapping the second logical fields to physical fields of a second database in a second device wherein one or more of the second logical fields definitions associate respective second logical fields to respective concepts of the predefined set of concepts. The method further comprises modifying the abstract query to remove the respective logical field from the first abstract query upon determining that the second data abstraction model does not comprise the logical field associated with the concept associated with the respective logical field of the abstract query.

Another embodiment of the invention provides a computer readable storage medium comprising a program product which when executed is configured to perform an operation for retrieving query results. The operation generally comprises receiving a first abstract query comprising one or more logical fields defined by a first data abstraction model comprising a plurality of first logical field definitions mapped to physical fields of a first database in a first device wherein one or more of the first logical fields definitions associate respective first logical fields to respective concepts of a predefined set of concepts the concepts being standardized metadata. For each of the one or more logical fields of the first abstract query the operation further comprises determining whether a second data abstraction model comprises a logical field associated with a concept associated with the respective logical field of the abstract query wherein the second data abstraction model comprises a plurality of second logical field definitions mapping the second logical fields to physical fields of a second database in a second device wherein one or more of the second logical fields definitions associate respective second logical fields to respective concepts of the predefined set of concepts. The operation also comprises modifying the abstract query to remove the respective logical field from the first abstract query upon determining that the second data abstraction model does not comprise the logical field associated with the concept associated with the respective logical field of the abstract query.

Yet another embodiment of the invention provides a system comprising a plurality of devices coupled via a network. Each device is generally configured to receive a first abstract query comprising one or more logical fields defined by a first data abstraction model comprising a plurality of first logical field definitions mapped to physical fields of a first database in another device wherein one or more of the first logical fields definitions associate respective first logical fields to respective concepts of a predefined set of concepts the concepts being standardized metadata. For each of the one or more logical fields of the first abstract query each device is configured to determine whether a second data abstraction model comprises a logical field associated with a concept associated with the respective logical field of the abstract query wherein the second data abstraction model comprises a plurality of second logical field definitions mapping the second logical fields to physical fields of a second database wherein one or more of the second logical fields definitions associate respective second logical fields to respective concepts of the predefined set of concepts. Each device is also configured to modify the abstract query to remove the respective logical field from the first abstract query upon determining that the second data abstraction model does not comprise the logical field associated with the concept associated with the respective logical field of the abstract query.

Embodiments of the invention are generally related to data processing and more specifically to retrieving results for a query from one or more devices coupled to a network. A first device may receive an abstract query including logical fields defined by a first data abstraction model and retrieve query results stored in the first device. The query may be sent to one or more other devices via the network. The one or more other devices may be configured to convert the abstract query to local abstract queries including logical fields defined in local data abstraction models. The local queries may be issued against local databases to retrieve additional results for the query. The local queries may not include all the fields of the abstract query.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Each of the servers may be coupled with each other via a network . Like network network may also be any one of may be any one or a local area network LAN a wide area network WAN and or the Internet. In a particular embodiment of the invention the network may be a peer to peer network. A peer to peer network is defined herein as any network comprising two or more interconnected devices that are configured to share their respective data resources and the like. The devices associated with network may be coupled in any reasonable manner whether known or unknown to form any type of P2P network. Exemplary P2P network types include centralized P2P network decentralized P2P network structured P2P network unstructured P2P network hybrid P2P network and the like.

Regardless of the type of P2P network generally any server connected to the P2P network may be configured to independently collect store analyze and modify data. Furthermore the data stored on any server may be transferred to any other server via the network . For example in one embodiment each server may be configured to issue queries to one or more other servers via the network to retrieve desired data.

While two separate networks and are illustrated in in alternative embodiments client computers and the servers may be coupled to the same network for example the Internet.

In one embodiment of the invention in response to receiving a query from the client computer server may be configured to retrieve query results that are stored therein. The server may also be configured to transfer the query to one or more other servers via the network retrieve further query results stored in the one or more other server and provide the query results to the client computer . Retrieving query results from one or more servers coupled with the P2P network is described in greater detail below.

The network interface device may be any entry exit device configured to allow network communications between the client computers and server via the network . For example the network interface device may be a network adapter or other network interface card NIC .

Storage is preferably a Direct Access Storage Device DASD . Although it is shown as a single unit it could be a combination of fixed and or removable storage devices such as fixed disc drives floppy disc drives tape drives removable memory cards or optical storage. The memory and storage could be part of one virtual address space spanning multiple primary and secondary storage devices.

The memory is preferably a random access memory sufficiently large to hold the necessary programming and data structures of the invention. While memory is shown as a single entity it should be understood that memory may in fact comprise a plurality of modules and that memory may exist at multiple levels from high speed registers and caches to lower speed but larger DRAM chips.

Illustratively the memory contains an operating system . Illustrative operating systems which may be used to advantage include Linux Linux is a trademark of Linus Torvalds in the US other countries or both and Microsoft s Windows . More generally any operating system supporting the functions disclosed herein may be used.

Memory is also shown containing a query program which when executed by CPU provides support for issuing queries to server . In one embodiment the query program may include a web based Graphical User Interface GUI which allows the user to display Hyper Text Markup Language HTML information. The GUI may be configured to allow a user to create a query issue the query against a server and display the results of the query. More generally however the query program may be a GUI based program capable of rendering any information transferred between the client computer and the server .

The server may be physically arranged in a manner similar to the client computer . Accordingly the server is shown generally comprising a CPU memory and a storage device coupled with one another by a bus . Memory may be a random access memory sufficiently large to hold the necessary programming and data structures that are located on server .

The server may generally be under the control of an operating system shown residing in memory . Examples of the operating system include IBM OS 400 UNIX Microsoft Windows Linux and the like. More generally any operating system capable of supporting the functions described herein may be used.

The memory may further include one or more applications and an abstract query interface . The applications and the abstract query interface may be software products comprising a plurality of instructions that are resident at various times in various memory and storage devices in the computer system . When read and executed by a processor in the server the applications and the abstract query interface cause the computer system to perform the steps necessary to execute steps or elements embodying the various aspects of the invention.

The applications and more generally any requesting entity including the operating system may be configured to issue queries against a database shown in storage . The database is representative of any collection of data regardless of the particular physical representation. By way of illustration the database may be organized according to a relational schema accessible by SQL queries or according to an XML schema accessible by XML queries . However the invention is not limited to a particular schema and contemplates extension to schemas presently unknown. As used herein the term schema generically refers to a particular arrangement of data.

In one embodiment the queries issued by the applications are defined according to an application query specification included with each application . The queries issued by the applications may be predefined i.e. hard coded as part of the applications or may be generated in response to input e.g. user input . In either case the queries referred to herein as abstract queries are composed using logical fields defined by the abstract query interface . In particular the logical fields used in the abstract queries are defined by a data abstraction model of the abstract query interface . The abstract queries are executed by a runtime component which transforms the abstract queries into a form consistent with the physical representation of the data contained in the database . The application query specification and the abstract query interface are further described with reference to .

The applications may also include a query manager program . Query manager may be configured to receive a query from a client computer or an application receive results for the query and provide the query results to the requesting client computer or application . In one embodiment of the invention retrieving query results may involve retrieving query results from the database as described above. In some embodiments the query manager may be configured to transfer a received query to one or more other servers via the P2P network and retrieve query results from the one or more other servers as will be discussed in greater detail below.

The logical fields specified by the application query specification and used to compose the abstract query may be defined by the data abstraction model . In general the data abstraction model may expose information as a set of logical fields that may be used within a query e.g. the abstract query issued by the application to specify criteria for data selection and specify the form of result data returned from a query operation. The logical fields may be defined independently of the underlying data representation being used in the database thereby allowing queries to be formed that are loosely coupled to the underlying data representation. Abstract queries are described in greater detail in co pending U.S. patent application Ser. No. 11 226 181 entitled IMPROVED APPLICATION PORTABILITY AND EXTENSIBILITY THROUGH DATABASE SCHEMA AND QUERY ABSTRACTION filed Sep. 14 2005 which is incorporated herein by reference in its entirety.

The access methods may associate logical field names to a particular physical data representation See in a database . By way of illustration two data representations are shown in an XML data representation and a relational data representation . However the physical data representation indicates that any other data representation known or unknown is contemplated. In one embodiment a single data abstraction model may contain field specifications with associated access methods for two or more physical data representations . In an alternative embodiment a separate data abstraction model may be provided for each separate data representation .

Any number of access method types is contemplated depending upon the number of different types of logical fields to be supported. In one embodiment access methods for simple fields filtered fields and composed fields are provided. For example field specifications for Field A exemplify a simple field access method . Simple fields are mapped directly to a particular entity in the underlying physical data representation e.g. a field mapped to a given database table and column . By way of illustration the simple field access method shown in maps the logical field name LastName to a column named 1 name in a table named Test Table as illustrated.

The field specification for Field X exemplifies a filtered field access method . Filtered fields identify an associated physical entity and provide rules used to define a particular subset of items within the physical data representation. For example the filtered field access method may map the logical field name to a physical entity in a column named TestVal in a table named Test Table and may define a filter for the test values. For example in one embodiment the filter may define a numerical range in which the test values may be deemed valid.

A composed field access method may also be provided to compute a logical field from one or more physical fields using an expression supplied as part of the access method definition. In this way information which does not exist in the underlying data representation may be computed. For example a sales tax field may be composed by multiplying a sales price field by a sales tax rate.

It is contemplated that the formats for any given data type e.g. dates decimal numbers etc. of the underlying data may vary. Accordingly in one embodiment the field specifications may include a type attribute which reflects the format of the underlying data. However in another embodiment the data format of the field specifications is different from the associated underlying physical data in which case an access method is responsible for returning data in the proper format assumed by the requesting entity.

Thus the access method must know what format of data is assumed i.e. according to the logical field as well as the actual format of the underlying physical data. The access method may then convert the underlying physical data into the format of the logical field. By way of example the field specifications of the data abstraction model shown in are representative of logical fields mapped to data represented in the relational data representation . However other instances of the data abstraction model map logical fields to other physical data representations such as XML.

Each field of the data abstraction model may also include a concept code . For example the concept code for field may be as illustrated in . Concept code may associate a respective field to a predefined universal concept. For example field illustrated in is associated with a column containing last names. Accordingly field is titled Last Name and associated with the column 1 name in the table Test Table . However the concept last name may have several synonyms. For example in some systems last names may be identified as a surnames or family names . The concept code may provide a means for identifying a universal concept regardless of how it is specifically labeled in a given system. Accordingly concept codes may also be referred to herein as entity resolution attributes in that these attributes are applied to resolve one local field definition for a first data abstraction model to another local field definition for a second data abstraction model on the basis of a standardized field definition.

For example referring to the data abstraction model in server may have a logical field named Last Name and the data abstraction model in server may have a logical field named Family Name . The concept code for the field Last Name in server and the concept code for the field Family Name in server may both be because they both refer to the same concept.

While a numerical concept code is illustrated in in alternative embodiments any combination of alphabets numbers words phrases symbols and the like may be used to define concept codes. In one embodiment of the invention the concept code may be derived from a recognized universal vocabulary such as for example a standardized industry specific vocabulary. Exemplary standardized universal vocabularies may include among others UMLS Universal Medical Language System MeSH Medical Subject Headings SnoMed Systematic Nomenclature of Medicine and the like.

Furthermore while standardized universal vocabularies are described herein with reference to concept codes in alternative embodiments the concept codes may be generated for internal use by groups of individuals and or organizations. For example while working on a project one or more entities working on the project may agree upon a standardized set on concepts and respective concept codes for categorizing data. Thereafter each entity may then generate their own respective data abstraction models to store data related to their respective project tasks in their own respective server or system. The data abstraction model generated by each entity may be different. For example each entity may define its own logical fields in a respective data abstraction model which may be distinct from the logical fields defined by other entities. However the concept codes used to define fields in the respective data abstraction models may be derived from the agreed upon set of concept codes.

In one embodiment of the invention the concept codes may facilitate retrieving query results from a plurality of devices in a P2P network. illustrates another exemplary system according to an embodiment of the invention. System may be similar to system illustrated in and therefore may include at least one client computer and a plurality of servers for example servers coupled to each other via the P2P network . As illustrated in each of the servers may include a respective data abstraction model . The data abstraction models may define logical fields that may be used to compose abstract queries that may be issued against databases in respective servers 

In one embodiment of the invention the servers may be peer devices operated by entities working on a collaborative project. For example in a particular embodiment each of the servers may be associated with a respective university for storing research data. In alternative embodiments each of the servers may belong to a respective hospital or a department of a hospital wherein each server stores patient records medical research data and the like. More generally each of the servers may belong to one or more entities whether individuals or organizations that collect and store data in an independent and decentralized manner.

A decentralized approach to collecting and storing data may be advantageous because it may allow each entity to collect and store the data without being subject to each others data collection procedures data categorizations analysis and the like. Therefore the decentralized data collection and storing methods may facilitate a wide variety of entities to be seamlessly integrated into a collaborative project.

However the independent data collection and storage may also result in difficulties while sharing data between the entities. For example while performing research on a particular disease a hospital or university may desire data collected by one or more other hospitals and or universities to aid the research. However different categorization of data in each hospital or university server may make it difficult to retrieve such data. For example as described above the DAM may have a logical field named Last Name and DAM may have a logical field named Family Name . Furthermore the DAM may have a logical field named Surname . Therefore retrieving data related to last names from servers may require separate abstract queries to be written for each of the servers . Manually writing multiple abstract queries and combining the query results may be a tedious inefficient and error prone process.

In one embodiment of the invention the fields in the data abstraction models may have similar concepts but may have varying logical field definitions. Embodiments of the invention provide an automated method for retrieving query results from a plurality of servers coupled to a P2P network using concept codes in response to receiving a query. For example as illustrated in an abstract query may be sent from a client computer to server . Alternatively an application program of server see may generate an abstract query . The query may be received by the query manager of the server . Query manager may issue the abstract query against a database associated with server to retrieve at least some of the results of the query.

Furthermore the query manager may send the abstract query to one or more of the servers to request further results for the abstract query as illustrated in . For example in one embodiment the server may include a record including a list of the peer computers . Accordingly the query manager may be configured to access the record to determine peer computers prior to sending the abstract query to the peer servers . In one embodiment the query manager may send the abstract query to all known peers servers. Alternatively in some embodiment the query manager may send the abstract query to a subset of the known peers.

The abstract query may be received by each of query managers at the servers . Each of the query managers may convert the abstract query to a local abstract query based on concept codes as will be described in greater detail below. The query managers may issue the local abstract queries against respective databases associated with the servers to retrieve further results for the abstract query .

In one embodiment the query results from each of the servers may be transferred to the server via the P2P network as illustrated in . The query results from each of the servers may be received by the query manager . In one embodiment the query manager may combine the results received from the servers with the query results retrieved from the server and provide the results to a requesting client or application program . Alternatively the query manager may be configured to average and or normalize the set of results received from the server 

In some embodiments the abstract query may include one or more clauses that determine how query results are to be presented. For example in a particular embodiment the abstract query may include a sort clause that for example requires that query results be presented in an ascending or descending order in relation to a particular results field. Accordingly in some embodiments the query manager may be configured to perform one or more operations for example sorting on the combined result set prior to presenting the query results to a requesting entity. In some embodiments the query manager may be configured to provide source identification data of the query results to a requesting entity. For example the query manager may be configured to identify the particular server from which a particular query result is derived. The identification data may be displayed in an identification field that may be included in the query results.

In one embodiment of the invention the abstract query received by server from a client or an application program of server may include logical fields defined by the abstraction model of server . An exemplary abstract query is provided below 

The abstract query provided above may be configured to retrieve first names of individuals whose last name is Smith . Illustratively the fields First Name and Last Name may be logical fields defined by the data abstraction model of server

In one embodiment of the invention abstract query may be transferred to the one or more other servers by query manager along with concept codes associated with each logical field of the abstract query . In one embodiment the concept codes may be encoded into the abstract query . For example the query manager may transfer the concept codes for Last Name and First Name along with the abstract query provided above to the one or more other servers 

Upon receiving the abstract query from server each of the one or more query managers may be configured to convert the abstract query to a local abstract query based on the concept codes associated with each logical field of abstract query . For example the DAM of server may include the logical fields Family Name and Given Name . The concept codes associated with the logical fields Last Name and First Name of DAM of server may be the same as the concept codes associated with the logical fields Family Name and Given Name of DAM of server . Accordingly the query manager of server may be configured to generate the following local abstract query upon receiving the abstract query provided above 

Local abstract queries may be similarly generated at each of the servers receiving the abstract query to retrieve results. The results may then be transferred to the server via the network . Upon receiving the query results from the server and one or more other servers query program of server may provide the results to a requesting client computer or application .

In one embodiment of the invention providing the results to a requesting client computer or application may involve performing a union operation to combine results received from each server . However any other reasonable method of integrating results received from multiple sources for example concatenation may be also used. In alternative embodiments the results from each source may be provided separately for example in separate files or separated within a given results file. In one embodiment the results from each of the servers may be displayed in a GUI screen at the client computer .

In one embodiment of the invention the query manager of server may be configured to wait until results or other response are received from each of the one or more servers before providing the query results to the requesting client computer or application . In alternative embodiment query manager may wait for a predefined period of time to receive results. If the results are not received from all servers within the predefined period of time the query program may be configured to provide only results received within the predefined period of time.

For purposes of illustration only shows the query being sent from server to each of the servers . However more generally the query may be sent from any server to any one or more other servers coupled to the P2P network . For example each of the servers of may be configured to receive abstract queries from respective client computers or application programs and send the query to one or more other servers as described above. Furthermore in some embodiments the client computer may be directly coupled with the P2P network and configured to issue a query to one or more servers . Accordingly in some embodiments the client computer may include similar components as the servers for example a data abstraction model query manager and the like.

Furthermore while embodiments are described herein with respect to a client server model this model is merely used for purposes of illustration. Persons skilled in the art will recognize other communication paradigms all of which are contemplated as embodiments of the present invention. Indeed as pointed out above the server computers may in fact be related as peers rather than computers of in a client server paradigm. Further even assuming a client server model a given computer may behave as either a client or a server at different times depending on the context. As such the terms client and server are not to be taken as limiting.

As illustrated in an abstract query may be sent from the client computer to the server . Server may send the abstract query to server via the network as discussed above. The server may retrieve results for the abstract query for example by converting the abstract query to a local query as discussed above. In addition the query program of the server may transfer the query to one or more other peers and via the P2P network to retrieve further results for the query . For example server may include a record including a list of peer servers associated with the server . Accordingly query program may access the record to determine its peer servers and send the abstract query to one or more of the peers listed in the record.

The server may receive the results from the servers and via network and combine the results with results from the server before sending the results to the server via the network . In an alternative embodiment the server may transfer its own results to the server via network and then subsequently transfer the results from servers and to the server as they are received.

In some embodiments each of servers and may be coupled with one or more other networks not shown in . Accordingly the servers and may continue to send the query to respective peers via the one or more other networks such that the query cascades through multiple networks and multiple servers to retrieve a comprehensive and complete set of results fro the query .

The transfer of an abstract query from one server to one or more other servers over a network for example networks and is referred to herein as a network hop . In one embodiment of the invention a server or client initiating transfer of an abstract query to one or more other servers may be configured to define a maximum network hops for the abstract query. For example if the maximum hop for the query is set to the abstract query may only be sent from the server to the server via the network i.e. one network hop but may not be sent from the server to the servers and

In one embodiment the abstract query may include the maximum hop value encoded therein. Furthermore the abstract query may also include a current number of hops encoded therein. Each server may be configured to update the current hop value encoded in the abstract query before sending the abstract query to one or more other servers via a P2P network. If a server receives an abstract query wherein the maximum hop value is equal to the current hop value the server may not send the query to any further servers .

In some embodiments a server may be coupled with multiple P2P networks. Therefore it is possible that the server may receive the same query from each of the multiple P2P networks. However providing query results each time the abstract query is received may result in a requesting client computer or server receiving duplicate copies of the query results. Therefore in one embodiment of the invention the query may include a unique query ID encoded therein. Therefore if a server receives an abstract query having the same query ID as a previously received abstract query the server may simply ignore the abstract query or explicitly signal to the sending server that no action will be taken.

In step the query manager may issue the abstract query against a database associated with the first server and receive query results. In step the query manager may send the abstract query to one or more second servers via a network. The query manager may then receive results from the abstract query from one or more of the second servers via the network in step . In step the query manager may provide the results received from the first server and one or more second servers to the requesting client computer or application .

Converting the received abstract query to a local abstract query may involve determining concept codes associated with each of the logical fields associated with the received abstract query. The concept codes may be in one embodiment received with the abstract query. The query manager may identify logical fields in the second data abstraction model associated with the concept codes and generate the local abstract query based on the identified logical fields. In step the query manager may issue the local abstract query against a local database to retrieve query results. In step the query manager may provide the query results to a requesting server or client .

In some embodiments it is possible that data abstraction models at one or more servers may not include all the fields of a received query. For example referring back to suppose the query includes the following fields 

The query shown above may return the first name age and date of birth for persons whose last name is Smith and live in Chicago. Therefore the SELECT statement defines the results fields of the query including First name Age and data of birth DOB . The WHERE statement may define query conditions based on one or more fields e.g. Last Name and city.

In one embodiment it is possible that a server e.g. server may not have one or more fields or concepts defined in the query above. For example the data abstraction model may not have fields or concepts associated with Age and city. However a user may still desire to retrieve data from the server even though it may not have all the required fields of the query. Accordingly in one embodiment the query manager may be configured to modify a received query by converting the query to a local query as described above and removing one or more fields from the query and or disabling one or more query conditions as is described in greater detail below.

In one embodiment when a server does not include one or more query results fields the query manager at the server may simply modify the query by removing the one or more missing query fields. For example the query manager may remove the Age field from the SELECT statement prior to executing the query at the server . By removing the Age field the query may be successfully executed at the server without generating any errors.

In one embodiment after retrieving results for the modified query at the server the query manager may include the missing Age field in the query results wherein the values in the Age field are shown as NULL values. The query results may then be transferred to a requesting server or client e.g. the server illustrated in .

In one embodiment the server may be configured to compile results for the query received from each of the servers as described hereinabove. Each of the servers may have different results fields missing. illustrates an exemplary results set that may be compiled by the server according to an embodiment of the invention. As illustrated in the results set may include the results fields including First Name Age and Date of Birth .

In one embodiment the records may represent records retrieved from the server because the server may not have any fields or concepts related to the Age field in query . The records may correspond to results retrieved from the server . The server may include all the fields of the query accordingly a value if provided for each of the result fields.

In one embodiment the records may be received from the server which may not have any fields or concepts related to the Date of Birth DOB field. Accordingly the values in the DOB field for records are shown as NULL values. In one embodiment the records may be received from the server which may not have any fields or concepts related to the First Name field. Accordingly the values in the First Name field for records are shown as NULL values.

As stated above in one embodiment the server may also not include a field or concept related to the city field illustrated in the query above. Because the city field is included in a query condition of query the query manager may be configured to disable the query condition prior to executing the query at the server . Disabling the query condition may include for example removing one or more operators and one or more conditions from the query. However in alternative embodiments any reasonable method for disabling query conditions may be used. Methods for disabling query conditions are described in greater detail in query conditions is described in co pending U.S. patent application Ser. No. 12 365 996 entitled DISABLING QUERY CONDITIONS IN AN ABSTRACT QUERY ENVIRONMENT filed on Feb. 5 2009 which is incorporated herein by reference in its entirety.

In one embodiment the query manager may modify the query to the following modified query in one embodiment 

As illustrated above the modified query does not include the AND operator and the city Chicago condition based on the city field concept. Furthermore the Age field has also been removed because as stated above the server may not include an age field or concept. By removing the missing fields and conditions comprising the missing fields the query may be executed without error at the server . Prior to execution of the modified query the query manager may be configured to convert the query into a local query as described in the previous sections.

In one embodiment each of the servers may be configured to dynamically generate a confidence value for each field in its respective data abstraction model. The confidence value may be stored in the field definition of each field as shown in . illustrates an exemplary field definition for a field Y according to an embodiment of the invention. The field Y may be similar to fields A and X illustrated in and may be defined by a name access method table column concept code and the like. Field Y may also include a confidence value which may indicate a likelihood of receiving results from peer servers using a P2P query comprising the field.

The value may be any type of value including a numerical value e.g. 0 to 10 an alphanumeric value a descriptive value e.g. high medium and low or the like. In one embodiment the value may be determined based on the results received by a server for peer to peer queries e.g. the query illustrated in . As described in the previous section some servers may not include the fields or concepts that exist in data abstraction models of other servers . Accordingly when the servers with missing fields receive queries comprising the missing fields the query managers at those servers may be configured to remove query conditions having the missing fields and or provide NULL values in one or more of the result fields as described above.

In one embodiment each server may be configured to keep a track of the presence of fields or concepts at other peers based on the received results from the peers. For example if server returns results for a query to server with NULL results for the Age field as described in the previous section the query manager at server may be configured to determine that the server does not include the Age field. Based on query results received from multiple peers over time and multiple queries the query manager may be configured to determine how many peers include a given field or concept of the data abstraction model and how many peers do not.

For example the query manager may determine that two peers servers and have the Age field or concept whereas one peer server does not. This determination may be made for example based on the results illustrated in . Similar determinations for a number of peers having each field of the data abstraction model may be made.

The confidence value in may be determined by a number of peers also having the field or concept. For example the greater the number of peers having the field or concept the greater may be the confidence value. A greater confidence value may indicate a greater likelihood of retrieving data from peer servers by composing a query including the field.

In one embodiment during query composition a user may be presented with fields for composing the query wherein the fields are organized based on the confidence value . illustrates an exemplary GUI screen that may be used to compose a query according to an embodiment of the invention. Specifically the GUI screen may be provided to a user while selecting fields for inclusion in a query. As illustrated in the GUI screen may allow the user to select fields based on their confidence values. For example a drop down menu is illustrated to select one of the confidence values High Medium Low and unspecified as illustrated in .

Based on the selected confidence values one or more query fields may be displayed for selection in the GUI . For example because the high confidence value is selected in the drop down menu the fields Age Date of Birth First Name and Last Name are displayed for selection using the checkboxes . If a different confidence value e.g. low is selected a different set of query fields may be displayed in the GUI .

While the query fields are organized as high confidence medium confidence and low confidence fields in any reasonable method for arranging query fields based on the confidence value may be implemented in other algorithms. For example in some embodiments the query fields may be displayed based on ranges of the confidence values. Furthermore embodiments of the invention are not limited to the graphical tools shown in . In alternative embodiments any other graphical tools e.g. buttons tables text boxes and the like may be used to specify the confidence values and display and select the query fields.

Because data abstraction models at each server may constantly change in one embodiment query managers in the servers may be configured to dynamically update the confidence values of each query field after receiving results for a query. For example server may send a first query to the server wherein the query comprises the age field concept. The server may respond to the server with a set of results indicating that the server does not include the age field. Based on the results of the first query the query manager may determine a confidence value for the age field in data abstraction model

Thereafter the server may send a second query to the server comprising the age field. The results for the second query may indicate that the server does include the age field. This may occur for example because the data abstraction model may have been modified to include the age field. Accordingly upon receiving the results of the second query the query manager of server may update the confidence value of the age field in the data abstraction model

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

