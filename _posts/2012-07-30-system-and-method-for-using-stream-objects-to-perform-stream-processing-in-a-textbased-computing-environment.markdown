---

title: System and method for using stream objects to perform stream processing in a text-based computing environment
abstract: A mechanism for using stream objects in stream processing operations is provided. A definition of a class of stream objects used in stream processing algorithms can define output and update operations included in instances of the stream objects and the API (application programming interface) through which they may be called. The class definition may further include the type of state information to be held by the instantiated stream objects. An instance of the stream object may be instantiated in a text-based computing environment and the operations may be used to process streams of data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08789017&OS=08789017&RS=08789017
owner: The MathWorks, Inc.
number: 08789017
owner_city: Natick
owner_country: US
publication_date: 20120730
---
This application is a continuation of U.S. patent application Ser. No. 11 519 255 filed Sep. 11 2006 now U.S. Pat. No. 8 234 623 issued Jul. 31 2012 the entire content of which are incorporated by reference herein.

Many computational systems are designed implemented and deployed using a programming environment so as to operate on streaming data. The processing of data streams such as audio data video data stock data radio frequency data digitized transducer outputs test and measurement data SQL query data gene sequence data etc. has taken on increasing importance as development environments attempt to simulate or model systems dependent upon streaming data such as high throughput or time critical processing systems.

Stream based processing may be defined as a processing of data samples arriving sequentially over a period of time. A data sample may be scalar in nature that is a single data element. It may also be a vector a matrix a higher dimensional regular array of data elements etc. A data sample may also be irregular or non uniform in structure depending upon the nature of the intended application. Continuous time data may be sampled discretely in time to produce a sampled sequence of streaming data. The sequence of data samples over time may have periodic sampling that is uniformly sampled over time or may be aperiodic with respect to the sampling interval. The duration of a data stream may be finite in time with short duration or having a sufficiently long duration so as to be considered infinite in practice for a given application. The stream processing system may therefore be designed to handle an infinite stream of data as a design requirement.

Streaming operations may also require the collection and processing of buffered sub sequences of data in the data stream the buffered data being referred to as a data buffer a batch or a data frame. A data frame may represent a finite time interval and the processing of an infinite sequence of data frames may be a requirement of the stream processing system. Data may therefore be input to a stream processing system as individual samples or as frames of data samples. A data sample may include one or more data elements relating to the data at a particular time point.

Different models of computation may be employed by the programming and or modeling environment being utilized. A modeling environment may be either textual or graphical in nature and each model of computation may impose certain design restrictions and semantic constraints. Dataflow is an example of one family of models of computation. Specific members of the dataflow family may include dynamic dataflow synchronous dataflow boolean dataflow and the like. A particular dataflow model of computation may impose some restriction on the types of computational semantics that can be modeled and implemented by the system such as for example forbidding feedback recursion different mixtures of sample rates different mixtures of consumption and production rates of the computational process different mixtures of frame sizes etc. A dataflow model may also offer certain capabilities to the model designer and or user such as for example providing higher data throughput deterministic performance or greater expressivity in terms of modeling semantics.

Many stream processing systems are implemented using dataflow systems that may be modeled with a dataflow language where the execution of a particular system component may be triggered by the availability of data as inputs to one or more system components.

For example in a graphical programming language that implements a dataflow based stream processing system the program or model may include model components represented as blocks with inputs and or outputs. The graphical program or model may also include arrows between the blocks where the arrows are used to represent the flow of the input and output data. Components in these program or model environments may be executed as soon as all of the inputs become valid depending upon how the development environment is implemented and the specific model of computation employed.

Graphical programming environments that support stream processing operations may include block libraries that contain blocks associated with code for stream processing algorithms. The blocks provide a mechanism for programmers to add components to a model to handle the processing of stream data. The addition of the stream processing blocks to the model in the graphical modeling environment enables the execution of the associated stream processing algorithm. The stream processing algorithm creates a stream component with an internal state calculates new output values using the state information and then updates the state information.

The semantic constraints and performance limitations imposed by the choice of a dataflow model of computation may limit the applicability of current design tools to the design of practical stream processing systems in text based computing environments.

One embodiment of the present invention is directed to providing objects in a text based programming language for performing operations on data such as for example stream data. An object may be defined by an object definition also referred herein as a class . The object definition may include a definition of object operations also referred herein as methods and one or more variables representing a state of an object.

In one embodiment of the invention the operations of the stream processing objects may include an update operation and or an output operation. The update operation updates the state of an object without producing an output. The output operation produces one or more output data samples and may optionally use state information and inputs to calculate the outputs. The output operation which may be the default operation of the object and update operation may also optionally use one or more of the input data samples and or one or more object parameters.

The class definition may also include a combination operation. The combination operation may combine the functionality of the update operation and the output operation. The combination operation may be a default operation for the object. The default operation is an operation that is performed if a name of an operation is not indicated when calling a method of an object.

The operations as defined above constitute a model of computation when expressed in a textual programming environment such as an object oriented implementation in MATLAB . This model of computation offers advantages applied to the design of stream processing systems such as expressing feedback systems certain mixtures of sample rates certain mixtures of consumption and production rates of the computational process certain mixtures of frame sizes etc.

One embodiment of the invention provides an API Application Programming Interface for processing of data by instances of the defined objects. For example the output operation may be called using a syntax including at least an object name and an output keyword and the update operation may be called using a syntax including at least the object name and an update keyword. The combination operation may be called using a syntax including the object name and a process keyword.

Alternatively the combination operation may be the default operation and may be called without using a specific keyword such as by invoking an operation call on an object using the object name.

One embodiment of the invention may provide objects capable of polymorphic processing that is of processing variables of different specifications such as for example both fixed point and floating point values sample based and frame based values real and complex values sample time and single and multiple dimension values.

Another embodiment of the invention may provide functionality for generating code from the stream processing objects. The generated code may be target platform specific and or may be generated based on specific target parameters. The target may be real time simulation a specific hardware platform a fixed point emulation etc.

The object definition of one embodiment of the invention may be written in an array based programming language. In another embodiment of the invention the object definition may be written in a dynamically typed programming language. In yet another embodiment of the invention the object definition may be written in a language compatible with the MATLAB modeling environment and or SIMULINK modeling environment.

It will be apparent to one of skill in the art that the object definitions and or objects instantiated from the object definitions may be used both from within a textual environment and a graphical programming and or modeling environment or a combination of the above. The input and or output data may be communicated from to either graphical or textual modeling environments.

An illustrative embodiment of the present invention provides a mechanism for handling stream processing operations in text based computing environments. While a stream processing algorithm may be implemented in the graphical programming environment via a block library it may be difficult to implement a corresponding stream processing algorithm in a text based computing environment. A definition of a class of objects used in stream processing algorithms may include output and or update methods which may be used in instances of the stream processing object class. The class definition also defines the API through which the operations may be called. Additionally the class definition defines the type of internal state information maintained by the instances of the stream object class. In short a class definition specifies at least one method also referred to as operations herein and state holding variables of the objects instantiated from the class. As will be understood by one of skill in the art of object oriented programming a class of stream processing objects may be a base class or a class inherited from a base class and or any intervening parent classes. Users of the system in one embodiment of the invention may be enabled to create their own classes inheriting from one or more predefined stream processing object classes.

Methods provided in the predefined object classes of one embodiment of the invention include at least an output method also referred to as an output operation and an update method also referred to as an update operation . The output operation produces new output values such as for example output values based on processing one or more stream values. The update operation updates the state of the instantiated stream processing object also referred herein as a stream object or instance of a stream object class based in part on stream input values. The update operation need not produce output values.

A process method may be included in the stream processing object class definition the process method performing both an update state and output operation.

In one embodiment of the invention the process method may be a functor that is the default method for the object.

The stream processing objects may be instantiated in the textual or graphical environments or in combinations thereof.

Exemplary text based computing environments include MATLAB from The MathWorks Inc. of Natick Mass. and the LABVIEW MATHSCRIPT environment from National Instruments Inc. of Austin Tex.

Additionally as used herein the term text based computing specifically encompasses the processing of embedded textual blocks within graphical programming environments. For example the processing of an embedded MATLAB block within a model in a SIMULINK modeling environment would be considered to be taking place within a text based computing environment SIMULINK modeling environment may call MATLAB computing environment upon encountering the embedded MATLAB block the processing of the embedded MATLAB block may take place in MATLAB computing environment and the results may be returned to the component in the SIMULINK environment . The text based computing environment includes a class definition for stream objects . The class definition for stream objects defines the type of state information to be maintained by the stream objects and an API for the stream object. The API provides the interface through which the operations in the stream objects may be called. The API enables the calling of an update and output operation and may allow the calling of other operations of the stream object to be called.

The class definition is used during the instantiation of at least one instance of the stream object class in the text based computing environment . Exemplary types of stream objects can include stream objects such as for example filter objects and delay objects. Filter objects provide a filtering of the stream data being processed while delay objects may impose a delay in the stream being processed. It will be appreciated by one of skill in the art that many other types of objects operating on streams of data are within the scope of the present invention. The stream object allows a user to retain and update state information for one or more data streams . The data stream may be but is not limited to video data audio data stock data radio frequency sensor data digitized transducer data gene sequence data test and measurement data SQL query data and or RSS feed In one implementation the data stream may include substantially any type of data with high throughput. In one implementation the data stream may be real time data pseudo real time data and or archived data.

The stream object includes an internal state and an update method and an output method . The update method updates the internal state of the stream object . In updating the internal state of the object the update method may use one or more of the following input values from the stream data an internal state of the stream object and object parameters. The illustrative embodiment thus allows a user to get the benefit of state retention when working with streaming data without requiring that the user write code that determines how to update states based on outputs and or to maintain states. The output operation may use at least one object parameter and or the current internal state to calculate a new set of output values. Alternatively the output operation may also use current input values for calculating the new output values. Exemplary object parameters include initial conditions filter types filter coefficients delay length algorithm modes etc. A copy of the calculated output value may be stored in an internal buffer .

Algorithms that operate with stream data may call an output operation prior to calling an update operation or vice versa. In one embodiment of the invention the stream object may include an operation that upon being called calls both the update and output operations by for example calling first the output operation and then calling the update operation . It will be appreciated that the update operation and output operation may be written so as to form part of the combined operation or may be separate operations programmatically called by the combined operation . In some embodiments of the invention the combined operation may be designated as a functor that is as a default method. In calling the combined operation the users may then omit the explicit method name in a method call and refer only to the object name and the system of one embodiment of the invention will understand that syntax to refer to the method call to the default combined operation . The combined operation may be referred to as the process method or operation in the API . The output and update operations may also be designated the default method instead of the process method.

Additional operations that may be defined by the API and implemented by the stream object include a reset operation a terminate operation and a retrieve outputs operation . The reset operation may reset an object s internal state back to an initial and or other default value. For example a filter object might reset its state to its initial condition which may be specified as an object parameter . Similarly a file reader may reset its index back to the beginning of a file and an object calculating a running mean may reset its internal running sum to zero. Upon being called the terminate operation may release resources that are associated with the stream object . Exemplary resources that may be released by the terminate operation can include allocated memory file handles and hardware connections. Calling the terminate operation indicates that processing has completed. Any allocated resources can be released. The retrieve output operation retrieves the last previously calculated output value. In one embodiment of the invention the last previously calculated output value is retrieved from an internal buffer .

The computing device may also support a graphical modeling environment that includes a graphical model . Alternatively the graphical modeling environment may be located on a separate computing device accessible to the computing device . Exemplary graphical modeling environments can include among other things SIMULINK and STATEFLOW both from The MathWorks Inc. Following the processing of the data stream the resulting output may be transmitted as input to a component in the graphical model . For example the output from a stream object in code being executed in MATLAB may be directed as input for a block diagram component in a block diagram model being executed in SIMULINK. It should be appreciated that the update and output operations may also be invoked remotely through Remote Procedure Call RCP or Remote Method Invocation RMI mechanisms.

An example of an algorithm that may use separate update and output operations is a feedback loop with a delay such as a one pole IIR filter . The feedback loop may be graphically depicted as shown in .

The feedback loop may involve splitting the algorithm into two steps otherwise it may not be possible to resolve the feedback loop i.e. the delay block may need the output from the sum block but the sum block indirectly may need the output from the delay block . The two steps are i calculating outputs and then ii updating states. In the output step the delay block calculates its output based on its state. In the first iteration the delay block calculates its output using its initial state value. As depicted in the delay output is written to an output memory location via the output port and passes through the gain block . The gain output and the input block output would be added together to create the sum block output value . In the update step each component that has state only the delay in this case updates its state. The delay block stores the current output of the sum block as its state to use as its output value in the next iteration.

As noted above in one implementation a combined operation referred to below and in the sample code above as a process operation may be used in place of separate explicit calls to the output and update methods. Thus in place of separately calling 

Once calculated the output values may be provided as input values to components in other environments that are performing additional processing. is a flowchart of a sequence of steps that can be followed by an illustrative embodiment of the present invention to process stream data in a text based computing environment and to forward the processed data to a graphical model component. The sequence begins with the stream data being provided as input to the stream object step . The input may be provided from either the textual or the graphical environments or the combination of the above. The algorithm being executed in the text based computing environment may call a combination operation to calculate output and update state information step . The calculated output is sent to a graphical model component step which executes using the output data processed by the stream object in the text based computing environment as input data step . In one implementation the graphical model component may be in a data flow diagram or in a block diagram model.

In one exemplary implementation the instantiation of the stream object may be triggered by the execution of an embedded text block located within a graphical model. The embedded text block may be any block embedded within a graphical model that requires a call to a separate text based computing environment in order to process the code in the block. For example the execution of an Embedded MATLAB block located with a SIMULINK model may cause the instantiation of a stream object in a text based computing environment to which stream data is then directed. depicts a sequence of steps that may be followed by an illustrative embodiment to execute an embedded text block. The sequence begins with the execution of a graphical model step . During the processing of the execution list for the graphical model an embedded text block is encountered step . The processing of the embedded text block triggers a call to a text based computing environment step . The embedded text block then executes in the text based computing environment and instantiates a stream object as discussed above to perform streaming operations step .

In another aspect of the invention the API may support the use of functor notation for a default operation. The support of the functor notation by the API allows the use of an object as a function that is using the name of the variable that holds that object as a function call as illustrated below 

The processing of an embedded textual block within a graphical modeling environment is further discussed with reference to . shows a graphical model of an audio flanger a system that offsets signals from each other which includes an embedded textual block. The model includes a signal containing a stream of audio data. The model also includes a sine wave block and constant block which together provide input to a sum block . The sum block provides its output as the delay value for an embedded textual block providing a variable fraction delay . The signal is provided as input to the embedded textual block providing a variable fraction delay . The delayed output from the embedded textual block providing a variable fraction delay is then added to a sum block and combined with the non delayed audio signal . The output of the sum block is provided to a gain block which then returns its output to the originating workspace .

Execution of the embedded textual block may provide a variable fraction delay that can cause the text based computing environment to be called to execute the block. The execution of the block instantiates an instance of the stream object class discussed above. The stream object allows state information to be retained about the stream of audio data which in one implementation is being buffered and assembled into frames. The retention of the state information allows a desired amount of variable delay to be added to each frame and the calling of the stream object s update and output operations allows the state to be updated as necessary and the new output calculated respectively.

The embedded textual block providing a variable fraction delay code being processed in the text based computing environment may be represented as 

In another aspect of the present invention the model with the stream objects may be used to generate code as illustrated in the exemplary sequence depicted in . The sequence may begin with the providing of a model that includes an instance of the stream class discussed above step . The model is then compiled to determine values for all essential model elements and to determine an ordering in which to execute the model blocks step and the compiled representation is transformed to a control flow graph intermediate representation step . The code generation module may then generate code based on the control flow graph this code may be generated for a particular target platform step .

In addition to parameters that capture the particular hardware and operating system for which code is generated the code can be generated based on parameters such as but not limited to whether it should be fixed point or floating point whether memory usage should be minimized whether debugging profiling and other instrumentation code should be included whether function parameters should be stored locally or made available globally whether functions should be reused wherever possible whether argument lists to functions should be flat or are allowed to be structured.

Another aspect of the code generation technology is that it is very extensible. Provided with the SIMULINK product family is the Target Language Compiler TLC . This technology enables the creation of active scripts that control how the generated code is produced for a model with stream objects. A user using TLC is able to customize the generated code to suit their specific needs.

Exemplary embodiments may be provided as one or more computer readable programs embodied on or in one or more mediums. The mediums may be a floppy disk a hard disk a compact disc a digital versatile disc a flash memory card a Programmable ROM PROM a Magnetic RAM MRAM a Random Access Memory RAM a Read Only Memory ROM a magnetic tape etc. In general the computer readable programs may be implemented in substantially any programming language. Examples of languages that can be used include but are not limited to MATLAB language FORTRAN C C C Python JavaScript Java etc. Examples of graphical programming environments include but are not limited to Simulink LabView Hyperception Signal Processing Designer VisualSim SCADE etc. The software programs may be stored on or in one or more mediums as object code. Hardware acceleration may be used and all or a portion of the code may run on a Field Programmable Gate Array FPGA an Application Specific Instruction set Processor ASIP an Application Specific Integrated Circuit ASIC etc. The code may run in a virtualized environment such as in a virtual machine. Multiple virtual machines running the code may be resident on a single processor and multiple processors having two or more cores may be implemented on the same chip.

Since certain changes may be made without departing from the scope of the present invention it is intended that all matter contained in the above description or shown in the accompanying drawings be interpreted as illustrative and not in a literal sense. Practitioners of the art will realize that the sequence of steps and architectures depicted in the figures may be altered without departing from the scope of the present invention and that the illustrations contained herein are singular examples of a multitude of possible depictions of the present invention.

