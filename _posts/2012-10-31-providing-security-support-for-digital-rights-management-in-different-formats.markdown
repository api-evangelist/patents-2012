---

title: Providing security support for digital rights management in different formats
abstract: In accordance with some embodiments, technologies may be provided that is adaptable to any existing and potentially future digital rights management application. Thus, it is not necessary to provide duplicate systems to handle disparate digital rights formats in some embodiments.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342666&OS=09342666&RS=09342666
owner: Intel Corporation
number: 09342666
owner_city: Santa Clara
owner_country: US
publication_date: 20121031
---
In digital rights management content providers provide content for viewing by individuals in a way that electronically guards the copyright of the content creator. For example the ability to play the content may be limited so that the content only plays on a certain piece of hardware which is authorized to play the content. This prevents file sharing where the content creator does not get paid for the playing of copies of the file.

Because of the importance of digital rights management to the distribution of content a large number of digital rights formats have been created. Different equipment and software providers have come up with different digital rights management applications or formats. Among the different applications are those offered by Microsoft Cisco Sony Google Comcast Adobe Nagravision and MDS to mention a few examples.

Typically equipment providers provide hardware and firmware support for digital rights management. For example digital rights management capabilities typically appear in set top boxes associated with cable and satellite content distribution. Thus each piece of equipment may be adapted to one particular digital rights management application. Alternatively duplicative hardware and firmware may be used to accommodate two or more different digital rights management applications.

In accordance with some embodiments technologies may be provided that are adaptable to any existing and potentially future digital rights management application. Thus it is not necessary to provide duplicate systems to handle disparate digital rights management formats in some embodiments.

Referring to a platform for providing content for playback by users may include a hardware component. In one embodiment the platform may be a system on a chip SOC such as an Intel CE 4100 platform. The platform and a security engine SEC can be software hardware firmware or combinations thereof. That platform may include processors and memories sufficient to implement the distribution of content and digital rights management technology. Typically the platform may be part of a set top box and may be coupled to a source of content such as a satellite or cable system on one side and may output content for playback on an authorized video decoder on the other side.

In some embodiments the platform may be coupled to the security engine which in one embodiment is a dedicated processor based integrated circuit that prevents access by host based applications to securely stored information within the engine. However authorized devices such as video decoders may be given access to decoded content for display. Thus in some embodiments only authorized video decoders are capable of receiving an output playable stream thereby effecting digital rights management.

As depicted in any digital rights management application DRM may be used with the platform in some embodiments. In many cases more than one digital rights management application may be used because in some embodiments the platform and the security engine may accommodate any existing or future digital rights management schemes.

The platform may include an adapter layer including application programming interfaces APIs that enable the platform to work with a variety of different digital rights management formats. A library of data and code may be used to implement specific operations for a plurality of digital rights management formats. A kernel driver may be used to run the processor inside the platform and to enable communications between the platform and the security engine .

The security engine may be in the same hardware component as platform in one embodiment. The platform and security engine may be in any number of various devices laptop mobile devices cell phone etc. .

In a system may include one or more processors coupled via a bus to a system memory . In one embodiment the memory and processor may be part of a system on a chip . A storage device may store one or more of the APIs library and or kernel drive . Coupled to the bus and the system on a chip in one embodiment are the security engine and one or more input output devices . Other architectures are also contemplated.

Returning to the security engine may include security engine firmware SEC FW . A security engine provides a dedicated security function including cryptography. It may be a separate integrated circuit with onboard processors and secure storage not accessible from outside the engine. The security engine firmware may include two different crypto engines and in one embodiment. A root of trust may be coupled to the crypto engine and is also coupled to an internal key store . A root of trust is a component that always behaves in an expected manner because its misbehavior cannot be detected. A complete set of roots of trust has a set of functions to enable a description of the platform characteristics that affect the trust worthiness of the platform. A derived key store is coupled to the crypto engine . The store stores secret keys derived from a secret value.

The security engine also includes a protected memory region coupled to the exterior of the security engine firmware . A transport stream de multiplexer is also coupled to the exterior of the security engine firmware . Within the transport stream de multiplexer may be still another crypto engine .

A key format such as a standard key format extracted from the digital rights management application is provided to the crypto engine . A standard key format is a key format specified by a standards organization. Examples include X509 and PKCS 12. Encrypted content provided by the digital rights management application is provided to the crypto engine and to the crypto engine . In one embodiment the crypto engine provides decryption for non streaming blocks of secure content. Thus it may handle discrete files or images. Generally streaming content is passed to the crypto engine within the transport stream de multiplexer which is can handle de multiplexing of streams of data such as Motion Picture Experts Group MPEG compressed information.

In some embodiments the key format is decrypted in the crypto engine and then stored in an internal key store . This is done with the information provided by the root of trust . Thus the root of trust applied to the crypto engine allows the crypto engine to decrypt and securely store in the internal key store the decrypted key formats typically provided by digital rights management systems. This internal key store stores key information that then may be used to decrypt transport streams received by a digital rights management application and forwarded for decryption to the crypto engine within the transport stream de multiplexer .

Likewise the crypto engine may use derived keys developed from key ladders for example. In this way the decrypted information may be securely stored in a protected memory region . The security engine only provides the decrypted information to authorized hardware devices such as a video decoder associated with a set top box. All software components in the host system are unable to access the information in some embodiments.

A key extraction sequence shown in may be used to provide a handle to a decrypted key. It may be provided in software firmware and or hardware. In software and firmware embodiments it may be implemented by computer executed instructions stored in one or more computer storage readable media such as a magnetic optical or semiconductor storage. For example it may be stored within the security engine or even in the platform .

Thus referring to the key extraction sequence indicated by the arrow between the key format and the internal key store in begins by extracting a standard key format which is the raw encrypted key from the digital rights management application as indicated in block . Then an algorithm to decrypt the key is also obtained from the digital rights management system as indicated in block . A derived decryption key may also be obtained and stored in the derived key store as indicated in block .

A scheme to parse a wrapped key may be obtained in block . Some keys may be key wrapped. A key wrap is a cryptographic algorithm that uses Advanced Encryption Standard AES as a primitive to securely encrypt a plaintext key with any associated integrity information and data. For example Adobe Access a digital rights management system encrypts a raw machine key with a session key. The encryption algorithm is AES a session key is securely stored in the security engine and used to decrypt it and PKCS 8 a public key cryptography standard published by RSA Security Inc. is a scheme used to parse the RSA components out of the raw key buffer. A returned key identifier acts as a mechanism to wield the newly derived machine key.

Key properties that may need to be enforced in this scheme determine whether a key can be used to decrypt other keys in the digital rights management key ladder or to decrypt content. A scheme may be used to inherit these properties from a root key of trust. For example one property may be that the key can only be used to decrypt intermediate key ladder keys. Another inherited property may be that leaf keys can only decrypt content.

The scheme may be extendible to newly developed digital rights management systems. New key formats can be added. For example Widevine embeds 16 byte content keys within a 32 byte buffer. A new scheme can be written that parses the content key out of this buffer.

Next the decrypted key is stored in the internal key store as indicated in block . Finally a handle to the decrypted key is made available to the transport stream de multiplexer as indicated in block .

When it comes time to use the encrypted content the media provisioning sequence shown in may be used. It may be provided in software firmware and or hardware. In software and firmware embodiments it may be implemented by computer executed instructions stored in one or more computer readable storage media such as a magnetic optical or semiconductor storage. For example it may be stored within the security engine or even in the platform .

The sequence begins by determining at diamond whether the content stream from the digital rights management application is a media transport stream. If so the internal key is obtained using a handle as indicated in block via the backdoor shown in . Then the encrypted content is obtained from the digital rights management application as indicated in block . Finally the content is decrypted and provided to authorized hardware such as an authorized video decoder as indicated in block .

If the content is not a media transport stream then a derived key is obtained as indicated in block from the derived key store . A block of encrypted content is obtained as indicated in block in the crypto engine . This content is decrypted and stored in the protected memory region in as indicated in block in .

In some embodiments a generic digital rights management key may be provided in a factory. In this case a provisioning tool may be used to provide the key within the secure driver firmware. The tool saves the wrapped key container in persistent storage. Then the secured driver and firmware encrypt and sign a blob with a chip unique key. The chip unique key is a key unique to the security engine . No other device can then decrypt platform using that key. A blob is encrypted data generated by a trusted platform module. See Trusted Platform Module Specification 1.2 Revision 1.16 published Mar. 3 2011 and available from the Trusted Computing Group.

In another embodiment a generic digital rights management key may be derived in the field. For example the system may verify a cipher based message authentication code CMAC and decrypt it with the chip unique key to store the RSA digital rights management private key in the internal key store. A CMAC is a block cipher based message authentication code algorithm that may be used to provide an indication of authenticity of data. Then the server encrypted DRM key tier2 is decrypted using RSAES PKCS v1 5 algorithm i.e. a public key cryptography standard published by RSA Security Inc. defined in RFC 2898 available from Network Working Group and wrapped  drm key container.key id. The decrypted blob is decoded using PKCS 8 RFC 5208 available from Network Working Group May 2008 format generating an intermediate RSA key. Then the proper key rights are assigned to this key depending upon the tiers configured in the wrapped drm key container i.e. DECRYPT KEYS VERIFY KEYS SIGN DATA. Then the tier level is assigned as 1. Finally the server encrypted drm key tier3 is decrypted using Advanced Encryption Standard Cipher Block Chaining AES CBS algorithm RFC 3602 and server encrypted drm key tier3 id. Finally DATA DECRYPT key rights to this key as it is being derived from the key which has tier level as 1.

In some embodiments the system does not require custom security engine firmware modules for each proprietary digital rights management system that the platform needs to support. Instead a general digital rights management framework firmware and the corresponding software APIs can be used with a software adapter layer that maps a digital rights management APIs to the generic digital rights management framework APIs . It may still provide the same robustness by using the security engine internal memory based keystore to store keys and secret data.

One example embodiment may be one or more computer readable storage media storing instructions executed by a processor to perform a sequence comprising decrypting a standard key format extracted from a digital rights management application in a security engine and storing the decrypted format in an internal key store of the security engine. The media may further store instructions to perform a sequence including decrypting using a root of trust in said security engine. The media may further store instructions to perform a sequence including obtaining an algorithm to decrypt the key format from said application. The media may further store instructions to perform a sequence including providing a handle to said decrypted format. The media may further store instructions to perform a sequence including determining whether content is streaming content. The media may further store instructions to perform a sequence including decrypting non streaming content using derived keys and storing decrypted content in a protected memory region of said security engine. The media may further store instructions to perform a sequence including if said content is streaming content using said key and derived keys to decrypt said content in a transport stream demultiplexer. The media may further store instructions to perform a sequence including obtaining said key using a handle.

Another example embodiment may be a method comprising decrypting a standard key format extracted from a digital rights management application in a security engine on a computer platform and storing the decrypted format in an internal key store of the security engine. The method may also include decrypting using a root of trust in said security engine. The method may also include obtaining an algorithm to decrypt the key format from said application. The method may also include providing a handle to said decrypted format. The method may also include determining whether content is streaming content. The method may also include decrypting non streaming content using derived keys and storing decrypted content in a protected memory region of said security engine.

Another example embodiment may be an apparatus comprising an internal key store inaccessible outside said apparatus a first crypto engine to decrypt a key format extracted from a digital rights management application and store it in the internal key store a second crypto engine to decrypt streaming content and a third crypto engine to decrypt non streaming content. The apparatus may include a root of trust to decrypt the key format in conjunction with said first crypto engine. The apparatus may include a first crypto engine to use an algorithm obtained from said application to decrypt said key format. The apparatus may include a protected memory region to store decrypted content. An apparatus may include a third crypto engine to use derived keys and to store decrypted content in said region. The apparatus may include a second crypto engine to use the decrypted standard key format.

References throughout this specification to one embodiment or an embodiment mean that a particular feature structure or characteristic described in connection with the embodiment is included in at least one implementation encompassed within the present application. Thus appearances of the phrase one embodiment or in an embodiment are not necessarily referring to the same embodiment. Furthermore the particular features structures or characteristics may be instituted in other suitable forms other than the particular embodiment illustrated and all such forms may be encompassed within the claims of the present application.

While the present invention has been described with respect to a limited number of embodiments those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this present application.

