---

title: Completion notification for a storage device
abstract: A method for providing notification of completion of a computing task includes providing access to an information handling resource for a first information handling system, registering the first information handling system with a first completion queue, submitting commands from the first information handling system to a first submission queue, providing access to the information handling resource for second first information handling system, registering the second information handling system with the first completion queue, and submitting commands from the second information handling system to a second submission queue. Upon execution of commands in the first submission queue and the second submission queue, an entry in is created a first completion queue. Upon the creation of an entry in the first completion queue, an interrupt is selectively sent to the first information handling resource and to the second information handling resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09122515&OS=09122515&RS=09122515
owner: Dell Products L.P.
number: 09122515
owner_city: Round Rock
owner_country: US
publication_date: 20121219
---
The present disclosure relates in general to information handling systems and more particularly to completion notification for a storage device.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option available to users is information handling systems. An information handling system generally processes compiles stores and or communicates information or data for business personal or other purposes thereby allowing users to take advantage of the value of the information. Because technology and information handling needs and requirements vary between different users or applications information handling systems may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition information handling systems may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems.

Existing server architectures either provide a single monolithic server capable of running one operating system and input output I O resources at a time or bulky blade server chassis providing multiple servers and I O control modules in a single chassis. A system chassis with multiple information handling systems with various peripheral and input output capabilities common to the chassis as a whole may provide advantages as it allows a blade server chassis in a small form factor thereby providing a blade server chassis with a size comparable to the size of a monolithic server. Implementation of a system chassis with multiple information handling systems with various peripheral and input output capabilities common to the chassis as a whole presents numerous challenges.

In accordance with the teachings of the present disclosure the disadvantages and problems associated with communications and notifications of completions and other events within in a shared input output infrastructure have been reduced or eliminated.

In accordance with some embodiments of the present disclosure an apparatus includes an interface configured to provide access to the apparatus for a first information handling system and a second information handling system an information handling resource a first submission queue configured to be registered with the first information handling system and to receive commands from the first information handling system for accessing the information handling resource a second submission queue configured to be registered with the second information handling system and to receive commands from the second information handling system for accessing the information handling resource a first completion queue and a command execution unit configured to execute commands from the first submission queue and the second submission queue. Upon execution of a command from the first submission queue or the second submission queue the command execution unit is configured to add an entry to the first completion queue. Upon adding an entry to the first completion queue the interface is configured to selectively send an interrupt to the first information handling system and a second information handling system.

In accordance with some embodiments of the present disclosure a method for providing notification of completion of a computing task includes providing access to an information handling resource for a first information handling system registering the first information handling system with a first completion queue submitting commands from the first information handling system to a first submission queue providing access to the information handling resource for second first information handling system registering the second information handling system with the first completion queue and submitting commands from the second information handling system to a second submission queue. Upon execution of commands in the first submission queue and the second submission queue an entry in is created a first completion queue. Upon the creation of an entry in the first completion queue an interrupt is selectively sent to the first information handling resource and to the second information handling resource.

In accordance with some embodiments of the present disclosure an article of manufacture includes a computer readable medium and computer executable instructions carried on the computer readable medium. The instructions are readable by a processor. The instructions when read and executed cause the processor to provide access to an information handling resource for a first information handling system register the first information handling system with a first completion queue submit commands from the first information handling system to a first submission queue provide access to the information handling resource for second first information handling system register the second information handling system with the first completion queue and submit commands from the second information handling system to a second submission queue. Upon execution of commands in the first submission queue and the second submission queue an entry in is created a first completion queue. Upon the creation of an entry in the first completion queue an interrupt is selectively sent to the first information handling resource and to the second information handling resource.

Technical advantages of the present disclosure will be apparent to those of ordinary skill in the art in view of the following specification claims and drawings.

Preferred embodiments and their advantages are best understood by reference to wherein like numbers are used to indicate like and corresponding parts.

For the purposes of this disclosure an information handling system IHS may include any instrumentality or aggregate of instrumentalities operable to compute classify process transmit receive retrieve originate switch store display manifest detect record reproduce handle or utilize any form of information intelligence or data for business scientific control entertainment or other purposes. For example an information handling system may be a personal computer a PDA a consumer electronic device a network storage device or any other suitable device and may vary in size shape performance functionality and price. The information handling system may include memory one or more processing resources such as a central processing unit CPU or hardware or software control logic. Additional components or the information handling system may include one or more storage devices one or more communications ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse and a video display. The information handling system may also include one or more buses operable to transmit communication between the various hardware components.

For the purposes of this disclosure information handling resources may broadly refer to any component system device or apparatus of an information handling system including without limitation processors busses memories input output devices and or interfaces storage resources network interfaces motherboards electro mechanical devices e.g. fans displays and power supplies.

For the purposes of this disclosure computer readable media may include any instrumentality or aggregation of instrumentalities that may retain data and or instructions for a period of time. Computer readable media may include without limitation storage media such as a direct access storage device e.g. a hard disk drive or floppy disk a sequential access storage device e.g. a tape disk drive compact disk CD ROM DVD random access memory RAM read only memory ROM electrically erasable programmable read only memory EEPROM and or flash memory as well as communications media such as wires optical fibers microwaves radio waves and other electromagnetic and or optical carriers and or any combination of the foregoing.

Information handling systems often use an array of physical storage resources e.g. disk drives such as a Redundant Array of Independent Disks RAID for example for storing information. Arrays of physical storage resources typically utilize multiple disks to perform input and output operations and can be structured to provide redundancy which may increase fault tolerance. Other advantages of arrays of physical storage resources may be increased data integrity throughput and or capacity. In operation one or more physical storage resources disposed in an array of physical storage resources may appear to an operating system as a single logical storage unit or logical unit. Implementations of physical storage resource arrays can range from a few physical storage resources disposed in a chassis to hundreds of physical storage resources disposed in one or more separate storage enclosures.

As depicted in system may comprise a plurality of information handling systems one or more interconnect and switching domains such as PCIe interconnect and switching domains or Serial Attached Small Computer System Interface Serial Advanced Technology Attachment SAS SATA interconnect and switching domain devices and controllers such as storage controller .

An information handling system may generally be operable to receive data from and or communicate data to one or more devices and or other information handling resources of system via any suitable mechanism such as interconnect and switching domains such as PCIe interconnect and switching domains or SAS SATA interconnect and switching domain . In certain embodiments an information handling system may include a server computer blade server mobile device laptop or any other suitable mechanism. As depicted in an information handling system may include one or more processors and any number and kind of interfaces such as PCIe interface communicatively coupled to processor .

A processor may include any system device or apparatus configured to interpret and or execute program instructions and or process data and may include without limitation a microprocessor microcontroller digital signal processor DSP application specific integrated circuit ASIC or any other digital or analog circuitry configured to interpret and or execute program instructions and or process data. In some embodiments processor may interpret and or execute program instructions and or process data stored in a memory a hard drive and or another component of system .

An interface such as PCIe interface may comprise any system device or apparatus configured to provide an interface between its associated information handling system and devices or other interfaces such as PCIe interconnect and switching domains or SAS SATA interconnect and switching domain . In some embodiments PCIe interface may comprise PCIe cards configured to create a PCIe compliant interface between its associated information handling system and PCIe interconnect and switching domains or SAS SATA interconnect and switching domain .

PCIe interconnect and switching domains or SAS SATA interconnect and switching domain may include any system device or apparatus configured to interconnect modular information handling systems with information handling resources such as devices controllers such as storage controller or other interconnect and switching domains.

PCIe interconnect and switching domains or SAS SATA interconnect and switching domain may comprise any system device or apparatus configured perform switching between information handling systems and other parts of system . In various embodiments a PCIe switch generalized PC bus switch an Infiniband switch or other suitable switch may be used. In such embodiments PCIe interconnect and switching domains or SAS SATA interconnect and switching domain may operate in a redundant mode for shared devices e.g. storage controllers and or devices and in non redundant mode for non shared devices. As used herein shared devices may refer to those which may be visible to more than one information handling system while non shared devices may refer to those which are visible to only a single information handling system .

As depicted in a PCIe interconnect and switching domain or SAS SATA interconnect and switching domain may have coupled thereto one or more devices .

When a system e.g. system is architected so as to allow information handling information handling resources such as those of devices to allow shared resources such that the information handling resources may be assigned to one information handling system or shared among a plurality of information handling systems challenges may arise when needing to service an information handling resource.

Shared resources or devices such as PCIe or NVMe devices may be virtualized across multiple information handling systems . Non shared resources or devices may be partitioned such that they are visible only to a single information handling system at time.

System may include multiple virtual information handling systems . Such virtual information handling systems may each correspond to an individual physical information handling system or one or more or one or more virtual machines operating on a physical information handling system. Virtual information handling systems may be communicatively coupled to information handling resources such as device by hypervisor .

Hypervisor may include a virtual machine manager VMM and may be implemented in logic code software applications scripts executables or any other suitable entity. Hypervisor may include hardware virtualization for allowing multiple operating systems to run concurrently on an information handling system. Furthermore hypervisor may establish multiple such operating systems to run on multiple information handling systems. Hypervisor may be configured to move the operation of a guest operating system from one information handling system to another. Hypervisor may appear to its virtual information handling systems to be an operating platform that has abstracted away the physical resources such as device . Such resources may also include processing capabilities in the form of a virtual processor . Hypervisor may present to the virtual information handling systems a virtual operating platform and may manage the execution of the virtual information handling systems .

Thus system illustrates that an information handling resources such as device may be shared among multiple information handling systems multiple virtual machines operating on the same information handling system or a combination thereof.

In one embodiment each of virtual information handling systems may be communicatively coupled to hypervisor through hypervisor interfaces . Each of hypervisor interfaces may include a physical interface such as a PCIe interface a series of application programming interfaces API or other suitable modules. Virtual information handling systems may be communicatively coupled to devices through hypervisor interface and hypervisor . Thus hypervisor may provide management and handling of information handling resources in devices to each of virtual information handling systems .

To maintain routes between given virtual information handling systems and devices hypervisor may include virtual hierarchies from devices to virtual information handling systems . Particular functions such as calls to hypervisor virtual functions or shared functions may be provided. In one embodiment wherein device contains multiple information handling resources such as a storage device and a USB interface a function may be provided for each such information handling resource. Thus from the perspective of virtual information handling systems the multiple such information handling resources may appear to be separate and unrelated. Furthermore a virtual function may be provided for each such virtual information handling system that may share access to device . A given device which has been virtualized may be accessed by such two or more virtual functions which allow the sharing of the resource.

Hypervisor may include I O command logic configured to route switch control or otherwise direct access by virtual information handling systems of devices . Furthermore I O command logic may be configured to route switch or control interconnects such as those illustrated in . Such routing may be used to provide virtualization sharing and simultaneous communication between for example information handling systems and devices .

Code executing on any of virtual information handling systems may access one or more of devices through calling functions in an API. The code executing simultaneously on each such virtual information handling system may issue commands or functions that are to be executed on device . Device may respond to the specific virtual information handling system that initiated the command to notify that the command has completed. Furthermore device may communicate with particular one or more of virtual information handling systems that need to be notified of an event that specifically addresses a give virtual information handling system . For a given response or notice device may avoid communicating with virtual information handling systems that do not need to receive a copy of the response or notice.

As depicted in system may comprise a chassis including a plurality of information handling systems a mid plane one or more switches one or more chassis management controllers one or more slots and a plurality of devices such as disk drives .

An information handling system may generally be operable to receive data from and or communicate data to one or more devices such as disk drives and or other information handling resources of chassis via mid plane . In certain embodiments an information handling system may be a server. In such embodiments an information handling system may comprise a blade server having modular physical design. In these and other embodiments an information handling system may comprise an M class server. As depicted in an information handling system may include a processor and one or more switch interfaces communicatively coupled to processor .

A processor may include any system device or apparatus configured to interpret and or execute program instructions and or process data and may include without limitation a microprocessor microcontroller digital signal processor DSP application specific integrated circuit ASIC or any other digital or analog circuitry configured to interpret and or execute program instructions and or process data. In some embodiments processor may interpret and or execute program instructions and or process data stored in a memory a hard drive and or another component of system .

A switch interface may comprise any system device or apparatus configured to provide an interface between its associated information handling system and switches . In some embodiments switches may comprise PCIe switches in which case a switch interface may comprise a switch card configured to create a PCIe compliant interface between its associated information handling system and switches . In other embodiments a switch interface may comprise an interposer. Use of switch interfaces in information handling systems may allow for minimal changes to be made to traditional servers e.g. M class servers while supporting the overall system architecture disclosed herein. Although depicts an implementation including a single switch interface per information handling system in some embodiments each information handling system may include a plurality of switch interfaces for redundancy high availability and or other reasons.

Mid plane may comprise any system device or apparatus configured to interconnect modular information handling systems with information handling resources. Accordingly mid plane may include slots and or connectors configured to receive information handling systems switches chassis management controllers a plurality of controllers such as storage controllers and or other information handling resources. Mid plane may include one or more boards or cabling configured to interconnect modular information handling systems with information handling resources.

A switch may comprise any system device or apparatus configured to couple information handling systems to storage controllers e.g. via mid plane and slots and perform switching between information handling systems and various information handling resources of system including storage controllers and slots . In certain embodiments a switch may comprise a PCIe switch. In other embodiments a switch may comprise a generalized PC bus switch an Infiniband switch or other suitable switch. As shown in chassis may include a plurality of switches . In such embodiments switches may operate in a redundant mode for shared devices e.g. storage controllers and or devices coupled to slots and in non redundant mode for non shared zoned devices. As used herein shared devices may refer to those which may be visible to more than one information handling system while non shared devices may refer to those which are visible to only a single information handling system . In some embodiments mid plane may include a single switch .

Although depicts chassis as having two chassis management controllers chassis may include any suitable number chassis management controllers .

A controller such as storage controller may include any system apparatus or device operable to manage the communication of data between one or more of information handling systems and one or more devices such as disk drives . In certain embodiments a storage controller may provide functionality including without limitation disk aggregation and redundancy e.g. RAID input output routing and error detection and recovery. Storage controller may be communicatively coupled to a single set of devices such as disk drives or to multiple sets of such devices. Storage controller may be communicatively coupled to such devices through any suitable combination of intervening equipment such as any necessary cabling storage interfaces or backplanes.

As depicted in switch may have coupled thereto one or more slots . A slot may include any system device or apparatus configured to allow addition of one or more expansion cards to chassis in order to electrically couple such expansion cards to a switch . Such slots may comprise any suitable combination of full height risers full height slots and low profile slots. In operation switches may manage switching of communications between individual information handling systems and expansion cards coupled to slots . In some embodiments slots may be nonshared e.g. each slot is associated with a single information handling system . In other embodiments one or more of slots may be shared among two or more information handling systems . In these and other embodiments one or more slots may be configured to be compatible with PCIe generalized PC bus switch Infiniband or other suitable communication specification standard or protocol.

In the example of each disk drive may include computer readable media e.g. magnetic storage media optical storage media opto magnetic storage media and or other type of rotating storage media flash memory and or other type of solid state storage media and may be generally operable to store data and or programs e.g. one or more operating systems and or one or more application programs . Although disk drives are depicted as being internal to chassis in in some embodiments one or more disk drives may be located external to chassis e.g. in one or more enclosures external to chassis .

When a system e.g. system is architected so as to allow information handling information handling resources e.g. PCIe adapters coupled to slots to be located in a chassis having shared resources such that the information handling resources may be assigned to one information handling system or shared among a plurality of information handling resources challenges may arise when needing to service an information handling resource.

Shared resources or devices such as PCIe adapters coupled to slots may be virtualized across multiple information handling systems . Non shared resources or devices may be partitioned such that they are visible only to a single information handling system at time. Chassis management controller may be configured to handle routing and switching through switches to affect sharing or a resource to multiple information handling systems or to affect dedicated assignment of a resource to a single information handling system .

Chassis may include a chassis management controller communicatively coupled to switches . The APIs of chassis management controller may provide the interface to for configuring IOV. Chassis management controller may be configured to manage both switches .

Chassis may include multiple information handling systems . Chassis may include any suitable number of information handling systems . In one embodiment information handling systems may be referred to as blades .

Each information handling system may include cards as described in association with . Switches may contain PCIe cards instead of typical blade Ethernet Fibre Channel or InfiniBand cards. Interfaces of the information handling systems may attach to switches through the cards of switches . Switches may connect information handling systems to slots . Slots may include one or more of the slots of in any suitable combination.

In one embodiment each of information handling systems may be communicatively coupled to each of switches through one of interfaces resident on the information handling system . For example information handling system may be communicatively coupled to switch through interface and to switch through interface . Information handling system may be communicatively coupled to switch through interface and to switch through interface . Thus each of switches may provide its switching fabric to each of information handling systems in order to route the given information handling system to respective slots associated with the switch .

Slots may be configured to connect to associated devices though fewer devices may be present than the associated capacity of chassis . Chassis may include any suitable number of slots . In one embodiment devices may include PCIe based cards or devices. Each such device may represent an information handling resource to be selectively for example shared among multiple information handling systems or dedicated to a single information handling system . Device may comprise any suitable device such as a RAID controller network card or other information handling resource. In one further embodiment devices may include PCIe based storage cards or devices. In another embodiment devices may include SSD storage cards or devices.

In order to support IOV the driver and firmware of device may include support for SR IOV. To maintain routes between given information handling systems and slots switches may include virtual hierarchies from slots to information handling systems . Particular functions such as virtual functions or shared functions for single root IOV for a given device may be mapped in switch providing behavior similar to MR IOV. In one embodiment wherein device contains multiple information handling resources such as a storage device and a USB interface a function may be provided for each such information handling resource. Thus from the perspective of information handling systems the multiple such information handling resources may appear to be separate and unrelated. Furthermore a virtual function may be provided for each such information handling system that may share access to device . A given slot or device which has been virtualized may be accessed by such two or more virtual functions which allow the sharing of the resource. Physical functions as opposed to the above described virtual functions or shared functions may be mapped or stored in chassis management controller . A physical function representing an information handling resource may be provided to a single information handling system . In cases where a device contains multiple information handling resources individual physical functions may be provided for each such resource. Multiple instances of a virtual function may be provided to multiple information handling systems . If for example multiple information handling systems are sharing a device that is a storage device then access to device may be divided into multiple storage devices using virtual functions each of which are mapped by switches to the respective information handling system . Furthermore specific APIs for accessing a given device may be mapped or stored in chassis management controller .

In operation a single root IOV information handling resource such as device may be communicatively coupled to multiple information handling systems such as information handling system and information handling system . Devices such as device may be virtualized or shared through control within chassis such as control by chassis management controller .

Code executing on information handling system or information handling system may access device through calling functions in an API. The code executing simultaneously on each such information handling system may issue commands or functions that are to be executed on device . Device may respond to the specific information handling system that initiated the command to notify that the command has completed. Furthermore device may communicate with particular one or more of information handling systems that need to be notified of an event that specifically addresses a given information handling system . For a given response or notice device may avoid communicating with information handling systems that do not need to receive a copy of the response or notice.

As described in associated with and access to device may be made for a plurality of hosts . Hosts may each implement any suitable computing entity such as information handling systems e.g. as information handling systems virtual information handling systems e.g. as virtual information handling systems or multiple operating systems or virtual machines on a given information handling system. Hosts may connect to device through a switch e.g. switch interconnect e.g. as PCIe interconnect and switching domains or any other suitable mechanism. In one embodiment access to device by hosts may be virtualized. In order to facilitate such virtualization device may provide virtualization functions configured to provide access for an individual host. Furthermore such virtualization may be provided by a hypervisor with functions or API calls. The virtual functions may include logic code or instructions resident with a memory of device such as memory or within I O command logic . With regards to the example of a link may be established between device and an information handling system such as information handling system such that access by information handling system of device is made through the virtual function. With regards to the example of a link may be established between device and an application operating system driver or other entity executing on virtual information handling system .

Device may include device resources used in the operation of device . Such resources may include for example memory data structures in memory functions in memory ports registers or processor resources. These device resources may be accessed or otherwise used in the operation of device through APIs shared libraries functions or other mechanisms to allow the use of device by other entities. In one embodiment access of functions within the API for device may be made according to virtual functions. Such virtual functions may be provided by hypervisor .

Device include a memory coupled to a processor . Memory may be implemented by a computer readable media. Processor include any system device or apparatus configured to interpret and or execute program instructions and or process data and may include without limitation a microprocessor microcontroller digital signal processor DSP application specific integrated circuit ASIC or any other digital or analog circuitry configured to interpret and or execute program instructions and or process data. Processor may interpret and or execute program instructions and or process data stored in memory . The program instructions and or process data stored in memory may be configured to cause device to operate in the manner described above and herein.

The execution of commands by initiated by hosts in device may be accomplished through an initiator responder protocol. A function may be associated with one or more command queues. Furthermore multiple functions may be associated with the same one or more command queues. In embodiments utilizing virtual functions each such virtual function instance may be associated with a different command queue. Command queues may be implemented within memory . Command queues may include submission queues in which a command to be executed by or on device is submitted for execution. A command submitted for execution in a submission queue may be executed by device through any suitable process of workflow management. Furthermore command queues may include completion queues in which the results or notifications resulting from the executed commands are returned. The results or notifications may be placed in an appropriate completion queue by device after execution of the command taken from the submission queue. A command queue may be specific to an individual command or function for device or may be shared among multiple such commands or functions. Such sharing among multiple commands or functions may be made among commands or functions of similar scope type or effect. In order to distinguish among multiple completion queues each completion queue may include a unique identifier. Such a unique identifier may be used to register a given host information handling system or virtual function to receive outputs from the completion queue.

In some applications communication between a storage device and an information handling system may be conducted through message passing utilizing an external link to a subscriber such as a Serial Attached Small Computer System Interface Ethernet or Infiniband. Such a communications link is outside the infrastructure of a storage device or a storage subsystem including the storage device and may cause overhead or latency. If the storage device is shared among multiple information handling systems or hosts each write to the storage device or change in status of the storage device may cause a message to be generated to each of the systems sharing the device. The generation and sending of such a message may be expensive in terms of computing resources. Furthermore the serial nature of some communications paths may cause the handling of a message by multiple entities causing further computing resource usage.

However device may perform such communication through command queues implemented within device or within a system hosting device . Device may include any suitable number or combination of such command queues. Device may include one or more command queues specific to functions one or more command queues specific to an individual or class of commands from a function or one or more command queues shared by functions. For example device may include a submission queue associated with a completion queue . These queues may be associated with an instance of a function such as a virtual function and may accept commands issued through the function. Device may include another submission queue associated with another completion queue . These queues may be associated with another function and may accept commands the other function. Furthermore device may include yet another set of submission queues configured to accept commands or functions issued through yet another function. Submission queues may be associated with a shared completion queue .

Each submission queue may be communicatively coupled to an execution candidate pool . Device may be configured to utilize execution candidate pool to determine how to prioritize balance or otherwise manage entries in submission queues for execution by device . Execution candidate pool may be implemented in memory and by any suitable mechanism such as a function library module software application script or other entity.

Execution candidate pool may be communicatively coupled to command execution unit and configured to send commands to command execution unit as they are selected for execution from execution candidate pool . Command execution unit may coordinate processing and memory resources such that a command identified from execution candidate pool is executed by device . Furthermore command execution unit may be configured to determine results of execution by device . Command execution unit may be implemented in memory and by any suitable mechanism such as a function library module software application script or other entity.

Command execution unit may be communicatively coupled to one or more command completion units such as command completion unit command completion unit or multicast command completion unit . Command execution unit may be configured to send results of execution to one or more of the command completion units. In one embodiment command execution unit may be configured to send results of execution to a command completion unit associated with the submission queue from which the command was entered. In another embodiment command execution unit may be configured to send results of execution to each command completion unit wherein the command completion units will determine to which completion queues results will be sent.

Command completion unit command completion unit or multicast command completion unit may each be configured to determine for a received result from command execution unit which if any completion queue should receive results. Furthermore command completion unit command completion unit or multicast command completion unit may each be configured to determine for a received result from command execution unit which if any hosts should be specifically notified that a result is waiting in a given completion queue based upon a previously submitted command. Thus each of command completion unit command completion unit or multicast command completion unit may each be communicatively coupled to one or more completion queues and one or more hosts . For example command completion unit may be communicatively coupled to completion queue and host command completion unit may be communicatively coupled to submission queue and host and multicast command completion unite may be communicatively coupled to shared completion queue and to hosts . Each of command completion unit command completion unit and multicast command completion unit may be implemented in any suitable manner such as with an interrupt vector controller function library module software application script or other entity.

Each of command completion unit command completion unit and multicast command completion unit may be configured to send an interrupt message to one or more hosts that have submitted a command to a respective submission queue associated with the completion unit. The interrupt message may indicate that a new result is available on the associated completion queue. Each of command completion unit command completion unit and multicast command completion unit may determine which of hosts submitted a command into a submission queue yielding a waiting result in a completion queue through registration of host with a function associated with the respective submission queue. For example command completion unit may communicate an interrupt to host based on use of a function by host to access device resulting in a command entered into submission queue . In another example command completion unit may communicate an interrupt to host based on use of another function by host to access device resulting in a command entered into submission queue . In yet another embodiment multicast command completion unit may communicate an interrupt to hosts based on use of yet another function by hosts to access device resulting in a command entered into shared submission queue .

In order to receive a notification from a given command completion unit hosts may register with device through its associated functions. Thus for example host may register with device to receive completion queue notifications for completion queue and shared completion queue for submissions through submission queue and submission queue and host may register with device to receive completion queue notifications for completion queue and shared completion queue for submissions through submission queue and submission queue .

Each of completion queues and or command completion units may include a unique identifier to identify the queue among the other queues or the unit among the other units. The unique identifier may be discoverable by entities such as hosts or by internal functions of device that handle access of device for hosts . Upon registration for notifications of a given completion queue an interrupt vector for the entity requesting notification must be specified and stored or otherwise made accessible by the associated interrupt vector controller.

In the example of host may have registered itself with a workflow including submission queue completion queue and command completion unit in association with a function. Such a workflow may be utilized for a function or command set that does not require wide notification of results or completion such as a read function. The read function may include read from disk. As host initiates the request for the read host may be the only necessary recipient as opposed to host for example of an indication that the read has completed or that the contents resulting from the read are available. The indication may include an interrupt issued from command completion unite that a completed entry is available in completion queue .

Similarly host may have registered itself with an associated workflow including submission queue completion queue and interrupt vector controller . Such a workflow utilized for a function or command set that does not require wide notification of results or completion such as a read function. The read function may include read from disk. As host initiates the request for the read host may be the only necessary recipient as opposed to host of an indication that the read has completed or that the contents resulting from the read are available. The indication may include an interrupt issued from command completion unit that a completed entry is available in completion queue .

For functions such as write wherein multiple entities may need notification that an underlying storage resource has changed hosts may have both registered themselves with a workflow including shared completion queue and multicast command completion unit . Each of hosts may issue their write commands to respective submission queues . As either may initiate the request for the write and because both hosts may be affected by such a write by any entity both hosts may be the recipients of an indication that the write has completed. The indication may include an interrupt issued from multicast command completion unit to all registered hosts such as hosts .

In one embodiment the functions associated with each of submission queues may be virtual functions replicating the same underlying functionality. Such virtual functions may be configured to virtualize the simultaneous access of device with regards to particular functionality. Furthermore the functions associated with each of submission queues may be virtual functions replicating the same underlying functionality and may be configured to virtualize the simultaneous access of device with regards to particular functionality.

In operation information host through use of a given function may register itself with a workflow including completion queue and command completion unit to receive notifications from command completion unit that results are available in completion queue . Such results may include results from commands submitted through submission queue . Furthermore host through use of another function may register itself with a workflow including multicast command completion unite and shared completion queue to receive notifications from multicast command completion unit that results are available on shared completion queue . Such results may include results from commands submitted through submission queue . In one embodiment such results may also include results from commands submitted through submission queue . Host through its use of a yet another function may register itself with a workflow including completion queue and command completion unit to receive notifications from command completion unit that results are available in completion queue . Such results may include results from commands submitted through submission queue . Furthermore host through use of still yet another function may register itself with a workflow including multicast command completion unit and shared completion queue to receive notifications from multicast command completion unit that results are available on shared completion queue . Such results may include results from commands submitted through submission queue . In one embodiment such results may also include results from commands submitted through submission queue .

Host may attempt to access the resources of device through for example a read disk request and may issue a command to submission queue . Device may process the requested commands of submission queue in execution candidate pool and command execution unit with a priority determined in consideration of all other pending commands in other submission queues. Device may execute the command as it is selected for execution by command execution unit and may provide results to the registered completion unit such as command completion unite . Command completion unit may place a result in completion queue indicating that the read command has been completed and the results are available. Command completion unit may generate an interrupt and send it to the registered host . The program or application on host associated with the read command may then take appropriate action.

Host may attempt to access the resources of device through example through a read disk request and may issue a command to submission queue . Device may process the requested commands of submission queue in execution candidate pool and command execution unit with a priority determined in consideration of all other pending commands in other submission queues. Device may execute the command as it is selected for execution by command execution unit and may provide the results to the registered completion unit such as command completion unit . Command completion unit may place a result in completion queue indicating that the read command has been completed and the results are available. Command completion unit may generate an interrupt and send it to the registered host . The program or application on host associated with the read command may then take appropriate action.

Host may attempt to access the resources of device through in another example a write disk request and may issue a command to submission queue . Device may process the requested commands of submission queue in execution candidate pool and command execution unit with a priority determined in consideration of all other pending commands in other submission queues. Device may execute the command and send results to the registered completion unit such as multicast command completion unit . Multicast command completion unit may place a result in shared completion queue indicating that the write command has been completed and the shared storage resource may have changed. Multicast command completion unit may generate an interrupt and send it to all registered hosts which may include host and host . Programs or applications on hosts associated with the read may then take appropriate action.

Host may attempt to access the resources of device through in yet another example a write disk request and may issue a command to submission queue . Device may process the requested commands of submission queue in execution candidate pool and command execution unit with a priority determined in consideration of all other pending commands in other submission queues. Device may execute the command and send results to the registered completion unit such as multicast command completion unit . Multicast command completion unit may place a result in shared completion queue indicating that the write command has been completed and the shared storage resource may have changed. Multicast command completion unit may generate an interrupt and send it to all registered hosts which may include host and host . Programs or applications on hosts associated with the read may then take appropriate action.

Consequently a given host or host need not notify other hosts or information handling systems registered to receive results from a completion queue. Furthermore interrupts provided by a given completion queue or unit may be specific to a given function or virtual function.

Method may begin in response to any suitable stimulus or trigger. For example method may be invoked in response to an asset management decision command configuration or setting. In another example method may be invoked after a change in utilization demand or other criteria regarding information handling resources. In these and other embodiments method may be implemented as firmware software applications functions libraries or other instructions continually monitoring for example device chassis or device . In a further embodiment method may be implemented fully or partially by such instructions within device hypervisor I O command logic or chassis management controller .

In step access to a shared information handling resource such as a storage device may be shared or virtualized to a plurality of hosts or information handling systems. Virtualization may be performed by a hypervisor SR IOV or MR IOV through SR IOV. Virtualization of the shared information handling resource may include providing a virtual function for each such host or virtual function access for each such host that will share the virtualized information handling resource. Furthermore a function for possible commands virtualized or otherwise may be provided to access the shared information handling resource.

In step each such host may be registered with any necessary completion queue. Any suitable number and kind of completion queues may be registered with by a given host. One or more such completion queues may be dedicated to a single host while one or more such completion queues may be registered with multiple host. The assignment of a single or multiple host to a given completion queue may depend upon the nature of a command or a set of commands. For example a completion queue for a read disk command may be assigned to a single host while a completion queue for a write disk command may be assigned to every such host accessing the disk.

In step a command for using a resource of the device may be received from an application or program on a given host through the virtual function associated therewith. In step the command may be placed in a submission queue designated to accommodate the command and registered with the host making the request. In step the command may be executed.

In step a notification that the command has been executed may be placed in the associated completion queue. The completion queue may be mapped to one or more hosts that have registered with the completion queue. A completion queue may accept entries completed from one or more submissions queues. In step interrupts indicating the completion of the command may be sent to the registered hosts. The interrupt may be sent through the virtual function associated with the host.

In step it may be determined whether there has been a change in information handling registration such as adding or removing a host from a larger system or the resource needs of a host have changed. If registration has changed then method may proceed to step . If registration has not changed then method may proceed to step . In step method may be optionally repeated as a whole or in part or may be terminated.

Although discloses a particular number of steps to be taken with respect to method it may be executed with greater or lesser steps than those depicted in . In addition although discloses a certain order of steps to be taken with respect to method the steps comprising method may be completed in any suitable order.

Method may be implemented using system components thereof or any other system such as those shown in operable to implement method . In certain embodiments method may be implemented partially or fully in software and or firmware embodied in computer readable media.

Although the present disclosure has been described in detail it should be understood that various changes substitutions and alterations can be made hereto without departing from the spirit and the scope of the disclosure as defined by the appended claims.

