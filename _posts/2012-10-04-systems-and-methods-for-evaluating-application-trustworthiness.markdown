---

title: Systems and methods for evaluating application trustworthiness
abstract: A computer-implemented method for evaluating application trustworthiness may include 1) identify an application subject to a security assessment, 2) identify a secondary identifier used by the application to identify the application to a third-party service to which the application is configured to send a request during execution, 3) query a secondary identity database with the secondary identifier for information about the secondary identifier, and 4) determine whether the application is malicious based at least in part on the information about the secondary identifier. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08869284&OS=08869284&RS=08869284
owner: Symantec Corporation
number: 08869284
owner_city: Mountain View
owner_country: US
publication_date: 20121004
---
With the rise of mobile computing consumers may now access the Internet from anywhere. Mobile computing devices such as cellular telephones tablet computers e book readers and the like have become a ubiquitous part of everyday life. However the ability to access the Internet from these devices also brings the various dangers of the Internet to these devices. Untrusted sources for mobile applications may offer malicious applications for download. Furthermore trusted sources such as digital distribution platforms or application stores for some mobile platforms may sometimes inadvertently host malware. Additionally malicious web pages may exploit vulnerabilities in web browser software that may allow malware to be downloaded to a user s mobile computing device.

Traditional computing security solutions may include installing system level software such as anti virus software on a computing system to monitor activity on the computing system and block quarantine and or eradicate the variety of threats available through an Internet connection. However some mobile computing platforms are restricted and or closed discouraging and or preventing users from installing software of their choice and or from installing system level software that would provide sufficient access for security software to operate effectively. Furthermore some anti malware techniques may be resource intensive potentially harming the performance of a mobile device. Accordingly the instant disclosure identifies a need for additional and improved systems and methods for detecting malware on mobile platforms.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for evaluating application trustworthiness by using one or more secondary identifiers e.g. identifiers normally used to identify the application to systems and or services other than the computing system that installs and or executes the application to identify the application and or one or more characteristics of the application.

In one example a computer implemented method for evaluating application trustworthiness may include 1 identifying an application subject to a security assessment 2 identifying a secondary identifier used by the application to identify the application to a third party service to which the application is configured to send a request during execution 3 querying a secondary identity database with the secondary identifier for information about the secondary identifier and 4 determining whether the application is malicious based at least in part on the information about the secondary identifier.

In some examples the secondary identifier may include a publisher identifier for an advertisement network and or an application identifier for a third party library. In some embodiments identifying the secondary identifier may include 1 parsing a manifest of the application for the secondary identifier 2 performing a static analysis of the application to identify the secondary identifier and or 3 intercepting a communication from the application to the third party service to identify the secondary identifier. In one embodiment identifying the secondary identifier may be in response to checking a digitally signed primary identifier of the application but failing to recognize the digitally signed primary identifier of the application as valid.

In some embodiments determining whether the application is malicious may include 1 determining based on the information about the secondary identifier that the secondary identifier has been associated with at least one malicious application and 2 determining at least in part based on the secondary identifier having been associated with the malicious application that the application subject to the security assessment also is malicious. Additionally or alternatively determining whether the application is malicious may include 1 determining that a digitally signed certificate used as a primary identifier for the application does not match the application 2 determining based at least in part on the digitally signed certificate not matching the application that the application is a potentially repackaged application 3 using the secondary identifier to identify an originally packaged and trusted version of the application and 4 comparing the originally packaged and trusted version of the application with the potentially repackaged application to determine that the application is not malicious.

In one example the computer implemented method may also include performing a remediation action on the application in response to determining that the application is malicious. In this example the computer implemented method may further include 1 identifying an additional secondary identifier used by the application and 2 submitting the additional secondary identifier to the secondary identity database as being associated with a malicious application in response to determining that the application is malicious and identifying the additional secondary identifier used by the application.

In one embodiment a system for implementing the above described method may include 1 an identification module programmed to identify an application subject to a security assessment 2 an analysis module programmed to identify a secondary identifier used by the application to identify the application to a third party service to which the application is configured to send a request during execution 3 a querying module programmed to query a secondary identity database with the secondary identifier for information about the secondary identifier and 4 a determination module programmed to determine whether the application is malicious based at least in part on the information about the secondary identifier. The system may also include at least one processor configured to execute the identification module the analysis module the querying module and the determination module.

In some examples the above described method may be encoded as computer readable instructions on a computer readable storage medium. For example a computer readable storage medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 identify an application subject to a security assessment 2 identify a secondary identifier used by the application to identify the application to a third party service to which the application is configured to send a request during execution 3 query a secondary identity database with the secondary identifier for information about the secondary identifier and 4 determine whether the application is malicious based at least in part on the information about the secondary identifier.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for evaluating application trustworthiness. As will be explained in greater detail below by using secondary identifiers to identify applications and or the maliciousness of applications the systems and methods described herein may correctly evaluate applications even when primary identifiers e.g. application package names and or corresponding digital signatures fail to validate the applications.

The following will provide with reference to detailed descriptions of exemplary systems for evaluating application trustworthiness. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

In addition and as will be described in greater detail below exemplary system may include a querying module programmed to query a secondary identity database with the secondary identifier for information about the secondary identifier. Exemplary system may further include a determination module programmed to determine whether the application is malicious based at least in part on the information about the secondary identifier. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing device server and or server computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

As illustrated in exemplary system may also include one or more databases such as secondary identity database . In one example secondary identity database may be configured to store information and or metadata about one or more secondary identities used by one or more applications e.g. thereby associating some secondary identities with trustworthiness and or associating some secondary identities with maliciousness .

Secondary identity database may represent portions of a single database or computing device or a plurality of databases or computing devices. For example secondary identity database may represent a portion of server in computing system in and or portions of exemplary network architecture in . Alternatively secondary identity database in may represent one or more physically separate devices capable of being accessed by a computing device such as server in computing system in and or portions of exemplary network architecture in .

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device in communication with a server and in some examples server via a network . Computing device may be programmed with one or more of modules and or may store all or a portion of the data in database . Additionally or alternatively server may be programmed with one or more of modules and or may store all or a portion of the data in database .

In one embodiment one or more of modules from may when executed by at least one processor of computing device and or server facilitate computing device and or server in evaluating application trustworthiness. For example and as will be described in greater detail below one or more of modules may cause computing device and or server to 1 identify an application subject to a security assessment 2 identify a secondary identifier used by application to identify application to a third party service to which application is configured to send a request during execution 3 query secondary identity database with secondary identifier for information about secondary identifier e.g. secondary identifier metadata and 4 determine whether application is malicious based at least in part on secondary identifier metadata about secondary identifier .

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation laptops tablets desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Server generally represents any type or form of computing device that is capable of providing facilitating relaying and or exposing a service. Examples of server include without limitation application servers and database servers configured to provide various database services and or run certain software applications.

Server generally represents any type or form of computing device that is capable of storing accessing and or handling queries for a database. Examples of server include without limitation application servers and database servers configured to provide various database services and or run certain software applications.

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a Wide Area Network WAN a Local Area Network LAN a Personal Area Network PAN the Internet Power Line Communications PLC a cellular network e.g. a Global System for Mobile Communications GSM network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between computing device server and server .

As illustrated in at step one or more of the systems described herein may identify an application subject to a security assessment. For example at step identification module may as part of computing device in identify application subject to a security assessment.

As used herein the term application may refer to any application application package program module script daemon and or process that may execute on a computing system. In some examples the application may include an application e.g. an application package for a mobile computing platform. As used herein the phrase mobile computing platform may include any of a variety of mobile devices including a mobile phone a tablet computer an e book reader a personal digital assistant and the like. As used herein the phrase application package may refer to any file serving as a package and or archive of one or more files e.g. class files resource files asset files manifest files and or certificate files useful for distributing installing and or executing an application. An example of the application package file may include an ANDROID application package file APK .

As used herein the phrase security assessment may refer to any suitable security assessment analysis and or scan. For example the security assessment may include an authentication check a whitelist check a blacklist check a malware scan an intrusion prevention analysis a vulnerability analysis etc. As used herein the term malware may refer to any virus worm Trojan horse spyware and or any other malicious illegitimate and or unauthorized software.

Identification module may identify the application as subject to a security assessment in any of a variety of contexts. For example identification module may identify a download of the application. Additionally or alternatively identification module may identify an attempt to install the application. In some examples identification module may identify a completed installation of the application. In some examples identification module may identify an attempt to execute the application. Additionally or alternatively identification module may identify an update to the application.

Returning to at step one or more of the systems described herein may identify a secondary identifier used by the application to identify the application to a third party service to which the application is configured to send a request during execution. For example at step analysis module may as part of computing device in identify secondary identifier used by application to identify application to third party service to which application is configured to send request during execution.

As used herein the term service may refer to any computing resource application and or system. Accordingly the phrase third party service may refer to any service that operates distinctly from e.g. outside the domain of awareness of and or system scope of a security system that performs the security assessment. In some examples the third party service may be owned and or controlled by a different entity that the security system and or the computing device on which the application is to execute. For example the third party service may include an advertisement network. Additionally or alternatively the third party service may include an Internet based platform and or third party library e.g. such as one or more functions provided via an application programming interface API for FACEBOOK TWITTER GOOGLE PLUS GOOGLE ANALYTICS ENSIGHTEN URCHIN OMNITURE and the like .

As used herein the phrase secondary identifier may refer to any data capable of identifying the application the source of the application and or an entity that owns and or controls the content of the application. In some examples the phrase secondary identifier may refer to an identifier normally used to identify an application to one or more systems and or services other than the computing system that installs and or executes the application. For example identification module may have identified the application on a mobile computing device and analysis module may identify a secondary identifier within the application useful for identifying the application with a service via a remote server.

Analysis module may identify any of a variety of secondary identifiers. For example analysis module may identify a publisher identifier for an advertisement network. For example the publisher identifier may associate the application with an account on the advertisement network facilitating deposits to the account when an advertisement is displayed via the application and or interacted with via the application. Because the advertisement network may require a minimum balance within the account to withdraw money from the account application developers including e.g. untrustworthy application developers may use the same secondary identifier across multiple instances and or versions of the same application and or across differing applications e.g. potentially with a greater consistency than a primary identifier for the application typically used for identifying the application on the computing device on which the application is installed . Accordingly by using the publisher identifier for the advertisement network for identifying the application the systems and methods described herein may potentially identify the application and or an attribute of the application with improved accuracy.

As another example analysis module may identify an application identifier for a third party library. For example analysis module may identify an application identifier that identifies the application for the use of an API for any of a variety of services e.g. such as those provided by FACEBOOK TWITTER GOOGLE PLUS GOOGLE ANALYTICS ENSIGHTEN URCHIN OMNITURE and the like .

Analysis module may identify the secondary identifier in any of a variety of ways. For example analysis module may identify the secondary identifier by parsing a manifest of the application for the secondary identifier. For example analysis module may parse a manifest file stored within an application package that provides metadata describing the application. Additionally or alternatively analysis module may identify the secondary identifier by performing a static analysis of the application. As used herein the phrase static analysis may refer to any process of analyzing an application without executing the application. For example analysis module may search an executable object of the application for the secondary identifier. In another example analysis module may identify the secondary identifier by intercepting a communication from the application to the third party service. For example the communication may be configured to identify the application to the third party service by including the secondary identifier.

Analysis module may identify the secondary identifier in any of a variety of contexts. For example analysis module may identify the secondary identifier in response to checking a digitally signed primary identifier of the application but failing to recognize the digitally signed primary identifier of the application as valid. For example analysis module may determine that a package name of the application does not match a digitally signed certificate accompanying the application. Accordingly analysis module may search for the secondary identifier as an alternative method for identify the application and or determining the trustworthiness of the application.

Using as an example at step analysis module may identify a secondary identifier used by application to identify application to a third party service. Using as an example at step analysis module may identify a secondary identifier used by application to identify application to a third party service.

Returning to at step one or more of the systems described herein may query a secondary identity database with the secondary identifier for information about the secondary identifier. For example at step querying module may as part of computing device in query secondary identity database with secondary identifier for information about secondary identifier e.g. secondary identifier metadata .

As used herein the phrase secondary identity database may refer to any suitable database data structure data store and or other system of associating data items. The secondary identity database may store any of a variety of data items and associations. For example the secondary identity database may associate one or more secondary identifiers with one or more primary application identifiers application publisher identifiers application family identifiers application reputations and or assessments publisher reputations and or assessments and or any other information suitable for determining whether an application with the secondary identifier is likely to be trustworthy.

Querying module may query the secondary identity database in any suitable manner. For example querying module may send the query to a security server with access to the secondary identity database.

Using as an example at step querying module may query secondary identity database with secondary identifier e.g. receiving an association with a malicious application in response . Using as an example at step querying module may query secondary identity database with secondary identifier e.g. resulting in identifying an association between secondary identifier and an original application version of application .

Returning to at step one or more of the systems described herein may determine whether the application is malicious based at least in part on the information about the secondary identifier. For example at step determination module may as part of computing device in determine whether application is malicious based at least in part on secondary identifier metadata about secondary identifier .

Determination module may determine whether the application is malicious based on any of a variety of criteria. For example determination module may determine that the application is malicious by 1 determining based on the information about the secondary identifier that the secondary identifier has been associated with at least one malicious application and 2 determining at least in part based on the secondary identifier having been associated with the malicious application that the application subject to the security assessment also is malicious. As used herein the term malicious as applied to an application may refer to an application that includes malware that contains a vulnerability and or is otherwise illegitimate and or unwanted. For example a security scan performed on the malicious application on a different computing device may have determined that the malicious application is malicious. The security scan may have also identified the secondary identifier within the malicious application and submitted the secondary identifier to the secondary identity database in association with the malicious application and or the determination of maliciousness.

Using as an example at step determination module may determine that application is malicious based on association e.g. indicating that secondary identifier has been used by malicious application .

In some examples determining whether the application is malicious may include 1 determining that a digitally signed certificate used as a primary identifier for the application does not match the application 2 determining based at least in part on the digitally signed certificate not matching the application that the application is a potentially repackaged application 3 using the secondary identifier to identify an originally packaged and trusted version of the application and 4 comparing the originally packaged and trusted version of the application with the potentially repackaged application to determine that the application is not malicious.

Using as an example at step determination module may determine that application is not malicious. For example having identified original application version in association with the secondary identifier determination module may compare original application version with application e.g. by comparing at least a portion of application with at least a portion of original application version . By determining that there are no malicious differences between application and original application version determination module may determine that application is trustworthy and or safe.

In some examples determination module may also perform a remediation action on the application in response to determining that the application is malicious. For example determination module may delete the application quarantine the application report the application warn a user about the application etc. In some examples determination module may further 1 identify an additional secondary identifier used by the application and 2 submit the additional secondary identifier to the secondary identity database as being associated with a malicious application in response to determining that the application is malicious and identifying the additional secondary identifier used by the application. By updating the secondary identity database with information about the additional secondary identifier the systems and methods described herein may identify one or more future malicious applications that make use of the additional secondary identifier.

As explained above by using secondary identifiers to identify applications and or the maliciousness of applications the systems and methods described herein may correctly evaluate applications even when primary identifiers e.g. application package names and or corresponding digital signatures fail to validate the applications. Additionally in some examples these systems and methods may determine that an application is malicious in spite of an apparently validating primary identifier based on a suspicious secondary identifier.

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . In one example secondary identity database from may be stored in primary storage device .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. The phrase computer readable storage medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable storage media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. Compact Disks CDs or Digital Video Disks DVDs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable storage medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable storage medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for evaluating application trustworthiness.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example modules and or data described herein may reside and or execute within a virtual machine. As used herein the phrase virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the phrase virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable storage media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive a secondary identifier of an application transformed transform the secondary identifier into a security assessment determination output a result of the transformation to a user and store the result of the transformation to a secondary identity database.

Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

