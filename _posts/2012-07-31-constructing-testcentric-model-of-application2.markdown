---

title: Constructing test-centric model of application
abstract: A test-centric model of an application is constructed. Each resource specified by each test governing an application is added to the test-centric model. The test or tests specifying an resource are linked to the resource within the test-centric model. A composition of the application is defined using the one or more tests, as the resources specified by the one or more tests, within the test-centric model of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09658945&OS=09658945&RS=09658945
owner: Hewlett Packard Enterprise Development LP
number: 09658945
owner_city: Houston
owner_country: US
publication_date: 20120731
---
A composite application is a software application that is constructed by combining multiple existing functions into a new application. A composite application can use business sources such as existing software components or modules as well as information services including business services and or Internet web services. Such services may be provided in the context of a service oriented architecture SOA for instance. Services expose application programming interfaces APIs which are also referred to as contracts and which define how consumers i.e. applications can interact with the services. A composite application can incorporate the orchestration of its various constituent parts via internal logic that dictates how the functionality provided by these parts interact to generate new derived functionality. By using existing services components and modules a developer thus may be able to develop a composite application in less time than coding an application from scratch. Development and testing of a composite application is typically performed against the resources that the services provide such as their contracts e.g. APIs .

As noted in the background section a composite application is constructed by combining multiple existing functions which may be provided by services and other components into a new application. An underlying challenge of especially complex composite applications is understanding the constituent parts of a composite application. The underlying services and components of the composite application may change over time and may be modified by different developers making it difficult without conducting extensive and time consuming manual analysis exactly what services and components make up the composite application.

Techniques disclosed herein leverage heretofore unrelated testing of such an application to determine the application s constituent resources. A composite application can be referred to as an application under test AUT which is an application that is subjected to a battery of tests to ensure that the application is performing correctly. Each test is predefined and tests one or more separate underlying services or components of an application. Such tests typically interact with the underlying services and do so through the contracts that the services expose. A contract is considered a resource of the test. Thus during development of a composite application as well as afterwards the application is subjected to selected tests to ensure and verify that the application operates properly.

The techniques disclosed herein leverage such existing tests to use them advantageously for a heretofore different purpose for which the tests were not intended determining a test centric model of an application to identify its services from its constituent resources. Each resource specified by each of a number of selected tests is added to a test centric model such as for example as a node of a graph. The test or tests specifying a given resource are linked to the resource within the model. As such the application s composition is defined using the tests in question. A developer can thus use predefined tests resources to determine the actual current services constituting an application.

Within the test centric model of an application various other information can further be linked to the resources contained within the model. Requirements of each test pertaining to an resource can be linked to the resource within the model. Detected defects of a resource can likewise be linked to the resource within the test centric model. As such besides providing for a way to identify the composition of an application precisely the techniques disclosed herein also provide a way by which a developer or tester can enrich information regarding the application such as the requirements of its underlying resources and any found defects within those resources.

As such the composite application is made up of services A B . . . N which are collectively referred to as the services . The services expose contracts which are referred to as resources A B . . . N and which are collectively referred to as the resources . Each resource is a contract belonging to a different service component module or other type of software part each of which is generically encompassed under the term terminology service herein. In a given composite application there can be tens hundreds or even more of such resources . As noted above maintaining the identities of such constituent resources can be a time consuming manual exercise and can be error prone.

The method initializes a test centric model of the composite application . For instance the test centric model may be initialized to be an empty model containing no resources . The test centric model will ultimately define a composition of the application via its constituent resources as identified by tests. As such a list of tests that may ordinarily be used to test the composite application is received . For instance a user may select one or more such tests. It can therefore be said that the identification of such tests is received.

The completeness of the composition of the application as defined by the test centric model may be as complete as the list of tests and the resources used by the tests in the list. However in general a complete battery of such tests is typically maintained to test each different functionality of the composite application . Each such test may stress a different resource or group of resources of the composite application .

What is referred to as the current test is set to any arbitrary test within the list of tests such as the first test within the list. A list of resources specified by the current test is determined or identified . This can be achieved by querying the current test for instance. It is noted that determining the list of resources does not involve running the current test. That is actually using the test for its intended purpose testing one or more resources of the composite application is not performed or achieved. However each test delineates the services or other resources that the test uses.

To query the current test one of three different techniques may be employed. First an interface of the current test may be queried where the interface is particular to the method or the computer program performing the method . As such the test is a priori constructed to be compatible with the method . That is the test is designed to ensure that it has an interface that is compatible with the manner by which the method performs queries of tests.

Second an interface of the current test may be queried but where the interface is particular to the test and it is the method or the computer program performing the method that is a priori constructed to be compatible with the test. That is the method is designed to ensure that it is able to query the interface of the current test. The difference between the former technique and the latter technique is therefore that in the former technique the test is designed in contemplation of the method whereas in the latter technique the method is designed in contemplation of the test.

Third the method or the computer program performing the method may not query the current test directly as in the prior two techniques but rather query middleware that interfaces the method with the test. In this technique the middleware directly queries the test on behalf of the method . The method can thus be designed to just query the middleware and the middleware updated as appropriate to ensure compatibility with any new interfaces of tests that are developed.

It is noted that the resources may be identified in different ways by different tests and different tests may specify or reference the same resources . For example one test may identify an resource via a universal resource locator URL alphanumeric address whereas another test may identify the same resource via an Internet protocol IP numeric address. However in general each resource has some type of generally unique identifier GUID by which the method is able to track whether different tests are referring to the same or difference resource . In another implementation other techniques may be employed though to verify that apparently different resources are indeed different resources .

What is referred to as a current resource is set to any arbitrary resource within the list of resources for the current test such as the first resource within the list. If the current resource is not within the test centric model then the current resource is added to the model . For example the test centric model may be represented as a graph that is initialized in part as having a root node corresponding to the composite application and or the tests that are specified in part where part is performed prior to part . As such the current resource is added to the test centric model by adding a vertex or node representing the current resource to the graph and adding an edge between this node and the root node. It is noted that in other implementations a root node corresponding to the composite application as a whole may not be present such that the current resources are added as representative nodes independently to the graph and a user can define the relationships among the nodes afterwards.

The current test as well as other information in some implementations is linked to the current resource within the test centric model . As such each resource represented within the model has one or more tests linked thereto which are the tests that specify this resource . The other information can include requirements of the current test and or of the composite application as these requirements pertain to the current resource defects of the current resource based on the last or any prior running of the current test in relation to the application and so on. Adding such information to the test centric model renders the model more information rich and thus permits a user to glean a fuller view of the composite application in addition to its constituent resources during examination of the model.

If there are further resources within the list of resources for the current test that have not yet been processed then the current resource is advanced to another resource within this list that has not yet been processed and the method is repeated at part in relation to the new current resource. Otherwise processing of the current test is complete. If there are further tests within the list of tests that have not yet been processed then the current test is advanced to another test within this list that has not yet been processed and the method is repeated at part in relation to the new current test. Otherwise processing of the tests is complete.

The test centric model is output . The test centric model as noted above defines a composition of the composite application via the tests and thus specifies the constituent resources of the application that are referenced by or specified within the tests. Output of the test centric model may be static or dynamic. In a static sense the model can be output by printing a graphical representation of the model such as of the graph and its nodes that have been described. In a dynamic sense the model can be output by displaying such a graphical representation on an electronic or other display device such as a computer monitor or screen and permitting a user to interact with this display to view individual resources in more detail such as the various information that was linked thereto.

Other types of output of the graph and of the test centric model itself can be achieved in other implementations as noted above. For example a graphical representation of the test centric model as a graph and its nodes may be displayed in one window. In other selectable windows the information gathered for each resource in part of the method may be displayed. In such an implementation a user can thus select among the windows to view an overview of the test centric model as a whole as well as to drill down into the model to view details regarding each resource contained within the model.

The computing device includes a processor and a computer readable data storage medium . The computer readable data storage medium can store data representing one or more tests data representing a tests centric model and a computer program . The computer readable data storage medium and may be a magnetic medium a semiconductor medium a volatile medium a non volatile medium and so on.

The processor executes the computer program from the computer readable data storage medium as indicated by the dotted line between the computer program and the processor . Execution of the computer program by the processor causes performance of a method such as the method . As such the computer program processes one or more tests as indicated by the dotted line to construct the test centric model as indicated by the dotted line . By generating the test centric model therefore the computer program identifies the resources of the composite application as has been described.

