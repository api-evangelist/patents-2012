---

title: Efficient distribution of functional extensions to a 3D modeling software
abstract: Functional extensions are provided for use with a modeling software. The functional extensions provide functionality not otherwise provided by the modeling software. The functional extensions are received from a client device by a server and stored in a database. Thereafter, the server transmits the functional extensions to a second client device, sometimes in response to receiving a request for the functional extension from the second client device. The server may update a user profile to indicate that a functional extension was received from a user operating the client device and, additionally, may transmit the functional extension to the second client device when the server receives an indication that the user is operating the second client device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09223593&OS=09223593&RS=09223593
owner: Trimble Navigation Limited
number: 09223593
owner_city: Sunnyvale
owner_country: US
publication_date: 20121114
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 560 086 filed on Nov. 15 2011 entitled Efficient Distribution of Functional Extensions to a 3D Modeling Software the disclosure of which is hereby expressly incorporated herein by reference.

This disclosure relates to three dimensional modeling software and in particular to providing functional extensions to such software via a network connected server.

The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors to the extent it is described in this background section as well as aspects of the description that may not otherwise qualify as prior art at the time of filing are neither expressly nor impliedly admitted as prior art against the present disclosure.

Today professional as well as non professional users in a variety of different fields such as engineering architecture automotive design graphic design advertising fashion design medicine etc. can develop three dimensional 3D models of buildings vehicles and other objects using 3D modeling software that operates on a computing device. A user typically interacts with 3D modeling software via input devices such as a keyboard mouse trackball and or stylus and the drafting document is displayed on a graphical display device such as a computer monitor or screen.

Partially as a result of the many ways in which 3D modeling software is used by different people it is often difficult for a software manufacturer to incorporate features that satisfy the specific needs of every individual user or every group of users. One way of mitigating these unmet needs is for the manufacturer to expose at least some of the functionality and data structures of the software to an Application Programming Interface API function. An API defines the rules and specifications for a software program so that other programs can be designed to use the various resources of that program. In other words the API operates as an interface between programs. Using the API users may add functionality to the 3D modeling software according to their specific needs to augment controls drawing functions application skins and other aspects of the 3D modeling software.

In an embodiment a method in a network server extends the functionality of modeling software. The method includes receiving a functional extension to the modeling software from a first client device via the communication network. The functional extension includes computer readable instructions compatible with the modeling software and provides a modeling function not provided by the modeling software. The method stores the functional extension in a database. The method also includes receiving from a second client device via the communication network a request to provide the functional extension. In response to receiving the request the method provides the functional extension to the second client device.

In a further embodiment a method in a network server extends the functionality of modeling software. The method includes receiving a functional extension to the modeling software from a first client device operated by a registered user via a communication network. The functional extension includes computer readable instructions compatible with the modeling software and provides a modeling function not provided by the modeling software. The method also includes storing the functional extension in a database. Further the method includes updating a record associated with the registered user in a profile server including storing an indication that the functional extension was received from the registered user. The method also includes receiving an indication that the registered user is operating a second client device and providing the functional extension to the second client device.

In another embodiment a tangible computer readable medium stores instructions executable by a processor to perform a method in a network server for extending functionality of modeling software. The instructions are operable to cause the processor to receive a functional extension to the modeling software from a first client device via a communication network. The functional extension includes computer readable instructions compatible with the modeling software and provides a modeling function not provided by the modeling software. The instructions are also operable to store the functional extension in a database. The instructions further include instructions operable to cause the processor to receive from a second client device via the communication network a request to provide the functional extension. The instructions also cause the processor to in response to receiving the request provide the functional extension to the second client device.

In yet another embodiment a tangible computer readable medium stores instructions executable by a processor to perform a method in a network server for extending functionality of modeling software. The instructions are operable to cause the processor to receive a functional extension to the modeling software from a first client device operated by a registered user via a communication network. The functional extension includes computer readable instructions compatible with the modeling software and provides a modeling function not provided by the modeling software. The instructions are also operable to cause the processor to store the functional extension in a database and update a record associated with the registered user in a profile server including storing an indication that the functional extension was received from the registered user. The instructions also cause the processor to receive an indication that the registered user is operating a second client device and provide the functional extension to the second client device.

In still another embodiment a method in a network server extends the functionality of modeling software. The method includes storing in a database a functional extension to the modeling software. The functional extension includes computer readable instructions compatible with the modeling software and provides a modeling function not provided by the modeling software. The method also includes receiving a request from a first client device operated by a first user to provide the functional extension via the communication network. In response to receiving the request the method provides the functional extension to the first client device. The method also provides the functional extension to a second client device operated by the first user.

The figures depict a preferred embodiment of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

In embodiments described below a networked system permits one or more users to access user created functionality of a 3D modeling software program on one or more client devices operating on a local area network LAN or a wide area network WAN . A client device may be a workstation a desktop computer a laptop computer a netbook computer a tablet computer a smart phone a personal digital assistant etc. A user may write computer executable instructions e.g. in the form of an executable script referred to herein as extensions to provide added functionality to the 3D modeling software which may interface with the 3D modeling software through an API. The user may upload the created extensions to a server which may store the extensions in a database also connected to the network. The server allows the user and or one or more other users to retrieve from the database and download the extension at a later time and or on a different client device.

In some embodiments the server stores and or accesses one or more profiles for each user. The profiles include a record for each user of the extensions the user has downloaded and or installed. In this manner the 3D modeling software may contact the server and download and install the extension s associated with the user profile regardless of the client device on which the user happens to be running the 3D modeling software.

In some embodiments the server implements a marketplace for extensions allowing users to upload and sell extensions they have created. The server stores in a user s profile the extensions that the user has uploaded purchased downloaded etc. and the 3D modeling software automatically downloads and installs the extensions associated with a profile when the user runs the 3D modeling software.

In some embodiments which may overlap with the embodiments described above the 3D modeling software operates within a browser application for example as instructions in a scripting language or as a plug in. A user installs the plug in and is able to operate the basic functionality of the 3D modeling software within the browser. Additionally the plug in is operable to contact the server and download one or more of the extensions stored on the database according to a profile associated with the user. Thereafter the plug in incorporates the extension into the operation of the 3D modeling software.

The client device in some embodiments includes a central processing unit CPU to execute computer readable instructions a random access memory RAM unit to store data and instructions during operation program storage including persistent memory to store software applications shared software components such as Dynamic link Libraries DLLs and other programs executed by the CPU and data storage including persistent memory to store data used by the programs stored in the program storage . By way of example the data storage and the program storage may be implemented on a hard disk drive HDD coupled to the CPU via a bus. Generally speaking the components and may be implemented in any suitable manner. For instance while depicted in as a single unit the processor may be one or more processors in one or more physical packages may be either a single core or a multi core processor or may be a general processing unit and a graphics processor. Additionally the processor may be split among one or more sub systems of the client device such as might be the case in a workstation having both a general purpose processor and a graphics subsystem including a specialized processor. Of course the processor may be or include one or more field programmable gate arrays FPGAs digital signal processors DSPs and or application specific integrated circuits ASICs .

In the example implementation of the client device is a personal computer PC . However in general the client device may be any suitable stationary or portable computing device such as a tablet PC a smart phone etc. Although the computing device in the example of includes both storage and processing components the client device in other embodiments can be a so called thin client that depends on another computing device for certain computing and or storage functions. For example in one such embodiment the data storage and the program storage are external to the computing device and are connected to the client device via a network link. Further the client device may be coupled to an input device and an output device . The input device may include for example a pointing device such as a mouse a keyboard a touch screen a trackball device a digitizing tablet or a microphone and the output device may include an LCD display monitor a touch screen or another suitable output device. Using the input device and the output device a user can access a graphical user interface GUI of the client device .

In operation a user operating the client device uses a 3D modeling software application to develop a model of an object or a group of objects. In an embodiment the 3D modeling software is a stand alone application stored in the program storage and executable by the CPU . In another embodiment the 3D modeling software is a software plug in i.e. a software component adding the 3D modeling functionality to a stand alone software application executable by the CPU in conjunction with another software application. Specifically the 3D modeling software is a software plug in executable by the CPU in conjunction with a web browser. With reference to the program storage is depicted as storing a browser application and a plug in enabling the execution in the browser of the 3D modeling functionality. That is the plug in includes a set of instructions executable on the CPU 3QCPU from within the executing web browser . Generally speaking the 3D modeling application plug in provides a set of modeling controls to generate position and variously adjust three dimensional shapes apply textures to the shapes or surfaces define interactions between shapes etc. Models developed using the plug in may be stored as files on a computer readable medium such as the data storage .

According to some embodiments the 3D modeling software whether implemented as a stand alone application or as the plug in includes an interface via which certain functionality and data structures of the 3D modeling software are made accessible to other programs so that the functionality of the 3D modeling software may be extended to include additional features. In an embodiment one or more Application Programming Interfaces APIs provide interfaces to the 3D modeling software e.g. the plug in and or the browser . In the browser and the plug in cooperate to implement the 3D modeling software. As described below with reference to the APIs may include APIs serving different interface roles. In any event the APIs may be stored as instructions in the program storage of the client device or may be integrated in the 3D modeling software. The APIs cooperatively enable a user operating the client device to develop one or more extensions to augment or extend the functionality of the 3D modeling software. By way of example a user may develop a single command interface e.g. a button keystroke etc. that draws a 3D shape not specifically provided for by the 3D modeling software e.g. a cube with a triangular opening in one of the faces . As another example a user may modify the look and feel of the 3D modeling application by creating a skin. The extensions created by a user may be stored as extensions in the program storage and or may be stored as extensions in the data storage .

The APIs may also cooperate with the plug in and the browser to allow a user to interact with a server via the network . With continued reference to the server includes software i.e. computer readable instructions stored on or embodied in a tangible device and executable as hardware or by a stand alone processor implementing an extensions manager and a profile manager each of which is described in greater detail below. Briefly the profile manager facilitates the management of one or more user profiles in a database while the extensions manger facilitates the storage and retrieval from a database of extensions . The server may also include a model manager facilitating the storage and retrieval of models from a database . As depicted in the databases and are each communicatively coupled to the server via the network .

A first embodiment of the 3D modeling software is described with reference to which depicts a technology stack representing an implementation of the system . The technology stack generally includes a client side implemented as a browser and a server side implementing one or more server modules . The client side has three primary layers a user interface UI layer an API layer and a 3D modeling engine layer . In the depicted embodiment the 3D modeling software is implemented as a plug in associated with a web browser e.g. the browser . The plug in which includes a modeling engine forms the 3D modeling engine layer . An API in the API layer exposes functionality and or data structures of the 3D modeling engine . For example in an embodiment the 3D modeling engine is implemented in the JavaScript scripting language and the API is a JavaScript API. The UI layer is implemented using elements of a conventional web programming language such as a hypertext markup language HTML and in particular the HTML5 language and may implement one or more extensions written in a scripting language e.g. JavaScript and or one or more web based graphics libraries . The extensions may correspond to the extensions for extending the functionality of and or the data available to the 3D modeling software.

In the embodiment depicted in the API or the plug in may include functions for communicating with the server . Specifically the API or the plug in may include functions in the plug in or the API or for accessing functions of the browser related to communicating with the extensions manager the profile manager and or the model manager . The functions may include sending authentication information e.g. a profile user name and password uploading a model uploading an extension downloading a model downloading an extension editing information e.g. a list of installed extensions and or models in a profile sending an inventory of currently loaded extensions or any other function necessary to implement the concepts described herein.

The API layer in the technology stack also includes an API exposing the functionality of the plug in to the UI layer and in particular to the extensions . For example in an embodiment the API may be a JavaScript API and the extensions may be written in the JavaScript scripting language.

If the bridge module does not share a programming language with the API the API layer may additionally implement an interface description language module describing the interface of the plug in e.g. describing the bridge module .

A user may create one or more extensions by creating scripts conforming to the API . In an embodiment the API allows a set of instructions in a scripting language i.e. a script or extension interpretable by the 3D modeling engine to access certain classes used by the 3D modeling engine and invoke certain methods used by these classes. For example one or several extensions that utilize the API may be stored in the program storage or the data storage respectively. In an embodiment the extensions are stored in a directory which the 3D modeling engine is configured to automatically access in order to locate and load extension scripts when available. During execution a user may activate a GUI control that causes the 3D modeling engine to interpret one of the extensions that invokes the API . For example one of the extensions may provide a GUI control that when activated causes the 3D modeling engine to draw a non standard shape.

While the extensions may be stored in the program storage and the data storage the user e.g. the user of the client device may also want to share the extensions with others or may want to have ready access to the extensions from a second client device e.g. the client device . To that end the system may allow the user to upload the extensions to the server via the network and the server may store the extensions in the database as extensions . Through the server the system may likewise allow the user to search for request download and install extensions stored in the database including the extensions .

In an embodiment the server includes the extensions manager the profile manager and the model manager . The client e.g. the browser or stand alone application may transmit identification and authentication information over the network to the profile manager operating on the server . The identification and authentication information may in an embodiment include a user name or an email address and a password. The profile manager may receive the identification and authentication information and if the identification is valid and authenticated may recognize the user as having a profile stored in the database . Alternatively the profile manager may allow a new user to create a profile to be stored in the database .

Once the profile manager has authenticated the user and associated the user with the user s profile the profile manager may communicate information from the user s profile to the extensions manager and or to the model manager . In an embodiment the extensions manager allows users to search for extensions stored in the extensions database upload to the database extensions including descriptions of the extensions version information about the extensions and information about the versions of the 3D modeling software with which the extensions are compatible comment on extensions in the database download extensions from the database etc. The extensions manager may also receive information from the profile manager about a particular user e.g. an authenticated user and may receive from or transmit to the authenticated user extensions according to the information in an embodiment. For example the extensions manager may retrieve from the database extensions created by the user may search for and retrieve from the database extensions that were not created by the user may allow the user to find and download from the database one or more extensions previously downloaded etc. The extensions manager may also update or cause to be updated the profile of the authenticated user in some embodiments. In an embodiment the extensions manager may implement a method for commoditizing extensions including buying extensions created by users selling extensions to users allowing users to sell buy extensions to from other users etc.

The model manager may likewise receive information from the profile manager about the particular user and may receive from or transmit to the authenticated user models according to the information. For example the authenticated user may store in the database models created by the user retrieve from the database models created by the user search for and or download models from the database even if the user did not create the models retrieve from the database models previously downloaded from the database etc. In an embodiment the model manager may implement a method for commoditizing models including buying models from users selling models to users allowing users to sell buy models to from other users etc.

In an embodiment the profile includes data about models the user has created and data about models the user has purchased and or downloaded. For example a user may have unrestricted rights to download edit and or share models that the user created which models are identified in the data . Additionally in an embodiment the user may choose the rights associated with any particular model that the user created and the rights associated with each model created by the user may be recorded in the data . The data by comparison may include records related to models that the user has purchased from for example an online marketplace of models or records related to models that user has downloaded or to which the user has been given rights by the model s creator.

Of course the profile also includes data and related to the extensions . For example the profile includes data related to extensions created by the user. Like the models indicated by the data the extensions indicated in the data may be downloadable editable or sharable by the user because the user created the extensions. In an embodiment the user may choose the rights associated with a particular extension that the user created and the rights associated with each extension created by the user may be recorded in the data . The data may record extensions that the user has purchased in embodiments implementing a marketplace for extensions i.e. a means for users to buy and or sell extensions .

It is not always necessary or desirable however for a user to have installed all of the extensions that the user created e.g. the extensions indicated in the data or the extensions that the user downloaded and or purchased e.g. the extensions indicated in the data . For example a user may create an extension solely for the purpose of selling it or making it otherwise available to other users without the user choosing to install the extension on the device on which the user runs the 3D modeling application. For this reason in an embodiment the profile additionally includes data indicating extensions that are currently installed on the user s client device. Thus any particular extension may be indicated in the data as created by the user but not indicated in the data as installed to run on the user s client device. As a result a user may experience a seamless transition between experiences on multiple client devices. That is the user may install one or more extensions to run with the client on the user s tablet computer e.g. the client device and the extensions may be automatically installed to run with the client on the user s desktop computer e.g. the client device upon the user logging into the user s profile.

Abby may also create an extension S which may also be stored as one of the extension scripts A on the laptop computer . After creating the extension S Abby may activate a control in the 3D modeling application plug in A to upload the extension S to the extension database . Accordingly the software may contact the extension manager via the network and may transmit the extension S to the server for storage in the database . The extension manager may instruct the profile manager to update Abby s profile to indicate e.g. in the data that Abby has uploaded the extension S. If Abby installs the extension S on the laptop computer the extension manager may instruct the profile manager to update Abby s profile to indicate e.g. in the data that Abby has installed the extension S. At the end of Abby s session using the laptop computer or after a time period or immediately the profile manager may update Abby s profile in the profile database .

Later Abby may use her tablet computer . The tablet computer has installed on it browser software B which is configured to run an installed 3D modeling application plug in B and an installed API B for running extension scripts. Abby may enter her identification and authentication information into an interface of the plug in B. The information may be transmitted from the tablet to the server and in particular to the profile manager which may receive the identification and authentication information and associate the tablet computer with Abby s profile . The profile manager may read the data indicating that Abby has previously installed extensions A E and S. In an embodiment the profile manager may request from the tablet computer data indicating extensions B installed on the tablet computer and may instruct the extension manager to transmit to the tablet computer any extensions indicated in the data but not installed on the tablet computer . In another embodiment the profile manager may send to the tablet computer a list of extensions indicated in the data and the tablet computer may send a request for extensions not present among the extensions B. In response to the request the extension manager may transmit to the tablet computer the requested extensions. For example when Abby begins using the tablet computer the extensions scripts B may include only the extension A. Upon receiving the data from the profile manager indicating that extensions A E and S are installed the tablet computer may request extensions B E and S from the extension manager . Some or all of this process may occur without any intervention by Abby. That is the process may be automatic and transparent to the user.

As described briefly above the system may also allow a first user to create and upload an extension and a second user to download and install the extension . depicts a block diagram of an embodiment of the system . Abby as before has as the first client device the computer . However in the second client device is a computer operated by Bob. Abby s computer has installed on it the browser software A configured to run the installed 3D modeling application plug in A and the installed API A for running extension scripts. Abby may enter her identification and authentication information into an interface of the plug in A. The information may be transmitted from the computer to the server and in particular to the profile manager which may receive the identification and authentication information and associate the computer with a profile for Abby.

As before Abby may create the extension S which may also be stored as an extension script A on the computer . After creating the extension S Abby may activate a control in the 3D modeling application plug in A to upload the extension S to the extension database . Accordingly the software may contact the extension manager via the network and may transmit the extension S to the server for storage in the database . The extension manager may instruct the profile manager to update Abby s profile to indicate e.g. in the data that Abby has uploaded the extension S. If Abby installs the extension S on the computer the extension manager may instruct the profile manager to update Abby s profile to indicate e.g. in the data that Abby has installed the extension S. In an embodiment Abby may also indicate permissions associated with the extension S. For example Abby may share the extension S with Bob. The extension manager may update information associated with the extension S to indicate that Bob has permissions for the extension S or in some embodiments the profile manager may update a profile for Bob in the profile database to indicate e.g. in data that Bob has permission to use the extension S. In another embodiment Abby may place the extension S for sale or may make it freely available to others.

Meanwhile Bob may be using his computer . Bob s computer has installed on it browser software B which is configured to run the installed 3D modeling application plug in B and the installed API B for running extension scripts. Bob may enter his identification and authentication information into an interface of the plug in B. The information may be transmitted from the computer to the server and in particular to the profile manager which may receive the identification and authentication information and associate the computer with Bob s profile . The profile manager may read the data in Bob s profile indicating that Abby has granted Bob permissions for the extension S. In an embodiment the profile manager may send a message to the browser B to indicate to Bob that Abby has granted permission to use the extension S and asking Bob whether the extension S should be installed on the computer . In another embodiment the browser B perhaps in response to a request from Bob presents a list of available extensions including the extension S. Bob may then request the extension to be downloaded and installed to the computer . Accordingly the extension manager may cause the profile manager to update Bob s profile e.g. the data to reflect that Bob has installed the extension S on the computer .

A set of machine readable instructions stored on a computer readable medium e.g. a memory device and executable by a processor in the server implements one or more methods for efficiently distributing functional extensions to a 3D modeling software. is a flow chart illustrating one such method . In an embodiment the method allows distribution to one computer of an extension created at a second computer. For ease of description here and in the following paragraphs when an action is performed by a processor of the server the action will be attributed to the server . The server receives an extension from a first device such as the client device block . The server stores the received extension in the database block . At a later time the server receives a request from a second device such as the client device to provide the extension block . In response to the request the server provides the extension to the second device block .

In another embodiment a method depicted in as a flow diagram allows transparent distribution of an extension between two client devices operated by the same user. The server receives a first user identification from a first device e.g. the device block . The server receives an extension from the first device block and stores the extension in the database block . The server updates a record e.g. the profile associated with the user identification to associate the received extension with the first user block . Thereafter the server receives an indication that the user is operating a second device e.g. the device block . The server provides the extension to the second device in response to receiving indication that the user is operating the second device block .

In embodiments the distribution of functional extensions may be implemented as an online store i.e. a market place sales outlet etc. . That is a user may upload to the server a functional extension created by the user and the functional extension may be distributed to other users who wish to purchase the functional extension. In some embodiments the user may sell the functional extension to business entity operating the server and the business entity may distribute the functional extension collect payments from other users in exchange for the functional extension and keep the payments collected. In other embodiments the user may upload the functional extension to the server and the business entity operating the server may sell the functional extension to other users keeping as a commission a portion of the payments received for the extension and remitting the remainder of the payments received to the user that uploaded the extension to the server . In still other or overlapping embodiments the functional extension may be distributed according to a subscription plan as described above.

In any event is a flow chart depicting a method for distributing a functional extension from an online store. In the method the server receives the extension from a first user e.g. the operator of the client device block . The server stores the extension as one of the extensions in the database block . The extension is listed among the extensions for sale block such that other users may locate the extension and choose to download it. Thereafter the server may receive a request from a second device e.g. the client device to purchase the extension block . The server may send a request for payment from the operator of the second device for the requested extension block and in response to the request for payment may receive payment from the operator of the second device block . In response to receiving the payment for the requested extension the server may provide the requested extension to the second device block .

The following additional considerations apply to the foregoing discussion. Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

While embodiments above are described as related to a 3D modeling software the structures and functionality presented with respect to the 3D modeling software may be applied to any modeling software. Accordingly the claims are not intended to be limited to a 3D modeling software unless explicitly recited therein.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or a combination thereof registers or other machine components that receive store transmit or display information.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. For example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the invention. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for efficient distribution of functional extensions to a 3D modeling software through the disclosed principles herein. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.

