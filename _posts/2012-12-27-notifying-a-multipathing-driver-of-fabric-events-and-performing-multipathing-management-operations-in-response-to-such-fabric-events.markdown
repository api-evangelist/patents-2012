---

title: Notifying a multipathing driver of fabric events and performing multipathing management operations in response to such fabric events
abstract: A technique manages operation of a host computer having access to a storage volume on a storage system via two or more distinct paths. The technique involves operating a multipathing driver within the host computer, the multipathing driver controlling path access from the host computer to the storage volume. The technique further involves operating a host bus adaptor (HBA) driver within the host computer to interface the host computer to a fabric connecting the host computer to the storage system. The technique further involves conveying fabric topology state change event information from the HBA driver to the multipathing driver to enable the multipathing driver to take action in response to fabric topology state change events. In some arrangements, an event monitoring handler receives fabric event information from registered state change notifications (RSCNs) containing fabric event information from the HBA driver, and forwards that information on to the multipathing driver.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483331&OS=09483331&RS=09483331
owner: EMC IP Holding Company, LLC
number: 09483331
owner_city: Hopkinton
owner_country: US
publication_date: 20121227
---
 Multipathing enables a host computer to direct storage commands among multiple distinct paths to a given storage volume on a data storage system. The host computer typically selects among the paths to enhance performance e.g. for load balancing purposes to respond to failure of a particular path and so on. An example of a multipathing driver which enables such operation is sold under the name PowerPath by EMC Corporation of Hopkinton Mass.

A conventional approach to detecting path errors involves occasional path testing by the multipathing driver of the host computer. Along these lines the multipathing driver sends small computer system interface SCSI commands on demand or periodically to determine which paths are healthy.

For example suppose that a storage processor of a data storage system has temporarily gone offline for a firmware upgrade. The multipathing driver running on the host computer may periodically test a target port of the data storage system using standard commands e.g. SCSI inquiry and SCSI Mode Sense to determine when the target port becomes available again.

Improved techniques involve notifying a multipathing driver of fabric events and performing multipathing management operations in response to such fabric events. Such operation may be more efficient and may provide faster performance than that of a multipathing driver which performs conventional periodic path testing. Additionally such operation enables certain activities to be performed automatically such as auto detection and configuration of target ports auto discovery and notification of inconsistent configurations and auto detection and management of path flakiness.

One embodiment is directed to a method of managing operation of a host computer having access to a storage volume on a storage system via two or more distinct paths. The method includes operating a multipathing driver within the host computer the multipathing driver controlling path access from the host computer to the storage volume on the storage system. The method further includes operating a host bus adaptor HBA driver within the host computer to interface the host computer to a fabric connecting the host computer to the storage system. The method further includes conveying fabric topology state change event information from the HBA driver to the multipathing driver to enable the multipathing driver to take action in response to fabric topology state change events.

In some arrangements the method includes storing and executing an event monitoring handler application by processing circuitry of the host computer to form an event monitoring handler which communicates with the multipathing driver and the HBA driver. In these arrangements the event monitoring handler receives notification messages containing fabric event information from the HBA driver and forwards the fabric event information on to the multipathing driver e.g. as hints in the form of SCSI commands in the form of ioctl calls etc. In certain arrangements the information within the notification messages is gathered from registered state change notifications RSCNs obtained by the HBA driver. In other arrangements such information is received using an iSCSI management application programming interface API i.e. via object visibility functions.

Examples of fabric events which can be reported to the multipathing driver include the addition removal or changing of an initiator. Additional examples include transition of a port to an online or offline state the addition of a target port etc. Further examples include transition of a target to an online or offline state removal of a target and so on.

In some arrangements communications between the event monitoring handler and the HBA driver are via a standardized HBA API. In these arrangements the event monitoring handler takes the form of a daemon operating in user space while the multipathing driver and the HBA driver operate in kernel space. The HBA API takes the form of library which operates as an interface between the event monitoring handler and the HBA driver including any vendor specific libraries .

Accordingly the fabric topology state change event information passes from the HBA driver to the daemon and then to the multipathing driver. As a result there is HBA API integration with the multipathing driver.

Other embodiments are directed to electronic systems and apparatus processing circuits computer program products and so on. Some embodiments are directed to various processes electronic components and circuitry which involve notifying a multipathing driver of fabric events.

An improved technique involves notifying a multipathing driver of fabric events and performing multipathing management operations in response to such fabric events. Such operation may be more efficient and may provide faster performance than that of a conventional periodic path testing approach. Furthermore such operation enables certain activities to be performed automatically such as auto detection and configuration of target ports auto discovery and notification of inconsistent configurations and auto detection and management of path flakiness.

 Storage system refers to one or more manufactured assemblies providing access to associated physical storage. Each assembly might contain physical storage elements such as flash drives and or disk drives or in some cases there may be some assemblies that serve as a front end to associated physical storage residing on one or more separate back end assemblies. One type of storage system referred to as an array has a collection of storage elements along with control circuitry providing host interface s and other functions. An example of such an array is a SAN or NAS based system sold under the name VNX by EMC Corporation. An example of an appliance serving as a front end to separate back end physical storage is a storage controller appliance sold under the name VPLEX by EMC Corporation.

As further shown in multiple paths extend between the host computer and the LUN . A path in the present context may be a so called I T L nexus referring to a particular Initiator port host port Target port storage system port and LUN LUN . The paths are distinct in that they have different host ports and storage system ports . In general the host computer can conduct storage input output IO operations involving the LUN via any of the paths .

It should be understood that depicts a simplified data processing system for purposes of description. In actual implementation the data processing system may resemble or may be more extensive and complex. For example the data processing system may have multiple host computers and multiple storage systems . Additionally the data processing system may employ a complex set of network elements to realize the network e.g. cables switches etc. . In some arrangements a LUN may be accessible at multiple physical locations via distinct storage assemblies buses and paths. Moreover in a real system there will typically be a number of different LUNs accessible to the host computer .

The host computer also includes a host bus adapter s or HBA s which include s hardware circuitry that interfaces the host computer to the network via the HBA driver also see . The host computer may have one or more HBAs and each HBA may have one or more ports .

The multipathing driver typically forms part of an operating system of the host computer . In particular the multipathing driver forms part of a set of drivers that together process the storage I O commands from the applications and file system directed to the storage system . In such an arrangement the multipathing driver may be realized as a so called filter driver that performs special processing for storage IO commands. In this context the term multipathing refers to the process of identifying using and managing the various paths to storage volumes e.g. paths to volume LUN to effect system goals while hiding details of these operations from the application s and file system . Such system goals may include performance goals from the use of parallel operations over multiple paths availability goals from the use of redundancy and fail over techniques and so on.

It should be understood that the HBA driver may refer to a vendor HBA driver which operates vendor HBA hardware. For the purposes of this discussion the HBA driver may further include one or more vendor HBA libraries to enable a common HBA API to invoke various functions in the HBA driver. As will be explained in further detail shortly an event monitoring handler is able to link with this HBA API in order to obtain access to fabric event information available from the HBA driver and then convey that fabric event information to the multipathing driver.

It should be further understood that the processing circuitry can be implemented in a variety of ways including via memory and one or more processors running specialized software stored in the memory. The processing circuitry may include hardware such as application specific ICs ASICs field programmable gate arrays FPGAs and associated programs discrete components analog circuits combinations thereof and so on. In the context of one or more processors running specialized software a computer program product is capable of delivering all or portions of the software to the host computer . The computer program product has a non transitory or non volatile computer readable medium which stores a set of instructions which controls one or more operations of the host computer . Examples of suitable computer readable storage media include tangible articles of manufacture and apparatus which store instructions in a non volatile manner such as CD ROM flash memory disk memory tape memory and the like.

At the multipathing driver receives the storage IO command such as a SCSI read or SCSI write command for a storage operation being performed by the application s or F S . The storage IO command will typically be included in an IO command block passed from a higher level component of the operating system to the multipathing driver as generally known in the art. The storage IO command will include among other things an identification of the volume to which the storage operation is directed .

At the multipathing driver selects a path that is to be used for the storage IO command based on the identification i.e. VOLUME ID of the volume . Such path selection provides load balancing across multiple available paths to the volume as well as continued availability of the volume in the event of failure of a particular path . Furthermore such path selection may be based on fabric topology awareness gathered via HBA API integration e.g. which ports are online which devices have been removed and so on.

At the multipathing driver issues the storage IO command on the selected path . Again referring to the volume of the IO command will be sent to the storage system via a selected one of the paths . The selected path will also be used for the data transfer associated with the IO command as well as the eventual response indicating completion of the IO command as generally known in the art.

As shown in the multipathing driver operates in kernel space along with the SCSI subsystem and HBA driver . As mentioned earlier the HBA driver may represent a vendor HBA driver in combination with a vendor HBA library to provide HBA functionality on particular vendor HBA hardware. As also mentioned earlier the SCSI subsystem may reside above the multipathing driver rather than between the multipathing driver and the HBA driver .

As further shown in an event monitoring handler and an HBA API reside in user space . In some arrangements the HBA API is provided as a common HBA API library. In particular the HBA API may take the form of a single C style library interface which enables any SAN management application to link to the HBA API and thus access any of multiple of vendor specific HBA libraries and drivers. Suitable standards include among others the SNIA Common HBA API which is an industry standard C language API for management of Fibre Channel HBAs and discovery of SAN resources and the iSCSI Management API which defines a standard interface that applications can use to perform iSCSI management independent of the vendor of the iSCSI HBA. In connection with iSCSI a network driver and networking circuitry e.g. a network interface card or NIC are in place of the HBA driver and the HBA also see to enable an initiator to process IOs over a computer network.

As illustrated by the various arrows in showing directions of various communications among particular components the event monitoring handler is constructed and arranged to communicate directly with the multipathing driver and further with the HBA driver via the HBA API . As such the event monitoring handler is able to relay fabric events from the HBA driver to the multipathing driver . Upon receipt of these fabric events the multipathing driver is able to perform multipathing management activities.

One possible implementation for the event monitoring handler is for a daemon process of the host computer to execute an event monitoring handler program e.g. also see the applications and F S in to form a daemon having the event monitoring handler . Further details of how the event monitoring handler conveys fabric event information to the multipathing driver from the HBA driver will now be provided.

Initially the event monitoring handler communicates with the HBA driver also see the HBA in . That is the event monitoring handler first registers with the HBA driver see block in so that the HBA driver will notify the event monitoring handler of future fabric events.

Once the event monitoring handler has properly registered with the HBA driver fabric state changes observed by the HBA driver are reported from the HBA driver to the event monitoring handler via notification messages block in . These notification messages may include fabric event information from registered state change notifications RSCNs which are based on the Fibre Channel protocol. In other arrangements these notification messages may include similar fabric event information obtained via iSCSI management API object visibility functions. One will appreciate that by registering with the HBA driver the event monitoring handler is now able to monitor a variety of fabric events obtained by the HBA driver from other fabric components. Accordingly the event monitoring handler is privy to an assortment of fabric topology state change events.

Upon receipt of each notification message containing fabric topology state change event information from the HBA driver the event monitoring handler conveys that information to the multipathing driver see block in . The multipathing driver is then able to take appropriate action in response to fabric topology state change events.

It should be understood that the formats for the various communications and may be different. Along these lines the communication may take any form suitable for including fabric event information gathered from the HBA driver . Furthermore the communication from the event monitoring handler may take a different form and or comply with a different protocol in order to be processed by the multipathing driver e.g. hints or special SCSI commands ioctl commands and so on .

In some arrangements the event monitoring handler is constructed and arranged to log fabric topology state change events into an event logging facility e.g. a database a file etc. . In particular the event monitoring handler writes each fabric event perhaps with additional information such as current state data time information configuration information etc. to the facility see block in . This recorded information may be further processed e.g. for error analysis and or archived.

It should be understood that the event monitoring handler may process this fabric event information prior to sending it to the multipathing driver . For example if many events relate to the same fabric entity from the perspective of the multipathing driver the event monitoring handler may send a summary or sample event to the multipathing driver . Such processing by the event monitoring handler may prevent the multipathing driver from spending too much time handling these events which could otherwise disrupt performance.

By way of example some event notifications include event types . . . collectively event types containing event codes which along with the additional event details and the context of earlier event notifications can identify particular fabric events.

For example event type i.e. Event Type 513 identifies an HBA EVENT PORT OFFLINE fabric event. That is the HBA driver notifies the event monitoring handler of this fabric event which in turn conveys the fabric event to the multipathing driver also see . Such a fabric event may occur when a port is disabled from a switch.

Additionally event type i.e. Event Type 514 identifies an HBA EVENT PORT ONLINE fabric event. Such a fabric event may occur when a port is enabled from a switch.

Furthermore event type i.e. Event Type 516 identifies an HBA EVENT PORT FABRIC fabric event. Such a fabric event may occur when an array port is disabled from a switch.

Likewise event type i.e. Event Type 516 identifies another HBA EVENT PORT FABRIC fabric event. Such a fabric event may occur when a storage processor of an array is rebooted.

It should be understood that the above described infrastructure is capable of handling a robust set of fabric events such as HBA related events port related events target related events link related events and so on. Table 1 provides a listing of some example event notifications that map to particular fabric events.

The following are few example multipathing management activities which can be performed by the multipathing driver in response to notification of one or more fabric events. It should be understood that other situations and examples are contemplated as well.

Suppose that a service processor has rebooted a storage processor hangs or portions of a data storage array perform a firmware upgrade. Traditionally the multipathing driver polls using standard commands such as SCSI inquiry commands and Mode Sense commands to determine when the associated target port s has come back alive.

However with the above described HBA API integration in which the multipathing driver receives notifications of fabric events the multipathing driver is able to receive fabric notifications in response to target port state changes. Accordingly paths through previously offline target ports are restored more quickly.

Suppose that new target ports are added to the system. On some conventional platforms an administrator manually initiates a bus scan followed by other commands to bring the new target ports under control of the multipathing driver.

However with the above described HBA API integration the multipathing driver or multipathing code running in user space see the daemon in is able to automatically perform a bus scan and other commands in response to the detection of new target ports. Along these lines the multipathing driver is able to automatically detect and configure LUNs exported from the target ports .

Such operation is useful when target ports are taken offline for maintenance and subsequently added back as well as other situations. With such auto detection of online and offline status of the target ports the host computer is able to automatically respond upon receiving notification of the associated fabric events e.g. quickly mark paths alive or dead to prevent further IO failures configure new storage etc. .

With HBA API integration particular HBA attributes can be read and evaluated by the multipathing driver or the daemon . In particular attributes such as port speed frame size world wide number WWN driver version and so on can be accessed and analyzed.

If an inconsistent or unsupported configuration is discovered an alert e.g. from the daemon can be provided to the user. For instance the user may be alerted that certain migration operations are prohibited if port characteristics of multiple IO paths used in the migration do not match. For instance the HBA API can be used to check that the parameters of the HBA s that the source connects through match those parameters for the HBA s the migration destination connects through. If the source accepts larger IOs than the destination the migration might fail if one of the large IOs is processed as a write that has to go to both sides.

Also the attributes can be used to uniquely tag an initiator port so that certain information can be connected to information coming from other sources. Such information may include performance metrics collected over the path or the bus as well as other data.

Using notifications of fabric events the multipathing driver is able to detect intermittent errors where IOs are succeeding at least part of the time. Along these lines the multipathing driver is able to identify the number of port errors that occur during a specific time frame. If the number of port errors exceeds a predefined threshold the multipathing driver is able to take appropriate actions. For example the multipathing driver may move a path from an active mode to a standby mode resulting in future IO commands to be routed only through active paths . Suitable techniques involving management of path operating modes are described in U.S. patent application Ser. No. 13 535 752 the contents and teachings of which are hereby incorporated by reference in their entirety.

Such operation improves performance e.g. latency resource consumption etc. since there will be less retries. Furthermore such operation is an efficient and effective alternative to determining flakiness in the fabric. In particular such operation alleviates the need for the multipathing driver to count and track errors per IO to detect path flakiness.

As described above improved techniques involve notifying a multipathing driver of fabric events and performing multipathing management operations in response to such fabric events. Such operation may be more efficient and may provide faster performance than that of a multipathing driver which performs conventional periodic path testing. Additionally such operation enables certain activities to be performed automatically such as auto detection and configuration of target ports auto discovery and notification of inconsistent configurations and auto detection and management of path flakiness.

While various embodiments of the present disclosure have been particularly shown and described it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the present disclosure as defined by the appended claims.

For example as mentioned above in iSCSI arrangements a network driver and networking circuitry are in place of the HBA driver and the HBA to enable an initiator to process IOs over a computer network. In these arrangements fabric event information is received using an iSCSI management application programming interface API i.e. via object visibility functions. Such modifications and enhancements are intended to belong to various embodiments of this disclosure.

