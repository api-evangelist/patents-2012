---

title: Voice and data exchange over a packet based network
abstract: A voice queue includes a primary queue and a secondary queue. The secondary queue is operable to store voice packets and generate timestamps for the voice packets. The primary queue is operable to receive the voice packets from the secondary queue, store the timestamps for the voice packets, and store sequence numbers for the voice packets.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08588073&OS=08588073&RS=08588073
owner: Broadcom Corporation
number: 08588073
owner_city: Irvine
owner_country: US
publication_date: 20120509
---
The present application is a continuation of U.S. patent application Ser. No. 13 094 732 filed Apr. 26 2011 issued as U.S. Pat. No. 8 199 667 which is a continuation of U.S. patent application Ser. No. 12 203 620 filed Sep. 3 2008 issued as U.S. Pat. No. 7 933 227 which is a continuation of patent application Ser. No. 09 522 185 filed Mar. 9 2000 issued as U.S. Pat. No. 7 423 983 which is a continuation in part of U.S. patent application Ser. No. 09 493 458 filed Jan. 28 2000 issued as U.S. Pat. No. 6 549 587 which is a continuation in part of U.S. patent application Ser. No. 09 454 219 filed Dec. 9 1999 issued as U.S. Pat. No. 6 882 711 priority of each application which is hereby claimed under 35 U.S.C. 120. The present application also claims priority under 35 U.S.C. 119 e to provisional Application No. 60 154 903 filed Sep. 20 1999 Application No. 60 156 266 filed Sep. 27 1999 Application No. 60 157 470 filed Oct. 1 1999 Application No. 60 160 124 filed Oct. 18 1999 Application No. 60 161 152 filed Oct. 22 1999 Application No. 60 162 315 filed Oct. 28 1999 Application No. 60 163 169 filed Nov. 2 1999 Application No. 60 163 170 filed Nov. 2 1999 Application No. 60 163 600 filed Nov. 4 1999 Application No. 60 164 379 filed Nov. 9 1999 Application No. 60 164 690 filed Nov. 10 1999 Application No. 60 164 689 filed Nov. 10 1999 Application No. 60 166 289 filed Nov. 18 1999 Application No. 60 171 203 filed Dec. 15 1999 Application No. 60 171 180 filed Dec. 16 1999 Application No. 60 171 169 filed Dec. 16 1999 Application No. 60 171 184 filed Dec. 16 1999 and Application No. 60 178 258 filed Jan. 25 2000. All of these applications are expressly incorporated herein by referenced as though fully set forth in their entireties.

The present invention relates generally to telecommunications systems and more particularly to a system for interfacing telephony devices with packet based networks.

Telephony devices such as telephones analog fax machines and data modems have traditionally utilized circuit switched networks to communicate. With the current state of technology it is desirable for telephony devices to communicate over the Internet or other packet based networks. Heretofore an integrated system for interfacing various telephony devices over packet based networks has been difficult due to the different modulation schemes of the telephony devices. Accordingly it would be advantageous to have an efficient and robust integrated system for the exchange of voice fax data and modem data between telephony devices and packet based networks.

In one aspect of the present invention a signal processing system includes a voice exchange capable of exchanging voice signals between a network line and a packet based network and a full duplex data exchange capable of exchanging data signals from the network line with demodulated data signals from the packet based network.

In another aspect of the invention a signal processing system includes a voice exchange capable of exchanging voice signals between a first telephony device and a packet based network a full duplex data exchange capable of exchanging data signals from a second telephony device with demodulated data signals from the packet based network and a call discriminator which selectively enables at least one of the voice exchange and the data exchange.

In yet another aspect of the present invention a method of processing signals includes exchanging voice signals between a network line and a packet based network and simultaneously exchanging data signals from the network line with demodulated data signals from the packet based network.

In still yet another aspect of the present invention a method of processing signals includes exchanging voice signals between a first telephony device and a packet based network simultaneously exchanging data signals from a second telephony device with demodulated data signals from the packet based network and discriminating between the voice signals and the data signals and invoking at least one of the voice exchange and the data exchange based on said discrimination.

In still yet another aspect of the present invention a signal transmission system includes a first telephony device which transmits and receives voice signals a second telephony device different from the first telephony device a packet based network and a signal processing system coupling the first and the second telephony devices to the packet based network the signal processing system comprising a full duplex data exchange which exchanges data signals from the second telephony device with demodulated data signals from the packet based network.

It is understood that other embodiments of the present invention will become readily apparent to those skilled in the art from the following detailed description wherein it is shown and described only embodiments of the invention by way of illustration of the best modes contemplated for carrying out the invention. As will be realized the invention is capable of other and different embodiments and its several details are capable of modification in various other respects all without departing from the spirit and scope of the present invention. Accordingly the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.

In a preferred embodiment of the present invention a signal processing system is employed to interface telephony devices with packet based networks. Telephony devices include by way of example analog and digital phones ethernet phones Internet Protocol phones fax machines data modems cable modems interactive voice response systems PBXs key systems and any other conventional telephony devices known in the art. The described preferred embodiment of the signal processing system can be implemented with a variety of technologies including by way of example embedded communications software that enables transmission of information including voice fax and modem data over packet based networks. The embedded communications software is preferably run on programmable digital signal processors DSPs and is used in gateways cable modems remote access servers PBXs and other packet based network appliances.

An exemplary topology is shown in with a packet based network providing a communication medium between various telephony devices. Each network gateway includes a signal processing system which provides an interface between the packet based network and a number of telephony devices. In the described exemplary embodiment each network gateway supports a fax machine a telephone and a modem . As will be appreciated by those skilled in the art each network gateway could support a variety of different telephony arrangements. By way of example each network gateway might support any number telephony devices and or circuit switched packet based networks including among others analog telephones ethernet phones fax machines data modems PSTN lines Public Switching Telephone Network ISDN lines Integrated Services Digital Network T1 systems PBXs key systems or any other conventional telephony device and or circuit switched packet based network. In the described exemplary embodiment two of the network gateways provide a direct interface between their respective telephony devices and the packet based network . The other network gateway is connected to its respective telephony device through a PSTN . The network gateways permit voice fax and modem data to be carried over packet based networks such as PCs running through a USB Universal Serial Bus or an asynchronous serial interface Local Area Networks LAN such as Ethernet Wide Area Networks WAN such as Internet Protocol IP Frame Relay FR Asynchronous Transfer Mode ATM Public Digital Cellular Network such as TDMA IS 13x CDMA IS 9x or GSM for terrestrial wireless applications or any other packet based system.

The exemplary signal processing system can be implemented with a programmable DSP software architecture as shown in . This architecture has a DSP with memory at the core a number of network channel interfaces and telephony interfaces and a host that may reside in the DSP itself or on a separate microcontroller. The network channel interfaces provide multi channel access to the packet based network. The telephony interfaces can be connected to a circuit switched network interface such as a PSTN system or directly to any telephony device. The programmable DSP is effectively hidden within the embedded communications software layer. The software layer binds all core DSP algorithms together interfaces the DSP hardware to the host and provides low level services such as the allocation of resources to allow higher level software programs to run.

An exemplary multi layer software architecture operating on a DSP platform is shown in . A user application layer provides overall executive control and system management and directly interfaces a DSP server to the host see to . The DSP server provides DSP resource management and telecommunications signal processing. Operating below the DSP server layer are a number of physical devices PXD . Each PXD provides an interface between the DSP server and an external telephony device not shown via a hardware abstraction layer HAL .

The DSP server includes a resource manager which receives commands from forwards events to and exchanges data with the user application layer . The user application layer can either be resident on the DSP or alternatively on the host see such as a microcontroller. An application programming interface . API provides a software interface between the user application layer and the resource manager . The resource manager manages the internal external program and data memory of the DSP . In addition the resource manager dynamically allocates DSP resources performs command routing as well as other general purpose functions.

The DSP server also includes virtual device drivers VHDs . The VHDs are a collection of software objects that control the operation of and provide the facility for real time signal processing. Each VHD includes an inbound and outbound media queue not shown and a library of signal processing services specific to that VHD . In the described exemplary embodiment each VHD is a complete self contained software module for processing a single channel with a number of different telephony devices. Multiple channel capability can be achieved by adding VHDs to the DSP server . The resource manager dynamically controls the creation and deletion of VHDs and services.

A switchboard in the DSP server dynamically inter connects the PXDs with the VHDs . Each PXD is a collection of software objects which provide signal conditioning for one external telephony device. For example a PXD may provide volume and gain control for signals from a telephony device prior to communication with the switchboard . Multiple telephony functionalities can be supported on a single channel by connecting multiple PXDs one for each telephony device to a single VHD via the switchboard . Connections within the switchboard are managed by the user application layer via a set of API commands to the resource manager . The number of PXDs and VHDs is expandable and limited only by the memory size and the MIPS millions instructions per second of the underlying hardware.

A hardware abstraction layer HAL interfaces directly with the underlying DSP hardware see and exchanges telephony signals between the external telephony devices and the PXDs. The HAL includes basic hardware interface routines including DSP initialization target hardware control codec sampling and hardware control interface routines. The DSP initialization routine is invoked by the user application layer to initiate the initialization of the signal processing system. The DSP initialization sets up the internal registers of the signal processing system for memory organization interrupt handling timer initialization and DSP configuration. Target hardware initialization involves the initialization of all hardware devices and circuits external to the signal processing system. The HAL is a physical firmware layer that isolates the communications software from the underlying hardware. This methodology allows the communications software to be ported to various hardware platforms by porting only the affected portions of the HAL to the target hardware.

The exemplary software architecture described above can be integrated into numerous telecommunications products. In an exemplary embodiment the software architecture is designed to support telephony signals between telephony devices and or circuit switched networks and packet based networks. A network VHD NetVHD is used to provide a single channel of operation and provide the signal processing services for transparently managing voice fax and modem data across a variety of packet based networks. More particularly the NetVHD encodes and packetizes DTMF voice fax and modem data received from various telephony devices and or circuit switched networks and transmits the packets to the user application layer. In addition the NetVHD disassembles DTMF voice fax and modem data from the user application layer decodes the packets into signals and transmits the signals to the circuit switched network or device.

An exemplary embodiment of the NetVHD operating in the described software architecture is shown in . The NetVHD includes four operational modes namely voice mode voiceband data mode fax relay mode and data relay mode . In each operational mode the resource manager invokes various services. For example in the voice mode the resource manager invokes call discrimination packet voice exchange and packet tone exchange . The packet voice exchange may employ numerous voice compression algorithms including among others Linear 128 kbps G.711 u law A law 64 kbps ITU Recommendation G.711 1988 Pulse code modulation PCM of voice frequencies G.726 16 24 32 40 kbps ITU Recommendation G.726 12 90 40 32 24 16 kbit s Adaptive Differential Pulse Code Modulation ADPCM G.729A 8 kbps Annex A 11 96 to ITU Recommendation G.729 Coding of speech at 8 kbit s using conjugate structure algebraic code excited linear prediction CS ACELP Annex A Reduced complexity 8 kbit s CS ACELP speech codec and G.723 5.3 6.3 kbps ITU Recommendation G.723.1 03 96 Dual rate coder for multimedia communications transmitting at 5.3 and 6.3 kbit s . The contents of each of the foregoing ITU Recommendations being incorporated herein by reference as if set forth in full.

The packet voice exchange is common to both the voice mode and the voiceband data mode . In the voiceband data mode the resource manager invokes the packet voice exchange for exchanging transparently data without modification other than packetization between the telephony device or circuit switched network and the packet based network. This is typically used for the exchange of fax and modem data when bandwidth concerns are minimal as an alternative to demodulation and remodulation. During the voiceband data mode the human speech detector service is also invoked by the resource manager. The human speech detector monitors the signal from the near end telephony device for speech. In the event that speech is detected by the human speech detector an event is forwarded to the resource manager which in turn causes the resource manager to terminate the human speech detector service and invoke the appropriate services for the voice mode i.e. the call discriminator the packet tone exchange and the packet voice exchange .

In the fax relay mode the resource manager invokes a fax exchange service. The packet fax exchange may employ various data pumps including among others V.17 which can operate up to 14 400 bits per second V.29 which uses a 1700 Hz carrier that is varied in both phase and amplitude resulting in 16 combinations of 8 phases and 4 amplitudes which can operate up to 9600 bits per second and V.27ter which can operate up to 4800 bits per second. Likewise the resource manager invokes a packet data exchange service in the data relay mode . The modem packet data exchange may employ various data pumps including among others V.22bisN.22 with data rates up to 2400 bits per second V.32bisN.32 which enables full duplex transmission at 14 400 bits per second and V.34 which operates up to 33 600 bits per second. The ITU Recommendations setting forth the standards for the foregoing data pumps are incorporated herein by reference as if set forth in full.

In the described exemplary embodiment the user application layer does not need to manage any service directly. The user application layer manages the session using high level commands directed to the NetVHD which in turn directly runs the services. However the user application layer can access more detailed parameters of any service if necessary to change by way of example default functions for any particular application.

In operation the user application layer opens the NetVHD and connects it to the appropriate PXD. The user application then may configure various operational parameters of the NetVHD including among others default voice compression Linear G.711 G.726 G.723.1 G.723.1A G.729A G.729B fax data pump Binary V.17 V.29 V.27ter and modem data pump Binary V.22bis V.32bis V.34 . The user application layer then loads an appropriate signaling service not shown into the NetVHD configures it and sets the NetVHD to the On hook state.

In response to events from the signaling service not shown via a near end telephony device hookswitch or signal packets from the far end the user application will set the NetVHD to the appropriate off hook state typically voice mode. In an exemplary embodiment if the signaling service event is triggered by the near end telephony device the packet tone exchange will generate dial tone. Once a DTMF tone is detected the dial tone is terminated. The DTMF tones are packetized and forwarded to the user application layer for transmission on the packet based network. The packet tone exchange could also play ringing tone back to the near end telephony device when a far end telephony device is being rung and a busy tone if the far end telephony device is unavailable. Other tones may also be supported to indicate all circuits are busy or an invalid sequence of DTMF digits were entered on the near end telephony device.

Once a connection is made between the near end and far end telephony devices the call discriminator is responsible for differentiating between a voice and machine call by detecting the presence of a 2100 Hz. tone as in the case when the telephony device is a fax or a modem a 1100 Hz. tone or V.21 modulated high level data link control HDLC flags as in the case when the telephony device is a fax . If a 1100 Hz. tone or V.21 modulated HDLC flags are detected a calling fax machine is recognized. The NetVHD then terminates the voice mode and invokes the packet fax exchange to process the call. If however 2100 Hz tone is detected the NetVHD terminates voice mode and invokes the packet data exchange.

The packet data exchange service further differentiates between a fax and modem by continuing to monitor the incoming signal for V.21 modulated HDLC flags which if present indicate that a fax connection is in progress. If HDLC flags are detected the NetVHD terminates packet data exchange service and initiates packet fax exchange service. Otherwise the packet data exchange service remains operative. In the absence of an 1100 or 2100 Hz. tone or V.21 modulated HDLC flags the voice mode remains operative.

Voice mode provides signal processing of voice signals. As shown in the exemplary embodiment depicted in voice mode enables the transmission of voice over a packet based system such as Voice over IP VoIP H.323 Voice over Frame Relay VoFR FRF 11 Voice Telephony over ATM VTOA or any other proprietary network. The voice mode should also permit voice to be carried over traditional media such as time division multiplex TDM networks and voice storage and playback systems. Network gateway supports the exchange of voice between a traditional circuit switched and a packet based network . In addition network gateways support the exchange of voice between the packet based network and a number of telephones . Although the described exemplary embodiment is shown for telephone communications across the packet based network it will be appreciated by those skilled in the art that other telephony network devices could be used in place of one or more of the telephones such as a HPNA phone connected via a cable modem.

The PXDs for the voice mode provide echo cancellation gain and automatic gain control. The network VHD invokes numerous services in the voice mode including call discrimination packet voice exchange and packet tone exchange. These network VHD services operate together to provide 1 an encoder system with DTMF detection call progress tone detection voice activity detection voice compression and comfort noise estimation and 2 a decoder system with delay compensation voice decoding DTMF generation comfort noise generation and lost frame recovery.

The services invoked by the network VHD in the voice mode and the associated PXD is shown schematically in . In the described exemplary embodiment the PXD provides two way communication with a telephone or a circuit switched network such as a PSTN line e.g. DSO carrying a 64 kb s pulse code modulated PCM signal i.e. digital voice samples.

The incoming PCM signal is initially processed by the PXD to remove far end echos. As the name implies echos in telephone systems is the return of the talker s voice resulting from the operation of the hybrid with its two four wire conversion. If there is low end to end delay echo from the far end is equivalent to side tone echo from the near end and therefore not a problem. Side tone gives users feedback as to how loud they are talking and indeed without side tone users tend to talk too loud. However far end echo delays of more than about 10 to 30 msec significantly degrade the voice quality and are a major annoyance to the user.

An echo canceller is used to remove echos from far end speech present on the incoming PCM signal before routing the incoming PCM signal back to the far end user. The echo canceller samples an outgoing PCM signal from the far end user filters it and combines it with the incoming PCM signal . Preferably the echo canceller is followed by a non linear processor NLP which may mute the digital voice samples when far end speech is detected in the absence of near end speech. The echo canceller may also inject comfort noise which in the absence of near end speech may be roughly at the same level as the true background noise or at a fixed level.

After echo cancellation the power level of the digital voice samples is normalized by an automatic gain control AGC to ensure that the conversation is of an acceptable loudness. Alternatively the AGC can be performed before the echo canceller however this approach would entail a more complex design because the gain would also have to be applied to the sampled outgoing PCM signal . In the described exemplary embodiment the AGC is designed to adapt slowly although it should adapt fairly quickly if overflow or clipping is detected. The AGC adaptation should be held fixed if the NLP is activated.

After AGC the digital voice samples are placed in the media queue in the network VHD via the switchboard . In the voice mode the network VHD invokes three services namely call discrimination packet voice exchange and packet tone exchange. The call discriminator analyzes the digital voice samples from the media queue to determine whether a 2100 Hz a 1100 Hz. tone or V.21 modulated HDLC flags are present. As described above with reference to if either tone or HDLC flags are detected the voice mode services are terminated and the appropriate service for fax or modern operation is initiated. In the absence of a 2100 Hz a 1100 Hz. tone or HDLC flags the digital voice samples are coupled to the encoder system which includes a voice encoder a voice activity detector VAD a comfort noise estimator a DTMF detector a call progress tone detector and a packetization engine .

Typical telephone conversations have as much as sixty percent silence or inactive content. Therefore high bandwidth gains can be realized if digital voice samples are suppressed during these periods. A VAD operating under the packet voice exchange is used to accomplish this function. The VAD attempts to detect digital voice samples that do not contain active speech. During periods of inactive speech the comfort noise estimator couples silence identifier SID packets to a packetization engine . The SID packets contain voice parameters that allow the reconstruction of the background noise at the far end.

From a system point of view the VAD may be sensitive to the change in the NLP . For example when the NLP is activated the VAD may immediately declare that voice is inactive. In that instance the VAD may have problems tracking the true background noise level. If the echo canceller generates comfort noise during periods of inactive speech it may have a different spectral characteristic from the true background noise. The VAD may detect a change in noise character when the NLP is activated or deactivated and declare the comfort noise as active speech. For these reasons the VAD should be disabled when the NLP is activated. This is accomplished by a NLP on message passed from the NLP to the VAD .

The voice encoder operating under the packet voice exchange can be a straight 16 bit PCM encoder or any voice encoder which supports one or more of the standards promulgated by ITU. The encoded digital voice samples are formatted into a voice packet or packets by the packetization engine . These voice packets are formatted according to an applications protocol and outputted to the host not shown . The voice encoder is invoked only when digital voice samples with speech are detected by the VAD . Since the packetization interval may be a multiple of an encoding interval both the VAD and the packetization engine should cooperate to decide whether or not the voice encoder is invoked. For example if the packetization interval is 10 msec and the encoder interval is 5 msec a frame of digital voice samples is 5 ms then a frame containing active speech should cause the subsequent frame to be placed in the 10 ms packet regardless of the VAD state during that subsequent frame. This interaction can be accomplished by the VAD passing an active flag to the packetization engine and the packetization engine controlling whether or not the voice encoder is invoked.

In the described exemplary embodiment the VAD is applied after the AGC . This approach provides optimal flexibility because both the VAD and the voice encoder are integrated into some speech compression schemes such as those promulgated in ITU Recommendations G.729 with Annex B VAD March 1996 Coding of Speech at 8 kbits s Using Conjugate Structure Algebraic Code Exited Linear Prediction CS ACELP and G.723.1 with Annex A VAD March 1996 Dual Rate Coder for Multimedia Communications Transmitting at 5.3 and 6.3 kbit s the contents of which is hereby incorporated by reference as through set forth in full herein.

Operating under the packet tone exchange a DTMF detector determines whether or not there is a DTMF signal present at the near end. The DTMF detector also provides a pre detection flag which indicates whether or not it is likely that the digital voice sample might be a portion of a DTMF signal. If so the pre detection flag is relayed to the packetization engine instructing it to begin holding voice packets. If the DTMF detector ultimately detects a DTMF signal the voice packets are discarded and the DTMF signal is coupled to the packetization engine . Otherwise the voice packets are ultimately released from the packetization engine to the host not shown . The benefit of this method is that there is only a temporary impact on voice packet delay when a DTMF signal is pre detected in error and not a constant buffering delay. Whether voice packets are held while the pre detection flag is active could be adaptively controlled by the user application layer.

Similarly a call progress tone detector also operates under the packet tone exchange to determine whether a precise signaling tone is present at the near end. Call progress tones are those which indicate what is happening to dialed phone calls. Conditions like busy line ringing called party bad number and others each have distinctive tone frequencies and cadences assigned them. The call progress tone detector monitors the call progress state and forwards a call progress tone signal to the packetization engine to be packetized and transmitted across the packet based network. The call progress tone detector may also provide information regarding the near end hook status which is relevant to the signal processing tasks. If the hook status is on hook the VAD should preferably mark all frames as inactive DTMF detection should be disabled and SID packets should only be transferred if they are required to keep the connection alive.

The decoding system of the network VHD essentially performs the inverse operation of the encoding system. The decoding system of the network VHD comprises a depacketizing engine a voice queue a DTMF queue a precision tone queue a voice synchronizer a DTMF synchronizer a precision tone synchronizer a voice decoder a VAD a comfort noise estimator a comfort noise generator a lost packet recovery engine a tone generator and a precision tone generator .

The depacketizing engine identifies the type of packets received from the host i.e. voice packet DTMF packet call progress tone packet SID packet transforms them into frames which are protocol independent. The depacketizing engine then transfers the voice frames or voice parameters in the case of SID packets into the voice queue transfers the DTMF frames into the DTMF queue and transfers the call progress tones into the call progress tone queue . In this manner the remaining tasks are by and large protocol independent.

A jitter buffer is utilized to compensate for network impairments such as delay jitter caused by packets not arriving at the same time or in the same order in which they were transmitted. In addition the jitter buffer compensates for lost packets that occur on occasion when the network is heavily congested. In the described exemplary embodiment the jitter buffer for voice includes a voice synchronizer that operates in conjunction with a voice queue to provide an isochronous stream of voice frames to the voice decoder .

Sequence numbers embedded into the voice packets at the far end can be used to detect lost packets packets arriving out of order and short silence periods. The voice synchronizer can analyze the sequence numbers enabling the comfort noise generator during short silence periods and performing voice frame repeats via the lost packet recovery engine when voice packets are lost. SID packets can also be used as an indicator of silent periods causing the voice synchronizer to enable the comfort noise generator . Otherwise during far end active speech the voice synchronizer couples voice frames from the voice queue in an isochronous stream to the voice decoder . The voice decoder decodes the voice frames into digital voice samples suitable for transmission on a circuit switched network such as a 64 kb s PCM signal for a PSTN line. The output of the voice decoder or the comfort noise generator or lost packet recovery engine if enabled is written into a media queue for transmission to the PXD .

The comfort noise generator provides background noise to the near end user during silent periods. If the protocol supports SID packets and these are supported for VTOA FRF 11 and VoIP the comfort noise estimator at the far end encoding system should transmit SID packets. Then the background noise can be reconstructed by the near end comfort noise generator from the voice parameters in the SID packets buffered in the voice queue . However for some protocols namely FRF 11 the SID packets are optional and other far end users may not support SID packets at all. In these systems the voice synchronizer must continue to operate properly. In the absence of SID packets the voice parameters of the background noise at the far end can be determined by running the VAD at the voice decoder in series with a comfort noise estimator .

Preferably the voice synchronizer is not dependent upon sequence numbers embedded in the voice packet. The voice synchronizer can invoke a number of mechanisms to compensate for delay jitter in these systems. For example the voice synchronizer can assume that the voice queue is in an underflow condition due to excess jitter and perform packet repeats by enabling the lost frame recovery engine . Alternatively the VAD at the voice decoder can be used to estimate whether or not the underflow of the voice queue was due to the onset of a silence period or due to packet loss. In this instance the spectrum and or the energy of the digital voice samples can be estimated and the result fed back to the voice synchronizer . The voice synchronizer can then invoke the lost packet recovery engine during voice packet losses and the comfort noise generator during silent periods.

When DTMF packets arrive they are depacketized by the depacketizing engine . DTMF frames at the output of the depacketizing engine are written into the DTMF queue . The DTMF synchronizer couples the DTMF frames from the DTMF queue to the tone generator . Much like the voice synchronizer the DTMF synchronizer is employed to provide an isochronous stream of DTMF frames to the tone generator . Generally speaking when DTMF packets are being transferred voice frames should be suppressed. To some extent this is protocol dependent. However the capability to flush the voice queue to ensure that the voice frames do not interfere with DTMF generation is desirable. Essentially old voice frames which may be queued are discarded when DTMF packets arrive. This will ensure that there is a significant inter digit gap before DTMF tones are generated. This is achieved by a tone present message passed between the DTMF queue and the voice synchronizer .

The tone generator converts the DTMF signals into a DTMF tone suitable for a standard digital or analog telephone. The tone generator overwrites the media queue to prevent leakage through the voice path and to ensure that the DTMF tones are not too noisy.

There is also a possibility that DTMF tone may be fed back as an echo into the DTMF detector . To prevent false detection the DTMF detector can be disabled entirely or disabled only for the digit being generated during DTMF tone generation. This is achieved by a tone on message passed between the tone generator and the DTMF detector . Alternatively the NLP can be activated while generating DTMF tones.

When call progress tone packets arrive they are depacketized by the depacketizing engine . Call progress tone frames at the output of the depacketizing engine are written into the call progress tone queue . The call progress tone synchronizer couples the call progress tone frames from the call progress tone queue to a call progress tone generator . Much like the DTMF synchronizer the call progress tone synchronizer is employed to provide an isochronous stream of call progress tone frames to the call progress tone generator . And much like the DTMF tone generator when call progress tone packets are being transferred voice frames should be suppressed. To some extent this is protocol dependent. However the capability to flush the voice queue to ensure that the voice frames do not interfere with call progress tone generation is desirable. Essentially old voice frames which may be queued are discarded when call progress tone packets arrive to ensure that there is a significant inter digit gap before call progress tones are generated. This is achieved by a tone present message passed between the call progress tone queue and the voice synchronizer .

The call progress tone generator converts the call progress tone signals into a call progress tone suitable for a standard digital or analog telephone. The call progress tone generator overwrites the media queue to prevent leakage through the voice path and to ensure that the call progress tones are not too noisy.

The outgoing PCM signal in the media queue is coupled to the PXD via the switchboard . The outgoing PCM signal is coupled to an amplifier before being outputted on the PCM output line

The problem of line echos such as the reflection of the talker s voice resulting from the operation of the hybrid with its two four wire conversion is a common telephony problem. To eliminate or minimize the effect of line echos in the described exemplary embodiment of the present invention an echo canceller with non linear processing is used. Although echo cancellation is described in the context of a signal processing system for packet voice exchange those skilled in the art will appreciate that the techniques described for echo cancellation are likewise suitable for various applications requiring the cancellation of reflections or other undesirable signals from a transmission line. Accordingly the described exemplary embodiment for echo cancellation in a signal processing system is by way of example only and not by way of limitation.

In the described exemplary embodiment the echo canceller preferably complies with one or more of the following ITU T Recommendations G.164 1988 Echo Suppressors G.165 March 1993 Echo Cancellers and 6.168 April 1997 Digital Network Echo Cancellers the contents of which are incorporated herein by reference as though set forth in full. The described embodiment merges echo cancellation and echo suppression methodologies to remove the line echos that are prevalent in telecommunication systems. Typically echo cancellers are favored over echo suppressors for superior overall performance in the presence of system noise such as for example background music double talk etc. while echo suppressors tend to perform well over a wide range of operating conditions where clutter such as system noise is not present. The described exemplary embodiment utilizes an echo suppressor when the energy level of the line echo is below the audible threshold otherwise an echo canceller is preferably used. The use of an echo suppressor reduces system complexity leading to lower overall power consumption or higher densities more VHDs per part or network gateway . Those skilled in the art will appreciate that various signal characteristics such as energy average magnitude echo characteristics as well as information explicitly received in voice or SID packets may be used to determine when to bypass echo cancellation. Accordingly the described exemplary embodiment for bypassing echo cancellation in a signal processing system as a function of estimated echo power is by way of example only and not by way of limitation.

An expander inverts the companding law used to compress the voice decoder output signal to obtain a reference signal . One of skill in the art will appreciated that the voice decoder output signal could alternatively be compressed downstream of the echo canceller so that the expander would not be required. However to ensure that all non linearities in the echo path are accounted for in the reference signal it is preferable to compress expand the voice decoder output signal . A power estimator estimates a short term average power a long term average power a maximum power level and a background power level for the reference signal . The reference signal is input into a finite impulse response FIR filter . The FIR filter models the transfer characteristics of a dialed telephone line circuit so that the unwanted echo may preferably be canceled by subtracting filtered reference signal from the near end signal in a difference operator .

However for a variety of reasons such as for example non linearities in the hybrid and tail circuit estimation errors noise in the system etc. the adaptive FIR filter may not identically model the transfer characteristics of the telephone line circuit so that the echo canceller may be unable to cancel all of the resulting echo. Therefore a non linear processor NLP is used to suppress the residual echo during periods of far end active speech with no near end speech. During periods of inactive speech a power estimator estimates the performance of the echo canceller by estimating a short term average power a long term average power and background power level for an error signal which is an output of the difference operator . The estimated performance of the echo canceller is one measure utilized by adaptation logic to selectively enable a filter adapter which controls the convergence of the adaptive FIR filter . The adaptation logic processes the estimated power levels of the reference signal and the near end signal and and the error signal and to control the invocation of the filter adapter as well as the step size to be used during adaptation.

In the described preferred embodiment the echo suppressor is a simple bypass that is selectively enabled by toggling the bypass cancellation switch . A bypass estimator toggles the bypass cancellation switch based upon the maximum power level of the reference signal the long term average power of the error signal and the long term average power of the near end signal . One skilled in the art will appreciate that a NLP or other suppressor could be included in the bypass path so that the described echo suppressor is by way of example only and not by way of limitation.

In an exemplary embodiment the adaptive filter models the transfer characteristics of the hybrid and the tail circuit of the telephone circuit. The tail length supported should preferably be at least 16 msec. The adaptive filter may be a linear transversal filter or other suitable finite impulse response filter. In the described exemplary embodiment the echo canceller preferably converges or adapts only in the absence of near end speech. Therefore near end speech and or noise present on the input signal may cause the filter adapter to diverge. To avoid divergence the filter adapter is preferably selectively enabled by the adaptation logic . In addition the time required for an adaptive filter to converge increases significantly with the number of coefficients to be determined. Reasonable modeling of the hybrid and tail circuits with a finite impulse response filter requires a large number of coefficients so that filter adaptation is typically computationally intense. In the described exemplary embodiment the DSP resources required for filter adaptation are minimized by adjusting the adaptation speed of the FIR filter .

The filter adapter is preferably based upon a normalized least mean square algorithm NLMS as described in S. Haykin Adaptive Filter Theory and T. Parsons Voice and Speech Processing the contents of which are incorporated herein by reference as if set forth in full. The error signal at the output of the difference operator for the adaptation logic may preferably be characterized as follows 

where e n is the error signal at time n r n is the reference signal at time n and s n is the near end signal at time n and c j are the coefficients of the transversal filter where the dimension of the transversal filter is preferably the worst case echo path length i.e. the length of the tail circuit L and c j for j 0 to L I is given by 

Assuming a block size of one msec or 8 samples at a sampling rate of 8 kHz the short term average power of the reference signal Pis the sum of the last L reference samples and the energy for the current eight samples so that

where is the adaptation step size. One of skill in the art will appreciate that the filter adaptation logic may be implemented in a variety of ways including fixed point rather than the described floating point realization. Accordingly the described exemplary adaptation logic is by way of example only and not by way of limitation.

To support filter adaptation the described exemplary embodiment includes the power estimator that estimates the short term average power of the reference signal P . In the described exemplary embodiment the short term average power is preferably estimated over the worst case length of the echo path plus eight samples i.e. the length of the FIR filter L 8 samples . In addition the power estimator computes the maximum power level of the reference signal P over a period of time that is preferably equal to the tail length L of the echo path. For example putting a time index on the short term average power so that P n is the power of the reference signal at time n. Pis then characterized as max for sec to

where Lmsec is the length of the tail in msec so that Pis the maximum power in the reference signal Pover a length of time equal to the tail length.

The second power estimator estimates the short term average power of the near end signal P in a similar manner. The short term near average power of the error signal the output of difference operator Pis also estimated in a similar manner by the third power estimator .

In addition the echo return loss ERL defined as the loss from R to s in the absence of near end speech is periodically estimated and updated. In the described exemplary embodiment the ERL is estimated and updated about every 5 20 msec. The power estimator estimates the long term average power P of the reference signal in the absence of near end speech. The second power estimator estimates the long term average power P of the near end signal in the absence of near end speech. The adaptation logic computes the ERL by dividing the long term average power of the reference signal P refERL by the long term average power of the near end signal P . The adaptation logic preferably only updates the long term averages used to compute the estimated ERL if the estimated short term power level P of the reference signal is greater than a predetermined threshold preferably in the range of about 30 to 35 dBm0 and the estimated short term power level P of the reference signal is preferably larger than about at least the short term average power P of the near end signal P Pin the preferred embodiment .

In the preferred embodiment the long term averages Pand P are based on a first order infinite impulse response IIR recursive filter wherein the inputs to the two first order filters are Pand P. 1 beta beta and 1 beta beta

Similarly the adaptation logic of the described exemplary embodiment characterizes the effectiveness of the echo canceller by estimating the echo return loss enhancement ERLE . The ERLE is an estimation of the reduction in power of the near end signal due to echo cancellation when there is no near end speech present. The ERLE is the average loss from the input of the difference operator to the output of the difference operator . The adaptation logic in the described exemplary embodiment periodically estimates and updates the ERLE preferably in the range of about 5 to 20 msec. In operation the power estimator estimates the long term average power Pof the near end signal in the absence of near end speech. The power estimator estimates the long term average power Pof P the error signal in the absence of near end speech. The adaptation logic computes the ERLE by dividing the long term average power Pof the near end signal by the long term average power Pof P the error signal . The adaptation logic preferably updates the long term averages used to compute the estimated ERLE only when the estimated short term average power P of the reference signal is greater than a predetermined threshold preferably in the range of about 30 to 35 dBm0 and the estimated short term average power P of the near end signal is large as compared to the estimated short term average power P of the error signal preferably when Pis approximately greater than or equal to four times the short term average power of the error signal 4P . Therefore an ERLE of approximately 6 dB is preferably required before the ERLE tracker will begin to function.

In the preferred embodiment the long term averages Pand P may be based on a first order HR infinite impulse response recursive filter wherein the inputs to the two first order filters are P and P. 1 beta beta and 1 beta beta

It should be noted that PnearERL PnearERLE because the conditions under which each is updated are different.

To assist in the determination of whether to invoke the echo canceller and if so with what step size the described exemplary embodiment estimates the power level of the background noise. The power estimator tracks the long term energy level of the background noise B of the reference signal . The power estimator utilizes a much faster time constant when the input energy is lower than the background noise estimate current output . With a fast time constant the power estimator tends to track the minimum energy level of the reference signal . By definition this minimum energy level is the energy level of the background noise of the reference signal B. The energy level of the background noise of the error signal Bis calculated in a similar manner. The estimated energy level of the background noise of the error signal B. is not updated when the energy level of the reference signal is larger than a predetermined threshold preferably in the range of about 30 35 dBm0 .

In addition the invocation of the echo canceller depends on whether near end speech is active. Preferably the adaptation logic declares near end speech active when three conditions are met. First the short term average power of the error signal should preferably exceed a minimum threshold preferably on the order of about 36 dBm0 P 36 dBm0 . Second the short term average power of the error signal should preferably exceed the estimated power level of the background noise for the error signal by preferably at least about 6 dB P P 6 dB . Third the short term average power of the near end signal is preferably approximately 3 dB greater than the maximum power level of the reference signal less the estimated ERL P P ERL 3 dB . The adaptation logic preferably sets a near end speech hangover counter not shown when near end speech is detected. The hangover counter is used to prevent clipping of near end speech by delaying the invocation of the NLP when near end speech is detected. Preferably the hangover counter is on the order of about 150 cosec.

In the described exemplary embodiment if the maximum power level P of the reference signal minus the estimated ERL is less than the threshold of hearing all in dB neither echo cancellation or non linear processing are invoked. In this instance the energy level of the echo is below the threshold of hearing typically about 65 to 69 dBm0 so that echo cancellation and non linear processing are not required for the current time period. Therefore the bypass estimator sets the bypass cancellation switch in the down position so as to bypass the echo canceller and the NLP and no processing other than updating the power estimates is performed. Also if the maximum power level P of the reference signal minus the estimated ERL is less than the maximum of either the threshold of hearing or background power level Bof the error signal minus a predetermined threshold P ERL

Similarly if the maximum power level P of the reference signal minus the estimated ERL is less than the short term average power Pminus a predetermined threshold P ERL

If the bypass cancellation switch is in the down position the adaptation logic disables the filter adapter . Otherwise for those conditions where the bypass cancellation switch is in the up position so that both adaptation and cancellation may take place the operation of the preferred adaptation logic proceeds as follows 

If the estimated echo return loss enhancement is low preferably in the range of about 0 9 dBm the adaptation logic enables rapid convergence with an adaptation step size . In this instance the echo canceller is not converged so that rapid adaptation is warranted However if near end speech is detected within the hangover period the adaptation logic either disables adaptation or uses very slow adaptation preferably an adaptation speed on the order of about one eighth that used for rapid convergence or an adaptation step size 1 32. In this case the adaptation logic disables adaptation when the echo canceller is converged. Convergence may be assumed if adaptation has been active for a total of one second after the off hook transition or subsequent to the invocation of the echo canceller. Otherwise if the combined loss ERL ERLE is in the range of about 33 36 dB the adaptation logic enables slow adaptation preferably one eighth the adaptation speed of rapid convergence or an adaptation step size 1 32 . If the combined loss ERL ERLE is in the range of about 23 33 dB the adaptation logic enables a moderate convergence speed preferably on the order of about one fourth the adaptation speed used for rapid convergence or an adaptation step size 1 16.

Otherwise one of three preferred adaptation speeds is chosen based on the estimated echo power P refrnax minus the ERL in relation to the power level of the background noise of the error signal. If the estimated echo power P ERL is large compared to the power level of the background noise of the error signal P ERL B 24 dB rapid adaptation convergence is enabled with an adaptation step size on the order of about . Otherwise if P ERL B 18 dB the adaptation speed is reduced to approximately one half the adaptation speed used for rapid convergence or an adaptation step size on the order of about . Otherwise if P ERL B 9 dB the adaptation speed is further reduced to approximately one quarter the adaptation speed used for rapid convergence or an adaptation step size 1 16.

As a further limit on adaptation speed if echo canceller adaptation has been active for a sum total of one second since initialization or an off hook condition then the maximum adaptation speed is limited to one fourth the adaptation speed used for rapid convergence a 1 16 . Also if the echo path changes appreciably or if for any reason the estimated ERLE is negative which typically occurs when the echo path changes then the coefficients are cleared and an adaptation counter is set to zero the adaptation counter measures the sum total of adaptation cycles in samples .

The NLP is a two state device. The NLP is either on applying non linear processing or it is off applying unity gain . When the NLP is on it tends to stay on and when the NLP is off it tends to stay off. The NLP is preferably invoked when the bypass cancellation switch is in the upper position so that adaptation and cancellation are active. Otherwise the NLP is not invoked and the NLP is forced into the off state.

Initially a stateless first NLP decision is created. The decision logic is based on three decision variables D D . The decision variable D is set if it is likely that the far end is active i.e. the short term average power of the reference signal is preferably about 6 dB greater than the power level of the background noise of the reference signal and the short term average power of the reference signal minus the estimated ERL is greater than the estimated short term average power of the near end signal minus a small threshold preferably in the range of about 6 dB. In the preferred embodiment this is represented by P B 6 dB and P ERL P 6 dB . Thus decision variable D attempts to detect far end active speech and high ERL implying no near end . Preferably decision variable D is set if the power level of the error signal is on the order of about 9 dB below the power level of the estimated short term average power of the near end signal a condition that is indicative of good short term ERLE . In the preferred embodiment P P 9 dB is used a short term ERLE of 9 dB . The third decision variable D is preferably set if the combined loss reference power to error power is greater than a threshold. In the preferred embodiment this is P P t where t is preferably initialized to about 6 dB and preferably increases to about 12 dB after about one second of adaptation. In other words it is only adapted while convergence is enabled .

The third decision variable D results in more aggressive non linear processing while the echo canceller is uncoverged. Once the echo canceller converges the NLP can be slightly less aggressive. The initial stateless decision is set if two of the sub decisions or control variables are initially set. The initial decision set implies that the NLP is in a transition state or remaining on.

A NLP state machine not shown controls the invocation and termination of NLP in accordance with the detection of near end speech as previously described. The NLP state machine delays activation of the NLP when near end speech is detected to prevent clipping the near end speech. In addition the NLP state machine is sensitive to the near end speech hangover counter set by the adaptation logic when near end speech is detected so that activation of the NLP is further delayed until the near end speech hangover counter is cleared. The NLP state machine also deactivates the NLP . The NLP state machine preferably sets an off counter when the NLP has been active for a predetermined period of time preferably about the tail length in msec. The off counter is cleared when near end speech is detected and decremented while non zero when the NLP is on. The off counter delays termination of NLP processing when the far end power decreases so as to prevent the reflection of echo stored in the tail circuit. If the near end speech detector hangover counter is on the above NLP decision is overridden and the NLP is forced into the off state.

In the preferred embodiment the NLP may be implemented with a suppressor that adaptively suppresses down to the background noise level B or a suppressor that suppresses completely and inserts comfort noise with a spectrum that models the true background noise.

In an exemplary embodiment of the present invention AGC is used to normalize digital voice samples to ensure that the conversation between the near and far end users is maintained at an acceptable volume. The described exemplary embodiment of the AGC includes a signal bypass for the digital voice samples when the gain adjusted digital samples exceeds a predetermined power level. This approach provides rapid response time to increased power levels by coupling the digital voice samples directly to the output of the AGC until the gain falls off due to AGC adaptation. Although AGC is described in the context of a signal processing system for packet voice exchange those skilled in the art will appreciate that the techniques described for AGC are likewise suitable for various applications requiring a signal bypass when the processing of the signal produces undesirable results. Accordingly the described exemplary embodiment for AGC in a signal processing system is by way of example only and not by way of limitation.

In an exemplary embodiment the AGC can be either fully adaptive or have a fixed gain. Preferably the AGC supports a fully adaptive operating mode with a range of about 30 dB to 30 dB. A default gain value may be independently established and is typically 0 dB. If adaptive gain control is used the initial gain value is specified by this default gain. The AGC adjusts the gain factor in accordance with the power level of an input signal. Input signals with a low energy level are amplified to a comfortable sound level while high energy signals are attenuated.

A block diagram of a preferred embodiment of the AGC is shown in . A multiplier applies a gain factor to an input signal which is then output to the media queue of the network VHD see . The default gain typically 0 dB is initially applied to the input signal . A power estimator estimates the short term average power of the gain adjusted signal . The short term average power of the input signal is preferably calculated every eight samples typically every one ms for a 8 kHz signal. Clipping logic analyzes the short term average power to identify gain adjusted signals whose amplitudes are greater than a predetermined clipping threshold. The clipping logic controls an AGC bypass switch which directly connects the input signal to the media queue when the amplitude of the gain adjusted signal exceeds the predetermined clipping threshold. The AGC bypass switch remains in the up or bypass position until the AGC adapts so that the amplitude of the gain adjusted signal falls below the clipping threshold.

The power estimator also calculates a long term average power for the input signal by averaging thirty two short term average power estimates i.e. averages thirty two blocks of eight samples . The long term average power is a moving average which provides significant hangover. A peak tracker utilizes the long term average power to calculate a reference value which gain calculator utilizes to estimate the required adjustment to a gain factor . The gain factor is applied to the input signal by the multiplier In the described exemplary embodiment the peak tracker may preferably be a non linear filter. The peak tracker preferably stores a reference value which is dependent upon the last maximum peak. The peak tracker compares the long term average power estimate to the reference value. shows the peak tracker output as a function of an input signal demonstrating that the reference value that the peak tracker forwards to the gain calculator should preferably rise quickly if the signal amplitude increases but decrement slowly if the signal amplitude decreases. Thus for active voice segments followed by silence the peak tracker output slowly decreases so that the gain factor applied to the input signal may be slowly increased. However for long inactive or silent segments followed by loud or high amplitude voice segments the peak. tracker output increases rapidly so that the gain factor applied to the input signal may be quickly decreased.

In the described exemplary embodiment the peak tracker should be updated when the estimated short term power exceeds the threshold of hearing. The input of the peak tracker is the estimated short term power level a the previous short term power estimate and the peak tracker output x . In operation when the short term energy is varying rapidly preferably when the previous short term estimate is on the order of four times greater than the current short term estimate or vice versa the peak tracker should go into hangover mode. In hangover mode the peak tracker should not be updated. The hangover mode prevents adaptation on impulse noise.

If the short term energy estimate is large compared to the current peak tracker estimate then the peak tracker should adapt rapidly. In this case t peak tracker output is given by 7 8.

If the short term energy is less than the peak tracker output than the peak tracker will adapt slowly. In this case the peak tracker is given by 255 256.

Referring to a preferred embodiment of the gain calculator slowly increments the gain factor for signals below the comfort level of hearing below minVoice and decrements the gain for signals above the comfort level of hearing above MaxVoice . The described exemplary embodiment of the gain calculator decrements the gain factor for signals above the clipping threshold relatively fast preferably on the order of about 2 4 dB sec until the signal has been attenuated approximately 10 dB or the power level of the signal drops to the comfort zone. The gain calculator preferably decrements the gain factor for signals with power levels that are above the comfort level of hearing MaxVoice but below the clipping threshold Clip relatively slowly preferably on the order of about 0.1 0.3 dB sec until the signal has been attenuated approximately 4 dB or the power level of the signal drops to the comfort zone.

The gain calculator preferably does not adjust the gain factor for signals with power levels within the comfort zone between minVoice and MaxVoice or below the maximum noise power threshold MaxNoise . The preferred values of MaxNoise min Voice MaxVoice Clip are related to a noise floor and are preferably in 3 dB increments. The noise floor is preferably empirically derived by calibrating the host DSP platform with a known load. The noise floor preferably adjustable and is typically within the range of about 45 to 52 dBm. A MaxNoise value of two corresponds to a power level 6 dB above the noise floor whereas a clip level of nine corresponds to 27 dB above noise floor . For signals with power levels below the comfort zone less than minVoice but above the maximum noise threshold the gain calculator preferably increments the gain factor logarithmically at a rate of about 0.1 0.3 dB sec until the power level of the signal is within the comfort zone or a gain of approximately 10 dB is reached.

In the described exemplary embodiment the AGC is designed to adapt slowly although it should adapt fairly quickly if overflow or clipping is detected. From a system point of view AGC adaptation should be held fixed if the NLP see is activated or the VAD see determines that voice is inactive. In addition the AGC is preferably sensitive to the amplitude of received call progress tones. In the described exemplary embodiment rapid adaptation may be enabled as a function of the actual power level of a received call progress tone such as for example a ring back tone compared to the power levels set forth in the applicable standards.

In an exemplary embodiment the VAD in either the encoder system or the decoder system can be configured to operate in multiple modes so as to provide system tradeoffs between voice quality and bandwidth requirements. In a first mode the VAD is always disabled and declares all digital voice samples as active speech. This mode is applicable if the signal processing system is used over a TDM network a network which is not congested with traffic or when used with PCM ITU Recommendation G.711 1988 Pulse Code Modulation PCM of Voice Frequencies the contents of which is incorporated herein by reference as if set forth in full in a PCM bypass mode for supporting data or fax modems.

In a second transparent mode the voice quality is indistinguishable from the first mode. In transparent mode the VAD identifies digital voice samples with an energy below the threshold of hearing as inactive speech. The threshold may be adjustable between 90 and 40 dBm with a default value of 60 dBm The transparent mode may be used if voice quality is much more important than bandwidth. This may be the case for example if a G.711 voice encoder or decoder is used.

In a third conservative mode the VAD identifies low level but audible digital voice samples as inactive but will be fairly conservative about discarding the digital voice samples. A low percentage of active speech will be clipped at the expense of slightly higher transmit bandwidth. In the conservative mode a skilled listener may be able to determine that voice activity detection and comfort noise generation is being employed. The threshold for the conservative mode may preferably be adjustable between 65 and 35 dBm with a default value of 60 dBm.

In a fourth aggressive mode bandwidth is at a premium. The VAD is aggressive about discarding digital voice samples which are declared inactive. This approach will result in speech being occasionally clipped but system bandwidth will be vastly improved. The threshold for the aggressive mode may preferably be adjustable between 60 and 30 dBm with a default value of 55 dBm.

The transparent mode is typically the default mode when the system is operating with 16 bit PCM companded PCM G.711 or adaptive differential PCM ITU Recommendations G.726 December 1990 40 32 24 16 kbit s Using Low Delay Code Exited Linear Prediction and G.727 December 1990 5 4 3 and 2 Sample Embedded Adaptive Differential Pulse Code Modulation . In these instances the user is most likely concerned with high quality voice since a high bit rate voice encoder or decoder has been selected. As such a high quality VAD should be employed. The transparent mode should also be used for the VAD operating in the decoder system since bandwidth is not a concern the VAD in the decoder system is used only to update the comfort noise parameters . The conservative mode could be used with ITU Recommendation G.728 September 1992 Coding of Speech at 16 kbit s Using Low Delay Code Excited Linear Prediction G.729 and G.723.1. For systems demanding high bandwidth efficiency the aggressive mode can be employed as the default mode.

The mechanism in which the VAD detects digital voice samples that do not contain active speech can be implemented in a variety of ways. One such mechanism entails monitoring the energy level of the digital voice samples over short periods where a period length is typically in the range of about 10 to 30 msec . If the energy level exceeds a fixed threshold the digital voice samples are declared active otherwise they are declared inactive. The transparent mode can be obtained when the threshold is set to the threshold level of hearing.

Alternatively the threshold level of the VAD can be adaptive and the background noise energy can be tracked. If the energy in the current period is sufficiently larger than the background noise estimate by the comfort noise estimator the digital voice samples are declared active otherwise they are declared inactive. The VAD may also freeze the comfort noise estimator or extend the range of active periods hangover . This type of VAD is used in GSM European Digital Cellular Telecommunications System Half rate Speech Part 6 Voice Activity Detector VAD for Half Rate Speech Traffic Channels GSM 6.42 the contents of which is incorporated herein by reference as if set forth in full and QCELP W. Gardner P. Jacobs and C. Lee QCELP A Variable Rate Speech Coder for CDMA Digital Cellular in B. S. atal V. Cuperman and A. Gersho eds . the contents of which is incorporated herein by reference as if set forth in full .

In a VAD utilizing an adaptive threshold level speech parameters such as the zero crossing rate spectral tilt energy and spectral dynamics are measured and compared to stored values for noise. If the parameters differ significantly from the stored values it is an indication that active speech is present even if the energy level of the digital voice samples is low.

When the VAD operates in the conservative or transparent mode measuring the energy of the digital voice samples can be sufficient for detecting inactive speech. However the spectral dynamics of the digital voice samples against a fixed threshold may be useful in discriminating between long voice segments with audio spectra and long term background noise. In an exemplary embodiment of a VAD employing spectral analysis the VAD performs auto correlations using Itakura or Itakura Saito distortion to compare long term estimates based on background noise to short term estimates based on a period of digital voice samples. In addition if supported by the voice encoder line spectrum pairs LSPs can be used to compare long term LSP estimates based on background noise to short terms estimates based on a period of digital voice samples. Alternatively FFT methods can be are used when the spectrum is available from another software module.

Preferably hangover should be applied to the end of active periods of the digital voice samples with active speech. Hangover bridges short inactive segments to ensure that quiet trailing unvoiced sounds such as s are classified as active. The amount of hangover can be adjusted according to the mode of operation of the VAD. If a period following a long active period is clearly inactive i.e. very low energy with a spectrum similar to the measured background noise the length of the hangover period can be reduced. Generally a range of about 40 to 300 msec of inactive speech following an active speech burst will be declared active speech due to hangover.

According to industry research the average voice conversation includes as much as sixty percent silence or inactive content so that transmission across the packet based network can be significantly reduced if non active speech packets are not transmitted across the packet based network. In an exemplary embodiment of the present invention a comfort noise generator is used to effectively reproduce background noise when non active speech packets are not received. In the described preferred embodiment. comfort noise is generated as a function signal characteristics received from a remote source and estimated signal characteristics. In the described exemplary embodiment comfort noise parameters are preferably generated by a comfort noise estimator. The comfort noise parameters may be transmitted from the far end or can be generated by monitoring the energy level and spectral characteristics of the far end noise at the end of active speech i.e. during the hangover period . Although comfort noise generation is described in the context of a signal processing system for packet voice exchange those skilled in the art will appreciate that the techniques described for comfort noise generation are likewise suitable for various applications requiring reconstruction of a signal from signal parameters. Accordingly the described exemplary embodiment for comfort noise generation in a signal processing system for voice applications is by way of example only and not by way of limitation.

A comfort noise generator plays noise. In an exemplary embodiment a comfort noise generator in accordance with ITU standards G.729 Annex B or G.723.1 Annex A may be used. These standards specify background noise levels and spectral content. Referring to the VAD in the encoder system determines whether the digital voice samples in the media queue contain active speech. If the VAD determines that the digital voice samples do not contain active speech then the comfort noise estimator estimates the energy and spectrum of the background noise parameters at the near end to update a long running background noise energy and spectral estimates. These estimates are periodically quantized and transmitted in a SID packet by the comfort noise estimator usually at the end of a talk spurt and periodically during the ensuing silent segment or when the background noise parameters change appreciably . The comfort noise estimator should update the long running averages when necessary decide when to transmit a SID packet and quantize and pass the quantized parameters to the packetization engine . SID packets should not be sent while the near end telephony device is on hook unless they are required to keep the connection between the telephony devices alive. There may be multiple quantization methods depending on the protocol chosen.

In many instances the characterization of spectral content or energy level of the background noise may not be available to the comfort noise generator in the decoder system. For example SID packets may not be used or the contents of the SID packet may not be specified see FRF 11 . Similarly the SID packets may only contain an energy estimate so that estimating some or all of the parameters of the noise in the decoding system may be necessary. Therefore the comfort noise generator see preferably should not be dependent upon SID packets from the far end encoder system for proper operation.

In the absence of SID packets or SID packets containing energy only the parameters of the background noise at the far end may be estimated by either of two alternative methods. First the VAD at the voice decoder can be executed in series with the comfort noise estimator to identify silence periods and to estimate the parameters of the background noise during those silence periods. During the identified inactive periods the digital samples from the voice decoder are used to update the comfort noise parameters of the comfort noise estimator. The far end voice encoder should preferably ensure that a relatively long hangover period is used in order to ensure that there are noise only digital voice samples which the VAD may identify as inactive speech.

Alternatively in the case of SID packets containing energy levels only the comfort noise estimate may be updated with the two or three digital voice frames which arrived immediately prior to the SID packet. The far end voice encoder should preferably ensure that at least two or three frames of inactive speech are transmitted before the SID packet is transmitted. This can be realized by extending the hangover period. The comfort noise estimator may then estimate the parameters of the background noise based upon the spectrum and or energy level of these frames. In this alternate approach continuous VAD execution is not required to identify silence periods so as to further reduce the average bandwidth required for a typical voice channel.

Alternatively if it is unknown whether or not the far end voice encoder supports sending SID packets the decoder system may start with the assumption that SID packets are not being sent utilizing a VAD to identify silence periods and then only use the comfort noise parameters contained in the SID packets if and when a SID packet arrives.

A preferred embodiment of the comfort noise generator generates comfort noise based upon the energy level of the background noise contained within the SID packets and spectral information derived from the previously decoded inactive speech frames. The described exemplary embodiment in the decoding system includes a comfort noise estimator for noise analysis and a comfort noise generator for noise synthesis. Preferably there is an extended hangover period during which the decoded voice samples is primarily inactive before the VAD identifies the signal as being inactive changing from speech to noise . Linear Prediction Coding LPC coefficients may be used to model the spectral shape of the noise during the hangover period just before the SID packet is received from the VAD. Linear prediction coding models each voice sample as a linear combination of previous samples that is as the output of an all pole IIR filter. Referring to a noise analyzer determines the LPC coefficients.

In the described exemplary embodiment of the comfort noise estimator in the decoding system a signal buffer receives and buffers decoded voice samples. An energy estimator analyzes the energy level of the samples buffered in the signal buffer . The energy estimator compares the estimated energy level of the samples stored in the signal buffer with the energy level provided in the SID packet. Comfort noise estimating is terminated if the energy level estimated for the samples stored in the signal buffer and the energy level provided in the SID packet differ by more than a predetermined threshold preferably on the order of about 6 dB. In addition the energy estimator analyzes the stability of the energy level of the samples buffered in the signal buffer. The energy estimator preferably divides the samples stored in the signal buffer into two groups preferably approximately equal halves and estimates the energy level for each group. Comfort noise estimation is preferably terminated if the estimated energy levels of the two groups differ by more than a predetermined threshold preferably on the order of about 6 dB. A shaping filter filters the incoming voice samples from the energy estimator with a triangular windowing technique. Those of skill in the art will appreciate that alternative shaping filters such as for example a Hamming window may be used to shape the incoming samples.

When a SID packet is received in the decoder system auto correlation logic calculates the auto correlation coefficients of the windowed voice samples. The signal buffer should preferably be sized to be smaller than the hangover period to ensure that the auto correlation logic computes auto correlation coefficients using only voice samples from the hangover period. In the described exemplary embodiment the signal buffer is sized to store on the order of about two hundred voice samples 25 msec assuming a sample rate of 8000 Hz . Autocorrelation as is known in the art involves correlating a signal with itself. A correlation function shows how similar two signals are and how long the signals remain similar when one is shifted with respect to the other. Random noise is defined to be uncorrelated that is random noise is only similar to itself with no shift at all. A shift of one sample results in zero correlation so that the autocorrelation function of random noise is a single sharp spike at shift zero. The autocorrelation coefficients are calculated according to the following equation 

where k 0 . . . p and p is the order of the synthesis filter see utilized to synthesize the spectral shape of the background noise from the LPC filter coefficients.

Filter logic utilizes the auto correlation coefficients to calculate the LPC filter coefficients and prediction gain using the Levinson Durbin Recursion method. Preferrably the filter logic first preferably applies a white noise correction factor to r 0 to increase the energy level of r 0 by a predetermined amount. The preferred white noise correction factor is on the order of about 257 256 which corresponds to a white noise level of approximately 24 dB below the average signal power. The white noise correction factor effectively raises the spectral minima so as to reduce the spectral dynamic range of the auto correlation coefficients to alleviate ill conditioning of the Levinson Durbin recursion. As is known in the art the Levinson Durbin recursion is an algorithm for finding an all pole IIR filter with a prescribed deterministic autocorrelation sequence. The described exemplary embodiment preferably utilizes a tenth order i.e. ten tap synthesis filter . However a lower order filter may be used to realize a reduced complexity comfort noise estimator.

The signal buffer should preferably be updated each time the voice decoder is invoked during periods of active speech. Therefore when there is a transition from speech to noise the buffer contains the voice samples from the most recent hangover period. The comfort noise estimator should preferably ensure that the LPC filter coefficients is determined using only samples of background noise. If the LPC filter coefficients are determined based on the analysis of active speech samples the estimated LPC filter coefficients will not give the correct spectrum of the background noise. In the described exemplary embodiment a hangover period in the range of about 50 250 msec is assumed and twelve active frames assuming 5 msec frames are accumulated before the filter logic calculates new LPC coefficients.

In the described exemplary embodiment a comfort noise generator utilizes the power level of the background noise retrieved from processed SID packets and the predicted LPC filter coefficients to generate comfort noise in accordance with the following formula 

where M is the order i.e. the number of taps of the synthesis filter s n is the predicted value of the synthesized noise a i is the iLPC filter coefficient s n i are the previous output samples of the synthesis filter and e n is a Gaussian excitation signal.

A block diagram of the described exemplary embodiment of the comfort noise generator is shown in . The comfort noise estimator processes SID packets to decode the power level of the current far end background noise. The power level of the background noise is forwarded to a power controller . In addition a white noise generator forwards a Gaussian signal to the power controller . The power controller adjusts the power level of the Gaussian signal in accordance with the power level of the background noise and the prediction gain . The prediction gain is the difference in power level of the input and output of synthesis filter . The synthesis filter receives voice samples from the power controller and the LPC filter coefficients calculated by the filter logic see . The synthesis filter generates a power adjusted signal whose spectral characteristics approximate the spectral shape of the background noise in accordance with the above equation i.e. sum of the product of the LPC filter coefficients and the previous output samples of the synthesis filter .

The purpose of voice compression algorithms is to represent voice with highest efficiency i.e. highest quality of the reconstructed signal using the least number of bits . Efficient voice compression was made possible by research starting in the 1930 s that demonstrated that voice could be characterized by a set of slowly varying parameters that could later be used to reconstruct an approximately matching voice signal. Characteristics of voice perception allow for lossy compression without perceptible loss of quality.

Voice compression begins with an analog to digital converter that samples the analog voice at an appropriate rate usually 8 000 samples per second for telephone bandwidth voice and then represents the amplitude of each sample as a binary code that is transmitted in a serial fashion. In communications systems this coding scheme is called pulse code modulation PCM .

When using a uniform linear quantizer in which there is uniform separation between amplitude levels. This voice compression algorithm is referred to as linear or linear PCM . Linear PCM is the simplest and most natural method of quantization. The drawback is that the signal to noise ratio SNR. varies with the amplitude of the voice sample. This can be substantially avoided by using non uniform quantization known as companded PCM.

In companded PCM the voice sample is compressed to logarithmic scale before transmission and expanded upon reception. This conversion to logarithmic scale ensures that low amplitude voice signals are quantized with a minimum loss of fidelity and the SNR. is more uniform across all amplitudes of the voice sample. The process of compressing and expanding the signal is known as companding COMpressing and exPANDing . There exists a worldwide standard for companded PCM defined by the CCITT the International Telegraph and Telephone Consultative Committee .

The CCITT is a Geneva based division of the International Telecommunications Union ITU a New York based United Nations organization. The CCITT is now formally known as the ITU T the telecommunications sector of the ITU but the term CCITT is still widely used. Among the tasks of the CCITT is the study of technical and operating issues and releasing recommendations on them with a view to standardizing telecommunications on a worldwide basis. A subset of these standards is the G Series Recommendations which deal with the subject of transmission systems and media and digital systems and networks. Since 1972 there have been a number of G Series Recommendations on speech coding the earliest being Recommendation G.711. 6.711 has the best voice quality of the compression algorithms but the highest bit rate requirement.

The ITU T defined the first voice compression algorithm for digital telephony in 1972. It is companded PCM defined in Recommendation G.711. This Recommendation constitutes the principal reference as far as transmission systems are concerned. The basic principle of the G.711 companded PCM algorithm is to compress voice using 8 bits per sample the voice being sampled at 8 kHz keeping the telephony bandwidth of 300 3400 Hz. With this combination each voice channel requires 64 kilobits per second.

Note that when the term PCM is used in digital telephony it usually refers to the companded PCM specified in Recommendation G.711 and not linear PCM since most transmission systems transfer data in the companded PCM format. Companded PCM is currently the most common digitization scheme used in telephone networks. Today nearly every telephone call in North America is encoded at some point along the way using G.711 companded PCM.

ITU Recommendation G.726 specifies a multiple rate ADPCM compression technique for converting 64 kilobit per second companded PCM channels specified by Recommendation G.711 to and from a 40 32 24 or 16 kilobit per second channel. The bit rates of 40 32 24 and 16 kilobits per second correspond to 5 4 3 and 2 bits per voice sample.

ADPCM is a combination of two methods Adaptive Pulse Code Modulation APCM and Differential Pulse Code Modulation DPCM . Adaptive Pulse Code Modulation can be used in both uniform and non uniform quantizer systems. It adjusts the step size of the quantizer as the voice samples change so that variations in amplitude of the voice samples as well as transitions between voiced and unvoiced segments can be accommodated. In DPCM systems the main idea is to quantize the difference between contiguous voice samples. The difference is calculated by subtracting the current voice sample from a signal estimate predicted from previous voice sample. This involves maintaining an adaptive predictor which is linear since it only uses first order functions of past values . The variance of the difference signal results in more efficient quantization the signal can be compressed coded with fewer bits .

The G.726 algorithm reduces the bit rate required to transmit intelligible voice allowing for more channels. The bit rates of 40 32 24 and 16 kilobits per second correspond to compression ratios of 1.6 1 2 1 2.67 1 and 4 1 with respect to 64 kilobits per second companded PCM. Both G.711 and G.726 are waveform encoders they can be used to reduce the bit rate require to transfer any waveform like voice and low bit rate modern signals while maintaining an acceptable level of quality.

There exists another class of voice encoders which model the excitation of the vocal tract to reconstruct a waveform that appears very similar when heard by the human ear although it may be quite different from the original voice signal. These voice encoders called vocoders offer greater voice compression while maintaining good voice quality at the penalty of higher computational complexity and increased delay.

For the reduction in bit rate over G.711 one pays for an increase in computational complexity. Among voice encoders the G.726 ADPCM algorithm ranks low to medium on a relative scale of complexity with companded PCM being of the lowest complexity and code excited linear prediction CELP vocoder algorithms being of the highest.

The G.726 ADPCM algorithm is a sample based encoder like the G.711 algorithm therefore the algorithmic delay is limited to one sample interval. The CELP algorithms operate on blocks of samples 0.625 ms to 30 ms for the ITU coder so the delay they incur is much greater.

The quality of G.726 is best for the two highest bit rates although it is not as good as that achieved using companded PCM. The quality at 16 kilobits per second is quite poor a noticeable amount of noise is introduced and should normally be used only for short periods when it is necessary to conserve network bandwidth overload situations .

The G.726 interface specifies as input to the G.726 encoder and output to the G.726 decoder an 8 bit companded PCM sample according to Recommendation G.711. So strictly speaking the G.726 algorithm is a transcoder taking log PCM and converting it to ADPCM and vice versa. Upon input of a companded PCM sample the G.726 encoder converts it to a 14 bit linear PCM representation for intermediate processing. Similarly the decoder converts an intermediate 14 bit linear PCM value into an 8 bit companded PCM sample before i9t is output. An extension of the G.726 algorithm was carried out in 1994 to include as an option 14 bgit linear PCM input signal and output signals. The specification for such a linear interface is given in Annex A of Recommendation G.726.

The interface specified by G.726 Annex B bypasses the input and output companded PCM conversions. The effect of removing the companded PCM encoding and decoding is to decrease the coding degradation introduction by the compression and expansion of the linear PCM samples

The algorithm implemented in the described exemplary embodiment can be the version specified in G.726 Annex A commonly referred to as G.726A or any other voice compression algorithm known in the art. Among these voice compression algorithms are those standardized for telephony by the ITU T. Several of these algorithms operate at a sampling rate of 8000 Hz. with different bit rates for transmitting the encoded voice. By way of example Recommendations G.729 1996 and G.723.1 1996 define code excited linear prediction CELP algorithms that provide even lower bit rates than G.711 and G.726. G.729 operates at 8 kbps and G.723.1 operates at either 5.3 kbps or 6.3 kbps.

In an exemplary embodiment the voice encoder and the voice decoder support one or more voice compression algorithms including but not limited to 16 bit PCM non standard and only used for diagnostic purposes ITU T standard G.711 at 64 kb s G.723.1 at 5.3 kb s ACELP and 6.3 kb s MP MLQ ITU T standard G.726 ADPCM at 16 24 32 and 40 kb s ITU T standard G.727 Embedded ADPCM at 16 24 32 and 40 kb s ITU T standard G.728 LD CELP at 16 kb s and ITU T standard G.729 Annex A CS ACELP at 8 kb s.

The packetization interval for 16 bit PCM G.711 G.726 G.727 and G.728 should be a multiple of 5 msec in accordance with industry standards. The packetization interval is the time duration of the digital voice samples that are encapsulated into a single voice packet. The voice encoder decoder interval is the time duration in which the voice encoder decoder is enabled.

The packetization interval should be an integer multiple of the voice encoder decoder interval a frame of digital voice samples . By way of example G.729 encodes frames containing 80 digital voice samples at 8 kHz which is equivalent to a voice encoder decoder interval of 10 msec. If two subsequent encoded frames of digital voice sample are collected and transmitted in a single packet the packetization interval in this case would be 20 msec.

G.711 G.726 and G.727 encodes digital voice samples on a sample by sample basis. Hence the minimum voice encoder decoder interval is 0.125 msec. This is somewhat of a short voice encoder decoder interval especially if the packetization interval is a multiple of 5 msec. Therefore a single voice packet will contain 40 frames of digital voice samples. G.728 encodes frames containing 5 digital voice samples or 0.625 msec . A packetization interval of 5 msec 40 samples can be supported by 8 frames of digital voice samples. G.723.1 compresses frames containing 240 digital voice samples. The voice encoder decoder interval is 30 msec and the packetization interval should be a multiple of 30 msec.

Packetization intervals which are not multiples of the voice encoder or decoder interval can be supported by a change to the packetization engine or the depacketization engine. This may be acceptable for a voice encoder or decoder such as G.711 or 16 bit PCM.

The G.728 standard may be desirable for some applications. G.728 is used fairly extensively in proprietary voice conferencing situations and it is a good trade off between bandwidth and quality at a rate of 16 kb s. Its quality is superior to that of G.729 under many conditions and it has a much lower rate than G.726 or G.727. However G.728 is MIPS intensive.

Differentiation of various voice encoders or decoders may come at a reduced complexity. By way of example both G.723.1 and G.729 could be modified to reduce complexity enhance performance or reduce possible IPR conflicts. Performance may be enhanced by using the voice encoder or decoder as an embedded coder. For example the core voice encoder or decoder could be G.723.1 operating at 5.3 kb s with enhancement information added to improve the voice quality. The enhancement information may be discarded at the source or at any point in the network with the quality reverting to that of the core voice encoder or decoder . Embedded coders may be readily implemented since they are based on a given core. Embedded coders are rate scalable and are well suited for packet based networks.

If a higher quality 16 kb s voice encoder or decoder is required one could use G.723.1 or G.729 Annex A at the core with an extension to scale the rate up to 16 kb s or whatever rate was desired .

The configurable parameters for each voice encoder or decoder include the rate at which it operates if applicable which companding scheme to use the packetization interval and the core rate if the voice encoder or decoder is an embedded coder. For G.727 the configuration is in terms of bits sample. For example EADPCM 5 2 Embedded ADPCM G.727 has a bit rate of 40 kb s 5 bits sample with the core information having a rate of 16 kb s 2 bits sample .

In an exemplary embodiment the packetization engine groups voice frames from the voice encoder and with information from the VAD creates voice packets in a format appropriate for the packet based network. The two primary voice packet formats are generic voice packets and SID packets. The format of each voice packet is a function of the voice encoder used the selected packetization interval and the protocol.

Those skilled in the art will readily recognize that the packetization engine could be implemented in the host. However this may unnecessarily burden the host with configuration and protocol details and therefore if a complete self contained signal processing system is desired then the packetization engine should be operated in the network VHD. Furthermore there is significant interaction between the voice encoder the VAD and the packetization engine which further promotes the desirability of operating the packetization engine in the network VHD.

The packetization engine may generate the entire voice packet or just the voice portion of the voice packet. In particular a fully packetized system with all the protocol headers may be implemented or alternatively only the voice portion of the packet will be delivered to the host. By way of example for VoIP it is reasonable to create the real time transport protocol RTP encapsulated packet with the packetization engine but have the remaining transmission control protocol Internet protocol TCP IP stack residing in the host. In the described exemplary embodiment the voice packetization functions reside in the packetization engine. The voice packet should be formatted according to the particular standard although not all headers or all components of the header need to be constructed.

In an exemplary embodiment voice de packetization and queuing is a real time task which queues the voice packets with a time stamp indicating the arrival time. The voice queue should accurately identify packet arrival time within one msec resolution. Resolution should preferably not be less than the encoding interval of the far end voice encoder. The depacketizing engine should have the capability to process voice packets that arrive out of order and to dynamically switch between voice encoding methods i.e. between for example G.723.1 and G.711 . Voice packets should be queued such that it is easy to identify the voice frame to be released and easy to determine when voice packets have been lost or discarded en route.

The voice queue may require significant memory to queue the voice packets. By way of example if G.71 l is used and the worst case delay variation is 250 msec the voice queue should be capable of storing up to 500 msec of voice frames. At a data rate of 64 kb s this translates into 4000 bytes or or 2K 16 bit words of storage. Similarly for 16 bit PCM 500 msec of voice frames require 4K words. Limiting the amount of memory required may limit the worst case delay variation of 16 bit PCM and possibly G.711 This however depends on how the voice frames are queued and whether dynamic memory allocation is used to allocate the memory for the voice frames. Thus it is preferable to optimize the memory allocation of the voice queue.

The voice queue transforms the voice packets into frames of digital voice samples. If the voice packets are at the fundamental encoding interval of the voice frames then the delay jitter problem is simplified. In an exemplary embodiment a double voice queue is used. The double voice queue includes a secondary queue which time stamps and temporarily holds the voice packets and a primary queue which holds the voice packets time stamps and sequence numbers. The voice packets in the secondary queue are disassembled before transmission to the primary queue. The secondary queue stores packets in a format specific to the particular protocol whereas the primary queue stores the packets in a format which is largely independent of the particular protocol.

In practice it is often the case that sequence numbers are included with the voice packets but not the SID packets or a sequence number on a SID packet is identical to the sequence number of a previously received voice packet. Similarly SID packets may or may not contain useful information. For these reasons it may be useful to have a separate queue for received SID packets.

The depacketizing engine is preferably configured to support VoIP VTOA VoFR and other proprietary protocols. The voice queue should be memory efficient while providing the ability to dynamically switch between voice encoders at the far end allow efficient reordering of voice packets used for VoIP and properly identify lost packets.

In an exemplary embodiment the voice synchronizer analyzes the contents of the voice queue and determines when to release voice frames to the voice decoder when to play comfort noise when to perform frame repeats to cope with lost voice packets or to extend the depth of the voice queue and when to perform frame deletes in order to decrease the size of the voice queue . The voice synchronizer manages the asynchronous arrival of voice packets. For those embodiments which are not memory limited a voice queue with sufficient fixed memory to store the largest possible delay variation is used to process voice packets which arrive asynchronously. Such an embodiment includes sequence numbers to identify the relative timings of the voice packets. The voice synchronizer should ensure that the voice frames from the voice queue can be reconstructed into high quality voice while minimizing the end to end delay. These are competing objectives so the voice synchronizer should be configured to provide system trade off between voice quality and delay.

Preferably the voice synchronizer is adaptive rather than fixed based upon the worst case delay variation. This is especially true in cases such as VoIP where the worst case delay variation can be on the order of a few seconds. By way of example consider a VoIP system with a fixed voice synchronizer based on a worst case delay variation of 300 msec. If the actual delay variation is 280 msec the signal processing system operates as expected. However if the actual delay variation is 20 msec then the end to end delay is at least 280 inset greater than required. In this case the voice quality should be acceptable but the delay would be undesirable. On the other hand if the delay variation is 330 msec then an underflow condition could exist degrading the voice quality of the signal processing system.

The voice synchronizer performs four primary tasks. First the voice synchronizer determines when to release the first voice frame of a talk spurt from the far end. Subsequent to the release of the first voice frame the remaining voice frames are released in an isochronous manner. In an exemplary embodiment the first voice frame is held for a period of time that is equal or less than the estimated worst case jitter.

Second the voice synchronizer estimates how long the first voice frame of the talk spurt should be held. If the voice synchronizer underestimates the required target holding time jitter buffer underflow will likely result. However jitter buffer underflow could also occur at the end of a talk spurt or during a short silence interval. Therefore SID packets and sequence numbers could be used to identify what caused the jitter buffer underflow and whether the target holding time should be increased. If the voice synchronizer overestimates the required target holding time all voice frames will be held too long causing jitter buffer overflow. In response to jitter buffer overflow the target holding time should be decreased. In the described exemplary embodiment the voice synchronizer increases the target holding time rapidly for jitter buffer underflow due to excessive jitter but decreases the target holding time slowly when holding times are excessive. This approach allows rapid adjustments for voice quality problems while being more forgiving for excess delays of voice packets.

Thirdly the voice synchronizer provides a methodology by which frame repeats and frame deletes are performed within the voice decoder. Estimated jitter is only utilized to determine when to release the first frame of a talk spurt. Therefore changes in the delay variation during the transmission of a long talk spurt must be independently monitored. On buffer underflow an indication that delay variation is increasing the voice synchronizer instructs the lost frame recovery engine to issue voice frames repeats. In particular the frame repeat command instructs the lost frame recovery engine to utilize the parameters from the previous voice frame to estimate the parameters of the current voice frame. Thus if frames and are normally transmitted and frame arrives late frame repeat is issued after frame number and if frame number arrives during this period it is then transmitted. The sequence would be frames a frame repeat of frame and then frame . Performing frame repeats causes the delay to increase which increasing the size of the jitter buffer to cope with increasing delay characteristics during long talk spurts. Frame repeats are also issued to replace voice frames that are lost en route.

Conversely if the holding time is too large due to decreasing delay variation the speed at which voice frames are released should be increased. Typically the target holding time can be adjusted which automatically compresses the following silent interval. However during a long talk spurt it may be necessary to decrease the holding time more rapidly to minimize the excessive end to end delay. This can be accomplished by passing two voice frames to the voice decoder in one decoding interval but only one of the voice frames is transferred to the media queue.

The voice synchronizer must also function under conditions of severe buffer overflow where the physical memory of the signal processing system is insufficient due to excessive delay variation. When subjected to severe buffer overflow the voice synchronizer could simply discard voice frames.

The voice synchronizer should operate with or without sequence numbers time stamps and SID packets. The voice synchronizer should also operate with voice packets arriving out of order and lost voice packets. In addition the voice synchronizer preferably provides a variety of configuration parameters which can be specified by the host for optimum performance including minimum and maximum target holding time. With these two parameters it is possible to use a fully adaptive jitter buffer by setting the minimum target holding time to zero msec and the maximum target holding time to 500 msec or the limit imposed due to memory constraints . Although the preferred voice synchronizer is fully adaptive and able to adapt to varying network conditions those skilled in the art will appreciate that the voice synchronizer can also be maintained at a fixed holding time by setting the minimum and maximum holding times to be equal.

In applications where voice is transmitted through a packet based network there are instances where not all of the packets reach the intended destination. The voice packets may either arrive too late to be sequenced properly or may be lost entirely. These losses may be caused by network congestion delays in processing or a shortage of processing cycles. The packet loss can make the voice difficult to understand or annoying to listen to.

Packet recovery refers to methods used to hide the distortions caused by the loss of voice packets. In the described exemplary embodiment a lost packet recovery engine is implemented whereby missing voice is filled with synthesized voice using the linear predictive coding model of speech. The voice is modeled using the pitch and spectral information from digital voice samples received prior to the lost packets.

The lost packet recovery engine in accordance with an exemplary embodiment can be completely contained in the decoder system. The algorithm uses previous digital voice samples or a parametric representation thereof to estimate the contents of lost packets when they occur.

When a packet loss occurs the voice analyzer generates voice parameters from the buffered digital voice samples. The voice parameters are used by the voice synthesizer to synthesize voice until the voice decoder receives a voice packet or a timeout period has elapsed. During voice syntheses a packet lost signal is applied to the selector to output the synthesized voice as digital voice samples to the media queue not shown .

A flowchart of the lost recovery engine algorithm is shown in . The algorithm is repeated every frame whether or not there has been a lost packet. Every time the algorithm is performed a frame of digital voice samples are output. For purposes of explanation assume a frame length of 5 ms. In this case forty samples 5 ms of samples for a sampling rate of 8000 Hz and a flag specifying whether or not there is voice is buffered in the voice analyzer. The output of the lost recovery engine is also forty digital voice samples.

First a check. is made to see if there has been a packet loss . If so then a check is made to see if this is the first lost packet in a series of voice packets . If it is the first lost packet then the voice is analyzed by calculating the LPC parameters the pitch and the voicing decision of the buffered digital samples. If the digital samples are voiced then a residual signal is calculated from the buffered digital voice samples and an excitation signal is created from the residual signal . The gain factor for the excitation is set to one. If the speech is unvoiced then the excitation gain factor is determined from a prediction error power calculated during a Levinson Durbin recursion process . Using the parameters determined from the voice analysis one frame of voice is synthesized . Finally the excitation gain factor is attenuated and the synthesized digital voice samples are output .

If this is not the first lost packet then a check is made on how many packets have been lost. If the number of lost packets exceeds a threshold then a silence signal is generated and output . Otherwise a frame of digital voice samples are synthesized the excitation gain factor is attenuated and the synthesized digital voice samples are output .

If there are decoded digital voice samples then a check is performed to see if there was a lost packet the last time the algorithm was executed . If so then one half of a frame of digital voice samples are synthesized and overlap added with the first one half of the frame of decoded digital voice samples . Then in all cases the digital voice samples are buffered in the voice analyzer and a frame of digital voice samples is output .

There are two main steps in finding the LPC parameters. First the autocorrelation function r i is determined up to r M where M is the prediction order. Then the Levinson Durbin recursion formula is applied to the autocorrelation function to get the LPC parameters.

There are several steps involved in calculating the autocorrelation function. The calculations are performed on the most recent buffered digital voice samples. First a Hamming window is applied to the buffered samples. Then r 0 is calculated and converted to a floating point format. Next r 1 to r M are calculated and converted to floating point. Finally a conditioning factor is applied to r 0 in order to prevent ill conditioning of the R matrix for a matrix inversion.

The calculation of the autocorrelation function is preferably computationally efficient and makes the best use of fixed point arithmetic. The following equation is used as an estimate of the autocorrelation function from r 0 to r M 

The value of r 0 is scaled such that it is represented by a mantissa and an exponent. The calculations are performed using 16 hit multiplications and the summed results are stored in a 40 bit register. The mantissa is found by shifting the result left or right such that the most significant bit is in bit of the 40 bit register where the least significant bit is bit and then keeping bits to . The exponent is the number of left shifts required for normalization of the mantissa. The exponent may be negative if a large amplitude signal is present.

The values calculated for r 1 to r M are scaled to use the same exponent as is used for r 0 with the assumption that all values of the autocorrelation function are less than or equal to r 0 . This representation in which a series of values are represented with the same exponent is called block floating point because the whole block of data is represented using the same exponent.

A conditioning factor of 1025 1024 is applied to r 0 in order to prevent ill conditioning of the R matrix. This factor increases the value of r 0 slightly which has the effect of making r 0 larger than any other value of r i . It prevents two rows of the R matrix from having equal values or nearly equal values which would cause ill conditioning of the matrix. When the matrix is ill conditioned it is difficult to control the numerical precision of results during the Levinson Durbin recursion.

Once the autocorrelation values have been calculated the Levinson Durbin recursion formula is applied. In the described exemplary embodiment a sixth to tenth order predictor is preferably used.

Because of truncation effects caused by the use of fixed point calculations errors can occur in the calculations when the R matrix is ill conditioned. Although the conditioning factor applied to r 0 eliminates this problem for most cases there is a numerical stability check implemented in the recursion algorithm. If the magnitude of the reflection coefficient gets greater than or equal to one then the recursion is terminated the LPC parameters are set to zero and the prediction error power is set to r 0 .

The voicing determination and pitch period calculation are performed using the zero crossing count and autocorrelation calculations. The two operations are combined such that the pitch period is not calculated if the zero crossing count is high since the digital voice samples are classified as unvoiced. shows a flowchart of the operations performed.

First the zero crossing count is calculated for a series of digital voice samples . The zero crossing count is initialized to zero. The zero crossings are found at a particular point by multiplying the current digital voice sample by the previous digital voice sample and considering the sign of the result. If the sign is negative then there was a zero crossing and the zero crossing count is incremented. This process is repeated for a number of digital voice samples and then the zero crossing count is compared to a pre determined threshold. If the count is above the threshold then the digital voice sample is classified as unvoiced . Otherwise more computations are performed.

Next if the digital voice samples are not classified as unvoiced the pitch period is calculated . One way to estimate the pitch period in a given segment of speech is to maximize the autocorrelation coefficient over a range of pitch values. This is shown in equation below 

An approximation to equation the above equation is used to find the pitch period. First the denominator is approximated by r 0 and the summation limit in the numerator is made independent of p as follows 

Finally the speech arrays are indexed such that the most recent samples are emphasized in the estimation of the pitch

When the above equation is applied a further savings in computations is made by searching only odd values of p. Once the maximum value has been determined a finer search is implemented by searching the two even values of p on either side of the maximum. Although this search procedure is non optimal it normally works well because the autocorrelation function is quite smooth for voiced segments.

Once the pitch period has been calculated the voicing decision is made using the maximum autocorrelation value . If the result is greater than 0.38 times r 0 then the digital samples are classified as voiced . Otherwise it is classified as unvoiced .

For voiced samples the excitation signal for voice synthesis is derived by applying the following equation to the buffered digital voice samples 

For unvoiced samples the excitation signal for voice synthesis is a white Gaussian noise sequence with a variance of one quarter. In order to synthesize the voice at the correct level a gain factor is derived from the prediction error power derived during the Levinson Durbin recursion algorithm. The prediction error power level gives the power level of the excitation signal that will produce a synthesized voice with power level r 0 . Since a gain level is desired rather than a power level the square root of the prediction error power level is calculated. To make up for the fact that the Gaussian noise has a power of one quarter the gain is multiplied by a factor of two.

The voiced synthesis is performed every time there is a lost voiced packet and also for the first decoded voiced packet after a series of lost packets. shows the steps performed in the synthesis of voice.

First the excitation signal is generated. If the samples are voiced then the excitation is generated from the residual signal . A residual buffer in the voice analyzer containing the residual signal is modulo addressed such that the excitation signal is equal to repetitions of the past residual signal at the pitch period P for 2 for 2 3 for 23

If the value of P is less than the number of samples to be synthesized then the excitation signal is repeated more than once. If P is greater than the number of samples to be generated then less than one pitch period is contained in the excitation. In both cases the algorithm keeps track of the last index into the excitation buffer such that it can begin addressing at the correct point for the next time voice synthesis is required.

If the samples are unvoiced then a series of Gaussian noise samples are generated . Every sample is produced by the addition of twelve uniformly distributed random numbers. Uniformly distributed samples are generated using the linear congruential method Knuth 9 as shown by the following equation mod where a is set to 32763 c to zero and m to 65536. The initial value of is equal to 29. The sequence of random numbers repeats every 16384 values which is the maximum period for the chosen value of m when c is equal to zero. By choosing c not equal to zero the period of repetition could be increased to 65536 but 16384 is sufficient for voice synthesis. The longest segment of voice synthesized by the algorithm is twelve blocks of forty samples which requires only 5760 uniformly distributed samples. By setting c to zero the number of operations to calculate the Gaussian random sample is reduced by one quarter.

After the excitation has been constructed the excitation gain factor is applied to each sample. Finally the synthesis filter is applied to the excitation to generate the synthetic voice .

The overlap add process is performed when the first good packet arrives after one or more lost packets. The overlap add reduces the discontinuity between the end of the synthesized voice and the beginning of the decoded voice. To overlap the two voice signals additional digital voice samples equal to one half of a frame is synthesized and averaged with the first one half frame of the decoded voice packet. The synthesized voice is multiplied by a down sloping linear ramp and the decoded voice is multiplied by an up sloping linear ramp. Then the two signals are added together.

DTMF dual tone multi frequency tones are signaling tones carried within the audio band. A dual tone signal is represented by two sinusoidal signals whose frequencies are separated in bandwidth and which are uncorrelated to avoid false tone detection. A DTMF signal includes one of four tones each having a frequency in a high frequency band and one of four tones each having a frequency in a low frequency band. The frequencies used for DTMF encoding and detection are defined by the ITU and are widely accepted around the world.

In an exemplary embodiment of the present invention DTMF detection is performed by sampling only a portion of each voice frame. This approach results in improved overall system efficiency by reducing the complexity MIPS of the DTMF detection. Although the DTMF is described in the context of a signal processing system for packet voice exchange those skilled in the art will appreciate that the techniques described for DMTF are likewise suitable for various applications requiring signal detection by sampling a portion of the signal. Accordingly the described exemplary embodiment for DTMF in a signal processing system is by way of example only and not by way of limitation.

There are numerous problems involved with the transmission of DTMF in band over a packet based network. For example lossy voice compression may distort a valid DTMF tone or sequence into an invalid tone or sequence. Also voice packet losses of digital voice samples may commit DTMF sequences and delay variation jitter may corrupt the DTMF timing information and lead to lost digits. The severity of the various problems depends on the particular voice decoder the voice decoder rate the voice packet loss rate the delay variation and the particular implementation of the signal processing system. For applications such as VoIP with potentially significant delay variation high voice packet loss rates and low digital voice sample rate if G.723.1 is used packet tone exchange is desirable. Packet tone exchange is also desirable for VoFR FRF I 1 class 2 . Thus proper detection and out of band transfer via the packet based network. is useful.

The ITU and Bellcore have promulgated various standards for DTMF detectors. The described exemplary DTMF detector preferably complies with ITU T Standard Q.24 for DTMF digit reception and Bellcore GR 506 Core TR. TSY 000181 TR TSY 000762 and TR TSY 000763 the contents of which are hereby incorporated by reference as though set forth in full herein. These standards involve various criteria such as frequency distortion allowance twist allowance noise immunity guard time talk down talk off acceptable signal to noise ratio and dynamic range etc. which are summarized in the table below.

The distortion allowance criteria specifies that a DTMF detector should detect a transmitted signal that has a frequency distortion of less than 1.5 and should not detect any DTMF signals that have frequency distortion of more than 3.5 . The term twist refers to the difference in decibels between the amplitude of the strongest key pad column tone and the amplitude of the strongest key pad row tone. For example the Bellcore standard requires the twist to be between 8 and 4 dBm. The noise immunity criteria requires that if the signal has a signal to noise ratio SNR greater than certain decibels then the DTMF detector is required to not miss the signal i.e. is required to detect the signal. Different standards have different SNR requirements which usually range from 12 to 24 decibels. The guard time check criteria requires that if a tone has a duration greater than 40 milliseconds the DTMF detector is required to detect the tone whereas if the tone has a duration less than 23 milliseconds the DTMF detector is required to not detect the tone. Similarly the DTMF detector is required to accept interdigit intervals which are greater than or equal to 40 milliseconds. Alternate embodiments of the present invention readily provide for compliance with other telecommunication standards such as EIA 464B and JJ 20.12.

Referring to the DTMF detector processes the 64 kb s pulse code modulated PCM signal i.e. digital voice samples buffered in the media queue not shown . The input to the DTMF detector should preferably be sampled at a rate that is at least higher than approximately 4 kHz or twice the highest frequency of a DTMF tone. If the incoming signal i.e. digital voice samples is sampled at a rate that is greater than 4 kHz i.e. Nyquist for highest frequency DTMF tone the signal may immediately be downsampled so as to reduce the complexity of subsequent processing. The signal may be downsampled by filtering and discarding samples.

A block diagram of an exemplary embodiment of the invention is shown in . The described exemplary embodiment includes a system for processing the upper frequency band tones and a substantially similar system for processing the lower frequency band tones. A filter and sampler may be used to down sample the incoming signal. In the described exemplary embodiment the sampling rate is 8 kHz and the front end filter and sampler do not down sample the incoming signal. The output of the sampler is filtered by two bandpass filters H z and G z for the upper frequency band and H z and G Z for the lower frequency band and down sampled by samplers for the upper frequency band and for the lower frequency band. The bandpass filters and for each frequency band are designed using a pair of lowpass filters one filter H z which multiplies the down sampled signal by cos 2 fnT and the other filter G z which multiplies the down sampled signal by sin 2 fnT where T 1 fwhere fis the sampling frequency after the front end down sampling by the filter and the sampler .

In the described exemplary embodiment the bandpass filters and are executed every eight samples and the outputs and of the bandpass filters and are down sampled by samplers and at a ratio of eight to one. The combination of down sampling is selected so as to optimize the performance of a particular DSP in use and preferably provides a sample approximately every msec or a 1 kbs signal. Down sampled signals in the upper and lower frequency bands respectively are real signals. In the upper frequency band a multiplier multiplies the output of sampler by the square root of minus one i.e. j . A summer then adds the output of downsampler with the imaginary signal . Similarly in the lower frequency band a multiplier multiplies the output of downsampler by the square root of minus one i.e. j . A summer then adds the output of downsampler with the imaginary signal . Combined signals x t and x t at the output of the summers are complex signals. It will be appreciated by one of skill in the art that the function of the bandpass filters can be accomplished by alternative finite impulse response filters or structures such as windowing followed by DFT processing.

If a single frequency is present within the bands defined by the bandpass filters the combined complex signals x t and x t will be constant envelope complx signals. Short term power estimator and measure the power of x t and x t respectively and compare the estimated power levels of x t and x t with the requirements promulgated in ITU T Q.24. In the described exemplary embodiment the upper band processing is first executed to determine if the power level within the upper band complies with the thresholds set forth in the ITU T Q.24 recommendations. If the power within the upper band does not comply with the ITU T recommendations the signal is not a DTMF tone and processing is terminated. If the power within the upper band complies with the ITU T Q.24 standard the lower band is processed. A twist estimator compares the power in the upper band and the lower band to determine if the twist defined as the ratio of the power in the lower band and the power in the upper band is within an acceptable range as defined by the ITU T recommendations. If the ratio of the power within the upper band and lower band is not within the bounds defined by the standards a DTMF tone is not present and processing is terminated.

If the ratio of the power within the upper band and lower band complies with the thresholds defined by the ITU T Q.24 and Bellcore GR 506 Core TR TSY 000181 TR TSY 000762 and TR TSY 000763 standards the frequency of the upper band signal x t and the frequency of the lower band signal x t are estimated. Because of the duration of the input signal one msec conventional frequency estimation techniques such as counting zero crossings may not sufficiently resolve the input frequency. Therefore differential detectors and are used to estimate the frequency of the upper band signal x t and the lower band signal x t respectively. The differential detectors and estimate the phase variation of the input signal over a given time range. Advantageously the accuracy of estimation is substantially insensitive to the period over which the estimation is performed. With respect to upper band input x n and assuming x n is a sinusoid of frequency f the differential detector computes 1 2 

where fis the mean of the frequencies in the upper band or lower hand and superscript implies complex conjugation. Then 2 2 1 2 2 

which is a constant independent of n. Arctan functions and each takes the complex input and computes the angle of the above complex value that uniquely identifies the frequency present in the upper and lower bands In operation a tan 2 sin 2 f f cos 2 f f returns to within a scaling factor the frequency difference f f. Those skilled in the art will appreciate that various algorithms such as a frequency discriminator could be use to estimate the frequency of the DTMF tone by calculating the phase variation of the input signal over a given time period.

Having estimated the frequency components of the upper hand and lower band the DTMF detector analyzes the upper band and lower band signals to determine whether a DTMF digit is present in the incoming signals and if so which digit. Frequency calculators and compute a mean and variance of the frequency deviation over the entire window of frequency estimates to identify valid DTMF tones in the presence of background noise or speech that resembles a DTMF tone. In the described exemplary embodiment if the mean of the frequency estimates over the window is within acceptable limits preferably less than 2.8 for the lowband and 2.5 for the highband the variance is computed. If the variance is less than a predetermined threshold preferably on the order of about 1464 Hz i.e. standard deviation of 38.2 Hz the frequency is declared valid. Referring to DTMF control logic compares the frequency identified for the upper and lower bands to the frequency pairs identified in the ITU T recommendations to identify the digit. The DTMF control logic forwards a tone detection flag to a state machine . The state machine analyzes the time sequence of events and compares the tone on and tone off periods for a given tone to the ITU T recommendations to determine whether a valid dual tone is present. In the described exemplary embodiment the total window size is preferably 5 msec so that a DTMF detection decision is performed every 5 msec.

In the context of an exemplary embodiment of the voice mode the DTMF detector is operating in the packet tone exchange along with a voice encoder operating under the packet voice exchange which allows for simplification of DTMF detection processing. Most voice encoders operate at a particular frame size the number of voice samples or time in msec over which voice is compressed . For example the frame size for ITU T standard G.723.1 is 30 msec. For ITU T standard G.729 the frame size is 10 msec. In addition many packet voice systems group multiple output frames from a particular voice encoder into a network cell or packet. To prevent leakage through the voice path the described exemplary embodiment delays DTMF detection until the last frame of speech is processed before a fill packet is constructed. Therefore for transmissions in accordance with the G.723.1 standard and a single output frame placed into a packet DTMF detection may be invoked every 30 msec synchronous with the end of the frame . Under the G.729 standard with two voice encoder frames placed into a single packet DTMF detection or decision may be delayed until the end of the second voice frame within a packet is processed.

In the described exemplary embodiment the DTMF detector is inherently stateless so that detection of DTMF tones within the second 5 msec DTMF block of a voice encoder frame doesn t depend on DTMF detector processing of the first 5 msec block of that frame. If the delay in DTMF detection is greater than or equal to twice the DTMF detector block size the processing required for DTMF detection can be further simplified. For example the instructions required to perform DTMF detection may be reduced by 50 for a voice encoder frame size of 10 msec and a DTMF detector frame size of 5 msec. The ITU T Q.24 standard requires DTMF tones to have a minimum duration of 23 msec and an inter digit interval of 40 msec. Therefore by way of example a valid DTMF tone may be detected within a given 10 msec frame by only analyzing the second 5 msec interval of that frame. Referring to in the described exemplary embodiment the DTMF control logic analyzes DTMF detector output and selectively enables DTMF detection analysis for a current frame segment as a function of whether a valid dual tone was detected in previous and future frame segments. For example if a DTMF tone was not detected in the previous frame and if DTMF is not present in the second 5 msec interval of the current frame then the first 5 msec block need not be processed so that DPMF detection processing is reduced by 50 . Similar savings may be realized if the previous frame did contain a DTMF if the DTMF is still present in the second 5 msec portion it is most likely. it was on in the first 5 msec portion . This method is easily extended to the case of longer delays 30 msec for G.723.1 or 20 40 msec for G.729 and packetization intervals from 2 4 or more . It may be necessary to search more than one 5 msec period out of the longer interval bit 1y 1 subset is necessary.

DTMF events are preferably reported to the host. This allows the host for example to convert the DTMF sequence of keys to a destination address. It will therefore allow the host to support call routing via DTMF.

Depending on the protocol the packet tone exchange may support muting of the received digital voice samples or discarding voice frames when DTMF is detected. In addition to avoid DTMF leakage into the voice path the voice packets may be queued but not released in the encoder system when DTMF is pre detected. DTMF is pre detected through a combination of DTMF decisions and state machine processing. The DTMF detector will make a decision i.e. is there DTMF present every five msec. A state machine analyzes the history of a given DTMF tone to determine the current duration of a given tone so as to estimate how long the tone will likely continue. If the detection was false invalid the voice packets are ultimately released otherwise they are discarded. This will manifest itself as occasional jitter when DTMF is falsely pre detected. It will be appreciated by one of skill in the art that tone packetization can alternatively be accomplished through compliance with various industry standards such as for example the Frame Relay Forum FRF 11 standard the voice over atm standard ITU T I.363.2 and IETF draft avt tone 04 RTP Payload for DTMF Digits for Telephony Tones and Telephony Signals the contents of which are hereby incorporated by reference as though set forth in full.

Software to route calls via DTMF can be resident on the host or within the signal processing system. Essentially the packet tone exchange traps DTMF tones and reports them to the host or a higher layer. In an exemplary embodiment the packet tone exchange will generate dial tone when an off hook condition is detected. Once a DTMF digit is detected the dial tone is terminated. The packet tone exchange may also have to play ringing tone back to the near end user when the far end phone is being rung and a busy tone if the far end phone is unavailable. Other tones may also need to be supported to indicate all circuits are busy or an invalid sequence of DTMF digits were entered.

Telephone systems provide users with feedback about what they are doing in order to simplify operation and reduce calling errors. This information can be in the form of lights displays or ringing but is most often audible tones heard on the phone line. These tones are generally referred to as call progress tones as they indicate what is happening to dialed phone calls. Conditions like busy line ringing called party bad number and others each have distinctive tone frequencies and cadences assigned them for which some standards have been established. A call progress tone signal includes one of four tones. The frequencies used for call progress tone encoding and detection namely 350 440 480 and 620 Hz are defined by the international telecommunication union and are widely accepted around the world. The relatively narrow frequency separation between tones 40 Hz in one instance complicates the detection of individual tones. In addition the duration or cadence of a given tone is used to identify alternate conditions.

An exemplary embodiment of the call progress tone detector analyzes the spectral frequency characteristics of an incoming telephony voice band signal and generates a tone detection flag as a function of the spectral analysis. The temporal time characteristics of the tone detection flags are then analyzed to detect call progress tone signals. The call progress tone detector then forwards the call progress tone signal to the packetization engine to be packetized and transmitted across the packet based network. Although the call progress tone detector is described in the context of a signal processing system for packet voice exchange those skilled in the art will appreciate that the techniques described for call progress tone detection are likewise suitable for various applications requiring signal detection by analyzing spectral or temporal characteristics of the signal. Accordingly the described exemplary embodiment for precision tone detection in a signal processing system is by way of example only and not by way of limitation.

The described exemplary embodiment preferably includes a call progress tone detector that operates in accordance with industry standards for the power level Bellcore SR3004 CPE Testing Guidelines Type III Testing and cadence Bellcore GR506 Core and Bellcore LSSGR Signaling For Analog Interface Call Purpose Signals of a call progress tone. The call progress tone detector interfaces with the media queue to detect incoming call progress tone signals such as dial tone re order tone audible ringing and line busy or hook status. The problem of call progress tone signaling and detection is a common telephony problem. In the context of packet voice systems in accordance with an exemplary embodiment of the present invention telephony devices are coupled to a signal processing system which for the purposes of explanation is operating in a network gateway to support the exchange of voice between a traditional circuit switched network and a packet based network. In addition the signal processing system operating on network gateways also supports the exchange of voice between the packet based network and a number of telephony devices.

Referring to the call progress tone detector continuously monitors the media queue of the voice encoder system. Typically the call progress tone detector is invoked every ten msec. Thus for an incoming signal sampled at a rate of 8 kHz the preferred call progress tone detector operates on blocks of eighty samples. The call progress tone detector includes a signal processor which analyzes the spectral characteristics of the samples buffered in the media queue . The signal processor performs anti aliasing decimation bandpass filtering and frequency calculations to determine if a tone at a given frequency is present. A cadence processor analyzes the temporal characteristics of the processed tones by computing the on and off periods of the incoming signal. If the cadence processor detects a call progress tone for an acceptable on and off period in accordance with the Bellcore GR506 Core standard a Tone Detection Event will be generated.

A block diagram for an exemplary embodiment of the signal processor is shown in . An anti aliasing low pass filter with a cutoff frequency of preferably about 666 Hz filters the samples buffered in the media queue so as to remove frequency components above the highest call progress tone frequency i.e. 660 Hz. A down sampler is coupled to the output of the low pass filter . Assuming an 8 kHz input signal the down sampler preferably decimates the low pass filtered signal at a ratio of six one which avoids aliasing due to under sampling . The output of down sampler is filtered by eight bandpass filters and i.e. two filters for each call progress tone frequency . The decimation effectively increases the separation between tones so as to relax the roll off requirements i.e. reduce the number of filter coefficients of the bandpass filters which simplifies the identification of individual tones. In the described exemplary embodiment the bandpass filters for each call progress tone are designed using a pair of lowpass filters one filter which multiplies the down sampled signal by cos 2 fnT and the other filter which multiplies the down sampled signal by sin 2 fnT where T 1 fwhere fis the sampling frequency after the decimation by the down sampler . The outputs of the band pass filters are real signals. Multipliers and multiply the outputs of filters and respectively by the square root of minus one i.e. j to generate an imaginary component. Summers and then add the outputs of filters and with the imaginary components and respectively. The combined signals are complex signals. It will be appreciated by one of skill in the art that the function of the bandpass filters can be accomplished by alternative finite impulse response filters or structures such as windowing followed by DFT processing.

Power estimators and estimate the short term average power of the combined complex signals and for comparison to power thresholds determined in accordance with the recommended standard Bellcore SR3004 CPE Testing Guidelines For Type III Testing . The power estimators forward an indication to power state machines and respectively which monitor the estimated power levels within each of the call progress tone frequency bands. Referring to the power state machine is a three state device including a disarm state an arm state and a power on state . As is known in the art the state of a power state machine depends on the previous state and the new input. For example if an incoming signal is initially silent the power estimator would forward an indication to the power state machine that the power level is less than the predetermined threshold. The power state machine would be off and disarmed. If the power estimator next detects an incoming signal whose power level is greater than the predetermined threshold the power estimator forwards an indication to the power state machine indicating that the power level is greater than the predetermined threshold for the given incoming signal. The power state machine switches to the off but armed state. If the next input is again above the predetermined threshold the power estimator forwards an indication to the power state machine indicating that the power level is greater than the predetermined threshold for the given incoming signal. The power state machine now toggles to the on and armed state. The power state machine substantially reduces or eliminates false detections due to glitches white noise or other signal anomalies.

Turning back to when the power state machine is set to the on state frequency calculators and estimate the frequency of the combined complex signals. The frequency calculators utilize a differential detection algorithm to estimate the frequency within each of the four call progress tone bands. The frequency calculators estimate the phase variation of the input signal over a given time range. Advantageously the accuracy of the estimation is substantially insensitive to the period over which the estimation is performed. Assuming a sinusoidal input x n of frequency fthe frequency calculator computes 1 2 

where fis the mean of the frequencies within the given call progress tone group and superscript implies complex conjugation. Then 

which is a constant independent of n. The frequency calculators then invoke an arctan function that takes the complex signal and computes the angle of the above complex value that identifies the frequency present within the given call progress tone hand. In operation a tan 2 sin 2 f f cos 2 f f returns to within a scaling factor the frequency difference f f. Those skilled in the art will appreciate that various algorithms such as a frequency discriminator could be use to estimate the frequency of the call progress tone by calculating the phase variation of the input signal over a given time period.

The frequency calculators compute the mean of the frequency deviation over the entire 10 msec window of frequency estimates to identify valid call progress tones in the presence of background noise or speech that resembles a call progress tone. If the mean of the frequency estimates over the window is within acceptable limits as summarized by the table below a tone on flag is forwarded to the cadence processor. The frequency calculators are preferably only invoked if the power state machine is in the on state thereby reducing the processor loading i.e. fewer MIPS when a call progress tone signal is not present.

Referring to the signal processor forwards a tone on tone off indication to the cadence processor which considers the time sequence of events to determine whether a call progress tone is present. Referring to in the described exemplary embodiment the cadence processor preferably comprises a four state cadence state machine including a cadence tone off state a cadence tone on state a cadence tone arm state and an idle state see . The state of the cadence state machine depends on the previous state and the new input. For example if an incoming signal is initially silent the signal processor would forward a tone off indication to the cadence state machine . The cadence state machine would be set to a cadence tone off and disarmed state. If the signal processor next detects a valid tone the signal processor forwards a tone on indication to the cadence state machine . The cadence state machine switches to a cadence off but armed state. Referring to the cadence state machine preferably invokes a counter that monitors the duration of the tone indication. If the next input is again a valid call progress tone the signal processor forwards a tone on indication to the cadence state machine . The cadence state machine now toggles to the cadence tone on and cadence tone armed state. The cadence state machine would remain in the cadence tone on state until receiving two consecutive tone off indications from the signal processor at which time the cadence state machine sends a tone off indication to the counter . The counter resets and forwards the duration of the on tone to cadence logic . The cadence processor similarly estimates the duration of the off tone which the cadence logic utilizes to determine whether a particular tone is present by comparing the duration of the on tone off tone signal pair at a given tone frequency to the tone plan recommended in industry standard as summarized in the table below.

In the described exemplary embodiment utilizing a multi layer software architecture operating on a DSP platform the DSP server includes networks VHDs see . Each network VHD can be a complete self contained software module for processing a single channel with a number of different telephony devices. Multiple channel capability can be achieved by adding network VHDs to the DSP server. The resource manager dynamically controls the creation and deletion of VHDs and services.

In the case of multi channel communications using a number of network VHDs the services invoked by the network VHDs and the associated PXDs are preferably optimized to minimize system resource requirements in terms of memory and or computational complexity. This can be accomplished with the resource manager which reduces the complexity of certain algorithms in the network VHDs based on predetermined criteria. Although the resource management processor is described in the context of a signal processing system for packet voice exchange those skilled in the art will appreciate that the techniques described for resource management processing are likewise suitable for various applications requiring processor complexity reductions. Accordingly the described exemplary embodiment for resource management processing in a signal processing system is by way of example only and not by way of limitation.

In one embodiment the resource manager can be implemented to reduce complexity when the worst case system loading exceeds the peak system resources. The worst case system loading is simply the sum of the worst case peak loading of each service invoked by the network VHD and its associated PXDs. However the statistical nature of the processor resources required to process voice band telephony signals is such that it is extremely unlikely that the worst case processor loading for each PXD and or service will occur simultaneously. Thus. a more robust lower overall power consumption and higher densities i.e. more channels per DSP signal processing system may be realized if the average complexity of the various voice mode PXDs and associated services is minimized. Therefore in the described exemplary embodiment average system complexity is reduced and system resources may be over subscribed peak loading exceeds peak system resources in the short term wherein complexity reductions are invoked to reduce the peak loading placed on the system.

The described exemplary resource manager should preferably manage the internal and external program and data memory of the DSP. The transmission signal processing of voice is inherently dynamic so that the system resources required for various stages of a conversation are time varying. The resource manager should monitor DSP resource utilization and dynamically allocate resources to numerous VHDs and PXDs to achieve a memory and computationally reduced MIPS efficient system. For example when the near end talker is actively speaking the voice encoder consumes significant resources but the far end is probably silent so that the echo canceller is probably not adapting and may not be executing the transversal filter. When the far end is active the near end is most likely inactive which implies the echo canceller is both canceling far end echo and adapting. However when the far end is active the near end is probably inactive which implies that the VAD is probably detecting silence and the voice encoder consumes minimal system resources. Thus it is unlikely that the voice encoder and echo canceller resource utilization peak simultaneously. Furthermore if processor resources are taxed echo canceller adaptation may be disabled if the echo canceller is adequately adapted or interleaved adaptation enabled on alternating echo canceller blocks to reduce the computational burden placed on the processor.

Referring to in the described exemplary embodiment the resource manager manages the resources of two network VHDs and their associated PXDs . Initially the average complexity of the services running in each VHD and its associated PXD is reported to the resource manager. The resource manager sums the reported complexities to determine whether the sum exceeds the system resources. If the sum of the average complexities reported to the resource manager are within the capability of the system resources no complexity reductions are invoked by the resource manager . Conversely if the sum of the average complexities of the services running in each VHD and its associated PXD overload the system resources then the resource manager can invoke a number of complexity reduction methodologies. For example the echo cancellers can be forced into the bypass mode see and or the echo canceller adaption can be reduced or disabled. In addition or in the alternative complexity reductions in the voice encoders and voice decoders can be invoked.

The described exemplary embodiment may reduce the complexity of certain voice mode services and associated PXDs so as to reduce the computational memory requirements placed upon the system. Various modifications to the voice encoders may be included to reduce the load placed upon the system resources. For example the complexity of a G.723.1 voice encoder may be reduced by disabling the post filter in accordance with the ITU T G.723 1 standard which is incorporated herein by reference as if set forth in full. Also the voicing decision may be modified so as to be based on the open loop normalized pitch correlation computed at the open loop pitch lag L determined by the standard voice encoding algorithm. This entails a modification to the ITU T G.723.1 C language routine Estim Pitch If d n is the input to the pitch estimation function the normalized open loop pitch correlation at the open loop pitch lag L is 

Also the ability to bypass the adaptive codebook based on a threshold computed from a combination of the open loop normalized pitch correlation and speech residual energy may be included. In the standard encoder the search through the adaptive codebook gain codebook begins at index zero and may be terminated before the entire codebook is searched less than the total size of the adaptive codebook gain codebook which is either 85 or 170 entries depending on the accumulation of potential error. A preferred complexity reduction truncates the adaptive codebook gain search procedure if the open loop normalized pitch correlation and speech residual energy meets a certain by searching entries from 

The fixed excitation in the standard encoder may have a periodic component. In the standard encoder if the open loop pitch lag is less than the subframe length minus two then a excitation search function the function call Find Best in the ITU T G.723.1 C language simulation is invoked twice. To reduce system complexity the fixed excitation search procedure may be modified at 6.3 kb s such that the fixed excitation search function is invoked once per invocation of the fixed excitation search procedure routine Find Fcbk . If the open loop pitch lag is less than the subframe length minus two then a periodic repetition is forced otherwise there is no periodic repetition as per the standard encoder for that range of open loop pitch lags . In the described complexity reduction modification the decision on which manner to invoke it is based on the open loop pitch lag and the voicing strength.

Similarly the fixed excitation search procedure can be modified at 5.3 kb s such that a higher threshold is chosen for voice decisions. In the standard encoder the voicing decision is considered to be voiced of the open loop normalized pitch correlation is greater than 0.5 variable named threshold in the ITU T G.723.1 is set to 0.5. In a modification to reduce the complexity of this function the threshold may be set to 0.75. This greatly reduces the complexity of the excitation search procedure while avoiding substantial impairment to the voice quality.

Similar modifications may be made to reduce the complexity of a G.729 Annex A voice encoder. For example the complexity of a G.729 Annex A voice encoder may be reduced by disabling the post filter in accordance with the G.729 Annex A standard which is incorporated herein by reference as if set out in full. Also the complexity of a G.729 Annex A voice encoder may be further reduced by including the ability to bypass the adaptive codebook or reduce the complexity of the adaptive codebook search significantly. In the standard voice encoder the adaptive codebook searches over a range of lags based on the open loop pitch lag. The adaptive codebook bypass simply chooses the minimum lag. The complexity of the adaptive codebook search may be reduced by truncating the adaptive codebook search such that fractional pitch periods are not considered within the search not searching the non integer lags . These modifications are made to the ITU T G.729 Annex A C language routine Pitch fr3 fast . The complexity of a G.729 Annex A voice encoder may be further reduced by substantially reducing the complexity of the fixed excitation search. The search complexity may be reduced by bypassing the depth first search 4 phase A track 3 and 0 search and the depth first search 4 phase B track 0.1 and 2 search.

Each modification reduces the computational complexity but also minimally reduces the resultant voice quality. However since the voice encoders are externally managed by the resource manager to minimize occasional system resource overloads the voice encoder should predominately operate with no complexity reductions. The preferred embedded software embodiment should include the standard code as well as the modifications required to reduce the system complexity. The resource manager should preferably minimize power consumption and computational cycles by invoking complexity reductions which have substantially no impact on voice quality. The different complexity reductions schemes should be selected dynamically based on the processing requirements for the current frame over all voice channels and the statistics of the voice signals on each channel voice level voicing etc .

Although complexity reductions are rare the appropriate PXDs and associated services invoked in the network VHDs should preferably incorporate numerous functional features to accommodate such complexity reductions. For example the appropriate voice mode PXDs and associated services should preferably include a main routine which executes the complexity reductions described above with a variety of complexity levels. For example various complexity levels may be mandated by setting various complexity reduction flags. In addition the resource manager should accurately measure the resource requirements of PXDs and services with fixed resource requirements i.e. complexity is not controllable to support the computation of peak complexity and average complexity. Also a function that returns the estimated complexity in cycles according to the desired complexity reduction level should preferably be included.

The described exemplary embodiment preferably includes four complexity reduction levels. In the first level all complexity reductions are disabled so that the complexity of the PXDs and services is not reduced.

The second level provides minimal or transparent complexity reductions reductions which should preferably have substantially no observable impact on performance under most conditions . In the transparent mode the voice encoders G.729 G.723.1 preferably use voluntary reductions and the echo canceller is forced into the bypass mode and adaption is toggled i.e. adaptive is enabled for every other frame . Voluntary reductions for G.723.1 voice encoders are preferably selected as follows. First if the frame energy is less than 55 dBm0 then the adaptive codebook is bypassed and the fixed excitation searches are reduced as per above. If the frame energy is less than 45 dBm0 but greater than 55 dBm0 then the adaptive codebook is partially searched and the fixed excitation searches are reduced as per above. In addition if the open loop normalized pitch correlation is less than 0.305 then the adaptive codebook is partially searched. Otherwise no complexity reductions are done. Similarly voluntary reductions for the G.729 voice encoders preferably proceed as follows first if the frame energy is less than 55 dBm0 then the adaptive codebook is bypassed and the fixed excitation search is reduced per above. Next if the frame energy is less than 45 dBm0 but greater than 55 dBm0 then the reduced complexity adaptive codebook is used and the excitation search complexity is reduced. Otherwise no complexity reduction is used.

The third level of complexity reductions provides minor complexity reductions reductions which may result in a slight degradation of voice quality or performance . For example in the third level the voice encoders preferably use voluntary reductions find best reduction G.723.1 fixed codebook threshold change 5.3 kbps G.723.1 open loop pitch search reduction G.723.1 only and minimal adaptive codebook reduction G.729 and G.723.1 . In addition the echo canceller is forced into the bypass mode and adaption is toggled.

In the fourth level major complexity reductions occur that is reductions which should noticeably effect the performance quality. For example in the fourth level of complexity reductions the voice encoders use the same complexity reductions as those used for level three reductions as well as adding a bypass adaptive codebook reduction G.729 and G.723.1 . In addition the echo canceller is forced into the bypass mode and adaption is completely disabled. The resource manager preferably limits the invocation of fourth level major reductions to extreme circumstances such as for example when there is double talk on all active channels.

The described exemplary resource manager monitors system resource utilization. Under normal system operating conditions complexity reductions are not mandated on the echo canceller or voice encoders. Voice FAX and data traffic is packetized and transferred in packets. The echo canceller removes echos the DTMF detector detects the presence of keypad signals the VAD detects the presence of voice and the voice encoders compress the voice traffic into packets. However when system resources are overtaxed and complexity reductions are required there are at least two methods for controlling the voice encoder. In the first method the complexity level for the current frame is estimated from the information contained within previous voice frames and from the information gained from the echo canceller on the current voice frame. The resource manager then mandates complexity reductions for the processing of frames in the current frame interval in accordance with these estimations.

Alternatively the voice encoders may be divided into a front end and a back end . The front end performs voice activity detection and open loop pitch detection in the case of G.723.1 and G.729 Annex A on all channels operating on the DSP. Subsequent to the execution of the front end function for all channels of a particular voice encoder the system complexity may be estimated based on the known information. Complexity reductions may then be mandated to ensure that the current processing cycle can satisfy the processing requirements of the voice encoders and decoders. This alternative method is preferred because the state of the VAD is known whereas in the previously described method the state of the VAD is estimated.

In the alternate method once the front end processing is complete so that the state of the VAD and the voicing state for all channels is known the system complexity may be estimated based on the known statistics for the current frame. In the first method the state of the VAD and the voicing state may be estimated based on available known information. For example the echo canceller processes a voice encoder input signal to remove line echos prior to the activation of the voice encoder. The echo canceller may estimate the state of the VAD based on the power level of a reference signal and the voice encoder input signal so that the complexity level of all controllable PXDs and services may be updated to determine the estimated complexity level of each assuming no complexity reductions have been invoked. If the sum of all the various complexity estimates is less than the complexity budget no complexity reductions are required. Otherwise the complexity level of all system components are estimated assuming the invocation of the transparent complexity reduction method to determine the estimated complexity resources required for the current processing frame. If the sum of the complexity estimates with transparent complexity reductions in place is less than the complexity budget then the transparent complexity reduction is used for that frame. In a similar manner more and more severe complexity reduction is considered until system complexity satisfies the prescribed budget.

The operating system should preferably allow processing to exceed the real time constraint i.e. maximum processing capability for the underlying DSP in the short term. Thus data that should normally be processed within a given time frame or cycle may be buffered and processed in the next sequence. However the overall complexity or processor loading must remain on average within the real time constraint. This is a tradeoff between delay jitter and channel density. Since packets may be delayed due to processing overruns overall end to end delay may increase slightly to account for the processing jitter.

Referring to a preferred echo canceller has been modified to include an echo canceller bypass switch that invokes an echo suppressor in lieu of echo cancellation under certain system conditions so as to reduce processor loading. In addition in the described exemplary embodiment the resource manager may instruct the adaptation logic to disable filter adapter so as to reduce processor loading under real time constraints. The system will preferably limit adaptation on a fair and equitable basis when processing overruns occur. For example if four echo cancellers are adapting when a processing over run occurs the resource manager may disable the adaption of echo cancellers one and two. If the processing over run continues the resource manger should preferably enable adaption of echo cancellers one and two and reduce system complexity by disabling the adaptation of echo cancellers three and four. This limitation should preferably be adjusted such that channels which are fully adapted have adaptation disabled first. In the described exemplary embodiment the operating systems should preferably control the subfunctions to limit peak system complexity. The subfunctions should be co operative and include modifications to the echo canceller and the speech encoders.

Fax relay mode provides signal processing of fax signals. As shown in fax relay mode enables the transmission of fax signals over a packet based system such as VoIP VoFR FRF 11 VTOA or any other proprietary network. The fax relay mode should also permit data signals to be carried over traditional media such as TDM. Network gateways the operating platform for the signal processing system in the described exemplary embodiment support the exchange of fax signals between a packet based network and various fax machines . For the purposes of explanation the first fax machine is a sending fax . The sending fax is connected to the sending network gateway through a PSTN line . The sending network gateway is connected to a packet based network Additional fax machines are at the other end of the packet based network and include receiving fax machines and receiving network gateways . The receiving network gateways may provide a direct interface between their respective fax machines and the packet based network .

The transfer of fax signals over packet based networks may be accomplished by at least three alternative methods. In the first method fax data signals are exchanged in real time. Typically the sending and receiving fax machines are spoofed to allow transmission delays plus jitter of up to about 1.2 seconds. The second store and forward mode is a non real time method of transferring fax data signals. Typically the fax communication is transacted locally stored into memory and transmitted to the destination fax machine at a subsequent time. The third mode is a combination of store and forward mode with minimal spoofing to provide an approximate emulation of a typical fax connection.

In the fax relay mode the network VHD invokes the packet fax data exchange. The packet fax data exchange provides demodulation and re modulation of fax data signals. This approach results in considerable bandwidth savings since only the underlying unmodulated data signals are transmitted across the packet based network. The packet fax data exchange also provides compensation for network jitter with a jitter buffer similar to that invoked in the packet voice exchange. Additionally the packet fax data exchange compensates for lost data packets with error correction processing. Spoofing may also be provided during various stages of the procedure between the fax machines to keep the connection alive.

The packet fax data exchange is divided into two basic functional units a demodulation system and a re modulation system. In the demodulation system the network VHD couples fax data signals from a circuit switched network or a fax machine to the packet based network. In the re modulation system the network VHD couples fax data signals from the packet network to the switched circuit network or a fax machine directly.

During real time relay of fax data signals over a packet based network the sending and receiving fax machines are spoofed to accommodate network delays plus jitter. Typically the packet fax data exchange can accommodate a total delay of up to about 1.2 seconds. Preferably the packet fax data exchange supports error correction mode ECM relay functionality although a full ECM implementation is typically not required. In addition the packet fax data exchange should preferably preserve the typical call duration required for a fax session over a PSTN ISDN when exchanging fax data signals between two terminals.

The packet fax data exchange for the real time exchange of fax data signals between a circuit switched network and a packet based network is shown schematically in . In this exemplary embodiment a connecting PXD not shown connecting the fax machine to the switch board is transparent although those skilled in the art will appreciate that various signal conditioning algorithms could be programmed into PXD such as echo cancellation and gain.

After the PXD not shown the incoming fax data signal is coupled to the demodulation system of the packet fax data exchange operating in the network VHD via the switchboard . The incoming fax data signal is received and buffered in an ingress media queue . A V.21 data pump demodulates incoming T.30 message so that T.30 relay logic can decode the received T.30 messages . Local T.30 indications are packetized by a packetization engine and if required translated into T.38 packets via a T.38 shim for transmission to a T.38 compliant remote network gateway not shown across the packet based network. The V.21 data pump is selectively enabled disabled by the T.30 relay logic in accordance with the reception transmission of the T.30 messages or fax data signals. The V.21 data pump is common to the demodulation and re modulation system. The V.21 data pump communicates T.30 messages such as for example called station tone CED and calling station tone CNG to support fax setup between a local fax device not shown and a remote fax device not shown via the remote network gateway.

The demodulation system further includes a receive fax data pump which demodulates the fax data signals during the data transfer phase. The receive fax data pump supports the V.27ter standard for fax data signal transfer at 2400 4800 bps the V.29 standard for fax data signal transfer at 7200 9600 bps as well as the V.17 standard for fax data signal transfer at 7200 9600 12000 14400 bps. The V.34 fax standard once approved may also be supported. The T.30 relay logic enables disables the receive fax data pump in accordance with the reception of the fax data signals or the T.30 messages.

If error correction mode ECM is required receive ECM relay logic performs high level data link control HDLC de framing including bit de stuffing and preamble removal on ECM frames contained in the data packets. The resulting fax data signals are then packetized by the packetization engine and communicated across the packet based network. The T.30 relay logic selectively enables disables the receive ECM relay logic in accordance with the error correction mode of operation.

In the re modulation system if required incoming data packets are first translated from a T.38 packet format to a protocol independent format by the T.38 packet shim . The data packets are then de packetized by a depacketizing engine . The data packets may contain T.30 messages or fax data signals. The T.30 relay logic reformats the remote T.30 indications and forwards the resulting T.30 indications to the V.21 data pump . The modulated output of the V.21 data pump is forwarded to an egress media queue for transmission in either analog format or after suitable conversion as 64 kbps PCM samples to the local fax device over a circuit switched network such as for example a PSTN line.

De packetized fax data signals are transferred from the depacketizing engine to a jitter buffer . If error correction mode ECM is required transmitting ECM relay logic performs HDLC de framing including hit stuffing and preamble addition on ECM frames. The transmitting ECM relay logic forwards the fax data signals in the appropriate format to a transmit fax data pump which modulates the fax data signals and outputs 8 K.Hz digital samples to the egress media queue . The T.30 relay logic selectively enables disables the transmit ECM relay logic in accordance with the error correction mode of operation.

The transmit fax data pump supports the V.27ter standard for fax data signal transfer at 2400 4800 bps the V.29 standard for fax data signal transfer at 7200 9600 bps as well as the V.17 standard for fax data signal transfer at 7200 9600 12000 14400 bps. The T.30 relay logic selectively enables disables the transmit fax data pump in accordance with the transmission of the fax data signals or the T.30 message samples.

If the jitter buffer underflows a buffer low indication is coupled to spoofing logic . Upon receipt of a buffer low indication during the fax data signal transmission the spoofing logic inserts spoofed data at the appropriate place in the fax data signals via the transmit fax data pump until the jitter buffer is filled to a pre determined level at which time the fax data signals are transferred out of the jitter buffer . Similarly during the transmission of the T.30 message indications the spoofing logic can insert spoofed data at the appropriate place in the T.30 message samples via the V.21 data pump .

An exemplary embodiment of the packet fax data exchange complies with the T.38 recommendations for real time Group 3 facsimile communication over packet based networks. In accordance with the T.3 8 standard the preferred system should therefore provide packet fax data exchange support at both the T.30 level see ITU Recommendation T.30 Procedures for Document Facsimile Transmission in the General Switched Telephone Network 1988 and the T4 level see ITU Recommendation TA Standardization of Group 3 Facsimile Apparatus For Document Transmission 1998 the contents of each of these ITU recommendations being incorporated herein by reference as if set forth in full. One function of the packet fax data exchange is to relay the set up capabilities parameters in a timely fashion. Spoofing may be needed at either or both the T.30 and T.4 levels to maintain the fax session while set up parameters are negotiated at each of the network gateways and relayed in the presence of network delays and jitter.

In accordance with the industry T.38 recommendations for real time Group 3 communication over packet based networks the described exemplary embodiment relays all information including T.30 preamble indications flags T.30 message data as well as T.30 image data between the network gateways. The T.30 relay logic in the sending and receiving network gateways then negotiate parameters as if connected via a PSTN line. The T.30 relay logic interfaces with the V.21 data pump and the receive and transmit data pumps and as well as the packetization engine and the depacketizing engine to ensure that the sending and the receiving fax machines and successfully and reliably communicate. The T.30 relay logic provides local spoofing using command repeats CRP and automatic repeat request ARQ mechanisms incorporated into the T.30 protocol to handle delays associated with the packet based network. In addition the T.30 relay logic intercepts control messages to ensure compatibility of the rate negotiation between the near end and far end machines including HDLC processing as well as lost packet recovery according to the T.30 ECM standard.

In the control and capabilities exchange the receiving network gateway transmits T.30 preamble HDLC flags followed by called subscriber identification CSI and digital identification signal DIS message which contains the capabilities of the receiving fax device. The sending network gateway forwards the HDLC flags CSI and DIS to the sending fax device. Upon receipt of CSI and DIS the sending fax device determines the conditions for the call by examining its own capabilities table relative to those of the receiving fax device. The sending fax device issues a command to the sending network gateway to begin transmitting HDLC flags. Next the sending fax device transmits subscriber identification TSI and digital command signal DCS messages which define the conditions of the call to the sending network gateway. In response the sending network gateway forwards V.21 HDLC sending subscriber identification frame check sequences and digital command signal frame check sequences to the receiving fax device via the receiving network gateway. Next the sending fax device transmits training check TCF fields to verify the training and ensure that the channel is suitable for transmission at the accepted data rate.

The TCF may be managed by one of two methods. The first method referred to as the data rate management method one in the T.38 standard the receiving network gateway locally generate TCF. Confirmation to receive CFR is returned to the sending fax device when the sending network gateway receives a confirmation to receive CFR from the receiving fax machine via the receiving network gateway and the TCF training from the sending fax machine is received successfully. In the event that the receiving fax machine receives a CFR and the TCF training from the sending fax machine subsequently fails then DCS from the sending fax machine is again relayed to the receiving fax machine. The TCF training is repeated until an appropriate rate is established which provides successful TCF training at both ends of the network.

In a second method to synchronize the data rate referred to as the data rate management method two in the T.38 standard the TCF data sequence received by the sending network gateway is forwarded from the sending fax machine to the receiving fax machine via the receiving network gateway. The sending and receiving fax machines then perform speed selection as if connected via a regular PSTN.

Upon receipt of confirmation to receive CFR. which indicates that all capabilities and the modulation speed have been confirmed the sending fax machine enters the page transfer phase and transmits image data along with its training preamble . The sending network gateway receives the image data and forwards the image data to the receiving network gateway. The receiving network gateway then sends its own training preamble followed by the image data to the receiving fax machine.

In the end of page and multi page signaling phase after the page has been successfully transmitted the sending fax device sends an end of procedures EOP message if the fax call is complete and all pages have been transmitted. If only one of multiple pages has been successfully transmitted the sending fax device transmits a multi page signal MPS . The receiving fax device responds with message confirmation MCF to indicate the message has been successfully received and that the receiving fax device is ready to receive additional pages. The release phase is the final phase of the call where at the end of the final page the receiving fax machine sends a message confirmation MCF which prompts the sending fax machine to transmit a disconnect DCN signal . The call is then terminated at both ends of the network.

ECM fax relay message flow is similar to that described above. All preambles messages and page transfers phase C HDLC data are relayed through the packet based network. Phase C HDLC data is de stuffed and along with the preamble and frame checking sequences FCS removed before being relayed so that only fax image data itself is relayed over the packet based network. The receiving network gateway performs bit stuffing and reinserts the preamble and FCS.

Spoofing refers to the process by which a facsimile transmission is maintained in the presence of data packet under run due to severe network jitter or delay. An exemplary embodiment of the packet fax data exchange complies with the T.38 recommendations for real time Group 3 facsimile communication over packet based networks. In accordance with the T.3 8 recommendations a local and remote T.30 fax device communicate across a packet based network via signal processing systems which for the purposes of explanation are operating in network gateways. In operation each fax device establishes a facsimile connection with its respective network gateway in accordance with the ITU T.30 standards and the signal processing systems operating in the network gateways relay data signals across a packet based network.

In accordance with the T.30 protocol there are certain time constraints on the handshaking and image data transmission for the facsimile connection between the T.30 fax device and its respective network gateway. The problem that arises is that the T.30 facsimile protocol is not designed to accommodate the significant jitter and packet delay that is common to communications across packet based networks. To prevent termination of the fax connection due to severe network jitter or delay it is therefore desirable to ensure that both T.30 fax devices can be spoofed during periods of data packet under run. demonstrates fax communication under the T.30 protocol wherein a handshake negotiator typically a low speed modem such as V.21 performs handshake negotiation and fax image data is communicated via a high speed data pump such as V.27 V.29 or V.17. In addition fax image data can be transmitted in an error correction mode ECM or non error correction mode non ECM each of which uses a different data format.

Therefore in the described exemplary embodiment the particular spoofing technique utilized is a function of the transmission format. In the described exemplary embodiment HDLC preamble is used to spoof the T.30 fax devices during V.21 handshaking and during transmission of fax image data in the error correction mode. However zero bit filling is used to spoof the T.30 fax devices during fax image data transfer in the non error correction mode. Although fax relay spoofing is described in the context of a signal processing system with the packet data fax exchange invoked those skilled in the art will appreciate that the described exemplary fax relay spoofing method is likewise suitable for various other telephony and telecommunications application. Accordingly the described exemplary embodiment of fax relay spoofing in a signal processing system is by way of example only and not by way of limitation.

The T.30 relay logic packages each message or command into a HDLC frame which includes preamble flags. An HDLC frame structure is utilized for all binary coded V.21 facsimile control procedures. The basic HDLC structure consists of a number of frames each of which is subdivided into a number of fields. The HDLC frame structure provides for frame labeling and error checking. When a new facsimile transmission is initiated HDLC preamble in the form of synchronization sequences are transmitted prior to the binary coded information. The HDLC preamble is V.21 modulated bit streams of 01111110 0x7e .

In the described exemplary embodiment spoofing techniques are utilized at the T.30 and T.4 levels to manage extended network delays and jitter. Turning back to the T.30 relay logic waits for a response to any message or command transmitted across the packet based network before continuing to the next state or phase. In accordance with an exemplary spoofing technique the sending and receiving network gateways See spoof their respective fax machines by locally transmitting HDLC preamble flags if a response to a transmitted message is not received from the packet based network within approximately 1.5 2.0 seconds. The maximum length of the preamble is limited to about four seconds. If a response from the packet based network arrives before the spoofing time out each network gateway should preferably transmit a response message to its respective fax machine following the preamble flags. Otherwise if the network response to a transmitted message is not received prior to the spoofing time out in the range of about 5.5 6.0 seconds the response is assumed to be lost. In this case when the network gateway times out and terminates preamble spoofing the local fax device transmits the message command again. Each network gateway repeats the spoofing technique until a successful handshake is completed or its respective fax machine disconnects.

The packet fax data exchange utilizes an HDLC frame structure for ECM high speed data transmission. Preferably the frame image data is divided by one or more HDLC preamble flags. If the network under runs due to jitter or packet delay the network gateways spoof their respective fax devices at the T.4 level by adding extra HDLC flags between frames. This spoofing technique increases the sending time to compensate for packet under run due to network jitter and delay. Returning to if the jitter buffer underflows a buffer low indication is coupled to the spoofing logic . Upon receipt of a buffer low indication during the fax data signal transmission the spoofing logic inserts HDLC preamble flags at the frame boundary via the transmit fax data pump . When the jitter buffer is filled to a pre determined level the fax image data is transferred out of the jitter buffer .

In the described exemplary embodiment the jitter buffer must be sized to store at least one HDLC frame so that a frame boundary may be located. The length of the largest T.4 ECM HDLC frame is 260 octets or 130 16 bit words. Spoofing is preferably activated when the number of packets stored in the jitter buffer drops to a predetermined threshold level. When spoofing is required the spoofing logic adds HDLC flags at the frame boundary as a complete frame is being reassembled and forwarded to the transmit fax data pump . This continues until the number of data packets in the jitter buffer exceeds the threshold level. The maximum time the network gateways will spoof their respective local fax devices can vary but can generally be about ten seconds.

T.4 spoofing handles delay impairments during page transfer or C phase of a fax call. For those systems that do not utilize ECM phase C signals comprise a series of coded image data followed by fill bits and end of line EOL sequences. Typically fill bits are zeros inserted between the fax data signals and the EOL sequences 000000000001 . Fill bits ensure that a fax machine has time to perform the various mechanical overhead functions associated with any line it receives. Fill bits can also be utilized to spoof the jitter buffer to ensure compliance with the minimum transmission time of the total coded scan line established in the pre message V.21 control procedure. The number of the bits of coded image contained in the data signals associated with the scan line and transmission speed limit the number of fill bits that can be added to the data signals. Preferably the maximum transmission of any coded scan line is limited to less than about 5 sec. Thus if the coded image for a given scan line contains 1000 bits and the transmission rate is 2400 bps then the maximum duration of fill time is 5 1000 12 2400 4.57 sec.

Generally the packet fax data exchange utilizes spoofing if the network jitter delay exceeds the delay capability of the jitter buffer . In accordance with the EOL spoofing method fill bits can only be inserted immediately before an EOL sequence so that the jitter buffer should preferably store at least one EOL sequence. Thus the jitter buffer should preferably be sized to hold at least one entire scan line of data to ensure the presence of at least one EOL sequence within the jitter buffer . Thus depending upon transmission rate the size of the jitter buffer can become prohibitively large. The table below summarizes the desired jitter buffer data space to perform EOL spoofing for various scan line lengths. The table assumes that each pixel is represented by a single bit. The values represent an approximate upper limit on the required data space but not the absolute upper limit because in theory at least the longest scan line can consist of alternating black and white pixels which would require an average of 4.5 bits to represent each pixel rather than the one to one ratio summarized in the table.

To ensure the jitter buffer stores an EOL sequence the spoofing logic should be activated when the number of data packets stored in the jitter buffer drops to a threshold level. Typically a threshold value of about 200 msec is used to support the most commonly used fax setting namely a fax speed of 9600 bps and scan line length of 1728. An alternate spoofing method should be used if an EOL sequence is not contained within the jitter buffer otherwise the call will have to be terminated. An alternate spoofing method uses zero run length code words. This method requires real time image data decoding so that the word boundary is known. Advantageously this alternate method reduces the required size of the jitter buffer .

Simply increasing the storage capacity of the jitter buffer can minimize the need for spoofing. However overall network delay increases when the size of the jitter buffer is increased. Increased network delay may complicate the T 30 negotiation at the end of page or end of document because of susceptibility to time out. Such a situation arises when the sending fax machine completes the transmission of high speed data and switches to an HDLC phase and sends the first V.21 packet in the end of page multi page signaling phase i.e. phase D . The sending fax machine must be kept alive until the response to the V.21 data packet is received. The receiving fax device requires more time to flush a large jitter buffer and then respond hence complicating the T.30 negotiation.

In addition the length of time a fax machine can be spoofed is limited so that the jitter buffer can not be arbitrarily large. A pipeline store and forward relay is a combination of store and forward and spoofing techniques to approximate the performance of a typical Group 3 fax connection when the network delay is large on the order of seconds or more . One approach is to store and forward a single page at a time. However this approach requires a significant amount of memory 10 Kwords or more . One approach to reduce the amount of memory required entails discarding scan lines on the sending network gateway and performing line repetition on the receiving network gateway so as to maintain image aspect ratio and quality. Alternatively a partial page can be stored and forwarded thereby reducing the required amount of memory.

The sending and receiving fax machines will have some minimal differences in clock frequency. ITU standards recommends a data pump data rate of 100 ppm so that the clock frequencies between the receiving and sending fax machines could differ by up to 200 ppm.

Therefore the data rate at the receiving network gateway jitter buffer can build up or deplete at a rate of 1 word for every 5000 words received. Typically a fax page is less than 1000 words so that end to end clock synchronization is not required.

Data relay mode provides full duplex signal processing of data signals. As shown in data relay mode enables the transmission of data signals over a packet based system such as VoIP VoFR FRF 11 VTOA or any other proprietary network. The data relay mode should also permit data signals to be carried over traditional media such as TDM. Network gateways support the exchange of data signals between a packet based network and various data modems . For the purposes of explanation the first modem is referred to as a call modem . The call modem is connected to the call network gateway through a PSTN line. The call network gateway is connected to a packet based network . Additional modems are at the other end of the packet based network and include answer modems and answer network gateways . The answer network gateways provide a direct interface between their respective modems and the packet based network .

In data relay mode a local modem connection is established on each end of the packet based network . That is the call modem and the call network gateway establish a local modern connection as does the destination answer modem and its respective answer network gateway . Next data signals are relayed across the packet based network . The call network gateway demodulates the data signal and formats the demodulated data signal for the particular packet based network . The answer network gateway compensates for network impairments and remodulates the encoded data in a format suitable for the destination answer modem . This approach results in considerable bandwidth savings since only the underlying demodulated data signals are transmitted across the packet based network.

In the data relay mode the packet data modern exchange provides demodulation and modulation of data signals. With full duplex capability both modulation and demodulation of data signals can be performed simultaneously. The packet data modem exchange also provides compensation for network jitter with a jitter buffer similar to that invoked in the packet voice exchange. Additionally the packet data modem exchange compensates for system clock jitter between modems with a dynamic phase adjustment and resampling mechanism. Spoofing may also be provided during various stages of the call negotiation procedure between the modems to keep the connection alive.

The packet data modem exchange invoked by the network VHD in the data relay mode is shown schematically in . In the described exemplary embodiment a connecting PXD not shown connecting a modem to the switch board is transparent although those skilled in the art will appreciate that various signal conditioning algorithms could be programmed into the PXD such as filtering echo cancellation and gain.

After the PXD the data signals are coupled to the network VHD via the switchboard . The packet data modem exchange provides two way communication between a circuit switched network and packet based network with two basic functional units a demodulation system and a remodulation system. In the demodulation system the network VHD exchanges data signals from a circuit switched network or a telephony device directly to a packet based network. In the remodulation system the network VHD exchanges data signals from the packet based network to the PSTN line or the telephony device.

In the demodulation system the data signals are received and buffered in an ingress media queue . A data pump receiver demodulates the data signals from the ingress media queue . The data pump receiver supports the V.22bis standard for the demodulation of data signals at 1200 2400 bps the V.32bis standard for the demodulation of data signals at 4800 7200 9600 12000 14400 bps as well as the V.34 standard for the demodulation of data signals up to 33600 bps. Moreover the V.90 standard may also be supported. The demodulated data signals are then packetized by the packetization engine and transmitted across the packet based network.

In the remodulation system packets of data signals from the packet based network are first depacketized by a depacketizing engine and stored in a jitter buffer . A data pump transmitter modulates the buffered data signals with a voiceband carrier. The modulated data signals are in turn stored in the egress media queue before being output to the PXD not shown via the switchboard . The data pump transmitter supports the V.22bis standard for the transfer of data signals at 1200 2400 bps the V.32bis standard for the transfer of data signals at 4800 7200 9600 12000 14400 bps as well as the V.34 standard for the transfer of data signal up to 33600 bps. Moreover the V.90 standard may also be supported.

During jitter buffer underflow the jitter buffer sends a buffer low indication to spoofing logic . When the spoofing logic receives the buffer low signal indicating that the jitter buffer is operating below a predetermined threshold level it inserts spoofed data at the appropriate place in the data signal via the data pump transmitter . Spoofing continues until the jitter buffer is filled to the predetermined threshold level at which time data signals are again transferred from the jitter buffer to the data pump transmitter .

End to end clock logic also monitors the state of the jitter buffer . The clock logic controls the data transmission rate of the data pump transmitter in correspondence to the state of the jitter buffer . When the jitter buffer is below a predetermined threshold level the clock logic reduces the transmission rate of the data pump transmitter . Likewise when the jitter buffer is above a predetermined threshold level the clock logic increases the transmission rate of the data pump transmitter .

Before the transmission of data signals across the packet based network the connection between the two modems must first be negotiated through a handshaking sequence. This entails a two step process. First a call negotiator determines the type of modem i.e. V.22 V.32bis V.34 V.90 etc. connected to each end of the packet based network. Second a rate negotiator negotiates the data signal transmission rate between the two modems.

The call negotiator determines the type of modem connected locally as well as the type of modem connected remotely via the packet based network. The call negotiator utilizes V.25 automatic answering procedures and V.8 auto baud software to automatically detect modem capability. The call negotiator receives protocol indication signals ANSam and V.8 menus from the ingress media queue as well as AA AC and other message indications from the local modem via a data pump state machine to determine the type of modem in use locally. The call negotiator relays the ANSam answer tones and other indications from the data pump state machine to the remote modem via a packetization engine . The call negotiator also receives ANSam AA AC and other indications from a remote modem not shown located on the opposite end of the packet based network via a depacketizing engine . The call negotiator relays ANSam answer tones and other indications to a local modem not shown via an egress media queue of the modulation system. With the ANSam AA AC and other indications from the local and remote modems the call negotiator can then negotiate a common standard i.e. V.22 V.32bis V.34 V.90 etc. in which the data pumps must communicate with the local modem and the remote modems.

The packet data modem exchange preferably utilizes indication packets as a means for communicating answer tones AA AC and other indication signals across the packet based network However the packet data modem exchange supports data pumps such as V.22bis and V.32bis which do not include a well defined error recovery mechanism so that the modem connection may be terminated whenever indication packets are lost. Therefore either the packet data modem exchange or the application layer should ensure proper delivery of indication packets when operating in a network environment that does not guarantee packet delivery.

The packet data modem exchange can ensure delivery of the indication packets by periodically retransmitting the indication packet until some expected packets are received. For example in V.32bis relay the call negotiator operating under the packet data modern exchange on the answer network gateway periodically retransmits ANSam answer tones from the answer modem to the call modem until the calling modem connects to the line and transmits carrier state AA.

Alternatively the packetization engine can embed the indication information directly into the packet header. In this approach an alternate packet format is utilized to include the indication information. During modem handshaking indication packets transmitted across the packet based network include the indication information so that the system does not rely on the successful transmission of individual indication packets. Rather if a given packet is lost the next arriving packet contains the indication information in the packet header. Both methods increase the traffic across the network. However it is preferable to periodically retransmit the indication packets because it has less of a detrimental impact on network traffic.

A rate negotiator synchronizes the connection rates at the network gateways see . The rate negotiator receives rate control codes from the local modem via the data pump state machine and rate control codes from the remote modem via the depacketizing engine . The rate negotiator also forwards the remote rate control codes received from the remote modem to the local modem via commands sent to the data pump state machine . The rate negotiator forwards the local rate control codes received from the local modem to the remote modem via the packetization engine . Based on the exchanged rate codes the rate negotiator establishes a common data rate between the calling and answering modems. During the data rate exchange procedure the jitter buffer should be disabled by the rate negotiator to prevent data transmission between the call and answer modems until the data rates are successfully negotiated.

Similarly error control V.42 and data compression V.42bis modes should be synchronized at each end of the packet based network. Error control logic receives local error control messages from the data pump receiver and forwards those V.14 V.42 negotiation messages to the remote modem via the packetization engine . In addition error control logic receives remote V.14 V.42 indications from the depacketizing engine and forwards those V.14 V.42 indications to the local modem. With the V.14 V.42 indications from the local and remote modems the error control logic can negotiate a common standard to ensure that the network gateways utilize a common error protocol. In addition error control logic communicates the negotiated error control protocol to the spoofing logic to ensure data mode spoofing is in accordance with the negotiated error control mode.

V.42 is a standard error correction technique using advanced cyclical redundancy checks and the principle of automatic repeat requests ARQ . In accordance with the V.42 standard transmitted data signals are grouped into blocks and cyclical redundancy calculations add error checking words to the transmitted data signal stream. The receiving modem calculates new error check information for the data signal block and compares the calculated information to the received error check information. If the codes match the received data signals are valid and another transfer takes place. If the codes do not match a transmission error has occurred and the receiving modem requests a repeat of the last data block. This repeat cycle continues until the entire data block has been received without error.

Various voiceband data modem standards exist for error correction and data compression. V.42bis and MNP are examples of data compression standards. The handshaking sequence for every modem standard is different so that the packet data modem exchange should support numerous data transmission standards as well as numerous error correction and data compression techniques.

Slight differences in the clock frequency of the call modem and the answer modem are expected since the baud rate tolerance for a typical modem data pump is 100 ppm. This tolerance corresponds to a relatively low depletion or build up rate of 1 in 5000 words. However the length of a modem session can be very long so that uncorrected difference in clock frequency may result in jitter buffer underflow or overflow.

In the described exemplary embodiment the clock logic synchronizes the transmit clock of the data pump transmitter to the average rate at which data packets arrive at the jitter buffer . The data pump transmitter packages the data signals from the jitter buffer in frames of data signals for demodulation and transmission to the egress media queue . At the beginning of each frame of data signals the data pump transmitter examines the egress media queue to determine the remaining buffer space and in accordance therewith the data pump transmitter modulates that number of digital data samples required to produce a total of slightly more or slightly less than 80 samples per frame assuming that the data pump transmitter is invoked once every 10 msec. The data pump transmitter gradually adjusts the number of samples per frame to allow the receiving modem to adjust to the timing change. Typically the data pump transmitter uses an adjustment rate of about one ppm per frame. The maximum adjustment should be less than about 200 ppm.

In the described exemplary embodiment end to end clock logic monitors the space available within the jitter buffer and utilizes water marks to determine whether the data rate of the data pump transmitter should be adjusted. Network jitter may cause timing adjustments to be made. However this should not adversely affect the data pump receiver of the answering modem as these timing adjustments are made very gradually.

A single industry standard for the transmission of modem data over a packet based network does not exist. However numerous common standards exist for transmission of modem data at various data rates over the PSTN. For example V.22 is a common standard used to define operation of 1200 bps modems. Data rates as high as 2400 bps can be implemented with the V.22bis standard the suffix bis indicates that the standard is an adaptation of an existing standard . The V.22bis standard groups data signals into four bit words which are transmitted at 600 baud. The V.32 standard supports fill duplex data rates of up to 9600 bps over the PSTN. A V.32 modem groups data signals into four hit words and transmits at 2400 baud. The V.32bis standard supports duplex modems operating at data rates up to 14 400 bps on the PSTN. In addition the V.34 standard supports data rates up to 33 600 bps on the public switched telephone network. In the described exemplary embodiment these standards can be used for data signal transmission over the packet based network with a call negotiator that supports each standard.

Rate negotiation refers to the process by which two telephony devices are connected at the same data rate prior to data transmission. In the context of a modem connection in accordance with an exemplary embodiment of the present invention each modem is coupled to a signal processing system which for the purposes of explanation is operating in a network gateway either directly or through a PSTN line. In operation each modem establishes a modem connection with its respective network gateway at which point the modems begin relaying data signals across a packet based network. The problem that arises is that each modem may negotiate a different data rate with its respective network gateway depending on the line conditions and user settings. In this instance the data signals transmitted from one of the modems will enter the packet based network faster than it can be extracted at the other end by the other modem. The resulting overflow of data signals may result in a lost connection between the two modems. To prevent data signal overflow it is therefore desirable to ensure that both modems negotiate to the same data rate. A rate negotiator can be used for this purpose. Although the rate negotiator is described in the context of a signal processing system with the packet data modem exchange invoked those skilled in the art will appreciate that the rate negotiator is likewise suitable for various other telephony and telecommunications application. Accordingly the described exemplary embodiment of the rate negotiator in a signal processing system is by way of example only and not by way of limitation.

In an exemplary embodiment data rate negotiation is achieved through a data rate negotiation procedure wherein a call modem independently negotiates a data rate with a call network gateway and an answer modem independently negotiates a data rate with an answer network gateway. The calling and answer network gateways each having a signal processing system running a packet exchange then exchange data packets containing information on the independently negotiated data rates. If the independently negotiated data rates are the same then each rate negotiator will enable its respective network gateway and data transmission between the call and answer modems will commence. Conversely if the independently negotiated data rates are different the rate negotiator will renegotiate the data rate by adopting the lowest of the two data rates. The call and answer modems will then undergo retraining or rate renegotiation procedures by their respective network gateways to establish a new connection at the renegotiated data rate. The advantage of this approach is that the data rate negotiation procedure takes advantage of existing modem functionality namely the retraining and rate renegotiation mechanism and puts it to alternative usage. Moreover by retraining both the call and answer modem one modem will already be set to the renegotiated rate both modems are automatically prevented from sending data.

Alternatively the calling and answer modems can directly negotiate the data rate. This method is not preferred for modems with time constrained handshaking sequences such as for example modems operating in accordance with the V.22bis or the V.32bis standards. The round trip delay accommodated by these standards could cause the modem connection to be lost due to timeout. Instead retrain or rate renegotiation should be used for data signals transferred in accordance with the V.22bis and V.32bis standards whereas direct negotiation of the data rate by the local and remote modems can be used for data exchange in accordance with the V.34 and V.90 a digital modem and analog modem pair for use on PSTN lines at data rates up to 56 000 bps downstream and 33 600 upstream standards.

The call negotiator on the answer network gateway differentiates between modem types and relays the ANSam answer tone. The answer modem transmits unscrambled binary ones signal USB1 indications to the answer mode gateway. The answer network gateway forwards USB1 signal indications to the call network gateway. The call negotiator in the call network gateway assumes operation in accordance with the V.22bis standard as a result of the USB1 signal indication and terminates the call negotiator. The packet data modem exchange in the answer network gateway then invokes operation in accordance with the V.22bis standard after an answer tone timeout period and terminates its call negotiator.

V.22bis handshaking does not utilize rate messages or signaling to indicate the selected bit rate as with most high data rate pumps. Rather the inclusion of a fixed duration signal S indicates that 2400 bps operation is to be used. The absence of the S1 signal indicates that 1200 bps should be selected. The duration of the S1 signal is typically about 100 msec making it likely that the call modem will perform rate determination assuming that it selects 2400 bps before rate indication from the answer modem arrives. Therefore the rate negotiator in the call network gateway should select 2400 bps operation and proceed with the handshaking procedure. If the answer modem is limited to a 1200 bps connection rate renegotiation is typically used to change the operational data rate of the call modem to 1200 bps. Alternatively if the call modem selects 1200 bps rate renegotiation would not be required.

V32bis handshaking utilizes rate signals messages to specify the bit rate. A relay sequence in accordance with the V.32bis standard is shown in and begins with the call negotiator in the answer network gateway relaying ANSam answer tone from the answer modem to the call modem. After receiving the answer tone for a period of at least one second the call modem connects to the line and repetitively transmits carrier state A . When the call network gateway detects the repeated transmission of carrier state A AA the call network gateway relays this information to the answer network gateway. In response the answer network gateway forwards the AA indication to the answer modem and invokes operation in accordance with the V.32bis standard. The answer modem then transmits alternating carrier states A and C to the answer network gateway. If the answer network gateway receives AC from the answer modem the answer network gateway relays AC to the call network gateway thereby establishing operation in accordance with the V.32bis standard allowing call negotiator in the call network gateway to be terminated. Next data rate alignment is achieved by either of two methods.

In the first method for data rate alignment of a V.32bis relay connection the call modem and the answer modem independently negotiate a data rate with their respective network gateways at each end of the network and . Next each network gateway forwards a connection data rate indication and to the other network gateway. Each network gateway compares the far end data rate to its own data rate. The preferred rate is the minimum of the two rates. Rate renegotiation and is invoked if the connection rate of either network gateway to its respective modem differs from the preferred rate.

In the second method rate signals R R and R are relayed to achieve data rate negotiation. shows a relay sequence in accordance with the V.32bis standard for this alternate method of rate negotiation. The call negotiator relays the answer tone ANSam from the answer modem to the call modem. When the call modem detects answer tone it repetitively transmits carrier state A to the call network gateway. The call network gateway relays this information AA to the answer network gateway. The answer network gateway sends the AA to the answer modem and initiates normal range tone exchange with the answer modem. The answer network gateway then forwards AC to call network gateway which in turn relays this information to the call modem to initiate normal range tone exchange between the call network gateway and the call modem.

The answer modem sends its first training sequence followed by R the data rates currently available in the answer modem to the rate negotiator in the answer network gateway. When the answer network gateway receives an R indication it forwards R to the call network gateway. The answer network gateway then repetitively sends training sequences to the answer modem. The call network gateway forwards the R indication of the answer modem to the call modem. The call modem sends training sequences to the call network gateway . The call network gateway determines the data rate capability of the call modem and forwards the data rate capabilities of the call modem to the answer network gateway in a data rate signal format. The call modem also sends an R indication data rate capability of the call modem preferably excluding rates not included in the previously received R signal i.e. not supported by the answer modem to the call network gateway which forwards it to the answer network gateway. The call network gateway then repetitively sends training sequences to the call modem until receiving an R signal from the answer modem via the answer network gateway.

The answer network gateway performs a logical AND operation on the R signal from the answer modem data rate capability of the answer modem the R signal from the call modem data rate capability of the call modem excluding rates not supported by the answer modem and the training sequences of the call network gateway data rate capability of the call modem to create a second rate signal R which is forwarded to the answer modem. The answer modem sends its second training sequence followed an R signal which indicates the data rate to be used by both modems. The answer network gateway relays R to the call network gateway which forwards it to the call modem and begins operating at the R specified bit rate. However this method of rate synchronization is not preferred for V.32bis due to time constrained handshaking.

Data transmission in accordance with the V.34 standard utilizes a modulation parameter MP sequence to exchange information pertaining to data rate capability. The MP sequences can be exchanged end to end to achieve data rate synchronization. Initially the call negotiator in the answer network gateway relays the answer tone ANSam from the answer modem to the call modem. When the call modem receives answer tone it generates a CM indication and forwards it to the call network gateway. When the call network gateway receives a CM indication it forwards it to the answer network gateway which then communicates the CM indication with the answer modem. The answer modem then responds by transmitting a JM sequence to the answer network gateway which is relayed by the answer network gateway to the call modem via the call network gateway. If the call network gateway then receives a CJ sequence from the call modem the call negotiator in the call network gateway initiates operation in accordance with the V.34 standard and forwards a CJ sequence to the answer network gateway. If the JM menu calls for V.34 the call negotiator in the answer network gateway initiates operation in accordance with the V.34 standard and the call negotiator is terminated. If a standard other than V.34 is called for the appropriate procedure is invoked such as those described previously for V.22 or V.32bis. Next data rate alignment is achieved by either of two methods.

In a first method for data rate alignment after a V.34 relay connection is established the call modem and the answer modem freely negotiate a data rate at each end of the network with their respective network gateways. Each network gateway forwards a connection rate indication to the other gateway. Each gateway compares the far end bit rate to the rate transmitted by each gateway. For example the call network gateway compares the data rate indication received from the answer modem gateway to that which it negotiated freely negotiated to with the call modem. The preferred rate is the minimum of the two rates. Rate renegotiation is invoked if the connection rate at the calling or receiving end differs from the preferred rate to force the connection to the desired rate.

In an alternate method for V.34 rate synchronization MP sequences are utilized to achieve rate synchronization without rate renegotiation. The call modem and the answer modem independently negotiate with the call network gateway and the answer network gateway respectively until phase IV of the negotiations is reached. The call network gateway and the answer network gateway exchange training results in the form of MP sequences when Phase IV of the independent negotiations is reached to establish the primary and auxiliary data rates. The call network gateway and the answer network gateway are preferably prevented from relaying MP sequences to the call modem and the answer modem respectively until the training results for both network gateways and the MP sequences for both modems are available. If symmetric rate is enforced the maximum answer data rate and the maximum call data rate of the four MP sequences are compared. The lower data rate of the two maximum rates is the preferred data rate. Each network gateway sends the MP sequence with the preferred rate to its respective modem so that the calling and answer modems operate at the preferred data rate.

If asymmetric rates are supported then the preferred call answer data rate is the lesser of the two highest call answer rates of the four MP sequences. Similarly the preferred answer call data rate is the lesser of the two highest answer call rates of the four MP sequences. Data rate capabilities may also need to be modified when the MP sequence are formed so as to be sent to the calling and answer modems. The MP sequence sent to the calling and answer modems is the logical AND of the data rate capabilities from the four MP sequences.

The V.90 standard utilizes a digital and analog modem pair to transmit modem data over the PSTN line. The V.90 standard utilizes MP sequences to convey training results from a digital to an analog modem and a similar sequence using constellation parameters CP to convey training results from an analog to a digital modem. Under the V.90 standard the timeout period is 15 seconds compared to a timeout period of 30 seconds under the V.34 standard. In addition the analog modems control the handshake timing during training. In an exemplary embodiment the call modem and the answer modem are the V.90 analog modems. As such the call modem and the answer modem are beyond the control of the network gateways during training. The digital modems only control the timing during transmission of TRN 1 d which the digital modem in the network gateway uses to train its echo canceller.

When operating in accordance with the V.90 standard the call negotiator utilizes the V.8 recommendations for initial negotiation. Thus the initial negotiation of the V.90 relay session is substantially the same as the relay sequence described for V.34 rate synchronization method one and method two with asymmetric rate operation. There are two configurations where V.90 relay may be used. The first configuration is data relay between two V.90 analog modems i.e. each of the network gateways are configured as V.90 digital modems. The upstream rate between two V.90 analog modems according to the V.90 standard is limited to 33 600 bps. Thus the maximum data rate for an analog to analog relay is 33 600 bps. In accordance with the V.90 standard the minimum data rate a V.90 digital modem will support is 28 800 bps. Therefore the connection must be terminated if the maximum data rate for one or both of the upstream directions is less than 28 800 bps and one or both the downstream direction is in V.90 digital mode. Therefore the V.34 protocol is preferred over V.90 for data transmission between local and remote analog modems.

A second configuration is a connection between a V.90 analog modem and a V.90 digital modem. A typical example of such a configuration is when a user within a packet based PABX system dials out into a remote access server RAS or an Internet service provider ISP that uses a central site modem for physical access that is V.90 capable. The connection from PABX to the central site modem may be either through PSTN or directly through an ISDN T1 or EI interface. Thus the V.90 embodiment should preferably support an analog modem interfacing directly to ISDN Tl or El.

For an analog to digital modem connection the connections at both ends of the packet based network should be either digital or analog to achieve proper rate synchronization. The analog modem decides whether to select digital mode as specified in INFO1a so that INFO1a should be relayed between the calling and answer modem via their respective network gateways before operation mode is synchronized.

Upon receipt of an INFO1a signal from the answer modem the answer network gateway performs a line probe on the signal received from the answer modem to determine whether digital mode can be used. The call network gateway receives an INFO1a signal from the call modem. The call network gateway sends a mode indication to the answer network gateway indicating whether digital or analog will be used and initiates operation in the mode specified in INFO1a. Upon receipt of an analog mode indication signal from the call network gateway the answer network gateway sends an INFO1a sequence to the answer modem. The answer network gateway then proceeds with analog mode operation. Similarly if digital mode is indicated and digital mode can be supported by the answer modem the answer network gateway sends an INFO1a sequence to the answer modem indicating that digital mode is desired and proceeds with digital mode operation.

Alternatively if digital mode is indicated and digital mode can not be supported by the answer modem the call modem should preferably be forced into analog mode by one of three alternate methods. First some commercially available V.90 analog modems may revert to analog mode after several retrains. Thus one method to force the call modem into analog mode is to force retrains until the call modem selects analog mode operation. In an alternate method the call network gateway modifies its line probe so as to force the call modern to select analog mode. In a third method the call modem and the answer modem operate in different modes. Under this method if the answer modem can not support a 28 800 bps data rate the connection is terminated.

The jitter buffer may underflow during long delays of data signal packets. Jitter buffer underflow can cause the data pump transmitter to run out of data and therefore it is desirable that the jitter buffer be spoofed with bit sequences. Preferably the bit sequences are benign. In the described exemplary embodiment the specific spoofing methodology is dependent upon the common error mode protocol negotiated by the error control logic of each network gateway.

In accordance with V.14 recommendations the spoofing logic checks for character format and boundary number of data bits start bits and stop bits within the jitter buffer . As specified in the V.14 recommendation the spoofing logic must account for stop bits omitted due to asynchronous to synchronous conversion. Once the spoofing logic locates the character boundary ones can be added to spoof the local modem and keep the connection alive. The length of time a modem can be spoofed with ones depends only upon the application program driving the local modem.

In accordance with the V.42 recommendations the spoofing logic checks for HDLC flag HDLC frame boundary within the jitter buffer . The basic HDLC structure consists of a number of frames each of which is subdivided into a number of fields. The HDLC frame structure provides for frame labeling and error checking. When a new data transmission is initiated HDLC preamble in the form of synchronization sequences are transmitted prior to the binary coded information. The HDLC preamble is modulated bit streams of 01111110 0x7e . The jitter buffer should be sufficiently large to guarantee that at least one complete HDLC frame is contained within the jitter buffer . The default length of an HDLC frame is 132 octets. The V.42 recommendations for error correction of data circuit terminating equipment DCE using asynchronous to synchronous conversion does not specify a maximum length for an HDLC frame. However because the length of the frame affects the overall memory required to implement the protocol a information frame length larger than 260 octets is unlikely.

The spoofing logic stores a threshold water mark with a value set to be approximately equal to the maximum length of the HDLC frame . Spoofing is preferably activated when the number of packets stored in the jitter buffer drops to the predetermined threshold level. When spoofing is required the spoofing logic adds HDLC flags at the frame boundary as a complete frame is being reassembled and forwarded to the transmit data pump. This continues until the number of data packets in the jitter buffer exceeds the threshold level.

In the described exemplary embodiment if data rates independently negotiated between the modems and their respective network gateways are different the rate negotiator will renegotiate the data rate by adopting the lowest of the two data rates. The call and answer modems will then undergo retraining or rate renegotiation procedures by their respective network gateways to establish a new connection at the renegotiated data rate. In addition rate synchronization may be lost during a modem communication requiring modem retraining and rate renegotiation due to drift or change in the conditions of the communication channel. When a retrain occurs an indication should be forwarded to the network gateway at the end of the packet based network. The network gateway receiving a retrain indication should initiate retrain with the connected modem to keep data flow in synchronism between the two connections. Rate synchronization procedures as previously described should be used to maintain data rate alignment after retrains.

Similarly rate renegotiation causes both the calling and answer network gateways and to perform rate renegotiation. However rate signals or MP CP sequences should be exchanged per method two of the data rate alignment as previously discussed for a V.32bis or V.34 rate synchronization whichever is appropriate.

Error control V.42 and data compression V.42bis modes should be synchronized at each end of the packet based network. In a first method the call modem and the answer modem independently negotiate an error correction mode with each other on their own transparent to the network gateways. This method is preferred for connections wherein the network delay plus jitter is relatively small as characterized by an overall round trip delay of less than 700 msec. Data compression mode is negotiated within V.42 so that the appropriate mode indication can be relayed when the calling and answer modems have entered into V.42 mode.

An alternative method is to allow modems at both ends to freely negotiate the error control mode with their respective network gateways. The network gateways must fully support all error correction modes when using this method. Also this method cannot support the scenario where one modem selects V.14 while the other modem selects a mode other than V.14. For the case where V.14 is negotiated at both sides of the packet based network an 8 bit no parity format is assumed by each respective network gateway and the raw demodulated data bits are transported there between. With all other cases each gateway shall extract de framed error corrected data bits and forward them to its counterpart at the opposite end of the network. Flow control procedures within the error control protocol may be used to handle network delay. The advantage of this method over the first method is its ability to handle large network delays and also the scenario where the local connection rates at the network gateways are different. However packets transported over the network in accordance with this method must be guaranteed to be error free. This may be achieved by establishing a connection between the network gateways in accordance with the link access protocol connection for modems LAPM 

Preferably the data exchange includes a modem relay having a data pump for demodulating modem data signals from a modem for transmission on the packet based network and remodulating modem data signal packets from the packet based network for transmission to a local modem. Similarly the data exchange also preferably includes a fax relay with a data pump for demodulating fax data signals from a fax for transmission on the packet based network and remodulating fax data signal packets from the packet based network for transmission to a local fax device. The utilization of a data pump in the fax and modem relays to demodulate and remodulate data signals for transmission across a packet based network provides considerable bandwidth savings. First only the underlying unmodulated data signals are transmitted across the packet based network. Second data transmission rates of digital signals across the packet based network typically 64 kbps is greater than the maximum rate available typically 33 600 bps for communication over a circuit switched network.

Telephone line data pumps operating in accordance with ITU V series recommendations for transmission rates of 2400 bps or more typically utilize quadrature amplitude modulation QAM . A typical QAM data pump transmitter is shown schematically in . The transmitter input is a serial binary data stream darriving at a rate of Rbps. A serial to parallel converter groups the input bits into J bit binary words. A constellation mapper 604 maps each J bit binary word to a channel symbol from a 2element alphabet resulting in a channel symbol rate off R J baud. The alphabet consists of a pair of real numbers representing points in a two dimensional space called the signal constellation. Customarily the signal constellation can be thought of as a complex plane so that the channel symbol sequence may be represented as a sequence of complex numbers ca jb. Typically the real part ais called the in phase or I component and the imaginary bis called the quadrature or Q component. A nonlinear encoder may be used to expand the constellation points in order to combat the negative effects of companding in accordance with ITU T G.711 standard. The I Q components may be modulated by impulse modulators and respectively and filtered by transmit shaping filters and each with impulse response g t . The outputs of the shaping filters and are called in phase and quadrature components of the continuous time transmitted signal.

The shaping filters and are typically lowpass filters approximating the raised cosine or square root of raised cosine response having a cutoff frequency on the order of at least about f 2. The outputs and of the lowpass filters and respectively are lowpass signals with a frequency domain extending down to approximately zero hertz. A local oscillator generates quadrature carriers cos t and sin t . Multipliers and multiply the filter outputs and by quadrature carriers cos t and sin t respectively to amplitude modulate the in phase and quadrature signals up to the passband of a bandpass channel. The modulated output signals and are then subtracted in a difference operator to form a transmit output signal . The carrier frequency should be greater than the shaping filter cutoff frequency to prevent spectral fold over.

A data pump receiver is shown schematically in . The data pump receiver is generally configured to process a received signal distorted by the non ideal frequency response of the channel and additive noise in a transmit data pump not shown in the local modem. An analog to digital converter A D converts the received signal from an analog to a digital format. The A D converter samples the received signal at a rate of f 1 T n T which is ntimes the symbol rate f 1 T and is at least twice the highest frequency component of the received signal to satisfy nyquist sampling theory.

An echo canceller substantially removes the line ethos on the received signal . Echo cancellation permits a modem to operate in a full duplex transmission mode on a two line circuit such as a PSTN. With echo cancellation a modem can establish two high speed channels in opposite directions. Through the use of digital signal processing circuitry the modem s receiver can use the shape of the modem s transmitter signal to cancel out the effect of its own transmitted signal by subtracting reference signal and the receive signal in a difference operator .

Multiplier scales the amplitude of echo cancelled signal . A power estimator estimates the power level of the gain adjusted signal . Automatic gain control logic compares the estimated power level to a set of predetermined thresholds and inputs a scaling factor into the multiplier that adjusts the amplitude of the echo canceled signal to a level that is within the desired amplitude range. A carrier detector processes the output of a digital resampler to determine when a data signal is actually present at the input to receiver . Many of the receiver functions are preferably not invoked until an input signal is detected.

A timing recovery system synchronizes the transmit clock of the remote data pump transmitter not shown and the receiver clock. The timing recovery system extracts timing information from the received signal and adjusts the digital resampler to ensure that the frequency and phase of the transmit clock and receiver clock are synchronized. A phase splitting fractionally spaced equalizer PSFSE filters the received signal at the symbol rate. The PSFSE compensates for the amplitude response and envelope delay of the channel so as to minimize inter symbol interference in the received signal. The frequency response of a typical channel is inexact so that an adaptive filter is preferable. The PSFSE is preferably an adaptive FIR filter that operates on data signal samples spaced by T nand generates digital signal output samples spaced by the period T. In the described exemplary embodiment n 3.

The PSFSE outputs a complex signal which multiplier multiplies by a locally generated carrier reference to demodulate the PSFSE output to the baseband signal . The received signal is typically encoded with a non linear operation so as to reduce the quantization noise introduced by companding in accordance with ITU T G.711. The baseband signal is therefore processed by a non linear decoder which reverses the non linear encoding or warping. The gain of the baseband signal will typically vary upon transition from a training phase to a data phase because modem manufacturers utilize different methods to compute a scale factor. The problem that arises is that digital modulation techniques such as quadrature amplitude modulation QAM and pulse amplitude modulation PAM rely on precise gain or scaling in order to achieve satisfactory performance. Therefore a scaling error compensator adjusts the gain of the receiver to compensate for variations in scaling. Further a slicer then quantizes the scaled baseband symbols to the nearest ideal constellation points which are the estimates of the symbols from the remote data pump transmitter not shown . A decoder converts the output of slicer into a digital binary stream.

During data pump training known transmitted training sequences are transmitted by a data pump transmitter in accordance with the applicable ITU T standard. An ideal reference generator generates a local replica of the constellation point . During the training phase a switch is toggled to connect the output of the ideal reference generator to a difference operator that generates a baseband error signal by subtracting the ideal constellation sequence and the baseband equalizer output signal . A carrier phase generator uses the baseband error signal and the baseband equalizer output signal to synchronize local carrier reference with the carrier of the received signal During the data phase the switch connects the output of the slicer to the input of difference operator that generates a baseband error signal in the data phase by subtracting the estimated symbol output by the slicer and the baseband equalizer output signal . It will be appreciated by one of skill that the described receiver is one of several approaches. Alternate approaches in accordance with ITU T recommendations may be readily substituted for the described data pump. Accordingly the described exemplary embodiment of the data pump is by way of example only and not by way of limitation.

Timing recovery refers to the process in a synchronous communication system whereby timing information is extracted from the data being received. In the context of a modem connection in accordance with an exemplary embodiment of the present invention each modem is coupled to a signal processing system which for the purposes of explanation is operating in a network gateway either directly or through a PSTN line. In operation each modem establishes a modem connection with its respective network gateway at which point the modems begin relaying data signals across a packet based network. The problem that arises is that the clock frequencies of the modems are not identical to the clock frequencies of the data pumps operating in their respective network gateways. By design the data pump receiver in the network gateway should sample a received signal of symbols in synchronism with the transmitter clock of the modem connected locally to that gateway in order to properly demodulate the transmitted signal.

A timing recovery system can be used for this purpose. Although the timing recovery system is described in the context of a data pump within a signal processing system with the packet data modem exchange invoked those skilled in the art will appreciate that the timing recovery system is likewise suitable for various other applications in various other telephony and telecommunications applications including fax data pumps. Accordingly the described exemplary embodiment of the timing recovery system in a signal processing system is by way of example only and not by way of limitation.

A block diagram of a timing recovery system is shown in . In the described exemplary embodiment the digital resampler resamples the gain adjusted signal output by the AGC see . A timing error estimator provides an indication of whether the local timing or clock of the data pump receiver is leading or lagging the timing or clock of the data pump transmitter in the local modem. As is known in the art the timing error estimator may be implemented by a variety of techniques including that proposed by Godard. The ND converter of the data pump receiver see samples the received signal at a rate of fo which is an integer multiple of the symbol rate fs 1 T and is at least twice the highest frequency component of the received signal to satisfy nyquist sampling theory. The samples are applied to an upper bandpass filter and a lower bandpass filter . The upper bandpass filter is tuned to the upper bandedge frequency fu fc 0.5fs and the lower bandpass filter is tuned to the lower bandedge frequency fl fc 0.5fs where fc is the carrier frequency of the QAM signal. The bandwidth of the filters and should be reasonably narrow preferably on the order of 100 Hz for a fs 2400 baud modem. Conjugate logic takes the complex conjugate of complex output of the lower bandpass filter. Multiplier multiplies the complex output of the upper bandpass filter by the complex conjugate of the lower bandpass filter to form a cross correlation between the output of the two filters and . The real part of the correlated symbol is discarded by processing logic and a sampler samples the imaginary part of the resulting cross correlation at the symbol rate to provide an indication of whether the timing phase error is leading or lagging.

In operation a transmitted signal from a remote data pump transmitter not shown g t is made to correspond to each data character. The signal element has a bandwidth approximately equal to the signaling rate fs. The modulation used to transmit this signal element consists of multiplying the signal by a sinusoidal carrier of frequency fc which causes the spectrum to be translated to a band around frequency fc. Thus the corresponding spectrum is bounded by frequencies f fc 0.5fs and f fc 0.5fs which are known as the bandedge frequencies. Reference for more detailed information may be made to Principles of Data Communication by R. W. Lucky J. Salz and E. J. Weldon Jr. McGraw Hill Book Company pages 50 51.

In practice it has been found that additional filtering is required to reduce symbol clock jitter particularly when the signal constellation contains many points. Conventionally a loop filter filters the timing recovery signal to reduce the symbol clock jitter. Traditionally the loop filter is a second order infinite impulse response IIR type filter whereby the second order portion tracks the offset in clock frequency and the first order portion tracks the offset in phase. The output of the loop filter drives clock phase adjuster . The clock phase adjuster controls the digital sampling rate of digital resampler so as to sample the received symbols in synchronism with the transmitter clock of the modem connected locally to that gateway. Typically the clock phase adjuster utilizes a poly phase interpolation algorithm to digitally adjust the timing phase. The timing recovery system may be implemented in either analog or digital form. Although digital implementations are more prevalent in current modern design an analog embodiment may be realized by replacing the clock phase adjuster with a VCO.

The loop filter is typically implemented as shown in . The first order portion of the filter controls the adjustments made to the phase of the clock not shown A multiplier applies a first order adjustment constant a to advance or retard the clock phase adjustment. Typically the constant a is empirically derived via computer simulation or a series of simple experiments with a telephone network simulator. Generally a is dependent upon the gain and the bandwidth of the upper and lower filters in the timing error estimator and is generally optimized to reduce symbol clock jitter and control the speed at which the phase is adjusted. The structure of the loop filter may include a second order component that estimates the offset in clock frequency. The second order portion utilizes an accumulator in a feedback loop to accumulate the timing error estimates. A multiplier is used to scale the accumulated timing error estimate by a constant . Typically the constant is empirically derived based on the amount of feedback that will cause the system to remain stable. Summer sums the scaled accumulated frequency adjustment with the scaled phase adjustment . A disadvantage of conventional designs which include a second order component in the loop filter is that such second order components are prone to instability with large constellation modulations under certain channel conditions.

An alternative digital implementation eliminates the loop filter. Referring to a hard limiter and a random walk filter are coupled to the output of the timing error estimator to reduce timing jitter. The hard limiter provides a simple automatic gain control action that keeps the loop gain constant independent of the amplitude level of the input signal. The hard limiter assures that timing adjustments are proportional to the timing of the data pump transmitter of the local modem and not the amplitude of the received signal. The random walk filter reduces the timing jitter induced into the system as disclosed in Communication System Design Using DSP Algorithms S. Tretter p. 132 Plenum Press NY. 1995 the contents of which is hereby incorporated by reference as through set forth in full herein. The random walk filter acts as an accumulator summing a random number of adjustments over time. The random walk filter is reset when the accumulated value exceeds a positive or negative threshold. Typically the sampling phase is not adjusted so long as the accumulator output remains between the thresholds thereby substantially reducing or eliminating incremental positive adjustments followed by negative adjustments that otherwise tend to not accumulate.

Referring to in an exemplary embodiment of the present invention the multiplier applies the first order adjustment constant a to the output of the random walk filter to advance or retard the estimated clock phase adjustment. In addition a timing frequency offset compensator is coupled to the timing recovery system via switches and to preferably provide a fixed do component to compensate for clock frequency offset present in the received signal. The exemplary timing frequency offset compensator preferably operates in phases. A frequency offset estimator computes the total frequency offset to apply during an estimation phase and incremental logic incrementally applies the offset estimate in linear steps during the application phase. Switch control logic controls the toggling of switches and during the estimation and application phases of compensation adjustment. Unlike the second order component of the conventional timing recovery loop filter disclosed in the described exemplary timing frequency offset compensator is an open loop design such that the second order compensation is fixed during steady state. Therefore switches and work in opposite cooperation when the timing compensation is being estimated and when it is being applied.

During the estimation phase switch control logic closes switch thereby coupling the timing frequency offset compensator to the output of the random walk filter and opens switch so that timing adjustments are not applied during the estimation phase. The frequency offset estimator computes the timing frequency offset during the estimation phase over K symbols in accordance with the block diagram shown in . An accumulator accumulates the frequency offset estimates over K. symbols. A multiplier is used to average the accumulated offset estimate by applying a constant K. Typically the constant is empirically derived and is preferably in the range of about 0.5 2. Preferably K is as large as possible to improve the accuracy of the average. K. is typically greater than about 500 symbols and less than the recommended training sequence length for the modern in question. In the exemplary embodiment the first order adjustment constant a is preferably in the range of about 100 300 part per million ppm . The timing frequency offset is preferably estimated during the timing training phase timing tone and equalizer training phase based on the accumulated adjustments made to the clock phase adjuster over a period of time.

During steady state operation when the timing adjustments are applied switch control logic opens switch decoupling the timing frequency offset compensator from the output of the random walk filter and closes switch so that timing adjustments are applied by summer . After K symbols of a symbol period have elapsed and the frequency offset compensation is computed the incremental logic preferably applies the timing frequency offset estimate in incremental linear steps over a period of time to avoid large sudden adjustments which may throw the feedback loop out of lock. This is the transient phase. The length of time over which the frequency offset compensation is incrementally applied is empirically derived and is preferably in the range of about 200 800 symbols. After the incremental logic has incrementally applied the total timing frequency offset estimate computed during the estimate phase a steady state phase begins where the compensation is fixed. Relative to conventional second order loop filters the described exemplary embodiment provides improved stability and robustness.

Data pump training refers to the process by which training sequences are utilized to train various adaptive elements within a data pump receiver. During data pump training known transmitted training sequences are transmitted by a data pump transmitter in accordance with the applicable ITU T standard. In the context of a modem connection in accordance with an exemplary embodiment of the present invention the modems see are coupled to a signal processing system which for the purposes of explanation is operating in a network gateway either directly or through a PSTN line. In operation the receive data pump operating in each network gateway of the described exemplary embodiment utilizes PSFSE architecture. The PSFSE architecture has numerous advantages over other architectures when receiving QAM signals. However the PSFSE architecture has a slow convergence rate when employing the least mean square LMS stochastic gradient algorithm. This slow convergence rate typically prevents the use of PSFSE architecture in modems that employ relatively short training sequences in accordance with common standards such as V.29. Because of the slow convergence rate the described exemplary embodiment re processes blocks of training samples multiple times multi pass training .

Although the method of performing multi pass training is described in the context of a signal processing system with the packet data exchange invoked those skilled in the art will appreciate that multi pass training is likewise suitable for various other telephony and telecommunications applications. Accordingly the described exemplary method for multi pass training in a signal processing system is by way of example only and not by way of limitation.

In an exemplary embodiment the data pump receiver operating in the network gateway stores the received QAM samples of the modem s training sequence in a buffer until N symbols have been received. The PSFSE is then adapted sequentially over these N symbols using a LMS algorithm to provide a coarse convergence of the PSFSE. The coarsely converged PSFSE i.e. with updated values for the equalizer taps returns to the start of the same block of training samples and adapts a second time. This process is repeated M times over each block of training samples. Each of the M iterations provides a more precise or finer convergence until the PSFSE is completely converged.

Scaling error compensation refers to the process by which the gain of a data pump receiver fax or modem is adjusted to compensate for variations in transmission channel conditions. In the context of a modem connection in accordance with an exemplary embodiment of the present invention each modem is coupled to a signal processing system which for the purposes of explanation is operating in a network gateway either directly or through a PSTN line. In operation each modem communicates with its respective network gateway using digital modulation techniques. The problem that arises is that digital modulation techniques such as QAM and pulse amplitude modulation PAM rely on precise gain or scaling in order to achieve satisfactory performance. In addition transmission in accordance with the V.34 recommendations typically includes a training phase and a data phase whereby a much smaller constellation size is used during the training phase relative to that used in the data phase. The V.34 recommendation requires scaling to be applied when switching from the smaller constellation during the training phase into the larger constellation during the data phase.

The scaling factor can be precisely computed by theoretical analysis however different manufacturers of V.34 systems moderns tend to use slightly different scaling factors. Scaling factor variation or error from the predicted value may degrade performance until the PSFSE compensates for the variation in scaling factor. Variation in gain due to transmission channel conditions is compensated by an initial gain estimation algorithm typically consisting of a simple signal power measurement during a particular signaling phase and an adaptive equalizer during the training phase However since a PSFSE is preferably configured to adapt very slowly during the data phase there may be a significant number of data bits received in error before the PSFSE has sufficient time to adapt to the scaling error.

It is therefore desirable to quickly reduce the scaling error and hence minimize the number of potential erred bits. A scaling factor compensator can be used for this purpose. Although the scaling factor compensator is described in the context of a signal processing system with the packet data modem exchange invoked those skilled in the art will appreciate that the preferred scaling factor compensator is likewise suitable for various other telephony and telecommunications applications. Accordingly the described exemplary embodiment of the scaling factor compensator in a signal processing system is by way of example only and not by way of limitation.

The scaling error compensator preferably includes a divider which estimates the gain adjustment of the data pump receiver by dividing the expected magnitude of the received symbol by the actual magnitude of the received symbol In the described exemplary embodiment the magnitude is defined as the sum of squares between real and imaginary parts of the complex symbol. The expected magnitude of the received symbol is the output of the slicer i.e. the symbol quantized to the nearest ideal constellation point whereas the magnitude of the actual received symbol is the input to the slicer . In the case where a Viterbi decoder performs the error correction of the received noise disturbed signal as for V.34 the output of the slicer may be replaced by the first level decision of the Viterbi decoder.

The statistical nature of noise is such that large spikes in the amplitude of the received signal will occasionally occur. A large spike in the amplitude of the received signal may result in an erroneously large estimate of the gain adjustment of the data pump receiver. Typically scaling is applied in a one to one ratio with the estimate of the gain adjustment so that large scaling factors may be erroneously applied when large amplitude noise spikes are received. To minimize the impact of large amplitude spikes and improve the accuracy of the system the described exemplary scaling error compensator further includes a non linear filter in the form of a hard limiter which is applied to each estimate . The hard limiter limits the maximum adjustment of the scaling value. The hard limiter provides a simple automatic control action that keeps the loop gain constant independent of the amplitude of the input signal so as to minimize the negative effects of large amplitude noise spikes. In addition averaging logic computes the average gain adjustment estimate over a number N of symbols in the data phase prior to adjusting the nominal scale factor . As will be appreciated by those of skill in the art other non linear filtering algorithms may also be used in place of the hard limiter.

Alternatively the accuracy of the scaling error compensation may be further improved by estimating the averaged scaling adjustment twice and applying that estimate in two steps. A large hard limit value typically 1 0.25 is used to compute the first average scaling adjustment. The initial prediction provides an estimate of the average value of the amplitude of the received symbols. The unpredictable nature of the amplitude of the received signal requires the use of a large initial hard limit value to ensure that the true scaling error is included in the initial estimate of the average scaling adjustment. The estimate of the average value of the amplitude of the received symbols is used to calibrate the limits of the scaling adjustment. The average scaling adjustment is then estimated a second time using a lower hard limit value and then applied to the nominal scale factor by multiplier .

In most modem specifications such as the V.34 standards there is a defined signaling period B for V.34 after transition into data phase where the data phase constellation is transmitted with signaling information to flush the receiver pipeline i.e. Viterbi decoder etc. prior to the transmission of actual data. In an exemplary embodiment this signaling period may be used to make the scaling adjustment such that any scaling error is compensated for prior to actual transfer of data.

In the context of a modem connection in accordance with an exemplary embodiment of the present invention each modem is coupled to a signal processing system which for the purposes of explanation is operating in a network gateway either directly or through a PSTN line. In operation each modem communicates with its respective network gateway using digital modulation techniques. The international telecommunications union ITU has promulgated standards for the encoding and decoding of digital data in ITU T Recommendation G.711 ref. G.711 which is incorporated herein by reference as if set forth in full. The encoding standard specifies that a nonlinear operation companding be performed on the analog data signal prior to quantization into seven bits plus a sign bit. The companding operation is a monatomic invertable function which reduces the higher signal levels. At the decoder the inverse operation expanding is done prior to analog reconstruction. The companding expanding operation quantizes the higher signal values more coarsely. The companding expanding operation is suitable for the transmission of voice signals but introduces quantization noise on data modem signals. The quantization error noise is greater for the outer signal levels than the inner signal levels.

The ITU T Recommendation V.34 describes a mechanism whereby ref. V.34 the uniform signal is first expanded ref. BETTS to space the outer points farther apart than the inner points before G.711 encoding and transmission over the PCM link. At the receiver the inverse operation is applied after G.711 decoding. The V.34 recommended expansion inverse operation yields a more uniform signal to noise ratio over the signal amplitude. However the inverse operation specified in the ITU T Recommendation V.34 requires a complex receiver calculation. The calculation is computationally intensive typically requiring numerous machine cycles to implement.

It is therefore desirable to reduce the number of machine cycles required to compute the inverse to within an acceptable error level. A simplified nonlinear decoder can be used for this purpose. Although the nonlinear decoder is described in the context of a signal processing system with the packet data modem exchange invoked those skilled in the art will appreciate that the nonlinear decoder is likewise suitable for various other telephony and telecommunications application. Accordingly the described exemplary embodiment of the nonlinear decoder in a signal processing system is by way of example only and not by way of limitation.

Conventionally iteration algorithms have been used to compute the inverse of the G.711 nonlinear warping function. Typically iteration algorithms generate an initial estimate of the input to the nonlinear function and then compute the output. The iteration algorithm compares the output to a reference value and adjusts the input to the nonlinear function. A commonly used adjustment is the successive approximation wherein the difference between the output and the reference function is added to the input. However when using the successive approximation technique up to ten iterations may be required to adjust the estimated input of the nonlinear warping function to an acceptable error level so that the nonlinear warping function must be evaluated ten times. The successive approximation technique is computationally intensive requiring significant machine cycles to converge to an acceptable approximation of the inverse of the nonlinear warping function. Alternatively a more complex warping function is a linear Newton Rhapson iteration. Typically the Newton Rhapson algorithm requires three evaluations to converge to an acceptable error level. However the inner computations for the Newton Rhapson algorithm are more complex than those required for the successive approximation technique. The Newton Rhapson algorithm utilizes a computationally intensive iteration loop wherein the derivative of the nonlinear warping function is computed for each approximation iteration so that significant machine cycles are required to conventionally execute the Newton Rhapson algorithm.

An exemplary embodiment of the present invention modifies the successive approximation iteration. A presently preferred algorithm computes an approximation to the derivative of the nonlinear warping function once before the iteration loop is executed and uses the approximation as a scale factor during the successive approximation iterations. The described exemplary embodiment converges to the same acceptable error level as the more complex conventional Newton Rhapson algorithm in four iterations. The described exemplary embodiment further improves the computational efficiency by utilizing a simplified approximation of the derivative of the nonlinear warping function.

In operation development of the described exemplary embodiment proceeds as follows with a warping function defined as 

The Newton Rhapson iteration is a numerical method to determine X that results in an iteration of the form 

The computational complexity of the Newton Rhapson algorithm is thus paced by the derivation of the derivative G which conventionally is related to Xso that the mathematical instructions saved by performing fewer iterations are offset by the instructions required to calculate the derivative and perform the divide. Therefore it would be desirable to approximate the derivative G with a term that is the function of the input Yso that G x is a monotonic function and G x can be expressed in terms of G x . Advantageously if the steps in the iteration are small then G x will not vary greatly and can be held constant over the iteration. A series of simple experiments yields the following approximation of G x where a is an experimentally derived scaling factor.

The approximation for G converges to an acceptable error level in a minimum number of steps typically one more iteration than the full linear Newton Rhapson algorithm. A single divide before the iteration loop computes the quantity

The error term is multiplied by 1 G in the successive iteration loop It will be appreciated by one of skill in the art that further improvements in the speed of convergence are possible with the Generalized Newton Rhapson class of algorithms. However the inner loop computations for this class of algorithm are quite complex.

Advantageously the described exemplary embodiment does not expand the polynomial because the numeric quantization on a store in a sixteen bit machine may be quite significant for the higher order polynomial terms. The described exemplary embodiment organizes the inner loop computations to minimize the effects of truncation and the number of instructions required for execution. Typically the inner loop requires eighteen instructions and four iterations to converge to within two bits of the actual value which is within the computational roundoff noise of a sixteen bit machine.

In a preferred embodiment of the present invention a signal processing system is employed to interface telephony devices with packet based networks. Telephony devices include by way of example analog and digital phones ethernet phones Internet Protocol phones fax machines data modems cable voice modems interactive voice response systems PBXs key systems and any other conventional telephony devices known in the art. In the described exemplary embodiment the packet voice exchange is common to both the voice mode and the voiceband data mode. In the voiceband data mode the network VHD invokes the packet voice exchange for transparently exchanging data without modification other than packetization between the telephony device or circuit switched network and the packet based network. This is typically used for the exchange of fax and modem data when bandwidth concerns are minimal as an alternative to demodulation and remodulation.

During the voiceband data mode the human voice detector service is also invoked by the resource manager. The human voice detector monitors the signal from the near end telephony device for voice. The described exemplary human voice detector estimates pitch period of an incoming telephony signal and compares the pitch period of said telephony signal to a plurality of thresholds to identify active voice samples. This approach is substantially independent of the amplitude of the spoken utterance so that whispered or shouted utterance may be accurately identified as active voice samples. In the event that voice is detected by the human voice detector an event is forwarded to the resource manager which in turn causes the resource manager to terminate the human voice detector service and invoke the appropriate services for the voice mode i.e. the call discriminator the packet tone exchange and the packet voice exchange .

Although a preferred embodiment is described in the context of a signal processing system for telephone communications across the packet based network it will be appreciated by those skilled in the art that the voice detector is likewise suitable for various other telephony and telecommunications application. Accordingly the described exemplary embodiment of the voice detector in a signal processing system is by way of example only and not by way of limitation.

There are a variety of encoding methods known for encoding voice. Most frequently voice is modeled on a short time basis as the response of a linear system excited by a periodic impulse train for voiced sounds or random noise for the unvoiced sounds. Conventional human voice detectors typically monitor the power level of the incoming signal to make a voice machine decision. Typically if the power level of the incoming signal is above a predetermined threshold the sequence is typically declared voice. The performance of such conventional voice detectors may be degraded by the environment in that a very soft spoken whispered utterance will have a very different power level from a loud shout. If the threshold is set at too low a level noise will be declared voice whereas if the threshold is set at too high a level a soft spoken voice segment will be incorrectly marked as inactive.

Alternatively voice may generally be classified as voiced if a fundamental frequency is imported to the air stream by the vocal cords of the speaker. In such case the frequency of a voice segment is typically highly periodic at around the pitch frequency. The determination as to whether a voice segment is voiced or unvoiced and the estimation of the fundamental frequency can be obtained in a variety of ways known in the art such as pitch detection algorithms. In the described exemplary embodiment the human voice detector calculates an autocorrelation function for the incoming signal. An autocorrelation function for a voice segment demonstrates local peaks with a periodicity in proportion to the pitch period. The human voice detector service utilizes this feature in conjunction with power measurements to distinguish voice signals from modem signals. It will be appreciated that other pitch detection algorithms known in the art can be used as well.

Referring to in the described exemplary embodiment a power estimator estimates the power level of the incoming signal. Autocorrelation logic computes an autocorrelation function for an input signal to assist in the voice machine decision. Autocorrelation as is known in the art involves correlating a signal with itself. A correlation function shows how similar two signals are and how long the signals remain similar when one is shifted with respect to the other. Periodic signals go in and out of phase as one is shifted with respect to the other so that a periodic signal will show strong correlation at shifts where the peaks coincide. Thus the autocorrelation of a periodic signal is itself a periodic signal with a period equal to the period of the original signal.

The autocorrelation calculation computes the autocorrelation function over an interval of 360 samples with the following approach 

A pitch tracker estimates the period of the computed autocorrelation function. Framed based decision logic analyzes the estimated power level the autocorrelation function and the periodicity of the incoming signal to execute a frame based voice machine decision according to a variety of factors. For example the energy of the input signal should be above a predetermined threshold level preferably in the range of about 45 to 55 dBm before the frame based decision logic declares the signal to be voice. In addition the typical pitch period of a voice segment should be in the range of about 60 400 Hz so that the autocorrelation function should preferably be periodic with a period in the range of about 60 400 Hz before the frame based decision logic declares a signal as active or containing voice.

The amplitude of the autocorrelation function is a maximum for R 0 i.e. when the signal is not shifted relative to itself. Also for a periodic voice signal the amplitude of the autocorrelation function with a one period shift i.e. R pitch period should preferably be in the range of about 0.25 0.40 of the amplitude of the autocorrelation function with no shift i.e. R 0 . Similarly modem signaling may involve certain DTMF or MF tones in this case the signals are highly correlated so that if the largest peak in the amplitude of the autocorrelation function after R. 0 is relatively close in magnitude to R 0 preferably in the range of about 0.75 0.90 R 0 the frame based decision logic declares the sequence as inactive or not containing voice.

Once a decision is made on the current frame as to voice or machine final decision logic compares the current frame decision with the two adjacent frame decisions. This check is known as backtracking. If a decision conflicts with both adjacent decisions it is flipped i.e. voice decision turned to machine and vice versa.

Although a preferred embodiment of the present invention has been described it should not be construed to limit the scope of the appended claims. For example the present invention can be implemented by both a software embodiment or a hardware embodiment. Those skilled in the art will understand that various modifications may be made to the described embodiment. Moreover to those skilled in the various arts the invention itself herein will suggest solutions to other tasks and adaptations for other applications. It is therefore desired that the present embodiments be considered in all respects as illustrative and not restrictive reference being made to the appended claims rather than the foregoing description to indicate the scope of the invention.

