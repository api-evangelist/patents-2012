---

title: Method and system for predictive load balancing
abstract: A method for load balancing resource requests among a plurality of servers is disclosed and includes providing an enterprise content management (ECM) system coupled to processing servers for managing a plurality of resources, where each resource is identified by a resource identifier. The ECM system includes a load manager that receives a first plurality of requests. Each request includes a resource identifier and an action, and is assigned to a processing server for processing. The method includes recording performance statistics for each request when each request is processed. Request types based on the resource identifier and the action of each request are also identified. For each request type, a weighting factor is generated based on the performance statistics for each request of the request type. Thereafter, a new request is assigned to a processing server based on the weighting factor for request type of the new request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08914517&OS=08914517&RS=08914517
owner: EMC Corporation
number: 08914517
owner_city: Hopkinton
owner_country: US
publication_date: 20120926
---
According to the Association for Information and Image Management Enterprise content management ECM refers to the strategies methods and tools used to capture manage store preserve and deliver content and documents related to organizational processes. ECM covers the management of information within the entire scope of an enterprise whether that information is in the form of a paper document an electronic file a database print stream or even an email. The organization and management of such enterprise resources is essential for current data intense business environments. An ECM system can make the management of enterprise resources easier through simplifying storage security version control process routing and retention. The benefits to an enterprise include improved efficiency better control and reduced costs.

An ECM system must provide continuous and secure access to the enterprise resources and therefore is designed to receive and process requests from users and or customers from all parts of the world and at all hours of the day. Typically in order to handle the large number of requests efficiently an ECM system utilizes a cluster of computer processing nodes e.g. servers in a server farm to process the requests in batches and or in parallel. To optimize efficiency and performance the ECM system uses a load balancing computer node that receives the requests and then assigns them to the computer processing nodes in the cluster in order to distribute the workload evenly throughout the cluster.

While straightforward in principle evenly distributing the workload amongst the processing nodes is a difficult and challenging task. In one technique the load balancing node assigns an equal number of requests to each of the processing nodes. This approach however is flawed because the requests are not identical to one another and the processing cost and or time can vary from request to request. In other words an equal number of requests is not necessarily equivalent to an equal workload.

In another technique the variation in the difficulty between requests is reflected by a difficulty ranking e.g. a first type of request is ranked five stars most difficult and another type of request is ranked 1 star least difficult . Using these rankings the load balancing node can assign requests based on their respective difficulty rankings and therefore more evenly distribute the workload throughout the cluster. This technique however requires an administrator to evaluate each request and to assign the ranking which might be feasible for a limited number of requests against a simple content management system. An ECM system however is far from simple. Indeed a typical ECM system manages thousands if not millions of resources and the requests received by an ECM system can involve an assortment of commands. Manually evaluating and ranking each request to an ECM system is not feasible.

The subject matter presented herein provides for automated workload balancing among a plurality of processing servers for an ECM system. According to an embodiment an ECM system is provided that allows an enterprise to organize and store its resources that relate to the enterprise s processes. The enterprise resources can include documents files web content records digital media and any addressable object. The ECM system includes a load manager component that is configured to receive a first plurality of requests that each identify a resource and an action. When the requests are received the load manager assigns each request to a processing server for processing.

In an embodiment the ECM system can include a request manager component configured to record performance statistics for each request when that request is processed by a processing server. For example the performance statistics can include how much time the processing server needed to process the request and or a cost to process the request e.g. how many CPU cycles. In addition the request manager component can be configured to identify request types based on the resources and actions included in the requests and to generate a weighting factor for each request type based on the performance statistics for each request of the request type. In an embodiment the weighting factor of a request type represents the processing difficulty of requests associated with the request type. Accordingly all requests associated with a request type will also be associated with the request type s weighting factor.

When a new set of requests is received each of the new requests can be associated with a request type and therefore a weighting factor. The load manager component can then assign a new request to a processing server based on the new request s weighting factor. In an embodiment the request manager component can continuously update the weighting factors for the request types as the new requests are processed and new performance statistics are collected. Moreover as resources and or actions are added updated and or modified request types can also be added updated and or modified.

Prior to describing the subject matter in detail an exemplary hardware device in which the subject matter may be implemented is described. Those of ordinary skill in the art will appreciate that the elements illustrated in may vary depending on the system implementation. With reference to an exemplary system for implementing the subject matter disclosed herein includes a hardware device including a processing unit memory storage data entry module display adapter communication interface and a bus that couples elements to the processing unit .

The bus may comprise any type of bus architecture. Examples include a memory bus a peripheral bus a local bus etc. The processing unit is an instruction execution machine apparatus or device and may comprise a microprocessor a digital signal processor a graphics processing unit an application specific integrated circuit ASIC a field programmable gate array FPGA etc. The processing unit may be configured to execute program instructions stored in memory and or storage and or received via data entry module .

The memory may include read only memory ROM and random access memory RAM . Memory may be configured to store program instructions and data during operation of device . In various embodiments memory may include any of a variety of memory technologies such as static random access memory SRAM or dynamic RAM DRAM including variants such as dual data rate synchronous DRAM DDR SDRAM error correcting code synchronous DRAM ECC SDRAM or RAMBUS DRAM RDRAM for example. Memory may also include nonvolatile memory technologies such as nonvolatile flash RAM NVRAM or ROM. In some embodiments it is contemplated that memory may include a combination of technologies such as the foregoing as well as other technologies not specifically mentioned. When the subject matter is implemented in a computer system a basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer system such as during start up is stored in ROM .

The storage may include a flash memory data storage device for reading from and writing to flash memory a hard disk drive for reading from and writing to a hard disk a magnetic disk drive for reading from or writing to a removable magnetic disk and or an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM DVD or other optical media. The drives and their associated computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the hardware device .

It is noted that the methods described herein can be embodied in executable instructions stored in a computer readable medium for use by or in connection with an instruction execution machine apparatus or device such as a computer based or processor containing machine apparatus or device. It will be appreciated by those skilled in the art that for some embodiments other types of computer readable media may be used which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks Bernoulli cartridges RAM ROM and the like may also be used in the exemplary operating environment. As used here a computer readable medium can include one or more of any suitable media for storing the executable instructions of a computer program in one or more of an electronic magnetic optical and electromagnetic format such that the instruction execution machine system apparatus or device can read or fetch the instructions from the computer readable medium and execute the instructions for carrying out the described methods. A non exhaustive list of conventional exemplary computer readable medium includes a portable computer diskette a RAM a ROM an erasable programmable read only memory EPROM or flash memory optical storage devices including a portable compact disc CD a portable digital video disc DVD a high definition DVD HD DVD a BLU RAY disc and the like.

A number of program modules may be stored on the storage ROM or RAM including an operating system one or more applications programs program data and other program modules . A user may enter commands and information into the hardware device through data entry module . Data entry module may include mechanisms such as a keyboard a touch screen a pointing device etc. Other external input devices not shown are connected to the hardware device via external data entry interface . By way of example and not limitation external input devices may include a microphone joystick game pad satellite dish scanner or the like. In some embodiments external input devices may include video or audio input devices such as a video camera a still camera etc. Data entry module may be configured to receive input from one or more users of device and to deliver such input to processing unit and or memory via bus .

A display is also connected to the bus via display adapter . Display may be configured to display output of device to one or more users. In some embodiments a given device such as a touch screen for example may function as both data entry module and display . External display devices may also be connected to the bus via external display interface . Other peripheral output devices not shown such as speakers and printers may be connected to the hardware device .

The hardware device may operate in a networked environment using logical connections to one or more remote nodes not shown via communication interface . The remote node may be another computer a server a router a peer device or other common network node and typically includes many or all of the elements described above relative to the hardware device . The communication interface may interface with a wireless network and or a wired network. Examples of wireless networks include for example a BLUETOOTH network a wireless personal area network a wireless 802.11 local area network LAN and or wireless telephony network e.g. a cellular PCS or GSM network . Examples of wired networks include for example a LAN a fiber optic network a wired personal area network a telephony network and or a wide area network WAN . Such networking environments are commonplace in intranets the Internet offices enterprise wide computer networks and the like. In some embodiments communication interface may include logic configured to support direct memory access DMA transfers between memory and other devices.

In a networked environment program modules depicted relative to the hardware device or portions thereof may be stored in a remote storage device such as for example on a server. It will be appreciated that other hardware and or software to establish a communications link between the hardware device and other devices may be used.

It should be understood that the arrangement of hardware device illustrated in is but one possible implementation and that other arrangements are possible. It should also be understood that the various system components and means defined by the claims described below and illustrated in the various block diagrams represent logical components that are configured to perform the functionality described herein. For example one or more of these system components and means can be realized in whole or in part by at least some of the components illustrated in the arrangement of hardware device . In addition while at least one of these components are implemented at least partially as an electronic hardware component and therefore constitutes a machine the other components may be implemented in software hardware or a combination of software and hardware. More particularly at least one component defined by the claims is implemented at least partially as an electronic hardware component such as an instruction execution machine e.g. a processor based or processor containing machine and or as specialized circuits or circuitry e.g. discrete logic gates interconnected to perform a specialized function such as those illustrated in . Other components may be implemented in software hardware or a combination of software and hardware. Moreover some or all of these other components may be combined some may be omitted altogether and additional components can be added while still achieving the functionality described herein. Thus the subject matter described herein can be embodied in many different variations and all such variations are contemplated to be within the scope of what is claimed.

In the description that follows the subject matter will be described with reference to acts and symbolic representations of operations that are performed by one or more devices unless indicated otherwise. As such it will be understood that such acts and operations which are at times referred to as being computer executed include the manipulation by the processing unit of data in a structured form. This manipulation transforms the data or maintains it at locations in the memory system of the computer which reconfigures or otherwise alters the operation of the device in a manner well understood by those skilled in the art. The data structures where data is maintained are physical locations of the memory that have particular properties defined by the format of the data. However while the subject matter is being described in the foregoing context it is not meant to be limiting as those of skill in the art will appreciate that various of the acts and operation described hereinafter may also be implemented in hardware.

To facilitate an understanding of the subject matter described below many aspects are described in terms of sequences of actions. At least one of these aspects defined by the claims is performed by an electronic hardware component. For example it will be recognized that the various actions can be performed by specialized circuits or circuitry by program instructions being executed by one or more processors or by a combination of both. The description herein of any sequence of actions is not intended to imply that the specific order described for performing that sequence must be followed. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context.

Referring now to a flow diagram is presented illustrating a method for load balancing resource requests among a plurality of servers according to an exemplary embodiment. is a block diagram illustrating an exemplary system for load balancing resource requests among a plurality of servers according to embodiments of the subject matter described herein. The method illustrated in can be carried out by for example at least some of the components in the exemplary arrangement of components illustrated in . The arrangement of components in may be implemented by some or all of the components of the hardware device of .

With reference to in block an enterprise content management ECM system coupled to a plurality of processing servers for managing a plurality of resources is provided. The ECM system includes a load manager component configured to receive a first plurality of resource requests and to assign each of the first plurality of requests to a processing server for processing. According to an embodiment each resource is identified by a resource identifier and each resource request includes a resource identifier and an action.

Illustrated in and is an ECM system including components adapted for operating in an execution environment . The execution environment or an analog can be provided by a computer device such as the application server . In an embodiment the ECM system is configured to manage enterprise resources that can include documents files web content and other addressable objects. A system administrator can define resources of various types such as an account resource a customer resource a product resource and the like

In an embodiment the ECM system can be configured to receive a first plurality of resource requests from at least one requesting client node . The ECM system can be configured to receive the requests via a network subsystem and an application protocol layer or other higher protocol layer as illustrated by an exemplary HTTP protocol layer among many possible standard and proprietary protocol layers. These higher protocol layers can encode package and or reformat data for sending and receiving messages over a network layer such as Internet Protocol IP and or a transport layer such as Transmission Control Protocol TCP and or User Datagram Protocol UDP . A command handler component in the ECM system can be configured to receive the requests via an incoming message handler and to route the requests to the load manager component . The load manager component can assign each of the first plurality of resource requests to one of several processing server nodes in a server cluster all of which are configured to process the requests .

According to an embodiment the ECM system can be a representational state transfer REST service. As such each resource is identified by a unique resource identifier and each resource request includes a resource identifier and an action required. In an embodiment when the ECM system is implemented using HTTP the resource identifier can be a uniform resource identifier URI associated with the resource and the action can be an HTTP method e.g. GET PUT POST DELETE. Accordingly each resource request can include a URI and an HTTP method.

According to an embodiment the resource identifier e.g. URI associated with each resource can be a uniform resource locator URL that identifies a resource type and an object. For example consider the following URL fragments 

Referring again to when each of the first plurality of requests is assigned to and processed by a processing server performance statistics for each of the first plurality of resource requests are recorded in block . According to an embodiment a resource manager component can be configured to record performance statistics for each of the first plurality of resource requests when each request is processed by a processing server . In an embodiment the request manager component can be included in the ECM system as shown in . In another embodiment the request manager component can be provided outside of the ECM system as a separate component as shown in . In this case the request manager component can be configured to interact with more than one ECM system in a distributed environment.

In an embodiment the request manager component can include a request monitor that monitors each of the first plurality of resource requests and collects performance statistics associated with the processing of each resource request. For example when the command handler receives a request e.g. and forwards it to the load manager component the load manager component can forward the resource request to the request manager component . Alternatively or in addition the request can be routed directly to the request manager component and to the load manager component . When the request is received the request monitor can be configured to monitor the time associated with processing the request

For example when the request is received the request monitor can be configured to record a process start time for the request . When the processing server processes the request and provides a response back to the ECM system the command handler can receive and forward the response to a response handler component which is configured to transmit responses to the requesting client node s over the network . In an embodiment the response can also be forwarded to the request monitor which can record an end time that can be used to determine the performance statistics e.g. the processing time for the request

Alternatively or in addition the processing server can track its performance statistics e.g. the processing time for the request and provide that information along with its response to the ECM system . In this case when the request monitor receives the response it can extract the performance statistics directly from the response . According to an embodiment the performance statistics can be collected for each of the first plurality of requests and stored in a data structure not shown associated with the request manager component .

Referring again to in addition to recording performance statistics for each of the first plurality of resource requests a plurality of request types are identified in block based on the resource identifier and the action of each of the first plurality of requests wherein each resource request is associated with a request type. According to an embodiment the request manager component can include a request categorizer configured to identify request types based on the resource identifier and the action of each of the first plurality of requests .

As stated above each of the requests includes a resource identifier and an action and in an embodiment the resource identifier includes a resource type and an object identifier. Accordingly each of the requests includes a resource type an object identifier and an action. In an embodiment a request type can be defined by a particular resource type paired with a particular action i.e. a resource type action pair. Accordingly when a resource request is received by the request manager component the request categorizer can be configured in an embodiment to examine the request to determine its resource type and its action. Based on that determination the request categorizer can identify a request type corresponding to the request s resource type and action and can associate that request type with the request . Accordingly all requests that include the same resource type and the same action are associated with the same request type .

Request 2 and request 3 have the same resource type e.g. account and the same action e.g. POST and therefore are of the same request type despite being directed to different resources e.g. objects 5 and 7. Request 1 has a different resource type e.g. customer and therefore is associated with a different request type corresponding to a customer POST pair.

As stated above the ECM system can be implemented as a RESTful service. As such each resource request operates on a single resource identified by the resource identifier. A resource that is dependent on the resource identified in a request is updated if needed separately via a dedicated request identifying the dependent resource and the action. Accordingly because dependent resources are handled separately and do not affect the processing of the request any requests directed to the same resource type and action i.e. any requests of the same request type can be considered similar in processing difficulty. Thus for example referring to the exemplary request fragments above the processing difficulty for request 2 will be substantially the same for request 3 because they are of the same request type. The same cannot be assumed for the processing difficulty for request 1 however because request 1 is of a different request type .

Referring again to once the request types have been identified and each of the first plurality of requests has been associated with a request type a weighting factor is generated in block for each request type based on the performance statistics recorded for each request of the request type . In an embodiment the request manager component can include a weighting factor generator configured to generate for each of the plurality of request types a weighting factor based on the performance statistics recorded for each resource request of the request type .

According to an embodiment the weighting factor for a request type indicates how difficult a request of that type is to process. As indicated above the performance statistics for a request e.g. can include the processing time needed by a processing server to process the request and generally it is assumed that more difficult requests require more processing time. According to an embodiment the weighting factor generator can be configured to collect the performance statistics e.g. the processing times for all requests associated with a request type and to calculate an average processing time for the request type . In an embodiment the weighting factor generator can then determine the weighting factor for the request type based on the average processing time.

In an embodiment the weighting factor can simply be the average processing time for the request type . Alternatively or in addition the weighting factor for a request type can be derived by normalizing the average processing times for each of the various request types . For example the average processing times for each of the request types can be normalized so that the weighting factor is a number between one 1 and ten 10 where a weighting factor of one 1 corresponds to a least difficult request type and a weighting factor of ten 10 corresponds to a most difficult request type.

In an embodiment once the weighting factor for each request type has been generated the weighting factor generator can be configured to store the request types and their respective weighting factors in a request weighting log . The request weighting log can be maintained by the request manager component in an embodiment. Alternatively or in addition when the request manager component is external to the ECM system the request weighting log can be managed by the ECM system .

Once the request types and their respective weighting factors have been determined and stored in the request weighting log the load manager component can be configured to receive a second plurality of requests and to provide automatic load balancing using a weighted round robin technique. Thus referring again to when the second plurality of resource requests is received a second resource request of the second plurality of resource requests is assigned to a processing server in block based on the weighting factor for the request type with which the second resource request is associated.

According to an embodiment the load manager component can include a request assignment engine which is configured to determine to which processing server a resource request will be assigned. For example in an embodiment when the second request is received the assignment engine can be configured to extract the request s resource identifier and action from the request and to use that information to determine the request type associated with the second request . Once the request type is determined the assignment engine can be configured to identify the weighting factor for the request type . In an embodiment the assignment engine can invoke the request manager component to return the weighting factor for the request type using the request weighting log . Alternatively or in addition the assignment engine can access the request weighting log directly to identify the weighting factor .

Once the assignment engine has identified the weighting factor for the second request the assignment engine determines which of the processing servers is available to process the request . In an embodiment the assignment engine can be configured to monitor each server s existing workload which can be defined as a sum of the weighting factors of each of the requests currently assigned to the server. Based on the current workloads of the servers and on the weighting factor of the second request the assignment engine can select a processing server that is available e.g. a server that has the lowest current workload to process the request and can assign the request to that server for processing. Alternatively or in addition in an embodiment the assignment engine can also bundle a plurality of requests and can assign the bundled requests to a processing server based on the processing server s current workload and on an aggregate weighting factor of the bundled requests .

In an embodiment when the second request is directed to a new resource type and or a new action the assignment engine will not be able to determine an existing request type for with the second request . In this case the assignment engine can be configured to invoke the request categorizer to identify a new request type for the second request that corresponds to the new resource type and or the new action. Although a weighting factor is not yet determined for the new request type the assignment engine can assign the second request to a processing server that has the lowest current workload for processing.

According to an embodiment while the second resource request is processed the request monitor can continue to record the performance statistics for the second request and the weighting factor generator can be configured to regenerate or generate the weighting factor for the request type associated with the second resource request . For example the weighting factor generator can be configured to collect the performance statistics e.g. the processing times for all requests associated with a request type including the second request and to recalculate or calculate the average processing time for the request type . In an embodiment the weighting factor generator can then update or generate the weighting factor for the request type based on the recalculated or calculated average processing time.

According to exemplary embodiments automatic load balancing based on the processing difficulty of requests and not the raw number of requests is implemented by collecting performance statistics for a first plurality of requests and categorizing the first plurality of requests into a plurality of request types based on each request s resource identifier and action. Using the performance statistics a weighting factor for each request type can be generated. According to an embodiment the weighting factor for a request type represents the processing difficulty of requests of the request type. Accordingly when a new request is received the weighting factor for the request type associated with the new request can be used to assign the new request to a processing server that is available to process the request. Moreover because the workload of a server is based on the cumulative weighting factors of the requests assigned to the server and not on the total number of requests the overall workload of the ECM system can be more evenly distributed among the processing servers.

The use of the terms a and an and the and similar referents in the context of describing the subject matter particularly in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. Furthermore the foregoing description is for the purpose of illustration only and not for the purpose of limitation as the scope of protection sought is defined by the claims as set forth hereinafter together with any equivalents thereof entitled to. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illustrate the subject matter and does not pose a limitation on the scope of the subject matter unless otherwise claimed. The use of the term based on and other like phrases indicating a condition for bringing about a result both in the claims and in the written description is not intended to foreclose any other conditions that bring about that result. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention as claimed.

Preferred embodiments are described herein including the best mode known to the inventor for carrying out the claimed subject matter. Of course variations of those preferred embodiments will become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventor expects skilled artisans to employ such variations as appropriate and the inventor intends for the claimed subject matter to be practiced otherwise than as specifically described herein. Accordingly this claimed subject matter includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed unless otherwise indicated herein or otherwise clearly contradicted by context.

