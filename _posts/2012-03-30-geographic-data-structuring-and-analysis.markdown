---

title: Geographic data structuring and analysis
abstract: Geographic data structuring and analysis is described. In one embodiment, a method for geographic data structuring and analysis is described, including parsing a set of geographic objects into groups of geographic objects, and assigning one or more attributes to the parsed geographic objects. The method may further include accessing a database of geographic object feature data and assigning certain features to certain attributes of the geographic objects, rendering one or more of the geographic objects in relation to geospatial topology information, and analyzing the rendered geographic objects. In certain aspects, systems and methods described herein provide functions attributable to Geographic Information Systems using rendering processors and engines that would otherwise be unable to achieve such functions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08965906&OS=08965906&RS=08965906
owner: Leidos, Inc.
number: 08965906
owner_city: Reston
owner_country: US
publication_date: 20120330
---
This application claims the benefit of U.S. Provisional Application No. 61 516 228 filed Mar. 31 2011 the entire contents of which are hereby incorporated herein by reference.

Embodiments described herein generally relate to a system and method for geographic data structuring and analysis and more particularly to a system and method for enabling Geographic Information System GIS functionality on a rendering processor or engine such as Google Earth by managing data outside the rendering processor and utilizing a live push to drive the rendering processor.

A Geographic Information System GIS provides the capability to capture store analyze manage and present data associated with geographic object items and attributes of the geographic object items in relation to a geospatial topology database typically via a geospatial mapping interface. Some mapping applications such as Google Earth allow for quick access to geographic object items in relation to a geospatial topology database but without a structured format for geographic object items. That is Google Earth provides the capability to present geographic object items in relation to a geospatial topology database but with a different approach than a GIS. For example geographic object items are typically loaded into Google Earth through a Keyhole Markup Language KML format file. KML files contain data in a generally unstructured and free form. In KML many types of geographic object items or features i.e. points lines polygons images tours etc. are mixed together among one or more folders. As understood in the art the organization of geographic object items in KML files is limited. In this case the unstructured nature of the KML format limits the ability of a user to perform analysis editing and spatial display and representation.

Thus when a user interacts with a mapping application operating with geographic object items in an unstructured form the user may not be able to easily select all geographic object items of the same type for example to analyze them. Similarly when interacting with an unstructured mapping application the user may be required to update attributes of a plurality of geographic object items of the same type individually rather than simultaneously as a group. Further the user may not be able to add a new attribute to the plurality of geographic object items easily. In the context of these examples the limitations of unstructured mapping applications is apparent. Accordingly there is a need in art to convert unstructured geographic object item data into structured formats to facilitate follow on analysis. Embodiments described herein are directed to addressing the deficiencies of and achieving improvements over the above discussed unstructured mapping systems.

In one embodiment a method for geographic data structuring and analysis is described including accessing a set of geographic objects and storing the set of geographic objects into a memory and parsing by a parsing engine the set of geographic objects into groups of geographic objects. The method may further include assigning one or more attributes to the parsed geographic objects accessing a database of geographic object feature data and assigning certain features of the geographic object feature data to certain attributes of the geographic objects rendering one or more of the geographic objects in relation to geospatial topology information and analyzing the rendered geographic objects based on at least one attribute of the geographic objects.

In one aspect of the method for geographic data structuring and analysis assigning one or more attributes includes for each group of geographic objects assigning a same set of attributes to each geographic object of the group of geographic objects. The method for geographic data structuring and analysis may further include adding a new geographic object to a group of the geographic objects the new geographic object inheriting the same attributes assigned to each geographic object of the group of geographic objects and displaying a dialog box for editing a value of an attribute of the geographic objects.

In other aspects of the method for geographic data structuring and analysis parsing the set of geographic objects includes defining a current folder analyzing object items in the current folder when each object item in the current folder has been analyzed determining whether the current folder is a sub folder and when the current folder is a sub folder setting a parent folder as a current folder. Further in certain aspects analyzing the object items in the current folder includes identifying a feature type of the next object item in the current folder determining a schema of the next object item in the current folder determining whether a combination of the feature type and schema of the next object item is a new for the current folder and placing the next object item a folder based on whether the combination of the feature type and schema of the next object item is new. Still further in certain aspects determining a schema of the next object item in the current folder includes determining each style of the next object item and defining the schema of the next object item to include a combination of each style of the next object item.

In another embodiment a system for geographic data structuring and analysis is described including a geographic data structuring processor configured to access a set of geographic objects and store the set of geographic objects into a memory parse the set of geographic objects into groups of geographic objects. The geographic data structuring processor may be further configured to assign one or more attributes to the parsed geographic objects and access a database of geographic object feature data and assign certain features of the geographic object feature data to certain attributes of the geographic objects. The system further includes a geographic data rendering processor configured to render one or more of the geographic objects in relation to geospatial topology information.

In one aspect the geographic data structuring processor is further configured to analyze the rendered geographic objects based on at least one attribute of the geographic objects. In other aspects the geographic data structuring processor is further configured to for each group of geographic objects assign a same set of attributes to each geographic object of the group of geographic objects. In certain embodiments the geographic data structuring processor is further configured to add a new geographic object to a group of the geographic objects the new geographic object inheriting the same attributes assigned to each geographic object of the group of geographic objects. Further in certain aspects the geographic data structuring processor is further configured to display a dialog box for editing a value of an attribute of the geographic objects.

In another aspect the geographic data structuring processor is further configured to sort the rendered geographic object items according to respective values of an attribute of each of the rendered geographic objects. Further in certain aspects the geographic data structuring processor is further configured to query the rendered geographic object items based on the attributes of the rendered geographic object items.

In another embodiment a computer readable storage device storing computer readable instructions thereon that when executed by a processor direct the processor to perform a method for geographic data structuring and analysis is described the method including accessing a set of geographic objects and storing the set of geographic objects into a memory and parsing by the processor the set of geographic objects into groups of geographic objects. The method may further include assigning one or more attributes to the parsed geographic objects accessing a database of geographic object feature data and assigning certain features of the geographic object feature data to certain attributes of the geographic objects rendering one or more of the geographic objects in relation to geospatial topology information and analyzing the rendered geographic objects based on at least one attribute of the geographic objects.

In the following paragraphs embodiments are described in further detail by way of example with reference to the attached drawings. In the description well known components methods and or processing techniques are omitted or briefly described so as not to obscure certain aspects of the various embodiments. Among the embodiments some aspects and features are implemented by a computer program executed by one or more processors as described and illustrated. As would be apparent to one having ordinary skill in the art the embodiments described herein may be implemented at least in part by computer readable instructions in various forms and the various embodiments are not intended to be limiting to a particular set or sequence of instructions executed by the processor.

Turning to the drawings in which like numerals indicate like but not necessarily the same elements throughout exemplary embodiments are described in detail.

In operation the rendering processor is configured to render geographic object items in relation to geospatial topology information as part of a mapping application. That is based on the processing conducted by the rendering processor a display of objects or items may be provided on the display in relation to geospatial topology. In this context the rendering processor comprises a component of a larger overall GIS system that permits a user of the system to visualize objects or items in relation to geospatial topology. In other words for example the rendering processor presents data with reference to an underlying map. Thus a user is able to visualize aspects of the data which may not be readily apparent without the underlying map such as respective positions of geographic object items in relation to each other or to certain landmarks for example. In certain embodiments and aspects the rendering processor may be implemented at least in part by a rendering processor or engine such as Google Earth.

To provide the rendered output to the display the geospatial input interface of the rendering processor is configured to access the geospatial topology database and provide geospatial topology data to the rendering engine . Further the object input interface is configured to access or receive geographic object items and provide the geographic object items to the rendering engine for rendering in relation to the geospatial topology data. In one embodiment the object input interface comprises an Application Programming Interface API although the object input interface may comprise other types of interfaces. The rendering engine is configured to render the geographic object items accessed by the object input interface from the unstructured object item listing database in relation to the geospatial topology data from the geospatial input interface . The rendering engine is further configured to provide the rendered output to the display .

In various embodiments the geospatial topology database comprises a database of information related to the features of a geographic region or regions. The geospatial topology database may store geospatial topology information in various forms. In one embodiment the geospatial topology database stores data as a set of points lines and polygons in vector or scalar form and or as a set of photographs or bitmaps of overlay data for example without limitation. In general the geospatial topology information may be stored in association with a geographic coordinate system so that geographic object items having geographic coordinates may be rendered in relation to the coordinate system. In certain embodiments using the geospatial topology information stored in the geospatial topology database the rendering engine may render a graphical representation of the planet earth including topology features such as land oceans lakes rivers and mountains among other features as would be understood in the art without limitation.

The unstructured object item listing database comprises a database of geographic object items. In general the database of geographic object items comprises object items to be analyzed in relation to geospatial topology information such as that stored in the geospatial topology database . As one example each geographic object item may comprise a point line or polygon associated with coordinates indicating where such item should be rendered with respect to the geospatial topology information. To facilitate this rendering the database of geographic object items and the geospatial topology database may both rely upon a common coordinate system.

As an example for further context object items stored in the unstructured object item listing database may be associated with particular elements of a utility or service system such as water meters utility poles or traffic lights. In this context data may be displayed on the display in relation to the geospatial topology information stored in the geospatial topology database by the rendering processor to provide a user with a geospatial representation of all water meters of a municipality for example. The display of geographic object items other than points lines and polygons are within the scope of this disclosure as noted by the further examples below without limitation.

It is noted that if the object input interface directly accesses the geographic object items from the unstructured object item listing database as indicated by the dashed line in the object items are provided to the rendering engine individually and generally without any structure or associations among them because the unstructured object item listing database stores geographic object items without or nearly without any formatting structure or associations to assist with analysis or editing. In certain embodiments the unstructured object item listing database may store geographic object items in an unstructured KML file. In this case when the rendering processor displays the geographic object items in relation to the geospatial topology information on the display a user is limited in his ability to analyze and edit the information presented by the display . In other words the user may be limited to selecting geographic object items individually and unable to update attributes of more than one object item at a time even for groups of object items of similar feature type.

Turning to an example illustration of a display of geographic object items rendered in relation to geospatial topology information is described. In unstructured geographic object items are rendered in relation to geospatial topology information . Particularly in the example of the geographic object items include points trails and campsites. Based on coordinate information associated with each of the geographic object items the items are displayed at positions relative to each other and to the geospatial topology information . As illustrated the geographic object items are unorganized except for being maintained within a single folder Folder 1 as compared to the illustration of described below. In the example of it is noted that a user is unable to select all points trails or campsites easily. Similarly the user is unable to easily distinguish among features of the trails such as trail distance for example. Instead the user may be required to select and analyze each trail individually if attempting to determine which trail is the longest or shortest. Thus although the geographic object items are rendered in relation to the geospatial topology information the user may be unable to perform a suitable analysis on the geographic object items in a quick flexible and effective manner.

Returning to the operation of the analysis processor is described in further detail. The input interface accesses the geographic object items from the unstructured object item listing database and provides them to the parsing engine and or the workspace memory . In one embodiment the input interface comprises an Application Programming Interface API although the input interface may comprise other types of interfaces. As described in additional detail below the parsing engine parses and organizes the geographic object items from the unstructured object item listing database into groups layers or other associations based on one or more of feature type attribute schema geographic proximity or other properties for example without limitation. In this context the memory comprises a workspace memory for the parsing engine when parsing and organizing the object items into one or more organized groups or layers of object items. The associations created among the object items by the parsing engine facilitate analysis and editing of the object items. Either during or after paring the parsing engine provides the object items to the object item interface of the rendering processor so that they may be rendered along with geospatial topology information as described above. In other embodiments the parsed and organized object items may be provided by the parsing engine directly to the rendering engine . Additionally as necessary the parsed and organized object items may be provided by the parsing engine to the analysis edit engine to permit further analysis and editing of the parsed and organized object items. The analysis edit engine may also access the parsed and organized object items directly from the workspace memory as necessary for analysis of the object items.

In certain aspects the input interface also accesses the local object feature database and provides object item feature information to the parsing engine so the parsing engine is able to add and update features and attributes to object items from the object item listing database . The local object feature database comprises a database of features and attributes which in certain aspects are to be associated or attributed to the object items from the object item listing database either before or after parsing and organizing. As one example the local object feature database may comprise information related to buildings or dwellings such as square footage building age and building materials. In that case the local object feature database may comprise information related to building or dwelling object items stored in the unstructured object item listing database . As another example with reference to the local object feature database may comprise information related to the lengths or types of trails or capacities of campsites. It is noted that the object items listed in the unstructured object item listing database may already be stored along with certain feature and attribute information. In this context the local object feature database comprises additional feature and attribute information to be associated with the object items. In various embodiments the local object feature database may reside with or remote from the analysis processor and the rendering processor .

In other aspects the input interface may also access the third party object feature server database via the data network to provide object item feature information to the parsing engine . The third party object feature server database is similar to the local object feature database in that it also comprises a database of features and attributes which in certain aspects are to be associated or attributed to the object items from the object item listing database . However the third party feature server database is remote from the analysis processor and the rendering processor and is accessed by the input interface via the data network . In various embodiments the data network comprises one or more private or public networks or combinations thereof.

The output interface is configured to output the parsed and organized object items along with any associated or attributed features for use by systems other than the system . In one embodiment the output interface is configured to output the parsed and organized object items as a particular filetype or filetype structure to be accessible by other systems or applications.

Turning to another example illustration of a display of geographic object items rendered in relation to geospatial topology information is described. In parsed geographic object items are rendered in relation to geospatial topology information . Particularly in the example of the parsed geographic object items include points trails and campsites organized by feature type into respective groups of feature type folders by the parsing engine . It is noted that the data structure organization including the use of feature type folders as illustrated in is attributable to the processes performed by the parsing engine and not to any structure stored in the unstructured object item listing database . It is also noted that the data structure organization using feature type folders in is intended only as an example of an organized structure of object items which may be achieved by the parsing engine . Other types or forms of organization such as layers or other containers or constructs are within the scope of this disclosure.

As compared to the geographic object items of the parsed geographic object items comprise an underlying organization which permits a user to perform additional analysis which could not be performed otherwise. For example the user may be able to select every object item of a group of object items edit add or delete an attribute for each object item of the group of object items simultaneously sort each object item of the group of object items based on an attribute of the object items set aspects of a theme for the group of object items and search among attributes of the object items. Additional aspects of the underlying organization of the parsed geographic object items are illustrated by the attribute dialog box . The attribute dialog box lists each object item in the trails group of object items along with the attributes of each. As illustrated each trail object item comprises a name ID type and length attribute. The attribute dialog box may be generated for display on the display by the analysis edit engine in certain embodiments.

Using the attribute dialog box a user can easily reference the attributes of the trails rendered in relation to the geospatial topology and determine for example the longest trail. In certain embodiments the attribute dialog box may permit the user to sort the trails in ascending or descending order for easy analysis. Similarly the attribute dialog box may permit the user to sort the trails according to name ID or type. As discussed above one or more of the attributes of the trails may be determined by the analysis processor based on information from the local object feature database or the third party object feature database . In this manner the analysis processor provides additional information to users for analysis and evaluation that was not available in the unstructured object item listing database. Thus the analysis processor is configured to parse unstructured object items into one or more groups of structured object items and incorporate additional data among the groups of structured object items from various sources. In that context the analysis processor provides a type of GIS overlay for the rendering processor in the system giving users additional features not available using the rendering processor and the unstructured object item listing database alone.

The analysis edit engine may be configured to display additional dialog boxes for adding deleting and editing object items adding deleting and editing attributes of object items setting themes among object items and for defining further structure among object items and attributes of object items. As such additional dialog boxes such as those illustrated in are within the scope of this disclosure. It is noted however that the dialog boxes illustrated in are provided by way of example only and other dialog boxes or manners of editing information in the system are within the scope of this disclosure. illustrates an example edit feature attributes dialog box displayed by the analysis edit engine . In certain embodiments the edit feature attributes dialog box may be displayed after selecting a particular object item so that the attributes of the object item may be edited. In general using the edit feature attributes dialog box a user of the system is able to edit values of attributes of object items.

The analysis edit engine may be configured to display a dialog box for setting properties of a group or layer of object items. is an example of a dialog box for setting and editing layer attributes in this respect. As described herein a layer of object items refers to a parsed group of object items. The group of object items may be associated by type i.e. point line polygon etc. attribute or schema during parsing for example. As illustrated in various color schemes and theme types may be selected for various aspects of a layer of object items. In this manner when the object items of a layer are rendered by the rendering processor in relation to geospatial topology information the object items of the layer may be more easily distinguished from other unrelated object items in different layers.

The analysis edit engine may be configured to display a dialog box for adding an attribute to an object item. is an example of an add attribute dialog box. Using the add attribute dialog box a user is able to add a new attribute for an object item define a type of the attribute and set a value for the attribute. Example types of attributes include numbers text time and currency without limitation. In one embodiment the addition of a new attribute for one object item in a group of object items automatically adds the attribute for each object item of the group. In other embodiments setting a value of an attribute for one object item in a group of object items automatically sets the value for the attribute to all object items in the same group.

The analysis edit engine may be further configured to display a dialog box for adding a new object item. For example illustrates a dialog box for the addition of a new point. In certain embodiments when the user adds a new object item to a group of object items the analysis edit engine automatically creates the new object item having the same attributes of the other object items in the group. In for example a new point object item may be added to the group or layer facilities having the same attributes as the other points in the layer.

Additional operational aspects of the system are described below with reference to the process flow diagrams of . Before turning to the process flow diagrams it is noted that certain embodiments may be practiced using an alternative order of the steps illustrated in . That is the process flows illustrated in are provided as examples only and certain embodiments may be practiced using process flows that differ from those illustrated. Additionally it is noted that not all steps are required in every embodiment. In other words one or more of the steps may be omitted or replaced without departing from the spirit and scope of this disclosure. In alternative embodiments steps may be performed in different orders in parallel with one another or omitted entirely and or certain additional steps may be performed without departing from the scope and spirit of this disclosure.

With reference to a method for geographic data structuring and analysis is described. The method is generally described with reference to the system of although the method may be implemented by systems other than the system . The method begins at step where the analysis processor accesses a set of geographic objects and stores the set of geographic objects into a memory. For example at step the input interface and the parsing engine access the unstructured object item listing database and store the geographic objects in the database into the memory . As discussed above the set of geographic objects listed in the database are generally unstructured in form and may be in the format of a KML file for example.

After the set of geographic objects are stored in the memory at step the process proceeds to step where the geographic object items are parsed into one or more groups of geographic objects. That is the parsing engine having access to the memory parses the geographic object items into one or more groups of geographic objects and in certain embodiments stores the parsed groups of geographic objects back to the memory . The step of parsing geographic object items is described in further detail below with reference to . Proceeding to step attributes are assigned to the parsed geographic objects. The attributes may be assigned with reference to the third party and local object feature databases and for example. Among embodiments the parsing engine may assign one or more attributes to one or more of the parsed geographic objects. Additionally the parsing engine may assign one or more of the same attributes to each geographic object of a group of the geographic objects. It is noted that at step the parsing engine may also assign values to the attributes when assigning them to the geographic objects. In that context to determine the values of the assigned attributes the parsing engine may access the third party and local feature databases and as described above. It is noted that the assignment of attributes at step may vary depending upon the application and several other factors such as the type of geographic object the attribute is assigned to the amount of data stored in the third party and local feature databases and and the type of analysis to be performed.

At this point in the method the unstructured geographic objects listed in the database have been parsed into groups having certain formatting structure and associations to assist with analysis or editing. Additionally the geographic objects have also been assigned additional attributes for analysis or editing as necessary for the application or analysis desired. As noted above the values of the additional attributes may be determined from local or third party databases in cases where the values are not available in the unstructured object item listing database .

Proceeding to step the parsed geographic objects stored in the workspace memory are rendered by the rendering processor . That is at step the rendering processor renders one or more of the parsed geographic objects in relation to geospatial topology information. In one embodiment the parsed geographic objects are provided to the object input interface by the parsing engine . In other embodiments the object input interface may retrieve the parsed geographic objects directly from the workspace memory . In a manner similar to that discussed above at step the rendering engine renders the parsed geographic objects in relation to the geospatial topology data stored in the geospatial topography database . As such the rendered output may appear on the display in a manner similar to that illustrated in . Particularly in certain aspects the geographic objects are rendered using groups having certain formatting structure and associations to assist with analysis or editing.

Proceeding to step the rendered geographic objects may be analyzed based on the rendered display of the objects and one or more of the attributes of the rendered geographic objects. For example at step a user may be able to select every object item of a group of object items edit add or delete an attribute for each object item of the group of object items simultaneously sort each object item of the group of object items based on an attribute of the object items set aspects of a theme for the group of object items and search among attributes of the object items. In certain embodiments the analysis at step may be performed using one or more dialog boxes generated by the analysis edit engine and displayed on the display as discussed above.

Turning to an example of parsing geographic object items at step is described in further detail. It is noted that the embodiment described with reference to is provided by way of example only. In other words the formatting and structure provided by the process in is presented as an example of one type of formatting and structure that may be provided to unstructured object items. Starting at step geographic object items are loaded added or stored to the workspace memory from the unstructured object item listing database using the input interface and in some embodiments the parsing engine . It is noted that step may be omitted in some embodiments if the geographic object items have been previously stored to the workspace memory . For example step may be omitted if the geographic object items were previously stored to the workspace memory in step of .

Proceeding to step the parsing engine defines a current folder. For example making reference to for additional context the parsing engine accesses the unstructured geographic object items stored in the workspace memory at step and when the object items are stored in one or more folders defines a current folder for the items. It is noted that in various embodiments the geographic objects stored in the unstructured geographic object item listing database may be provided containers other than folders such as layers or documents. In the unstructured geographic object items are stored and arranged in the folders Folder 1 Folder 2 and Folder 3. It is further noted however that the folders fail to arrange the unstructured geographic object items into any particular arrangement suitable for analysis of the object items. In other words the unstructured geographic object items are stored in the folders Folder 1 Folder 2 and Folder 3 arbitrarily and without any useful or meaningful arrangement. In other embodiments the folders Folder 1 Folder 2 and Folder 3 may comprise equivalent containers other than folders depending upon the format of the unstructured object item listing database . Based on the listing of unstructured geographic object items in the parsing engine defines the current folder as Folder 1 at step operating on the unstructured geographic object items from the top down. In some cases the unstructured geographic object items may not be organized in any folders at all. In this case step may be skipped or omitted.

After defining the current folder as Folder 1 at step the process proceeds to step where the object items in the current folder are analyzed. The analysis at step is described in additional detail with reference to . Turning to for an example process of analyzing object items in the current folder the parsing engine determines at step whether the next item in the unstructured geographic object items is a folder. With reference to the parsing engine determines that the next item in the unstructured geographic object items is not a folder because the next item Point 1 is a point and not a folder. As such the parsing engine proceeds to step where the feature type of the next object item is determined by the parsing engine . With reference again to the feature type of the next object item Point 1 is a point. In it is noted that three types of object features are illustrated including points lines and polygons. However other feature types are within the scope of the present disclosure. Alternatively if the parsing engine determined at step that the next item in the current folder is another folder the parsing engine would proceed to step where it would define a sub folder of the current folder set that sub folder as the current folder and return to step of .

After the parsing engine determines the feature type of the next object item at step the process proceeds to step where the schema of the next object item is determined. The process of determining the schema of the next object item at step is described in further detail with reference to . In general the schema of an object item may be defined by the style attributes of the object item. For example an object item defined to be displayed in a first color may be determined to have a different schema than an object item defined to be displayed in a second color. It is noted however that style attributes may comprise attributes other than color such as size and orientation among others.

Turning to for an example process of determining the schema of the next object item the process begins at step where the parsing engine determines whether a style attribute is defined for the next object item. That is the parsing engine analyzes the next object item at step to determine if it includes any defined styles. For example the object item Point 1 may be defined in various aspects to have a certain color size shape or orientation style attribute. If the next object item is determined by the parsing engine to have a style attribute at step the process proceeds to step where the parsing engine categorizes the schema of the next object item to include the nstyle attribute determined in step . After step the process proceeds to step where the parsing engine determines whether another style attribute is defined for the next object item. If so the process proceeds again to step so that the schema for the next object item can be categorized to further include the nstyle attribute determined in step . In this context it is noted that any object item may be defined by one or more style attributes. After the schema of the next object item is categorized to include all style attributes of the next object item at steps and the process proceeds to step where the parsing engine defines the overall schema of the next object item to comprise a combination of all determined style attributes of the next object item. After step the process returns to the previous process.

It is noted that an object item may not be defined by any style attributes. In this case the process proceeds directly to step after the parsing engine determines at step that no style attribute is defined for the next object item. For the object item Point 1 of no style attribute is defined and the parsing engine proceeds to step where the schema of the next object item is defined to include no attributes. After step the process returns to step of .

At step of the parsing engine determines whether a new schema was determined at step for the feature type of the object item determined at step . That is the parsing engine determines whether a new schema was determined for the object item Point 1 at step . In the context of the example of because Point 1 is the first object item in Folder 1 the schema for Point 1 determined at step is new. That is the schema of Point 1 which was categorized to include no style attributes is new because no points were previously determined having no style attributes. Because the schema for the object item Point 1 is new the process proceeds to step where the parsing engine creates a new Point folder for points having schemas categorized with no style attributes. With reference to this new folder is illustrated as Folder 1 Points. Proceeding to step the parsing engine places the object item Point 1 in the Folder 1 Points folder.

After step the process proceeds to step where the parsing engine determines whether it has reached the end of the object items in the current folder. With reference to because the object item Point 2 is also within Folder 1 the process proceeds back to steps and where the parsing engine determines the feature type and schema of the object item Point 2. In the example of the object item Point 2 also has no defined style attributes. As such the schema of the object item Point 2 is determined and defined to comprise no style attributes at step . Proceeding to step the parsing engine determines that the schema for the object item Point 2 is not new for the feature type point because the object item Point 1 was also determined to comprise a point with no style attributes. As such the process proceeds to step where the parsing engine places the object item Point 2 into the folder for points having no style attributes Folder 1 Points as illustrated in .

After the parsing engine places the object item Point 2 into the Folder 1 Points folder at step the process proceeds again to step where the parsing engine determines whether it has reached the end of the object items in the current folder. Referring to after the Point 1 and Point 2 object items the Folder 1 folder includes the Folder 2 folder. As such the process proceeds back to steps and to define the Folder 2 subfolder of the Folder 1 folder as illustrated in . After step the process proceeds back to step of and returns back to step of for parsing the object items Line 1 and Point 3 in the Folder 2 sub folder. It is noted that the object items Line 3 and Point 4 are still present in the Folder 1 folder and are parsed later in the process as described below.

The object items Line 1 and Point 3 are parsed by the parsing engine in a manner similar to that described above with reference to the object items Point 1 and Point 2. Particularly for the Line 1 object item the parsing engine identifies the feature type of the Line 1 object as a line at step determines that the Line 1 object item has no defined style attributes at step determines that a new schema and feature type combination is associated with the Line 1 object item at step creates a new Folder 2 Lines folder for the new schema and feature type combination at step and places the Line 1 object item into the new Folder 2 Lines folder at step . Similarly for the Point 3 object item the parsing engine identifies the feature type of the Point 3 object as a point at step determines that the Point 3 object item has no defined style attributes at step determines that a new schema and feature type combination is associated with the Point 3 object item at step creates a new Folder 2 Points folder for the new schema and feature type combination at step and places the Point 3 object item into the new Folder 2 Points folder at step . It is noted that as illustrated in the new Folder 2 Folder 2 Lines and Folder 2 Points folders are created by the parsing engine within the Folder 1 folder. In other embodiments sub folders may not be parsed to be within the parent folder they are originally found within. In alternative embodiments for example any general organization among unstructured object items such as folders may be completely omitted during parsing to create only a set of parent folders or layers for new schema and feature type combinations.

After the parsing engine parses the Line 1 and Point 3 object items the process proceeds again to step where the parsing engine determines whether it has reached the end of the object items in the current folder. Referring to after the Line 1 and Point 3 object items the Folder 2 folder includes the Folder 3 folder. As such the process proceeds back to steps and to define the Folder 3 subfolder of the Folder 2 folder as illustrated in . After step the process proceeds back to step of and returns back to step of for parsing the object items Polygon 1 Attribute A Polygon 1 Attribute B and Line 2 in the Folder 3 sub folder.

The object items Polygon 1 Attribute A Polygon 1 Attribute B and Line 2 in the Folder 3 sub folder are parsed by the parsing engine in a manner similar to that described above for the other object items. However it is noted that although the object items Polygon 1 Attribute A and Polygon 1 Attribute B are both of the same polygon feature type each has a different schema as determined at step . That is the attribute A of Polygon 1 is different than the attribute B of Polygon 2. As such the parsing engine determines a new schema and feature type combination for each at step and creates separate folders for each at step as also illustrated in .

After the parsing engine parses the object items within the Folder 3 subfolder the process proceeds again to step where the parsing engine determines whether it has reached the end of the object items in the current folder. Referring to the Folder 3 sub folder does not include any additional object items after the Line 2 object item. As such the process proceeds along the YES branch after step and returns to step of . At step because the current folder Folder 3 is a sub folder of Folder 2 the process proceeds to step where the parsing engine sets the next parent folder having additional object items to be parsed as the current folder. Here because the Folder 2 parent folder of the Folder 3 subfolder has no object items remaining to be parsed as illustrated in the parsing engine sets the Folder 1 folder as the next parent folder. The process then proceeds again to step to analyze the remaining Line 3 and Point 4 object items as illustrated in . The object items Line 3 and Point 4 are parsed by the parsing engine in a manner similar to that described above for the other object items. Particularly the Line 3 object item is placed within the Folder 1 Lines folder at step and the Point 4 object item is placed within the Folder 1 Points folder at step .

It is again noted that the method for parsing geographic object items is provided as an example of organizing geographic object items and other processes are within the scope of this disclosure. Similarly the unstructured object items are provided as a non limiting example of object items which may be parsed by the method . The parsed geographic object items of are formed into groups or folders which are more suitable for analysis. For instance because all points in a folder are grouped together a user may be able to quickly select all points in a folder and add or edit attributes to the points. Similarly the user may be able to sort all points in the folder according to the values of the attributes of the points as discussed above. As such the user is able perform additional analysis on rendered object items that would not otherwise be possible without first parsing the object items.

Turning to an example hardware diagram of a general purpose computer is illustrated. In certain embodiments the system may be implemented at least in part using one or more elements of the general purpose computer . The computer includes a processor a Random Access Memory RAM a Read Only Memory ROM a memory device a network interface and an Input Output I O interface . The elements of the computer are communicatively coupled via a bus .

The processor comprises any well known general purpose arithmetic processor or Application Specific Integrated Circuit ASIC . The RAM and ROM and comprise any well known random access or read only memory device that stores computer readable instructions to be executed by the processor . The memory device stores computer readable instructions thereon that when executed by the processor direct the processor to execute various aspects of the embodiments described herein. When the processor comprises an ASIC the processes described herein may be executed by the ASIC according to an embedded circuitry design of the ASIC by firmware of the ASIC or both an embedded circuitry design and firmware of the ASIC. As a non limiting example group the memory device comprises one or more of an optical disc a magnetic disc a semiconductor memory i.e. a flash based memory a magnetic tape memory a removable memory combinations thereof or any other known memory means for storing computer readable instructions. The network interface comprises hardware circuitry interfaces to communicate over data networks such as the data network . The I O interface comprises device input and output interfaces such as keyboard pointing device display communication and other interfaces. The bus electrically and communicatively couples the processor the RAM the ROM the memory device the network interface and the I O interface so that data and instructions may be communicated among them. In operation the processor is configured to retrieve computer readable instructions stored on the memory device the RAM the ROM or another storage means and copy the computer readable instructions to the RAM or the ROM for execution. The processor is further configured to execute the computer readable instructions to implement various aspects and features of the methods and processes described above. For example the processor may be adapted and configured to execute the processes described above with reference to including the processes described as being performed by the parsing engine .

While embodiments have been described herein in detail the descriptions are by way of example. The features of the embodiments described herein are representative and in alternative embodiments certain features and elements may be added or omitted. Additionally modifications to aspects of the embodiments described herein may be made by those skilled in the art without departing from the spirit and scope of the following claims the scope of which are to be accorded the broadest interpretation so as to encompass modifications and equivalent structures.

