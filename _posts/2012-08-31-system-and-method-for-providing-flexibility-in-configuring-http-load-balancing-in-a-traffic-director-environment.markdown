---

title: System and method for providing flexibility in configuring HTTP load balancing in a traffic director environment
abstract: Described herein are systems and methods for use with a load balancer or traffic director, and administration thereof, wherein the traffic director is provided as a software-based load balancer that can be used to deliver a fast, reliable, scalable, and secure platform for load-balancing Internet and other traffic to back-end origin servers, such as web servers, application servers, or other resource servers. In accordance with an embodiment, the system comprises a high-speed network infrastructure which provides communication protocols or sockets for use by the origin servers in receiving requests; one or more protocol terminator/emulators for use with the communication protocols or sockets; and an inbound socket configuration and an outbound socket configuration which together indicate which terminator/emulator the traffic director should use in communicating requests to particular ones of the origin servers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09128764&OS=09128764&RS=09128764
owner: ORACLE INTERNATIONAL CORPORATION
number: 09128764
owner_city: Redwood Shores
owner_country: US
publication_date: 20120831
---
This application claims the benefit of priority to U.S. Provisional Patent Application No. 61 539 886 titled SYSTEMS AND METHODS FOR USE WITH AN APPLICATION SERVER TRAFFIC DIRECTOR CORE FEATURES filed Sep. 27 2011 and U.S. Provisional Patent Application No. 61 539 900 titled SYSTEMS AND METHODS FOR USE WITH AN APPLICATION SERVER TRAFFIC DIRECTOR ADMIN FEATURES filed Sep. 27 2011 each of which applications is herein incorporated by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The invention is generally related to a load balancer or traffic director for use in an application server middleware machine or other computing environment and is particularly related to a system and method for providing flexibility in configuring http load balancing in a traffic director environment.

A typical enterprise level computing environment can include many different types of computing resources e.g. web servers application servers database servers or other types of resource servers which are intended to be accessed over a network e.g. a company s internal Ethernet network or the Internet by other computers or by users operating various different types of computing devices. A familiar example is the use of a client computer such as a laptop equipped with a web browser application by which a user can access a web server via the Internet.

Today s organizations rely increasingly on their computing resources being readily available from almost any location at all times with a high level of performance. The task of ensuring that such resources are allocated efficiently often requires the use of a load balancing device to distribute requests from clients to target resources in a fair manner according to its distribution policies. These are the types of environments that embodiments of the invention can be used with.

Described herein are systems and methods for use with a load balancer or traffic director and administration thereof. In accordance with an embodiment the traffic director referred to herein in some embodiments as Oracle Traffic Director OTD is provided as a software based load balancer that can be used to deliver a fast reliable scalable and secure platform for load balancing Internet and other traffic to back end origin servers such as web servers application servers or other resource servers.

Embodiments of the traffic director are particularly useful in application server middleware machine and similar high performance enterprise level computing environments such as Oracle WebLogic and Exalogic environments.

In accordance with an embodiment the system comprises a traffic director having one or more traffic director instances which is configured to receive and communicate requests from clients to origin servers having one or more pools of servers. In accordance with an embodiment the system comprises a high speed network infrastructure which provides communication protocols or sockets for use by the origin servers in receiving requests one or more protocol terminator emulators for use with the communication protocols or sockets and an inbound socket configuration and an outbound socket configuration which together indicate which terminator emulator the traffic director should use in communicating requests to particular ones of the origin servers.

As described above today s organizations rely increasingly on their computing resources being readily available from almost any location at all times with a high level of performance. The task of ensuring that such resources are allocated efficiently often requires the use of a load balancing device to distribute requests from clients to target resources in a fair manner according to its distribution policies.

Described herein are systems and methods for use with a load balancer or traffic director and administration thereof. In accordance with an embodiment the traffic director referred to herein in some embodiments as Oracle Traffic Director OTD is provided as a software based load balancer that can be used to deliver a fast reliable scalable and secure platform for load balancing Internet and other traffic to back end origin servers such as web servers application servers or other resource servers.

Embodiments of the traffic director are particularly useful in application server middleware machine and similar high performance enterprise level computing environments such as Oracle WebLogic and Exalogic environments.

In accordance with an embodiment the traffic director serves as an entry point for traffic such as hypertext transfer protocol HTTP and hypertext transfer protocol secure HTTPS requests which are received from clients or client devices for communication to a back end of resources or resource servers acting as origin servers. Each traffic director includes one or more traffic director instances defined by a configuration wherein the configuration provides information about various elements of that instance such as listeners origin servers failover groups and logs.

Examples of the types of clients that can be used with the system include computer servers laptop computers portable devices such as smartphones and other types of computing devices some of which may include e.g. a web browser application for accessing a web server.

Examples of the types of resources that can be used as origin servers include lightweight directory access protocol LDAP servers web servers multimedia servers application servers database servers and other types of resources.

In accordance with an embodiment the traffic director can perform tasks such as distributing requests to origin servers based on one or more load balancing methods routing requests based on specified rules caching frequently accessed data prioritize traffic and controlling the quality of service.

From a performance perspective in accordance with an embodiment the traffic director can include an architecture that enables it to handle large volumes of traffic with low latency. For example embodiments can be optimized for use within a high performance computing environment such as e.g. Oracle Exalogic Elastic Cloud or to communicate with origin servers at the back end using a high performance communication fabric such as e.g. InfiniBand. In accordance with an embodiment to support high availability the traffic director can recognize failover groups of traffic director instances that provide active passive or active active failover. As the volume of traffic to a network increases the traffic director environment can be scaled by reconfiguring the traffic director with additional back end servers to which it can route requests or by modifying the rate at which traffic is communicated.

From an administration perspective in accordance with an embodiment the traffic director is designed to be easy to install configure and use and can include a simple wizard driven graphical interface as well as a robust command line interface for use by an administrator in managing traffic director instances. For any particular organization depending on their business requirements such as the number of back end applications for which they want to use the traffic director to balance requests their internal requirements such as security and the traffic director features they wish to use the traffic director topology can be varied to address their needs. For example a simple traffic director topology might initially utilize a single traffic director instance running on a dedicated compute node and distributing client requests to a pool of servers at the back end. To avoid a single point of failure an administrator can configure two homogenous traffic director instances running on different nodes and forming an active passive failover pair. To improve resource utilization an administrator can configure the two traffic director instances in active active mode with two virtual IP addresses.

In accordance with an embodiment the following terms are used herein. It will be evident that in accordance with other embodiments additional and or different terms can be used.

For any particular organization depending on their business requirements such as the number of back end applications for which they want to use the traffic director to balance requests their internal requirements such as security and the traffic director features they wish to use the traffic director topology can be varied to address their needs. The back end can include one or more origin servers examples of which can include LDAP servers web servers multimedia servers application servers and database servers . In accordance with an embodiment the application server can be a WebLogic server WLS . Other types of origin servers and application servers can be used depending on the particular needs of the organization. Each of the origin servers can communicate with one another and with the traffic director via an internal network such as an Ethernet network.

In accordance with an embodiment the traffic director can receive requests from clients via an external network the Internet and in the case of many organizations a firewall . Examples of the types of clients that can be used with the system include computer servers laptop computers portable devices such as smartphones and other types of computing devices some of which may include e.g. a web browser application for accessing a web server.

In the example illustrated in the topology comprises two traffic director instances and forming an active passive failover group and including a single virtual IP address for receipt of client requests. When the active instance in this example instance receives a request it determines the server pool to which the request should be sent and forwards the request to one of the servers in that pool based on the load distribution method s that are specified for that pool.

Although the example shown in illustrates the use of two server pools at the back end an administrator can configure the traffic director to route requests to servers in multiple pools. In the active passive setup illustrated in one node in the failover group is redundant at any point in time. In accordance with an embodiment to improve resource utilization the administrator can configure the two traffic director instances in active active mode with two virtual IP addresses in this scenario each instance caters to requests received on one virtual IP address and backs up the other instance.

As shown in in accordance with an embodiment the traffic director can include one or more Netscape portable runtime NSPR and Network Security Services NSS layers. In accordance with an embodiment the traffic director can also include an HTTP engine having one or more access control logging HTTP compression I O filter error handling rate shaping intrusion detection or other components and a reverse proxy component having one or more http client response client health check routing policies load controls load balancer WLS support sticky routing or other components. In accordance with an embodiment the traffic director can also include an HTTP connection handler having one or more acceptor threads worker threads keep alive threads or other components. In accordance with an embodiment the traffic director can also include a TCP connection handler having one or more TCP threads load balancer or other components. In accordance with an embodiment the traffic director can also include one or more event scheduler dynamic configuration monitoring or other components.

It will be evident that in accordance with other embodiments additional and or different components can be used.

In accordance with an embodiment an administration environment includes an administration interface which in turn includes one or more of an administration console GUI and or a command line interface that enables an administrator to configure or otherwise administer the traffic director or its instances .

In accordance with an embodiment when used as a local load balancer for a high performance computing environment such as an Exalogic middleware machine having a high speed InfiniBand network infrastructure the traffic director s load balancing can be designed to work seamlessly with the environment s network architecture.

InfiniBand is a switched fabric communications link offering point to point bidirectional serial links and is generally designed for the connection of processors with high speed peripherals such as disks. Different protocols can be used to communicate over the InfiniBand fabric examples of which include the Internet Protocol over InfiniBand IPoIB and the Sockets Direct Protocol SDP .

The IPoIB protocol is used as an interface on top of the InfiniBand layer and allows socket based applications to utilize the host s TCP IP protocol stack which is then translated into native InfiniBand in a manner transparent to the application. The SDP protocol is an optimization of the sockets based interface and allows the system to bypass the TCP IP stack and instead translate socket based packets directly into the InfiniBand layer using remote direct memory access RDMA operations while maintaining existing TCP stream socket semantics. The SDP protocol has the advantage of bypassing the several software layers that are necessary to support IPoIB which in turn results in SDP having better latency and throughput than IPoIB.

In accordance with an embodiment the traffic director can terminate inbound e.g. Ethernet traffic emulated over IB EoIB as inbound connections and can communicate with origin servers over the InfiniBand network using a protocol such as IPoIB or SDP as outbound connections. The traffic director s integrated HTTP caching and compression capability makes it particularly suitable for the variable egress and ingress bandwidth requirements of high performance computing environments such as Exalogic.

In accordance with an embodiment the traffic director includes one or more protocol terminator emulators for example one or more IPoIB and or SDP terminator emulators an inbound socket configuration and an outbound socket configuration . The origin servers can be provided as one or more pools of servers wherein each server pool includes one or more resource servers . Depending on the particular needs of the organization each pool of servers can be configured to use a communications protocol socket such as a traditional Inet socket or alternatively a high speed protocol such as IPoIB or SDP by which those origin servers within that pool will receive requests from the traffic director. In the example illustrated in the origin servers in server pool are configured to use SDP while the origin servers in server pool are configured to use Inet . In accordance with other embodiments and examples other types of protocol socket can be used.

When a request is received directed to a particular origin server the traffic director uses its configuration to determine an appropriate terminator emulator and communicate the request to the high speed InfiniBand network infrastructure for communication to the origin server over its configured protocol socket .

In accordance with an embodiment to configure inbound connections a http listener configuration can provided in a server.xml file parameters and examples of which are provided in Table 1 and Listing 1 respectively.

In accordance with an embodiment to configure outbound connections a http protocol configuration can provided in a server.xml file parameters and examples of which are provided in Table 1 and Listing 1 respectively. Under a reverse proxy element a list of server pools can be provided each of which is a definition of a pool of origin servers. Each server pool in turn can contain multiple origin server elements. A family element indicates the socket family used to connect to the origin server. In accordance with an embodiment possible values include e.g. a default Inet Inet 6 or inet SDP socket.

The present invention may be conveniently implemented using one or more conventional general purpose or specialized digital computer computing device machine or microprocessor including one or more processors memory and or computer readable storage media programmed according to the teachings of the present disclosure. Appropriate software coding can readily be prepared by skilled programmers based on the teachings of the present disclosure as will be apparent to those skilled in the software art.

In some embodiments the present invention includes a computer program product which is a non transitory storage medium or computer readable medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the present invention. The storage medium can include but is not limited to any type of disk including floppy disks optical discs DVD CD ROMs microdrive and magneto optical disks ROMs RAMs EPROMs EEPROMs DRAMs VRAMs flash memory devices magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data.

The foregoing description of the present invention has been provided for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Although some of the described embodiments describe features in the context of an Oracle Traffic Director environment the described features can also be used in the context of other computing environments. Many modifications and variations will be apparent to the practitioner skilled in the art. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application thereby enabling others skilled in the art to understand the invention for various embodiments and with various modifications that are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the following claims and their equivalence.

