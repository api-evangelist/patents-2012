---

title: System and method for automatic language translation for applications
abstract: System and method to translate displayed text of a computer application, the method including: intercepting a command to display text in a first language, the command comprising the text to display in the first language; extracting text to translate from the command; querying a translation mechanism by use of the extracted text; receiving translated text in a second language from the translation mechanism; and displaying the translated text in the second language.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08862456&OS=08862456&RS=08862456
owner: Avaya Inc.
number: 08862456
owner_city: Basking Ridge
owner_country: US
publication_date: 20120323
---
Embodiments of the present invention generally relate to internationalizing software applications and in particular to a system and method for providing on the fly translations of user interface text into a foreign language without access to source code.

Known systems and methods for internationalizing software applications include providing international versions of software and or pre defined sets of user interface messages in select foreign languages but these choices are generally limited in what is allowed. Additional effort and access to source code may be needed in order to internationalize less popular user applications leading to inefficiencies and increased costs. The customer s perception of applications with limited language support may negatively affect their satisfaction with the user application.

Connected shared and personalized information devices such as smart phones two way pagers personal organizers internet TVs tablet PCs etc. are becoming increasingly important to consumers. Many software applications i.e. apps for such information devices were not designed with internationalization in mind and as such will generate a user interface in only one language.

Internationalization techniques known in the art generally involve modifying computer source code of an application to support mapping of text data into other languages via language specific property files. For example an English text phrase may be identified by a unique identifier ID and this ID then becomes a lookup key into a language specific property file to find the corresponding phrase in the new language. This internationalization technique requires the following steps 

First accessing computer source code of an application which may not be readily available especially for third party components 

Second making changes to computer source code of an application to support mapping of text data into other languages via language specific property files or APIs and

Third requiring creation of property files to perform the mapping of text data into a specific language. A specific property file must be created for each language which means a fixed set of languages is supported and additional work must be performed to support additional languages.

On the fly language translation using a JavaScript API and an internet accessible translation server is available but such a solution requires an active internet connection while running the JavaScript API and it requires that a developer alter the computer source code of an application to be translated in order to pass each phrase or sentence requiring translation to the translation server.

For the reasons described above modifying computer source code of an application to support multiple languages is often a costly labor intensive and error prone activity. End users who own such an application are unable to localize the user interface into their preferred language. In the case of free applications for information devices the revenue is often too small to generate any interest for the developer to invest the time to support multiple languages.

However these information devices may be customizable by allowing users to download new services and applications from the Internet. Therefore a need exists for an application to run on information devices in order to provide a customizable user interface in the consumer s preferred language and ultimately improved customer satisfaction with their information device.

Embodiments of the present invention generally relate to internationalizing software applications and in particular to a system and method for providing on the fly translations of user interface text into a foreign language without access to source code by use of middleware that intercepts and translates textual messages in Java or similar languages.

In one embodiment a method to translate displayed text of a computer application includes intercepting a command to display text in a first language the command comprising the text to display in the first language extracting text to translate from the command querying a translation mechanism by use of the extracted text receiving translated text in a second language from the translation mechanism and displaying the translated text in the second language.

In one embodiment a system to translate displayed text of a computer application includes an interception module configured to intercept a command to display text in a first language the command comprising the text to display in the first language an extraction module configured to extract text to translate from the command an interface to a translation mechanism wherein the interface is configured to transmit extracted text to the translation mechanism and to receive translated text from the translation mechanism and an output module configured to display the translated text in the second language.

The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to. To facilitate understanding like reference numerals have been used where possible to designate like elements common to the figures. Optional portions of the figures may be illustrated using dashed or dotted lines unless the context of usage indicates otherwise.

In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of embodiments or other examples described herein. In some instances well known methods procedures components and circuits have not been described in detail so as to not obscure the following description. Further the examples disclosed are for exemplary purposes only and other examples may be employed in lieu of or in combination with the examples disclosed. It should also be noted the examples presented herein should not be construed as limiting of the scope of embodiments of the present invention as other equally effective examples are possible and likely.

As used herein the term module refers generally to a logical sequence or association of steps processes or components. For example a software module may comprise a set of associated routines or subroutines within a computer program. Alternatively a module may comprise a substantially self contained hardware device. A module may also comprise a logical set of processes irrespective of any software or hardware implementation.

As described herein embodiments in accordance with the present invention may provide automatic translation of substantially all user interface text for a user application running on a user s information device without modification to the original source code for the user application. Translating the user interface text of the user application may be performed outside the application by a translation process incorporated within a common Java virtual machine JVM layer or may be performed by a translation process incorporated within the operating system. The translation process may also include a separate application outside JVM or OS or may also include a cloud based translation service i.e. a translation webservice . Applications running on the system are unaware of these changes and need not be modified. This is in contrast to current methods where the application itself is modified resulting in costly labor intensive and error prone activities. Embodiments in accordance with the present invention do not incur time to market delays as a result of supporting additional languages because the application need not be modified.

Java originally developed by Sun Microsystems is an object oriented multithreaded portable platform independent secure programming environment used to develop test and maintain software programs. Java programs have found extensive use on the World Wide Web which is the Internet s multimedia information retrieval system. These programs include full featured interactive standalone applications as well as smaller programs known as applets that run in a Java enabled Web browser or applet viewer.

Java is an interpreted language. The source code of a Java program is compiled into an intermediate language called bytecode. The bytecode is then converted interpreted into machine code at runtime. Upon finding a Java applet the Web browser invokes a Java interpreter Java Virtual Machine or JVM which translates the bytecode into machine code and runs it. Thus Java programs are not dependent on any specific hardware and will run in any computer with the Java Virtual Machine software. On the server side Java programs can also be compiled into machine language for faster performance. However a compiled Java program loses hardware independence as a result.

Depending on the targeted computing platform Sun has grouped the Java technologies into three editions Java 2 Micro Edition J2ME Java 2 Standard Edition J2SE and Java 2 Enterprise Edition J2EE . Each of these editions has been customized specifically for the platform it is targeting e.g. a portable consumer information device a desktop computer or an enterprise network server.

In particular J2ME is better suited for portable consumer information devices compared to the other Java editions. J2ME includes technology APIs tools and standards needed to create applications for such information devices. J2ME may be used to create dynamically extensible networked products and applications for information devices.

For users information devices J2ME supports minimal configurations that can be extended with new APIs and virtual machines VMs as new features are added to these devices and new applications are developed for them by third parties.

Although embodiments of the present invention may be described based on the Java programming language other programming languages may be used such as .Net or other object oriented programming languages or a JVM from another vendor such as Google. Object oriented programming is a method of creating computer programs by combining certain fundamental building blocks and creating relationships among and between the building blocks. The building blocks in object oriented programming systems are called objects. An object is a programming unit that groups together a data structure instance variables and the operations methods that can use or affect that data. Thus an object consists of data and one or more operations or procedures that can be performed on that data. The joining of data and operations into a unitary building block is called encapsulation. 

Middleware is software that invisibly to the user takes two or more different applications and makes them work seamlessly together. To accomplish this middleware is placed between layers of software to make the layers below and on the sides work with each other. The Android environment provides a middleware layer including libraries and services to facilitate the development of performance sensitive or device specific functionality such as data storage screen display multimedia and web browsing.

Embodiments in accordance with the present invention provide a customizable user interface in the consumer s preferred language by customizing the user s information device to add a middleware layer or add additional functionality to an existing middleware layer that intercepts textual display related calls functions or events and translates the text into a user s preferred language for display. Such text may include menu lists dialog boxes prompts screen displays help files popups and so forth.

For information devices executing Java applications e.g. all information devices running Android applications embodiments in accordance with the present invention modify a Java Virtual Machine layer by intercepting calls to the display output methods translating text strings e.g. user interface text supplied in the calls into a second language then completing the calls to the display output methods using the second language.

For example in Java the SetText method of the java.awt.TextComponent class is one method which supplies a text string that could be used to perform this type of automatic translation. The SetText method sets the text as presented by the text component of this method to be the text so specified.

Embodiments in accordance with the present invention may be implemented as a translation application program app that resides in the JVM layer. The translation app may be built into the JVM layer or it may be added later to the JVM layer e.g. by way of an installation program. The translation app may be configured to translate from a selected original source language into one or more selected desired languages. The translation app may be configured to prompt the user for the original source language and the desired destination language. The middleware layer may be configured to save this choice for future translations.

The translation itself may be performed by a translation mechanism such as a cloud based translation service. One cloud based translation service is the Google Translation API which takes a text string e.g. a sentence or phrase in the original source language and an indication of the desired destination language and returns a result in the desired destination language. In some embodiments in accordance with the present invention the translation may be supplemented by a lookup table cache memory or the like for commonly translated words e.g. File Open etc. or for words that had recently been translated.

Many words are capable of alternate meanings depending upon context. In order to disambiguate these alternate meanings embodiments in accordance with the present invention may be configured to include a hints database in the translation app. The hints database may provide identification of preferred meanings definitions translations and the like for a word based upon the context of the word. The hints database may be local to the user s device or may be located remotely. The location would be specified via the configuration app. A remote hints database may be read only and may be used by a plurality of users. For example the vendor of the Angry Birds app may decide to provide a public hints database on their web site. Hints may be provided to the translation mechanism prior to receiving the translated text in order to assist the translation mechanism in selecting from among alternate translations. Alternatively the translation mechanism may be configured to return multiple alternate translations and the hints may be used within the JVM to select from among the alternate translations.

A translation process in accordance with an embodiment of the present invention may be able to support application specific extensions or logic which apps can be configured to use. For example for an app about insects the developer may create and register a property file or something to disambiguate instances of the word fly to refer to the insect and not the act of flying through air. Because this property file and or language module would be independent of the binary or source code this application specific capability would allow application specific or context specific translations without a need to recompile or having access to the original source code.

In order to disambiguate alternate meanings of words embodiments in accordance with the present invention may also provide a preview mode that is configured to present the user with a text string and allows the user to accept the default translation or to select an alternate translation of the text string.

A translation process in accordance with an embodiment of the invention may be applied to an entire phrase sentence an entire row or complete label of the user application on the screen or similar multi word textual sample. The translation process may also be applied to individual words. Examples of Java textual display related calls functions or events that may be used include a Java setText command a Java API method called java.awt.Button.setLabel a Java API method called java.awt.Dialog.setTitle a Java SetText method of the java.awt.TextComponent and so forth. For example Java API method setLabel must receive an entire label associated with a button as any successive calls to this method would overwrite the previous label. Similarly setTitle does not support appending text and the method must be called with a complete title of the window or dialog box.

Language translation between substantially any pair of source and target languages may be accommodated by an appropriate translation table or must be supported by the black box cloud translation service. Language translation between languages of disparate character sets e.g. English to Greek Russian Chinese Hebrew Arabic etc. can be accommodated by use of an appropriate font e.g. a Unicode font that includes characters from the target language.

Real time translation in accordance with an embodiment of the present invention may slightly alter the look and feel of the user interface at least because the length of the translated text is different than the length of the untranslated text. However most Java applications take advantage of the layout manager which best fits the supplied text to the available space. In most cases any shorter or longer strings should be well accommodated by adjusting the display e.g. the spacing and or placement of the translated text. Embodiments in accordance with the present invention will be able to provide an acceptable translation layout for a vast number of Android or Java based apps. Even if the target language is customarily written in a different direction such as right to left e.g. Hebrew Arabic or up and down e.g. Chinese the translated string will be accurate. The layout and presentation may not be ideal for some target languages but will improve if the end user optimizes the operating system locale settings for the target language e.g. changes the default font to be Unicode etc.

At least a portion of the text substitution may also be accomplished by a hybrid process. For example if derivative words such as words in plural form or words in past tense need to be translated the hybrid process may use a first process to translate a root form of the word and then a second process may change the translated root form of the word into the plural or the past tense form and so forth as required. The second process may involve relatively simple rules e.g. in English adding s or es to form plural forms or may involve a second process for modifying the root form of the translated word.

Not every word or phrase from the source language will need translation. For example numbers acronyms proper names etc. are exceptions that do not need translation. These exceptions may be referred to herein as invariant words. Such invariant words may be handled in at least two ways. First the word or phrase may be passed to a translation process as usual. The translation process may recognize the invariant word which will then be returned as an untranslated exception i.e. the invariant word. Second the JVM may recognize the invariant word in advance as being an invariant word so that no query is made to the translation process using the invariant word.

If the text string has both an invariant word portion and a non invariant word portion the app may parse the text string to separate out the invariant words that do not need translation then perform the translation process for the remaining words or phrases to translate. The app will take care of reinserting the invariant words into the proper location in the translated phrases.

In some situations a proper name that should not be translated includes regular words that would otherwise be translated. For example an address in a dialog box might be 123 Yellow Brick Road which should not be translated. Embodiments in accordance with the present invention may provide in the hints mechanism this type of customization. For example the hints database may can designate that a text string is a verb or noun or whether it should not be translated. Field specific hints may be provided for specific text labels or specific text values that are associated with the label such as field specific hints tailored for address.

For non Java based applications running on a message event based operating system such as Microsoft Windows embodiments in accordance with the present invention use the same method at an operating system level. For example all windows based apps are event driven and they do not make explicit function calls in order to obtain an input. Instead such apps wait for the system to pass an input to them via a message. A translation process in accordance with an embodiment of the invention may intercept these messages and perform the translation. The result of such an interception is an automatic translation of user interface text without modification to the original source code.

Mobile information device may communicate via Ethernet connection and or RF connection to a wide area network WAN such as the Internet which in turn connects with one or more external networking sites not shown in .

Middleware is software designed to help manage the complexity and heterogeneity inherent in distributed systems. Middleware is situated at a layer of software above the operating system but below the application program that provides a common programming abstraction. Middleware provides a higher level building block for programmers than Application Programming Interfaces APIs such as sockets that are provided by the operating system. This significantly reduces the burden on application programmers by relieving them of this kind of tedious and error prone programming. Middleware is sometimes informally called plumbing because it connects parts of a distributed application with data pipes and then passes data between them.

At step the middleware layer determines whether the text from step needs to be displayed. If the text from step does need to be displayed it is displayed in its original source language at step . If the result of step is that the text from step does not need to be displayed then control passes to step at which the mobile information device is able to perform other functions.

At step the application program makes calls to Java methods or other software system as described herein in order to display the text.

At step middleware in accordance with an embodiment of the invention intercepts the calls to Java methods referenced at step and extracts the text. As described herein some of the text may not need to be translated so there may be a further extraction of just the text needing translation.

At step middleware in accordance with an embodiment of the invention produces translated text. The process may involve a lookup table to translate from a first language to a second language or may involve usage of cloud based translation services. Optionally a hybrid approach using both the lookup table and the cloud based translation services may be used.

At step the translated text in the second language is displayed by use of java methods or other software system as described herein in order to display the text.

Method begins at step at which a user application program provides some text in an original source language. The user application program supplies the text in the original source language to a middleware layer of software running in the mobile information device. The middleware layer may be a java virtual machine a common language runtime module a kernel layer or the like.

At step the middleware layer determines whether the text from step in the original source language needs to be displayed. If the text from step does not need to be displayed then control passes to step at which the mobile information device is able to perform other functions. If the result of step is that the text from step in the original source language does need to be displayed control passes to automatic language translator .

Text supplied by step to the automatic language translator is processed at step to determine whether or not the text has to be translated to a desired language that is different than the original source language. If the result of step is negative i.e. the original source language is the same as the desired language then control passes to step at which the text is displayed in the desired language.

However if the result of step is positive i.e. the original source language is different than the desired language then control passes to step at which the text is converted to the desired language so long as the desired language is a supported language . Control then passes to step at which the text is displayed in the desired language. At the conclusion of step control passes to step at which the mobile information device is able to perform other functions.

Method begins at step at which a user application program provides some text in an original source language. The user application program supplies the text in the original source language to a middleware layer of software running in the mobile information device. The middleware layer may be a java virtual machine a common language runtime module a kernel layer or the like.

At step the middleware layer determines whether the text from step in the original source language needs to be displayed. If the text from step does not need to be displayed then control passes to step at which the mobile information device is able to perform other functions. If the result of step is that the text from step in the original source language does need to be displayed control passes to automatic language translator .

Text supplied by step to the automatic language translator is processed at step to determine whether or not the text has to be translated to a desired language that is different than the original source language. If the result of step is negative i.e. the original source language is the same as the desired language then control passes to step at which the text is displayed in the desired language.

However if the result of step is positive i.e. the original source language is different than the desired language then control passes to step to determine whether any hints are available for converting the text. If there are no hints available the result of step is negative and then control passes to step at which the text is converted from its original language into the desired language so long as the desired language is a supported language without the usage of hints. Control then passes to step at which the text is displayed in the desired language.

However if the result of step is positive i.e. hints are available then control passes to step at which the text is converted from its original language into the desired language with the usage of hints. During the conversion step communicates with a hints database in order to obtain hints and better disambiguate terms to translate. The hints database may be configured updated changed etc. as necessary through interface . For example interface may be used to customize or reconfigure hints database based upon an identity or subject matter of the user application referenced in step .

When step has finished converting the text from its original language into the desired language control passes to step in order to display the translated text. At the conclusion of step control passes to step at which the mobile information device is able to perform other functions.

Method begins at step with the receipt of text in a first language. At optional step invariant text may be removed from the received text. The invariant text may be for example acronyms and proper names. Whether or not to remove invariant text and the type of invariant text which is searched for and removed may depend at least in part on what the received text represents e.g. a name an address etc. .

Next at step method may query a translation mechanism to provide a translation service into a second language. The translation mechanism may be for example a cloud computing service accessible via Ethernet connection or RF connection that are depicted in .

In another embodiment in accordance with the present invention the translation mechanism may be implemented at least in part by a lookup table. Such a lookup table may be useful when Internet access is not available or as a cache memory for commonly used or recently used text strings such as Yes No Accept and so forth. Such a lookup table may reduce or eliminate latency associated with cloud computing. A hybrid approach may be used wherein the lookup table is queried first and if no match is found then a cloud based translation mechanism may be utilized.

Next at optional step the translated text in the second language may be disambiguated in order to pick the best or mostly likely intended translation from among more than one possible translation for the context in which text was used or what the text represents. In some alternate embodiments disambiguation may be performed prior to step i.e. a pre query disambiguation if for example a word or phrase in the first language may have several meanings each with a different translation into the second language.

A lookup table may also be useful during step such that alternate translations in the second language may be temporarily stored until the disambiguation step is able to determine the best translation from the context of usage.

Next at step any invariant text which had been removed at step may be restored into the text in the second language.

At step the text in the second language is transmitted to other modules and processes within mobile information device for display to the user.

Embodiments of the present invention include a system having one or more processing units coupled to one or more memories. The one or more memories may be configured to store software and associated data which when executed by the one or more processing unit allows a user of an information device to translate user interface text of an application program from a first language into a second language without modifying the application program and without requiring access to the source code of the application program at least by use of processes described above in the Figures and related text.

The disclosed methods may be readily implemented in software such as by using object or object oriented software development environments that provide portable source code that can be used on a variety of computer or workstation platforms. Alternatively the disclosed system may be implemented partially or fully in hardware such as by using standard logic circuits or VLSI design. Whether software or hardware may be used to implement the systems in accordance with various embodiments of the present invention may be dependent on various considerations such as the speed or efficiency requirements of the system the particular function and the particular software or hardware systems being utilized.

While the foregoing is directed to embodiments of the present invention other and further embodiments of the present invention may be devised without departing from the basic scope thereof. It is understood that various embodiments described herein may be utilized in combination with any other embodiment described without departing from the scope contained herein. Further the foregoing description is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention.

No element act or instruction used in the description of the present application should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the terms any of followed by a listing of a plurality of items and or a plurality of categories of items as used herein are intended to include any of any combination of any multiple of and or any combination of multiples of the items and or the categories of items individually or in conjunction with other items and or other categories of items.

Moreover the claims should not be read as limited to the described order or elements unless stated to that effect. In addition use of the term means in any claim is intended to invoke 35 U.S.C. 112 6 and any claim without the word means is not so intended.

