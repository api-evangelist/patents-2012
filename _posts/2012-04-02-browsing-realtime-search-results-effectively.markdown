---

title: Browsing real-time search results effectively
abstract: A method for visiting a results page of a time-varying result set of a search query. The method includes displaying to a user a list of results belonging to the visited page, each result comprising a hyperlink to a document, a result being de-emphasized if the URL used in its hyperlink is present in a set of URLs of results that are deemed to have been seen by the user. When the user clicks or taps a page menu button to navigate to a different page, the method further includes adding to that set the URLs of the results of the visited page. Page menu buttons are highlighted if they pertain to pages containing results deemed to have been seen by the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08452749&OS=08452749&RS=08452749
owner: Pomian & Corella, LLC
number: 08452749
owner_city: San Jose
owner_country: US
publication_date: 20120402
---
The subject matter of this application is related to the subject matter of U.S. Provisional Patent Application No. 61 470 971 filed on Apr. 1 2011 priority to which is claimed under 35 U.S.C. 119 e and which is incorporated herein by reference.

This invention was made with Government support under the SBIR Phase I grant number 1013594 awarded by the National Science Foundation. The Government has certain rights in this invention.

Whereas traditional search engines provided results from sources such as static Web pages that changed infrequently modern search engines use sources such as tweets blog posts comments or online news stories that change frequently and try to deliver results from those sources soon after they appear on the Web. Such results are often called real time results.

Browsing real time results means browsing a result set that changes as it is being browsed. Prior to the present invention allowing the user to browse real time results effectively has been an open problem.

Some search engines that specialize in real time results show results ordered by recency most recent first in a fast scrolling display. This is not useful as an information retrieval tool because relevant results are swamped by social chatter. Twitter Search supplements such a fast scrolling display with a set of three results deemed to have high relevance which change infrequently. This is only marginally more useful as an information retrieval tool due to the fact that only three high relevance results are shown.

The search engine Topsy ranks results by a weighted combination of recency and relevance and groups results in pages like traditional search engines do with a page menu displayed at the bottom of each page for result set navigation. Ranking results by a weighted combination of recency and relevance is useful but it is difficult for a user to keep track of what results he or she has seen. For example a user may miss a result that moves from page 2 to page 1 due to an increase in relevance that outweighs a decrease in recency as the user advances from page 1 to page 2 while browsing the result set.

Meredith Morris of Microsoft has proposed highlighting results that are new when the user re executes a query identifying new results by comparing the search results of the re executed query to the previous query US Patent Application 2009 0006358 Paragraph 0058 . Such a comparison is practically impossible for most queries issued against the World Wide Web whose result sets have millions of elements. Furthermore the proposal does not address the pagination issue i.e. the problem of keeping track of what results have been seen when results are grouped into pages and the user navigates from one page to another. Furthermore the proposal would not solve the problem even if it were combined with result set pagination as it would still be possible to miss a result that moves from page 2 to page 1 as the user advances from page 1 to page 2. It is to be noted that for example the ranking of an important tweet based on a weighted combination of recency and relevance may go up for a few hours as it is retweeted retweets being a signal used to compute relevance before going down later as the tweet becomes old and is no longer retweeted.

In one embodiment a method is provided for visiting a results page of a time varying result set of a search query. The method includes displaying to a user a list of results belonging to the visited page each result comprising a hyperlink to a document a result being de emphasized if the URL used in its hyperlink is present in a set of URLs of results that are deemed to have been seen by the user. When the user clicks or taps a page menu button to navigate to a different page the method further includes adding to that set the URLs of the results of the visited page. Page menu buttons are highlighted if they point to pages containing results deemed to have been seen by the user.

This Detailed Description refers to the accompanying drawings which are a part hereof and illustrate examples of embodiments of the invention. It is to be understood that other embodiments are possible and that the features of different exemplary embodiments can be combined together unless otherwise stated.

 The verb to reside is to be understood as synonymous with to be contained in . Containment is to be broadly construed as being transitive e.g. if some data is contained in some storage and that storage is contained in some computer and that computer is contained in some computer farm the data shall be said to reside or be contained in the computer farm. 

 The word web when not capitalized is to be understood as a reference to the Hypertext Transfer Protocol HTTP that is used in the World Wide Web rather than to the World Wide Web itself. The term web client computer refers to a computer capable of sending HTTP requests and receiving HTTP responses. The term web server computer refers to a computer capable of receiving HTTP requests and sending HTTP responses. The term web page shall refer to a file written in a version of Hyptertext Markup Language HTML such as HTML5 which may include JavaScript code and may incorporate by reference other files such as HTML files media files JavaScript files .XAP files pertaining to the Microsoft Silverlight application framework and .SWF files pertaining to the Adobe Flash and Adobe Flex application frameworks it will also be used to refer to a visual rendering of such a file on a display which meaning is intended being clear from the context. The term web application programming interface web API shall refer to an interface exposed by a web server computer that lets a web client computer send HTTP requests to the web server computer and obtain HTTP responses containing web pages or data encoded in a language suitable for data structure transmission such as XML or JSON. 

The connection between user interface subsystem and search application illustrated by a line in is realized in via web client computer and network . Search application uses such connection to communicate with user via user interface subsystem displaying results and other items as output and receiving as input notice of user interface actions performed by user . To display results and other items on user interface subsystem search application creates a web page containing the results and other items and downloads web page to web browser program which displays it on user interface subsystem . A user interface action performed by user using user interface subsystem is detected by web browser and communicated by web browser to search application by sending a HTTP request. In one embodiment detection of complex user interface actions such as holding down a key on a keyboard while clicking on a button is enabled by JavaScript code embedded i.e. included or incorporated by reference in web page .

In one embodiment search index is stored in a distributed storage such as a distributed file system or a distributed database system contained in the search backend server farm. The word storage is to be understood as referring to a computer readable storage medium. The phrase storage system is to be understood as referring to a single computer readable storage medium or a distributed system comprising several computer readable storage media contained in one or more computers. 

In one embodiment web server farm comprises several web servers and a load balancer that distributes requests addressed to the web server farm among the web servers in the farm a copy of search application being stored in each of the web servers computers.

User communicates with search application via user interface subsystem which is connected directly to web client computer .

Web client computer is equipped with a web browser program which while running is stored in a volatile storage a volatile storage being a computer readable storage medium whose contents are lost when power is turned off. Search application is implemented in JavaScript and embedded i.e. included or incorporated by reference in a web page that has been downloaded into web browser program running on web client computer . Browsing data consists of JavaScript data structures accessible to JavaScript code pertaining to web page but implemented in a persistent i.e. non volatile storage allocated by web browser program in a file system of web client computer according to the localStorage feature of HTML5. Hereinafter a HTML5 local storage . 

The fact that browsing data resides in persistent storage makes it possible for user to resume browsing a time varying result set after leaving web page after exiting web browser program and even after turning off web client computer without search application forgetting what results are deemed to have been seen. To resume browsing after turning off the computer user turns the computer back on restarts web browser and visits again web page . This causes search application to be downloaded anew as part of the web page. Search application restarts and finds browsing data in persistent storage whose contents have been preserved while web client computer was turned off.

Web browser program runs on web client computer . While running web browser program is stored in volatile storage but Adobe Flash browser plugin allocates a persistent storage called a Flash local SharedObject hereinafter a Flash local shared object in the file system of web client computer . Search application uses persistent storage to store browsing data . Advantages of using persistent storage to store browsing data have been described above in connection with .

Search application web client computer server farm network search index and user interface subsystem are otherwise as described in connection with .

Web browser program runs on web client computer . While running web browser program is stored in volatile storage but Microsoft Silverlight browser plugin allocates a persistent storage called a Silverlight Isolated Store hereinafter a Silverlight isolated store in a file system of web client computer . Search application cannot readily store and manipulate browsing data in persistent storage because persistent storage exposes a file system style interface rather than an object style interface. Instead search application stores browsing data as C data structures within its own working memory which resides in volatile storage but saves it by copying it to persistent storage as saved browsing data before search application exits and restores by copying it back to volatile storage when search application is restarted. Search application is programmed to listen to an Application.Exit event and save browsing data to persistent storage before web browser program leaves web page or exits altogether. Thus user is able to resume browsing a time varying result set after exiting web browser program and even after turning off web client computer without search application forgetting what results are deemed to have been seen.

Search application web client computer server farm network search index and user interface subsystem are otherwise as described in connection with .

Search application web server computer server farm network search index and user interface subsystem are otherwise as described in connection with .

User communicates with search application via user interface subsystem which is a touch screen display. The connection between mobile computing device and mobile computing device and touch screen display which is illustrated by a line in is implemented by touch screen display being embedded in mobile computing device .

Search index resides in a server farm connected to mobile computing device through a network such as the Internet or an intranet. Search application accesses search index over network via a web API exposed by server farm .

Search application mobile computing device server farm network search index and user interface subsystem are otherwise as described in connection with .

Referring back to in one embodiment index refers to a collection of documents such as web pages PDF files blog posts comments news items videos images tweets etc. The documents in the collection are found by means such as crawling the web collecting blog posts and comments from syndication feeds using protocols such as RSS and Atom collecting tweets from a streaming API provided by Twitter and reading databases of media files social updates and other content. Index contains entries each entry associating a keyword or keyphrase with a list of references to documents all lists being ordered according to a common ranking of all the documents in the collection. Given a query software with access to index can enumerate the documents of the collection that match the query in the order determined by the ranking producing a list of results each result being a record that that describes a document. The complete list of results for a query is called the result set of the query. When the collection of documents is large it may be impossible to enumerate a complete result set of a query but it is nevertheless possible to enumerate an initial portion of it.

In one embodiment illustrated by search application accesses search index directly enumerates initial portions of result sets which may be full result sets and obtains ranges of results by extracting them from such initial portions of result sets. In an alternative embodiment illustrated by software running in search backend server farm is entrusted with accessing search index enumerating initial portions of result sets and extracting ranges of results from those initial portions search application obtaining ranges of results by requesting them from said software over network . In alternative embodiments illustrated by and software running in server farm is entrusted with accessing index enumerating initial portions of result sets and extracting ranges of results from those initial portions search application obtaining ranges of results by requesting them from said software over network via the web API exposed by server farm .

URL data item plays two roles. It is a reference to the document the blog post in the example described by result . It is also an identifier of result used by search application to remember whether result is deemed to have been seen.

 Hereinafter the term result set shall be used to refer both to a result set record such as the record illustrated in and the rendering of such a record on a display as illustrated in as long the intended meaning is clear from the context. 

In one embodiment search application lets user browse a result set of a query by navigating between results pages i.e. by visiting results pages in sequence. A results page it not to be confused with a web page . A results page is displayed within a web page but the web page contains other elements besides the results page. Hereinafter the word page when unqualified shall refer to a results page . 

A results page is a collection of visual elements comprising a list of consecutive results belonging to the page a user interface element such as a checkbox allowing user to freeze the result set and indicating whether the result set is frozen and a result set navigation tool. Each results page has a page number. A result belongs to the page if it occupies a position in the result set that belongs to the page being less than or equal to the product of a page size and the page number and greater than said product minus the page size setting e.g. if the page size is 10 results numbered 1 through 10 belong to page 1 results numbered 11 through 20 belong to page 2 etc. . The page size setting can be changed by the user. The visual elements that comprise a results page are displayed in an area of a web page the web page comprising other elements such as an input box showing the query and a column of controls for refining the query. In one embodiment the web page comprises a menu for changing the page size. In an alternative embodiment the menu for changing the page size is included in a separate settings page.

Results page comprises a top section containing a list of consecutive results including a result that occupies position in the result set a result that occupies position in the result set the result being de emphasized by rendering it with a dark background indicating that in the example it is deemed to have been seen the result shown above in which occupies position of the result set in the example a partially shown result that occupies position in the result set and results occupying positions through in the result set which user can make visible using a scroll bar . Scroll bar controls the scrolling of top section which is a visual container where results are rendered such as in HTML iFrame or a Flex VBox. In an alternative embodiment no visual container is used for rendering results and the entire web page has to be scrolled to see all the results. 

Results page also comprises a middle section containing a checkbox for freezing the result set and indicating whether the result set is frozen. When the result set is frozen search application does not obtain results from search index it uses instead results that it has stored within browsing data . This allows the user to browse a snapshot of the result set without being distracted by result set changes.

Results page also comprises a bottom section containing a page menu that user can use as a navigation tool to terminate the visit to the currently visited page the current page and visit another page or as a special case to terminate the visit to the current page and visit again the same page thus refreshing the current page . The page menu in section has two rows of buttons a top row comprising a button labeled for visiting the next page page number 7 in the example and a bottom row containing another button for refreshing the current page surrounded by buttons for visiting neighboring pages.

In one embodiment user can use a page menu button to navigate to a page in two different ways an ordinary way and an exceptional way. The ordinary way implies an acknowledgement that user has visited the current page causing the results in the current page to be deemed as having been seen. The exceptional way allows the user to navigate without acknowledging the visit to the current page so that results in the current page will not be deemed to have been seen. Two different user interface actions on a page menu button are used for the two ways of navigating a navigation with visit acknowledgement user interface action for the ordinary way and a navigation without visit acknowledgement user interface action for the exceptional way.

In one embodiment where user interface subsystem comprises a keyboard a pointing device and a display as illustrated in the navigation without visit acknowledgement user interface action is a shift click consisting of clicking the page menu button while holding down a shift key on the keyboard while the navigation with visit acknowledgement user interface action is an unmodified click consisting of clicking the button without holding down any modifier key on the keyboard.

In one embodiment where user interface subsystem comprises a touch screen display as illustrated in the navigation without visit acknowledgement user interface action is a tap gesture consists of tapping the button with a finger or stylus while the navigation with visit acknowledgement user interface action is a press and hold gesture consisting of touching the button with a finger or stylus for a period of time longer than a threshold.

A page menu button can be in one of three states highlighted de emphasized or disabled the states distinguished by different colors or shades of grey. In the illustration of highlighted buttons are rendered in black de emphasized buttons in dark grey and disabled colors in light grey. A button is disabled if none of the results in the corresponding results page is currently reachable because the result set is frozen or because it is not possible to retrieve results from search index at positions higher than a certain maximum height e.g. 1000 otherwise the button is de emphasized if every reachable result in the corresponding results page is deemed to have been seen otherwise the button is highlighted.

In the example of the buttons labeled by page numbers 7 8 9 and 10 are disabled because the result set is frozen as indicated by the checkmark in checkbox and pages numbered 7 8 9 and 10 of the result set have not been visited before in the example. The two buttons labeled by page number 6 one in each row are highlighted because page number 6 contains results that are not deemed to have been seen including at least according to result that occupies position in the result set result that occupies position in the result set and result that occupies position in the result set. It is assumed in the example that pages numbered 1 through 5 have been visited before. The buttons labeled with page numbers 1 3 4 and 5 are de emphasized but the button labeled with page number 2 is highlighted because it is assumed in the example that it contains at least one result that was present in a higher numbered page such as e.g. page number 8 when page number 2 was visited. The button labeled Next is disabled because it points to page 7 and the button 

a set of identifiers of deemed to have been seen results seen identifiers for short identifiers being URLs in one embodiment illustrated earlier in 

a watermark which is used to remember the highest position reached in the result set through navigation 

a list of retained results comprising the results that were last obtained by search application from search index the search application obtaining results from the list of retained results rather than from search index when the result set is frozen 

a current cardinality which is an estimate of the number of results in the result set at the time when search application last obtained results from search index 

The following sequence of events provide an example of how search application uses some of the data items of browsing data according to one embodiment.

Event 1 user issues a query with keywords paella squid escargots in the example and automatically visits page 1 of the result set of the query. The set of seen identifiers data item is set to the empty set. The current page number data item is set to 1. The watermark data item is set to 5. Results 1 through 5 of query are obtained from search index together with an estimate of the result set cardinality e.g. 123000. The list of retained results data item is set to the list of results 1 through 5. The current cardinality data item is set to 123000. The result set is frozen data item is set to false .

Event 2 user navigates to page 2 with acknowledgement of the visit to page 1. The five identifiers of the results in page 1 are added to the set of seen identifiers data item which now has 5 elements. The current page number data item is set to 2. The watermark data item is set to 10. Results 1 through 10 not just 6 through 10 of query are obtained from search index together with an estimate of the cardinality of the result set. The result set has changed since event 1 one result that belonged to page 2 has moved to page 1 and one result that belonged to page 1 has moved to page 2 there is also a new cardinality estimate 124000. The list of retained results data item is set to the list of newly obtained results 1 through 10. Page 2 is displayed showing the results 6 through 10 newly added to the list of retained results data item . The identifier of the result that has moved from page 1 to page 2 is found in the set of seen identifiers data item causing the result to be de emphasized in page 2 the other four results being highlighted. The identifier of the result that has moved from page 2 to page is not found in the set of seen identifiers data item causing the buttons that point to page 1 the button labeled 1 and the button labeled 

Event 3 seeing that the buttons that point to page 1 are highlighted user navigates back to page 1 with acknowledgement of the visit to page 2. The identifiers of the four highlighted results of page 2 are added to the set of seen identifiers data item . The identifier of the de emphasized result is already in the set . The current page number data item is set to 1. The watermark data item is not changed. Results 1 through 10 not just 1 through 4 are obtained from search index . This time the result set has not changed so the list of retained results data item and the current cardinality data item do not change. Page 1 is displayed showing results 1 through 5 from the list of retained results data item the identifier of the result that moved earlier from page 2 to page 1 is not found in the set of seen identifiers data item causing the result to be highlighted the other four results of page 1 are de emphasized.

After event 3 search application data is as illustrated in the set of seen identifiers data item has 9 identifiers as depicted the current page number data item is set to 1 the watermark data item is set to 10 the list of retained results data item has 10 elements depicted in as records having 3 data items each stacked vertically in the illustration the current cardinality data item is set to 124000 the result set is frozen data item is set to true and the current page size is 5.

At search application visits the page specified by the current page number data item using process illustrated in .

At search application checks if the action is an unmodified click. If so search application proceeds to otherwise it proceeds to .

At search application checks if the action is a shift click. If so it proceeds to otherwise process terminates as indicated at .

At search application finds the results in the list of retained results data item that belong to the current page as determined by the position of each result in the list of retained results and the current page number data item extracts their identifiers and adds to the set in the set of seen identifiers data item those not already in the set. Then it proceeds to .

At search application sets the current page number data item to the number of the target page. Then it proceeds to .

At search application visits the page specified by the current page number data item using process illustrated in .

At search application checks if the action is a tap gesture. If so search application proceeds to otherwise it proceeds to .

At search application checks if the action is a press and hold gesture. If so it proceeds to otherwise process terminates as indicated at .

At search application finds the results in the list of retained results data item that belong to the current page as determined by the position of each result in the list of retained results and the current page number data item extracts their identifiers and adds to the set in the set of seen identifiers data item those not already in the set. Then it proceeds to .

At search application sets the current page number data item to the number of the target page. Then it proceeds to .

At search application visits the page specified by the current page number data item using process illustrated in .

At search application checks if the result set is frozen data item is true . If so it proceeds to otherwise it proceeds to .

At search application checks if the last result position in the target page i.e. the product of the target page number and the current page number data item if greater than the watermark data item . If so it proceeds to otherwise it proceeds to .

At search application increases the watermark setting watermark data item to the last result position in the target page. Then it proceeds to .

At search application obtains an estimate of the cardinality of the result set of the query found at query data item from search index as well as results ranging from position to an end position the end position being equal to the watermark data item unless the actual cardinality of the result set is less that the watermark in which case the end position if equal to the cardinality. If the end position is less than the watermark search application sets the current cardinality data item to the end position. Otherwise search application sets the current cardinality data item to the estimate obtain from search index . Then search application proceeds to .

At search application checks whether the cardinality is 0. If so it proceeds to otherwise it proceeds to .

At search application checks whether the end position is less than the watermark data item . If so it proceeds to otherwise it proceeds to .

At search application decreases the watermark setting watermark data item to the end position which is equal to the cardinality of the result set. Then it proceeds to .

At search application sets the list of retained results data item to the range of results obtained at . Then it proceeds to .

Specifically in the target results page displayed at top section displays the results of the list of retained results data item at positions belonging to the page a result is de emphasized if its identifier is present in the set of seen identifiers data items . Middle section comprises a checkbox the checkbox having a checkmark if the value of the result set is frozen data item is false . Bottom section comprises a page menu with a row of buttons for visiting the previous page refreshing the current page which is the target results page and visiting the next page and a row of buttons for visiting neighboring pages.

In one embodiment in the target results page displayed at the row of buttons consists of up to 9 page menu buttons depending on the current number of pages in the result set which is computed by dividing the current cardinality data item by the current page size data item the row comprises buttons for all pages if there are up to 9 pages in the result set otherwise it comprises buttons for the first 9 pages if the current page is among them or buttons for the last 9 pages if the current page is among them or buttons for 9 pages centered around the current page otherwise.

In one embodiment in the target results page displayed at the state of a page menu button for visiting a subsequent page is determined as follows. In one embodiment the Web API exposed by server farm does not allow the retrieval of results from search index at positions higher than a certain maximum height e.g. 1000 within the result set. A position within the result set is said to be unreachable if it is greater than such maximum height or greater than the watermark data item while the result set is frozen data item is true . If the position of the first result in the subsequent page determined as the product of the page number of the subsequent page and the current page size data item minus the current page size data item plus 1 is unreachable the button is disabled. Otherwise if every result in the list of retained results data item at a reachable position belonging to the subsequent page has an identifier that can be found in the set of seen identifiers data items the button is de emphasized. Otherwise the button is highlighted.

At search application refreshes the current page i.e. visits it again using process illustrated in . Then it terminates.

At search application refreshes the current page i.e. visits it again using process illustrated in . Then it terminates.

At search application obtains the old page size from current page size data item and the current page number from current page number data item and calculates a new current page number using the formula P P 1 S S 1 where P and P are the current page numbers before and after the page size change P being specified by the user using the user interface control S and S are the old and new page sizes and denotes integer division. Then it proceeds to .

At search application sets the current page size data item to the new page size specified by the user. Then it proceeds to .

At search application sets the current page number data item to the new current page number calculated at step . Then in proceeds to .

At search application visits the new current page specified by the current page number data item using process illustrated in .

Although specific embodiments have been illustrated and described herein it will be appreciated by those of ordinary skill in the art that a variety of alternate and or equivalent implementations may be substituted for the specific embodiments shown and described without departing from the scope of the present invention. This application is intended to cover any adaptations or variations of the specific embodiments discussed herein.

