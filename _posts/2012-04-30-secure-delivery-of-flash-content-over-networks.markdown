---

title: Secure delivery of flash content over networks
abstract: A method for securing delivery of flash content over a network includes rewriting flash content action code capable of making a network request for flash content to redirect network communication associated with the flash content to a network device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08484364&OS=08484364&RS=08484364
owner: Juniper Networks, Inc.
number: 08484364
owner_city: Sunnyvale
owner_country: US
publication_date: 20120430
---
This application is a continuation of U.S. patent application Ser. No. 11 383 843 filed May 17 2006. The entire disclosure of this application is incorporated herein by reference.

Implementations consistent with principles of the invention relate generally to communication systems and more particularly to secure delivery of flash content over networks.

The term flash as used herein may refer to a Macromedia flash player a multimedia authoring program used to create content for the flash player and or media assets e.g. images games graphics video etc. created using the multimedia authoring program. Flash as a format has become very widespread on the desktop market and may be one of the most popular plug ins for web browsers. Vector graphics e.g. PostScript SVG PDF etc. may permit flash files to translate to small file sizes which may take less bandwidth to transmit than bitmaps and or video clips.

Flash players may exist for a wide variety of different systems and devices. For example flash content may run on Microsoft Windows MacOs Linux and various other Unix systems. Flash players may operate within for example the GNU Linux x86 Mac OS 9 X Solaris HP UX Pocket PC OS 2 Symbian Palm OS BeOs and IRIX operating systems as well as other operating systems.

A flash program e.g. a file having a .swf file extension may include content e.g. media assets and sequences of executable code to manipulate the content and handle user interactivity. In a typical web environment a flash program may be delivered by a web server to a client browser which may invoke a flash player to execute the flash program. The executable code which may be referred to as action code may be based on a set of binary instructions defined on a virtual machine built into the flash player. A binary action code sequence may result from compiling the flash multimedia authoring programming language which may be referred to as ActionScript. However it may be possible to generate the binary action code sequence by other mechanisms. The virtual machine may provide facilities for invoking network communications via action code sequences.

Flash authors may not wish to expose their images and or action code to the world. However once a flash program is saved locally it may be decompiled into its source code and media assets. Some decompilers may be capable of nearly full reconstruction of the original source file down to the action code that was used during creation.

Organizations may utilize flash programs for a variety of purposes. For example more and more organizations are adopting flash content in developing corporate web media assets and applications. However these same organizations are continuously looking to prevent information leakage from their internal networks and endpoints e.g. devices connected to the networks . In today s world of mobile employees and extranet partners both of which may need to connect to an internal network this is becoming increasingly important. For example information leakage may occur with confidential flash content sent to a mobile employee because the employee may receive unprotected flash content via an external or public network e.g. the Internet .

An existing solution to this problem for flash content may be to provide client side traffic tunneling software. Unfortunately traffic tunneling may require that a piece of software e.g. ActiveX component Java applet etc. be downloaded and executed on a client device e.g. a laptop of a mobile employee . Thus traffic tunneling is not a clientless solution and may require providing administrative privileges on the client device. This may expose the organization s internal network e.g. the internal network server containing the flash content to information leakage because the client device may directly connect to the internal network server and the confidential flash content may not be securely accessible from outside the organization.

According to one aspect a computer readable medium may store computer executable code for securing delivery of flash content over a network. The code may include instructions to disassemble and separate the flash content into sections wherein at least one of the sections includes action code instructions to locate a portion of the action code capable of making a network request for the flash content and instructions to rewrite the portion of the action code capable of making the network request to redirect network communication associated with the flash content to a secure network device.

According to another aspect a device for securing delivery of flash content over a network may include a memory and a processor connected to the memory. The processor may locate a portion of action code of the flash content capable of making a network request for the flash content and rewrite the portion of the action code capable of making the network request to redirect network communication of the flash content to the device.

According to yet another aspect a method for securing delivery of flash content over a network may include rewriting flash content action code capable of making a network request for flash content to redirect network communication associated with the flash content to a network device.

According to yet another aspect a system for securing delivery of flash content over a network may include means for disassembling and separating the flash content into at least action code means for locating a portion of the action code capable of making a network request for the flash content and means for rewriting the portion of the action code capable of making the network request to redirect network communication associated with the flash content to a secure network device.

According to still a further aspect a system may include a server to store flash content and a network device. The network device may receive the flash content from the server and disassemble the flash content into at least action code locate a portion of the action code capable of making a network request for the flash content and rewrite the portion of the action code capable of making the network request to redirect network communication associated with the flash content to the network device.

According to still another aspect a computer readable medium may store computer executable code for securing delivery of flash content over a network. The code may include instructions to determine if an object of flash content action code may be of a certain class and instructions to rewrite arguments of the flash content action code to redirect network communication associated with the object to a network device if the object is of the certain class. The code may further include instructions to determine if an application class of the flash content action code implements a non network related method and instructions to inject a code sequence that replaces a statement in the flash content action code if the application class implements the non network related method.

The following detailed description of the invention refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements. Also the following detailed description does not limit the invention. Instead the scope of the invention is defined by the appended claims and equivalents.

As described more fully below implementations consistent with principles of the invention relate to intermediation of flash content for secure deliver over a network. By securing the flash content as it is being delivered to a client e.g. a client running a web browser certain flash actions that are transmitted via a network by a network server may be modified so that when loaded into the client the flash content may communicate with an intermediate network device rather than the network server. This may ensure that communications between the client running the flash content and the network may be captive and secure. The communications between the client running the flash content and the network may be controlled by the intermediate network device and may be performed in a clientless manner i.e. without client side traffic tunneling software.

Instead of traffic tunneling by another piece of software implementations consistent with principles of the invention may directly modify binary instructions of the flash content action code as it is being delivered to the client so that binary instructions related to network communications may be rewritten to redirect flash content to the secure intermediate network device. Because flash content may be in a binary format one implementation consistent with principles of the invention may analyze the binary format which may include assembly like instructions call sequences stacks etc. may inject new instructions and parameters at certain locations of the binary format and may adjust the overall instruction sequences of the binary format.

As shown in client may connect to a private network which may contain server and network device via public network . Private network may include a local area network LAN a private network such as a company intranet or another type of network. Private network may also include organizational components devices servers etc. not shown in . Public network may include a local area network LAN a wide area network WAN a telephone network such as the Public Switched Telephone Network PSTN the Internet other networks or a combination of networks.

Client and or server may each include a device such as a personal computer a wireless telephone a personal digital assistant PDA a lap top or another type of computation or communication device or a process running on one of these devices. In one implementation client and or server may take the form of a provider of network content such as flash content a file a web page an email an instant message etc.

Server may include a server or a set of servers that contain information e.g. flash content. Flash content as the term is used herein is to be broadly interpreted to include for example the multimedia authoring program e.g. flash content ActionScript program used to create content for the flash player the media assets e.g. images games graphics video etc. created using the multimedia authoring program and or the executable code e.g. flash content action code used to manipulate the content and handle user interactivity.

Network device may include a data transfer device such as a gateway a router a switch a firewall a bridge a proxy server a device providing an instant virtual extranet IVE a device providing a secure sockets layer SSL virtual private network VPN or some other type of device that processes and or transfers data. SSL may provide endpoint authentication and communications privacy over a public network using cryptography. In one implementation network device may operate on data on behalf of an organizational network such as private network . For example network device may receive all or substantially all data destined for private network and or transmitted by private network .

In one implementation consistent with principles of the invention network device may utilize a secure VPN e.g. SSL VPN to provide a document s e.g. flash content to a client e.g. client requesting such a document s . The secure VPN may use cryptographic protocols to provide necessary confidentiality e.g. preventing hackers client authentication e.g. preventing identity spoofing and message integrity preventing message alteration to achieve the privacy intended for the document s by private network . The secure VPN may provide secure communications for the flash content over unsecured networks e.g. public network .

A document as the term is used herein is to be broadly interpreted to include any machine readable and machine storable work product. A document may include for example an application a program flash content an email a portion of an email a series of emails an instant message a portion of an instant message a series of instant messages a file a portion of a file a combination of files one or more files with embedded links to other files a web site combinations of any of the aforementioned etc. Documents often include textual information and may include embedded information such as meta information images hyperlinks etc. and or embedded instructions such as Javascript etc. .

A link as the term is used herein is to be broadly interpreted to include any reference to from a document from to another document or another part of the same document.

Network device may cause one or more operations to be performed on a document e.g. flash content when the document is requested by client . For example in one implementation network device may analyze the flash content requested by client and locate portions of the flash content related to network communications. Network device may modify the portions of the flash content related to network communications so that client may receive the flash content via an intermediate network device e.g. network device rather than receiving the flash content directly from a network server e.g. server . Network device in turn may provide secure communications of the flash content to client over unsecured networks e.g. public network .

In another implementation network device may also provide a client side library within the flash content. A library as the term is used herein is to be broadly interpreted to include for example an object a process a collection of subprograms used to develop software helper code and data which may provide services to independent programs and may allow code and data to be shared and changed in a modular fashion etc. The client side library may review the flash content as it is running on client . For example certain objects and or certain methods of the flash content may not be activated until the flash content is running on client . Such objects and methods may also be redirected to the intermediate network device e.g. network device by the client side library to ensure secure communication of the objects and methods.

As further shown in client may send a request for flash content to private network . Request may be received by network device and forwarded to server . However instead forwarding the flash content directly from server to client a response providing the flash content may be redirected to network device . Network device may provide secure communication of response to client .

Processor may include a processor microprocessor or processing logic that may interpret and execute instructions. Main memory may include a random access memory RAM or another type of dynamic storage device that may store information and instructions for execution by processor . ROM may include a ROM device or another type of static storage device that may store static information and instructions for use by processor . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits an operator to input information to the device such as a keyboard a mouse a pen voice recognition and or biometric mechanisms etc. Output device may include a mechanism that outputs information to the operator including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables the device to communicate with other devices and or systems.

The device consistent with principles of the invention may perform certain operations as described in detail below. The device may perform these operations in response to processor executing software instructions contained in a computer readable medium such as memory . A computer readable medium may be defined as a physical or logical memory device and or carrier wave.

The software instructions may be read into memory from another computer readable medium such as data storage device or from another device via communication interface . The software instructions contained in memory may cause processor to perform processes that will be described later. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes consistent with principles of the invention. Thus implementations consistent with principles of the invention are not limited to any specific combination of hardware circuitry and software.

Operating system may include operating system software such as the Microsoft Windows Apple MAC OS Linux Unix or IBM OS 2 operating systems or other similar operating systems.

Flash content software may include any executable object or process for analyzing and or modifying portions of the flash content e.g. action code that may relate to network communications. The executable object or process may enable a client e.g. client to securely receive flash content via an intermediate network device e.g. network device rather than receiving flash content directly from a network server e.g. server .

Flash content software may be automatically activated when a client e.g. client attempts to retrieve flash content from a network e.g. private network or when client attempts to transmit flash content to a network such as private network . In each case flash content software may identify and modify portions of the flash content e.g. action code that may relate to network communications as will be described below.

Client side library software may include an executable object or process. Client may obtain the executable object or process from a device e.g. network device and or a server e.g. server via injection of the executable object or process into the flash content e.g. action code . Client side library software may analyze the flash content action code while the flash content is running on a client e.g. client to determine if an object class in the action code is of a certain class that may include a network application programming interface API of the same name. An API may include the interface that a computer system library or application provides in order to permit requests for service to be made by other computer programs and or to allow data to be exchanged. If the object is of the certain class then client side library software may rewrite the flash content to redirect the object to the intermediate network device e.g. network device .

Client side library software may additionally and or alternatively determine while flash content is running on a client if a class in the content implements a certain method or function not invoking network requests e.g. from private network . If the class implements the certain method or function then client side library software may not modify the flash content but may inject a code sequence that may replace a portion of the flash content action code.

Client side library software may be automatically activated upon initiation of the flash content on a client e.g. client . Client side library software may be provided in the flash content action code prior to initiation by a network device e.g. network device . Client side library software may also be automatically activated when client attempts to connect to network device . In each case client side library software may analyze and or modify the flash content action code while the flash content is running on a client e.g. client as will be described below.

In flash content action code there may be two usage patterns for network communications both of which may relate to hypertext transfer protocol HTTP requests. The first usage pattern may use a set of instructions in the flash content action code e.g. a getURL action code instruction which may also be known as hex code 0x83 for network communications. The virtual machine of the flash player may interpret such action code instructions by popping a string uniform resource locator URL value from a stack and by sending an network request with the URL value to a flash content source e.g. server .

The second usage pattern may dynamically invoke flash content e.g. ActionScript functions provided in a string on a stack via an action code instruction e.g. callMethod which may also be known as hex code 0x52 . For example object method invocations may be compiled into an action code sequence that performs the callMethod. The dynamic action code instruction may occur upon activation of the flash content in a client e.g. client .

Further network requests may occur when flash content is running on the client. For example the flash content may make a network request for an object e.g. a video file while it is running on the client. Network requests for objects may not occur until the flash content is running on the client because for example certain objects may not be invoked until a client user requests the objects.

Implementations consistent with principles of the invention address network invocations by the flash content action code i.e. the two usage patterns for network communications and the network requests generated when flash content is running on the client. For example in one implementation the flash content action code may be inspected for the two usage patterns related to network communications the relevant instructions may be identified and the relevant portions of the flash content action code may be rewritten to redirect the flash content to an intermediate network device e.g. network device . In another implementation the flash content action code may be analyzed while the content is running on a client e.g. client to determine if an object class in the content is of a certain class that may include a network API of the same name. If the object is of the certain class then the flash content action code may be rewritten to redirect the object to the intermediate network device e.g. network device . In still another implementation while flash content is running on a client if a class in the flash content action code implements a certain method or function then a code sequence may be injected into the flash content action code that may replace a portion of the flash content action code.

Modification of flash content network invocations to redirect communications to a secure intermediate network device is described more fully below.

As shown in a process may receive flash content block . For example in one implementation described above in connection with client may send request for flash content and the flash content may be redirected to network device from server .

Process may further disassemble the flash content and separate the flash content into sections block . For example in one implementation the flash content may be disassembled and separated into content e.g. media assets and action code e.g. sequences of executable code to manipulate the content and handle user interactivity . As further shown in process may locate portion s of the flash content action code where network requests may occur block . For example in one implementation the instruction set of the flash content action code may include two instructions that may generate network e.g. HTTP requests e.g. getURL and getURL2. 

Process may inject a client side library into the flash content action code block . For example in one implementation network device may provide client side library software within the flash content action code. Client side library software may review the flash content action code as the flash content is running on client .

Process may determine if the flash content action code contains instructions for network requests block . If the flash content action code contains instructions for network requests block YES then the exemplary blocks of may be performed.

If the flash content action code does not contain instructions for network requests block NO then process may determine if the flash content e.g. ActionScript contains functions related to network requests block . For example in one implementation flash content functions provided in a stack may be dynamically invoked via an invocation action code instruction e.g. callMethod which may also be known as hex code 0x52 .

As further shown in if the flash content contains functions related to network requests block YES then the exemplary blocks of may be performed. If the flash content does not contain such functions block NO then process may end.

As described above the blocks shown in may be performed if the flash content action code contains instructions for network requests block YES . As shown in process may perform a flow analysis on the flash content action code and inspect a stack of the action code to locate a code parameter block . For example in one implementation a flow analysis and or stack inspection may be performed on the flash content action code to locate a code parameter that may generate a network request e.g. getURL .

As further shown in process may rewrite the code parameter to point to an intermediate network device block . For example in one implementation a string constant for the getURL code parameter may be rewritten to obtain a result string for redirection to an intermediate network device e.g. network device . Process may replace the portion of the flash content action code containing the code parameter with the rewritten code block . For example in one implementation the result string for redirection to network device may be used to replace the string constant for getURL in the flash content action code.

The blocks shown in may be performed if the flash content contains functions related to network requests block YES . As shown in process may examine the stack and the trace constants of the flash content action code to find a method or function block . For example in one implementation the stack and the trace constants that have been placed on the stack may be examined to determine the name of a flash content ActionScript method or function.

If the method or function is not of interest block NO then the process of may end. If the method or function is of interest block YES then process may examine the flash content action code to determine the number of arguments for the method s or function s of interest block . For example in one implementation any network related method or function names e.g. load send sendAndLoad loadVariables loadMovie connect and or loadClip may be deemed to be of interest. If the method or function name is of interest then the flash content action code may be backtraced to determine the number of arguments for the method or function. For example an instruction push c 2 c 1 c 0 may indicate that a method or function may have only one argument and may indicate that the method or function has an object as the argument.

As further shown in process may replace the method or function invocation instruction in the flash content action code with an invocation to a rewriting function block . For example in one implementation the method or function invocation instruction loadMovie may make a network request for movie content. In such a case the argument s for the method or function loadMovie may be rewritten to redirect the URL for the movie content to an intermediate network device e.g. network device before invoking the method or function loadMovie. 

As shown in a process may determine if an object of the flash content action code may be of a certain class block . For example in one implementation process may determine if an object of the flash content action code may be of an object class that may include a network API of the same name. For example a class e.g. MovieClip may be of an object class that may include a method or function e.g. loadMovie which may make a network request for movie content from a network server e.g. server .

If an object of the flash content action code is of a certain class block YES then process may rewrite arguments of the flash content action code to redirect a URL to point to an intermediate network device block . For example in one implementation the arguments for a method or function e.g. loadMovie may be rewritten to redirect the URL for the movie content from a network server e.g. server to an intermediate network device e.g. network device . If an object of the flash content action code is not of a certain class block NO then process may determine if an application class of the flash content action code implements a certain method or function block . For example in one implementation some application classes in the flash content action code may implement the method or function loadMovie but may not make a network request for movie content from a private network. For example the movie content may come from a source other than the private network and thus may not need to be securely provided to the client.

If an application class of the flash content action code implements a certain method or function block YES then process may inject a code sequence that replaces a statement in the flash content action code block . For example in one implementation a statement e.g. trace DSReplaceMe may be replaced with a code sequence as shown in and described more fully below.

Although provides an exemplary implementation consistent with principles of the invention other object classes of the flash content action code may include methods or functions that may make network requests. For example the following object classes of the flash content action code may make network requests and accordingly may be redirected to an intermediate network device according to implementations consistent with principles of the invention XML.load LoadVars.load MovieClip.loadMovie MovieClip.loadVariables NetConnection.connect MovieClipLoader.loadClip XML.sendAndLoad LoadVars.send and or LoadVars.sendAndLoad. 

There are a number of ways to implement aspects of the invention. are diagrams of a few exemplary implementations for redirecting flash content to a secure intermediate network device consistent with principles of the invention. The intermediate network device may provide secure communications of the flash content between a client and a private network.

As described above implementations consistent with principles of the invention may modify flash content at the binary level. Accordingly portion of the flash content ActionScript program may be compiled into a flash content action code sequence as shown in . In order to redirect the flash content to an intermediate network device flash content action code sequence may be rewritten to a modified action code sequence as shown in . For example in one implementation as described in connection with a getURL2 instruction of flash content action code sequence may be replaced with instructions as shown in e.g. push 3 RewriteAndLoad callFunction and pop . Replacing the action code instruction getURL2 with an invocation to an intermediate function e.g. RewriteAndLoad may modify the flash content action code to redirect flash content to a secure intermediate network device. The intermediate function RewriteAndLoad may be injected into the same frame of flash content action code sequence formerly occupied by action code instruction getURL2. 

In flash content action code there may be instructions e.g. getURL and getURL2 that may generate network requests. provide flowcharts of exemplary processes for modifying flash content action code containing the getURL and getURL2 instructions according to implementations consistent with principles of the invention. The processes of may begin when client attempts to connect to network device and or when flash content is running on client . In one implementation the processes of may be performed by one or more software and or hardware components within a network device e.g. network device . In another implementation the processes may be performed by one or more software and or hardware components within another device or a group of devices separate from or including network device .

As shown in a process for modifying a getURL instruction may extract the string constant for the getURL instruction from the flash content action code sequence block . For example in one implementation described above in connection with a flow analysis and or stack inspection may be performed on the flash content action code to locate a code parameter that may generate a network request e.g. getURL . As further shown in process may rewrite the string constant to obtain a result string for redirection block . For example in one implementation described above in connection with a string constant for the getURL instruction may be rewritten to obtain a result string for redirection to an intermediate network device e.g. network device .

Process may replace the original string constant with the result string in the flash content action code sequence block . For example in one implementation described above in connection with the result string for redirection to network device may be used to replace the string constant for the getURL instruction in the flash content action code.

As shown in a process for modifying a getURL2 instruction of flash content action code may extract the integer flag value of the getURL2 instruction from the flash content action code sequence block . Process may remove the getURL action code instruction block and may replace the getURL action code instruction with a push instruction a callfunction instruction and a pop instruction block . For example in one implementation the push instruction may include three values a flag value an integer constant e.g. 3 and a string for the rewriting function e.g. RewriteAndLoad . In another implementation the callfunction instruction may invoke the rewriting function. In still another implementation the pop function may pop off a function return value.

For example provides an exemplary portion of a flash content ActionScript program and provides a flash content action code sequence that may be compiled based on exemplary portion of the flash content ActionScript program. As described above in connection with process may examine the stack and the trace constants of the flash content code to find a method or function. For example in one implementation action code sequence may be examined to determine if there are any callMethod instructions in action code sequence . Since there is a callMethod instruction in action code sequence as shown in action code sequence may be backtraced to determine the name of a method or function invoked by the callMethod instruction. In the exemplary instructions of instruction push c of action code sequence may indicate that the name of the network related method or function is load. Other network related method or function names may include for example send sendAndLoad loadVariables loadMovie connect and or loadClip. 

If the method or function name may be of interest e.g. network related then flash content action code sequence may be backtraced to determine the number of arguments for the method or function as described above in connection with block . For example an instruction push c 2 c 1 c 0 of action code sequence may indicate that a method or function e.g. load may have only one argument and may have an object as the argument. The instruction of action code sequence invoking the method or function may be replaced with a new action code sequence redirecting the method or function invocation to a rewriting function so that the original method or function may be evaluated e.g. by an intermediate network device and parameters adjusted before actual invocation of the original method or function. For example in one implementation described above in connection with block action code sequence of may be replaced with an action code sequence shown in . In such a case the argument s for the method or function load may be rewritten to redirect the URL to an intermediate network device e.g. network device before invoking the method or function load. 

Action code sequence may include a flash content ActionScript function RewriteMethodInvocation1 which may be injected into the same frame of the action code formerly occupied by the callMethod instruction to implement an inspection of parameters. The RewriteMethodInvocation1 function may include a flash content ActionScript program as shown in . Flash content program may determine if an object of the flash content action code may be of an object class that may include a network API of the same name as described above in connection with block . For example a class e.g. MovieClip may be of an object class that may include a method or function e.g. loadMovie which may make a network request for movie content as shown in .

If an object of the flash content action code is of a certain class then flash content program may rewrite arguments of the flash content action code to redirect a URL to point to an intermediate network device as described above in connection with block . For example in one implementation the arguments for the method or function loadMovie may be rewritten by flash content program to redirect the URL for the movie content from a network server e.g. server to an intermediate network device e.g. network device . If an object of the flash content action code is not of a certain class then flash content program may determine if an application class of the flash content action code implements a certain method or function as described above in connection with block . For example in one implementation some application classes in the flash content action code may also implement the method or function loadMovie but may not invoke a network request.

If an application class of the flash content action code implements a method or function not invoking a network request then the flash content action code may not be modified. Rather flash content program may inject an action code sequence that replaces a statement in the flash content action code as described above in connection with block . For example in one implementation a trace DSReplaceMe statement may be replaced with an action code sequence shown in . In action code sequence may be the actual argument and may be the method or function name.

Although a RewriteMethodInvocation1 function is shown in in one implementation consistent with principles of the invention additional flash content program functions similar to the RewriteMethodInvocation1 function may be provided to redirect method or function network requests which may include one to three arguments to an intermediate network device e.g. network device . For example a class e.g. LoadVars may have a method or function e.g. sendAndLoad that may have three arguments.

Implementations consistent with principles of the invention may relate to systems and methods for intercepting and intermediating network requests of flash content for secure delivery over a network. The systems and methods may operate directly on the compiled binary flash content action code instead of modifying and recompiling the original source code of the flash content. When the flash content is executed inside a flash player e.g. on client all network communications may be redirected through an intermediate network device e.g. network device . For example in one implementation network traffic of flash content between a flash player e.g. on client and a network server e.g. server may be secured via a SSL protocol provided on network device .

The systems and methods consistent with principles of the invention provide many advantages. For example the systems and methods may be applicable to any packaged flash content and at the time of a network request and or response processing without the need to modify the flash content at a source level or rebuild the packaged flash content. The systems and methods may thus be transparent to and independent of the owners of the flash content. The systems and methods may provide the further advantage of being applied at application layer network communication constructs without the need for transmission control protocol TCP traffic inspection and or flow manipulation or other lower network layer operations. The systems and methods may provide the still further advantage of being clientless i.e. no additional components and or software need to be installed on the client.

The foregoing description of preferred embodiments of the invention provides illustration and description but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention.

For example while a series of acts has been described with regard to and the order of the acts may differ in other implementations consistent with principles of the invention. Also non dependent acts may be performed in parallel.

Although exemplary implementations consistent with principles of the invention focused on redirecting network communication of flash content to a secure intermediate network device the flash content action code may be rewritten for any non networking purpose in a manner similar to the exemplary implementations of the invention. Furthermore the exemplary implementations consistent with principles of the invention may be applied to a variety of content similar to flash content e.g. JavaScript ActiveX etc.

It will also be apparent to one of ordinary skill in the art that aspects of the invention as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement aspects consistent with principles of the invention is not limiting of the present invention. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that one of ordinary skill in the art would be able to design software and control hardware to implement the aspects based on the description herein.

No element act or instruction used in the present application should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

