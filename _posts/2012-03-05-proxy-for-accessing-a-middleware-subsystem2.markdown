---

title: Proxy for accessing a middleware subsystem
abstract: A first application is constrained from calling a middleware subsystem, where the middleware subsystem is able to access at least one feature selected from among a basic input/output system (BIOS) and hardware. The first application accesses the middleware system through a proxy, where accessing the middleware subsystem allows the first application to communicate with the at least one feature.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09606845&OS=09606845&RS=09606845
owner: Hewlett-Packard Development Company, L.P.
number: 09606845
owner_city: Houston
owner_country: US
publication_date: 20120305
---
An electronic device can include hardware components and a basic input output system BIOS . In addition an electronic device can include an application that can communicate with the hardware components or the BIOS to perform various tasks. The communication between the application and BIOS or hardware components can be accomplished through an intermediate system.

Certain applications in an electronic device are able to communicate with hardware components and or a basic input output system BIOS to perform predefined tasks. Examples of electronic devices include computers e.g. desktop computers notebook computers tablet computers server computers etc. personal digital assistants PDAs storage systems communications systems and so forth. Hardware components can include a processor an input output I O device a memory device a disk drive a user input device and so forth. An application refers to machine readable instructions that execute at a higher layer in the electronic device such as a layer above an operating system of the electronic device.

The BIOS of an electronic device includes machine readable instructions that are executed when the electronic device starts up. The BIOS can be used to initialize hardware components of the electronic device and to load an operating system of the electronic device. Functions of the BIOS can also be accessed during normal operations of the electronic device after initial startup and after the operating system has been loaded . For example functions of the BIOS that can be accessed include a function to change the brightness of a display device a function to increase or decrease speaker volume a function to change a power state of the electronic device and so forth.

In some examples a middleware subsystem can be provided to allow applications to communicate with BIOS functions and or hardware components. The middleware subsystem which can be implemented as machine readable instructions or a combination of machine readable instructions and hardware controller s provides a unified mechanism to provide abstract interfaces to the BIOS functions and or hardware components. The abstract interfaces allow applications to not have to be configured to handle specific details associated with interfacing the BIOS functions and or hardware components. Rather the middleware subsystem is able to translate commands or data from applications into a form useable by the BIOS functions and or hardware components.

In some examples the middleware subsystem can provide application programming interfaces APIs that applications running in an electronic device can invoke for communicating with the BIOS functions and or hardware components. In other examples the middleware subsystem can provide other types of interfaces that are invocable by applications for communicating with BIOS functions and or hardware components.

Some operating environments can implement security mechanisms that constrain certain types of applications from calling the middleware subsystem. Such applications can be referred to as constrained applications. For example such an operating environment can be an operating environment provided by the Windows 8 operating system. In other examples other types of operating environments can similarly provide security mechanisms to constrain an application from calling the middleware subsystem. An application calling a middleware subsystem can refer to the application invoking a feature such as an interface e.g. API of the middleware subsystem.

An example security mechanism that constrains an application from calling the middleware subsystem can be a sandbox which provides a container in which the application is executed. This container separates the application contained in the container from other applications. The presence of the container can prevent the application within the container from calling the middleware subsystem. In other examples other types of security mechanisms can constrain an application from calling the middleware subsystem.

In accordance with some implementations a proxy can be provided to allow a constrained application to access the middleware subsystem. The constrained application can provide commands and or data to the proxy which can then access the middleware subsystem according to the commands and or data from the constrained application. By using the proxy the constrained application which is prevented from directly calling the middleware subsystem is able to access the middleware subsystem so that the constrained application can communicate through the middleware subsystem with the BIOS functions and or hardware components of the electronic device.

In contrast an unconstrained application is able to invoke the interfaces such as by making API calls of the middleware subsystem . In some examples the constrained application can be a Metro style application associated with a Windows 8 operating system while the unconstrained application is a different type of application such as a desktop application a mobile application or other type of application.

To allow the constrained application to access the middleware subsystem a proxy is provided. The constrained application communicates commands and or data to the proxy which then directs the commands and or data to the interfaces of the middleware subsystem .

In some examples the constrained application can send a series of commands and or data units according to a defined format recognized by the proxy . The commands and or data units to be communicated between the constrained application and the middleware subsystem using the proxy can be in the form of documents according to a certain format. For example such format can be the Extensible Mark up Language XML format. In other implementations documents for carrying the commands and data can be according to other formats.

The proxy can de serialize the series of commands and or data units and can invoke the interfaces of the middleware subsystem to allow access of the middleware subsystem by the constrained application .

The proxy can be implemented using one of several different types of mechanisms. In some implementations the proxy can include any one or combination of the following a network socket connection a driver or a shared file mechanism. A network socket is an endpoint of a communication flow across a network. Thus in examples where the proxy includes a network socket connection a network socket can be provided at the constrained application and another network socket can be provided at the middleware subsystem . The network socket connection interconnects the network sockets.

A network socket can be defined by a network socket address which can be a combination of an Internet Protocol IP address and a port number for example. A network socket connection between network sockets can be established between entities within an electronic device or alternatively the network socket connection can be established over a network between remotely located entities.

In other implementations the proxy can be implemented as a driver that is able to call the middleware subsystem on behalf of the constrained application . For example the driver can be a plug in driver which can be operationally connected to the constrained application using a plug in interface. A driver that implements the proxy can be considered a virtual driver since the driver is not associated with a physical I O device.

According to further implementations the proxy can include a shared file mechanism that allows communication between the constrained application and the middleware subsystem by use of a shared file or files . The shared file can include commands and or data provided by the constrained application to access the middleware subsystem to allow communication with BIOS functions and or hardware components through the middleware subsystem . Such shared file can be written by the constrained application to a storage location in a storage medium that is also accessible by the middleware subsystem . After the shared file is written to the storage location the middleware subsystem can read the shared file and retrieve the content of the shared file. Based on such content the middleware subsystem can perform the appropriate communication with the BIOS functions and or hardware components. Information to be passed back from the accessed BIOS functions and or hardware components can similarly be provided in a shared file to the constrained application .

Using a proxy to allow for communication between the constrained application and the middleware subsystem allows for a loose coupling between the constrained application and the middleware subsystem. The use of the proxy allows the constrained application to be implemented in a platform independent and operating system independent manner. Also by using the proxy specific inter process communication technologies do not have to be employed rather flexibility can be provided since various types of inter process communication technologies can be used.

Communications between the constrained application and the middleware subsystem can use either the pull model or push model. In the pull model the constrained application sends a request through the proxy to the middleware subsystem which then responds with a response to the request. The request and response can be provided in well formed XML documents for example. A well formed XML document refers to a document conforming to specific rules of the XML Specification e.g. the XML 1.0 Specification that allows for a requestor and a responder to understand the content of the document by using XML parsers.

In the push model the constrained application can send a subscription request in the form of an XML document for example through the proxy to the middleware subsystem and the middleware subsystem can then send a subscription response through the proxy to the constrained application to acknowledge the subscription request. Later on when there is an event of interest based on the subscription request the middleware subsystem can then send an event notification push notification through the proxy to the constrained application.

In some implementations the communication between the constrained application and the middleware subsystem through the proxy can occur within an electronic device. For example the proxy can include a network loopback connection which is a type of network socket connection where an entity in the electronic device can access another entity in the electronic device while bypassing a network interface of the electronic device that connects the electronic device to an external network. The network loopback connection can be implemented by using localhost as the address for a network socket this would direct the communication to a destination entity hosted within the electronic device.

In alternative implementations the network socket connection of the proxy can be established over an external network with a remote machine. illustrates an example arrangement in which the constrained application in an electronic device is able to access the middleware subsystem in the electronic device through a remote server . In such examples the constrained application is designed to communicate with a remote entity such as the remote server .

To allow for the constrained application to communicate with the middleware subsystem a network socket connection can be established between the constrained application and a proxy module in the remote server . Another network socket connection is established between the proxy module and the middleware subsystem . Thus any command or data to be passed between the constrained application and the middleware subsystem is communicated through the network socket connections and the proxy module . Collectively the network socket connections and the proxy module make up a proxy through which the constrained application is able to communicate with the middleware subsystem .

Implementations according to can be feasible in systems within an enterprise environment or within a cloud environment for example. In an enterprise environment services are often provided on enterprise servers with such services accessible by clients over a network. In accordance with some implementations a service that can be provided by an enterprise server such as the remote server of includes provision of a proxy that includes the network socket connections and and the proxy module to allow for communication between the constrained application and the middleware subsystem .

Similarly in a cloud based environment services can be provided in the cloud at one or multiple cloud servers . In such cloud based environment the remote server is a cloud server that is part of the cloud which can be accessed by clients such as the electronic device .

As further shown in the hardware components of the electronic device include a processor or multiple processors and a storage medium or storage media . The constrained application and middleware subsystem are executable on the processor s . The remote server also includes a processor or multiple processors and a storage medium or storage media .

Machine readable instructions of various modules described above including the constrained application unconstrained application middleware subsystem and proxy module of can be loaded for execution on a processor s e.g. and in . A processor can include a microprocessor microcontroller processor module or subsystem programmable integrated circuit programmable gate array or another control or computing device.

Data and instructions are stored in respective storage devices e.g. storage media and in which are implemented as one or more computer readable or machine readable storage media. The storage media include different forms of memory including semiconductor memory devices such as dynamic or static random access memories DRAMs or SRAMs erasable and programmable read only memories EPROMs electrically erasable and programmable read only memories EEPROMs and flash memories magnetic disks such as fixed floppy and removable disks other magnetic media including tape optical media such as compact disks CDs or digital video disks DVDs or other types of storage devices. Note that the instructions discussed above can be provided on one computer readable or machine readable storage medium or alternatively can be provided on multiple computer readable or machine readable storage media distributed in a large system having possibly plural nodes. Such computer readable or machine readable storage medium or media is are considered to be part of an article or article of manufacture . An article or article of manufacture can refer to any manufactured single component or multiple components. The storage medium or media can be located either in the machine running the machine readable instructions or located at a remote site from which machine readable instructions can be downloaded over a network for execution.

In the foregoing description numerous details are set forth to provide an understanding of the subject disclosed herein. However implementations may be practiced without some or all of these details. Other implementations may include modifications and variations from the details discussed above. It is intended that the appended claims cover such modifications and variations.

