---

title: Service manager for adaptive load shedding
abstract: A service manager that facilitates managing requests that are obtained at a middleware tier of a communications network includes a monitor component that evaluates data associated with effectuating a request that is received at a middleware tier. The monitor component identifies resources associated with effectuating the request. Additionally, the service manager includes a request component that accepts and/or rejects the request based at least in part upon the identified resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09098341&OS=09098341&RS=09098341
owner: AT&T MOBILITY II LLC
number: 09098341
owner_city: Atlanta
owner_country: US
publication_date: 20120727
---
This application is a continuation of Ser. No. 11 264 080 filed on Nov. 11 2005 entitled SERVICE MANAGER FOR ADAPTIVE LOAD SHEDDING which claims priority to U.S. Provisional Patent Application Ser. No. 60 630 920 filed on Nov. 24 2004 entitled SYSTEMS AND METHODS FOR PROVIDING A SERVICE MANAGER FOR ADAPTIVE LOAD SHEDDING. The entireties of the aforementioned applications are incorporated herein by reference.

The subject innovation relates to services provided by a wireless telecommunication carrier and more specifically to monitoring and or controlling requests at a middleware tier to mitigate resource starvation and or catastrophic failure.

The mobile telephone industry has been associated with tremendous growth over the last several years. For instance in the recent past mobile telephones were only available to those of highest economic status due to service costs and costs associated with mobile phones. Moreover network coverage was not extensive enough to enable robust service. In particular only areas associated with dense population were provided with extensive wireless network coverage. Still further the mobile phones that could utilize the networks to communicate were quite bulky causing portation of the phone over any significant distance to be difficult at best. In more detail antennas associated with these phones could be over a foot in length thus making it difficult to utilize the phones in automobiles or other congested areas.

In contrast today s portable phones and other portable devices can be utilized as full service computing mechanisms. For example many of the most recent and advanced mobile phones can be associated with word processing software accounting software and various other types of software. Furthermore network coverage has expanded to cover millions if not billions of users. Additionally mobile phones have decreased in both size and cost. Specifically modern mobile phones are often small enough to slip into an individual s pocket without discomforting the individual. Furthermore many mobile network service providers offer phones at extremely low cost to customers who contract for service with such providers.

The increase in the number of mobile users has yielded increased network traffic associated with wireless telecommunication carriers backend services and or systems. By way of illustration backend services such as a billing system can be provided by a wireless telecommunication carrier to various clients including customer care call centers retail stores payment systems etc. Typically the clients can communiate with the backend via a middle tier that can broker data transmission between the clients and the backend system s and or service s . However use of such a middle tier can slow network traffic and or cause failure of the entire system due at least in part to limited numbers of middle tier resources.

For example a middleware tier can receive and or transmit requests for several backend services from disparate backends. Oftentimes services from one or more backends can become slow and or unresponsive which can cause middleware resources to be occupied until the backend services recover. During this time requests for responsive backend services can be starved of middleware resources. By way of illustration all middleware resources can be allocated to unresponsive requests and request queues can fill which can cause middleware applications to become completely unavailable for further processing.

Services can be associated with disparate markets such that each of the disparate markets can utilize physical instances of the backend system s and or service s . Traffic can generally flow from a front end system to a backend related to a particular market and then return to the front end or vice versa. Backend billing system outages which can be limited to a single market can produce middleware resource starvation and catastrophic failure often within five to ten minutes of the backend outage. Conventional techniques that utilize rolling bounces to clear the congestion can yield loss of all requests and oftentimes only temporarily purged the backlog.

The following presents a simplified summary in order to provide a basic understanding of some aspects of the disclosed innovation. This summary is not an extensive overview and it is not intended to identify key critical elements or to delineate the scope thereof. Its sole purpose is to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

The claimed subject matter described herein relates to evaluating and or controlling requests that are received at a middleware tier in a communications network. Requests can be obtained from a source such as for example a front end system and the middleware tier can communicate the request to a backend to which the request is directed. A service manager can be associated with the middleware tier and can mitigate tier wide outages that arise when a subset of services in an n tier architecture fail and or are unresponsive. For example the service manager can monitor backend responsiveness and reject requests that will not meet established performance criteria and or that may negatively impact overall application operation. The service manager can include a monitor component that can identify required resources and or obtain accurate resource availability information. The service manager can utilize this information to accept and or reject the requests.

According to an aspect a service manager can mitigate resource starvation e.g. in a multi threaded shared resource software system . The service manager can monitor system performance characterized by resource utilization and can reject new requests when it is determined that required resources are unavailable and or operate outside of acceptable performance bounds. The service manager can be associated with any client server component that can rely upon outside resources to fulfill client requests. Pursuant to an example the service manager can be deployed in connection with a J2EE EJB container and or can be implemented in Java. Moreover the service manager can utilize direct application information with observed environment information to mitigate resource starvation leading to application and or system failures.

Pursuant to additional aspects a request can be received at a middleware tier and an application can call a service manager that examines the request by evaluating the data of the request. For example a backend associated with the request can be identified by the service manager. Additionally or alternatively the service manager can determine resources currently being employed in connection with the backend and or disparate backends. The service manager can also accept and or reject the request based on the identified information.

To the accomplishment of the foregoing and related ends certain illustrative aspects of the disclosed innovation are described herein in connection with the following description and the annexed drawings. These aspects are indicative however of but a few of the various ways in which the principles disclosed herein can be employed and is intended to include all such aspects and their equivalents. Other advantages and novel features will become apparent from the following detailed description when considered in conjunction with the drawings.

Appendix A illustrates exemplary pseudo code that can be utilized in connection with various aspects this appendix is to be considered part of the specification of the subject application.

The innovation is now described with reference to the drawings wherein like reference numerals are used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding thereof. It may be evident however that the innovation can be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to facilitate a description thereof.

As used in this application the terms component system manager and evaluator are intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component can be but is not limited to being a process running on a processor a processor a hard disk drive multiple storage drives of optical and or magnetic storage medium an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers.

Referring initially to the drawings illustrates a system that facilitates managing requests that are received at a middleware tier. The requests can be obtained from a front end system e.g. client a backend e.g. billing system etc. Additionally the requests can be directed towards a backend front end system etc. e.g. transmitted as a response . Pursuant to an example traffic can flow from a front end system to particular backend through the middleware tier and then return to the front end system however the claimed subject matter is not so limited. The communication of data between the front end s and the backend s can be controlled by middleware. The system includes a service manager that facilitates monitoring backend responsiveness and or rejecting requests that may fail to meet established performance criteria and or negatively impact overall network operation. The service manager can be associated with a middleware tier that services various client and backend systems for instance however the service manager is not limited to use with a middleware tier and can be employed in any computing environment that supports synchronous transactions. The service manager can include a request component that can accept and or reject a request. A request that is known and or anticipated to fail can be rejected without harming a requesting client also such a rejection can mitigate harm to disparate clients. Pursuant to an example the request component can reject a request upon receipt provide a response to the source of the request and thereby reduce an amount of time that a requesting client waits for a response. In contrast without utilizing the request component and or the service manager in general the requesting client would typically wait for a timeout period e.g. thirty seconds to expire prior to receiving a response when resources are lacking.

The service manager can also include a monitor component that can identify required resources and or obtain accurate resource availability information. For example the monitor component can evaluate an incoming request and determine resources that are typically utilized to effectuate such request. Additionally the monitor component can identify current resources being utilized. For example the monitor component can determine a number of requests for a particular service a number of requests associated with a middleware container a responsiveness of a backend resources currently associated with a particular service resources currently associated with a middleware container etc. The information generated with the monitor component can be employed by the request component to effectuate accepting and or rejecting requests to produce a proper response.

The service manager can provide a number of advantages over conventional techniques. In particular the service manager can mitigate catastrophic system failures caused by limited backend failures. For example the service manager can mitigate tier wide outages caused when a subset of services in an n tier architecture fail and or become unresponsive. The failure can result from resource allocation granularity in Java 2 Platform Enterprise Edition J2EE containers and associated resource starvation when backend services become unresponsive for instance. These containers can allocate managed resources based on an Enterprise JavaBean EJB type rather than the data processed by an EJB and the containers typically do not provide an API for a developer to adequately control allocation and or retrieval of container managed resources.

Further application specific definitions of monitored resources can be provided by the service manager . Additionally the service manager can provide configurable limits on resource requests. Moreover the service manager can enable online monitoring provide detailed information for system wide fault isolation allow selective resource on and off control utilize a minimal memory footprint and low execution overhead and consume little or no managed resources.

Pursuant to an example the service manager can control container resource allocation indirectly by controlling application demands for these resources. Application developers can employ the service manager to regulate resource loading utilizing data driven criteria with a finer granularity than offered by frameworks and containers. Further rejecting requests for overloaded backend services can prevent resource starvation and or catastrophic failure thus improving an end user s experience by mitigating waiting time.

With reference to illustrated is a system that facilitates monitoring and or managing requests associated with service s and or container s that are provided to a middleware tier. The system includes a service manager that can receive a request and or provide a response based on resources associated with effectuating the request and or resource availability. The service manager can include a request component that accepts and or rejects a request that is received. The service manager also can include a monitor component that evaluates the received request and or resource availability.

The monitor component can include a service evaluator that facilitates determining whether to accept and or reject a request for a particular service. The service evaluator can control an amount of resources consumed by a particular backend service. For example the service evaluator can be associated with a threshold for a maximum number of requests for a particular service that can be executing and or waiting for a response. The threshold can be a predetermined amount and or an amount that varies depending on available resources a current number of requests e.g. for a particular backend for a particular service for an entire container . . . backend responsiveness etc. The service evaluator can identify a particular service associated with a request that is received e.g. a string of letters identifying a particular service can be included in data associated with the received request an interface can specify service level requirements . . . . Further the service evaluator can identify resources that are associated with effectuating the requested service. Additionally the resources currently being employed in connection with the service e.g. disparate requests for the same service can be determined with the service evaluator . Pursuant to an additional illustration the service evaluator can facilitate controlling a number of requests from a client that are concurrently processed. According to this illustration the client or a source of requests can be considered to be a service and thus the service evaluator can determine a current number of requests a response time for requests made from a particular client etc. to protect middleware and or backend resources from being consumed by a single client and or being blocked by requests specific to a particular client.

The monitor component can also include a container evaluator that assesses available resources associated with a container. By way of example the container can be a J2EE container that can deploy units of application functionality implemented as EJBs. The container evaluator can determine a number of requests that are executing and or waiting for a response associated with the container. Further the container evaluator can compare the number of requests that are executing and or waiting for a response to a threshold value for the container such that if the incoming request would cause the number of requests that are executing and or waiting for responses to exceed the threshold value the request can be denied e.g. providing an immediate response via the request component denying the request .

Referring to illustrated is a system that facilitates managing requests that traverse through a middleware tier via utilizing a response of a backend. The system includes a service manager that monitors and or controls requests that are received. The service manager can include a request component that can accept and or deny a received request. For instance the request component can provide an immediate response back to a sender e.g. front end backend . . . of a request notifying the sender that the request has been denied. Thus the sender of the request need not wait for a timeout period to expire prior to receiving a notification that a request has failed.

The service manager can also include a monitor component that examines data associated with a request resources typically employed to effectuate the request and or available middleware resources. The monitor component can include a service evaluator that can identify a service associated with a particular request resources associated with enabling such a request and or resources presently being employed with the service e.g. executing and or waiting for a response . The monitor component can also include a container evaluator that can evaluate current resource usage for an entire container e.g. compare a number of requests being executed and or waiting for a response to a threshold for the container . Further the monitor component can include a backend response evaluator that can differentiate between a service that is responding slowly and a large volume of requests for a particular service. For example if a spike in volume of requests for a particular service exists the backend response evaluator identifies this current condition and enables accepting the request. For instance if a service is responding within a particular threshold of time that particular service can be provided within additional resources e.g. bandwidth threads connections . . . . Pursuant to another illustration if a backend is responding slowly to requests the backend response evaluator can facilitate denying additional requests for the particular service and thus enable the middleware resources to be utilized in connection with disparate services.

With reference to illustrated is a system that enables adaptive monitoring and or control of requests that are received and or transmitted utilizing resources associated with a middleware tier. The system includes a service manager that receives a request e.g. from a front end system backend . . . that can be communicated employing resources associated with the middleware tier. The service manager can include a request component that accepts and or rejects requests that are received. By way of example the request component can reject a request that is likely to fail and thereafter notify a provider of the request of such rejection. According to another illustration the request component can accept a request that is received and provide a response to the service and or system to which the request is directed. Pursuant to this illustration the request component can enable reformatting the request addressing the request to direct it to the recipient location e.g. backend system backend service front end . . . encrypting decrypting data associated with the request etc. to provide a response associated with the request. The response can thereafter be executed queued etc. The service manager additionally can include a monitor component that can analyze the received request and or conditions associated with middleware resources. For example the service manager can identify a backend service and or system to which a request is directed resources that are typically utilized to effectuate such a request resources currently being employing in connection with the backend service and or system and or resources being utilized by a middleware container.

The service manager can additionally include an adaptation component that facilitates varying a number of requests that are associated with a particular service and or system e.g. modifying an associated threshold . For example the monitor component can identify that a number of requests received by the service manager associated with a particular backend service executing and or waiting for responses from the particular backend service exceeds a threshold value e.g. via employing the service evaluator . According to this illustration the monitor component can also determine that the backend is responding slowly to requests e.g. via utilizing the backend response evaluator thus the adaptation component can reduce the threshold value associated with the particular backend service and or system to free middleware resources for use with disparate backend services and or systems. Pursuant to another example the monitor component can identify an increase in volume of requests to a particular backend service and or system coupled with normal operation of the backend service and or system e.g. via utilizing the backend response evaluator . Thereafter the adaptation component can enable increasing the threshold for the maximum number of requests that can concurrently be executing and or waiting for a response for the backend service and or system.

The service manager can further include a machine learning and reasoning MLR component which facilitates automating one or more features in accordance with the subject innovation. Various artificial intelligence based schemes can be employed for carrying out various aspects. For example a process for determining available services allocation of resources between services and or behavior of services over time can be facilitated via an automatic classifier system and process.

A classifier is a function that maps an input attribute vector x x1 x2 x3 x4 xn to a class label class x . The classifier can also output a confidence that the input belongs to a class that is f x confidence class x . Such classification can employ a probabilistic and or statistical based analysis e.g. factoring into the analysis utilities and costs to prognose or infer an action that a user desires to be automatically performed.

A support vector machine is an example of a classifier that can be employed. The support vector machine operates by finding a hypersurface in the space of possible inputs that splits the triggering input events from the non triggering events in an optimal way. Intuitively this makes the classification correct for testing data that is near but not identical to training data. Other directed and undirected model classification approaches include e.g. na ve Bayes Bayesian networks decision trees neural networks fuzzy logic models and probabilistic classification models providing different patterns of independence can be employed. Classification as used herein also is inclusive of statistical regression that is utilized to develop models of priority.

As will be readily appreciated from the subject specification the subject innovation can employ classifiers that are explicitly trained e.g. via a generic training data as well as implicitly trained e.g. via observing user behavior receiving extrinsic information . For example SVM s are configured via a learning or training phase within a classifier constructor and feature selection module. Thus the classifier s can be employed to automatically learn and perform a number of functions. For example based upon a particular time of day the MLR component can identify how to allocate resources to different services e.g. taking into account a number of requests commonly initiated during each time period . In another example the MLR component can learn that a new service is associated with a received request. Accordingly the MLR component can identify a format for data associated with the new service a location of the new service etc. Further the MLR component can evaluate previous request failures and or successes to determine whether a received request is likely to fail and or succeed. These are only but a few examples of the capabilities that can be provided by the use of the MLR component .

Turning to illustrated is a system that mitigates tier wide outages that can result when a subset of services fail or become unresponsive. The system can include N clients where N is any positive integer. The clients can be for example retail systems customer care call centers billing services payment systems etc. It is to be appreciated that the clients can all be of a similar type e.g. retail systems customer care call center billing services payment systems . . . disparate types or a combination thereof. Each of the clients can send requests to middleware . Further the requests can be directed to a backend e.g. backend service backend system . . . . The middleware can be associated with various resources that enable directing and or communicating the data of the request to the appropriate backend . For example a number of backends can exist in addition to the backend . Thus the middleware can enable communicating the request in a protocol associated with the backend . Additionally the middleware can transmit the request to the backend . It is to be appreciated that the backend can be a legacy system and or service and or a modern system and or service however the claimed subject matter is not so limited.

The middleware can include a service manager that can evaluate the data associated with the requests received by the middleware . For instance the service manager can identify resources that are associated with a particular request and or resources that are currently being employed to execute disparate requests and or waiting for a response associated with disparate requests. The service manager can effectuate accepting and or denying requests that are received by the middleware . If the request is likely to fail the service manager can immediately respond to the client that sent the request indicating that the request failed. Additionally or alternatively the service manager can enable normal processing to occur if resources are available and or the request is not likely to fail.

With reference to illustrated is an exemplary container environment that can be employed in connection with various aspects associated with the claimed subject matter. The environment can include a middleware container for instance the middleware container can be a J2EE container. The middleware container can include M applications where M is a positive integer. Each of the applications can have a specific function e.g. customer lookup . Additionally a one or more of the applications can be an Enterprise JavaBean EJB . The middleware container can additionally include any number of threads and or any number of connections . The middleware container can manage all of these resources. The middleware container can reside upon a single machine can be spread over disparate hardware can be located at diverse geographic locations etc. By way of illustration a middleware tier that services various client and backend systems can run on eight clusters in two disparate cities and each of the clusters can include four machines however the claimed subject matter is not so limited to this example. Further the environment is horizontally scalable by adding more containers and or the environment can add additional functionality by incorporating more applications . Although not depicted it is to be appreciated that a service manager e.g. service manager . . . can be employed in connection with the middleware container to enable monitoring and or controlling resources.

According to an example a client can access an EJB e.g. application by connecting to the container e.g. cluster where the EJB is deployed. The container can initialize a copy of the EJB and allocate resources such as threads to the EJB instance. Multiple instances of the same EBJ e.g. application can simultaneously process different requests for different clients e.g. client and disparate clients not shown . When resources are unavailable the client request can be queued. If the queue fills the client request can be rejected.

Often an EJB uses subsets of backend services e.g. associated with particular ones of X backends where X is any positive integer which can be determined by data in the client request. When requests are evenly distributed an unresponsive backend service can accumulate requests in various states of processing and occupy resources until limits associated with the container are reached and thus yield rejection of requests. The resulting container resource starvation can prevent otherwise responsive requests from processing.

A conventional EJB only solution relates to creating a separate EJB for each backend service. Since most containers allow allocation limits for each EJB type this can allow operation personnel to set limits at deployment or during run time that can prevent resource starvation. However these limits also mitigate benefits associated with resource sharing of a container increase operational complexity and expose backend architecture to the client . It is to be appreciated that each of the backends can be a legacy backend a modern backend etc.

With reference to illustrated is a system that evaluates and or controls middle tier resource utilization. A resource monitor can be associated with an application which can identify required resources and or obtain accurate resource availability information. Based on this information a client request received at a service request component can be accepted predicted success or rejected predicted failure . If the request is rejected back pressure can be employed to allow a client to respond immediately rather than timing out or waiting for an inevitable failure. Thus client resource utilization and or an end user experience can be improved. Accordingly backend failures are isolated to requests for particular services and system wide failures are mitigated. If the request is accepted at the service request component e.g. number of requests does not exceed a threshold for a particular service or for a container then the request is provided to the normal processing component . At that time the resource monitor determines the number of services that are currently being executed and or that are waiting for a response from backend systems and adds one to that number. Additionally the normal processing component calls the backend system associated with the received request and waits for a response. When processing is complete the normal processing component provides data associated with the request to a service response component which can provide a response to the client. Additionally upon receipt of the data the service response component can decrement the number of requests currently being employed by utilizing the resource monitor .

The resource monitor and a service manager in general need not interact with a container not shown and is not restricted to use within containers. The container environment e.g. from and or resources managed by the container need not be manipulated. Since client requests can be rejected on the basis of backend responsiveness starvation of all container resources not just threads can be mitigated.

A service manager can include the resource monitor APIs that can be called by the application a helper that facilitates control and a service manager interface e.g. graphical user interface GUI and or command line interface CLI . The service manager can be deployed in a telecommunication carrier s middleware EJB tier that services various client and or backend systems. For instance the middleware tier can service customer billing transactions however the claimed subject matter is not so limited. This tier can provide an extensible markup language XML interface to the carrier s billing systems as well as other billing related systems e.g. backend systems . The middleware tier can be deployed as a clustered replicated multiple clusters application presenting a single EJB to clients. Clients can invoke a single API against a single bean with the request operation and parameters conveyed in the request XML. From this XML request it is possible to determine specific backend resources needed to complete the request. It is to be appreciated that the service manager is not limited to utilization in connection with a telecommunication carrier s middleware tier for example the service manager may be employed in any computing environment supporting synchronous transactions. The service manager is not limited to utilization by telecommunication carriers being deployed in Java or being employed in association with a middleware tier.

The primary classification of requests can be based on the billing system. The primary classification can further be classified by market within a billing system. The backend systems can follow this taxonomy with dramatically different architectures between various billing systems especially where two or more billing systems are being used by a carrier and separate resources allocated to individual markets or groups of markets. In the case where two billing systems are being used since requests for both of the billing systems and all markets flow through the same cluster it is possible for a single unresponsive billing system or market to consume all middleware resources. Clients making synchronous requests can also suffer from resource starvation. Conventional techniques that employ rolling bounces result in loss of all work in progress and often do little more than clear the system for inevitable recongestion and failure.

The resource monitor can track resource utilization and or responsiveness and can implement a request rejection policy. Resources can be tracked using resource identifier objects. The mapping of these identifiers with backend resources may reside in the application domain and may obscure the backend architecture from the client.

The request rejection policy can balance the need for maximum system throughput against the risk that over allocating to a single resource ID may be the precursor to system failure. All resource level requests can be handled by a single resource monitor . Accordingly a single point of control can be presented to system operators.

Any number of current requests per service and or any amount of processing time before a service is considered to be slow can be employed in accordance with the claimed subject matter. The request limit can be malleable and may be exceeded. While one or a few services may dominate these services will not be permitted to completely starve all other services. This maximizes use of processing resources while maintaining failure prevention.

A number of parameters are adjustable. In particular the following can be modified a maximum number of concurrent requests per service a maximum total number of requests per Java Virtual Machine JVM a time limit for maximum concurrent service requests to hang before rejecting new requests and a maximum number of hung requests per service before rejecting requests.

According to an illustration the following exemplary pseudo code can be employed in connection with the service manager.

Accordingly getServiceRequest can be a static service manager method returning a ServiceRequest for the associated service name. If the requested service is unavailable this method throws an exception. ServiceRequest can be the service manager object used to track an individual service allocation. Additionally freeServiceRequest can return the allocated ServiceRequest to the service manager. Failure to properly free allocated ServiceRequest objects can result in leakage. Further ServiceManagerException can be an exception thrown when a requested service is unavailable and or unresponsive.

Service manager can be utilized in the application . The backend services e.g. associated with backend systems can be analyzed and service identifiers can be mapped. Once the services are identified the service may be mapped to the client requests and a facility may be created to generate the identifiers from the client request input.

The application code can be modified so the code processing client request may be fully enclosed by the two service manager API calls. Application processing that relies on multiple backend services can make a separate getServiceRequest and an associated freeServiceRequest call for each resource. Additionally various aspects of the resource monitor can be controlled by a properties file e.g. exemplary pseudo code associated with ServiceManagerConfig is included in Appendix A .

Resource descriptors can be employed these resource descriptors can be strings that map specific client requests to a backend service. These services can be those identified as prone to failures which can include specific markets and services for example a one time automated recurring payment processing system a service that provides a mapping of a mobile phone number to a market utilized to route requests from client systems e.g. point of sale online account management . . . to an appropriate billing system and or market etc. Even though some services can be provided by the same backend service manager mitigates grouped failures from becoming catastrophic. This can result in a configuration that works well even if the backend organization changes. The resource descriptors can provide the following selected request arguments can directly relate to backend services e.g. market separate ServiceRequest s s can be utilized to avoid combining services into a single name and service identifiers can be descriptive and meaningful for operation.

The helper can provide access to the service manager for administration and management. In an EJB environment these can be an MBean conforming to the Java Management Extensions Application Program Interface JMX API and in a socket server it can be a listener on a port separate from the primary service socket.

The helper or a plurality of helpers can execute in the same Java Virtual Machine JVM as the service manager enhanced application and access the service manager for monitoring and or controlling a number of static methods. For example the helper can determine a current state including services marked as unavailable a number of services currently in use and a total number of services used by an instance. According to another illustration the helper can set the availability of all known services specified services etc. Further the helper can obtain a map of current services and their associated states. Pursuant to other examples the helper can determine if a specified service is available determine if the service manager is currently enabled or disabled and or set the service manager state to enabled or disabled.

Requests to MBeans in specific instances in a cluster can come from within the cluster. Per instance visibility can utilize a proxy bean that runs under the MBeanServer of a server. An administrator can allocate separate resources e.g. threads to the JMX beans to avoid situations where the MBeans acquire too many resources and so a system under stress does not lose access to the MBeans.

According to an example the helper can be a socket server helper. The socket server can run the helper in a separate thread in the same JVM and can listen on a control port separate from a main service port. Pursuant to an example a staged event driven architecture SEDA can be employed in connection with a socket server helper.

Referring to methodologies in accordance with various aspects of the claimed subject matter are illustrated. While for purposes of simplicity of explanation the methodologies are shown and described as a series of acts it is to be understood and appreciated that the claimed subject matter is not limited by the order of acts as some acts may occur in different orders and or concurrently with other acts from that shown and described herein. For example those skilled in the art will understand and appreciate that a methodology could alternatively be represented as a series of interrelated states or events such as in a state diagram. Moreover not all illustrated acts may be required to implement a methodology in accordance with the claimed subject matter. Additionally it should be further appreciated that the methodologies disclosed hereinafter and throughout this specification are capable of being stored on an article of manufacture to facilitate transporting and transferring such methodologies to computers. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media.

Turning to illustrated is a methodology that facilitates evaluating and or controlling requests at a middleware tier. At a request is received at a middleware tier. For instance the request can be obtained from a client and can be directed to a backend system and or service however the claimed subject matter is not so limited. At data associated with the request is analyzed. By way of example the request can be evaluated to identify a particular backend system and or server that is associated with the request. Additionally or alternatively the request can be analyzed to determine resources that are related to effectuating the request. Pursuant to a further illustration the request can be analyzed to determine a source of the request and the source can be designated as a service that is subject to a service manager in a manner similar to any other service. At a determination is made as to whether a request is likely to fail. This determination can be made for example by comparing a number of requests currently executing and or waiting for a response to a threshold value e.g. for a particular service for a container . . . . Backend responsiveness can also be considered when making this determination. If it is determined that the request will likely succeed the request is processed at e.g. transmitted to an appropriate backend . . . . If it is determined that the request will likely fail the request is rejected at . At notification of the rejection can be provided to the sender of the request. For instance the notification can be provided to the sender without requiring the sender to wait for a timeout period to expire.

With reference to illustrated is a methodology that facilitates monitoring conditions associated with service s and or container s to enable controlling requests at a middleware tier. At a request is received at a middleware tier. The request can be provided by a client a backend etc. and can be directed to a particular backend client etc. At the data associated with the request can be analyzed. By way of example the identity of the source and or the identity of the recipient e.g. client backend service and or system of the request can be identified via analyzing the data. At a determination is made as to whether the number of requests for the identified service that are currently executing and or waiting for a response including the received request exceeds a threshold. The threshold can be a static or dynamic value. Additionally the threshold can be predetermined and or modified as requests are processed. If the number of requests is greater than the threshold a determination can be made at as to whether the backend is responding slowly and or whether there is a spike in volume for the service. If the number of requests for the service does not exceed the threshold as determined at or if the backend is not responding slowly as determined at then the number of requests associated with a particular container is compared to a threshold for the container at . If the number of requests for the container exceeds the threshold at or if the backend is responding slowly as determined at then a notification is provided to the source of the request indicating that the request has been rejected at . If the number of requests for the container does not exceed the threshold at then the request is processed at .

With reference to illustrated is a methodology that facilitates monitoring and or controlling requests received at a middleware tier. At a request is received at a middleware tier. At data associated with the received request is analyzed. The analysis of the data can indicate for instance that data is associated with a particular recipient e.g. backend service backend system client . . . . At a number of requests currently being processed e.g. executing and or waiting for a response is determined. At a determination is made as to whether to reject the received request. The determination can be based at least in part upon the number of requests currently being processed e.g. for a particular service for a container . . . . If the request is rejected back pressure is immediately provided to the source of the request at . If the request is not rejected the number of requests currently being processed is increased e.g. by one at . At the request is processed for instance the request can be transmitted to the intended recipient encrypted decrypted properly routed and or addressed formatted according to a protocol associated with the recipient etc. At a response to the request is received. At the number of requests currently being processed can be decremented e.g. by one . At a response to the request can be transmitted to the source of the request.

Referring to illustrated are exemplary screenshots depicting various aspects associated with a service manager. These screenshots are provided as examples and it is to be appreciated that the claimed subject matter is not limited to these examples. Turning to illustrated is an exemplary screenshot that depicts a selected statistics tab . Displayed is a list of services and corresponding numbers of requests currently in process for each of the services. In general a high number of requests in process can indicate a backend problem associated with a particular service.

With reference to illustrated is an exemplary screenshot where a services tab has been selected. A specific service can be entered e.g. by a user via employing a keyboard . . . . Statistics associated with the service can be displayed. For example the number of requests in progress and a current status of the service can be shown. Additionally a user can select whether to enable and or disable the particular service e.g. via utilizing enable button and or disable button .

Referring now to there is illustrated a block diagram of a computer operable to provide storage and access such as for a service manager. In order to provide additional context for various aspects thereof and the following discussion are intended to provide a brief general description of a suitable computing environment in which the various aspects of the innovation can be implemented. While the description above is in the general context of computer executable instructions that may run on one or more computers those skilled in the art will recognize that the innovation also can be implemented in combination with other program modules and or as a combination of hardware and software.

Generally program modules include routines programs components data structures etc. that perform particular tasks or implement particular abstract data types. Moreover those skilled in the art will appreciate that the inventive methods can be practiced with other computer system configurations including single processor or multiprocessor computer systems minicomputers mainframe computers as well as personal computers hand held computing devices microprocessor based or programmable consumer electronics and the like each of which can be operatively coupled to one or more associated devices.

The illustrated aspects of the innovation may also be practiced in distributed computing environments where certain tasks are performed by remote processing devices that are linked through a communications network. In a distributed computing environment program modules can be located in both local and remote memory storage devices.

A computer typically includes a variety of computer readable media. Computer readable media can be any available media that can be accessed by the computer and includes both volatile and non volatile media removable and non removable media. By way of example and not limitation computer readable media can comprise computer storage media and communication media. Computer storage media includes both volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital video disk DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer.

Communication media typically embodies computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic RF infrared and other wireless media. Combinations of the any of the above should also be included within the scope of computer readable media.

With reference again to the exemplary environment for implementing various aspects includes a computer the computer including a processing unit a system memory and a system bus . The system bus couples system components including but not limited to the system memory to the processing unit . The processing unit can be any of various commercially available processors. Dual microprocessors and other multi processor architectures may also be employed as the processing unit .

The system bus can be any of several types of bus structure that may further interconnect to a memory bus with or without a memory controller a peripheral bus and a local bus using any of a variety of commercially available bus architectures. The system memory includes read only memory ROM and random access memory RAM . A basic input output system BIOS is stored in a non volatile memory such as ROM EPROM EEPROM which BIOS contains the basic routines that help to transfer information between elements within the computer such as during start up. The RAM can also include a high speed RAM such as static RAM for caching data.

The computer further includes an internal hard disk drive HDD e.g. EIDE SATA which internal hard disk drive may also be configured for external use in a suitable chassis not shown a magnetic floppy disk drive FDD e.g. to read from or write to a removable diskette and an optical disk drive e.g. reading a CD ROM disk or to read from or write to other high capacity optical media such as a DVD . The hard disk drive magnetic disk drive and optical disk drive can be connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical drive interface respectively. The interface for external drive implementations includes at least one or both of Universal Serial Bus USB and IEEE 1394 interface technologies. Other external drive connection technologies are within contemplation of the subject innovation.

The drives and their associated computer readable media provide nonvolatile storage of data data structures computer executable instructions and so forth. For the computer the drives and media accommodate the storage of any data in a suitable digital format. Although the description of computer readable media above refers to a HDD a removable magnetic diskette and a removable optical media such as a CD or DVD it should be appreciated by those skilled in the art that other types of media which are readable by a computer such as zip drives magnetic cassettes flash memory cards cartridges and the like may also be used in the exemplary operating environment and further that any such media may contain computer executable instructions for performing the methods of the disclosed innovation.

A number of program modules can be stored in the drives and RAM including an operating system one or more application programs other program modules and program data . All or portions of the operating system applications modules and or data can also be cached in the RAM . It is to be appreciated that the innovation can be implemented with various commercially available operating systems or combinations of operating systems.

A user can enter commands and information into the computer through one or more wired wireless input devices e.g. a keyboard and a pointing device such as a mouse . Other input devices not shown may include a microphone an IR remote control a joystick a game pad a stylus pen touch screen or the like. These and other input devices are often connected to the processing unit through an input device interface that is coupled to the system bus but can be connected by other interfaces such as a parallel port an IEEE 1394 serial port a game port a USB port an IR interface etc.

A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor a computer typically includes other peripheral output devices not shown such as speakers printers etc.

The computer may operate in a networked environment using logical connections via wired and or wireless communications to one or more remote computers such as a remote computer s . The remote computer s can be a workstation a server computer a router a personal computer portable computer microprocessor based entertainment appliance a peer device or other common network node and typically includes many or all of the elements described relative to the computer although for purposes of brevity only a memory storage device is illustrated. The logical connections depicted include wired wireless connectivity to a local area network LAN and or larger networks e.g. a wide area network WAN . Such LAN and WAN networking environments are commonplace in offices and companies and facilitate enterprise wide computer networks such as intranets all of which may connect to a global communications network e.g. the Internet.

When used in a LAN networking environment the computer is connected to the local network through a wired and or wireless communication network interface or adapter . The adaptor may facilitate wired or wireless communication to the LAN which may also include a wireless access point disposed thereon for communicating with the wireless adaptor .

When used in a WAN networking environment the computer can include a modem or is connected to a communications server on the WAN or has other means for establishing communications over the WAN such as by way of the Internet. The modem which can be internal or external and a wired or wireless device is connected to the system bus via the serial port interface . In a networked environment program modules depicted relative to the computer or portions thereof can be stored in the remote memory storage device . It will be appreciated that the network connections shown are exemplary and other means of establishing a communications link between the computers can be used.

The computer is operable to communicate with any wireless devices or entities operatively disposed in wireless communication e.g. a printer scanner desktop and or portable computer portable data assistant communications satellite any piece of equipment or location associated with a wirelessly detectable tag e.g. a kiosk news stand restroom and telephone. This includes at least WiFi and Bluetooth wireless technologies. Thus the communication can be a predefined structure as with a conventional network or simply an ad hoc communication between at least two devices.

WiFi or Wireless Fidelity allows connection to the Internet from a couch at home a bed in a hotel room or a conference room at work without wires. WiFi is a wireless technology similar to that used in a cell phone that enables such devices e.g. computers to send and receive data indoors and out anywhere within the range of a base station. WiFi networks use radio technologies called IEEE 802.11 a b g etc. to provide secure reliable fast wireless connectivity. A WiFi network can be used to connect computers to each other to the Internet and to wired networks which use IEEE 802.3 or Ethernet . WiFi networks operate in the unlicensed 2.4 and 5 GHz radio bands at an 11 Mbps 802.11a or 54 Mbps 802.11b data rate for example or with products that contain both bands dual band so the networks can provide real world performance similar to the basic 10 BaseT wired Ethernet networks used in many offices.

Now turning to such figure depicts a GSM GPRS IP multimedia network architecture that includes a GSM core network a GPRS network and an IP multimedia network . The GSM core network includes a Mobile Station MS at least one Base Transceiver Station BTS and a Base Station Controller BSC . The MS is physical equipment or Mobile Equipment ME such as a mobile phone or a laptop computer that is used by mobile subscribers with a Subscriber identity Module SIM . The SIM includes an International Mobile Subscriber Identity IMSI which is a unique identifier of a subscriber. The MS includes an embedded client that receives and processes messages received by the MS . The embedded client may be implemented in JAVA and is discuss more fully below.

The embedded client communicates with an application that provides services and or information to an end user. One example of the application may be navigation software that provides near real time traffic information that is received via the embedded client to the end user. The navigation software may provide road conditions suggest alternate routes etc. based on the location of the MS . Those of ordinary skill in the art understand that there are many different methods and systems of locating an MS .

Alternatively the MS and a device may be enabled to communicate via a short range wireless communication link such as BLUETOOTH. For example a BLUETOOTH SIM Access Profile may be provided in an automobile e.g. device that communicates with the SIM in the MS to enable the automobile s communications system to pull information from the MS . The BLUETOOTH communication system in the vehicle becomes an embedded phone that employs an antenna associated with the automobile. The result is improved reception of calls made in the vehicle. As one of ordinary skill in the art would recognize an automobile is one example of the device . There may be an endless number of devices that use the SIM within the MS to provide services information data audio video etc. to end users.

The BTS is physical equipment such as a radio tower that enables a radio interface to communicate with the MS. Each BTS may serve more than one MS. The BSC manages radio resources including the BTS. The BSC may be connected to several BTSs. The BSC and BTS components in combination are generally referred to as a base station BSS or radio access network RAN .

The GSM core network also includes a Mobile Switching Center MSC a Gateway Mobile Switching Center GMSC a Home Location Register HLR Visitor Location Register VLR an Authentication Center AuC and an Equipment Identity Register EIR . The MSC performs a switching function for the network. The MSC also performs other functions such as registration authentication location updating handovers and call routing. The GMSC provides a gateway between the GSM network and other networks such as an Integrated Services Digital Network ISDN or Public Switched Telephone Networks PSTNs . In other words the GMSC provides interworking functionality with external networks.

The HLR is a database that contains administrative information regarding each subscriber registered in a corresponding GSM network. The HLR also contains the current location of each MS. The VLR is a database that contains selected administrative information from the HLR . The VLR contains information necessary for call control and provision of subscribed services for each MS currently located in a geographical area controlled by the VLR. The HLR and the VLR together with the MSC provide the call routing and roaming capabilities of GSM. The AuC provides the parameters needed for authentication and encryption functions. Such parameters allow verification of a subscriber s identity. The EIR stores security sensitive information about the mobile equipment.

A Short Message Service Center SMSC allows one to one Short Message Service SMS messages to be sent to from the MS . A Push Proxy Gateway PPG is used to push e.g. send without a synchronous request content to the MS . The PPG acts as a proxy between wired and wireless networks to facilitate pushing of data to the MS . A Short Message Peer to Peer SMPP protocol router is provided to convert SMS based SMPP messages to cell broadcast messages. SMPP is a protocol for exchanging SMS messages between SMS peer entities such as short message service centers. It is often used to allow third parties e.g. content suppliers such as news organizations to submit bulk messages.

To gain access to GSM services such as speech data and short message service SMS the MS first registers with the network to indicate its current location by performing a location update and IMSI attach procedure. The MS sends a location update including its current location information to the MSC VLR via the BTS and the BSC . The location information is then sent to the MS s HLR. The HLR is updated with the location information received from the MSC VLR. The location update also is performed when the MS moves to a new location area. Typically the location update is periodically performed to update the database as location updating events occur.

The GPRS network is logically implemented on the GSM core network architecture by introducing two packet switching network nodes a serving GPRS support node SGSN a cell broadcast and a Gateway GPRS support node GGSN . The SGSN is at the same hierarchical level as the MSC in the GSM network. The SGSN controls the connection between the GPRS network and the MS . The SGSN also keeps track of individual MS s locations and security functions and access controls.

A Cell Broadcast Center CBC communicates cell broadcast messages that are typically delivered to multiple users in a specified area. Cell Broadcast is one to many geographically focused service. It enables messages to be communicated to multiple mobile phone customers who are located within a given part of its network coverage area at the time the message is broadcast.

The GGSN provides a gateway between the GPRS network and a public packet network PDN or other IP networks . That is the GGSN provides interworking functionality with external networks and sets up a logical link to the MS through the SGSN. When packet switched data leaves the GPRS network it is transferred to an external TCP IP network such as an X.25 network or the Internet. In order to access GPRS services the MS first attaches itself to the GPRS network by performing an attach procedure. The MS then activates a packet data protocol PDP context thus activating a packet communication session between the MS. the SGSN arc the GGSN.

In a GSM GPRS network GPRS services and GSM services can be used in parallel. The MS can operate in one three classes class A class B and class C. A class A MS can attach to the network for both GPRS services and GSM services simultaneously. A class A MS also supports simultaneous operation of GPRS services and GSM services. For example class A mobiles can receive GSM voice data SMS calls and GPRS data calls at the same time. A class B MS can attach to the network for both GPRS services and GSM services simultaneously. However a class B MS does not support simultaneous operation of the GPRS services and GSM services. That is a class B MS can only use one of the two services at a given time. A class C MS can attach for only one of the GPRS services and GSM services at a time. Simultaneous attachment and operation of GPRS services and GSM services is not possible with a class C MS.

A GPRS network can be designed to operate in three network operation modes NOM NOM and NOM . A network operation mode of a GPRS network is indicated by a parameter in system information messages transmitted within a cell. The system information messages dictates a MS where to listen for paging messages and how signal towards the network. The network operation mode represents the capabilities of the GPRS network. In a NOM network a MS can receive pages from a circuit switched domain voice call when engaged in a data call. The MS can suspend the data call or take both simultaneously depending on the ability of the MS. In a NOM network a MS may not received pages from a circuit switched domain when engaged in a data call since the MS is receiving data and is not listening to a paging channel In a NOM network a MS can monitor pages for a circuit switched network while received data and vise versa.

The IP multimedia network was introduced with 3GPP Release 5 and includes an IP multimedia subsystem IMS to provide rich multimedia services to end users. A representative set of the network entities within the IMS are a call session control function CSCF a media gateway control function MGCF a media gateway MGW and a master subscriber database called a home subscriber server HSS . The HSS may be common to the GSM network the GPRS network as well as the IP multimedia network .

The IP multimedia system is built around the call session control function of which there are three types an interrogating CSCF I CSCF a proxy CSCF P CSCF and a serving CSCF S CSCF . The P CSCF is the MS s first point of contact with the IMS . The P CSCF forwards session initiation protocol SIP messages received from the MS to an SIP server in a home network and vice versa of the MS. The P CSCF may also modify an outgoing request according to a set of rules defined by the network operator for example address analysis and potential modification .

The I CSCF forms an entrance to a home network and hides the inner topology of the home network from other networks and provides flexibility for selecting an S CSCF. The I CSCF may contact a subscriber location function SLF to determine which HSS to use for the particular subscriber if multiple HSS s are present. The S CSCF performs the session control services for the MS . This includes routing originating sessions to external networks and routing terminating sessions to visited networks. The S CSCF also decides whether an application server AS is required to receive information on an incoming SIP session request to ensure appropriate service handling. This decision is based on information received from the HSS or other sources such as an application server . The AS also communicates to a location server e.g. a Gateway Mobile Location Center GMLC that provides a position e.g. latitude longitude coordinates of the MS .

The HSS contains a subscriber profile and keeps track of which core network node is currently handling the subscriber. It also supports subscriber authentication and authorization functions AAA . In networks with more than one HSS a subscriber location function provides information on the HSS that contains the profile of a given subscriber.

The MGCF provides interworking functionality between SIP session control signaling from the IMS and ISUP BICC call control signaling from the external GSTN networks not shown . It also controls the media gateway MGW that provides user plane interworking functionality e.g. converting between AMR and PCM coded voice . The MGW also communicates with other IP multimedia networks .

What has been described above includes examples of the claimed subject matter. It is of course not possible to describe every conceivable combination of components or methodologies for purposes of describing the claimed subject matter but one of ordinary skill in the art may recognize that many further combinations and permutations of such matter are possible. Accordingly the claimed subject matter is intended to embrace all such alterations modifications and variations that fall within the spirit and scope of the appended claims. Furthermore to the extent that the term includes is used in either the detailed description or the claims such term is intended to be inclusive in a manner similar to the term comprising as comprising is interpreted when employed as a transitional word in a claim.

