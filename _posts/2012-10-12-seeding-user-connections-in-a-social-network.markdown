---

title: Seeding user connections in a social network
abstract: An example implementation includes identifying a cluster of associated users that includes a plurality of unregistered users based at least in part on message-related information related to a first user. The unregistered users are users that have not been registered to use a social networking service. An invitation is sent to each of the plurality of unregistered users to join the social networking service and two or more requests to join the social networking service are received from two or more interested users, respectively, the two or more interested users being included in the plurality of unregistered users. Each of the two or more interested users is registered to use the social networking service based at least in part on a join criterion.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09269081&OS=09269081&RS=09269081
owner: 
number: 09269081
owner_city: 
owner_country: 
publication_date: 20121012
---
In recent years online social networking services have become a popular mechanism for interaction between users over the Internet. For example users can use the functionality of a social network to interact with friends and relatives by posting thoughts news articles photos and videos about oneself or others meet others with similar interests and network with colleagues. Users often join a social network knowing their friends are also using the service.

However a new social networking service can have difficulty attracting users to join. In some cases this difficulty is due to a causality dilemma where the value of the new service cannot be demonstrated until a critical mass of users join and where users who are not members are reluctant to join the new service because the value of doing so has not been made clear to them. For example those who are not members of the new service may be reluctant to join because they believe that none of their friends are using it and those friends who are using it may enjoy the features of the service but may have difficulty demonstrating the value of those features to their non member friends until those friends join.

According to one innovative aspect of the subject matter being described in this disclosure a system identifies a cluster of associated users that includes a plurality of unregistered users based at least in part on message related information related to a first user. The unregistered users are users that have not been registered to use a social networking service. The system sends an invitation to each of the plurality of unregistered users to join the social networking service and two or more requests to join the social networking service are received by the system from two or more interested users respectively the two or more interested users being included in the plurality of unregistered users. Each of the two or more interested users is registered to use the social networking service by the system based at least in part on a join criterion.

In general another innovative aspect of the subject matter described in this disclosure may be embodied in methods that include identifying based at least in part on message related information related to a first user a cluster of associated users that includes a plurality of unregistered users the plurality of unregistered users not being registered to use a social networking service sending an invitation to each of the plurality of unregistered users to join the social networking service receiving two or more requests to join the social networking service from two or more interested users respectively the two or more interested users included in the plurality of unregistered users and registering each of the two or more interested users to use the social networking service based at least in part on a join criterion.

Other implementations of one or more of these aspects include corresponding systems apparatus and computer programs configured to perform the actions of the methods encoded on computer storage devices.

These and other implementations may each optionally include one or more of the following features. For instance the operations may further include determining the join criterion as being satisfied based at least in part on a total number of the two or more requests to join the social networking service that were received that the registering of each of the two or more interested users to use the social networking service is based at least in part on the determining of the join criterion as being satisfied receiving a request to identify the cluster of associated users from the first user that the identifying based at least in part on the message related information related to the first user the cluster of associated users includes aggregating the message related information from one or more information sources storing electronic messages associated with the first user upon the registering of each of the two or more interested users connecting the two or more interested users to one another on the social networking service by defining in a social graph a social graph connection between each of the two or more interested users identifying from among the cluster of associated users a registered user that is registered to use the social networking service sending an invitation to the registered user to connect with the plurality of unregistered users receiving a connection request from the registered user accepting the invitation sent to the registered user connecting the registered user to each of the two or more interested users by defining in the data store a social graph connection between the registered user and each of the two or more interested users connecting the first user to each of the two or more interested users by defining in the social graph a social graph connection between the first user and each of the two or more interested users that the registering of each of the two or more interested users further includes registering the first user to use the social networking service based at least in part on the join criterion receiving a post from the first user or one of the two or more interested users populating a content stream of the first user and each of the two or more interested users with the post determining a shared group name based at least in part on the message related information and defining in the social graph a shared group including the first user and the two or more interested users based at least in part on the shared group name the social graph connection between the first user and each of the two or more interested users and the social graph connection between each of the two or more interested users.

For instance the features may include that the electronic messages include one or more of electronic mail messages SMS MMS messages instant messages social network posts social network notifications and micro blog posts.

These implementations are particularly advantageous in a number of respects. For instance they can incentivize a group of users who are not registered members of a social network to join the network by joining together provide a satisfying and engaging experience for these newly joined users from the outset of their experience using the social network automatically organize the friends of each newly joined user into a shared group automatically identify and connect the newly joined users with friends who were already registered members of the social network etc. It should be understood however that this list of features and advantages is not all inclusive and many additional features and advantages are within the scope of the present disclosure. Moreover it should be noted that the language used in the present disclosure has been principally selected for readability and instructional purposes and not to limit the scope of the subject matter disclosed herein.

In some implementations the entities of the system may use a cloud based architecture where one or more computer functions or routines are performed by remote computing systems and devices at the request of a local computing device. For example a client device may be a computing device having a limited set of hardware and or software resources and may access hardware and or software resources provided across the network by other computing devices and resources including for instance other client devices the social network server the third party server the electronic messaging server the search server or any other entities of the system . A client device may access these resources through an access program including for example the user application . This access program may include for example a web browser or another native program operating on the device for sending and receiving information via a network and the results of any computer functions or resources may be delivered to the user of the client device via the access program. User interfaces of one such example access program are further described below with reference to at least . In some implementations the social network server the electronic messaging server or any other entity of the system may be a cloud based distributed computing system having dynamically scalable and virtualizable resources and various functionality of the social network server the social network application the electronic messaging server the data stores and and or any data data storage software or software routine may be processed and supplemented by computing systems and devices distributed over the network .

As depicted in the social network server the third party server the IM server the micro blogging server the SMS MMS server the electronic messaging server and the search server are respectively coupled to the network via signal lines and for interaction with each other and the other components of the system . The social network server the third party server the IM server the micro blogging server the SMS MMS server the electronic messaging server and the search server may be a computing device having one or more processors and one or more storage devices storing data or instructions for execution by the one or more processors. For example a computing device may be a hardware server a server array or any other computing device or group of computing devices having data processing storing and communication capabilities. The computing device may also be a virtual server i.e. a virtual machine implemented via software. For example the virtual server may operate in a host server environment and accesses the physical hardware of the host server including for example a processor memory storage network interfaces etc. via an abstraction layer e.g. a virtual machine manager . It should be understood that any of the entities of the system can be stored in any combination of devices and servers or in one device or server.

In the depicted implementation the social network server includes a social network application a social graph and a seeding engine . The social network application cooperates with the social graph to provide functionality for a social networking service also referred to as a social network and the seeding engine cooperates with the social network application to seed user connections for newly registered users in the social network. Additional structure and functionality of the social network application the social graph and the seeding engine are further described below with reference to at least .

While only the social network server is depicted in as including a seeding engine it should be understood that this implementation is provided by way of example and that any single entity or any number of entities may include an instance of the seeding engine . For example the electronic messaging server or the third party server could store and operate an instance of the seeding engine and provide access to the functionality of it to the other entities of the system via an application programming interface API . Additional structure and functionality of the seeding engine is further described below with reference to at least .

The third party server is a computing device or system for providing various computing functionalities services and or resources to the other entities of the system . In some implementations the third party server is a server hosting a network based software application operable to provide the computing functionalities services and or resources and to send data to and receive data from the other entities of the network . For example the third party server may operate a software application for managing a federated account and identity blogging social networking micro blogging photo management video music and multimedia hosting distribution and sharing business services news and media distribution or any combination of the foregoing services. It should be understood that the third party server is not limited to providing the above noted services and may include any other network based or cloud based service including for example those provided by the other entities of the system . For simplicity a single block for the third party server is shown in . However in this or other implementations several distinct third party servers not shown may be coupled to the network via distinct signal lines which operate applications providing distinct or competing functionalities and or resources.

The client devices . . . are computing devices having data processing and data communication capabilities. In the depicted implementation the client device is coupled to the network via signal line and the user s interactions with client device are depicted by line and the client device is coupled to the network via signal line and the user s interactions with the client device are depicted by line

In some implementations a client device includes a workstation computer a desktop computer a laptop computer a netbook computer a tablet computer a smartphone a set top box unit an Internet Protocol connected smart TV including a computer processor capable of receiving viewer input accessing video content on computer networks e.g. the Internet and executing software routines to provide enhanced functionality and interactivity to viewers or the like. In other implementations different client devices . . . include different types of computing devices. For example the client device is a laptop and the client device is a tablet computer. In some implementations the client device is a handheld wireless computing device which is capable of sending and receiving voice and or data communications.

The client device may include a computer processor a memory a power source and a communication unit including one or more network interfaces for interacting with the network including for example wireless transceivers to broadcast and receive network data via radio signals. The client device may also include one or more of a graphics processor a high resolution touchscreen a physical keyboard forward and rear facing cameras sensors like accelerometers and or gyroscopes a GPS receiver a Bluetooth module memory storing applicable firmware and various physical connection interfaces e.g. USB HDMI headset jack etc. etc. Additionally an operating system for managing the hardware and resources of the client device application programming interfaces APIs for providing applications access to the hardware and resources a user interface module for generating and displaying interfaces for user interaction and input and applications including for example applications for making phone calls video calls web browsing messaging social networking gaming capturing digital video and or images etc. may be stored and operable on the client device . While illustrates two or more client devices the present disclosure applies to any system architecture having one or more client devices .

In the depicted implementation the client device contains a user application executable by a processor not shown of the client device to provide for user interaction and to send and receive data via the network . In particular the user application is operable to instruct the client device to render user interfaces receive user input and send information to and receive information from the social network server and the other entities of the system . While in the depicted implementation just the client device is depicted as including the user application any number of client devices may include an instance of the user application . In some implementations the user application is client code operable in a web browser. In these or other implementations the user application is stored in a memory not shown of the client device and is accessible and executable by a processor not shown .

In some implementations the user application generates and presents user interfaces to the user via a display not shown . For example the user application may generate and present the user interfaces and depicted in respectively based at least in part on information received from the social network server via the network . In some implementations the user application is code operable in a browser launched on the client device the browser receives interface instructions from the social network application or the seeding engine of the social network server via the network in the form of a mark up language e.g. HTML XML etc. style sheets e.g. CSS XSL etc. graphics and or scripts e.g. JavaScript ActionScript etc. and the browser interprets the interface instructions and renders an interactive Web User Interface WUI for display on the client device based thereon. In other implementations some or all of the interface instructions are provided by the user application while the substantive information is provided by the social network server . Other variations are also contemplated and within the scope of this disclosure. The user application is also operable to receive input signals from the user via an input device not shown of the client device and to send information to the social network application and the seeding engine via a communication unit not shown e.g. one like or substantially similar to the communication unit .

The IM server and the SMS MMS server are computing devices for sending receiving and or relaying messages between client devices . The IM server and or the SMS MMS server may cooperate with client software operable on the client devices to generate messages including textual graphical and audio and or video data based on user input and send the messages to the designated recipient client devices . In some implementations the client devices are handheld wireless devices coupled to a transceiver node of a mobile network included in the network via a control voice and or data channel to send and receive messages. In some examples the messages sent via the IM server may be sent at least in part via Extensible Messaging and Presence Protocol XMPP Session Initial Protocol SIP Internet Relay Chat IRC protocol hypertext transfer protocol HTTP hypertext transfer protocol secure HTTPS etc. and the messages sent via the SMS MMS server may be sent via short messaging service SMS multimedia messaging service MMS eXtended Messaging Service XMS wireless access protocol WAP etc.

The electronic messaging server is a computing device for sending receiving managing and providing access to electronic mail messages. While not depicted the electronic messaging server may include an electronic message application operable to send store receive manage and provide access to the electronic mail messages. In the depicted implementation the electronic messaging server stores electronic mail messages received composed saved and or sent by users in a data store . The data store is an information source for storing and providing access to electronic message related information. In some implementations the electronic messaging server and or the social network server can manipulate i.e. store query update and or delete data information stored by the data store using programmatic operations. In some implementations the data store includes a database management system DBMS operable on the electronic messaging server or another computing device and storable in a memory thereof not shown . For example the DBMS could be a structured query language SQL DBMS. In these implementations information stored in the DBMS is stored in multi dimensional tables comprised of rows and columns and can be manipulated i.e. inserted queried updated and or deleted using programmatic operations e.g. SQL queries and statements .

The seeding engine may cooperate with the electronic messaging server to retrieve message related information including for example electronic mail messages and information describing the electronic mail messages from the data store . For example the seeding engine may signal the electronic messaging server to aggregate electronic mail messages which contain various information and provide the messages and or information to the seeding engine . In other implementations the data store is accessible by both the seeding engine and the electronic messaging server and the seeding engine may directly access and query the data store for electronic mail messages containing various information. In some implementations the electronic messaging server may transmit electronic mail messages and or information about the messages between any of the constituent elements of the system . In some implementations electronic mail messages are transmitted by the electronic messaging server and other elements of the system over the network using protocols including for example transmission control protocol Internet protocol TCP IP HTTP HTTPS internet message access protocol IMAP simple mail transfer protocol SMTP post office protocol POP Webdav etc. While only one electronic messaging server is depicted any number of electronic messaging servers could be included in the system .

In the depicted implementation the search server includes a search engine for retrieving results that match search terms from the Internet. The search server may be a server server array or any other computing device or group of computing devices having data processing storing and communication capabilities. The other entities of the system may interact with the search engine via the network to retrieve the results matching various search terms provided to the search engine . For example the seeding engine may signal the search engine to provide search results matching a particular person s name. This person may be an individual being invited to join the social network by the invitation module as discussed further below with reference to at least . For example an unregistered user s name could be provided as a search term and the top hits for that user s name could be provided by the search server to the seeding engine . Although only one search server is shown it should be understood that multiple search servers may be included in the system .

The data store is an information source that stores and provides access to an indexed copy of the network based and network accessible content hosted by the entities coupled to the network . In some implementations the information stored in the data store is retrieved and stored in part by a web crawler. In some implementations the data stored in the data store can be accessed via the search server as discussed above. In other implementations the data stored in the data store can be accessed directly. For example in the depicted implementation the social network server the social network application and or the seeding engine can access the data stored in the data store directly via signal line .

The network is a network for interconnecting computing nodes. The network may have any number of configurations or topologies. For example the network may have a star token ring or other known topology or hybrid thereof. The network may include a local area network LAN a wide area network WAN e.g. the Internet and or any other interconnected data path across which multiple devices may communicate. The network may be coupled to or include a mobile cellular network including distributed radio networks and a hub providing a wireless wide area network WWAN or other telecommunications networks. In some implementations the network may include Bluetooth communication networks for sending and receiving data. The network may transmit data using a variety of different communication protocols including for example various Internet layer transport layer or application layer protocols. For example the network may transmit data using user datagram protocol UDP transmission control protocol TCP HTTP HTTPS file transfer protocol FTP WebSocket WS WAP IMAP SMTP POP SMS protocol MMS protocol XMS protocol or other known protocols. Client devices may couple to and communicate via the network using a wireless and or wired connection. In some implementations the client devices include a wireless network interface controller for sending and receiving data packets to an access point of the network . For example the client devices may be Wi Fi enabled devices which connect to wireless local area networks WLANs including for example wireless hotspots included in the network . The client devices may also include one or more wireless mobile network interface controllers for sending and receiving data packets via a WWAN of the network .

The entities and or may require users to register for a user account to access various functionalities and services provided by these entities. For example to register a credential module included in and operated a given entity of the system may require a user to provide identifying information for example a valid electronic mail address and password and the application may test the validity of the electronic mail address by sending the a confirmation message to the address containing instructions for confirming the account e.g. selecting a hyperlink to a confirmation webpage operated by the service provider . Once registered the credential module may require a user seeking access to the service operated by this entity to authenticate by inputting the identifying information in an associated user interface.

The bus can include a conventional communication bus for transferring data between components of a computing device or between computing devices a network bus system including the network or portions thereof a processor mesh a combination thereof etc. In some implementations the social network application the seeding engine and their respective sub components and and various software operating on the social network server e.g. an operating system may cooperate and communicate via a software communication mechanism implemented in association with the bus . The software communication mechanism can include and or facilitate for example inter process communication local function or procedure calls remote procedure calls an object bus e.g. CORBA direct socket communication e.g. TCP IP sockets among software modules UDP broadcasts and receipts HTTP connections etc. Further any or all of the communication could be secure e.g. SSH HTTPS etc. .

The social network server depicted in is provided by way of example and it should be understood that the social network server may take other forms and include additional or fewer components without departing from the scope of the present disclosure. For example while not shown in some implementations the social network server may include input and output devices e.g. a computer display a keyboard and mouse etc. various operating systems sensors additional processors and other physical configurations. Additionally it should be understood that the computer architecture depicted in is applicable to the other entities of the system with various modifications. For example the third party server the IM server the micro blogging server the SMS MMS server the electronic messaging server and or the search server could have the same or a similar architecture as the social network server depicted in including for instance the processor the memory the communication unit and a data store coupled via a bus .

The communication unit may be a network interface device I F which includes ports for wired connectivity. For example the communication unit may include a CAT 5 interface USB interface and or SD interface etc. The communication unit may link the processor to the network that may in turn be coupled to other processing systems. The communication unit may provide connections to the network and to other entities of the system using standard communication protocols including for example those discussed with reference to the network . In some implementations the communication unit includes a transceiver for sending to and receiving wireless signals from the network using Wi Fi Bluetooth cellular communications etc. In the depicted implementation the communication unit is coupled to the network via signal line for communication and interaction with the other entities of the system and is coupled to data stores and via signal line and respectively for direct communication and interaction with those entities.

The memory stores instructions and or data that may be executed by the processor . In the depicted implementation the memory stores at least the social network application and the seeding engine . The memory is also capable of storing other instructions and data including for example an operating system hardware drivers other software applications databases etc. The memory is coupled to the bus for communication with the processor and the other components of social network server . The instructions and or data may include code for performing any and or all of the techniques described herein. In particular the memory includes a non transitory computer usable e.g. readable writeable etc. medium which can be any apparatus or device that can contain store communicate propagate or transport instructions data computer programs software code routines etc. for processing by or in connection with the processor . A non transitory computer usable storage medium may include any and or all computer usable storage media. In some implementations the memory may include volatile memory non volatile memory or both. For example the memory may include one or more of a dynamic random access memory DRAM device a static random access memory SRAM device flash memory a hard disk drive a floppy disk drive a CD ROM device a DVD ROM device a DVD RAM device a DVD RW device a flash memory device and any other mass storage device known for storing information on a more permanent basis. It should be understood that the memory may be a single device or may include multiple types of devices and configurations.

The processor includes an arithmetic logic unit a microprocessor a general purpose controller or some other processor array to perform computations and provide electronic display signals to a display device not shown . The processor may be coupled to the bus for communication with the other components of the social network server . The processor may process data signals and may have various computing architectures including a complex instruction set computer CISC architecture a reduced instruction set computer RISC architecture or an architecture implementing a combination of instruction sets. Although only a single processor is shown in multiple processors may be included and each processor may include a single processing core or multiple interconnected processing cores. The processor may be capable of supporting the display of images and the capture and transmission of images perform complex tasks including various types of feature extraction and sampling etc.

A social network is any type of social structure where the users are connected by one or more common features. The common features can include any attribute interest preference or interaction attributable to the users. For example the common features include relationships connections e.g. professional and academic attributes and interests friendships familial ties etc. The common features can also include explicitly defined relationships and relationships implied by social connections with other online users and entities. The common features can be provided by one or more social networking systems including for example those included in the system . In some implementations the common features are derived from the users user profiles stored in one or more information sources associated with these social networking systems. A user s user profile can include information specific to that user like personal information professional information and interaction data reflecting the user s activity on the social network. For example the personal information may describe where a user lives the user s hobbies relationship status gender age biographical information etc. the professional information may describe a user s professional experience and qualifications e.g. employment history job title skills and certifications education etc. and the social network activity may describe a user s content stream posts including content submissions notifications messages comments positive or negative endorsements for various content posted by other users etc. Common features between the personal information professional information and social network activity of the users can be mapped by the social network application to connect the users.

In situations in which the systems discussed here collect personal information about users or may make use of personal information the users may be provided with an opportunity to control whether programs or features collect personal information e.g. information about a user s social network social actions or activities profession a user s preference or a user s location or to control whether and or how to receive content from a social network server that may be more relevant to the user. In addition certain data may be treated in one or more ways before it is stored or used so that personal identifiable information can be determined for the user or a user s geographic location may be generalized where location information is obtained such as to a city ZIP code or state level so that a particular location of a user cannot be determined. Thus the user may have control over how information is collected about the user and used by a social network server.

Each individual user s relationships and connections with other users and entities explicit or implicit form a social graph for that user. For example a user s social graph may include social graph connection information describing connections between that user and the other users of the social network what common features attributes interests social network activity etc. connect that user to other users any groups sets formed by that user and or the social network application to categorize or group his or her connections on the social network the strength of the connections between the user and other users which can be calculated based on for example the degree or degrees e.g. 1st 2nd 3rd 4th etc. of separation between the user and other users who if any the connecting interstitial users are the amount or type of interactions between the users etc. etc. For instance the social network application and or a user e.g. via an associated user interface may define groups for users who are work friends school friends networking contacts clients etc. and user s the social graph may include data reflecting what groups these users belong to. Together the social graphs of the users form a collective social graph that reflects a mapping of all of the users of the social network and how they are related.

In the depicted implementation the social graph is an information source for storing and providing access to organized collections of data associated with the social network. In particular the social graph can store manage and provide access to the information connecting the users of the social network including the social graph information information describing the common features connecting the users the social network user profile information etc. The social network application the seeding engine and the other entities of the system can cooperate with the social graph to manipulate this information i.e. insert query update and or delete rows of data using programmatic operations. In some implementations the information stored by the social graph is stored in the memory of the social network server . In other implementations the social graph is included in a memory computing device and or storage system distinct from but accessible by the social network server . In various implementations the social graph stores records files objects data etc. in cooperation with a file system executable by the processor . The social graph may additionally or alternatively include a database management system DBMS executable by the processor to manage a collection of records files objects etc. For example the database could be a structured query language SQL DBMS and the data could be manipulated using SQL queries and statements.

The seeding engine is software code logic or routines for cooperating with the social network application to seed a cluster of associated users that have just registered to use the social network with connections to one another and or other users. Among other functionalities the seeding engine can aggregate message related information belonging to a given user identify one or more social clusters using information from the message related information generate and provide summaries of the one or more social clusters for selection receive a selection of one or more social clusters invite users belonging to the one or more selected social clusters that are not registered members of the social network to join and generate and provide summaries describing the status of pending invitations. In various implementations the seeding engine can aggregate message related information from various information sources and then identify the social clusters based on the aggregated information or can access the message related information from various information sources real time to identify the social clusters.

As depicted in the seeding engine includes a message aggregator a cluster processor and an invitation module . The social network server includes an interface engine a registration engine a group creator and a stream populator . These components and cooperate to provide the functionality described herein. However the arrangement illustrated in is provided by way of example and it should be understood that other arrangements are possible. For example an alternative arrangement could combine the functionality of one or more of the components and into a single module or engine integrate the seeding engine into other software applications e.g. the social network application or vice versa or further divide the modules into separate additional cooperative components.

In the depicted implementation the components and are electronically communicatively coupled for cooperation and communication with each other the social network application the seeding engine the communication unit the memory the processor and or the data store . The seeding engine and its sub components and and the social network server and its sub components and are also coupled for communication with the other entities . . . and of the system via the network . For example the seeding engine can interact e.g. via an API with the electronic messaging server the SMS MMS server the micro blogging server the IM server and or the third party server to access query and or aggregate information about electronic messages managed by these computing devices. In this example the seeding engine can interact with a credential module not shown associated with these computing devices to authenticate users seeking access to the functionality of the seeding engine and to provide the seeding engine access to information and functionality of these computing devices. In further example the seeding engine can access query and or aggregate information related to the electronic messages stored in the data store either directly via signal line or by interacting with the electronic messaging server via the network .

In some implementations the social network server the seeding engine the message aggregator the cluster processor the invitation module the interface engine the registration engine the group creator and or the stream populator are sets instructions executable by the processor or logic included in one or more customized processors to provide their respective functionalities. In various other implementations the social network server the seeding engine the message aggregator the cluster processor the invitation module the interface engine the registration engine the group creator and or the stream populator are stored in the memory of the social network server and are accessible and executable by the processor to provide their respective functionalities. In any of these implementations the social network server the seeding engine the message aggregator the cluster processor the invitation module the interface engine the registration engine the group creator and or the stream populator are adapted for cooperation and communication with the processor and other components of the social network server .

The message aggregator is software code logic or routines for aggregating message related information from one or more information sources that store electronic messages associated with one or more users. The message related information may include the electronic messages themselves or any portion thereof metadata associated with the messages message summaries etc. The electronic messages accessed by the message aggregator may be any type or combination of electronic messages sent to users. For example the electronic messages may include electronic mail messages managed by the electronic messaging server and stored in the data store instant messages stored by the instant message server SMS MMS or other similar text or multi media messages stored by the SMS MMS server micro blogging posts stored by the micro blogging server and social network posts added to a user s content stream stored in the data store etc.

In some implementations to aggregate the message related information the message aggregator can search one or more information sources for electronic messages associated with a given user. The message aggregator may be coupled via the communication unit and the network to search for electronic messages stored or managed by external information sources including for example the third party server the client devices . . . the IM server the micro blogging server the SMS MMS server the electronic messaging server data store and the search server data store . In these or other implementations electronic messages may be stored in the data store and the message aggregator may search it for message related information. In some implementations the message aggregator may cooperate interact with an information source to search the messages maintained by the information source. For example the message aggregator may access and query the electronic messages stored and maintained by one or more information sources e.g. and for message related information matching various search criteria and patterns via an API. In other implementations the message aggregator may retrieve message related information from one or more information sources e.g. and and may store and search this information independently.

The message aggregator can aggregate message related information by searching the metadata and message body of the electronic messages for various information or types of information. The metadata may include various textual fields identifying the sender of the message the recipient s of the message the date and time the message was sent the subject etc. The message body may include any type of content for relaying a message. For example the message body may include textual data audio data video data graphical data rich text and or presentational procedural and or descriptive markup information. In some implementations the message aggregator may search the electronic messages for predetermined words terms keywords phrases or other content.

The message aggregator can filter the message related information being aggregated using one or more criteria. For example the message aggregator can search for messages of a given user that were distributed to a number of other users e.g. 4 or more other people that were forwarded or replied to that relate to predetermined topics e.g. a social event or include certain keywords e.g. vacation wedding game dinner etc. . In another example the message aggregator can also filter out messages associated with a given user that do not describe or are not related to multiple other users. As a further example the message aggregator can filter out messages addressed to a single or few recipients messages that were never responded to messages identified by the message aggregator as spam or bacn etc. Spam also referred to as an unsolicited bulk message or junk message and is generally a message sent to numerous recipient users who did not request or provide permission to receive the message. Bacn is an electronic message that has been subscribed to and therefore is not unsolicited but is often disregarded by the recipient. Bacn differs from spam in that it was solicited in some way. For instance bacn may be sent to a user by organizations or business entities because the user has a registered user account with those organizations or entities. The filtering performed by the message aggregator is advantageous as it can reduce the number of messages message related information that need to be processed later by the cluster processor to identify the clusters of socially related users and thus reduce the amount of time need to perform the cluster processing. The cluster processor is discussed in further detail below.

The message aggregator can store the message related information that was aggregated in a local repository e.g. the data store for access by the other entities of the social network server . The message aggregator may also provide message related information directly to the cluster processor or the cluster processor may retrieve the data from the data store . In some implementations the message aggregator may instruct the cluster processor to process the message related information by sending a processing signal to the cluster processor .

In some implementations the message aggregator can aggregate the message related information in response to a seed request being received from an instance of the user application operating on a client device the social network application or another element of the system . A seed request is a request for the seeding engine to identify one or more clusters of users who can be seeded as connections for the user on the social network. For example a user application operating on a client device may receive user input from a requestor user requesting a user interface summarizing the social clusters be presented. Upon receiving the user input the user application may generate and send the seed request. In other implementations the message related information may be automatically aggregated and stored in advance e.g. at regular intervals by the message aggregator in cooperation with the electronic messaging server the SMS MMS server the micro blogging server and the IM server etc. for the users that exchange messages via these computing device.

A seed request can be a request from a new user who is unregistered with the social network to join the social network or by a registered user of the social network. In some implementations registration with the social network may be based on a join criterion or criteria and the registration engine may restrict users from registering unless it determines the join criterion or criteria to be satisfied. As examples to provide a new user with a satisfying and interactive experience upon joining the social network the registration engine may only register the new user if a predetermined number of other unregistered users join in connection with the new user may only register the new user if a predetermined number of users who are members of the social network i.e. already registered consent to being directly connected to the new user in the social graph may only register the new user if the number of unregistered users that join in connection with the new user and the number of members that consent to being directly connected to the user in the social graph have a combined total that equals a predetermined threshold etc. This is advantageous as it can encourage new users to join the social network in connection with other users. In these examples a seed request may be submitted by the new user requesting clusters of users that are socially connected with the new user be identified from the new users electronic messages so the new user may invite the users of one or more of these clusters to join connect on the social network.

In other examples the seed request can be a request from an existing member of the social network seeking to establish relationships with other users e.g. friends family acquaintances co workers whether they be registered users of the social network or not. For example the member may have a group of friends who are not registered users of the social network that the member frequently exchanges electronic messages with. The member desiring to interact with those users on the social network may submit a seed request and the cluster processor in cooperation with the message aggregator may surface a social cluster including those users for the member to invite to join the social network via the invitation module . It should be understood that like all examples and implementations discussed herein the above examples are non limiting and other scenarios and configurations are also possible contemplated and fall within the scope of the present disclosure.

In some implementations the seed request can include or be associated with an authentication token authorizing the message aggregator and the cluster processor to respectively aggregate and process summarize the message related information. In some implementations the social network application the electronic messaging server and any of the other entities of the system may authenticate users using a common credential module. For example the common credential module may be implemented by a federated identity authentication service for authenticating users that is operated by the social network server the electronic messaging server the third party server etc.

In some implementations the message aggregator may act as a controller for receiving the seed requests and in response to receiving it may aggregate the message related information and then signal the cluster processor to perform its operations. In other implementations the cluster processor may act as the controller and may signal the message aggregator to aggregate the message related information by sending a signal to it or may access the message related information aggregated in advance by the message aggregator from the data store . The seeding engine or the social network application may also alternatively or additionally include a discrete controller to handle the seed requests and signal the message aggregator the cluster processor and or the invitation module to perform their respective operations.

The cluster processor is software code logic or routines for processing the message related information aggregated by the message aggregator to identify social clusters rank the social clusters and generate a social cluster summary describing the social clusters and providing it for presentation to a user. A social cluster is a grouping of users who have interacted socially with one another using electronic messages. In some implementations the message related information includes the electronic messages of a given user that were exchanged with other users and the cluster processor uses this information to determine identifying information for these other users. For example the cluster processor parses a user name electronic mail address user handle phone number or other identifier for each of these other users. This identifying information can then be passed to the invitation module to send invitations to these users as further discussed below with reference to the invitation module .

In some implementations the cluster processor can process the message related information to surface the social clusters containing users that share a significant connection. The cluster processor can process various attributes of the messages reflected by the message related information to determine whether the users are significantly connected. These attributes may include the names of the users organizations entitles the users are affiliated with the number of users the messages were distributed to the length of the message threads that the messages belong to the number of users that contributed to the conversation reflected by a message thread the subject matter of the messages keywords included in the messages the number of times a message was forwarded or replied to the number of times the same users or substantially the same users were included an electronic message distribution list how current the messages are etc. For example the cluster processor may determine users to be significantly connected if they have exchanged several messages about a particular topic have exchanged messages regularly about a host of topics share the same last name belong to the same organization etc. In a further example the cluster processor may determine a group of users who were sent a single message by a given user about a general topic and to which no replies were received to not be significantly connected.

Based on the attributes the cluster processor can suggest group names for the social clusters for use in the cluster summary and in response to receiving the cluster summary the requestor can send input selecting which group name should be used to form a group with an invitation request inviting the users of one or more social clusters to join and or connect on the social network. Invitation requests are further described below with reference to at least the invitation module . For example the cluster processor may use one or more keywords a topic an organization name etc. to generate the suggestions for a group name. As a further example the cluster processor may suggest a group name of Close Friends for one or more social clusters because they had exchanged electronic messages about going on vacations together dining together planning get togethers etc. and the group creator may correspondingly name the group being created Close Friends and tag the group with attributes including vacation food social events etc.

The cluster processor can also rank the social clusters it identifies based on the above noted processing. In some implementations the processing performed by the cluster processor ranks the social clusters based on how strongly connected the users of a social cluster are. For example social clusters of users that based on the electronic messages exchanged between them are related or well acquainted engage in activities together e.g. dinner sporting events etc. frequently confer about various topics share photographs anecdotes videos etc. or work together are ranked higher by the cluster processor relative to social clusters including users that are not connected in one or more of these ways. Additionally in some implementations the more ways the users of a social cluster are determined to be connected by the processing the higher the cluster may be ranked by the cluster processor relative to the other social clusters it identifies.

In some implementations in response to a seed request being received cluster processor cooperates with the interface module to generate and transmit a summary of the social clusters to a client device of the requestor for display. In some implementations the summary of social clusters includes a description of the one or more social clusters identified by the cluster processor and the users of each social cluster. The summary may also include information describing how the users of the social cluster are related. For example the summary may describe the attributes that a social cluster is based on including what topics the users of the social cluster discussed when exchanging messages whether the users appear to be related whether the users belong to the same organizations how many messages were exchanged between the users etc. In implementations where the summary describes more than one social cluster the summary may order the social clusters in order of rank and may include indicia of each cluster s rank e.g. a score a label etc. . The summary may also include electronic links to invite the users of a social cluster to join the social network and or join a group including the users of the cluster on the social network.

The users of a given social cluster may be registered users of the social network may be unregistered users or both. In some implementations the cluster processor may use the identifying information e.g. an electronic message address a user name etc. associated with each user which was parsed from the message related information by the cluster processor to determine whether the users are registered or not. For example the cluster processor may provide the identifying information to the registration engine and receive a response from the registration engine indicating whether the users are registered or not. The cluster processor can interact with the registration engine directly or via an API. In these implementations the summary can be generated to describe whether the users in the cluster are registered or not. In other implementations the invitation module can determine whether the users of a given social cluster are registered or not by cooperating with the registration engine as further discussed herein.

The cluster processor may store the results of the processing and ranking performed by it including data describing the social clusters and the users included in the clusters in the data store for use by the other components and or may provide this information or portions thereof to these other components directly. In some implementations a social cluster summary generated based on this information may be sent by the interface engine for presentation to the user via user interfaces including for example the user interface described with reference to at least .

In some implementations the cluster processor may determine for example supplemental information about the users of a social cluster and use this information to perform the processing and ranking and to generate the social cluster summary. In particular the cluster processor may connect to an information source to obtain additional information corresponding to the information parsed from or included in the message related information. For example the cluster processor may retrieve a user s public profile information or public information about a user from the other entities and or of the system . The cluster processor may store the information obtained from these entities in the data store in association with the identifying information derived from the message related information for the user.

The invitation module is software code logic or routines for receiving an invitation request and generating and sending invitations to the users of the one or more social clusters described in the invitation request. An invitation request may include information describing the one or more social clusters selected by the requestor. For example the invitation request may include an identifier by which the social cluster is indexed in the data store and information describing what the name of the group to be created by the group creator should be. The invitation request may also include information identifying a requestor. The invitation module can act as a controller request handler for receiving and acting upon the invitation requests it receives. In some implementations responsive to receiving an invitation request the invitation module parses the invitation request for information describing the one or more social clusters selected by the requestor. Using the information describing one or more social clusters the invitation module can in some implementations retrieve information identifying the users of the one or more social clusters from the data store . Additionally or alternatively the invitation request may include information identifying the users of the one or more social clusters and the invitation module can parse the invitation request for this information.

The invitation module can identify whether the users of a given social cluster are registered. In some implementations the invitation module can use the registration information for each user of the social cluster stored in the data store by the cluster processor . In other implementations like the cluster processor the invitation module can determine whether the users of a social cluster are registered users of the social network by interacting with the registration engine of the social network application . For example the invitation module may provide the identifying information stored in the data store for these users to the registration engine and receive a response from the registration engine indicating whether the users are registered or not. The invitation module can interact with the registration engine directly or via an API.

The invitation module can generate and send invitations to unregistered users inviting them to join the social network and or to registered users inviting them to connect on the social network. For an unregistered user the invitation can include information inviting the user to agree to join the social network and be connected to the other users of the social cluster and the requestor information describing the other users that invitations were sent to and or information describing the join criterion criteria that must be met in order for the users of the social cluster and or the requestor to become registered users etc. For a registered user the invitation can include information inviting the user to agree to connect to the other users of the social cluster and the requestor information describing the other users that invitations were sent to and or information describing the join criterion criteria that must be met in order for the users of the social cluster and or the requestor to become registered users. By way of illustration if the social cluster contains unregistered users the invitation to join can describe how many of these users must agree to join the social network before the requestor and the users who have agreed to join will be registered and connected on the social network. In another example if the social cluster contains unregistered users and registered users the invitations to these users may describe the users that are registered and the users that are not and may further describe how many of the registered users must agree to connect and how many of the unregistered users must agree to join the social network before these actions are carried out by the registration engine and or the group creator .

In some implementations the invitation module can receive an invitation status request from a client device requesting an invitation status report be generated about a given invitation request and provided to the client device of the requestor. In these implementations the invitation module can act as the controller request handler for receiving and acting upon the invitation status requests it receives. In other implementations the registration engine or a discrete controller not shown may act as the handler for the invitation status requests and may interact with the invitation module and the interface engine to generate and provide the invitation status report to the requestor.

In some implementations the invitation status report can inform the requestor about whether the requirements criteria associated with the invitation request have been met the users that have been registered with the social network or connected to the newly registered users as the case may be when the invitation request was made the name of the group to be created the number of invitations that have been accepted so far the number of invitations that still need to be accepted to satisfy the requirements criteria of the request etc. A non limiting example of a user interface displaying the invitation status report is further described below with reference to at least .

The invitation status request may include data identifying the invitation request it corresponds to and the invitation module can use this data to retrieve information about it. In some implementations the invitation module can retrieve a record for the invitation request from the data store . The record can include information describing the attributes and requirements of the invitation request the social cluster s users associated with the request the requestor and or any other information related to the request. The invitation module can also access registration records for each of the users associated with the social clusters for additional information about the users and their registration status. In some implementations the invitation module can retrieve this information from the data store . In other implementations the invitation module can interact with the registration engine e.g. via an API to retrieve this information. The invitation module can use the information included in the registration records to confirm whether any users who were previously identified as unregistered by the cluster processor or the invitation module are still unregistered have requested to join the social network in response to receiving an invitation etc.

Further the invitation module can access information either stored in the data store by the group creator or provided directly by the group creator e.g. via an API that identifies whether any registered users who were invited to connect with the other users of the social cluster and or the requestor have agreed to do so by completing the instructions included the invitation e.g. selecting a confirmation uniform resource locator URL referencing the group creator . Any of the above noted information retrieved by the invitation module can then be processed and or included in the invitation status report.

The invitation module can remind re invite users to accept act on the invitations received by them. In some implementations the invitation module receives a reminder request instructing the invitation module to remind one or more users to accept previously sent invitations and the invitation module responsive to receiving the reminder request generates and sends reminders to the one or more users. In other implementations the invitation module can autonomously send the reminders at periodic intervals weekly bi weekly monthly etc. . The invitation module can generate and send reminders in the same or substantially similar way that the invitations are generated and sent. The reminders can include the same information as the invitations information about when the invitations may expire the acceptance status of the other users who received invitations any of the information includable in an invitation status report etc.

In some implementations the invitation module interacts with the interface engine to format and or send the invitations reminders and invitation status reports. In other implementations the invitation module formats and sends the invitations reminders and invitation status reports independently via the communication unit and the network . Further the invitation module can store any information associated with receiving and processing the invitation requests generating and sending the invitations and reminders and generating and sending the invitation status reports in the data store for later access by the invitation module or the other components and or of the social network server . Additionally or alternatively the invitation module may provide this information directly to other components and or of the social network server .

The interface engine is software code logic or routines for preparing and providing information to one or more of the other entities of the system via the network . In some implementations the interface engine may process and send the information upon receiving a signal from another component and or . In some implementations a signal may be received from the cluster processor instructing the interface engine to provide a cluster summary to a client device . In other implementations a signal may be received from the invitation module instructing the interface engine to provide invitations or an invitation status report to a client device for presentation. In yet other implementations the registration engine the group creator and or the stream populator may signal the interface engine to provide the summaries and information generated by these components to various client devices via the network for presentation.

The information sent by the interface engine may be processed by the interface engine to include presentational information and the user application may use the presentational information to form the look and feel of a user interface and then present the information to a user via the user interface. For example the electronic file s or data stream s may be formatted using a markup language e.g. HTML XML etc. style sheets e.g. CSS XSL etc. graphics and or scripts e.g. JavaScript ActionScript etc. and the user application may interpret the interface instructions and render an interactive Web User Interface WUI for display on a user device based thereon. Various example interfaces are described below with reference to at least . In other implementations the user application may determine the formatting and look and feel of the user interfaces independently. Using the user interfaces presented by the user application the user can input commands selecting various user actions. For example using these interfaces users transmit a seed request an invitation request a request to remind a user to accept an invitation etc.

The interface engine may be coupled to the message aggregator the cluster processor the invitation module the registration engine the group creator and the stream populator to receive information generated or processed by these components. In some implementations the interface engine may retrieve information from the memory the data store and or the social graph that was stored by these components or is supplemental to information stored by these components.

The registration engine is software code logic or routines for registering user accounts for the new users updating the social graph with profile information for the new users and connecting users. In some implementations the registration engine receives and processes registration requests. A registration request may include information about the unregistered user seeking to join the social network. For example the registration requests may include the user s full name user identifier e.g. an electronic mail address phone number username etc. password biographical information personal information and or professional information etc.

In some implementations responsive to receiving a registration request the registration engine may determine whether the user is authorized to be registered. For example if the registration engine received a registration request from a user who was sent an invitation to join the social network by the invitation module the registration engine may verify whether one or more join criteria associated with the invitation request have been satisfied prior to proceeding to register the user. A join criterion can require a certain number of unregistered users associated with a social cluster to request to join the social network by submitting a registration request can require a certain number of currently registered users associated with a social cluster to agree to connect with the other users of the social cluster can be a combination of the foregoing can require the users of the social cluster respond to receiving the invitation by certain date etc.

To register a user the registration engine may create a user account for the user based on the information included in the request and update the social graph with the profile information for the user. The registration engine may generate explicit connections to other users in the social graph by defining social graph connection information in the social graph that includes social graph connections between the user and the other users. In some implementations the registration engine defines the social graph connection information by generating and storing it in the social graph . In some implementations the registration engine may cooperate with the group creator to create a group on the social network from the users of a given social cluster that have requested to join the social network. For example the registration engine can determine whether the registration requirements i.e. join criteria associated with an invitation request are satisfied register the users associated with the social cluster who requested to be registered with the social network and can signal the group creator to store information reflecting a group in the social graph that includes those users.

The registration engine may interact with the other components and of the social network server . For example the registration engine may provide registration and profile information about a given user or users to these other entities via an API. The registration engine may be coupled to the data store and the social graph to store modify and access the registration and profile information.

The group creator is software code logic or routines for creating groups of users in the social graph based on one or more common features shared by the users. In some implementations a user using an associated interface displayed by the user application can transmit instructions to the group creator to define groups to organize the users he or she is connected with on the social network. For example the user can define a group to include family members a group to include friends a group to include college buddies a group to include users of the social network who share his interest in photograph etc. In other implementations the group creator can automatically create groups on behalf of the users. For example based on the requirements of invitation request having been satisfied the group creator can create a group from the users of the social cluster of users who accepted their respective invitations. As described elsewhere herein the requestor and other users of the social cluster that accepted their invitations could have been already registered users of the social network at the time of the invitation request could have been unregistered users of the social network or could have been a mix of unregistered and registered users.

The group creator can automatically create the group using the group name cooperatively determined by the cluster processor and the invitation module . As previously described in some implementations the cluster processor can determine how the users associated with one or more social clusters are connected based on the attributes it identifies and provide group name suggestions in the cluster summary presented to the requestor. In response the requestor may select one of the suggested group names or define a different name for the group and provide it to the invitation module in the invitation request along with his or her selection of social cluster s . The group creator can access the group name associated with the invitation request stored by the invitation module as well as the attributes stored by the cluster processor from the data store or directly from the invitation module and the cluster processor respectively. In other implementations group name suggestions can be generated and provided to the requestor of the invitation request via the network at the time the group is being created by the group creator and the requestor can select or define the name at that time. In these or other implementations the group creator may interact with the cluster processor to receive group name suggestions or may generate the group name suggestions independently in a manner that is the same or substantially similar to the cluster processor . To create the group the group name and any attributes can be stored in the social graph by the group creator in association with the users of the group as social graph information.

The stream populator is software code logic or routines for populating the content stream of one or more users with the posts of other users of the social network. A post included in a content stream by the stream populator can include one or more of text graphics video and audio. For example a user that belongs to a group newly formed from a social cluster by the group creator can submit a post by submitting a hyperlink URL or embed code for an online video he or she endorses make a comment about another user s post upload photographs from his her client device provide a positive or negative endorsement of another user s post send a message etc. and the stream populator can populate the content stream of the other users of the newly formed group with the post.

In some implementations the stream populator populates the content streams of the users of the social cluster who accepted their respective invitations with one another s posts once they have been registered as users of the social network by the registration module and or formed into a group by the group creator . In implementations where a group newly formed from one or more social clusters by the group creator includes users who were already registered members at the time of the seed request and users who were not the stream populator can populate the content stream of the users who were not with historical posts submitted by the users who were. This is provides numerous advantages including creating an environment in the social network that is comfortable and familiar for newly registered users and providing these users at the outset with an interactive and rich experience on the social network.

The data store is information source for storing and providing access to information including for example message related information user related information social cluster related information registration related information user profile information social network related information etc. In some implementations the data store is coupled for communication with the various components and of the social network server . In some implementations the data store stores message related information e.g. aggregated electronic messages cluster processing and ranking information cluster summaries records of the various requests that have been received e.g. invitation requests seed requests reminder requests content stream requests connection requests etc. the social clusters and the users associated with those clusters status information related to the invitation requests information received from the other entities and of the system etc.

In some implementations the social network application the seeding engine the message aggregator the cluster processor the invitation module the interface engine the registration engine the group creator and the stream populator are coupled to the data store via the bus to manipulate i.e. store query update and or delete data included in the data store using programmatic operations. In some implementations the data store includes a database management system DBMS operable on the social network server or another computing device and storable in the memory thereof. For example the DBMS could be a structured query language SQL DBMS. In these implementations the social network server and in particular the social network application and the seeding engine and their respective sub components are coupled to the DBMS to store data in multi dimensional tables comprised of rows and columns and manipulate i.e. insert query update and or delete rows of data using programmatic operations e.g. SQL queries and statements .

Additional structure and functionality of the seeding engine including the message aggregator the cluster processor and the invitation module the social network application including the interface engine the registration engine the group creator and the stream populator are further discussed below with reference to at least .

The method continues by inviting the users of the social cluster that are unregistered to join the social network. In some implementations users are identified as unregistered by the cluster processor . For example the cluster processor can parse identifying information for each of the users from the message related information aggregated by the message aggregator and compare this identifying information with the registration information stored in the data store or interact with the registration module by providing this information to it to determine whether the users are registered with the social network. In other implementations the invitation module performs this operation independently or in cooperation with the cluster processor and or the registration engine . The method can invite these unregistered users to join the social network by respectively sending invitations to the unregistered users. For example the invitation module can respectively transmit the invitations via the network to the client devices of the unregistered users. In one example the invitation may describe the user that submitted the invitation request the social cluster and the unregistered users associated therewith and request that the unregistered users become registered members the social network together. The invitation may also describe one or more join criteria that must be met for the unregistered users to be permitted to become members of the social network including for example the number of unregistered users associated with the cluster who must accept their respective invitations to join the social network.

Next the method respectively receives one or more join requests from one or more of the unregistered users and determines whether one or more join criteria have been satisfied. In some implementations the method receives two three four five six etc. or more requests to join the social networking service responsive to sending the invitations in block . In some implementations the one or more join criteria may require a certain number of unregistered users of the social cluster to agree to join the social networking service in response to receiving their respective invitations. By way of illustration if the social cluster includes ten unregistered users including the requestor and the join criterion set by the social network application is that at least five users must join then at least four of the users of the cluster must accept the invitation in order for any of the users of the social cluster to be permitted to register.

If the one or more join criteria has not yet been satisfied in block the method returns to block and waits for additional join requests to be submitted by the users of the cluster who were invited to join the social networking service. In some implementations if a certain period of time has passed and the one or more join criteria have not yet been satisfied the method may inform the user that submitted the seed request of such and then may terminate. In other implementations reminders may be sent by the method to the users who have not yet responded to receiving the invitation and after a certain number of reminders the method may notify the user who submitted the seed request of such and then may terminate. For example the invitation module may autonomously send reminders at various intervals or may receive a reminder request from the requestor and send the reminders in response. In yet other implementations no time constraints are placed on the invitations and the users that have not yet responded to receiving invitations may have an indefinite amount of time to do so.

Based on the join criterion criteria the method registers each of the users who are interested to use the social networking service. In some implementations the method determines in block whether the one or more join criteria have been satisfied in block and if so the method continues by registering the users from whom a join request was received in block with the social networking service. In some implementations the registration engine performs the operations described in block and . By way of example to register the users the method may create registration records for each of these users in the data store .

Next the method connects the newly registered users to one another on the social networking service. In some implementations the method connects the users by defining in a social graph a social graph connection between each of the users. The users can be connected based on one or more common attributes or features. For example as part of the registration process the registration module may update the social graph information stored in the social graph with the profile information for each of these users to generate the corrections. In another example the registration module the group creator the social network application or another sub component thereof may define social graph connections e.g. first degree connections in the social graph connecting the newly registered users. These connections can be based on fact that these users joined the social network together exchanged electronic messages prior to joining the social network and or other common features and attributes that were identified by the cluster processor from the message related information of the user that submitted the seed request. The method is then complete and ends.

The method continues by aggregating message related information of the user associated with the seed request. In some implementations the message aggregator aggregates electronic messages or information therefrom from various heterogeneous electronic message sources that are coupled to the network . For example the message aggregator aggregates electronic messages from one or more of the third party server the IM server the micro blogging server the SMS MMS server and the electronic messaging server .

Next the method identifies one or more social clusters of users from the message related information. In some implementations the cluster processor processes the message related information to identify groups of users who have communicated with the user associated with the seed request also referred to as the requestor . For example the requestor may frequently exchange electronic messages with the same or substantially the same groups of users and the cluster processor can process the electronic messages of the requestor to identify these groups of users.

The method then suggests the one or more social clusters it has identified to the requestor for selection. In some implementations cluster processor in cooperation with the interface engine generates and sends a cluster summary describing the one or more social clusters to the requestor for presentation via a cluster selection interface and the requestor using this interface selects the cluster or clusters of users that he or she wants to invite to join the social network with. In response to suggesting the one or more social clusters the method receives a selection of one or more social clusters from the requestor. In some implementations the invitation module receives the selection in the form of an invitation request.

The method continues by sending invitations to the unregistered users of the social cluster inviting them to join the social network with the requestor. In some implementations the invitation module responsive to receiving the invitation request sends the invitations to the users of the one or more social clusters that were selected and included in the invitation request. The invitation module can determine which of the users of the one or more social clusters are already registered users of the social network by using registration information stored in the data store or by interacting with registration engine .

Next the method respectively receives one or more join requests from one or more of the unregistered users and determines whether one or more join criteria have been satisfied. For example a join criterion may require a certain number of unregistered users of the one or more social clusters to agree to join the social network in response to receiving their respective invitations. If the one or more join criteria have not yet been satisfied in block the method determines whether it is permitted to resend invitations to the unregistered users who have not yet responded to the invitations that were previously sent. In some implementations the number of times invitations can be resent in block is limited so as not to pester or annoy the unregistered users. If it is determined in block that it is okay to resend invitations the method returns to block and invitations are resent to the users who have not yet responded to the invitations that were previously sent. The sequence in blocks and can be repeated until the one or more join criteria are determined to be satisfied in block or the method terminates.

Once the one or more join criteria have been satisfied in block the method continues by registering the users that responded to receiving an invitation. In some implementations the registration engine performs the operations described in block and and interacts with the invitation module to resend the invitations in block e.g. by sending the invitation module a signal to resend the invitations . In some implementations to register the users the method may create maintain registration records for each of these users in the data store .

Next the method connects the newly registered users based on one or more common attributes or features. For example as part of the registration process the registration module may update the social graph information stored in the social graph with the profile information for each of these users. In another example the registration module the group creator the social network application or another sub component thereof may define first degree social graph connections in the social graph directly connecting the newly registered users associated with the social cluster. These connections can be based on fact that these users joined the social network together exchanged electronic messages prior to joining the social network and or other common features and attributes that were identified by the cluster processor from the electronic messages of the user that submitted the seed request.

The method continues by populating the content stream of each newly connected user with the content provided by the other newly connected users. For example the method can receive a post from the requestor or one of the users who were connected in block and can populate the respective content streams of the requestor and these users with the post. This is advantageous as it provides these new users with content in their content stream without them having to explicitly find and connect with other users on the social network. It also provides these new users with an engaging environment at the outset of their experience on the social network. The method is then complete and ends.

While methods and are described primarily in context of seeding user connections using social clusters that include unregistered users it should be understood that the social clusters can include both registered and unregistered users that these registered users can be invited to connect with the unregistered users that these registered users can be connected to the unregistered users once the one or more join criteria have been satisfied and they become registered and that the social streams of these unregistered users can be populated with the content provided by the registered users and vice versa as further described above with reference to at least .

The method continues by receiving one or more invitation responses e.g. in the form of join requests or connection requests from one or more of the users who received invitations in blocks and or and determines whether one or more join criteria have been satisfied. For example the one or more join criteria may require a certain number of unregistered users of the social cluster s to agree to join the social network and or a certain number of registered users to agree to connect with the other registered users and or unregistered users once registered in response to receiving their respective invitations. By way of illustration the one or more join criteria may be satisfied if the number of affirmative invitation responses received reaches a predetermined threshold e.g. 3 4 5 6 etc. from the users of the social cluster s regardless of whether the users are already registered users of the social network or not. In another example the one or more join criteria may be satisfied if at least certain percentage e.g. 30 40 50 of the total number of unregistered users agree to join the social network by sending an invitation response.

If the one or more join criteria has not yet been satisfied in block the method determines whether it is permitted to resend invitations to the unregistered and or registered users who have not yet responded to the invitations that were previously sent. In some implementations the number of times invitations can be resent in block is limited so as not to pester or annoy the nonresponsive users. If it is determined in block that it is okay to resend invitations to the nonresponsive users the method resends the invitations and returns to block and waits to receive invitation responses from these users. The sequence in blocks and can be repeated until the one or more join criteria are determined to be satisfied in block or the method terminates.

Once the one or more join criteria have been satisfied in block the method continues by registering the unregistered users that responded to receiving an invitation. In some implementations the registration engine performs the operations described in blocks and and interacts with the invitation module to resend the invitations in block e.g. by sending the invitation module a signal to resend the invitations .

The method then continues to create a shared group which includes the users who accepted their respective invitations. For example the method can create the shared group by defining in the social graph the shared group that includes the requestor of a seed request and the unregistered and or registered users who respectively requested to join and or connect. In some implementations the group creator defines the group by updating the social graph connection information stored in the social graph with social graph connections e.g. explicit first degree connections between the users of the group and updating user profile information for each of the users of the group with information about the group e.g. a group name .

A shared group can include a group that is already populated with users either based on data generated by the seeding engine and or the social network application or input provided by a user via an associated user interface. For example a group including popular vocalists who are also users of the social network may be created by user and shared with users via an associated user interface so that users do not also have to create the group but can benefit from user s efforts to create the group. In another example the group creator can create a group that includes the users that accepted their invitations as described herein and share it with each of those users. To share the group an instance of the group is associated in the social graph with each of the users the group is shared with and each of these users can further customize his or her instance of the group e.g. by deleting or adding users without affecting any of the other instances of the group. In various implementations the method can also determine a name for the group based on the message related information from which the one or more social clusters were determined and can use the name for naming the group. The method can also forgo creating the group and simply connect the users. In some implementations the method can connect the users to one another by defining in the social graph a social graph connection between each of the users. The method is then complete and ends.

In some implementations a social cluster listed in the tabbed cluster selection region includes a selection box for selecting the cluster lists the names of the people included in the social cluster provides a description of how these people are connected to John Public and includes an expand button not labeled for showing additional information about the clusters the messages the cluster was derived from etc. In the depicted implementation to select a cluster a user checks the checkboxes next to the clusters that the user wishes to select and then selects the button labeled Add to list to add the checked clusters to the invitation region . Then upon clicking the button labeled Continue a seed request including the selected clusters is generated and transmitted by the user application to the seeding engine for processing.

In the depicted implementation a list of suggestions for a group name that includes the users from social clusters is provided to user. The name selector can be any known selector or input element. In some implementations the user can override the suggested names provided in the name selector with a customized name input by the user. The name selected by the name selector can then be included in the seed request transmitted to the seeding engine and the group creator can use the name when creating the group on the social networking service from the users included in the one or more social clusters selected by the user using the functionality provided by the tabbed cluster selection region .

In the depicted implementation the summary region includes a table describing the users that were invited to join or connect on the social network a status identifier identifying whether or not the users have accepted the invitations and options to resend invitations to one or more of the users or to contact one or more of the users. Other information about the social clusters the seed request or the invitation request can also be included. For example the summary region can include whether or not a user of the social cluster is registered or unregistered contact information for each of the users displayed in the summary region including for example the electronic address used to contact the user etc. In some implementations when the user selects the hyperlink labeled Contact for a particular user the user application can generate an interface for sending an electronic message the user. In other implementations when the user selects the hyperlink labeled Resend invitation for a particular user the user application can generate and send a request to the invitation module requesting an invitation be resent to that user. In other implementations the user interface can include a global resend invitation element that when selected sends a request to the invitation module via the network requesting that all users who have not yet accepted their respective invitations to accept be reminded re invited.

It should also be understood that the user interfaces described in are merely examples and that the interface elements may have a variety of distinct formats content positions within the window and combinations all of which are encompassed by the scope of the present disclosure.

Systems and methods for seeding user connections in a social network have been described. In the above description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of this disclosure. It should be understood however that the systems methods and computer products described herein can be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to avoid obscuring the disclosure. For example the various components operations and or features are described in some implementations above with reference to user interfaces and particular hardware. However the present disclosure applies to any type of computing device that can receive data and commands and any peripheral devices providing services.

Reference in the specification to one implementation an implementation some implementations etc. means that a particular feature structure or characteristic described in connection with the implementation is included in at least one implementation. The appearances of the phrase in one implementation or in some implementations in various places in the specification are not necessarily all referring to the same implementation.

Some portions of the detailed descriptions above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms including for example processing or computing or calculating or defining or identifying or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The present disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may include a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium including for example any type of disk including floppy disks optical disks CD ROMs and magnetic disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards flash memories including USB keys with non volatile memory or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The disclosure can take the form of an entirely hardware implementation an entirely software implementation or an implementation containing both hardware and software elements. In a preferred implementation the disclosure is implemented in software which includes but is not limited to firmware resident software microcode etc.

Furthermore the disclosure can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain store communicate propagate or transport the program for use by or in connection with the instruction execution system apparatus or device.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers.

Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modem and Ethernet cards are just a few of the currently available types of network adapters.

Finally the algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear from the description above. In addition the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.

The foregoing description of the implementations of the present disclosure has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the present disclosure to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the present disclosure be limited not by this detailed description but rather by the claims of this application. As will be understood by those familiar with the art the present disclosure may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the modules routines features attributes methodologies and other aspects are not mandatory or significant and the mechanisms that implement the present disclosure or its features may have different names divisions and or formats. Furthermore it should be understood that the routines features attributes methodologies and other aspects of the present disclosure can be implemented as software hardware firmware or any combination of the three. Also wherever a component an example of which is a module of the present disclosure is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way. Additionally the present disclosure is in no way limited to implementation in any specific programming language or for any specific operating system or environment. Accordingly the present disclosure is intended to be illustrative but not limiting of the subject matter set forth in the following claims.

