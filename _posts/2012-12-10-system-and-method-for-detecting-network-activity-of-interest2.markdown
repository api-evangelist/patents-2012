---

title: System and method for detecting network activity of interest
abstract: A network activity detection system is trained to detect network activities of interest such as threats by malicious computer data. The training involves distilling the characteristics of known network activities of interest (e.g., intrusion by computer viruses, exploits, worms, or the like) into a minimal set of meta-expressions. At run-time, the network activity detection system combines the minimal set of meta-expressions with efficient computer algorithms for evaluating meta-expressions to detect known network activities of interest, as well as their unknown variants, among an unknown set of network activity. The network activity detection system may produce appropriate responses upon the detection of network activities of interest.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09621578&OS=09621578&RS=09621578
owner: TrustPipe LLC
number: 09621578
owner_city: Healdsburg
owner_country: US
publication_date: 20121210
---
This application is a continuation U.S. non provisional application Ser. No. 13 479 222 filed May 23 2012 which is hereby incorporated by reference in its entirety for all purposes.

The present disclosure relates generally to the field of digital security and more specifically to detecting activities of interest in network traffic including the detection of malicious network activities.

The proliferation of computing technologies has presented challenges in the field of digital security. As is well known a networked computer i.e. a network node may spread malicious computer data to other network nodes thereby inflicting system disruption and possibly economic loss. One of ordinary skill in the art would appreciate that attacks based on malicious computer data include computer viruses malware worms Trojan horses bots intrusions e.g. unauthorized access exploits e.g. escalation of privileges violation of confidentiality time based attacks e.g. Denial of Service or the like. The term threat is used to describe one or more of these types of attacks.

Digital security technologies may be used to detect and or remove malicious computer data from network traffic. One of ordinary skill in the art would appreciate that digital security technologies can reside at various network nodes can be packaged in hardware and or software and can include anti virus software malware detection intrusion prevention anti attack firewall or the like though the terms are not identical in meaning. The term Unified Threat Management UTM has been used to describe one or more of these implementations of digital security technologies.

Conventional digital security technologies typically detect threats using signatures that correspond to specific threats. Existing designs under this paradigm are deficient in at least two ways. First the detection of a threat relies on the a priori knowledge of the specific threat and the availability of a signature for the specific threat. For example conventional digital security technologies may rely on a known signature to detect the presence of a known computer virus. Thus conventional digital security technologies may not be able to detect threats for which a signature is not yet available. For example conventional digital security technologies may not be able to detect an unknown variation of a known computer virus.

Second due to the ever increasing number of known threats conventional digital security technologies maintain a growing number of signatures. As incoming network traffic is obtained the maintained signatures are scanned against incoming data for possible threats. The scanning process uses substantial computing resources. By one estimate in the context of enterprise level data centers up to 85 of a data center s computing power may be spent on digital security operations leaving only a fraction of its true capability to business operations. In the context of consumer computers it should not surprise even the casual computer user that the operation of anti virus software can cause a computer to become sluggish.

Despite improvements in the field conventional digital security technologies continue to be limited by these deficiencies which are consequences of their design.

In one exemplary embodiment a plurality of Transmission Control Protocol TCP packets and a plurality of Internet Protocol IP packets are obtained from network traffic. The obtained network packets include a network activity of interest. A plurality of combined packets is created. A first combined packet of the plurality of combined packets comprises a portion of at least one of the plurality of TCP packets and a portion of at least one of the plurality of IP packets. A second combined packet of the plurality of combined packets comprises a portion of at least one of the plurality of TCP packets and a portion of at least one of the plurality of IP packets. The first and second combined packets are different. A relevant subset of the first and second combined packets is converted into sequences of integers. A similarity metric is determined between the first and second sequences of integers. A third sequence of integers is created based on the similarity metric wherein the third sequence comprises a third plurality of integers common to the first sequence and the second sequence in the order in which the common integers were presented in the first sequence. A fourth sequence of integer is created based on the frequency in which the third sequence of integers appears in the same order in the plurality of combined packets. The fourth sequence of integers is used to identify network activities of interest in an unknown set of network traffic.

In one exemplary embodiment a plurality of Transmission Control Protocol TCP packets and a plurality of Internet Protocol IP packets are obtained from network traffic. A plurality of combined packets is created. A combined packet comprises a portion of at least one of the plurality of TCP packets and a portion of at least one of the plurality of IP packets. A sequence of integers is obtained. If the integers of the sequence of integers appear in the combined packet in the same order the combined packet is considered abnormal a network operation is initiated. The network operation may be a user alert an instruction to cloak a network node or an instruction to drop a network packet from transmission.

The following description is presented to enable a person of ordinary skill in the art to make and use the various embodiments. Descriptions of specific devices techniques and applications are provided only as examples. Various modifications to the examples described herein will be readily apparent to those of ordinary skill in the art and the general principles defined herein may be applied to other examples and applications without departing from the spirit and scope of the various embodiments. Thus the various embodiments are not intended to be limited to the examples described herein and shown but are to be accorded the scope consistent with the claims.

The embodiments described herein include techniques for detecting network activities of interest. Exemplary network activities of interest include threats based on computer viruses malware worms Trojan horses bots intrusions e.g. unauthorized access exploits e.g. escalation of privileges violation of confidentiality timed based attacks e.g. Denial of Service or the like. Exemplary network activities of interest may also include illicit downloads of copyrighted and or obscene materials via a network.

At block a UTMS is trained to recognize characteristics in network traffic that are associated with a network activity of interest. For example the UTMS may be provided with a series of network traffic that reflects a particular known threat. Such a series of training network traffic may be obtained from for example a network packet capture application programming interface API such as pcap . Training network traffic may also be obtained from internet repositories of network traffic such as from the Openpacket organization. Although the names of APIs and or repositories may change from time to time the concept of capturing network traffic should be within the grasp of one of ordinary skill in the art.

At block the UTMS identifies from the training network traffic bounded sequences of computer data that can be used later to identify the presence of the same network activities of interest in another unknown set of network traffic. In addition by way of processing at block the UTMS also becomes able to identify the presence of threats that are related to the threat that was previously provided in the training network traffic i.e. a variant .

At block the UTMS monitors a set of network traffic to determine whether the trained and related network activities of interest are present in the network traffic. For example the UTMS may determine if one node in the network is attempting to attack another network node with a variation of the threat previously provided in the training network traffic to block .

At decision block the UTMS determines whether the monitored set of network traffic is normal or abnormal. Abnormal network traffic are those that in which the UTMS has identified a network activities of interest. If abnormal network traffic is found processing proceeds to block where the UTMS generates one or more appropriate responses. An appropriate response may be a user or system alert. Another appropriate response may be to scrub the response from the compromised network node such that the intruding network node remains unaware of the successful attack. Yet another appropriate response may be to cloak the network node that is targeted for attack so that the attacking network node can no longer reach the target network node. If no abnormal network traffic is found processing returns to block and the UTMS monitors another set of network traffic.

In the discussion below the threat of computer viruses is used as an exemplary network activity of interest for sake of simplicity. However process is not so limited. Rather process may be used by a UTMS to manage many other kinds of network activities of interest as discussed above. Coincidentally the exemplary discussion of computer viruses highlights the substantial advantages of process in a way that is understandable to many computer users.

At present over 2 million computer viruses are known to exist. The exact count varies between 2.5 million and 8 million because different sources of authority catalogue computer viruses differently. At block of process a UTMS may be provided with network traffic that reflects attacks based on one or more known computer viruses. At the completion of block the UTMS becomes trained to detect the presence of those one or more computer viruses as well as their variants in network traffic. At blocks the UTMS monitors network traffic for the presence of those one or more computer viruses and their variants. In this way the UTMS is able to manage attacks that are based known threats and their unknown variants.

Process is notable in at least two ways. First block produces bounded sequences of data that can be used to detect all known computer viruses and their variants. Thus a UTMS using process need not necessarily rely on the a priori knowledge of a specific computer virus in order to detect the computer virus in network traffic during operation. Second block produces bounded sequences of data that are efficient in structure and in size as compared to computer viruses signature files that are used by conventional computer anti virus technologies. Specifically it has been determined that bounded sequences of data totaling less than 200 8 bit bytes are sufficient to identify most if not all of the computer viruses presently known to exist under process . This size stands in stark contrast to the size of conventional computer viruses signature files which range from 50 megabytes MB to 300 MB in size. To put into perspective the size of 50 MB is larger than the size of 200 8 bit bytes by 5 orders of magnitude. Thus tremendous computational efficiencies can be realized during operation of a UTMS using process .

Network packets that are provided to block should include a network activity of interest for purposes of training a UTMS. In the present example the network activity of interest is the presence of a computer virus in the network traffic between two network nodes. Thus the network packets provided to block should represent an attack by one network node against another network node using a computer virus and should also represent the resulting responses from the network node that is attacked.

The grouping of network packets between two network nodes at block is bidirectional because network traffic both to and from a pair of network nodes are grouped together. Bidirectional network traffic typically consists of different levels of communication from the initial handshake to the full transfer of data between the two network nodes. This grouping of bidirectional network packets is based on the existence of an established communication between two network nodes. An established communication between two network nodes is sometimes referred to as a conversation . Two network nodes may request to establish a communication via one channel. For example a host and a server may handshake on one port. Once communication is established the two network nodes may communicate further through a newly created channel. For example the host and the server may communicate through TCP IP on another port that is different from the port through which the established communication was initially requested.

In one embodiment the grouping of bidirectional network packets at block begins with the identification of a network packet in network traffic that represents the beginning of an established communication and another network packet in the network traffic that represents the end of the established communication. The beginning of an established communication may be a network packet that contains a request. The end of an established communication may be a network packet that contains a corresponding acknowledgment. In one embodiment additional network packets may be identified such as a network packet that represents a request acknowledgement . Network packets at different layers of the OSI model may provide request and acknowledgement information. For example both HTTP network packets i.e. at the OSI application layer and TCP network packets i.e. at the OSI transport layer contain request fields either of which is sufficient for purposes of block . In this way block may group together bidirectional network packets that correspond to an established communication without relying on source network addresses and destination addresses. Block may also group together bidirectional network packets that correspond to an established communication without relying on source and destination port numbers.

Block is now discussed with reference to . As shown network packets represent a series of network packets between network nodes and . Network packet is sent by network node to network node and includes a request. Thus network packet indicates the beginning of a series of network packets that are to be grouped together. In this context network node may be referred to as a host because it initiated a request and network node may be referred to as a server because it is the recipient of the request. Network packets and are sent by network nodes and respectively and represent bidirectional communication of data between the two network nodes that should be grouped together. Network packet is sent by network node to network node to acknowledge that an appropriate amount of data has been received. Thus network packet indicates the end of the series of network packets that are to be grouped together. In this way network packets to are grouped together at block into a bounded group of network packets. This group of network packets is referred to as being bounded because there is a clear beginning and a clear end to the group of data. Block may be repeated to produce additional groups of bidirectional network packets between pairs of network nodes.

It should be appreciated that the grouping of network packets carried out at block also implicitly captures other types of information that are useful for detecting network activities of interest. For example in a Denial of Service attack DoS which is a type of time based attack a relatively large number of network packets are transmitted over a given timeframe. The occurrence of network packets over a relevant timeframe that result from a DoS attack or more generally a timed based attack is implicitly captured at block because block groups together those network packets into bi directional conversations. The grouped network packets are then analyzed for information relevant to detecting a future DoS attack by downstream processes in process .

Only certain fields within the network packets that are grouped by block are relevant to detecting network activities of interest. At block the relevant information is retained and extraneous information is discarded. Block is now discussed with reference to . illustrates the layout of an IP network packet with the fields relevant to detecting network activities of interest circled. These relevant fields include Type of Service TOS Total Length of IP network packet IP Flags Time to Live Protocol IP Options and data content . illustrates the layout of a TCP network packet with the fields relevant to detecting network activities of interest e.g. computer viruses circled. These fields include Sequence Number Acknowledgement Number Offset TCP Flags Window Urgent Pointer TCP Options and data content . In this way the output of block is reduced to contain only information that is relevant to detecting network activities of interest. This retention process is applied to each IP and TCP network packet that is in the groups of network packets produced by block . The output of block is referred to as reassembled packets .

Three aspects of block are noteworthy. First block does not retain the source or destination addresses in an IP network packet or the source or destination port numbers in a TCP network packet. Thus a UTMS using process does not need to rely on network address nor port information in order to detect network activities of interest. Second Header Length IHL is used to determine the length of an IP network packet header so that the relevant fields within the IP network packet can be properly grouped but Header Length IHL is not itself retained in the output of block . Third the retained fields are not limited to the detection of computer viruses which is the network activity of interest in the present example. Rather the fields support the detection of the full range of network activities of interest as discussed above.

At block the reassembled packets i.e. relevant information from block are converted bitwise into integers thereby producing sequences of integers that correspond to a subset of the information originally provided to process . In one embodiment 8 bit integers are used. One of ordinary skill in the art would appreciate that IP and TCP network packets contains fields that are less than 8 bits exactly 8 bits and more than 8 bits long. Fields that span less than 8 bits are converted to 8 bit representation by padding zeros to the most significant output bits. For example block converts bits 100 to 0000 0100 . TOS and IP Flags which are 4 bit and 3 bit fields respectively are converted in this way. Fields that span more than 8 bits are converted into multiple 8 bit segments. For example block converts bits 0001 0010 0100 1000 to 0001 0010 and 0100 1000 . Data content which spans more than 8 bits is converted in this way.

Blocks and are now discussed with reference to . illustrates a portion of an IP network packet. As discussed above within IP network packet TOS and Total Length among others are useful for detecting network activities of interest. Thus fields and are retained by block and are provided to block for conversion to integers. Reassembled packet represents the portions of IP network packet that are retained by block . Block converts the contents of reassembled packet bitwise into 8 bit integers and . Note for sake of simplicity only a portion of an IP network packet is shown in . During normal operation block processes the entire groups of IP and TCP network packets produced by block and block in turn processes the entire groups of IP and TCP network packets retained by block . In this way block produces a sequence of 8 bit integers containing the integers 40 1 83 . . . . Optionally sequence of 8 bit integers may be limited to 65 536 8 bit integers in length.

As used here the term sequence describes a list of ordered elements e.g. integers. It should be appreciated that the ordering of elements within sequence of integers is derived from the ordering and adjacency of relevant portions of bidirectional network traffic processed by blocks . Put another way to the extent that a network activity of interest produces a characteristic response in network traffic as between two network nodes that response is captured by the processes of blocks . The response is further distilled in the processes of blocks discussed below so that it becomes useful for detecting network activities of interest in an unknown set of network traffic.

At block a distance function is used to identify characteristics from the sequences of integers produced by block . The distance function is performed against sequences of integers that are adjacent in time meaning that a sequence of integers produced by block based on one group of network packets from block is compared against the next adjacent sequence of integers produced by block based on the next adjacent group of network packets from block .

Conventional distance functions such as string distance functions are well known in the art and are not discussed in detail here. As an example a conventional string distance function may be used to determine that the strings a b c and z b c have a distance of 1 because the strings vary only in that a in the former is replaced with z in the latter and represents the sole difference between the two strings. The groups of network packets produced by block lend themselves to comparison by distance functions because block produces sequences of integers which may be treated as individual elements by a distance function. Conventional string distance functions however do not provide distance metrics that are sufficient for detecting network activities of interest. For example the knowledge that two strings differ by a distance of 1 provides little useful information for computer virus detection.

In one embodiment block performs a custom distance function described below that produces reduced sequences of integers that support the detection of network activities of interest. For the sake of simplicity the custom distance function of block is discussed with references to . illustrates exemplary process for performing the custom distance function in one embodiment. illustrates exemplary groups of network packets as they are processed by exemplary process in the one present embodiment.

Turning to at block the custom distance function identifies integers that appear within adjacent pairs of sequences of integers produced by block . illustrates exemplary sequences of integers . illustrates exemplary integer 101 which appears in at least pairs of adjacent sequences of integers and . Note sequences of integers are not illustrated for simplicity. At block the custom distance function also identifies the first instance of an identified integer in pairs of adjacent sequences of integers. illustrates the first instance of 101 being identified in adjacent sequences of integers and .

At block the custom distance function aligns the first instances of the identified integer in a pair of adjacent sequences of integers. illustrates the alignment of the first instances of 101 in pairs of adjacent sequences of integers and .

At block a reduced sequence of integers may be created under some conditions for a pair of adjacent sequences of integers. A reduced sequence of integers is created for a pair of adjacent sequences of integers if one or more of the integers that are common to the pair of adjacent groups of sequences of integers i appears in the same order in the pair of adjacent groups of network packets and ii has positions in the pair of adjacent groups of network packets that are within a first threshold distance. In one embodiment the first threshold distance is four. If created a reduced sequence of integers would comprise integers that satisfy requirements i and ii stated above with respect to a pair of adjacent sequences of integers .

Blocks repeat for other integers that appear within at least a pair of adjacent sequences of integers. For example the integer 48 also appears in at least one pair of adjacent sequences of integers among sequences of integers . Thus blocks are repeated for 8 bit integer 48 .

At the completion of block which is an exemplary string function carried out in block of processing proceeds to block . At block the frequency at which a reduced sequence of integers appears within a second threshold distance in the groups of network packets created at block is determined. The first and second threshold distances may be the same or may be different. In one embodiment the second threshold distance is four. illustrates sequences of integers that were created by block . In addition illustrates the appearance of reduced sequences of integers within sequences of integers . As shown reduced sequence of integers 101 48 52 appears within the exemplary second threshold distance of four in eight out of the ten sequences of integers . Thus a frequency of 80 is associated with reduced sequence of integers . For the same reason a frequency of 80 is associated with reduced sequence of integers . Note reduced sequences of integers and do not appear within the second threshold distance of four in this example in sequence of integers because the integers 101 and 48 are separated by more than four positions in group of network packets . Also as shown reduced sequence of integers 53 101 appears within the exemplary second threshold distance of four in three out of the ten groups of network packets . Thus a frequency of 30 is associated with reduced sequence of integers . The frequencies associated with reduced sequences of integers are illustrated in . These values which indicate the frequencies with which reduced sequences of integers appear in order within a threshold distance in groups of network packets may be referred to by the term confidence values .

At block reduced sequences of integers having confidence values below a threshold confidence value are discarded. In one embodiment the threshold confidence value is between 80 90 . illustrates the discarding of reduced sequence of integers . In addition reduced sequences of integers and which are the same are de duplicated and maintained as reduced sequence of integers . For purposes of this disclosure reduced sequence of integers may be referred to by the term meta expression .

Meta expression represents the information that is sufficient to detect a network activity of interest within network traffic. Specifically meta expression is sufficient to detect the network activity represented by the initial input to process . Recall that the input to process was a series of network packets that represents an attack by one network node against another network node using a computer virus and the responses from the compromised network node.

Process may be repeated for other types of network activities of interest. For example process may be performed using network traffic that indicates an attack by computer worm A to identify a meta expression for detecting computer worm A and its variants. Process may be performed again using network traffic that indicates an attack by computer exploit B to identify a meta expression for detecting computer exploit B and its variants. Indeed process may be repeated for different computer viruses malware worms Trojan horses bots intrusions e.g. unauthorized access exploits e.g. escalation of privileges violation of confidentiality time based attacks e.g. Denial of Service or the like that are known to exist in order to determine meta expressions that can be used to identify those malicious computer instructions as well as their variants.

Importantly it has been determined that many different malicious network activities share the same meta expressions. That is to say two different network activities of interest such as a known computer virus A and a known computer virus B may share the same meta expression and therefore are detectable using the single meta expression. Further a meta expression that is generated from an existing computer virus for example can be used to detect all variations of the existing computer virus regardless of the permutations sizes or characteristics of the variations i.e. even if the variations are unknown . Only a completely new type of computer virus and not a variation on an existing computer virus would not be detected by the existing meta expression. In this way a handful of meta expressions are sufficient to identify many if not all of the known computer viruses which number between 2.5 to 8 million depending on the source of authority as well as their variants.

The efficiency with which network activities of interest can be detected using the meta expressions provided by process are now discussed. At the completion of process which is an exemplary UTMS training process carried out at block of processing proceeds to block of . At block a UTMS utilizes meta expressions to analyze network traffic and to detect whether the network traffic is normal or abnormal. Processing at block begins with the grouping of a series of bidirectional traffic between two network nodes. For this purpose the techniques of block may be used. Next the groups of network packets are filtered for relevant information. For this purpose the techniques of block may be used. Next the reassembled packets containing relevant information which form new groups of network traffic are converted into sequences of integers. The bit size of the integers used during run time should be the same as the bit size of the integers used during training. In one embodiment the integers are 8 bit in size. For purposes of converting reassembled packets into sequences of integers the techniques of block may be used.

The sequences of integers produced by block are compared against one or more meta expressions to determine if the network traffic that is being analyzed is normal or abnormal. A set of network traffic that is being analyzed is considered abnormal when two criteria are satisfied i each integer in the meta expression is present in the sequence of integers that corresponds to the network traffic and ii each integer appears in the same order in both the corresponding sequence of integers and the meta expression. Notably a group of network packets is considered normal at the first instance in which condition i fails to hold true. The failure of condition ii is less useful because a sequence of integers may have multiple instances of a particular integer and all of the instances must fail condition ii in order for condition ii to fail as a whole. 

When abnormal traffic is detected the UTMS follows decision block to block where appropriate responses are generated. When normal traffic is detected the UTMS returns to block and analyzes additional network traffic. Blocks are discussed with reference to . illustrates exemplary groups of network packets and exemplary meta expression . Meta expression may be one of the meta expressions that were created during training block of . The length of meta expression is shortened for simplicity. As shown groups of network packets and contain all of the integers of meta expression in the same order in which the integers appear in meta expression . Thus groups of network packets and are considered abnormal. Groups of network packets and do not contain all of the ordered integers of meta expression . Thus groups of network packets and are considered normal.

As is evident from the preceding discussion at block a UTMS performs many integer comparisons. Thus optimization of integer comparisons is important to the efficiency of the UTMS. Recall that a set of network traffic is considered to be normal at the first instance in which an integer in the meta expression is absent in the sequence of integers that correspond to the network traffic. Thus the performance of the UTMS is improved if an early normal determination can be made. To this end it is beneficial to structure the technique of block such that the integer comparisons between a sequence of integers and a meta expression terminates as soon as one integer from the meta expression is identified as being absent in the sequence of integers.

In one embodiment block employs a nested computer programming language expression that returns an overall value of failure e.g. a Boolean value when any one of the nested levels returns a false condition. Thus as soon as a UTMS identifies the absence of one integer at any one of the nested levels processing of the entire nested computer programming language expression terminates. The corresponding set of network traffic is thus identified as being normal in which case no additional threat detection is necessary and a subsequent set of network traffic can be analyzed. For example the LISP computer programming language allows for a nested expression in the form A B C D that returns an overall value of failure if any one of expressions A B C and or D is false . In this example the expression A may query whether the first integer in a meta expression appears in a sequence of integers and the expression B may query whether the second integer in the meta expression appears in the sequence of integers so forth.

At block appropriate responses may be generated. One appropriate response may be a user or system alert that indicates the presence of a network activity of interest. Another appropriate response may be to scrub the response from the compromised network node such that the intruding network node remains unaware of the successful intrusion. Yet another appropriate response may be to cloak the network node that is targeted for intrusion so that the intruding network node can no longer reach the target network node.

Portions of process may be implemented in exemplary computing system illustrated in . In some embodiments computing system is a network device such as a router gateway and a firewall or the like. In some embodiments computing system is a gateway device such as a modem or the like. In some embodiments computing system is a mobile device such as a desktop computer a laptop computer a cellular phone a tablet or the like. In some embodiments computing system is a network interface card . Notably the training aspects of process i.e. block and the run time aspects of process i.e. blocks may be implemented onto the same or onto different computing systems.

As shown in the computing system includes a computer motherboard with bus that connects I O section one or more central processing units CPU and a memory section together. Memory section may have memory module related to it. Memory module may be for example a flash memory and or a removable memory device. The I O section is connected to network interface which receives and or transmits network packets. I O section may be connected to display input device and or storage unit . Memory section memory module and or storage unit can store e.g. tangibly embody computer readable medium that contain computer executable instructions and or data for performing any one of the above described processes using CPU . The computer executable instructions may be written for example in a general purpose programming language e.g. LISP C or some specialized application specific language. Input device may be a USB port supporting input from USB compliant devices such as a keyboard a mouse a memory stick or the like. At least some values based on the results of the above described processes can be saved into memory such as memory memory module and or disk storage unit for subsequent use.

Portions of process also may be implemented into a processor by way of specifically arranged integrated circuits e.g. application specific integrated circuits . In some embodiments the integrated circuit can be part of the main processor of a device such as the main processor of a cellular phone. In some embodiments the integrated circuit can be part of an auxiliary processor of a device such as a processor that is connected to the motherboard of a laptop. The integrated circuits can contain computer executable instructions and or data for perform any one of the above described processes. The computer executable instructions may be written for example in a specialized application specific e.g. processor specific language.

In some embodiments computer executable instructions based on the C programming language that total less than 1 MB are sufficient to carry out process . Execution of these computer executable instructions requires no more than 300 kilobytes 16 bit bytes of run time memory e.g. random access memory . Modern computing systems and or processors are well capable processing computer executable instruction of these sizes. Indeed in these embodiments network interface bandwidth i.e. input bandwidth not processor speed is typically the gating factor to processing even higher volumes of network traffic.

Although only certain exemplary embodiments have been described in detail above those skilled in the art will readily appreciate that many modifications are possible in the exemplary embodiments without materially departing from the novel teachings and advantages of this disclosure. For example aspects of embodiments disclosed above can be combined in other combinations to form additional embodiments. Accordingly all such modifications are intended to be included within the scope of this technology.

